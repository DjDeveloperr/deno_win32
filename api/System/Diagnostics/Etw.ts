/// Auto-generated by Deno Win32: Windows.Win32.System.Diagnostics.Etw.Apis

import * as util from "../../../util.ts";

// Enums
export type TRACE_MESSAGE_FLAGS = number;
export type ENABLECALLBACK_ENABLED_STATE = number;
export type EVENT_TRACE_CONTROL = number;
export type EVENT_TRACE_FLAG = number;
export type WMIDPREQUESTCODE = number;
export type ETW_COMPRESSION_RESUMPTION_MODE = number;
export type ETW_PMC_COUNTER_OWNER_TYPE = number;
export type TRACE_QUERY_INFO_CLASS = number;
export type ETW_PROCESS_HANDLE_INFO_TYPE = number;
export type EVENT_INFO_CLASS = number;
export type ETW_PROVIDER_TRAIT_TYPE = number;
export type EVENTSECURITYOPERATION = number;
export type MAP_FLAGS = number;
export type MAP_VALUETYPE = number;
export type _TDH_IN_TYPE = number;
export type _TDH_OUT_TYPE = number;
export type PROPERTY_FLAGS = number;
export type DECODING_SOURCE = number;
export type TEMPLATE_FLAGS = number;
export type PAYLOAD_OPERATOR = number;
export type EVENT_FIELD_TYPE = number;
export type TDH_CONTEXT_TYPE = number;

// Constants
export const TRACE_MESSAGE_COMPONENTID = 4;
export const TRACE_MESSAGE_GUID = 2;
export const TRACE_MESSAGE_SEQUENCE = 1;
export const TRACE_MESSAGE_SYSTEMINFO = 32;
export const TRACE_MESSAGE_TIMESTAMP = 8;
export const EVENT_CONTROL_CODE_DISABLE_PROVIDER = 0;
export const EVENT_CONTROL_CODE_ENABLE_PROVIDER = 1;
export const EVENT_CONTROL_CODE_CAPTURE_STATE = 2;
export const EVENT_TRACE_CONTROL_FLUSH = 3;
export const EVENT_TRACE_CONTROL_QUERY = 0;
export const EVENT_TRACE_CONTROL_STOP = 1;
export const EVENT_TRACE_CONTROL_UPDATE = 2;
export const EVENT_TRACE_FLAG_ALPC = 1048576;
export const EVENT_TRACE_FLAG_CSWITCH = 16;
export const EVENT_TRACE_FLAG_DBGPRINT = 262144;
export const EVENT_TRACE_FLAG_DISK_FILE_IO = 512;
export const EVENT_TRACE_FLAG_DISK_IO = 256;
export const EVENT_TRACE_FLAG_DISK_IO_INIT = 1024;
export const EVENT_TRACE_FLAG_DISPATCHER = 2048;
export const EVENT_TRACE_FLAG_DPC = 32;
export const EVENT_TRACE_FLAG_DRIVER = 8388608;
export const EVENT_TRACE_FLAG_FILE_IO = 33554432;
export const EVENT_TRACE_FLAG_FILE_IO_INIT = 67108864;
export const EVENT_TRACE_FLAG_IMAGE_LOAD = 4;
export const EVENT_TRACE_FLAG_INTERRUPT = 64;
export const EVENT_TRACE_FLAG_JOB = 524288;
export const EVENT_TRACE_FLAG_MEMORY_HARD_FAULTS = 8192;
export const EVENT_TRACE_FLAG_MEMORY_PAGE_FAULTS = 4096;
export const EVENT_TRACE_FLAG_NETWORK_TCPIP = 65536;
export const EVENT_TRACE_FLAG_NO_SYSCONFIG = 268435456;
export const EVENT_TRACE_FLAG_PROCESS = 1;
export const EVENT_TRACE_FLAG_PROCESS_COUNTERS = 8;
export const EVENT_TRACE_FLAG_PROFILE = 16777216;
export const EVENT_TRACE_FLAG_REGISTRY = 131072;
export const EVENT_TRACE_FLAG_SPLIT_IO = 2097152;
export const EVENT_TRACE_FLAG_SYSTEMCALL = 128;
export const EVENT_TRACE_FLAG_THREAD = 2;
export const EVENT_TRACE_FLAG_VAMAP = 32768;
export const EVENT_TRACE_FLAG_VIRTUAL_ALLOC = 16384;
export const WNODE_FLAG_ALL_DATA = 1;
export const WNODE_FLAG_SINGLE_INSTANCE = 2;
export const WNODE_FLAG_SINGLE_ITEM = 4;
export const WNODE_FLAG_EVENT_ITEM = 8;
export const WNODE_FLAG_FIXED_INSTANCE_SIZE = 16;
export const WNODE_FLAG_TOO_SMALL = 32;
export const WNODE_FLAG_INSTANCES_SAME = 64;
export const WNODE_FLAG_STATIC_INSTANCE_NAMES = 128;
export const WNODE_FLAG_INTERNAL = 256;
export const WNODE_FLAG_USE_TIMESTAMP = 512;
export const WNODE_FLAG_PERSIST_EVENT = 1024;
export const WNODE_FLAG_EVENT_REFERENCE = 8192;
export const WNODE_FLAG_ANSI_INSTANCENAMES = 16384;
export const WNODE_FLAG_METHOD_ITEM = 32768;
export const WNODE_FLAG_PDO_INSTANCE_NAMES = 65536;
export const WNODE_FLAG_TRACED_GUID = 131072;
export const WNODE_FLAG_LOG_WNODE = 262144;
export const WNODE_FLAG_USE_GUID_PTR = 524288;
export const WNODE_FLAG_USE_MOF_PTR = 1048576;
export const WNODE_FLAG_NO_HEADER = 2097152;
export const WNODE_FLAG_SEND_DATA_BLOCK = 4194304;
export const WNODE_FLAG_VERSIONED_PROPERTIES = 8388608;
export const WNODE_FLAG_SEVERITY_MASK = 4278190080;
export const WMIREG_FLAG_EXPENSIVE = 1;
export const WMIREG_FLAG_INSTANCE_LIST = 4;
export const WMIREG_FLAG_INSTANCE_BASENAME = 8;
export const WMIREG_FLAG_INSTANCE_PDO = 32;
export const WMIREG_FLAG_REMOVE_GUID = 65536;
export const WMIREG_FLAG_RESERVED1 = 131072;
export const WMIREG_FLAG_RESERVED2 = 262144;
export const WMIREG_FLAG_TRACED_GUID = 524288;
export const WMIREG_FLAG_TRACE_CONTROL_GUID = 4096;
export const WMIREG_FLAG_EVENT_ONLY_GUID = 64;
export const WMI_GUIDTYPE_TRACECONTROL = 0;
export const WMI_GUIDTYPE_TRACE = 1;
export const WMI_GUIDTYPE_DATA = 2;
export const WMI_GUIDTYPE_EVENT = 3;
export const WMIGUID_QUERY = 1;
export const WMIGUID_SET = 2;
export const WMIGUID_NOTIFICATION = 4;
export const WMIGUID_READ_DESCRIPTION = 8;
export const WMIGUID_EXECUTE = 16;
export const TRACELOG_CREATE_REALTIME = 32;
export const TRACELOG_CREATE_ONDISK = 64;
export const TRACELOG_GUID_ENABLE = 128;
export const TRACELOG_ACCESS_KERNEL_LOGGER = 256;
export const TRACELOG_LOG_EVENT = 512;
export const TRACELOG_CREATE_INPROC = 512;
export const TRACELOG_ACCESS_REALTIME = 1024;
export const TRACELOG_REGISTER_GUIDS = 2048;
export const TRACELOG_JOIN_GROUP = 4096;
export const WMI_GLOBAL_LOGGER_ID = 1;
export const MAX_PAYLOAD_PREDICATES = 8;
export const MAX_MOF_FIELDS = 16;
export const SYSTEM_EVENT_TYPE = 1;
export const EVENT_TRACE_TYPE_INFO = 0;
export const EVENT_TRACE_TYPE_START = 1;
export const EVENT_TRACE_TYPE_END = 2;
export const EVENT_TRACE_TYPE_STOP = 2;
export const EVENT_TRACE_TYPE_DC_START = 3;
export const EVENT_TRACE_TYPE_DC_END = 4;
export const EVENT_TRACE_TYPE_EXTENSION = 5;
export const EVENT_TRACE_TYPE_REPLY = 6;
export const EVENT_TRACE_TYPE_DEQUEUE = 7;
export const EVENT_TRACE_TYPE_RESUME = 7;
export const EVENT_TRACE_TYPE_CHECKPOINT = 8;
export const EVENT_TRACE_TYPE_SUSPEND = 8;
export const EVENT_TRACE_TYPE_WINEVT_SEND = 9;
export const EVENT_TRACE_TYPE_WINEVT_RECEIVE = 240;
export const TRACE_LEVEL_NONE = 0;
export const TRACE_LEVEL_CRITICAL = 1;
export const TRACE_LEVEL_FATAL = 1;
export const TRACE_LEVEL_ERROR = 2;
export const TRACE_LEVEL_WARNING = 3;
export const TRACE_LEVEL_INFORMATION = 4;
export const TRACE_LEVEL_VERBOSE = 5;
export const TRACE_LEVEL_RESERVED6 = 6;
export const TRACE_LEVEL_RESERVED7 = 7;
export const TRACE_LEVEL_RESERVED8 = 8;
export const TRACE_LEVEL_RESERVED9 = 9;
export const EVENT_TRACE_TYPE_LOAD = 10;
export const EVENT_TRACE_TYPE_TERMINATE = 11;
export const EVENT_TRACE_TYPE_IO_READ = 10;
export const EVENT_TRACE_TYPE_IO_WRITE = 11;
export const EVENT_TRACE_TYPE_IO_READ_INIT = 12;
export const EVENT_TRACE_TYPE_IO_WRITE_INIT = 13;
export const EVENT_TRACE_TYPE_IO_FLUSH = 14;
export const EVENT_TRACE_TYPE_IO_FLUSH_INIT = 15;
export const EVENT_TRACE_TYPE_IO_REDIRECTED_INIT = 16;
export const EVENT_TRACE_TYPE_MM_TF = 10;
export const EVENT_TRACE_TYPE_MM_DZF = 11;
export const EVENT_TRACE_TYPE_MM_COW = 12;
export const EVENT_TRACE_TYPE_MM_GPF = 13;
export const EVENT_TRACE_TYPE_MM_HPF = 14;
export const EVENT_TRACE_TYPE_MM_AV = 15;
export const EVENT_TRACE_TYPE_SEND = 10;
export const EVENT_TRACE_TYPE_RECEIVE = 11;
export const EVENT_TRACE_TYPE_CONNECT = 12;
export const EVENT_TRACE_TYPE_DISCONNECT = 13;
export const EVENT_TRACE_TYPE_RETRANSMIT = 14;
export const EVENT_TRACE_TYPE_ACCEPT = 15;
export const EVENT_TRACE_TYPE_RECONNECT = 16;
export const EVENT_TRACE_TYPE_CONNFAIL = 17;
export const EVENT_TRACE_TYPE_COPY_TCP = 18;
export const EVENT_TRACE_TYPE_COPY_ARP = 19;
export const EVENT_TRACE_TYPE_ACKFULL = 20;
export const EVENT_TRACE_TYPE_ACKPART = 21;
export const EVENT_TRACE_TYPE_ACKDUP = 22;
export const EVENT_TRACE_TYPE_GUIDMAP = 10;
export const EVENT_TRACE_TYPE_CONFIG = 11;
export const EVENT_TRACE_TYPE_SIDINFO = 12;
export const EVENT_TRACE_TYPE_SECURITY = 13;
export const EVENT_TRACE_TYPE_DBGID_RSDS = 64;
export const EVENT_TRACE_TYPE_REGCREATE = 10;
export const EVENT_TRACE_TYPE_REGOPEN = 11;
export const EVENT_TRACE_TYPE_REGDELETE = 12;
export const EVENT_TRACE_TYPE_REGQUERY = 13;
export const EVENT_TRACE_TYPE_REGSETVALUE = 14;
export const EVENT_TRACE_TYPE_REGDELETEVALUE = 15;
export const EVENT_TRACE_TYPE_REGQUERYVALUE = 16;
export const EVENT_TRACE_TYPE_REGENUMERATEKEY = 17;
export const EVENT_TRACE_TYPE_REGENUMERATEVALUEKEY = 18;
export const EVENT_TRACE_TYPE_REGQUERYMULTIPLEVALUE = 19;
export const EVENT_TRACE_TYPE_REGSETINFORMATION = 20;
export const EVENT_TRACE_TYPE_REGFLUSH = 21;
export const EVENT_TRACE_TYPE_REGKCBCREATE = 22;
export const EVENT_TRACE_TYPE_REGKCBDELETE = 23;
export const EVENT_TRACE_TYPE_REGKCBRUNDOWNBEGIN = 24;
export const EVENT_TRACE_TYPE_REGKCBRUNDOWNEND = 25;
export const EVENT_TRACE_TYPE_REGVIRTUALIZE = 26;
export const EVENT_TRACE_TYPE_REGCLOSE = 27;
export const EVENT_TRACE_TYPE_REGSETSECURITY = 28;
export const EVENT_TRACE_TYPE_REGQUERYSECURITY = 29;
export const EVENT_TRACE_TYPE_REGCOMMIT = 30;
export const EVENT_TRACE_TYPE_REGPREPARE = 31;
export const EVENT_TRACE_TYPE_REGROLLBACK = 32;
export const EVENT_TRACE_TYPE_REGMOUNTHIVE = 33;
export const EVENT_TRACE_TYPE_CONFIG_CPU = 10;
export const EVENT_TRACE_TYPE_CONFIG_PHYSICALDISK = 11;
export const EVENT_TRACE_TYPE_CONFIG_LOGICALDISK = 12;
export const EVENT_TRACE_TYPE_CONFIG_NIC = 13;
export const EVENT_TRACE_TYPE_CONFIG_VIDEO = 14;
export const EVENT_TRACE_TYPE_CONFIG_SERVICES = 15;
export const EVENT_TRACE_TYPE_CONFIG_POWER = 16;
export const EVENT_TRACE_TYPE_CONFIG_NETINFO = 17;
export const EVENT_TRACE_TYPE_CONFIG_OPTICALMEDIA = 18;
export const EVENT_TRACE_TYPE_CONFIG_IRQ = 21;
export const EVENT_TRACE_TYPE_CONFIG_PNP = 22;
export const EVENT_TRACE_TYPE_CONFIG_IDECHANNEL = 23;
export const EVENT_TRACE_TYPE_CONFIG_NUMANODE = 24;
export const EVENT_TRACE_TYPE_CONFIG_PLATFORM = 25;
export const EVENT_TRACE_TYPE_CONFIG_PROCESSORGROUP = 26;
export const EVENT_TRACE_TYPE_CONFIG_PROCESSORNUMBER = 27;
export const EVENT_TRACE_TYPE_CONFIG_DPI = 28;
export const EVENT_TRACE_TYPE_CONFIG_CI_INFO = 29;
export const EVENT_TRACE_TYPE_CONFIG_MACHINEID = 30;
export const EVENT_TRACE_TYPE_CONFIG_DEFRAG = 31;
export const EVENT_TRACE_TYPE_CONFIG_MOBILEPLATFORM = 32;
export const EVENT_TRACE_TYPE_CONFIG_DEVICEFAMILY = 33;
export const EVENT_TRACE_TYPE_CONFIG_FLIGHTID = 34;
export const EVENT_TRACE_TYPE_CONFIG_PROCESSOR = 35;
export const EVENT_TRACE_TYPE_CONFIG_VIRTUALIZATION = 36;
export const EVENT_TRACE_TYPE_CONFIG_BOOT = 37;
export const EVENT_TRACE_TYPE_OPTICAL_IO_READ = 55;
export const EVENT_TRACE_TYPE_OPTICAL_IO_WRITE = 56;
export const EVENT_TRACE_TYPE_OPTICAL_IO_FLUSH = 57;
export const EVENT_TRACE_TYPE_OPTICAL_IO_READ_INIT = 58;
export const EVENT_TRACE_TYPE_OPTICAL_IO_WRITE_INIT = 59;
export const EVENT_TRACE_TYPE_OPTICAL_IO_FLUSH_INIT = 60;
export const EVENT_TRACE_TYPE_FLT_PREOP_INIT = 96;
export const EVENT_TRACE_TYPE_FLT_POSTOP_INIT = 97;
export const EVENT_TRACE_TYPE_FLT_PREOP_COMPLETION = 98;
export const EVENT_TRACE_TYPE_FLT_POSTOP_COMPLETION = 99;
export const EVENT_TRACE_TYPE_FLT_PREOP_FAILURE = 100;
export const EVENT_TRACE_TYPE_FLT_POSTOP_FAILURE = 101;
export const EVENT_TRACE_FLAG_DEBUG_EVENTS = 4194304;
export const EVENT_TRACE_FLAG_EXTENSION = 2147483648;
export const EVENT_TRACE_FLAG_FORWARD_WMI = 1073741824;
export const EVENT_TRACE_FLAG_ENABLE_RESERVE = 536870912;
export const EVENT_TRACE_FILE_MODE_NONE = 0;
export const EVENT_TRACE_FILE_MODE_SEQUENTIAL = 1;
export const EVENT_TRACE_FILE_MODE_CIRCULAR = 2;
export const EVENT_TRACE_FILE_MODE_APPEND = 4;
export const EVENT_TRACE_REAL_TIME_MODE = 256;
export const EVENT_TRACE_DELAY_OPEN_FILE_MODE = 512;
export const EVENT_TRACE_BUFFERING_MODE = 1024;
export const EVENT_TRACE_PRIVATE_LOGGER_MODE = 2048;
export const EVENT_TRACE_ADD_HEADER_MODE = 4096;
export const EVENT_TRACE_USE_GLOBAL_SEQUENCE = 16384;
export const EVENT_TRACE_USE_LOCAL_SEQUENCE = 32768;
export const EVENT_TRACE_RELOG_MODE = 65536;
export const EVENT_TRACE_USE_PAGED_MEMORY = 16777216;
export const EVENT_TRACE_FILE_MODE_NEWFILE = 8;
export const EVENT_TRACE_FILE_MODE_PREALLOCATE = 32;
export const EVENT_TRACE_NONSTOPPABLE_MODE = 64;
export const EVENT_TRACE_SECURE_MODE = 128;
export const EVENT_TRACE_USE_KBYTES_FOR_SIZE = 8192;
export const EVENT_TRACE_PRIVATE_IN_PROC = 131072;
export const EVENT_TRACE_MODE_RESERVED = 1048576;
export const EVENT_TRACE_NO_PER_PROCESSOR_BUFFERING = 268435456;
export const EVENT_TRACE_SYSTEM_LOGGER_MODE = 33554432;
export const EVENT_TRACE_ADDTO_TRIAGE_DUMP = 2147483648;
export const EVENT_TRACE_STOP_ON_HYBRID_SHUTDOWN = 4194304;
export const EVENT_TRACE_PERSIST_ON_HYBRID_SHUTDOWN = 8388608;
export const EVENT_TRACE_INDEPENDENT_SESSION_MODE = 134217728;
export const EVENT_TRACE_COMPRESSED_MODE = 67108864;
export const EVENT_TRACE_CONTROL_INCREMENT_FILE = 4;
export const EVENT_TRACE_CONTROL_CONVERT_TO_REALTIME = 5;
export const TRACE_MESSAGE_PERFORMANCE_TIMESTAMP = 16;
export const TRACE_MESSAGE_POINTER32 = 64;
export const TRACE_MESSAGE_POINTER64 = 128;
export const TRACE_MESSAGE_FLAG_MASK = 65535;
export const EVENT_TRACE_USE_PROCTIME = 1;
export const EVENT_TRACE_USE_NOCPUTIME = 2;
export const TRACE_HEADER_FLAG_USE_TIMESTAMP = 512;
export const TRACE_HEADER_FLAG_TRACED_GUID = 131072;
export const TRACE_HEADER_FLAG_LOG_WNODE = 262144;
export const TRACE_HEADER_FLAG_USE_GUID_PTR = 524288;
export const TRACE_HEADER_FLAG_USE_MOF_PTR = 1048576;
export const SYSTEM_ALPC_KW_GENERAL = 1;
export const SYSTEM_CONFIG_KW_SYSTEM = 1;
export const SYSTEM_CONFIG_KW_GRAPHICS = 2;
export const SYSTEM_CONFIG_KW_STORAGE = 4;
export const SYSTEM_CONFIG_KW_NETWORK = 8;
export const SYSTEM_CONFIG_KW_SERVICES = 16;
export const SYSTEM_CONFIG_KW_PNP = 32;
export const SYSTEM_CONFIG_KW_OPTICAL = 64;
export const SYSTEM_CPU_KW_CONFIG = 1;
export const SYSTEM_CPU_KW_CACHE_FLUSH = 2;
export const SYSTEM_CPU_KW_SPEC_CONTROL = 4;
export const SYSTEM_HYPERVISOR_KW_PROFILE = 1;
export const SYSTEM_HYPERVISOR_KW_CALLOUTS = 2;
export const SYSTEM_HYPERVISOR_KW_VTL_CHANGE = 4;
export const SYSTEM_INTERRUPT_KW_GENERAL = 1;
export const SYSTEM_INTERRUPT_KW_CLOCK_INTERRUPT = 2;
export const SYSTEM_INTERRUPT_KW_DPC = 4;
export const SYSTEM_INTERRUPT_KW_DPC_QUEUE = 8;
export const SYSTEM_INTERRUPT_KW_WDF_DPC = 16;
export const SYSTEM_INTERRUPT_KW_WDF_INTERRUPT = 32;
export const SYSTEM_INTERRUPT_KW_IPI = 64;
export const SYSTEM_IO_KW_DISK = 1;
export const SYSTEM_IO_KW_DISK_INIT = 2;
export const SYSTEM_IO_KW_FILENAME = 4;
export const SYSTEM_IO_KW_SPLIT = 8;
export const SYSTEM_IO_KW_FILE = 16;
export const SYSTEM_IO_KW_OPTICAL = 32;
export const SYSTEM_IO_KW_OPTICAL_INIT = 64;
export const SYSTEM_IO_KW_DRIVERS = 128;
export const SYSTEM_IO_KW_CC = 256;
export const SYSTEM_IO_KW_NETWORK = 512;
export const SYSTEM_IOFILTER_KW_GENERAL = 1;
export const SYSTEM_IOFILTER_KW_INIT = 2;
export const SYSTEM_IOFILTER_KW_FASTIO = 4;
export const SYSTEM_IOFILTER_KW_FAILURE = 8;
export const SYSTEM_LOCK_KW_SPINLOCK = 1;
export const SYSTEM_LOCK_KW_SPINLOCK_COUNTERS = 2;
export const SYSTEM_LOCK_KW_SYNC_OBJECTS = 4;
export const SYSTEM_MEMORY_KW_GENERAL = 1;
export const SYSTEM_MEMORY_KW_HARD_FAULTS = 2;
export const SYSTEM_MEMORY_KW_ALL_FAULTS = 4;
export const SYSTEM_MEMORY_KW_POOL = 8;
export const SYSTEM_MEMORY_KW_MEMINFO = 16;
export const SYSTEM_MEMORY_KW_PFSECTION = 32;
export const SYSTEM_MEMORY_KW_MEMINFO_WS = 64;
export const SYSTEM_MEMORY_KW_HEAP = 128;
export const SYSTEM_MEMORY_KW_WS = 256;
export const SYSTEM_MEMORY_KW_CONTMEM_GEN = 512;
export const SYSTEM_MEMORY_KW_VIRTUAL_ALLOC = 1024;
export const SYSTEM_MEMORY_KW_FOOTPRINT = 2048;
export const SYSTEM_MEMORY_KW_SESSION = 4096;
export const SYSTEM_MEMORY_KW_REFSET = 8192;
export const SYSTEM_MEMORY_KW_VAMAP = 16384;
export const SYSTEM_MEMORY_KW_NONTRADEABLE = 32768;
export const SYSTEM_OBJECT_KW_GENERAL = 1;
export const SYSTEM_OBJECT_KW_HANDLE = 2;
export const SYSTEM_POWER_KW_GENERAL = 1;
export const SYSTEM_POWER_KW_HIBER_RUNDOWN = 2;
export const SYSTEM_POWER_KW_PROCESSOR_IDLE = 4;
export const SYSTEM_POWER_KW_IDLE_SELECTION = 8;
export const SYSTEM_POWER_KW_PPM_EXIT_LATENCY = 16;
export const SYSTEM_PROCESS_KW_GENERAL = 1;
export const SYSTEM_PROCESS_KW_INSWAP = 2;
export const SYSTEM_PROCESS_KW_FREEZE = 4;
export const SYSTEM_PROCESS_KW_PERF_COUNTER = 8;
export const SYSTEM_PROCESS_KW_WAKE_COUNTER = 16;
export const SYSTEM_PROCESS_KW_WAKE_DROP = 32;
export const SYSTEM_PROCESS_KW_WAKE_EVENT = 64;
export const SYSTEM_PROCESS_KW_DEBUG_EVENTS = 128;
export const SYSTEM_PROCESS_KW_DBGPRINT = 256;
export const SYSTEM_PROCESS_KW_JOB = 512;
export const SYSTEM_PROCESS_KW_WORKER_THREAD = 1024;
export const SYSTEM_PROCESS_KW_THREAD = 2048;
export const SYSTEM_PROCESS_KW_LOADER = 4096;
export const SYSTEM_PROFILE_KW_GENERAL = 1;
export const SYSTEM_PROFILE_KW_PMC_PROFILE = 2;
export const SYSTEM_REGISTRY_KW_GENERAL = 1;
export const SYSTEM_REGISTRY_KW_HIVE = 2;
export const SYSTEM_REGISTRY_KW_NOTIFICATION = 4;
export const SYSTEM_SCHEDULER_KW_XSCHEDULER = 1;
export const SYSTEM_SCHEDULER_KW_DISPATCHER = 2;
export const SYSTEM_SCHEDULER_KW_KERNEL_QUEUE = 4;
export const SYSTEM_SCHEDULER_KW_SHOULD_YIELD = 8;
export const SYSTEM_SCHEDULER_KW_ANTI_STARVATION = 16;
export const SYSTEM_SCHEDULER_KW_LOAD_BALANCER = 32;
export const SYSTEM_SCHEDULER_KW_AFFINITY = 64;
export const SYSTEM_SCHEDULER_KW_PRIORITY = 128;
export const SYSTEM_SCHEDULER_KW_IDEAL_PROCESSOR = 256;
export const SYSTEM_SCHEDULER_KW_CONTEXT_SWITCH = 512;
export const SYSTEM_SCHEDULER_KW_COMPACT_CSWITCH = 1024;
export const SYSTEM_SYSCALL_KW_GENERAL = 1;
export const SYSTEM_TIMER_KW_GENERAL = 1;
export const SYSTEM_TIMER_KW_CLOCK_TIMER = 2;
export const SYSTEM_MEMORY_POOL_FILTER_ID = 1;
export const ETW_NULL_TYPE_VALUE = 0;
export const ETW_OBJECT_TYPE_VALUE = 1;
export const ETW_STRING_TYPE_VALUE = 2;
export const ETW_SBYTE_TYPE_VALUE = 3;
export const ETW_BYTE_TYPE_VALUE = 4;
export const ETW_INT16_TYPE_VALUE = 5;
export const ETW_UINT16_TYPE_VALUE = 6;
export const ETW_INT32_TYPE_VALUE = 7;
export const ETW_UINT32_TYPE_VALUE = 8;
export const ETW_INT64_TYPE_VALUE = 9;
export const ETW_UINT64_TYPE_VALUE = 10;
export const ETW_CHAR_TYPE_VALUE = 11;
export const ETW_SINGLE_TYPE_VALUE = 12;
export const ETW_DOUBLE_TYPE_VALUE = 13;
export const ETW_BOOLEAN_TYPE_VALUE = 14;
export const ETW_DECIMAL_TYPE_VALUE = 15;
export const ETW_GUID_TYPE_VALUE = 101;
export const ETW_ASCIICHAR_TYPE_VALUE = 102;
export const ETW_ASCIISTRING_TYPE_VALUE = 103;
export const ETW_COUNTED_STRING_TYPE_VALUE = 104;
export const ETW_POINTER_TYPE_VALUE = 105;
export const ETW_SIZET_TYPE_VALUE = 106;
export const ETW_HIDDEN_TYPE_VALUE = 107;
export const ETW_BOOL_TYPE_VALUE = 108;
export const ETW_COUNTED_ANSISTRING_TYPE_VALUE = 109;
export const ETW_REVERSED_COUNTED_STRING_TYPE_VALUE = 110;
export const ETW_REVERSED_COUNTED_ANSISTRING_TYPE_VALUE = 111;
export const ETW_NON_NULL_TERMINATED_STRING_TYPE_VALUE = 112;
export const ETW_REDUCED_ANSISTRING_TYPE_VALUE = 113;
export const ETW_REDUCED_STRING_TYPE_VALUE = 114;
export const ETW_SID_TYPE_VALUE = 115;
export const ETW_VARIANT_TYPE_VALUE = 116;
export const ETW_PTVECTOR_TYPE_VALUE = 117;
export const ETW_WMITIME_TYPE_VALUE = 118;
export const ETW_DATETIME_TYPE_VALUE = 119;
export const ETW_REFRENCE_TYPE_VALUE = 120;
export const TRACE_PROVIDER_FLAG_LEGACY = 1;
export const TRACE_PROVIDER_FLAG_PRE_ENABLE = 2;
export const ENABLE_TRACE_PARAMETERS_VERSION = 1;
export const ENABLE_TRACE_PARAMETERS_VERSION_2 = 2;
export const EVENT_MIN_LEVEL = 0;
export const EVENT_MAX_LEVEL = 255;
export const EVENT_ACTIVITY_CTRL_GET_ID = 1;
export const EVENT_ACTIVITY_CTRL_SET_ID = 2;
export const EVENT_ACTIVITY_CTRL_CREATE_ID = 3;
export const EVENT_ACTIVITY_CTRL_GET_SET_ID = 4;
export const EVENT_ACTIVITY_CTRL_CREATE_SET_ID = 5;
export const MAX_EVENT_DATA_DESCRIPTORS = 128;
export const MAX_EVENT_FILTER_DATA_SIZE = 1024;
export const MAX_EVENT_FILTER_PAYLOAD_SIZE = 4096;
export const MAX_EVENT_FILTER_EVENT_NAME_SIZE = 4096;
export const MAX_EVENT_FILTERS_COUNT = 13;
export const MAX_EVENT_FILTER_PID_COUNT = 8;
export const MAX_EVENT_FILTER_EVENT_ID_COUNT = 64;
export const EVENT_FILTER_TYPE_NONE = 0;
export const EVENT_FILTER_TYPE_SCHEMATIZED = 2147483648;
export const EVENT_FILTER_TYPE_SYSTEM_FLAGS = 2147483649;
export const EVENT_FILTER_TYPE_TRACEHANDLE = 2147483650;
export const EVENT_FILTER_TYPE_PID = 2147483652;
export const EVENT_FILTER_TYPE_EXECUTABLE_NAME = 2147483656;
export const EVENT_FILTER_TYPE_PACKAGE_ID = 2147483664;
export const EVENT_FILTER_TYPE_PACKAGE_APP_ID = 2147483680;
export const EVENT_FILTER_TYPE_PAYLOAD = 2147483904;
export const EVENT_FILTER_TYPE_EVENT_ID = 2147484160;
export const EVENT_FILTER_TYPE_EVENT_NAME = 2147484672;
export const EVENT_FILTER_TYPE_STACKWALK = 2147487744;
export const EVENT_FILTER_TYPE_STACKWALK_NAME = 2147491840;
export const EVENT_FILTER_TYPE_STACKWALK_LEVEL_KW = 2147500032;
export const EVENT_FILTER_TYPE_CONTAINER = 2147516416;
export const EVENT_DATA_DESCRIPTOR_TYPE_NONE = 0;
export const EVENT_DATA_DESCRIPTOR_TYPE_EVENT_METADATA = 1;
export const EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA = 2;
export const EVENT_DATA_DESCRIPTOR_TYPE_TIMESTAMP_OVERRIDE = 3;
export const EVENT_WRITE_FLAG_NO_FAULTING = 1;
export const EVENT_WRITE_FLAG_INPRIVATE = 2;
export const EVENT_HEADER_EXT_TYPE_RELATED_ACTIVITYID = 1;
export const EVENT_HEADER_EXT_TYPE_SID = 2;
export const EVENT_HEADER_EXT_TYPE_TS_ID = 3;
export const EVENT_HEADER_EXT_TYPE_INSTANCE_INFO = 4;
export const EVENT_HEADER_EXT_TYPE_STACK_TRACE32 = 5;
export const EVENT_HEADER_EXT_TYPE_STACK_TRACE64 = 6;
export const EVENT_HEADER_EXT_TYPE_PEBS_INDEX = 7;
export const EVENT_HEADER_EXT_TYPE_PMC_COUNTERS = 8;
export const EVENT_HEADER_EXT_TYPE_PSM_KEY = 9;
export const EVENT_HEADER_EXT_TYPE_EVENT_KEY = 10;
export const EVENT_HEADER_EXT_TYPE_EVENT_SCHEMA_TL = 11;
export const EVENT_HEADER_EXT_TYPE_PROV_TRAITS = 12;
export const EVENT_HEADER_EXT_TYPE_PROCESS_START_KEY = 13;
export const EVENT_HEADER_EXT_TYPE_CONTROL_GUID = 14;
export const EVENT_HEADER_EXT_TYPE_QPC_DELTA = 15;
export const EVENT_HEADER_EXT_TYPE_CONTAINER_ID = 16;
export const EVENT_HEADER_EXT_TYPE_STACK_KEY32 = 17;
export const EVENT_HEADER_EXT_TYPE_STACK_KEY64 = 18;
export const EVENT_HEADER_EXT_TYPE_MAX = 19;
export const EVENT_HEADER_PROPERTY_XML = 1;
export const EVENT_HEADER_PROPERTY_FORWARDED_XML = 2;
export const EVENT_HEADER_PROPERTY_LEGACY_EVENTLOG = 4;
export const EVENT_HEADER_PROPERTY_RELOGGABLE = 8;
export const EVENT_HEADER_FLAG_EXTENDED_INFO = 1;
export const EVENT_HEADER_FLAG_PRIVATE_SESSION = 2;
export const EVENT_HEADER_FLAG_STRING_ONLY = 4;
export const EVENT_HEADER_FLAG_TRACE_MESSAGE = 8;
export const EVENT_HEADER_FLAG_NO_CPUTIME = 16;
export const EVENT_HEADER_FLAG_32_BIT_HEADER = 32;
export const EVENT_HEADER_FLAG_64_BIT_HEADER = 64;
export const EVENT_HEADER_FLAG_DECODE_GUID = 128;
export const EVENT_HEADER_FLAG_CLASSIC_HEADER = 256;
export const EVENT_HEADER_FLAG_PROCESSOR_INDEX = 512;
export const EVENT_ENABLE_PROPERTY_SID = 1;
export const EVENT_ENABLE_PROPERTY_TS_ID = 2;
export const EVENT_ENABLE_PROPERTY_STACK_TRACE = 4;
export const EVENT_ENABLE_PROPERTY_PSM_KEY = 8;
export const EVENT_ENABLE_PROPERTY_IGNORE_KEYWORD_0 = 16;
export const EVENT_ENABLE_PROPERTY_PROVIDER_GROUP = 32;
export const EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0 = 64;
export const EVENT_ENABLE_PROPERTY_PROCESS_START_KEY = 128;
export const EVENT_ENABLE_PROPERTY_EVENT_KEY = 256;
export const EVENT_ENABLE_PROPERTY_EXCLUDE_INPRIVATE = 512;
export const EVENT_ENABLE_PROPERTY_ENABLE_SILOS = 1024;
export const EVENT_ENABLE_PROPERTY_SOURCE_CONTAINER_TRACKING = 2048;
export const PROCESS_TRACE_MODE_REAL_TIME = 256;
export const PROCESS_TRACE_MODE_RAW_TIMESTAMP = 4096;
export const PROCESS_TRACE_MODE_EVENT_RECORD = 268435456;
export const WMI_GET_ALL_DATA = 0;
export const WMI_GET_SINGLE_INSTANCE = 1;
export const WMI_SET_SINGLE_INSTANCE = 2;
export const WMI_SET_SINGLE_ITEM = 3;
export const WMI_ENABLE_EVENTS = 4;
export const WMI_DISABLE_EVENTS = 5;
export const WMI_ENABLE_COLLECTION = 6;
export const WMI_DISABLE_COLLECTION = 7;
export const WMI_REGINFO = 8;
export const WMI_EXECUTE_METHOD = 9;
export const WMI_CAPTURE_STATE = 10;
export const EtwCompressionModeRestart = 0;
export const EtwCompressionModeNoDisable = 1;
export const EtwCompressionModeNoRestart = 2;
export const EtwPmcOwnerFree = 0;
export const EtwPmcOwnerUntagged = 1;
export const EtwPmcOwnerTagged = 2;
export const EtwPmcOwnerTaggedWithSource = 3;
export const TraceGuidQueryList = 0;
export const TraceGuidQueryInfo = 1;
export const TraceGuidQueryProcess = 2;
export const TraceStackTracingInfo = 3;
export const TraceSystemTraceEnableFlagsInfo = 4;
export const TraceSampledProfileIntervalInfo = 5;
export const TraceProfileSourceConfigInfo = 6;
export const TraceProfileSourceListInfo = 7;
export const TracePmcEventListInfo = 8;
export const TracePmcCounterListInfo = 9;
export const TraceSetDisallowList = 10;
export const TraceVersionInfo = 11;
export const TraceGroupQueryList = 12;
export const TraceGroupQueryInfo = 13;
export const TraceDisallowListQuery = 14;
export const TraceInfoReserved15 = 15;
export const TracePeriodicCaptureStateListInfo = 16;
export const TracePeriodicCaptureStateInfo = 17;
export const TraceProviderBinaryTracking = 18;
export const TraceMaxLoggersQuery = 19;
export const TraceLbrConfigurationInfo = 20;
export const TraceLbrEventListInfo = 21;
export const TraceMaxPmcCounterQuery = 22;
export const TraceStreamCount = 23;
export const TraceStackCachingInfo = 24;
export const TracePmcCounterOwners = 25;
export const TraceUnifiedStackCachingInfo = 26;
export const MaxTraceSetInfoClass = 27;
export const EtwQueryPartitionInformation = 1;
export const EtwQueryPartitionInformationV2 = 2;
export const EtwQueryLastDroppedTimes = 3;
export const EtwQueryProcessHandleInfoMax = 4;
export const EventProviderBinaryTrackInfo = 0;
export const EventProviderSetReserved1 = 1;
export const EventProviderSetTraits = 2;
export const EventProviderUseDescriptorType = 3;
export const MaxEventInfo = 4;
export const EtwProviderTraitTypeGroup = 1;
export const EtwProviderTraitDecodeGuid = 2;
export const EtwProviderTraitTypeMax = 3;
export const EventSecuritySetDACL = 0;
export const EventSecuritySetSACL = 1;
export const EventSecurityAddDACL = 2;
export const EventSecurityAddSACL = 3;
export const EventSecurityMax = 4;
export const EVENTMAP_INFO_FLAG_MANIFEST_VALUEMAP = 1;
export const EVENTMAP_INFO_FLAG_MANIFEST_BITMAP = 2;
export const EVENTMAP_INFO_FLAG_MANIFEST_PATTERNMAP = 4;
export const EVENTMAP_INFO_FLAG_WBEM_VALUEMAP = 8;
export const EVENTMAP_INFO_FLAG_WBEM_BITMAP = 16;
export const EVENTMAP_INFO_FLAG_WBEM_FLAG = 32;
export const EVENTMAP_INFO_FLAG_WBEM_NO_MAP = 64;
export const EVENTMAP_ENTRY_VALUETYPE_ULONG = 0;
export const EVENTMAP_ENTRY_VALUETYPE_STRING = 1;
export const TDH_INTYPE_NULL = 0;
export const TDH_INTYPE_UNICODESTRING = 1;
export const TDH_INTYPE_ANSISTRING = 2;
export const TDH_INTYPE_INT8 = 3;
export const TDH_INTYPE_UINT8 = 4;
export const TDH_INTYPE_INT16 = 5;
export const TDH_INTYPE_UINT16 = 6;
export const TDH_INTYPE_INT32 = 7;
export const TDH_INTYPE_UINT32 = 8;
export const TDH_INTYPE_INT64 = 9;
export const TDH_INTYPE_UINT64 = 10;
export const TDH_INTYPE_FLOAT = 11;
export const TDH_INTYPE_DOUBLE = 12;
export const TDH_INTYPE_BOOLEAN = 13;
export const TDH_INTYPE_BINARY = 14;
export const TDH_INTYPE_GUID = 15;
export const TDH_INTYPE_POINTER = 16;
export const TDH_INTYPE_FILETIME = 17;
export const TDH_INTYPE_SYSTEMTIME = 18;
export const TDH_INTYPE_SID = 19;
export const TDH_INTYPE_HEXINT32 = 20;
export const TDH_INTYPE_HEXINT64 = 21;
export const TDH_INTYPE_MANIFEST_COUNTEDSTRING = 22;
export const TDH_INTYPE_MANIFEST_COUNTEDANSISTRING = 23;
export const TDH_INTYPE_RESERVED24 = 24;
export const TDH_INTYPE_MANIFEST_COUNTEDBINARY = 25;
export const TDH_INTYPE_COUNTEDSTRING = 300;
export const TDH_INTYPE_COUNTEDANSISTRING = 301;
export const TDH_INTYPE_REVERSEDCOUNTEDSTRING = 302;
export const TDH_INTYPE_REVERSEDCOUNTEDANSISTRING = 303;
export const TDH_INTYPE_NONNULLTERMINATEDSTRING = 304;
export const TDH_INTYPE_NONNULLTERMINATEDANSISTRING = 305;
export const TDH_INTYPE_UNICODECHAR = 306;
export const TDH_INTYPE_ANSICHAR = 307;
export const TDH_INTYPE_SIZET = 308;
export const TDH_INTYPE_HEXDUMP = 309;
export const TDH_INTYPE_WBEMSID = 310;
export const TDH_OUTTYPE_NULL = 0;
export const TDH_OUTTYPE_STRING = 1;
export const TDH_OUTTYPE_DATETIME = 2;
export const TDH_OUTTYPE_BYTE = 3;
export const TDH_OUTTYPE_UNSIGNEDBYTE = 4;
export const TDH_OUTTYPE_SHORT = 5;
export const TDH_OUTTYPE_UNSIGNEDSHORT = 6;
export const TDH_OUTTYPE_INT = 7;
export const TDH_OUTTYPE_UNSIGNEDINT = 8;
export const TDH_OUTTYPE_LONG = 9;
export const TDH_OUTTYPE_UNSIGNEDLONG = 10;
export const TDH_OUTTYPE_FLOAT = 11;
export const TDH_OUTTYPE_DOUBLE = 12;
export const TDH_OUTTYPE_BOOLEAN = 13;
export const TDH_OUTTYPE_GUID = 14;
export const TDH_OUTTYPE_HEXBINARY = 15;
export const TDH_OUTTYPE_HEXINT8 = 16;
export const TDH_OUTTYPE_HEXINT16 = 17;
export const TDH_OUTTYPE_HEXINT32 = 18;
export const TDH_OUTTYPE_HEXINT64 = 19;
export const TDH_OUTTYPE_PID = 20;
export const TDH_OUTTYPE_TID = 21;
export const TDH_OUTTYPE_PORT = 22;
export const TDH_OUTTYPE_IPV4 = 23;
export const TDH_OUTTYPE_IPV6 = 24;
export const TDH_OUTTYPE_SOCKETADDRESS = 25;
export const TDH_OUTTYPE_CIMDATETIME = 26;
export const TDH_OUTTYPE_ETWTIME = 27;
export const TDH_OUTTYPE_XML = 28;
export const TDH_OUTTYPE_ERRORCODE = 29;
export const TDH_OUTTYPE_WIN32ERROR = 30;
export const TDH_OUTTYPE_NTSTATUS = 31;
export const TDH_OUTTYPE_HRESULT = 32;
export const TDH_OUTTYPE_CULTURE_INSENSITIVE_DATETIME = 33;
export const TDH_OUTTYPE_JSON = 34;
export const TDH_OUTTYPE_UTF8 = 35;
export const TDH_OUTTYPE_PKCS7_WITH_TYPE_INFO = 36;
export const TDH_OUTTYPE_CODE_POINTER = 37;
export const TDH_OUTTYPE_DATETIME_UTC = 38;
export const TDH_OUTTYPE_REDUCEDSTRING = 300;
export const TDH_OUTTYPE_NOPRINT = 301;
export const PropertyStruct = 1;
export const PropertyParamLength = 2;
export const PropertyParamCount = 4;
export const PropertyWBEMXmlFragment = 8;
export const PropertyParamFixedLength = 16;
export const PropertyParamFixedCount = 32;
export const PropertyHasTags = 64;
export const PropertyHasCustomSchema = 128;
export const DecodingSourceXMLFile = 0;
export const DecodingSourceWbem = 1;
export const DecodingSourceWPP = 2;
export const DecodingSourceTlg = 3;
export const DecodingSourceMax = 4;
export const TEMPLATE_EVENT_DATA = 1;
export const TEMPLATE_USER_DATA = 2;
export const TEMPLATE_CONTROL_GUID = 4;
export const PAYLOADFIELD_EQ = 0;
export const PAYLOADFIELD_NE = 1;
export const PAYLOADFIELD_LE = 2;
export const PAYLOADFIELD_GT = 3;
export const PAYLOADFIELD_LT = 4;
export const PAYLOADFIELD_GE = 5;
export const PAYLOADFIELD_BETWEEN = 6;
export const PAYLOADFIELD_NOTBETWEEN = 7;
export const PAYLOADFIELD_MODULO = 8;
export const PAYLOADFIELD_CONTAINS = 20;
export const PAYLOADFIELD_DOESNTCONTAIN = 21;
export const PAYLOADFIELD_IS = 30;
export const PAYLOADFIELD_ISNOT = 31;
export const PAYLOADFIELD_INVALID = 32;
export const EventKeywordInformation = 0;
export const EventLevelInformation = 1;
export const EventChannelInformation = 2;
export const EventTaskInformation = 3;
export const EventOpcodeInformation = 4;
export const EventInformationMax = 5;
export const TDH_CONTEXT_WPP_TMFFILE = 0;
export const TDH_CONTEXT_WPP_TMFSEARCHPATH = 1;
export const TDH_CONTEXT_WPP_GMT = 2;
export const TDH_CONTEXT_POINTERSIZE = 3;
export const TDH_CONTEXT_PDB_PATH = 4;
export const TDH_CONTEXT_MAXIMUM = 5;

// Structs

export type TDH_HANDLE = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER (size: 40)
 */
export interface WNODE_HEADER {
  /** u32 */
  BufferSize: number;
  /** u32 */
  ProviderId: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ClientContext: number;
  /** u32 */
  Flags: number;
}

export const sizeofWNODE_HEADER = 40;

export function allocWNODE_HEADER(data?: Partial<WNODE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: u32
  if (data?.ProviderId !== undefined) view.setUint32(4, Number(data.ProviderId), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: pointer
  if (data?.Guid !== undefined) view.setBigUint64(24, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x20: u32
  if (data?.ClientContext !== undefined) view.setUint32(32, Number(data.ClientContext), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.OFFSETINSTANCEDATAANDLENGTH (size: 8)
 */
export interface OFFSETINSTANCEDATAANDLENGTH {
  /** u32 */
  OffsetInstanceData: number;
  /** u32 */
  LengthInstanceData: number;
}

export const sizeofOFFSETINSTANCEDATAANDLENGTH = 8;

export function allocOFFSETINSTANCEDATAANDLENGTH(data?: Partial<OFFSETINSTANCEDATAANDLENGTH>): Uint8Array {
  const buf = new Uint8Array(sizeofOFFSETINSTANCEDATAANDLENGTH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OffsetInstanceData !== undefined) view.setUint32(0, Number(data.OffsetInstanceData), true);
  // 0x04: u32
  if (data?.LengthInstanceData !== undefined) view.setUint32(4, Number(data.LengthInstanceData), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_ALL_DATA (size: 32)
 */
export interface WNODE_ALL_DATA {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataBlockOffset: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  OffsetInstanceNameOffsets: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNODE_ALL_DATA = 32;

export function allocWNODE_ALL_DATA(data?: Partial<WNODE_ALL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_ALL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  // 0x08: u32
  if (data?.DataBlockOffset !== undefined) view.setUint32(8, Number(data.DataBlockOffset), true);
  // 0x0c: u32
  if (data?.InstanceCount !== undefined) view.setUint32(12, Number(data.InstanceCount), true);
  // 0x10: u32
  if (data?.OffsetInstanceNameOffsets !== undefined) view.setUint32(16, Number(data.OffsetInstanceNameOffsets), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_SINGLE_INSTANCE (size: 32)
 */
export interface WNODE_SINGLE_INSTANCE {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OffsetInstanceName: number;
  /** u32 */
  InstanceIndex: number;
  /** u32 */
  DataBlockOffset: number;
  /** u32 */
  SizeDataBlock: number;
  /** array */
  VariableData: Deno.PointerValue | null;
}

export const sizeofWNODE_SINGLE_INSTANCE = 32;

export function allocWNODE_SINGLE_INSTANCE(data?: Partial<WNODE_SINGLE_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_SINGLE_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  // 0x08: u32
  if (data?.OffsetInstanceName !== undefined) view.setUint32(8, Number(data.OffsetInstanceName), true);
  // 0x0c: u32
  if (data?.InstanceIndex !== undefined) view.setUint32(12, Number(data.InstanceIndex), true);
  // 0x10: u32
  if (data?.DataBlockOffset !== undefined) view.setUint32(16, Number(data.DataBlockOffset), true);
  // 0x14: u32
  if (data?.SizeDataBlock !== undefined) view.setUint32(20, Number(data.SizeDataBlock), true);
  // 0x18: pointer
  if (data?.VariableData !== undefined) view.setBigUint64(24, data.VariableData === null ? 0n : BigInt(util.toPointer(data.VariableData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_SINGLE_ITEM (size: 40)
 */
export interface WNODE_SINGLE_ITEM {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OffsetInstanceName: number;
  /** u32 */
  InstanceIndex: number;
  /** u32 */
  ItemId: number;
  /** u32 */
  DataBlockOffset: number;
  /** u32 */
  SizeDataItem: number;
  /** array */
  VariableData: Deno.PointerValue | null;
}

export const sizeofWNODE_SINGLE_ITEM = 40;

export function allocWNODE_SINGLE_ITEM(data?: Partial<WNODE_SINGLE_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_SINGLE_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  // 0x08: u32
  if (data?.OffsetInstanceName !== undefined) view.setUint32(8, Number(data.OffsetInstanceName), true);
  // 0x0c: u32
  if (data?.InstanceIndex !== undefined) view.setUint32(12, Number(data.InstanceIndex), true);
  // 0x10: u32
  if (data?.ItemId !== undefined) view.setUint32(16, Number(data.ItemId), true);
  // 0x14: u32
  if (data?.DataBlockOffset !== undefined) view.setUint32(20, Number(data.DataBlockOffset), true);
  // 0x18: u32
  if (data?.SizeDataItem !== undefined) view.setUint32(24, Number(data.SizeDataItem), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.VariableData !== undefined) view.setBigUint64(32, data.VariableData === null ? 0n : BigInt(util.toPointer(data.VariableData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_METHOD_ITEM (size: 40)
 */
export interface WNODE_METHOD_ITEM {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OffsetInstanceName: number;
  /** u32 */
  InstanceIndex: number;
  /** u32 */
  MethodId: number;
  /** u32 */
  DataBlockOffset: number;
  /** u32 */
  SizeDataBlock: number;
  /** array */
  VariableData: Deno.PointerValue | null;
}

export const sizeofWNODE_METHOD_ITEM = 40;

export function allocWNODE_METHOD_ITEM(data?: Partial<WNODE_METHOD_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_METHOD_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  // 0x08: u32
  if (data?.OffsetInstanceName !== undefined) view.setUint32(8, Number(data.OffsetInstanceName), true);
  // 0x0c: u32
  if (data?.InstanceIndex !== undefined) view.setUint32(12, Number(data.InstanceIndex), true);
  // 0x10: u32
  if (data?.MethodId !== undefined) view.setUint32(16, Number(data.MethodId), true);
  // 0x14: u32
  if (data?.DataBlockOffset !== undefined) view.setUint32(20, Number(data.DataBlockOffset), true);
  // 0x18: u32
  if (data?.SizeDataBlock !== undefined) view.setUint32(24, Number(data.SizeDataBlock), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.VariableData !== undefined) view.setBigUint64(32, data.VariableData === null ? 0n : BigInt(util.toPointer(data.VariableData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_EVENT_ITEM (size: 8)
 */
export interface WNODE_EVENT_ITEM {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNODE_EVENT_ITEM = 8;

export function allocWNODE_EVENT_ITEM(data?: Partial<WNODE_EVENT_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_EVENT_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_EVENT_REFERENCE (size: 32)
 */
export interface WNODE_EVENT_REFERENCE {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  TargetGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TargetDataBlockSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWNODE_EVENT_REFERENCE = 32;

export function allocWNODE_EVENT_REFERENCE(data?: Partial<WNODE_EVENT_REFERENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_EVENT_REFERENCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  // 0x08: pointer
  if (data?.TargetGuid !== undefined) view.setBigUint64(8, data.TargetGuid === null ? 0n : BigInt(util.toPointer(data.TargetGuid)), true);
  // 0x10: u32
  if (data?.TargetDataBlockSize !== undefined) view.setUint32(16, Number(data.TargetDataBlockSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WNODE_TOO_SMALL (size: 16)
 */
export interface WNODE_TOO_SMALL {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  WnodeHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SizeNeeded: number;
}

export const sizeofWNODE_TOO_SMALL = 16;

export function allocWNODE_TOO_SMALL(data?: Partial<WNODE_TOO_SMALL>): Uint8Array {
  const buf = new Uint8Array(sizeofWNODE_TOO_SMALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WnodeHeader !== undefined) view.setBigUint64(0, data.WnodeHeader === null ? 0n : BigInt(util.toPointer(data.WnodeHeader)), true);
  // 0x08: u32
  if (data?.SizeNeeded !== undefined) view.setUint32(8, Number(data.SizeNeeded), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WMIREGGUIDW (size: 24)
 */
export interface WMIREGGUIDW {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  InstanceCount: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWMIREGGUIDW = 24;

export function allocWMIREGGUIDW(data?: Partial<WMIREGGUIDW>): Uint8Array {
  const buf = new Uint8Array(sizeofWMIREGGUIDW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.InstanceCount !== undefined) view.setUint32(12, Number(data.InstanceCount), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.WMIREGINFOW (size: 32)
 */
export interface WMIREGINFOW {
  /** u32 */
  BufferSize: number;
  /** u32 */
  NextWmiRegInfo: number;
  /** u32 */
  RegistryPath: number;
  /** u32 */
  MofResourceName: number;
  /** u32 */
  GuidCount: number;
  /** array */
  WmiRegGuid: Deno.PointerValue | null;
}

export const sizeofWMIREGINFOW = 32;

export function allocWMIREGINFOW(data?: Partial<WMIREGINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWMIREGINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: u32
  if (data?.NextWmiRegInfo !== undefined) view.setUint32(4, Number(data.NextWmiRegInfo), true);
  // 0x08: u32
  if (data?.RegistryPath !== undefined) view.setUint32(8, Number(data.RegistryPath), true);
  // 0x0c: u32
  if (data?.MofResourceName !== undefined) view.setUint32(12, Number(data.MofResourceName), true);
  // 0x10: u32
  if (data?.GuidCount !== undefined) view.setUint32(16, Number(data.GuidCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.WmiRegGuid !== undefined) view.setBigUint64(24, data.WmiRegGuid === null ? 0n : BigInt(util.toPointer(data.WmiRegGuid)), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

/**
 * _Anonymous4_e__Union (size: 16)
 */
export interface _Anonymous4_e__Union {
  /** u32 */
  dwAlphaSrcConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaSrc: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous4_e__Union = 16;

export function alloc_Anonymous4_e__Union(data?: Partial<_Anonymous4_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous4_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaSrcConst !== undefined) view.setUint32(0, Number(data.dwAlphaSrcConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaSrc !== undefined) view.setBigUint64(8, data.lpDDSAlphaSrc === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaSrc)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER (size: 56)
 */
export interface EVENT_TRACE_HEADER {
  /** u16 */
  Size: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ThreadId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_TRACE_HEADER = 56;

export function allocEVENT_TRACE_HEADER(data?: Partial<EVENT_TRACE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u32
  if (data?.ThreadId !== undefined) view.setUint32(24, Number(data.ThreadId), true);
  // 0x1c: u32
  if (data?.ProcessId !== undefined) view.setUint32(28, Number(data.ProcessId), true);
  // 0x20: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(32, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x28: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(40, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x30: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(48, data.Anonymous4 === null ? 0n : BigInt(util.toPointer(data.Anonymous4)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_INSTANCE_HEADER (size: 72)
 */
export interface EVENT_INSTANCE_HEADER {
  /** u16 */
  Size: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ThreadId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  RegHandle: Deno.PointerValue;
  /** u32 */
  InstanceId: number;
  /** u32 */
  ParentInstanceId: number;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ParentRegHandle: Deno.PointerValue;
}

export const sizeofEVENT_INSTANCE_HEADER = 72;

export function allocEVENT_INSTANCE_HEADER(data?: Partial<EVENT_INSTANCE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_INSTANCE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: u32
  if (data?.ThreadId !== undefined) view.setUint32(24, Number(data.ThreadId), true);
  // 0x1c: u32
  if (data?.ProcessId !== undefined) view.setUint32(28, Number(data.ProcessId), true);
  // 0x20: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(32, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x28: u64
  if (data?.RegHandle !== undefined) view.setBigUint64(40, BigInt(data.RegHandle), true);
  // 0x30: u32
  if (data?.InstanceId !== undefined) view.setUint32(48, Number(data.InstanceId), true);
  // 0x34: u32
  if (data?.ParentInstanceId !== undefined) view.setUint32(52, Number(data.ParentInstanceId), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x40: u64
  if (data?.ParentRegHandle !== undefined) view.setBigUint64(64, BigInt(data.ParentRegHandle), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.MOF_FIELD (size: 16)
 */
export interface MOF_FIELD {
  /** u64 */
  DataPtr: Deno.PointerValue;
  /** u32 */
  Length: number;
  /** u32 */
  DataType: number;
}

export const sizeofMOF_FIELD = 16;

export function allocMOF_FIELD(data?: Partial<MOF_FIELD>): Uint8Array {
  const buf = new Uint8Array(sizeofMOF_FIELD);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DataPtr !== undefined) view.setBigUint64(0, BigInt(data.DataPtr), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: u32
  if (data?.DataType !== undefined) view.setUint32(12, Number(data.DataType), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.System.Time.TIME_ZONE_INFORMATION (size: 56)
 */
export interface TIME_ZONE_INFORMATION {
  /** i32 */
  Bias: number;
  /** array */
  StandardName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  StandardDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  StandardBias: number;
  /** array */
  DaylightName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  DaylightDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  DaylightBias: number;
}

export const sizeofTIME_ZONE_INFORMATION = 56;

export function allocTIME_ZONE_INFORMATION(data?: Partial<TIME_ZONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTIME_ZONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Bias !== undefined) view.setInt32(0, Number(data.Bias), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StandardName !== undefined) view.setBigUint64(8, data.StandardName === null ? 0n : BigInt(util.toPointer(data.StandardName)), true);
  // 0x10: pointer
  if (data?.StandardDate !== undefined) view.setBigUint64(16, data.StandardDate === null ? 0n : BigInt(util.toPointer(data.StandardDate)), true);
  // 0x18: i32
  if (data?.StandardBias !== undefined) view.setInt32(24, Number(data.StandardBias), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DaylightName !== undefined) view.setBigUint64(32, data.DaylightName === null ? 0n : BigInt(util.toPointer(data.DaylightName)), true);
  // 0x28: pointer
  if (data?.DaylightDate !== undefined) view.setBigUint64(40, data.DaylightDate === null ? 0n : BigInt(util.toPointer(data.DaylightDate)), true);
  // 0x30: i32
  if (data?.DaylightBias !== undefined) view.setInt32(48, Number(data.DaylightBias), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_LOGFILE_HEADER (size: 112)
 */
export interface TRACE_LOGFILE_HEADER {
  /** u32 */
  BufferSize: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProviderVersion: number;
  /** u32 */
  NumberOfProcessors: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimerResolution: number;
  /** u32 */
  MaximumFileSize: number;
  /** u32 */
  LogFileMode: number;
  /** u32 */
  BuffersWritten: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  LoggerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  LogFileName: string | null;
  /** Windows.Win32.System.Time.TIME_ZONE_INFORMATION */
  TimeZone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BootTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReservedFlags: number;
  /** u32 */
  BuffersLost: number;
}

export const sizeofTRACE_LOGFILE_HEADER = 112;

export function allocTRACE_LOGFILE_HEADER(data?: Partial<TRACE_LOGFILE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_LOGFILE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.ProviderVersion !== undefined) view.setUint32(16, Number(data.ProviderVersion), true);
  // 0x14: u32
  if (data?.NumberOfProcessors !== undefined) view.setUint32(20, Number(data.NumberOfProcessors), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x20: u32
  if (data?.TimerResolution !== undefined) view.setUint32(32, Number(data.TimerResolution), true);
  // 0x24: u32
  if (data?.MaximumFileSize !== undefined) view.setUint32(36, Number(data.MaximumFileSize), true);
  // 0x28: u32
  if (data?.LogFileMode !== undefined) view.setUint32(40, Number(data.LogFileMode), true);
  // 0x2c: u32
  if (data?.BuffersWritten !== undefined) view.setUint32(44, Number(data.BuffersWritten), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x38: buffer
  if (data?.LoggerName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.LoggerName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.LogFileName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.LogFileName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(72, data.TimeZone === null ? 0n : BigInt(util.toPointer(data.TimeZone)), true);
  // 0x50: pointer
  if (data?.BootTime !== undefined) view.setBigUint64(80, data.BootTime === null ? 0n : BigInt(util.toPointer(data.BootTime)), true);
  // 0x58: pointer
  if (data?.PerfFreq !== undefined) view.setBigUint64(88, data.PerfFreq === null ? 0n : BigInt(util.toPointer(data.PerfFreq)), true);
  // 0x60: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(96, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x68: u32
  if (data?.ReservedFlags !== undefined) view.setUint32(104, Number(data.ReservedFlags), true);
  // 0x6c: u32
  if (data?.BuffersLost !== undefined) view.setUint32(108, Number(data.BuffersLost), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_LOGFILE_HEADER32 (size: 104)
 */
export interface TRACE_LOGFILE_HEADER32 {
  /** u32 */
  BufferSize: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProviderVersion: number;
  /** u32 */
  NumberOfProcessors: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimerResolution: number;
  /** u32 */
  MaximumFileSize: number;
  /** u32 */
  LogFileMode: number;
  /** u32 */
  BuffersWritten: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LoggerName: number;
  /** u32 */
  LogFileName: number;
  /** Windows.Win32.System.Time.TIME_ZONE_INFORMATION */
  TimeZone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BootTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReservedFlags: number;
  /** u32 */
  BuffersLost: number;
}

export const sizeofTRACE_LOGFILE_HEADER32 = 104;

export function allocTRACE_LOGFILE_HEADER32(data?: Partial<TRACE_LOGFILE_HEADER32>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_LOGFILE_HEADER32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.ProviderVersion !== undefined) view.setUint32(16, Number(data.ProviderVersion), true);
  // 0x14: u32
  if (data?.NumberOfProcessors !== undefined) view.setUint32(20, Number(data.NumberOfProcessors), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x20: u32
  if (data?.TimerResolution !== undefined) view.setUint32(32, Number(data.TimerResolution), true);
  // 0x24: u32
  if (data?.MaximumFileSize !== undefined) view.setUint32(36, Number(data.MaximumFileSize), true);
  // 0x28: u32
  if (data?.LogFileMode !== undefined) view.setUint32(40, Number(data.LogFileMode), true);
  // 0x2c: u32
  if (data?.BuffersWritten !== undefined) view.setUint32(44, Number(data.BuffersWritten), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x38: u32
  if (data?.LoggerName !== undefined) view.setUint32(56, Number(data.LoggerName), true);
  // 0x3c: u32
  if (data?.LogFileName !== undefined) view.setUint32(60, Number(data.LogFileName), true);
  // 0x40: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(64, data.TimeZone === null ? 0n : BigInt(util.toPointer(data.TimeZone)), true);
  // 0x48: pointer
  if (data?.BootTime !== undefined) view.setBigUint64(72, data.BootTime === null ? 0n : BigInt(util.toPointer(data.BootTime)), true);
  // 0x50: pointer
  if (data?.PerfFreq !== undefined) view.setBigUint64(80, data.PerfFreq === null ? 0n : BigInt(util.toPointer(data.PerfFreq)), true);
  // 0x58: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(88, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x60: u32
  if (data?.ReservedFlags !== undefined) view.setUint32(96, Number(data.ReservedFlags), true);
  // 0x64: u32
  if (data?.BuffersLost !== undefined) view.setUint32(100, Number(data.BuffersLost), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_LOGFILE_HEADER64 (size: 112)
 */
export interface TRACE_LOGFILE_HEADER64 {
  /** u32 */
  BufferSize: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProviderVersion: number;
  /** u32 */
  NumberOfProcessors: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimerResolution: number;
  /** u32 */
  MaximumFileSize: number;
  /** u32 */
  LogFileMode: number;
  /** u32 */
  BuffersWritten: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  LoggerName: Deno.PointerValue;
  /** u64 */
  LogFileName: Deno.PointerValue;
  /** Windows.Win32.System.Time.TIME_ZONE_INFORMATION */
  TimeZone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BootTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PerfFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReservedFlags: number;
  /** u32 */
  BuffersLost: number;
}

export const sizeofTRACE_LOGFILE_HEADER64 = 112;

export function allocTRACE_LOGFILE_HEADER64(data?: Partial<TRACE_LOGFILE_HEADER64>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_LOGFILE_HEADER64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.ProviderVersion !== undefined) view.setUint32(16, Number(data.ProviderVersion), true);
  // 0x14: u32
  if (data?.NumberOfProcessors !== undefined) view.setUint32(20, Number(data.NumberOfProcessors), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x20: u32
  if (data?.TimerResolution !== undefined) view.setUint32(32, Number(data.TimerResolution), true);
  // 0x24: u32
  if (data?.MaximumFileSize !== undefined) view.setUint32(36, Number(data.MaximumFileSize), true);
  // 0x28: u32
  if (data?.LogFileMode !== undefined) view.setUint32(40, Number(data.LogFileMode), true);
  // 0x2c: u32
  if (data?.BuffersWritten !== undefined) view.setUint32(44, Number(data.BuffersWritten), true);
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x38: u64
  if (data?.LoggerName !== undefined) view.setBigUint64(56, BigInt(data.LoggerName), true);
  // 0x40: u64
  if (data?.LogFileName !== undefined) view.setBigUint64(64, BigInt(data.LogFileName), true);
  // 0x48: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(72, data.TimeZone === null ? 0n : BigInt(util.toPointer(data.TimeZone)), true);
  // 0x50: pointer
  if (data?.BootTime !== undefined) view.setBigUint64(80, data.BootTime === null ? 0n : BigInt(util.toPointer(data.BootTime)), true);
  // 0x58: pointer
  if (data?.PerfFreq !== undefined) view.setBigUint64(88, data.PerfFreq === null ? 0n : BigInt(util.toPointer(data.PerfFreq)), true);
  // 0x60: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(96, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x68: u32
  if (data?.ReservedFlags !== undefined) view.setUint32(104, Number(data.ReservedFlags), true);
  // 0x6c: u32
  if (data?.BuffersLost !== undefined) view.setUint32(108, Number(data.BuffersLost), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_INSTANCE_INFO (size: 16)
 */
export interface EVENT_INSTANCE_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  RegHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InstanceId: number;
}

export const sizeofEVENT_INSTANCE_INFO = 16;

export function allocEVENT_INSTANCE_INFO(data?: Partial<EVENT_INSTANCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_INSTANCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RegHandle !== undefined) view.setBigUint64(0, data.RegHandle === null ? 0n : BigInt(util.toPointer(data.RegHandle)), true);
  // 0x08: u32
  if (data?.InstanceId !== undefined) view.setUint32(8, Number(data.InstanceId), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_PROPERTIES (size: 88)
 */
export interface EVENT_TRACE_PROPERTIES {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  Wnode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** u32 */
  MinimumBuffers: number;
  /** u32 */
  MaximumBuffers: number;
  /** u32 */
  MaximumFileSize: number;
  /** u32 */
  LogFileMode: number;
  /** u32 */
  FlushTimer: number;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_FLAG */
  EnableFlags: EVENT_TRACE_FLAG;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfBuffers: number;
  /** u32 */
  FreeBuffers: number;
  /** u32 */
  EventsLost: number;
  /** u32 */
  BuffersWritten: number;
  /** u32 */
  LogBuffersLost: number;
  /** u32 */
  RealTimeBuffersLost: number;
  /** Windows.Win32.Foundation.HANDLE */
  LoggerThreadId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LogFileNameOffset: number;
  /** u32 */
  LoggerNameOffset: number;
}

export const sizeofEVENT_TRACE_PROPERTIES = 88;

export function allocEVENT_TRACE_PROPERTIES(data?: Partial<EVENT_TRACE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Wnode !== undefined) view.setBigUint64(0, data.Wnode === null ? 0n : BigInt(util.toPointer(data.Wnode)), true);
  // 0x08: u32
  if (data?.BufferSize !== undefined) view.setUint32(8, Number(data.BufferSize), true);
  // 0x0c: u32
  if (data?.MinimumBuffers !== undefined) view.setUint32(12, Number(data.MinimumBuffers), true);
  // 0x10: u32
  if (data?.MaximumBuffers !== undefined) view.setUint32(16, Number(data.MaximumBuffers), true);
  // 0x14: u32
  if (data?.MaximumFileSize !== undefined) view.setUint32(20, Number(data.MaximumFileSize), true);
  // 0x18: u32
  if (data?.LogFileMode !== undefined) view.setUint32(24, Number(data.LogFileMode), true);
  // 0x1c: u32
  if (data?.FlushTimer !== undefined) view.setUint32(28, Number(data.FlushTimer), true);
  // 0x20: u32
  if (data?.EnableFlags !== undefined) view.setUint32(32, Number(data.EnableFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: u32
  if (data?.NumberOfBuffers !== undefined) view.setUint32(48, Number(data.NumberOfBuffers), true);
  // 0x34: u32
  if (data?.FreeBuffers !== undefined) view.setUint32(52, Number(data.FreeBuffers), true);
  // 0x38: u32
  if (data?.EventsLost !== undefined) view.setUint32(56, Number(data.EventsLost), true);
  // 0x3c: u32
  if (data?.BuffersWritten !== undefined) view.setUint32(60, Number(data.BuffersWritten), true);
  // 0x40: u32
  if (data?.LogBuffersLost !== undefined) view.setUint32(64, Number(data.LogBuffersLost), true);
  // 0x44: u32
  if (data?.RealTimeBuffersLost !== undefined) view.setUint32(68, Number(data.RealTimeBuffersLost), true);
  // 0x48: pointer
  if (data?.LoggerThreadId !== undefined) view.setBigUint64(72, data.LoggerThreadId === null ? 0n : BigInt(util.toPointer(data.LoggerThreadId)), true);
  // 0x50: u32
  if (data?.LogFileNameOffset !== undefined) view.setUint32(80, Number(data.LogFileNameOffset), true);
  // 0x54: u32
  if (data?.LoggerNameOffset !== undefined) view.setUint32(84, Number(data.LoggerNameOffset), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_PROPERTIES_V2 (size: 120)
 */
export interface EVENT_TRACE_PROPERTIES_V2 {
  /** Windows.Win32.System.Diagnostics.Etw.WNODE_HEADER */
  Wnode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** u32 */
  MinimumBuffers: number;
  /** u32 */
  MaximumBuffers: number;
  /** u32 */
  MaximumFileSize: number;
  /** u32 */
  LogFileMode: number;
  /** u32 */
  FlushTimer: number;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_FLAG */
  EnableFlags: EVENT_TRACE_FLAG;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfBuffers: number;
  /** u32 */
  FreeBuffers: number;
  /** u32 */
  EventsLost: number;
  /** u32 */
  BuffersWritten: number;
  /** u32 */
  LogBuffersLost: number;
  /** u32 */
  RealTimeBuffersLost: number;
  /** Windows.Win32.Foundation.HANDLE */
  LoggerThreadId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LogFileNameOffset: number;
  /** u32 */
  LoggerNameOffset: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FilterDescCount: number;
  /** ptr */
  FilterDesc: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_TRACE_PROPERTIES_V2 = 120;

export function allocEVENT_TRACE_PROPERTIES_V2(data?: Partial<EVENT_TRACE_PROPERTIES_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_PROPERTIES_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Wnode !== undefined) view.setBigUint64(0, data.Wnode === null ? 0n : BigInt(util.toPointer(data.Wnode)), true);
  // 0x08: u32
  if (data?.BufferSize !== undefined) view.setUint32(8, Number(data.BufferSize), true);
  // 0x0c: u32
  if (data?.MinimumBuffers !== undefined) view.setUint32(12, Number(data.MinimumBuffers), true);
  // 0x10: u32
  if (data?.MaximumBuffers !== undefined) view.setUint32(16, Number(data.MaximumBuffers), true);
  // 0x14: u32
  if (data?.MaximumFileSize !== undefined) view.setUint32(20, Number(data.MaximumFileSize), true);
  // 0x18: u32
  if (data?.LogFileMode !== undefined) view.setUint32(24, Number(data.LogFileMode), true);
  // 0x1c: u32
  if (data?.FlushTimer !== undefined) view.setUint32(28, Number(data.FlushTimer), true);
  // 0x20: u32
  if (data?.EnableFlags !== undefined) view.setUint32(32, Number(data.EnableFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x30: u32
  if (data?.NumberOfBuffers !== undefined) view.setUint32(48, Number(data.NumberOfBuffers), true);
  // 0x34: u32
  if (data?.FreeBuffers !== undefined) view.setUint32(52, Number(data.FreeBuffers), true);
  // 0x38: u32
  if (data?.EventsLost !== undefined) view.setUint32(56, Number(data.EventsLost), true);
  // 0x3c: u32
  if (data?.BuffersWritten !== undefined) view.setUint32(60, Number(data.BuffersWritten), true);
  // 0x40: u32
  if (data?.LogBuffersLost !== undefined) view.setUint32(64, Number(data.LogBuffersLost), true);
  // 0x44: u32
  if (data?.RealTimeBuffersLost !== undefined) view.setUint32(68, Number(data.RealTimeBuffersLost), true);
  // 0x48: pointer
  if (data?.LoggerThreadId !== undefined) view.setBigUint64(72, data.LoggerThreadId === null ? 0n : BigInt(util.toPointer(data.LoggerThreadId)), true);
  // 0x50: u32
  if (data?.LogFileNameOffset !== undefined) view.setUint32(80, Number(data.LogFileNameOffset), true);
  // 0x54: u32
  if (data?.LoggerNameOffset !== undefined) view.setUint32(84, Number(data.LoggerNameOffset), true);
  // 0x58: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(88, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x60: u32
  if (data?.FilterDescCount !== undefined) view.setUint32(96, Number(data.FilterDescCount), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.FilterDesc !== undefined) view.setBigUint64(104, data.FilterDesc === null ? 0n : BigInt(util.toPointer(data.FilterDesc)), true);
  // 0x70: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(112, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_GUID_REGISTRATION (size: 16)
 */
export interface TRACE_GUID_REGISTRATION {
  /** ptr */
  Guid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  RegHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRACE_GUID_REGISTRATION = 16;

export function allocTRACE_GUID_REGISTRATION(data?: Partial<TRACE_GUID_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_GUID_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: pointer
  if (data?.RegHandle !== undefined) view.setBigUint64(8, data.RegHandle === null ? 0n : BigInt(util.toPointer(data.RegHandle)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_GUID_PROPERTIES (size: 32)
 */
export interface TRACE_GUID_PROPERTIES {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  GuidType: number;
  /** u32 */
  LoggerId: number;
  /** u32 */
  EnableLevel: number;
  /** u32 */
  EnableFlags: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsEnable: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRACE_GUID_PROPERTIES = 32;

export function allocTRACE_GUID_PROPERTIES(data?: Partial<TRACE_GUID_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_GUID_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.GuidType !== undefined) view.setUint32(8, Number(data.GuidType), true);
  // 0x0c: u32
  if (data?.LoggerId !== undefined) view.setUint32(12, Number(data.LoggerId), true);
  // 0x10: u32
  if (data?.EnableLevel !== undefined) view.setUint32(16, Number(data.EnableLevel), true);
  // 0x14: u32
  if (data?.EnableFlags !== undefined) view.setUint32(20, Number(data.EnableFlags), true);
  // 0x18: pointer
  if (data?.IsEnable !== undefined) view.setBigUint64(24, data.IsEnable === null ? 0n : BigInt(util.toPointer(data.IsEnable)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ETW_BUFFER_CONTEXT (size: 16)
 */
export interface ETW_BUFFER_CONTEXT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  LoggerId: number;
}

export const sizeofETW_BUFFER_CONTEXT = 16;

export function allocETW_BUFFER_CONTEXT(data?: Partial<ETW_BUFFER_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofETW_BUFFER_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.LoggerId !== undefined) view.setUint16(8, Number(data.LoggerId), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_ENABLE_INFO (size: 32)
 */
export interface TRACE_ENABLE_INFO {
  /** u32 */
  IsEnabled: number;
  /** u8 */
  Level: number;
  /** u8 */
  Reserved1: number;
  /** u16 */
  LoggerId: number;
  /** u32 */
  EnableProperty: number;
  /** u32 */
  Reserved2: number;
  /** u64 */
  MatchAnyKeyword: Deno.PointerValue;
  /** u64 */
  MatchAllKeyword: Deno.PointerValue;
}

export const sizeofTRACE_ENABLE_INFO = 32;

export function allocTRACE_ENABLE_INFO(data?: Partial<TRACE_ENABLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_ENABLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IsEnabled !== undefined) view.setUint32(0, Number(data.IsEnabled), true);
  // 0x04: u8
  if (data?.Level !== undefined) view.setUint8(4, Number(data.Level));
  // 0x05: u8
  if (data?.Reserved1 !== undefined) view.setUint8(5, Number(data.Reserved1));
  // 0x06: u16
  if (data?.LoggerId !== undefined) view.setUint16(6, Number(data.LoggerId), true);
  // 0x08: u32
  if (data?.EnableProperty !== undefined) view.setUint32(8, Number(data.EnableProperty), true);
  // 0x0c: u32
  if (data?.Reserved2 !== undefined) view.setUint32(12, Number(data.Reserved2), true);
  // 0x10: u64
  if (data?.MatchAnyKeyword !== undefined) view.setBigUint64(16, BigInt(data.MatchAnyKeyword), true);
  // 0x18: u64
  if (data?.MatchAllKeyword !== undefined) view.setBigUint64(24, BigInt(data.MatchAllKeyword), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_PROVIDER_INSTANCE_INFO (size: 16)
 */
export interface TRACE_PROVIDER_INSTANCE_INFO {
  /** u32 */
  NextOffset: number;
  /** u32 */
  EnableCount: number;
  /** u32 */
  Pid: number;
  /** u32 */
  Flags: number;
}

export const sizeofTRACE_PROVIDER_INSTANCE_INFO = 16;

export function allocTRACE_PROVIDER_INSTANCE_INFO(data?: Partial<TRACE_PROVIDER_INSTANCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_PROVIDER_INSTANCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextOffset !== undefined) view.setUint32(0, Number(data.NextOffset), true);
  // 0x04: u32
  if (data?.EnableCount !== undefined) view.setUint32(4, Number(data.EnableCount), true);
  // 0x08: u32
  if (data?.Pid !== undefined) view.setUint32(8, Number(data.Pid), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_GUID_INFO (size: 8)
 */
export interface TRACE_GUID_INFO {
  /** u32 */
  InstanceCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofTRACE_GUID_INFO = 8;

export function allocTRACE_GUID_INFO(data?: Partial<TRACE_GUID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_GUID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InstanceCount !== undefined) view.setUint32(0, Number(data.InstanceCount), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROFILE_SOURCE_INFO (size: 32)
 */
export interface PROFILE_SOURCE_INFO {
  /** u32 */
  NextEntryOffset: number;
  /** u32 */
  Source: number;
  /** u32 */
  MinInterval: number;
  /** u32 */
  MaxInterval: number;
  /** u64 */
  Reserved: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue | null;
}

export const sizeofPROFILE_SOURCE_INFO = 32;

export function allocPROFILE_SOURCE_INFO(data?: Partial<PROFILE_SOURCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILE_SOURCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NextEntryOffset !== undefined) view.setUint32(0, Number(data.NextEntryOffset), true);
  // 0x04: u32
  if (data?.Source !== undefined) view.setUint32(4, Number(data.Source), true);
  // 0x08: u32
  if (data?.MinInterval !== undefined) view.setUint32(8, Number(data.MinInterval), true);
  // 0x0c: u32
  if (data?.MaxInterval !== undefined) view.setUint32(12, Number(data.MaxInterval), true);
  // 0x10: u64
  if (data?.Reserved !== undefined) view.setBigUint64(16, BigInt(data.Reserved), true);
  // 0x18: pointer
  if (data?.Description !== undefined) view.setBigUint64(24, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ETW_PMC_COUNTER_OWNER (size: 16)
 */
export interface ETW_PMC_COUNTER_OWNER {
  /** Windows.Win32.System.Diagnostics.Etw.ETW_PMC_COUNTER_OWNER_TYPE */
  OwnerType: ETW_PMC_COUNTER_OWNER_TYPE;
  /** u32 */
  ProfileSource: number;
  /** u32 */
  OwnerTag: number;
}

export const sizeofETW_PMC_COUNTER_OWNER = 16;

export function allocETW_PMC_COUNTER_OWNER(data?: Partial<ETW_PMC_COUNTER_OWNER>): Uint8Array {
  const buf = new Uint8Array(sizeofETW_PMC_COUNTER_OWNER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OwnerType !== undefined) view.setInt32(0, Number(data.OwnerType), true);
  // 0x04: u32
  if (data?.ProfileSource !== undefined) view.setUint32(4, Number(data.ProfileSource), true);
  // 0x08: u32
  if (data?.OwnerTag !== undefined) view.setUint32(8, Number(data.OwnerTag), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ETW_PMC_COUNTER_OWNERSHIP_STATUS (size: 16)
 */
export interface ETW_PMC_COUNTER_OWNERSHIP_STATUS {
  /** u32 */
  ProcessorNumber: number;
  /** u32 */
  NumberOfCounters: number;
  /** array */
  CounterOwners: Deno.PointerValue | null;
}

export const sizeofETW_PMC_COUNTER_OWNERSHIP_STATUS = 16;

export function allocETW_PMC_COUNTER_OWNERSHIP_STATUS(data?: Partial<ETW_PMC_COUNTER_OWNERSHIP_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofETW_PMC_COUNTER_OWNERSHIP_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessorNumber !== undefined) view.setUint32(0, Number(data.ProcessorNumber), true);
  // 0x04: u32
  if (data?.NumberOfCounters !== undefined) view.setUint32(4, Number(data.NumberOfCounters), true);
  // 0x08: pointer
  if (data?.CounterOwners !== undefined) view.setBigUint64(8, data.CounterOwners === null ? 0n : BigInt(util.toPointer(data.CounterOwners)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE (size: 48)
 */
export interface EVENT_TRACE {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InstanceId: number;
  /** u32 */
  ParentInstanceId: number;
  /** System.Guid */
  ParentGuid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  MofData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MofLength: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_TRACE = 48;

export function allocEVENT_TRACE(data?: Partial<EVENT_TRACE>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.InstanceId !== undefined) view.setUint32(8, Number(data.InstanceId), true);
  // 0x0c: u32
  if (data?.ParentInstanceId !== undefined) view.setUint32(12, Number(data.ParentInstanceId), true);
  // 0x10: pointer
  if (data?.ParentGuid !== undefined) view.setBigUint64(16, data.ParentGuid === null ? 0n : BigInt(util.toPointer(data.ParentGuid)), true);
  // 0x18: pointer
  if (data?.MofData !== undefined) view.setBigUint64(24, data.MofData === null ? 0n : BigInt(util.toPointer(data.MofData)), true);
  // 0x20: u32
  if (data?.MofLength !== undefined) view.setUint32(32, Number(data.MofLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_LOGFILEW (size: 104)
 */
export interface EVENT_TRACE_LOGFILEW {
  /** Windows.Win32.Foundation.PWSTR */
  LogFileName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  LoggerName: string | null;
  /** i64 */
  CurrentTime: Deno.PointerValue;
  /** u32 */
  BuffersRead: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE */
  CurrentEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.TRACE_LOGFILE_HEADER */
  LogfileHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.PEVENT_TRACE_BUFFER_CALLBACKW */
  BufferCallback: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** u32 */
  Filled: number;
  /** u32 */
  EventsLost: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IsKernelTrace: number;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEVENT_TRACE_LOGFILEW = 104;

export function allocEVENT_TRACE_LOGFILEW(data?: Partial<EVENT_TRACE_LOGFILEW>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_LOGFILEW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.LogFileName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.LogFileName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.LoggerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.LoggerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i64
  if (data?.CurrentTime !== undefined) view.setBigInt64(16, BigInt(data.CurrentTime), true);
  // 0x18: u32
  if (data?.BuffersRead !== undefined) view.setUint32(24, Number(data.BuffersRead), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(32, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x28: pointer
  if (data?.CurrentEvent !== undefined) view.setBigUint64(40, data.CurrentEvent === null ? 0n : BigInt(util.toPointer(data.CurrentEvent)), true);
  // 0x30: pointer
  if (data?.LogfileHeader !== undefined) view.setBigUint64(48, data.LogfileHeader === null ? 0n : BigInt(util.toPointer(data.LogfileHeader)), true);
  // 0x38: pointer
  if (data?.BufferCallback !== undefined) view.setBigUint64(56, data.BufferCallback === null ? 0n : BigInt(util.toPointer(data.BufferCallback)), true);
  // 0x40: u32
  if (data?.BufferSize !== undefined) view.setUint32(64, Number(data.BufferSize), true);
  // 0x44: u32
  if (data?.Filled !== undefined) view.setUint32(68, Number(data.Filled), true);
  // 0x48: u32
  if (data?.EventsLost !== undefined) view.setUint32(72, Number(data.EventsLost), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(80, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x58: u32
  if (data?.IsKernelTrace !== undefined) view.setUint32(88, Number(data.IsKernelTrace), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Context !== undefined) view.setBigUint64(96, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_LOGFILEA (size: 104)
 */
export interface EVENT_TRACE_LOGFILEA {
  /** Windows.Win32.Foundation.PSTR */
  LogFileName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  LoggerName: string | null;
  /** i64 */
  CurrentTime: Deno.PointerValue;
  /** u32 */
  BuffersRead: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE */
  CurrentEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.TRACE_LOGFILE_HEADER */
  LogfileHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.PEVENT_TRACE_BUFFER_CALLBACKA */
  BufferCallback: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BufferSize: number;
  /** u32 */
  Filled: number;
  /** u32 */
  EventsLost: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IsKernelTrace: number;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEVENT_TRACE_LOGFILEA = 104;

export function allocEVENT_TRACE_LOGFILEA(data?: Partial<EVENT_TRACE_LOGFILEA>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_TRACE_LOGFILEA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.LogFileName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.LogFileName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.LoggerName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.LoggerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i64
  if (data?.CurrentTime !== undefined) view.setBigInt64(16, BigInt(data.CurrentTime), true);
  // 0x18: u32
  if (data?.BuffersRead !== undefined) view.setUint32(24, Number(data.BuffersRead), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(32, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x28: pointer
  if (data?.CurrentEvent !== undefined) view.setBigUint64(40, data.CurrentEvent === null ? 0n : BigInt(util.toPointer(data.CurrentEvent)), true);
  // 0x30: pointer
  if (data?.LogfileHeader !== undefined) view.setBigUint64(48, data.LogfileHeader === null ? 0n : BigInt(util.toPointer(data.LogfileHeader)), true);
  // 0x38: pointer
  if (data?.BufferCallback !== undefined) view.setBigUint64(56, data.BufferCallback === null ? 0n : BigInt(util.toPointer(data.BufferCallback)), true);
  // 0x40: u32
  if (data?.BufferSize !== undefined) view.setUint32(64, Number(data.BufferSize), true);
  // 0x44: u32
  if (data?.Filled !== undefined) view.setUint32(68, Number(data.Filled), true);
  // 0x48: u32
  if (data?.EventsLost !== undefined) view.setUint32(72, Number(data.EventsLost), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(80, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x58: u32
  if (data?.IsKernelTrace !== undefined) view.setUint32(88, Number(data.IsKernelTrace), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Context !== undefined) view.setBigUint64(96, data.Context === null ? 0n : BigInt(util.toPointer(data.Context)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ENABLE_TRACE_PARAMETERS_V1 (size: 32)
 */
export interface ENABLE_TRACE_PARAMETERS_V1 {
  /** u32 */
  Version: number;
  /** u32 */
  EnableProperty: number;
  /** u32 */
  ControlFlags: number;
  /** System.Guid */
  SourceId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  EnableFilterDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofENABLE_TRACE_PARAMETERS_V1 = 32;

export function allocENABLE_TRACE_PARAMETERS_V1(data?: Partial<ENABLE_TRACE_PARAMETERS_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofENABLE_TRACE_PARAMETERS_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.EnableProperty !== undefined) view.setUint32(4, Number(data.EnableProperty), true);
  // 0x08: u32
  if (data?.ControlFlags !== undefined) view.setUint32(8, Number(data.ControlFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SourceId !== undefined) view.setBigUint64(16, data.SourceId === null ? 0n : BigInt(util.toPointer(data.SourceId)), true);
  // 0x18: pointer
  if (data?.EnableFilterDesc !== undefined) view.setBigUint64(24, data.EnableFilterDesc === null ? 0n : BigInt(util.toPointer(data.EnableFilterDesc)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ENABLE_TRACE_PARAMETERS (size: 40)
 */
export interface ENABLE_TRACE_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  EnableProperty: number;
  /** u32 */
  ControlFlags: number;
  /** System.Guid */
  SourceId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  EnableFilterDesc: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  FilterDescCount: number;
}

export const sizeofENABLE_TRACE_PARAMETERS = 40;

export function allocENABLE_TRACE_PARAMETERS(data?: Partial<ENABLE_TRACE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofENABLE_TRACE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.EnableProperty !== undefined) view.setUint32(4, Number(data.EnableProperty), true);
  // 0x08: u32
  if (data?.ControlFlags !== undefined) view.setUint32(8, Number(data.ControlFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SourceId !== undefined) view.setBigUint64(16, data.SourceId === null ? 0n : BigInt(util.toPointer(data.SourceId)), true);
  // 0x18: pointer
  if (data?.EnableFilterDesc !== undefined) view.setBigUint64(24, data.EnableFilterDesc === null ? 0n : BigInt(util.toPointer(data.EnableFilterDesc)), true);
  // 0x20: u32
  if (data?.FilterDescCount !== undefined) view.setUint32(32, Number(data.FilterDescCount), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.CLASSIC_EVENT_ID (size: 24)
 */
export interface CLASSIC_EVENT_ID {
  /** System.Guid */
  EventGuid: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Type: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofCLASSIC_EVENT_ID = 24;

export function allocCLASSIC_EVENT_ID(data?: Partial<CLASSIC_EVENT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCLASSIC_EVENT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventGuid !== undefined) view.setBigUint64(0, data.EventGuid === null ? 0n : BigInt(util.toPointer(data.EventGuid)), true);
  // 0x08: u8
  if (data?.Type !== undefined) view.setUint8(8, Number(data.Type));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_STACK_CACHING_INFO (size: 16)
 */
export interface TRACE_STACK_CACHING_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CacheSize: number;
  /** u32 */
  BucketCount: number;
}

export const sizeofTRACE_STACK_CACHING_INFO = 16;

export function allocTRACE_STACK_CACHING_INFO(data?: Partial<TRACE_STACK_CACHING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_STACK_CACHING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(0, data.Enabled === null ? 0n : BigInt(util.toPointer(data.Enabled)), true);
  // 0x08: u32
  if (data?.CacheSize !== undefined) view.setUint32(8, Number(data.CacheSize), true);
  // 0x0c: u32
  if (data?.BucketCount !== undefined) view.setUint32(12, Number(data.BucketCount), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_PROFILE_INTERVAL (size: 8)
 */
export interface TRACE_PROFILE_INTERVAL {
  /** u32 */
  Source: number;
  /** u32 */
  Interval: number;
}

export const sizeofTRACE_PROFILE_INTERVAL = 8;

export function allocTRACE_PROFILE_INTERVAL(data?: Partial<TRACE_PROFILE_INTERVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_PROFILE_INTERVAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Source !== undefined) view.setUint32(0, Number(data.Source), true);
  // 0x04: u32
  if (data?.Interval !== undefined) view.setUint32(4, Number(data.Interval), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_VERSION_INFO (size: 8)
 */
export interface TRACE_VERSION_INFO {
  /** u32 */
  EtwTraceProcessingVersion: number;
  /** u32 */
  Reserved: number;
}

export const sizeofTRACE_VERSION_INFO = 8;

export function allocTRACE_VERSION_INFO(data?: Partial<TRACE_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EtwTraceProcessingVersion !== undefined) view.setUint32(0, Number(data.EtwTraceProcessingVersion), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_PERIODIC_CAPTURE_STATE_INFO (size: 8)
 */
export interface TRACE_PERIODIC_CAPTURE_STATE_INFO {
  /** u32 */
  CaptureStateFrequencyInSeconds: number;
  /** u16 */
  ProviderCount: number;
  /** u16 */
  Reserved: number;
}

export const sizeofTRACE_PERIODIC_CAPTURE_STATE_INFO = 8;

export function allocTRACE_PERIODIC_CAPTURE_STATE_INFO(data?: Partial<TRACE_PERIODIC_CAPTURE_STATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_PERIODIC_CAPTURE_STATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CaptureStateFrequencyInSeconds !== undefined) view.setUint32(0, Number(data.CaptureStateFrequencyInSeconds), true);
  // 0x04: u16
  if (data?.ProviderCount !== undefined) view.setUint16(4, Number(data.ProviderCount), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ETW_TRACE_PARTITION_INFORMATION (size: 32)
 */
export interface ETW_TRACE_PARTITION_INFORMATION {
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ParentId: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QpcOffsetFromRoot: Deno.PointerValue;
  /** u32 */
  PartitionType: number;
}

export const sizeofETW_TRACE_PARTITION_INFORMATION = 32;

export function allocETW_TRACE_PARTITION_INFORMATION(data?: Partial<ETW_TRACE_PARTITION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofETW_TRACE_PARTITION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(0, data.PartitionId === null ? 0n : BigInt(util.toPointer(data.PartitionId)), true);
  // 0x08: pointer
  if (data?.ParentId !== undefined) view.setBigUint64(8, data.ParentId === null ? 0n : BigInt(util.toPointer(data.ParentId)), true);
  // 0x10: i64
  if (data?.QpcOffsetFromRoot !== undefined) view.setBigInt64(16, BigInt(data.QpcOffsetFromRoot), true);
  // 0x18: u32
  if (data?.PartitionType !== undefined) view.setUint32(24, Number(data.PartitionType), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.ETW_TRACE_PARTITION_INFORMATION_V2 (size: 32)
 */
export interface ETW_TRACE_PARTITION_INFORMATION_V2 {
  /** i64 */
  QpcOffsetFromRoot: Deno.PointerValue;
  /** u32 */
  PartitionType: number;
  /** Windows.Win32.Foundation.PWSTR */
  PartitionId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ParentId: string | null;
}

export const sizeofETW_TRACE_PARTITION_INFORMATION_V2 = 32;

export function allocETW_TRACE_PARTITION_INFORMATION_V2(data?: Partial<ETW_TRACE_PARTITION_INFORMATION_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofETW_TRACE_PARTITION_INFORMATION_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.QpcOffsetFromRoot !== undefined) view.setBigInt64(0, BigInt(data.QpcOffsetFromRoot), true);
  // 0x08: u32
  if (data?.PartitionType !== undefined) view.setUint32(8, Number(data.PartitionType), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.PartitionId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.PartitionId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ParentId !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ParentId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_DATA_DESCRIPTOR (size: 24)
 */
export interface EVENT_DATA_DESCRIPTOR {
  /** u64 */
  Ptr: Deno.PointerValue;
  /** u32 */
  Size: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_DATA_DESCRIPTOR = 24;

export function allocEVENT_DATA_DESCRIPTOR(data?: Partial<EVENT_DATA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_DATA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Ptr !== undefined) view.setBigUint64(0, BigInt(data.Ptr), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_DESCRIPTOR (size: 16)
 */
export interface EVENT_DESCRIPTOR {
  /** u16 */
  Id: number;
  /** u8 */
  Version: number;
  /** u8 */
  Channel: number;
  /** u8 */
  Level: number;
  /** u8 */
  Opcode: number;
  /** u16 */
  Task: number;
  /** u64 */
  Keyword: Deno.PointerValue;
}

export const sizeofEVENT_DESCRIPTOR = 16;

export function allocEVENT_DESCRIPTOR(data?: Partial<EVENT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Id !== undefined) view.setUint16(0, Number(data.Id), true);
  // 0x02: u8
  if (data?.Version !== undefined) view.setUint8(2, Number(data.Version));
  // 0x03: u8
  if (data?.Channel !== undefined) view.setUint8(3, Number(data.Channel));
  // 0x04: u8
  if (data?.Level !== undefined) view.setUint8(4, Number(data.Level));
  // 0x05: u8
  if (data?.Opcode !== undefined) view.setUint8(5, Number(data.Opcode));
  // 0x06: u16
  if (data?.Task !== undefined) view.setUint16(6, Number(data.Task), true);
  // 0x08: u64
  if (data?.Keyword !== undefined) view.setBigUint64(8, BigInt(data.Keyword), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_FILTER_DESCRIPTOR (size: 16)
 */
export interface EVENT_FILTER_DESCRIPTOR {
  /** u64 */
  Ptr: Deno.PointerValue;
  /** u32 */
  Size: number;
  /** u32 */
  Type: number;
}

export const sizeofEVENT_FILTER_DESCRIPTOR = 16;

export function allocEVENT_FILTER_DESCRIPTOR(data?: Partial<EVENT_FILTER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_FILTER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Ptr !== undefined) view.setBigUint64(0, BigInt(data.Ptr), true);
  // 0x08: u32
  if (data?.Size !== undefined) view.setUint32(8, Number(data.Size), true);
  // 0x0c: u32
  if (data?.Type !== undefined) view.setUint32(12, Number(data.Type), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_FILTER_HEADER (size: 32)
 */
export interface EVENT_FILTER_HEADER {
  /** u16 */
  Id: number;
  /** u8 */
  Version: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u64 */
  InstanceId: Deno.PointerValue;
  /** u32 */
  Size: number;
  /** u32 */
  NextOffset: number;
}

export const sizeofEVENT_FILTER_HEADER = 32;

export function allocEVENT_FILTER_HEADER(data?: Partial<EVENT_FILTER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_FILTER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Id !== undefined) view.setUint16(0, Number(data.Id), true);
  // 0x02: u8
  if (data?.Version !== undefined) view.setUint8(2, Number(data.Version));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u64
  if (data?.InstanceId !== undefined) view.setBigUint64(16, BigInt(data.InstanceId), true);
  // 0x18: u32
  if (data?.Size !== undefined) view.setUint32(24, Number(data.Size), true);
  // 0x1c: u32
  if (data?.NextOffset !== undefined) view.setUint32(28, Number(data.NextOffset), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_FILTER_EVENT_ID (size: 24)
 */
export interface EVENT_FILTER_EVENT_ID {
  /** Windows.Win32.Foundation.BOOLEAN */
  FilterIn: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u16 */
  Count: number;
  /** array */
  Events: Deno.PointerValue | null;
}

export const sizeofEVENT_FILTER_EVENT_ID = 24;

export function allocEVENT_FILTER_EVENT_ID(data?: Partial<EVENT_FILTER_EVENT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_FILTER_EVENT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FilterIn !== undefined) view.setBigUint64(0, data.FilterIn === null ? 0n : BigInt(util.toPointer(data.FilterIn)), true);
  // 0x08: u8
  if (data?.Reserved !== undefined) view.setUint8(8, Number(data.Reserved));
  // 0x09: u16
  if (data?.Count !== undefined) view.setUint16(9, Number(data.Count), true);
  // 0x0b: pad5
  // 0x10: pointer
  if (data?.Events !== undefined) view.setBigUint64(16, data.Events === null ? 0n : BigInt(util.toPointer(data.Events)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_FILTER_EVENT_NAME (size: 48)
 */
export interface EVENT_FILTER_EVENT_NAME {
  /** u64 */
  MatchAnyKeyword: Deno.PointerValue;
  /** u64 */
  MatchAllKeyword: Deno.PointerValue;
  /** u8 */
  Level: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  FilterIn: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  NameCount: number;
  /** array */
  Names: Deno.PointerValue | null;
}

export const sizeofEVENT_FILTER_EVENT_NAME = 48;

export function allocEVENT_FILTER_EVENT_NAME(data?: Partial<EVENT_FILTER_EVENT_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_FILTER_EVENT_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MatchAnyKeyword !== undefined) view.setBigUint64(0, BigInt(data.MatchAnyKeyword), true);
  // 0x08: u64
  if (data?.MatchAllKeyword !== undefined) view.setBigUint64(8, BigInt(data.MatchAllKeyword), true);
  // 0x10: u8
  if (data?.Level !== undefined) view.setUint8(16, Number(data.Level));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.FilterIn !== undefined) view.setBigUint64(24, data.FilterIn === null ? 0n : BigInt(util.toPointer(data.FilterIn)), true);
  // 0x20: u16
  if (data?.NameCount !== undefined) view.setUint16(32, Number(data.NameCount), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.Names !== undefined) view.setBigUint64(40, data.Names === null ? 0n : BigInt(util.toPointer(data.Names)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_FILTER_LEVEL_KW (size: 32)
 */
export interface EVENT_FILTER_LEVEL_KW {
  /** u64 */
  MatchAnyKeyword: Deno.PointerValue;
  /** u64 */
  MatchAllKeyword: Deno.PointerValue;
  /** u8 */
  Level: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  FilterIn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_FILTER_LEVEL_KW = 32;

export function allocEVENT_FILTER_LEVEL_KW(data?: Partial<EVENT_FILTER_LEVEL_KW>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_FILTER_LEVEL_KW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MatchAnyKeyword !== undefined) view.setBigUint64(0, BigInt(data.MatchAnyKeyword), true);
  // 0x08: u64
  if (data?.MatchAllKeyword !== undefined) view.setBigUint64(8, BigInt(data.MatchAllKeyword), true);
  // 0x10: u8
  if (data?.Level !== undefined) view.setUint8(16, Number(data.Level));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.FilterIn !== undefined) view.setBigUint64(24, data.FilterIn === null ? 0n : BigInt(util.toPointer(data.FilterIn)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_HEADER_EXTENDED_DATA_ITEM (size: 32)
 */
export interface EVENT_HEADER_EXTENDED_DATA_ITEM {
  /** u16 */
  Reserved1: number;
  /** u16 */
  ExtType: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  DataSize: number;
  /** u64 */
  DataPtr: Deno.PointerValue;
}

export const sizeofEVENT_HEADER_EXTENDED_DATA_ITEM = 32;

export function allocEVENT_HEADER_EXTENDED_DATA_ITEM(data?: Partial<EVENT_HEADER_EXTENDED_DATA_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_HEADER_EXTENDED_DATA_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Reserved1 !== undefined) view.setUint16(0, Number(data.Reserved1), true);
  // 0x02: u16
  if (data?.ExtType !== undefined) view.setUint16(2, Number(data.ExtType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u16
  if (data?.DataSize !== undefined) view.setUint16(16, Number(data.DataSize), true);
  // 0x12: pad6
  // 0x18: u64
  if (data?.DataPtr !== undefined) view.setBigUint64(24, BigInt(data.DataPtr), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_INSTANCE (size: 16)
 */
export interface EVENT_EXTENDED_ITEM_INSTANCE {
  /** u32 */
  InstanceId: number;
  /** u32 */
  ParentInstanceId: number;
  /** System.Guid */
  ParentGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_EXTENDED_ITEM_INSTANCE = 16;

export function allocEVENT_EXTENDED_ITEM_INSTANCE(data?: Partial<EVENT_EXTENDED_ITEM_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InstanceId !== undefined) view.setUint32(0, Number(data.InstanceId), true);
  // 0x04: u32
  if (data?.ParentInstanceId !== undefined) view.setUint32(4, Number(data.ParentInstanceId), true);
  // 0x08: pointer
  if (data?.ParentGuid !== undefined) view.setBigUint64(8, data.ParentGuid === null ? 0n : BigInt(util.toPointer(data.ParentGuid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID (size: 8)
 */
export interface EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID {
  /** System.Guid */
  RelatedActivityId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_EXTENDED_ITEM_RELATED_ACTIVITYID = 8;

export function allocEVENT_EXTENDED_ITEM_RELATED_ACTIVITYID(data?: Partial<EVENT_EXTENDED_ITEM_RELATED_ACTIVITYID>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_RELATED_ACTIVITYID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RelatedActivityId !== undefined) view.setBigUint64(0, data.RelatedActivityId === null ? 0n : BigInt(util.toPointer(data.RelatedActivityId)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_TS_ID (size: 8)
 */
export interface EVENT_EXTENDED_ITEM_TS_ID {
  /** u32 */
  SessionId: number;
}

export const sizeofEVENT_EXTENDED_ITEM_TS_ID = 8;

export function allocEVENT_EXTENDED_ITEM_TS_ID(data?: Partial<EVENT_EXTENDED_ITEM_TS_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_TS_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionId !== undefined) view.setUint32(0, Number(data.SessionId), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_STACK_TRACE32 (size: 16)
 */
export interface EVENT_EXTENDED_ITEM_STACK_TRACE32 {
  /** u64 */
  MatchId: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofEVENT_EXTENDED_ITEM_STACK_TRACE32 = 16;

export function allocEVENT_EXTENDED_ITEM_STACK_TRACE32(data?: Partial<EVENT_EXTENDED_ITEM_STACK_TRACE32>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_STACK_TRACE32);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MatchId !== undefined) view.setBigUint64(0, BigInt(data.MatchId), true);
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_STACK_TRACE64 (size: 16)
 */
export interface EVENT_EXTENDED_ITEM_STACK_TRACE64 {
  /** u64 */
  MatchId: Deno.PointerValue;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofEVENT_EXTENDED_ITEM_STACK_TRACE64 = 16;

export function allocEVENT_EXTENDED_ITEM_STACK_TRACE64(data?: Partial<EVENT_EXTENDED_ITEM_STACK_TRACE64>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_STACK_TRACE64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MatchId !== undefined) view.setBigUint64(0, BigInt(data.MatchId), true);
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_STACK_KEY32 (size: 16)
 */
export interface EVENT_EXTENDED_ITEM_STACK_KEY32 {
  /** u64 */
  MatchId: Deno.PointerValue;
  /** u32 */
  StackKey: number;
  /** u32 */
  Padding: number;
}

export const sizeofEVENT_EXTENDED_ITEM_STACK_KEY32 = 16;

export function allocEVENT_EXTENDED_ITEM_STACK_KEY32(data?: Partial<EVENT_EXTENDED_ITEM_STACK_KEY32>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_STACK_KEY32);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MatchId !== undefined) view.setBigUint64(0, BigInt(data.MatchId), true);
  // 0x08: u32
  if (data?.StackKey !== undefined) view.setUint32(8, Number(data.StackKey), true);
  // 0x0c: u32
  if (data?.Padding !== undefined) view.setUint32(12, Number(data.Padding), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_STACK_KEY64 (size: 16)
 */
export interface EVENT_EXTENDED_ITEM_STACK_KEY64 {
  /** u64 */
  MatchId: Deno.PointerValue;
  /** u64 */
  StackKey: Deno.PointerValue;
}

export const sizeofEVENT_EXTENDED_ITEM_STACK_KEY64 = 16;

export function allocEVENT_EXTENDED_ITEM_STACK_KEY64(data?: Partial<EVENT_EXTENDED_ITEM_STACK_KEY64>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_STACK_KEY64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MatchId !== undefined) view.setBigUint64(0, BigInt(data.MatchId), true);
  // 0x08: u64
  if (data?.StackKey !== undefined) view.setBigUint64(8, BigInt(data.StackKey), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_PEBS_INDEX (size: 8)
 */
export interface EVENT_EXTENDED_ITEM_PEBS_INDEX {
  /** u64 */
  PebsIndex: Deno.PointerValue;
}

export const sizeofEVENT_EXTENDED_ITEM_PEBS_INDEX = 8;

export function allocEVENT_EXTENDED_ITEM_PEBS_INDEX(data?: Partial<EVENT_EXTENDED_ITEM_PEBS_INDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_PEBS_INDEX);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PebsIndex !== undefined) view.setBigUint64(0, BigInt(data.PebsIndex), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_PMC_COUNTERS (size: 8)
 */
export interface EVENT_EXTENDED_ITEM_PMC_COUNTERS {
  /** array */
  Counter: Deno.PointerValue | null;
}

export const sizeofEVENT_EXTENDED_ITEM_PMC_COUNTERS = 8;

export function allocEVENT_EXTENDED_ITEM_PMC_COUNTERS(data?: Partial<EVENT_EXTENDED_ITEM_PMC_COUNTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_PMC_COUNTERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Counter !== undefined) view.setBigUint64(0, data.Counter === null ? 0n : BigInt(util.toPointer(data.Counter)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_PROCESS_START_KEY (size: 8)
 */
export interface EVENT_EXTENDED_ITEM_PROCESS_START_KEY {
  /** u64 */
  ProcessStartKey: Deno.PointerValue;
}

export const sizeofEVENT_EXTENDED_ITEM_PROCESS_START_KEY = 8;

export function allocEVENT_EXTENDED_ITEM_PROCESS_START_KEY(data?: Partial<EVENT_EXTENDED_ITEM_PROCESS_START_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_PROCESS_START_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ProcessStartKey !== undefined) view.setBigUint64(0, BigInt(data.ProcessStartKey), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_EXTENDED_ITEM_EVENT_KEY (size: 8)
 */
export interface EVENT_EXTENDED_ITEM_EVENT_KEY {
  /** u64 */
  Key: Deno.PointerValue;
}

export const sizeofEVENT_EXTENDED_ITEM_EVENT_KEY = 8;

export function allocEVENT_EXTENDED_ITEM_EVENT_KEY(data?: Partial<EVENT_EXTENDED_ITEM_EVENT_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_EXTENDED_ITEM_EVENT_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Key !== undefined) view.setBigUint64(0, BigInt(data.Key), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_HEADER (size: 56)
 */
export interface EVENT_HEADER {
  /** u16 */
  Size: number;
  /** u16 */
  HeaderType: number;
  /** u16 */
  Flags: number;
  /** u16 */
  EventProperty: number;
  /** u32 */
  ThreadId: number;
  /** u32 */
  ProcessId: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ProviderId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_DESCRIPTOR */
  EventDescriptor: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ActivityId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_HEADER = 56;

export function allocEVENT_HEADER(data?: Partial<EVENT_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: u16
  if (data?.HeaderType !== undefined) view.setUint16(2, Number(data.HeaderType), true);
  // 0x04: u16
  if (data?.Flags !== undefined) view.setUint16(4, Number(data.Flags), true);
  // 0x06: u16
  if (data?.EventProperty !== undefined) view.setUint16(6, Number(data.EventProperty), true);
  // 0x08: u32
  if (data?.ThreadId !== undefined) view.setUint32(8, Number(data.ThreadId), true);
  // 0x0c: u32
  if (data?.ProcessId !== undefined) view.setUint32(12, Number(data.ProcessId), true);
  // 0x10: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(16, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x18: pointer
  if (data?.ProviderId !== undefined) view.setBigUint64(24, data.ProviderId === null ? 0n : BigInt(util.toPointer(data.ProviderId)), true);
  // 0x20: pointer
  if (data?.EventDescriptor !== undefined) view.setBigUint64(32, data.EventDescriptor === null ? 0n : BigInt(util.toPointer(data.EventDescriptor)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: pointer
  if (data?.ActivityId !== undefined) view.setBigUint64(48, data.ActivityId === null ? 0n : BigInt(util.toPointer(data.ActivityId)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_RECORD (size: 48)
 */
export interface EVENT_RECORD {
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_HEADER */
  EventHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.ETW_BUFFER_CONTEXT */
  BufferContext: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ExtendedDataCount: number;
  /** u16 */
  UserDataLength: number;
  /** ptr */
  ExtendedData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UserData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UserContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEVENT_RECORD = 48;

export function allocEVENT_RECORD(data?: Partial<EVENT_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventHeader !== undefined) view.setBigUint64(0, data.EventHeader === null ? 0n : BigInt(util.toPointer(data.EventHeader)), true);
  // 0x08: pointer
  if (data?.BufferContext !== undefined) view.setBigUint64(8, data.BufferContext === null ? 0n : BigInt(util.toPointer(data.BufferContext)), true);
  // 0x10: u16
  if (data?.ExtendedDataCount !== undefined) view.setUint16(16, Number(data.ExtendedDataCount), true);
  // 0x12: u16
  if (data?.UserDataLength !== undefined) view.setUint16(18, Number(data.UserDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ExtendedData !== undefined) view.setBigUint64(24, data.ExtendedData === null ? 0n : BigInt(util.toPointer(data.ExtendedData)), true);
  // 0x20: pointer
  if (data?.UserData !== undefined) view.setBigUint64(32, data.UserData === null ? 0n : BigInt(util.toPointer(data.UserData)), true);
  // 0x28: pointer
  if (data?.UserContext !== undefined) view.setBigUint64(40, data.UserContext === null ? 0n : BigInt(util.toPointer(data.UserContext)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_MAP_ENTRY (size: 16)
 */
export interface EVENT_MAP_ENTRY {
  /** u32 */
  OutputOffset: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_MAP_ENTRY = 16;

export function allocEVENT_MAP_ENTRY(data?: Partial<EVENT_MAP_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_MAP_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OutputOffset !== undefined) view.setUint32(0, Number(data.OutputOffset), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_MAP_INFO (size: 32)
 */
export interface EVENT_MAP_INFO {
  /** u32 */
  NameOffset: number;
  /** Windows.Win32.System.Diagnostics.Etw.MAP_FLAGS */
  Flag: MAP_FLAGS;
  /** u32 */
  EntryCount: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  MapEntryArray: Deno.PointerValue | null;
}

export const sizeofEVENT_MAP_INFO = 32;

export function allocEVENT_MAP_INFO(data?: Partial<EVENT_MAP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_MAP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NameOffset !== undefined) view.setUint32(0, Number(data.NameOffset), true);
  // 0x04: i32
  if (data?.Flag !== undefined) view.setInt32(4, Number(data.Flag), true);
  // 0x08: u32
  if (data?.EntryCount !== undefined) view.setUint32(8, Number(data.EntryCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.MapEntryArray !== undefined) view.setBigUint64(24, data.MapEntryArray === null ? 0n : BigInt(util.toPointer(data.MapEntryArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.EVENT_PROPERTY_INFO (size: 40)
 */
export interface EVENT_PROPERTY_INFO {
  /** Windows.Win32.System.Diagnostics.Etw.PROPERTY_FLAGS */
  Flags: PROPERTY_FLAGS;
  /** u32 */
  NameOffset: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEVENT_PROPERTY_INFO = 40;

export function allocEVENT_PROPERTY_INFO(data?: Partial<EVENT_PROPERTY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEVENT_PROPERTY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Flags !== undefined) view.setInt32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NameOffset !== undefined) view.setUint32(4, Number(data.NameOffset), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x18: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(24, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x20: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(32, data.Anonymous4 === null ? 0n : BigInt(util.toPointer(data.Anonymous4)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_EVENT_INFO (size: 112)
 */
export interface TRACE_EVENT_INFO {
  /** System.Guid */
  ProviderGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EventGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_DESCRIPTOR */
  EventDescriptor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Etw.DECODING_SOURCE */
  DecodingSource: DECODING_SOURCE;
  /** u32 */
  ProviderNameOffset: number;
  /** u32 */
  LevelNameOffset: number;
  /** u32 */
  ChannelNameOffset: number;
  /** u32 */
  KeywordsNameOffset: number;
  /** u32 */
  TaskNameOffset: number;
  /** u32 */
  OpcodeNameOffset: number;
  /** u32 */
  EventMessageOffset: number;
  /** u32 */
  ProviderMessageOffset: number;
  /** u32 */
  BinaryXMLOffset: number;
  /** u32 */
  BinaryXMLSize: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PropertyCount: number;
  /** u32 */
  TopLevelPropertyCount: number;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** array */
  EventPropertyInfoArray: Deno.PointerValue | null;
}

export const sizeofTRACE_EVENT_INFO = 112;

export function allocTRACE_EVENT_INFO(data?: Partial<TRACE_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProviderGuid !== undefined) view.setBigUint64(0, data.ProviderGuid === null ? 0n : BigInt(util.toPointer(data.ProviderGuid)), true);
  // 0x08: pointer
  if (data?.EventGuid !== undefined) view.setBigUint64(8, data.EventGuid === null ? 0n : BigInt(util.toPointer(data.EventGuid)), true);
  // 0x10: pointer
  if (data?.EventDescriptor !== undefined) view.setBigUint64(16, data.EventDescriptor === null ? 0n : BigInt(util.toPointer(data.EventDescriptor)), true);
  // 0x18: i32
  if (data?.DecodingSource !== undefined) view.setInt32(24, Number(data.DecodingSource), true);
  // 0x1c: u32
  if (data?.ProviderNameOffset !== undefined) view.setUint32(28, Number(data.ProviderNameOffset), true);
  // 0x20: u32
  if (data?.LevelNameOffset !== undefined) view.setUint32(32, Number(data.LevelNameOffset), true);
  // 0x24: u32
  if (data?.ChannelNameOffset !== undefined) view.setUint32(36, Number(data.ChannelNameOffset), true);
  // 0x28: u32
  if (data?.KeywordsNameOffset !== undefined) view.setUint32(40, Number(data.KeywordsNameOffset), true);
  // 0x2c: u32
  if (data?.TaskNameOffset !== undefined) view.setUint32(44, Number(data.TaskNameOffset), true);
  // 0x30: u32
  if (data?.OpcodeNameOffset !== undefined) view.setUint32(48, Number(data.OpcodeNameOffset), true);
  // 0x34: u32
  if (data?.EventMessageOffset !== undefined) view.setUint32(52, Number(data.EventMessageOffset), true);
  // 0x38: u32
  if (data?.ProviderMessageOffset !== undefined) view.setUint32(56, Number(data.ProviderMessageOffset), true);
  // 0x3c: u32
  if (data?.BinaryXMLOffset !== undefined) view.setUint32(60, Number(data.BinaryXMLOffset), true);
  // 0x40: u32
  if (data?.BinaryXMLSize !== undefined) view.setUint32(64, Number(data.BinaryXMLSize), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(72, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x50: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(80, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x58: u32
  if (data?.PropertyCount !== undefined) view.setUint32(88, Number(data.PropertyCount), true);
  // 0x5c: u32
  if (data?.TopLevelPropertyCount !== undefined) view.setUint32(92, Number(data.TopLevelPropertyCount), true);
  // 0x60: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(96, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x68: pointer
  if (data?.EventPropertyInfoArray !== undefined) view.setBigUint64(104, data.EventPropertyInfoArray === null ? 0n : BigInt(util.toPointer(data.EventPropertyInfoArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROPERTY_DATA_DESCRIPTOR (size: 16)
 */
export interface PROPERTY_DATA_DESCRIPTOR {
  /** u64 */
  PropertyName: Deno.PointerValue;
  /** u32 */
  ArrayIndex: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPROPERTY_DATA_DESCRIPTOR = 16;

export function allocPROPERTY_DATA_DESCRIPTOR(data?: Partial<PROPERTY_DATA_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTY_DATA_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PropertyName !== undefined) view.setBigUint64(0, BigInt(data.PropertyName), true);
  // 0x08: u32
  if (data?.ArrayIndex !== undefined) view.setUint32(8, Number(data.ArrayIndex), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PAYLOAD_FILTER_PREDICATE (size: 24)
 */
export interface PAYLOAD_FILTER_PREDICATE {
  /** Windows.Win32.Foundation.PWSTR */
  FieldName: string | null;
  /** u16 */
  CompareOp: number;
  /** Windows.Win32.Foundation.PWSTR */
  Value: string | null;
}

export const sizeofPAYLOAD_FILTER_PREDICATE = 24;

export function allocPAYLOAD_FILTER_PREDICATE(data?: Partial<PAYLOAD_FILTER_PREDICATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPAYLOAD_FILTER_PREDICATE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.FieldName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.FieldName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.CompareOp !== undefined) view.setUint16(8, Number(data.CompareOp), true);
  // 0x0a: pad6
  // 0x10: buffer
  if (data?.Value !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Value);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROVIDER_FILTER_INFO (size: 24)
 */
export interface PROVIDER_FILTER_INFO {
  /** u8 */
  Id: number;
  /** u8 */
  Version: number;
  /** u32 */
  MessageOffset: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  PropertyCount: number;
  /** array */
  EventPropertyInfoArray: Deno.PointerValue | null;
}

export const sizeofPROVIDER_FILTER_INFO = 24;

export function allocPROVIDER_FILTER_INFO(data?: Partial<PROVIDER_FILTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDER_FILTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Id !== undefined) view.setUint8(0, Number(data.Id));
  // 0x01: u8
  if (data?.Version !== undefined) view.setUint8(1, Number(data.Version));
  // 0x02: u32
  if (data?.MessageOffset !== undefined) view.setUint32(2, Number(data.MessageOffset), true);
  // 0x06: u32
  if (data?.Reserved !== undefined) view.setUint32(6, Number(data.Reserved), true);
  // 0x0a: u32
  if (data?.PropertyCount !== undefined) view.setUint32(10, Number(data.PropertyCount), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.EventPropertyInfoArray !== undefined) view.setBigUint64(16, data.EventPropertyInfoArray === null ? 0n : BigInt(util.toPointer(data.EventPropertyInfoArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROVIDER_FIELD_INFO (size: 16)
 */
export interface PROVIDER_FIELD_INFO {
  /** u32 */
  NameOffset: number;
  /** u32 */
  DescriptionOffset: number;
  /** u64 */
  Value: Deno.PointerValue;
}

export const sizeofPROVIDER_FIELD_INFO = 16;

export function allocPROVIDER_FIELD_INFO(data?: Partial<PROVIDER_FIELD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDER_FIELD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NameOffset !== undefined) view.setUint32(0, Number(data.NameOffset), true);
  // 0x04: u32
  if (data?.DescriptionOffset !== undefined) view.setUint32(4, Number(data.DescriptionOffset), true);
  // 0x08: u64
  if (data?.Value !== undefined) view.setBigUint64(8, BigInt(data.Value), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROVIDER_FIELD_INFOARRAY (size: 16)
 */
export interface PROVIDER_FIELD_INFOARRAY {
  /** u32 */
  NumberOfElements: number;
  /** Windows.Win32.System.Diagnostics.Etw.EVENT_FIELD_TYPE */
  FieldType: EVENT_FIELD_TYPE;
  /** array */
  FieldInfoArray: Deno.PointerValue | null;
}

export const sizeofPROVIDER_FIELD_INFOARRAY = 16;

export function allocPROVIDER_FIELD_INFOARRAY(data?: Partial<PROVIDER_FIELD_INFOARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDER_FIELD_INFOARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfElements !== undefined) view.setUint32(0, Number(data.NumberOfElements), true);
  // 0x04: i32
  if (data?.FieldType !== undefined) view.setInt32(4, Number(data.FieldType), true);
  // 0x08: pointer
  if (data?.FieldInfoArray !== undefined) view.setBigUint64(8, data.FieldInfoArray === null ? 0n : BigInt(util.toPointer(data.FieldInfoArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TRACE_PROVIDER_INFO (size: 16)
 */
export interface TRACE_PROVIDER_INFO {
  /** System.Guid */
  ProviderGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SchemaSource: number;
  /** u32 */
  ProviderNameOffset: number;
}

export const sizeofTRACE_PROVIDER_INFO = 16;

export function allocTRACE_PROVIDER_INFO(data?: Partial<TRACE_PROVIDER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACE_PROVIDER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProviderGuid !== undefined) view.setBigUint64(0, data.ProviderGuid === null ? 0n : BigInt(util.toPointer(data.ProviderGuid)), true);
  // 0x08: u32
  if (data?.SchemaSource !== undefined) view.setUint32(8, Number(data.SchemaSource), true);
  // 0x0c: u32
  if (data?.ProviderNameOffset !== undefined) view.setUint32(12, Number(data.ProviderNameOffset), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROVIDER_ENUMERATION_INFO (size: 16)
 */
export interface PROVIDER_ENUMERATION_INFO {
  /** u32 */
  NumberOfProviders: number;
  /** u32 */
  Reserved: number;
  /** array */
  TraceProviderInfoArray: Deno.PointerValue | null;
}

export const sizeofPROVIDER_ENUMERATION_INFO = 16;

export function allocPROVIDER_ENUMERATION_INFO(data?: Partial<PROVIDER_ENUMERATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDER_ENUMERATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfProviders !== undefined) view.setUint32(0, Number(data.NumberOfProviders), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.TraceProviderInfoArray !== undefined) view.setBigUint64(8, data.TraceProviderInfoArray === null ? 0n : BigInt(util.toPointer(data.TraceProviderInfoArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.PROVIDER_EVENT_INFO (size: 16)
 */
export interface PROVIDER_EVENT_INFO {
  /** u32 */
  NumberOfEvents: number;
  /** u32 */
  Reserved: number;
  /** array */
  EventDescriptorsArray: Deno.PointerValue | null;
}

export const sizeofPROVIDER_EVENT_INFO = 16;

export function allocPROVIDER_EVENT_INFO(data?: Partial<PROVIDER_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDER_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfEvents !== undefined) view.setUint32(0, Number(data.NumberOfEvents), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.EventDescriptorsArray !== undefined) view.setBigUint64(8, data.EventDescriptorsArray === null ? 0n : BigInt(util.toPointer(data.EventDescriptorsArray)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Etw.TDH_CONTEXT (size: 16)
 */
export interface TDH_CONTEXT {
  /** u64 */
  ParameterValue: Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Etw.TDH_CONTEXT_TYPE */
  ParameterType: TDH_CONTEXT_TYPE;
  /** u32 */
  ParameterSize: number;
}

export const sizeofTDH_CONTEXT = 16;

export function allocTDH_CONTEXT(data?: Partial<TDH_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofTDH_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ParameterValue !== undefined) view.setBigUint64(0, BigInt(data.ParameterValue), true);
  // 0x08: i32
  if (data?.ParameterType !== undefined) view.setInt32(8, Number(data.ParameterType), true);
  // 0x0c: u32
  if (data?.ParameterSize !== undefined) view.setUint32(12, Number(data.ParameterSize), true);
  return buf;
}

export type PSID = Deno.PointerValue;

// Native Libraries

try {
  var libADVAPI32 = Deno.dlopen("ADVAPI32", {
    StartTraceW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    StartTraceA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    StopTraceW: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    StopTraceA: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    QueryTraceW: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    QueryTraceA: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    UpdateTraceW: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    UpdateTraceA: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    FlushTraceW: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    FlushTraceA: {
      parameters: ["u64", "buffer", "pointer"],
      result: "u32",
    },
    ControlTraceW: {
      parameters: ["u64", "buffer", "pointer", "u32"],
      result: "u32",
    },
    ControlTraceA: {
      parameters: ["u64", "buffer", "pointer", "u32"],
      result: "u32",
    },
    QueryAllTracesW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    QueryAllTracesA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    EnableTrace: {
      parameters: ["u32", "u32", "u32", "pointer", "u64"],
      result: "u32",
    },
    EnableTraceEx: {
      parameters: ["pointer", "pointer", "u64", "u32", "u8", "u64", "u64", "u32", "pointer"],
      result: "u32",
    },
    EnableTraceEx2: {
      parameters: ["u64", "pointer", "u32", "u8", "u64", "u64", "u32", "pointer"],
      result: "u32",
    },
    EnumerateTraceGuidsEx: {
      parameters: ["i32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    TraceSetInformation: {
      parameters: ["u64", "i32", "pointer", "u32"],
      result: "u32",
    },
    TraceQueryInformation: {
      parameters: ["u64", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    CreateTraceInstanceId: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    TraceEvent: {
      parameters: ["u64", "pointer"],
      result: "u32",
    },
    TraceEventInstance: {
      parameters: ["u64", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RegisterTraceGuidsW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    RegisterTraceGuidsA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    EnumerateTraceGuids: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    UnregisterTraceGuids: {
      parameters: ["u64"],
      result: "u32",
    },
    GetTraceLoggerHandle: {
      parameters: ["pointer"],
      result: "u64",
    },
    GetTraceEnableLevel: {
      parameters: ["u64"],
      result: "u8",
    },
    GetTraceEnableFlags: {
      parameters: ["u64"],
      result: "u32",
    },
    OpenTraceW: {
      parameters: ["pointer"],
      result: "u64",
    },
    ProcessTrace: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    CloseTrace: {
      parameters: ["u64"],
      result: "u32",
    },
    QueryTraceProcessingHandle: {
      parameters: ["u64", "i32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    OpenTraceA: {
      parameters: ["pointer"],
      result: "u64",
    },
    SetTraceCallback: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RemoveTraceCallback: {
      parameters: ["pointer"],
      result: "u32",
    },
    TraceMessage: {
      parameters: ["u64", "u32", "pointer", "u16"],
      result: "u32",
    },
    TraceMessageVa: {
      parameters: ["u64", "u32", "pointer", "u16", "pointer"],
      result: "u32",
    },
    EventRegister: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    EventUnregister: {
      parameters: ["u64"],
      result: "u32",
    },
    EventSetInformation: {
      parameters: ["u64", "i32", "pointer", "u32"],
      result: "u32",
    },
    EventEnabled: {
      parameters: ["u64", "pointer"],
      result: "pointer",
    },
    EventProviderEnabled: {
      parameters: ["u64", "u8", "u64"],
      result: "pointer",
    },
    EventWrite: {
      parameters: ["u64", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EventWriteTransfer: {
      parameters: ["u64", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EventWriteEx: {
      parameters: ["u64", "pointer", "u64", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EventWriteString: {
      parameters: ["u64", "u8", "u64", "buffer"],
      result: "u32",
    },
    EventActivityIdControl: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    EventAccessControl: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EventAccessQuery: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    EventAccessRemove: {
      parameters: ["pointer"],
      result: "u32",
    },
    CveEventWrite: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libtdh = Deno.dlopen("tdh", {
    TdhCreatePayloadFilter: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    TdhDeletePayloadFilter: {
      parameters: ["pointer"],
      result: "u32",
    },
    TdhAggregatePayloadFilters: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TdhCleanupPayloadEventFilterDescriptor: {
      parameters: ["pointer"],
      result: "u32",
    },
    TdhEnumerateProvidersForDecodingSource: {
      parameters: ["i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    TdhEnumerateProviderFilters: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TdhOpenDecodingHandle: {
      parameters: ["pointer"],
      result: "u32",
    },
    TdhSetDecodingParameter: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    TdhGetDecodingParameter: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    TdhGetWppProperty: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    TdhGetWppMessage: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TdhCloseDecodingHandle: {
      parameters: ["pointer"],
      result: "u32",
    },
    TdhLoadManifestFromBinary: {
      parameters: ["buffer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libTDH = Deno.dlopen("TDH", {
    TdhGetEventInformation: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    TdhGetEventMapInformation: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    TdhGetPropertySize: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    TdhGetProperty: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    TdhEnumerateProviders: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    TdhQueryProviderFieldInformation: {
      parameters: ["pointer", "u64", "i32", "pointer", "pointer"],
      result: "u32",
    },
    TdhEnumerateProviderFieldInformation: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    TdhLoadManifest: {
      parameters: ["buffer"],
      result: "u32",
    },
    TdhLoadManifestFromMemory: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    TdhUnloadManifest: {
      parameters: ["buffer"],
      result: "u32",
    },
    TdhUnloadManifestFromMemory: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    TdhFormatProperty: {
      parameters: ["pointer", "pointer", "u32", "u16", "u16", "u16", "u16", "pointer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    TdhEnumerateManifestProviderEvents: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    TdhGetManifestEventInformation: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function StartTraceW(
  TraceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.StartTraceW(util.toPointer(TraceHandle), util.pwstrToFfi(InstanceName), util.toPointer(Properties));
}

export function StartTraceA(
  TraceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstanceName: string | null /* Windows.Win32.Foundation.PSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.StartTraceA(util.toPointer(TraceHandle), util.pstrToFfi(InstanceName), util.toPointer(Properties));
}

export function StopTraceW(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.StopTraceW(TraceHandle, util.pwstrToFfi(InstanceName), util.toPointer(Properties));
}

export function StopTraceA(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.StopTraceA(TraceHandle, util.pstrToFfi(InstanceName), util.toPointer(Properties));
}

export function QueryTraceW(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.QueryTraceW(TraceHandle, util.pwstrToFfi(InstanceName), util.toPointer(Properties));
}

export function QueryTraceA(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.QueryTraceA(TraceHandle, util.pstrToFfi(InstanceName), util.toPointer(Properties));
}

export function UpdateTraceW(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.UpdateTraceW(TraceHandle, util.pwstrToFfi(InstanceName), util.toPointer(Properties));
}

export function UpdateTraceA(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.UpdateTraceA(TraceHandle, util.pstrToFfi(InstanceName), util.toPointer(Properties));
}

export function FlushTraceW(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.FlushTraceW(TraceHandle, util.pwstrToFfi(InstanceName), util.toPointer(Properties));
}

export function FlushTraceA(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.FlushTraceA(TraceHandle, util.pstrToFfi(InstanceName), util.toPointer(Properties));
}

export function ControlTraceW(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  ControlCode: EVENT_TRACE_CONTROL /* Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_CONTROL */,
): number /* u32 */ {
  return libADVAPI32.ControlTraceW(TraceHandle, util.pwstrToFfi(InstanceName), util.toPointer(Properties), ControlCode);
}

export function ControlTraceA(
  TraceHandle: Deno.PointerValue /* u64 */,
  InstanceName: string | null /* Windows.Win32.Foundation.PSTR */,
  Properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  ControlCode: EVENT_TRACE_CONTROL /* Windows.Win32.System.Diagnostics.Etw.EVENT_TRACE_CONTROL */,
): number /* u32 */ {
  return libADVAPI32.ControlTraceA(TraceHandle, util.pstrToFfi(InstanceName), util.toPointer(Properties), ControlCode);
}

export function QueryAllTracesW(
  PropertyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyArrayCount: number /* u32 */,
  LoggerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.QueryAllTracesW(util.toPointer(PropertyArray), PropertyArrayCount, util.toPointer(LoggerCount));
}

export function QueryAllTracesA(
  PropertyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyArrayCount: number /* u32 */,
  LoggerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.QueryAllTracesA(util.toPointer(PropertyArray), PropertyArrayCount, util.toPointer(LoggerCount));
}

export function EnableTrace(
  Enable: number /* u32 */,
  EnableFlag: number /* u32 */,
  EnableLevel: number /* u32 */,
  ControlGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  TraceHandle: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libADVAPI32.EnableTrace(Enable, EnableFlag, EnableLevel, util.toPointer(ControlGuid), TraceHandle);
}

export function EnableTraceEx(
  ProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  TraceHandle: Deno.PointerValue /* u64 */,
  IsEnabled: number /* u32 */,
  Level: number /* u8 */,
  MatchAnyKeyword: Deno.PointerValue /* u64 */,
  MatchAllKeyword: Deno.PointerValue /* u64 */,
  EnableProperty: number /* u32 */,
  EnableFilterDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EnableTraceEx(util.toPointer(ProviderId), util.toPointer(SourceId), TraceHandle, IsEnabled, Level, MatchAnyKeyword, MatchAllKeyword, EnableProperty, util.toPointer(EnableFilterDesc));
}

export function EnableTraceEx2(
  TraceHandle: Deno.PointerValue /* u64 */,
  ProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ControlCode: number /* u32 */,
  Level: number /* u8 */,
  MatchAnyKeyword: Deno.PointerValue /* u64 */,
  MatchAllKeyword: Deno.PointerValue /* u64 */,
  Timeout: number /* u32 */,
  EnableParameters: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EnableTraceEx2(TraceHandle, util.toPointer(ProviderId), ControlCode, Level, MatchAnyKeyword, MatchAllKeyword, Timeout, util.toPointer(EnableParameters));
}

export function EnumerateTraceGuidsEx(
  TraceQueryInfoClass: TRACE_QUERY_INFO_CLASS /* Windows.Win32.System.Diagnostics.Etw.TRACE_QUERY_INFO_CLASS */,
  InBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  InBufferSize: number /* u32 */,
  OutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutBufferSize: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EnumerateTraceGuidsEx(TraceQueryInfoClass, util.toPointer(InBuffer), InBufferSize, util.toPointer(OutBuffer), OutBufferSize, util.toPointer(ReturnLength));
}

export function TraceSetInformation(
  SessionHandle: Deno.PointerValue /* u64 */,
  InformationClass: TRACE_QUERY_INFO_CLASS /* Windows.Win32.System.Diagnostics.Etw.TRACE_QUERY_INFO_CLASS */,
  TraceInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InformationLength: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32.TraceSetInformation(SessionHandle, InformationClass, util.toPointer(TraceInformation), InformationLength);
}

export function TraceQueryInformation(
  SessionHandle: Deno.PointerValue /* u64 */,
  InformationClass: TRACE_QUERY_INFO_CLASS /* Windows.Win32.System.Diagnostics.Etw.TRACE_QUERY_INFO_CLASS */,
  TraceInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TraceQueryInformation(SessionHandle, InformationClass, util.toPointer(TraceInformation), InformationLength, util.toPointer(ReturnLength));
}

export function CreateTraceInstanceId(
  RegHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  InstInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.CreateTraceInstanceId(util.toPointer(RegHandle), util.toPointer(InstInfo));
}

export function TraceEvent(
  TraceHandle: Deno.PointerValue /* u64 */,
  EventTrace: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TraceEvent(TraceHandle, util.toPointer(EventTrace));
}

export function TraceEventInstance(
  TraceHandle: Deno.PointerValue /* u64 */,
  EventTrace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ParentInstInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TraceEventInstance(TraceHandle, util.toPointer(EventTrace), util.toPointer(InstInfo), util.toPointer(ParentInstInfo));
}

export function RegisterTraceGuidsW(
  RequestAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.WMIDPREQUEST */,
  RequestContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  ControlGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuidCount: number /* u32 */,
  TraceGuidReg: Deno.PointerValue | Uint8Array | null /* ptr */,
  MofImagePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  MofResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  RegistrationHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.RegisterTraceGuidsW(util.toPointer(RequestAddress), util.toPointer(RequestContext), util.toPointer(ControlGuid), GuidCount, util.toPointer(TraceGuidReg), util.pwstrToFfi(MofImagePath), util.pwstrToFfi(MofResourceName), util.toPointer(RegistrationHandle));
}

export function RegisterTraceGuidsA(
  RequestAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.WMIDPREQUEST */,
  RequestContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  ControlGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuidCount: number /* u32 */,
  TraceGuidReg: Deno.PointerValue | Uint8Array | null /* ptr */,
  MofImagePath: string | null /* Windows.Win32.Foundation.PSTR */,
  MofResourceName: string | null /* Windows.Win32.Foundation.PSTR */,
  RegistrationHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.RegisterTraceGuidsA(util.toPointer(RequestAddress), util.toPointer(RequestContext), util.toPointer(ControlGuid), GuidCount, util.toPointer(TraceGuidReg), util.pstrToFfi(MofImagePath), util.pstrToFfi(MofResourceName), util.toPointer(RegistrationHandle));
}

export function EnumerateTraceGuids(
  GuidPropertiesArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyArrayCount: number /* u32 */,
  GuidCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EnumerateTraceGuids(util.toPointer(GuidPropertiesArray), PropertyArrayCount, util.toPointer(GuidCount));
}

export function UnregisterTraceGuids(
  RegistrationHandle: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libADVAPI32.UnregisterTraceGuids(RegistrationHandle);
}

export function GetTraceLoggerHandle(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* u64 */ {
  return libADVAPI32.GetTraceLoggerHandle(util.toPointer(Buffer));
}

export function GetTraceEnableLevel(
  TraceHandle: Deno.PointerValue /* u64 */,
): number /* u8 */ {
  return libADVAPI32.GetTraceEnableLevel(TraceHandle);
}

export function GetTraceEnableFlags(
  TraceHandle: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libADVAPI32.GetTraceEnableFlags(TraceHandle);
}

export function OpenTraceW(
  Logfile: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* u64 */ {
  return libADVAPI32.OpenTraceW(util.toPointer(Logfile));
}

export function ProcessTrace(
  HandleArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  HandleCount: number /* u32 */,
  StartTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  EndTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.ProcessTrace(util.toPointer(HandleArray), HandleCount, util.toPointer(StartTime), util.toPointer(EndTime));
}

export function CloseTrace(
  TraceHandle: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libADVAPI32.CloseTrace(TraceHandle);
}

export function QueryTraceProcessingHandle(
  ProcessingHandle: Deno.PointerValue /* u64 */,
  InformationClass: ETW_PROCESS_HANDLE_INFO_TYPE /* Windows.Win32.System.Diagnostics.Etw.ETW_PROCESS_HANDLE_INFO_TYPE */,
  InBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  InBufferSize: number /* u32 */,
  OutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutBufferSize: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.QueryTraceProcessingHandle(ProcessingHandle, InformationClass, util.toPointer(InBuffer), InBufferSize, util.toPointer(OutBuffer), OutBufferSize, util.toPointer(ReturnLength));
}

export function OpenTraceA(
  Logfile: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* u64 */ {
  return libADVAPI32.OpenTraceA(util.toPointer(Logfile));
}

export function SetTraceCallback(
  pGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.PEVENT_CALLBACK */,
): number /* u32 */ {
  return libADVAPI32.SetTraceCallback(util.toPointer(pGuid), util.toPointer(EventCallback));
}

export function RemoveTraceCallback(
  pGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.RemoveTraceCallback(util.toPointer(pGuid));
}

export function TraceMessage(
  LoggerHandle: Deno.PointerValue /* u64 */,
  MessageFlags: TRACE_MESSAGE_FLAGS /* Windows.Win32.System.Diagnostics.Etw.TRACE_MESSAGE_FLAGS */,
  MessageGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MessageNumber: number /* u16 */,
): number /* u32 */ {
  return libADVAPI32.TraceMessage(LoggerHandle, MessageFlags, util.toPointer(MessageGuid), MessageNumber);
}

export function TraceMessageVa(
  LoggerHandle: Deno.PointerValue /* u64 */,
  MessageFlags: TRACE_MESSAGE_FLAGS /* Windows.Win32.System.Diagnostics.Etw.TRACE_MESSAGE_FLAGS */,
  MessageGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MessageNumber: number /* u16 */,
  MessageArgList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.TraceMessageVa(LoggerHandle, MessageFlags, util.toPointer(MessageGuid), MessageNumber, util.toPointer(MessageArgList));
}

export function EventRegister(
  ProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  EnableCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.PENABLECALLBACK */,
  CallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  RegHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventRegister(util.toPointer(ProviderId), util.toPointer(EnableCallback), util.toPointer(CallbackContext), util.toPointer(RegHandle));
}

export function EventUnregister(
  RegHandle: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libADVAPI32.EventUnregister(RegHandle);
}

export function EventSetInformation(
  RegHandle: Deno.PointerValue /* u64 */,
  InformationClass: EVENT_INFO_CLASS /* Windows.Win32.System.Diagnostics.Etw.EVENT_INFO_CLASS */,
  EventInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InformationLength: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32.EventSetInformation(RegHandle, InformationClass, util.toPointer(EventInformation), InformationLength);
}

export function EventEnabled(
  RegHandle: Deno.PointerValue /* u64 */,
  EventDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libADVAPI32.EventEnabled(RegHandle, util.toPointer(EventDescriptor)));
}

export function EventProviderEnabled(
  RegHandle: Deno.PointerValue /* u64 */,
  Level: number /* u8 */,
  Keyword: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libADVAPI32.EventProviderEnabled(RegHandle, Level, Keyword));
}

export function EventWrite(
  RegHandle: Deno.PointerValue /* u64 */,
  EventDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserDataCount: number /* u32 */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventWrite(RegHandle, util.toPointer(EventDescriptor), UserDataCount, util.toPointer(UserData));
}

export function EventWriteTransfer(
  RegHandle: Deno.PointerValue /* u64 */,
  EventDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ActivityId: Deno.PointerValue | Uint8Array | null /* ptr */,
  RelatedActivityId: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserDataCount: number /* u32 */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventWriteTransfer(RegHandle, util.toPointer(EventDescriptor), util.toPointer(ActivityId), util.toPointer(RelatedActivityId), UserDataCount, util.toPointer(UserData));
}

export function EventWriteEx(
  RegHandle: Deno.PointerValue /* u64 */,
  EventDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Filter: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
  ActivityId: Deno.PointerValue | Uint8Array | null /* ptr */,
  RelatedActivityId: Deno.PointerValue | Uint8Array | null /* ptr */,
  UserDataCount: number /* u32 */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventWriteEx(RegHandle, util.toPointer(EventDescriptor), Filter, Flags, util.toPointer(ActivityId), util.toPointer(RelatedActivityId), UserDataCount, util.toPointer(UserData));
}

export function EventWriteString(
  RegHandle: Deno.PointerValue /* u64 */,
  Level: number /* u8 */,
  Keyword: Deno.PointerValue /* u64 */,
  String: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libADVAPI32.EventWriteString(RegHandle, Level, Keyword, util.pwstrToFfi(String));
}

export function EventActivityIdControl(
  ControlCode: number /* u32 */,
  ActivityId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventActivityIdControl(ControlCode, util.toPointer(ActivityId));
}

export function EventAccessControl(
  Guid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Operation: number /* u32 */,
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  Rights: number /* u32 */,
  AllowOrDeny: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libADVAPI32.EventAccessControl(util.toPointer(Guid), Operation, util.toPointer(Sid), Rights, util.toPointer(AllowOrDeny));
}

export function EventAccessQuery(
  Guid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventAccessQuery(util.toPointer(Guid), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function EventAccessRemove(
  Guid: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EventAccessRemove(util.toPointer(Guid));
}

export function TdhCreatePayloadFilter(
  ProviderGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventMatchANY: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  PayloadPredicateCount: number /* u32 */,
  PayloadPredicates: Deno.PointerValue | Uint8Array | null /* ptr */,
  PayloadFilter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhCreatePayloadFilter(util.toPointer(ProviderGuid), util.toPointer(EventDescriptor), util.toPointer(EventMatchANY), PayloadPredicateCount, util.toPointer(PayloadPredicates), util.toPointer(PayloadFilter));
}

export function TdhDeletePayloadFilter(
  PayloadFilter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhDeletePayloadFilter(util.toPointer(PayloadFilter));
}

export function TdhAggregatePayloadFilters(
  PayloadFilterCount: number /* u32 */,
  PayloadFilterPtrs: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventMatchALLFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventFilterDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhAggregatePayloadFilters(PayloadFilterCount, util.toPointer(PayloadFilterPtrs), util.toPointer(EventMatchALLFlags), util.toPointer(EventFilterDescriptor));
}

export function TdhCleanupPayloadEventFilterDescriptor(
  EventFilterDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhCleanupPayloadEventFilterDescriptor(util.toPointer(EventFilterDescriptor));
}

export function TdhGetEventInformation(
  Event: Deno.PointerValue | Uint8Array | null /* ptr */,
  TdhContextCount: number /* u32 */,
  TdhContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhGetEventInformation(util.toPointer(Event), TdhContextCount, util.toPointer(TdhContext), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function TdhGetEventMapInformation(
  pEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  pMapName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhGetEventMapInformation(util.toPointer(pEvent), util.pwstrToFfi(pMapName), util.toPointer(pBuffer), util.toPointer(pBufferSize));
}

export function TdhGetPropertySize(
  pEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  TdhContextCount: number /* u32 */,
  pTdhContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyDataCount: number /* u32 */,
  pPropertyData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPropertySize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhGetPropertySize(util.toPointer(pEvent), TdhContextCount, util.toPointer(pTdhContext), PropertyDataCount, util.toPointer(pPropertyData), util.toPointer(pPropertySize));
}

export function TdhGetProperty(
  pEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  TdhContextCount: number /* u32 */,
  pTdhContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyDataCount: number /* u32 */,
  pPropertyData: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhGetProperty(util.toPointer(pEvent), TdhContextCount, util.toPointer(pTdhContext), PropertyDataCount, util.toPointer(pPropertyData), BufferSize, util.toPointer(pBuffer));
}

export function TdhEnumerateProviders(
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhEnumerateProviders(util.toPointer(pBuffer), util.toPointer(pBufferSize));
}

export function TdhEnumerateProvidersForDecodingSource(
  filter: DECODING_SOURCE /* Windows.Win32.System.Diagnostics.Etw.DECODING_SOURCE */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferSize: number /* u32 */,
  bufferRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhEnumerateProvidersForDecodingSource(filter, util.toPointer(buffer), bufferSize, util.toPointer(bufferRequired));
}

export function TdhQueryProviderFieldInformation(
  pGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventFieldValue: Deno.PointerValue /* u64 */,
  EventFieldType: EVENT_FIELD_TYPE /* Windows.Win32.System.Diagnostics.Etw.EVENT_FIELD_TYPE */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhQueryProviderFieldInformation(util.toPointer(pGuid), EventFieldValue, EventFieldType, util.toPointer(pBuffer), util.toPointer(pBufferSize));
}

export function TdhEnumerateProviderFieldInformation(
  pGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventFieldType: EVENT_FIELD_TYPE /* Windows.Win32.System.Diagnostics.Etw.EVENT_FIELD_TYPE */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhEnumerateProviderFieldInformation(util.toPointer(pGuid), EventFieldType, util.toPointer(pBuffer), util.toPointer(pBufferSize));
}

export function TdhEnumerateProviderFilters(
  Guid: Deno.PointerValue | Uint8Array | null /* ptr */,
  TdhContextCount: number /* u32 */,
  TdhContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  FilterCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhEnumerateProviderFilters(util.toPointer(Guid), TdhContextCount, util.toPointer(TdhContext), util.toPointer(FilterCount), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function TdhLoadManifest(
  Manifest: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libTDH.TdhLoadManifest(util.pwstrToFfi(Manifest));
}

export function TdhLoadManifestFromMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libTDH.TdhLoadManifestFromMemory(util.toPointer(pData), cbData);
}

export function TdhUnloadManifest(
  Manifest: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libTDH.TdhUnloadManifest(util.pwstrToFfi(Manifest));
}

export function TdhUnloadManifestFromMemory(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libTDH.TdhUnloadManifestFromMemory(util.toPointer(pData), cbData);
}

export function TdhFormatProperty(
  EventInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  MapInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  PointerSize: number /* u32 */,
  PropertyInType: number /* u16 */,
  PropertyOutType: number /* u16 */,
  PropertyLength: number /* u16 */,
  UserDataLength: number /* u16 */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  UserDataConsumed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhFormatProperty(util.toPointer(EventInfo), util.toPointer(MapInfo), PointerSize, PropertyInType, PropertyOutType, PropertyLength, UserDataLength, util.toPointer(UserData), util.toPointer(BufferSize), util.pwstrToFfi(Buffer), util.toPointer(UserDataConsumed));
}

export function TdhOpenDecodingHandle(
  Handle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhOpenDecodingHandle(util.toPointer(Handle));
}

export function TdhSetDecodingParameter(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.TDH_HANDLE */,
  TdhContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhSetDecodingParameter(util.toPointer(Handle), util.toPointer(TdhContext));
}

export function TdhGetDecodingParameter(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.TDH_HANDLE */,
  TdhContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhGetDecodingParameter(util.toPointer(Handle), util.toPointer(TdhContext));
}

export function TdhGetWppProperty(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.TDH_HANDLE */,
  EventRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhGetWppProperty(util.toPointer(Handle), util.toPointer(EventRecord), util.pwstrToFfi(PropertyName), util.toPointer(BufferSize), util.toPointer(Buffer));
}

export function TdhGetWppMessage(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.TDH_HANDLE */,
  EventRecord: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libtdh.TdhGetWppMessage(util.toPointer(Handle), util.toPointer(EventRecord), util.toPointer(BufferSize), util.toPointer(Buffer));
}

export function TdhCloseDecodingHandle(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Diagnostics.Etw.TDH_HANDLE */,
): number /* u32 */ {
  return libtdh.TdhCloseDecodingHandle(util.toPointer(Handle));
}

export function TdhLoadManifestFromBinary(
  BinaryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libtdh.TdhLoadManifestFromBinary(util.pwstrToFfi(BinaryPath));
}

export function TdhEnumerateManifestProviderEvents(
  ProviderGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhEnumerateManifestProviderEvents(util.toPointer(ProviderGuid), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function TdhGetManifestEventInformation(
  ProviderGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  EventDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libTDH.TdhGetManifestEventInformation(util.toPointer(ProviderGuid), util.toPointer(EventDescriptor), util.toPointer(Buffer), util.toPointer(BufferSize));
}

export function CveEventWrite(
  CveId: string | null /* Windows.Win32.Foundation.PWSTR */,
  AdditionalDetails: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libADVAPI32.CveEventWrite(util.pwstrToFfi(CveId), util.pwstrToFfi(AdditionalDetails));
}

