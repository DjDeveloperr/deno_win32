/// Auto-generated by Deno Win32: Windows.Win32.System.Shutdown.Apis

import * as util from "../../util.ts";

// Enums
export type SHUTDOWN_REASON = number;
export type SHUTDOWN_FLAGS = number;
export type EXIT_WINDOWS_FLAGS = number;

// Constants
export const SHTDN_REASON_NONE = 0;
export const SHTDN_REASON_FLAG_COMMENT_REQUIRED = 16777216;
export const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 33554432;
export const SHTDN_REASON_FLAG_CLEAN_UI = 67108864;
export const SHTDN_REASON_FLAG_DIRTY_UI = 134217728;
export const SHTDN_REASON_FLAG_MOBILE_UI_RESERVED = 268435456;
export const SHTDN_REASON_FLAG_USER_DEFINED = 1073741824;
export const SHTDN_REASON_FLAG_PLANNED = 2147483648;
export const SHTDN_REASON_MAJOR_OTHER = 0;
export const SHTDN_REASON_MAJOR_NONE = 0;
export const SHTDN_REASON_MAJOR_HARDWARE = 65536;
export const SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 131072;
export const SHTDN_REASON_MAJOR_SOFTWARE = 196608;
export const SHTDN_REASON_MAJOR_APPLICATION = 262144;
export const SHTDN_REASON_MAJOR_SYSTEM = 327680;
export const SHTDN_REASON_MAJOR_POWER = 393216;
export const SHTDN_REASON_MAJOR_LEGACY_API = 458752;
export const SHTDN_REASON_MINOR_OTHER = 0;
export const SHTDN_REASON_MINOR_NONE = 255;
export const SHTDN_REASON_MINOR_MAINTENANCE = 1;
export const SHTDN_REASON_MINOR_INSTALLATION = 2;
export const SHTDN_REASON_MINOR_UPGRADE = 3;
export const SHTDN_REASON_MINOR_RECONFIG = 4;
export const SHTDN_REASON_MINOR_HUNG = 5;
export const SHTDN_REASON_MINOR_UNSTABLE = 6;
export const SHTDN_REASON_MINOR_DISK = 7;
export const SHTDN_REASON_MINOR_PROCESSOR = 8;
export const SHTDN_REASON_MINOR_NETWORKCARD = 9;
export const SHTDN_REASON_MINOR_POWER_SUPPLY = 10;
export const SHTDN_REASON_MINOR_CORDUNPLUGGED = 11;
export const SHTDN_REASON_MINOR_ENVIRONMENT = 12;
export const SHTDN_REASON_MINOR_HARDWARE_DRIVER = 13;
export const SHTDN_REASON_MINOR_OTHERDRIVER = 14;
export const SHTDN_REASON_MINOR_BLUESCREEN = 15;
export const SHTDN_REASON_MINOR_SERVICEPACK = 16;
export const SHTDN_REASON_MINOR_HOTFIX = 17;
export const SHTDN_REASON_MINOR_SECURITYFIX = 18;
export const SHTDN_REASON_MINOR_SECURITY = 19;
export const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 20;
export const SHTDN_REASON_MINOR_WMI = 21;
export const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 22;
export const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 23;
export const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 24;
export const SHTDN_REASON_MINOR_MMC = 25;
export const SHTDN_REASON_MINOR_SYSTEMRESTORE = 26;
export const SHTDN_REASON_MINOR_TERMSRV = 32;
export const SHTDN_REASON_MINOR_DC_PROMOTION = 33;
export const SHTDN_REASON_MINOR_DC_DEMOTION = 34;
export const SHTDN_REASON_UNKNOWN = 255;
export const SHTDN_REASON_LEGACY_API = 2147942400;
export const SHTDN_REASON_VALID_BIT_MASK = 3238002687;
export const SHUTDOWN_FORCE_OTHERS = 1;
export const SHUTDOWN_FORCE_SELF = 2;
export const SHUTDOWN_RESTART = 4;
export const SHUTDOWN_POWEROFF = 8;
export const SHUTDOWN_NOREBOOT = 16;
export const SHUTDOWN_GRACE_OVERRIDE = 32;
export const SHUTDOWN_INSTALL_UPDATES = 64;
export const SHUTDOWN_RESTARTAPPS = 128;
export const SHUTDOWN_SKIP_SVC_PRESHUTDOWN = 256;
export const SHUTDOWN_HYBRID = 512;
export const SHUTDOWN_RESTART_BOOTOPTIONS = 1024;
export const SHUTDOWN_SOFT_REBOOT = 2048;
export const SHUTDOWN_MOBILE_UI = 4096;
export const SHUTDOWN_ARSO = 8192;
export const SHUTDOWN_CHECK_SAFE_FOR_SERVER = 16384;
export const SHUTDOWN_VAIL_CONTAINER = 32768;
export const SHUTDOWN_SYSTEM_INITIATED = 65536;
export const EWX_HYBRID_SHUTDOWN = 4194304;
export const EWX_LOGOFF = 0;
export const EWX_POWEROFF = 8;
export const EWX_REBOOT = 2;
export const EWX_RESTARTAPPS = 64;
export const EWX_SHUTDOWN = 1;
export const MAX_REASON_NAME_LEN = 64;
export const MAX_REASON_DESC_LEN = 256;
export const MAX_REASON_BUGID_LEN = 32;
export const MAX_REASON_COMMENT_LEN = 512;
export const SHUTDOWN_TYPE_LEN = 32;
export const POLICY_SHOWREASONUI_NEVER = 0;
export const POLICY_SHOWREASONUI_ALWAYS = 1;
export const POLICY_SHOWREASONUI_WORKSTATIONONLY = 2;
export const POLICY_SHOWREASONUI_SERVERONLY = 3;
export const SNAPSHOT_POLICY_NEVER = 0;
export const SNAPSHOT_POLICY_ALWAYS = 1;
export const SNAPSHOT_POLICY_UNPLANNED = 2;
export const MAX_NUM_REASONS = 256;

// Structs

export type PSTR = Deno.PointerValue | Uint8Array;

export type BOOL = number;

export type PWSTR = Deno.PointerValue | Uint8Array;

export type BOOLEAN = number;

export type HWND = bigint | number;

// Native Libraries

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    InitiateSystemShutdownA: {
      parameters: ["buffer", "buffer", "u32", "i32", "i32"],
      result: "i32",
      optional: true,
    },
    InitiateSystemShutdownW: {
      parameters: ["buffer", "buffer", "u32", "i32", "i32"],
      result: "i32",
      optional: true,
    },
    AbortSystemShutdownA: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    AbortSystemShutdownW: {
      parameters: ["buffer"],
      result: "i32",
      optional: true,
    },
    InitiateSystemShutdownExA: {
      parameters: ["buffer", "buffer", "u32", "i32", "i32", "u32"],
      result: "i32",
      optional: true,
    },
    InitiateSystemShutdownExW: {
      parameters: ["buffer", "buffer", "u32", "i32", "i32", "u32"],
      result: "i32",
      optional: true,
    },
    InitiateShutdownA: {
      parameters: ["buffer", "buffer", "u32", "u32", "u32"],
      result: "u32",
      optional: true,
    },
    InitiateShutdownW: {
      parameters: ["buffer", "buffer", "u32", "u32", "u32"],
      result: "u32",
      optional: true,
    },
    CheckForHiberboot: {
      parameters: ["pointer", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    ExitWindowsEx: {
      parameters: ["u32", "u32"],
      result: "i32",
      optional: true,
    },
    LockWorkStation: {
      parameters: [],
      result: "i32",
      optional: true,
    },
    ShutdownBlockReasonCreate: {
      parameters: ["pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    ShutdownBlockReasonQuery: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    ShutdownBlockReasonDestroy: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function InitiateSystemShutdownA(
  lpMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpMessage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwTimeout: number /* u32 */,
  bForceAppsClosed: boolean /* Windows.Win32.Foundation.BOOL */,
  bRebootAfterShutdown: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitiateSystemShutdownA!(util.pstrToFfi(lpMachineName), util.pstrToFfi(lpMessage), dwTimeout, util.boolToFfi(bForceAppsClosed), util.boolToFfi(bRebootAfterShutdown)));
}

export function InitiateSystemShutdownW(
  lpMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpMessage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwTimeout: number /* u32 */,
  bForceAppsClosed: boolean /* Windows.Win32.Foundation.BOOL */,
  bRebootAfterShutdown: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitiateSystemShutdownW!(util.pwstrToFfi(lpMachineName), util.pwstrToFfi(lpMessage), dwTimeout, util.boolToFfi(bForceAppsClosed), util.boolToFfi(bRebootAfterShutdown)));
}

export function AbortSystemShutdownA(
  lpMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AbortSystemShutdownA!(util.pstrToFfi(lpMachineName)));
}

export function AbortSystemShutdownW(
  lpMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AbortSystemShutdownW!(util.pwstrToFfi(lpMachineName)));
}

export function InitiateSystemShutdownExA(
  lpMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpMessage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwTimeout: number /* u32 */,
  bForceAppsClosed: boolean /* Windows.Win32.Foundation.BOOL */,
  bRebootAfterShutdown: boolean /* Windows.Win32.Foundation.BOOL */,
  dwReason: SHUTDOWN_REASON /* Windows.Win32.System.Shutdown.SHUTDOWN_REASON */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitiateSystemShutdownExA!(util.pstrToFfi(lpMachineName), util.pstrToFfi(lpMessage), dwTimeout, util.boolToFfi(bForceAppsClosed), util.boolToFfi(bRebootAfterShutdown), dwReason));
}

export function InitiateSystemShutdownExW(
  lpMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpMessage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwTimeout: number /* u32 */,
  bForceAppsClosed: boolean /* Windows.Win32.Foundation.BOOL */,
  bRebootAfterShutdown: boolean /* Windows.Win32.Foundation.BOOL */,
  dwReason: SHUTDOWN_REASON /* Windows.Win32.System.Shutdown.SHUTDOWN_REASON */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitiateSystemShutdownExW!(util.pwstrToFfi(lpMachineName), util.pwstrToFfi(lpMessage), dwTimeout, util.boolToFfi(bForceAppsClosed), util.boolToFfi(bRebootAfterShutdown), dwReason));
}

export function InitiateShutdownA(
  lpMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpMessage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwGracePeriod: number /* u32 */,
  dwShutdownFlags: SHUTDOWN_FLAGS /* Windows.Win32.System.Shutdown.SHUTDOWN_FLAGS */,
  dwReason: SHUTDOWN_REASON /* Windows.Win32.System.Shutdown.SHUTDOWN_REASON */,
): number /* u32 */ {
  return libADVAPI32_dll.InitiateShutdownA!(util.pstrToFfi(lpMachineName), util.pstrToFfi(lpMessage), dwGracePeriod, dwShutdownFlags, dwReason);
}

export function InitiateShutdownW(
  lpMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpMessage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwGracePeriod: number /* u32 */,
  dwShutdownFlags: SHUTDOWN_FLAGS /* Windows.Win32.System.Shutdown.SHUTDOWN_FLAGS */,
  dwReason: SHUTDOWN_REASON /* Windows.Win32.System.Shutdown.SHUTDOWN_REASON */,
): number /* u32 */ {
  return libADVAPI32_dll.InitiateShutdownW!(util.pwstrToFfi(lpMachineName), util.pwstrToFfi(lpMessage), dwGracePeriod, dwShutdownFlags, dwReason);
}

export function CheckForHiberboot(
  pHiberboot: Deno.PointerValue | Uint8Array /* ptr */,
  bClearFlag: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */,
): number /* u32 */ {
  return libADVAPI32_dll.CheckForHiberboot!(util.toPointer(pHiberboot), util.toPointer(bClearFlag));
}

export function ExitWindowsEx(
  uFlags: EXIT_WINDOWS_FLAGS /* Windows.Win32.System.Shutdown.EXIT_WINDOWS_FLAGS */,
  dwReason: SHUTDOWN_REASON /* Windows.Win32.System.Shutdown.SHUTDOWN_REASON */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ExitWindowsEx!(uFlags, dwReason));
}

export function LockWorkStation(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.LockWorkStation!());
}

export function ShutdownBlockReasonCreate(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pwszReason: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ShutdownBlockReasonCreate!((hWnd), util.pwstrToFfi(pwszReason)));
}

export function ShutdownBlockReasonQuery(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pwszBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBuff: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ShutdownBlockReasonQuery!((hWnd), util.pwstrToFfi(pwszBuff), util.toPointer(pcchBuff)));
}

export function ShutdownBlockReasonDestroy(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ShutdownBlockReasonDestroy!((hWnd)));
}

