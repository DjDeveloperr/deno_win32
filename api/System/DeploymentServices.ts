/// Auto-generated by Deno Win32: Windows.Win32.System.DeploymentServices.Apis

import * as util from "../../util.ts";

// Enums
export type CPU_ARCHITECTURE = number;
export type PFN_WDS_CLI_CALLBACK_MESSAGE_ID = number;
export type WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL = number;
export type WDS_CLI_IMAGE_TYPE = number;
export type WDS_CLI_FIRMWARE_TYPE = number;
export type WDS_CLI_IMAGE_PARAM_TYPE = number;
export type TRANSPORTPROVIDER_CALLBACK_ID = number;
export type TRANSPORTCLIENT_CALLBACK_ID = number;
export type WDSTRANSPORT_FEATURE_FLAGS = number;
export type WDSTRANSPORT_PROTOCOL_FLAGS = number;
export type WDSTRANSPORT_NAMESPACE_TYPE = number;
export type WDSTRANSPORT_DISCONNECT_TYPE = number;
export type WDSTRANSPORT_SERVICE_NOTIFICATION = number;
export type WDSTRANSPORT_IP_ADDRESS_TYPE = number;
export type WDSTRANSPORT_IP_ADDRESS_SOURCE_TYPE = number;
export type WDSTRANSPORT_NETWORK_PROFILE_TYPE = number;
export type WDSTRANSPORT_DIAGNOSTICS_COMPONENT_FLAGS = number;
export type WDSTRANSPORT_SLOW_CLIENT_HANDLING_TYPE = number;
export type WDSTRANSPORT_UDP_PORT_POLICY = number;
export type WDSTRANSPORT_TFTP_CAPABILITY = number;

// Constants
export const CPU_ARCHITECTURE_AMD64 = 9;
export const CPU_ARCHITECTURE_IA64 = 6;
export const CPU_ARCHITECTURE_INTEL = 0;
export const WDS_CLI_MSG_START = 0;
export const WDS_CLI_MSG_COMPLETE = 1;
export const WDS_CLI_MSG_PROGRESS = 2;
export const WDS_CLI_MSG_TEXT = 3;
export const WDS_TRANSPORTCLIENT_AUTH = 1;
export const WDS_TRANSPORTCLIENT_NO_AUTH = 2;
export const WDS_CLI_TRANSFER_ASYNCHRONOUS = 1;
export const WDS_CLI_NO_SPARSE_FILE = 2;
export const PXE_DHCP_SERVER_PORT = 67;
export const PXE_DHCP_CLIENT_PORT = 68;
export const PXE_SERVER_PORT = 4011;
export const PXE_DHCPV6_SERVER_PORT = 547;
export const PXE_DHCPV6_CLIENT_PORT = 546;
export const PXE_DHCP_FILE_SIZE = 128;
export const PXE_DHCP_SERVER_SIZE = 64;
export const PXE_DHCP_HWAADR_SIZE = 16;
export const PXE_DHCP_MAGIC_COOKIE_SIZE = 4;
export const PXE_REG_INDEX_TOP = 0;
export const PXE_REG_INDEX_BOTTOM = 4294967295;
export const PXE_CALLBACK_RECV_REQUEST = 0;
export const PXE_CALLBACK_SHUTDOWN = 1;
export const PXE_CALLBACK_SERVICE_CONTROL = 2;
export const PXE_CALLBACK_MAX = 3;
export const PXE_GSI_TRACE_ENABLED = 1;
export const PXE_GSI_SERVER_DUID = 2;
export const PXE_MAX_ADDRESS = 16;
export const PXE_ADDR_BROADCAST = 1;
export const PXE_ADDR_USE_PORT = 2;
export const PXE_ADDR_USE_ADDR = 4;
export const PXE_ADDR_USE_DHCP_RULES = 8;
export const PXE_DHCPV6_RELAY_HOP_COUNT_LIMIT = 32;
export const PXE_BA_NBP = 1;
export const PXE_BA_CUSTOM = 2;
export const PXE_BA_IGNORE = 3;
export const PXE_BA_REJECTED = 4;
export const PXE_TRACE_VERBOSE = 65536;
export const PXE_TRACE_INFO = 131072;
export const PXE_TRACE_WARNING = 262144;
export const PXE_TRACE_ERROR = 524288;
export const PXE_TRACE_FATAL = 1048576;
export const PXE_PROV_ATTR_FILTER = 0;
export const PXE_PROV_ATTR_FILTER_IPV6 = 1;
export const PXE_PROV_ATTR_IPV6_CAPABLE = 2;
export const PXE_PROV_FILTER_ALL = 0;
export const PXE_PROV_FILTER_DHCP_ONLY = 1;
export const PXE_PROV_FILTER_PXE_ONLY = 2;
export const MC_SERVER_CURRENT_VERSION = 1;
export const TRANSPORTPROVIDER_CURRENT_VERSION = 1;
export const WDS_MC_TRACE_VERBOSE = 65536;
export const WDS_MC_TRACE_INFO = 131072;
export const WDS_MC_TRACE_WARNING = 262144;
export const WDS_MC_TRACE_ERROR = 524288;
export const WDS_MC_TRACE_FATAL = 1048576;
export const WDS_TRANSPORTCLIENT_CURRENT_API_VERSION = 1;
export const WDS_TRANSPORTCLIENT_PROTOCOL_MULTICAST = 1;
export const WDS_TRANSPORTCLIENT_NO_CACHE = 0;
export const WDS_TRANSPORTCLIENT_STATUS_IN_PROGRESS = 1;
export const WDS_TRANSPORTCLIENT_STATUS_SUCCESS = 2;
export const WDS_TRANSPORTCLIENT_STATUS_FAILURE = 3;
export const WDSTRANSPORT_RESOURCE_UTILIZATION_UNKNOWN = 255;
export const WDSBP_PK_TYPE_DHCP = 1;
export const WDSBP_PK_TYPE_WDSNBP = 2;
export const WDSBP_PK_TYPE_BCD = 4;
export const WDSBP_PK_TYPE_DHCPV6 = 8;
export const WDSBP_OPT_TYPE_NONE = 0;
export const WDSBP_OPT_TYPE_BYTE = 1;
export const WDSBP_OPT_TYPE_USHORT = 2;
export const WDSBP_OPT_TYPE_ULONG = 3;
export const WDSBP_OPT_TYPE_WSTR = 4;
export const WDSBP_OPT_TYPE_STR = 5;
export const WDSBP_OPT_TYPE_IP4 = 6;
export const WDSBP_OPT_TYPE_IP6 = 7;
export const WDSBP_OPTVAL_ACTION_APPROVAL = 1;
export const WDSBP_OPTVAL_ACTION_REFERRAL = 3;
export const WDSBP_OPTVAL_ACTION_ABORT = 5;
export const WDSBP_OPTVAL_PXE_PROMPT_OPTIN = 1;
export const WDSBP_OPTVAL_PXE_PROMPT_NOPROMPT = 2;
export const WDSBP_OPTVAL_PXE_PROMPT_OPTOUT = 3;
export const WDSBP_OPTVAL_NBP_VER_7 = 1792;
export const WDSBP_OPTVAL_NBP_VER_8 = 2048;
export const FACILITY_WDSMCSERVER = 289;
export const FACILITY_WDSMCCLIENT = 290;
export const WDSMCSERVER_CATEGORY = 2216203124737;
export const WDSMCCLIENT_CATEGORY = 4415226380290;
export const WDSMCS_E_SESSION_SHUTDOWN_IN_PROGRESS = 2378183198159995136n;
export const WDSMCS_E_REQCALLBACKS_NOT_REG = 2378184297671622913n;
export const WDSMCS_E_INCOMPATIBLE_VERSION = 2378185397183250690n;
export const WDSMCS_E_CONTENT_NOT_FOUND = 2378186496694878467n;
export const WDSMCS_E_CLIENT_NOT_FOUND = 2378187596206506244n;
export const WDSMCS_E_NAMESPACE_NOT_FOUND = 2378188695718134021n;
export const WDSMCS_E_CONTENT_PROVIDER_NOT_FOUND = 2378189795229761798n;
export const WDSMCS_E_NAMESPACE_ALREADY_EXISTS = 2378190894741389575n;
export const WDSMCS_E_NAMESPACE_SHUTDOWN_IN_PROGRESS = 2378191994253017352n;
export const WDSMCS_E_NAMESPACE_ALREADY_STARTED = 2378193093764645129n;
export const WDSMCS_E_NS_START_FAILED_NO_CLIENTS = 2378194193276272906n;
export const WDSMCS_E_START_TIME_IN_PAST = 2378195292787900683n;
export const WDSMCS_E_PACKET_NOT_HASHED = 2378196392299528460n;
export const WDSMCS_E_PACKET_NOT_SIGNED = 2378197491811156237n;
export const WDSMCS_E_PACKET_HAS_SECURITY = 2378198591322784014n;
export const WDSMCS_E_PACKET_NOT_CHECKSUMED = 2378199690834411791n;
export const WDSMCS_E_CLIENT_DOESNOT_SUPPORT_SECURITY_MODE = 2378463573625078032n;
export const EVT_WDSMCS_S_PARAMETERS_READ = 2378464670989222400n;
export const EVT_WDSMCS_E_PARAMETERS_READ_FAILED = 2378465772648333825n;
export const EVT_WDSMCS_E_DUPLICATE_MULTICAST_ADDR = 2378466872159961602n;
export const EVT_WDSMCS_E_NON_WDS_DUPLICATE_MULTICAST_ADDR = 2378551534555300355n;
export const EVT_WDSMCS_E_CP_DLL_LOAD_FAILED = 2378552634066928208n;
export const EVT_WDSMCS_E_CP_INIT_FUNC_MISSING = 2378553733578555985n;
export const EVT_WDSMCS_E_CP_INIT_FUNC_FAILED = 2378554833090183762n;
export const EVT_WDSMCS_E_CP_INCOMPATIBLE_SERVER_VERSION = 2378555932601811539n;
export const EVT_WDSMCS_E_CP_CALLBACKS_NOT_REG = 2378557032113439316n;
export const EVT_WDSMCS_E_CP_SHUTDOWN_FUNC_FAILED = 2378558131625067093n;
export const EVT_WDSMCS_E_CP_MEMORY_LEAK = 2378559231136694870n;
export const EVT_WDSMCS_E_CP_OPEN_INSTANCE_FAILED = 2378560330648322647n;
export const EVT_WDSMCS_E_CP_CLOSE_INSTANCE_FAILED = 2378561430159950424n;
export const EVT_WDSMCS_E_CP_OPEN_CONTENT_FAILED = 2378562529671578201n;
export const EVT_WDSMCS_W_CP_DLL_LOAD_FAILED_NOT_CRITICAL = 2378563628109464154n;
export const EVT_WDSMCS_E_CP_DLL_LOAD_FAILED_CRITICAL = 2378745048601789019n;
export const EVT_WDSMCS_E_NSREG_START_TIME_IN_PAST = 2378746148113416960n;
export const EVT_WDSMCS_E_NSREG_CONTENT_PROVIDER_NOT_REG = 2378747247625044737n;
export const EVT_WDSMCS_E_NSREG_NAMESPACE_EXISTS = 2378748347136672514n;
export const EVT_WDSMCS_E_NSREG_FAILURE = 2450802642639717123n;
export const WDSTPC_E_CALLBACKS_NOT_REG = 2450803742151410432n;
export const WDSTPC_E_ALREADY_COMPLETED = 2450804841663038209n;
export const WDSTPC_E_ALREADY_IN_PROGRESS = 2450805941174665986n;
export const WDSTPC_E_UNKNOWN_ERROR = 2450807040686293763n;
export const WDSTPC_E_NOT_INITIALIZED = 2450808140197921540n;
export const WDSTPC_E_KICKED_POLICY_NOT_MET = 2450809239709549317n;
export const WDSTPC_E_KICKED_FALLBACK = 2450810339221177094n;
export const WDSTPC_E_KICKED_FAIL = 2450811438732804871n;
export const WDSTPC_E_KICKED_UNKNOWN = 2450812538244432648n;
export const WDSTPC_E_MULTISTREAM_NOT_ENABLED = 2450813637756060425n;
export const WDSTPC_E_ALREADY_IN_LOWEST_SESSION = 2450814737267688202n;
export const WDSTPC_E_CLIENT_DEMOTE_NOT_SUPPORTED = 2450815836779315979n;
export const WDSTPC_E_NO_IP4_INTERFACE = 2450816936290943756n;
export const WDSTPTC_E_WIM_APPLY_REQUIRES_REFERENCE_IMAGE = 1153203000003658509n;
export const FACILITY_WDSTPTMGMT = 272;
export const WDSTPTMGMT_CATEGORY = 2216203124737;
export const WDSTPTMGMT_E_INVALID_PROPERTY = 1153204099514106112n;
export const WDSTPTMGMT_E_INVALID_OPERATION = 1153205199025733889n;
export const WDSTPTMGMT_E_INVALID_CLASS = 1153206298537361666n;
export const WDSTPTMGMT_E_CONTENT_PROVIDER_ALREADY_REGISTERED = 1153207398048989443n;
export const WDSTPTMGMT_E_CONTENT_PROVIDER_NOT_REGISTERED = 1153208497560617220n;
export const WDSTPTMGMT_E_INVALID_CONTENT_PROVIDER_NAME = 1153209597072244997n;
export const WDSTPTMGMT_E_TRANSPORT_SERVER_ROLE_NOT_CONFIGURED = 1153210696583872774n;
export const WDSTPTMGMT_E_NAMESPACE_ALREADY_REGISTERED = 1153211796095500551n;
export const WDSTPTMGMT_E_NAMESPACE_NOT_REGISTERED = 1153212895607128328n;
export const WDSTPTMGMT_E_CANNOT_REINITIALIZE_OBJECT = 1153213995118756105n;
export const WDSTPTMGMT_E_INVALID_NAMESPACE_NAME = 1153215094630383882n;
export const WDSTPTMGMT_E_INVALID_NAMESPACE_DATA = 1153216194142011659n;
export const WDSTPTMGMT_E_NAMESPACE_READ_ONLY = 1153217293653639436n;
export const WDSTPTMGMT_E_INVALID_NAMESPACE_START_TIME = 1153218393165267213n;
export const WDSTPTMGMT_E_INVALID_DIAGNOSTICS_COMPONENTS = 1153219492676894990n;
export const WDSTPTMGMT_E_CANNOT_REFRESH_DIRTY_OBJECT = 1153220592188522767n;
export const WDSTPTMGMT_E_INVALID_SERVICE_IP_ADDRESS_RANGE = 1153221691700150544n;
export const WDSTPTMGMT_E_INVALID_SERVICE_PORT_RANGE = 1153222791211778321n;
export const WDSTPTMGMT_E_INVALID_NAMESPACE_START_PARAMETERS = 1153223890723406098n;
export const WDSTPTMGMT_E_TRANSPORT_SERVER_UNAVAILABLE = 1153224990235033875n;
export const WDSTPTMGMT_E_NAMESPACE_NOT_ON_SERVER = 1153226089746661652n;
export const WDSTPTMGMT_E_NAMESPACE_REMOVED_FROM_SERVER = 1153227189258289429n;
export const WDSTPTMGMT_E_INVALID_IP_ADDRESS = 1153228288769917206n;
export const WDSTPTMGMT_E_INVALID_IPV4_MULTICAST_ADDRESS = 1153229388281544983n;
export const WDSTPTMGMT_E_INVALID_IPV6_MULTICAST_ADDRESS = 1153230487793172760n;
export const WDSTPTMGMT_E_IPV6_NOT_SUPPORTED = 1153231587304800537n;
export const WDSTPTMGMT_E_INVALID_IPV6_MULTICAST_ADDRESS_SOURCE = 1153232686816428314n;
export const WDSTPTMGMT_E_INVALID_MULTISTREAM_STREAM_COUNT = 1153233786328056091n;
export const WDSTPTMGMT_E_INVALID_AUTO_DISCONNECT_THRESHOLD = 1153234885839683868n;
export const WDSTPTMGMT_E_MULTICAST_SESSION_POLICY_NOT_SUPPORTED = 1153235985351311645n;
export const WDSTPTMGMT_E_INVALID_SLOW_CLIENT_HANDLING_TYPE = 1153237084862939422n;
export const WDSTPTMGMT_E_NETWORK_PROFILES_NOT_SUPPORTED = 1153238184374567199n;
export const WDSTPTMGMT_E_UDP_PORT_POLICY_NOT_SUPPORTED = 1153239283886194976n;
export const WDSTPTMGMT_E_TFTP_MAX_BLOCKSIZE_NOT_SUPPORTED = 1153240383397822753n;
export const WDSTPTMGMT_E_TFTP_VAR_WINDOW_NOT_SUPPORTED = 1153241482909450530n;
export const WDSTPTMGMT_E_INVALID_TFTP_MAX_BLOCKSIZE = 1225260606925308195n;
export const WdsCliFlagEnumFilterVersion = 1;
export const WdsCliFlagEnumFilterFirmware = 2;
export const WDS_LOG_TYPE_CLIENT_ERROR = 1;
export const WDS_LOG_TYPE_CLIENT_STARTED = 2;
export const WDS_LOG_TYPE_CLIENT_FINISHED = 3;
export const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED = 4;
export const WDS_LOG_TYPE_CLIENT_APPLY_STARTED = 5;
export const WDS_LOG_TYPE_CLIENT_APPLY_FINISHED = 6;
export const WDS_LOG_TYPE_CLIENT_GENERIC_MESSAGE = 7;
export const WDS_LOG_TYPE_CLIENT_UNATTEND_MODE = 8;
export const WDS_LOG_TYPE_CLIENT_TRANSFER_START = 9;
export const WDS_LOG_TYPE_CLIENT_TRANSFER_END = 10;
export const WDS_LOG_TYPE_CLIENT_TRANSFER_DOWNGRADE = 11;
export const WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR = 12;
export const WDS_LOG_TYPE_CLIENT_POST_ACTIONS_START = 13;
export const WDS_LOG_TYPE_CLIENT_POST_ACTIONS_END = 14;
export const WDS_LOG_TYPE_CLIENT_APPLY_STARTED_2 = 15;
export const WDS_LOG_TYPE_CLIENT_APPLY_FINISHED_2 = 16;
export const WDS_LOG_TYPE_CLIENT_DOMAINJOINERROR_2 = 17;
export const WDS_LOG_TYPE_CLIENT_DRIVER_PACKAGE_NOT_ACCESSIBLE = 18;
export const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_START = 19;
export const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_END = 20;
export const WDS_LOG_TYPE_CLIENT_OFFLINE_DRIVER_INJECTION_FAILURE = 21;
export const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED2 = 22;
export const WDS_LOG_TYPE_CLIENT_IMAGE_SELECTED3 = 23;
export const WDS_LOG_TYPE_CLIENT_MAX_CODE = 24;
export const WDS_LOG_LEVEL_DISABLED = 0;
export const WDS_LOG_LEVEL_ERROR = 1;
export const WDS_LOG_LEVEL_WARNING = 2;
export const WDS_LOG_LEVEL_INFO = 3;
export const WDS_CLI_IMAGE_TYPE_UNKNOWN = 0;
export const WDS_CLI_IMAGE_TYPE_WIM = 1;
export const WDS_CLI_IMAGE_TYPE_VHD = 2;
export const WDS_CLI_IMAGE_TYPE_VHDX = 3;
export const WDS_CLI_FIRMWARE_UNKNOWN = 0;
export const WDS_CLI_FIRMWARE_BIOS = 1;
export const WDS_CLI_FIRMWARE_EFI = 2;
export const WDS_CLI_IMAGE_PARAM_UNKNOWN = 0;
export const WDS_CLI_IMAGE_PARAM_SPARSE_FILE = 1;
export const WDS_CLI_IMAGE_PARAM_SUPPORTED_FIRMWARES = 2;
export const WDS_TRANSPORTPROVIDER_CREATE_INSTANCE = 0;
export const WDS_TRANSPORTPROVIDER_COMPARE_CONTENT = 1;
export const WDS_TRANSPORTPROVIDER_OPEN_CONTENT = 2;
export const WDS_TRANSPORTPROVIDER_USER_ACCESS_CHECK = 3;
export const WDS_TRANSPORTPROVIDER_GET_CONTENT_SIZE = 4;
export const WDS_TRANSPORTPROVIDER_READ_CONTENT = 5;
export const WDS_TRANSPORTPROVIDER_CLOSE_CONTENT = 6;
export const WDS_TRANSPORTPROVIDER_CLOSE_INSTANCE = 7;
export const WDS_TRANSPORTPROVIDER_SHUTDOWN = 8;
export const WDS_TRANSPORTPROVIDER_DUMP_STATE = 9;
export const WDS_TRANSPORTPROVIDER_REFRESH_SETTINGS = 10;
export const WDS_TRANSPORTPROVIDER_GET_CONTENT_METADATA = 11;
export const WDS_TRANSPORTPROVIDER_MAX_CALLBACKS = 12;
export const WDS_TRANSPORTCLIENT_SESSION_START = 0;
export const WDS_TRANSPORTCLIENT_RECEIVE_CONTENTS = 1;
export const WDS_TRANSPORTCLIENT_SESSION_COMPLETE = 2;
export const WDS_TRANSPORTCLIENT_RECEIVE_METADATA = 3;
export const WDS_TRANSPORTCLIENT_SESSION_STARTEX = 4;
export const WDS_TRANSPORTCLIENT_SESSION_NEGOTIATE = 5;
export const WDS_TRANSPORTCLIENT_MAX_CALLBACKS = 6;
export const WdsTptFeatureAdminPack = 1;
export const WdsTptFeatureTransportServer = 2;
export const WdsTptFeatureDeploymentServer = 4;
export const WdsTptProtocolUnicast = 1;
export const WdsTptProtocolMulticast = 2;
export const WdsTptNamespaceTypeUnknown = 0;
export const WdsTptNamespaceTypeAutoCast = 1;
export const WdsTptNamespaceTypeScheduledCastManualStart = 2;
export const WdsTptNamespaceTypeScheduledCastAutoStart = 3;
export const WdsTptDisconnectUnknown = 0;
export const WdsTptDisconnectFallback = 1;
export const WdsTptDisconnectAbort = 2;
export const WdsTptServiceNotifyUnknown = 0;
export const WdsTptServiceNotifyReadSettings = 1;
export const WdsTptIpAddressUnknown = 0;
export const WdsTptIpAddressIpv4 = 1;
export const WdsTptIpAddressIpv6 = 2;
export const WdsTptIpAddressSourceUnknown = 0;
export const WdsTptIpAddressSourceDhcp = 1;
export const WdsTptIpAddressSourceRange = 2;
export const WdsTptNetworkProfileUnknown = 0;
export const WdsTptNetworkProfileCustom = 1;
export const WdsTptNetworkProfile10Mbps = 2;
export const WdsTptNetworkProfile100Mbps = 3;
export const WdsTptNetworkProfile1Gbps = 4;
export const WdsTptDiagnosticsComponentPxe = 1;
export const WdsTptDiagnosticsComponentTftp = 2;
export const WdsTptDiagnosticsComponentImageServer = 4;
export const WdsTptDiagnosticsComponentMulticast = 8;
export const WdsTptSlowClientHandlingUnknown = 0;
export const WdsTptSlowClientHandlingNone = 1;
export const WdsTptSlowClientHandlingAutoDisconnect = 2;
export const WdsTptSlowClientHandlingMultistream = 3;
export const WdsTptUdpPortPolicyDynamic = 0;
export const WdsTptUdpPortPolicyFixed = 1;
export const WdsTptTftpCapMaximumBlockSize = 1;
export const WdsTptTftpCapVariableWindow = 2;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.DeploymentServices.WDS_CLI_CRED (size: 24)
 */
export interface WDS_CLI_CRED {
  /** Windows.Win32.Foundation.PWSTR */
  pwszUserName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDomain: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null;
}

export const sizeofWDS_CLI_CRED = 24;

export function allocWDS_CLI_CRED(data?: Partial<WDS_CLI_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofWDS_CLI_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszUserName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszUserName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszDomain !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszDomain);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCP_OPTION (size: 16)
 */
export interface PXE_DHCP_OPTION {
  /** u8 */
  OptionType: number;
  /** u8 */
  OptionLength: number;
  /** array */
  OptionValue: Deno.PointerValue | null;
}

export const sizeofPXE_DHCP_OPTION = 16;

export function allocPXE_DHCP_OPTION(data?: Partial<PXE_DHCP_OPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCP_OPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.OptionType !== undefined) view.setUint8(0, Number(data.OptionType));
  // 0x01: u8
  if (data?.OptionLength !== undefined) view.setUint8(1, Number(data.OptionLength));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.OptionValue !== undefined) view.setBigUint64(8, data.OptionValue === null ? 0n : BigInt(util.toPointer(data.OptionValue)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCP_MESSAGE (size: 72)
 */
export interface PXE_DHCP_MESSAGE {
  /** u8 */
  Operation: number;
  /** u8 */
  HardwareAddressType: number;
  /** u8 */
  HardwareAddressLength: number;
  /** u8 */
  HopCount: number;
  /** u32 */
  TransactionID: number;
  /** u16 */
  SecondsSinceBoot: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  ClientIpAddress: number;
  /** u32 */
  YourIpAddress: number;
  /** u32 */
  BootstrapServerAddress: number;
  /** u32 */
  RelayAgentIpAddress: number;
  /** array */
  HardwareAddress: Deno.PointerValue | null;
  /** array */
  HostName: Deno.PointerValue | null;
  /** array */
  BootFileName: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DeploymentServices.PXE_DHCP_OPTION */
  Option: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPXE_DHCP_MESSAGE = 72;

export function allocPXE_DHCP_MESSAGE(data?: Partial<PXE_DHCP_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCP_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Operation !== undefined) view.setUint8(0, Number(data.Operation));
  // 0x01: u8
  if (data?.HardwareAddressType !== undefined) view.setUint8(1, Number(data.HardwareAddressType));
  // 0x02: u8
  if (data?.HardwareAddressLength !== undefined) view.setUint8(2, Number(data.HardwareAddressLength));
  // 0x03: u8
  if (data?.HopCount !== undefined) view.setUint8(3, Number(data.HopCount));
  // 0x04: u32
  if (data?.TransactionID !== undefined) view.setUint32(4, Number(data.TransactionID), true);
  // 0x08: u16
  if (data?.SecondsSinceBoot !== undefined) view.setUint16(8, Number(data.SecondsSinceBoot), true);
  // 0x0a: u16
  if (data?.Reserved !== undefined) view.setUint16(10, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.ClientIpAddress !== undefined) view.setUint32(12, Number(data.ClientIpAddress), true);
  // 0x10: u32
  if (data?.YourIpAddress !== undefined) view.setUint32(16, Number(data.YourIpAddress), true);
  // 0x14: u32
  if (data?.BootstrapServerAddress !== undefined) view.setUint32(20, Number(data.BootstrapServerAddress), true);
  // 0x18: u32
  if (data?.RelayAgentIpAddress !== undefined) view.setUint32(24, Number(data.RelayAgentIpAddress), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.HardwareAddress !== undefined) view.setBigUint64(32, data.HardwareAddress === null ? 0n : BigInt(util.toPointer(data.HardwareAddress)), true);
  // 0x28: pointer
  if (data?.HostName !== undefined) view.setBigUint64(40, data.HostName === null ? 0n : BigInt(util.toPointer(data.HostName)), true);
  // 0x30: pointer
  if (data?.BootFileName !== undefined) view.setBigUint64(48, data.BootFileName === null ? 0n : BigInt(util.toPointer(data.BootFileName)), true);
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x40: pointer
  if (data?.Option !== undefined) view.setBigUint64(64, data.Option === null ? 0n : BigInt(util.toPointer(data.Option)), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCPV6_OPTION (size: 16)
 */
export interface PXE_DHCPV6_OPTION {
  /** u16 */
  OptionCode: number;
  /** u16 */
  DataLength: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofPXE_DHCPV6_OPTION = 16;

export function allocPXE_DHCPV6_OPTION(data?: Partial<PXE_DHCPV6_OPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCPV6_OPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.OptionCode !== undefined) view.setUint16(0, Number(data.OptionCode), true);
  // 0x02: u16
  if (data?.DataLength !== undefined) view.setUint16(2, Number(data.DataLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCPV6_MESSAGE_HEADER (size: 16)
 */
export interface PXE_DHCPV6_MESSAGE_HEADER {
  /** u8 */
  MessageType: number;
  /** array */
  Message: Deno.PointerValue | null;
}

export const sizeofPXE_DHCPV6_MESSAGE_HEADER = 16;

export function allocPXE_DHCPV6_MESSAGE_HEADER(data?: Partial<PXE_DHCPV6_MESSAGE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCPV6_MESSAGE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MessageType !== undefined) view.setUint8(0, Number(data.MessageType));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Message !== undefined) view.setBigUint64(8, data.Message === null ? 0n : BigInt(util.toPointer(data.Message)), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCPV6_MESSAGE (size: 16)
 */
export interface PXE_DHCPV6_MESSAGE {
  /** u8 */
  MessageType: number;
  /** u8 */
  TransactionIDByte1: number;
  /** u8 */
  TransactionIDByte2: number;
  /** u8 */
  TransactionIDByte3: number;
  /** array */
  Options: Deno.PointerValue | null;
}

export const sizeofPXE_DHCPV6_MESSAGE = 16;

export function allocPXE_DHCPV6_MESSAGE(data?: Partial<PXE_DHCPV6_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCPV6_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MessageType !== undefined) view.setUint8(0, Number(data.MessageType));
  // 0x01: u8
  if (data?.TransactionIDByte1 !== undefined) view.setUint8(1, Number(data.TransactionIDByte1));
  // 0x02: u8
  if (data?.TransactionIDByte2 !== undefined) view.setUint8(2, Number(data.TransactionIDByte2));
  // 0x03: u8
  if (data?.TransactionIDByte3 !== undefined) view.setUint8(3, Number(data.TransactionIDByte3));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Options !== undefined) view.setBigUint64(8, data.Options === null ? 0n : BigInt(util.toPointer(data.Options)), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCPV6_RELAY_MESSAGE (size: 32)
 */
export interface PXE_DHCPV6_RELAY_MESSAGE {
  /** u8 */
  MessageType: number;
  /** u8 */
  HopCount: number;
  /** array */
  LinkAddress: Deno.PointerValue | null;
  /** array */
  PeerAddress: Deno.PointerValue | null;
  /** array */
  Options: Deno.PointerValue | null;
}

export const sizeofPXE_DHCPV6_RELAY_MESSAGE = 32;

export function allocPXE_DHCPV6_RELAY_MESSAGE(data?: Partial<PXE_DHCPV6_RELAY_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCPV6_RELAY_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MessageType !== undefined) view.setUint8(0, Number(data.MessageType));
  // 0x01: u8
  if (data?.HopCount !== undefined) view.setUint8(1, Number(data.HopCount));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LinkAddress !== undefined) view.setBigUint64(8, data.LinkAddress === null ? 0n : BigInt(util.toPointer(data.LinkAddress)), true);
  // 0x10: pointer
  if (data?.PeerAddress !== undefined) view.setBigUint64(16, data.PeerAddress === null ? 0n : BigInt(util.toPointer(data.PeerAddress)), true);
  // 0x18: pointer
  if (data?.Options !== undefined) view.setBigUint64(24, data.Options === null ? 0n : BigInt(util.toPointer(data.Options)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.DeploymentServices.PXE_PROVIDER (size: 32)
 */
export interface PXE_PROVIDER {
  /** u32 */
  uSizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFilePath: string | null;
  /** Windows.Win32.Foundation.BOOL */
  bIsCritical: boolean;
  /** u32 */
  uIndex: number;
}

export const sizeofPXE_PROVIDER = 32;

export function allocPXE_PROVIDER(data?: Partial<PXE_PROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_PROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uSizeOfStruct !== undefined) view.setUint32(0, Number(data.uSizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFilePath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFilePath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.bIsCritical !== undefined) view.setInt32(24, Number(data.bIsCritical), true);
  // 0x1c: u32
  if (data?.uIndex !== undefined) view.setUint32(28, Number(data.uIndex), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_ADDRESS (size: 24)
 */
export interface PXE_ADDRESS {
  /** u32 */
  uFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uAddrLen: number;
  /** u16 */
  uPort: number;
}

export const sizeofPXE_ADDRESS = 24;

export function allocPXE_ADDRESS(data?: Partial<PXE_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uFlags !== undefined) view.setUint32(0, Number(data.uFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.uAddrLen !== undefined) view.setUint32(16, Number(data.uAddrLen), true);
  // 0x14: u16
  if (data?.uPort !== undefined) view.setUint16(20, Number(data.uPort), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.PXE_DHCPV6_NESTED_RELAY_MESSAGE (size: 32)
 */
export interface PXE_DHCPV6_NESTED_RELAY_MESSAGE {
  /** ptr */
  pRelayMessage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbRelayMessage: number;
  /** ptr */
  pInterfaceIdOption: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  cbInterfaceIdOption: number;
}

export const sizeofPXE_DHCPV6_NESTED_RELAY_MESSAGE = 32;

export function allocPXE_DHCPV6_NESTED_RELAY_MESSAGE(data?: Partial<PXE_DHCPV6_NESTED_RELAY_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPXE_DHCPV6_NESTED_RELAY_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRelayMessage !== undefined) view.setBigUint64(0, data.pRelayMessage === null ? 0n : BigInt(util.toPointer(data.pRelayMessage)), true);
  // 0x08: u32
  if (data?.cbRelayMessage !== undefined) view.setUint32(8, Number(data.cbRelayMessage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pInterfaceIdOption !== undefined) view.setBigUint64(16, data.pInterfaceIdOption === null ? 0n : BigInt(util.toPointer(data.pInterfaceIdOption)), true);
  // 0x18: u16
  if (data?.cbInterfaceIdOption !== undefined) view.setUint16(24, Number(data.cbInterfaceIdOption), true);
  // 0x1a: pad6
  return buf;
}

export type HKEY = Deno.PointerValue;

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.DeploymentServices.WDS_TRANSPORTPROVIDER_INIT_PARAMS (size: 24)
 */
export interface WDS_TRANSPORTPROVIDER_INIT_PARAMS {
  /** u32 */
  ulLength: number;
  /** u32 */
  ulMcServerVersion: number;
  /** Windows.Win32.System.Registry.HKEY */
  hRegistryKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProvider: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWDS_TRANSPORTPROVIDER_INIT_PARAMS = 24;

export function allocWDS_TRANSPORTPROVIDER_INIT_PARAMS(data?: Partial<WDS_TRANSPORTPROVIDER_INIT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofWDS_TRANSPORTPROVIDER_INIT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: u32
  if (data?.ulMcServerVersion !== undefined) view.setUint32(4, Number(data.ulMcServerVersion), true);
  // 0x08: pointer
  if (data?.hRegistryKey !== undefined) view.setBigUint64(8, data.hRegistryKey === null ? 0n : BigInt(util.toPointer(data.hRegistryKey)), true);
  // 0x10: pointer
  if (data?.hProvider !== undefined) view.setBigUint64(16, data.hProvider === null ? 0n : BigInt(util.toPointer(data.hProvider)), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.WDS_TRANSPORTPROVIDER_SETTINGS (size: 8)
 */
export interface WDS_TRANSPORTPROVIDER_SETTINGS {
  /** u32 */
  ulLength: number;
  /** u32 */
  ulProviderVersion: number;
}

export const sizeofWDS_TRANSPORTPROVIDER_SETTINGS = 8;

export function allocWDS_TRANSPORTPROVIDER_SETTINGS(data?: Partial<WDS_TRANSPORTPROVIDER_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWDS_TRANSPORTPROVIDER_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: u32
  if (data?.ulProviderVersion !== undefined) view.setUint32(4, Number(data.ulProviderVersion), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.ULARGE_INTEGER (size: 24)
 */
export interface ULARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofULARGE_INTEGER = 24;

export function allocULARGE_INTEGER(data?: Partial<ULARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofULARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: u64
  if (data?.QuadPart !== undefined) view.setBigUint64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.TRANSPORTCLIENT_SESSION_INFO (size: 24)
 */
export interface TRANSPORTCLIENT_SESSION_INFO {
  /** u32 */
  ulStructureLength: number;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  ullFileSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulBlockSize: number;
}

export const sizeofTRANSPORTCLIENT_SESSION_INFO = 24;

export function allocTRANSPORTCLIENT_SESSION_INFO(data?: Partial<TRANSPORTCLIENT_SESSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORTCLIENT_SESSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulStructureLength !== undefined) view.setUint32(0, Number(data.ulStructureLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ullFileSize !== undefined) view.setBigUint64(8, data.ullFileSize === null ? 0n : BigInt(util.toPointer(data.ullFileSize)), true);
  // 0x10: u32
  if (data?.ulBlockSize !== undefined) view.setUint32(16, Number(data.ulBlockSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.WDS_TRANSPORTCLIENT_REQUEST (size: 64)
 */
export interface WDS_TRANSPORTCLIENT_REQUEST {
  /** u32 */
  ulLength: number;
  /** u32 */
  ulApiVersion: number;
  /** Windows.Win32.System.DeploymentServices.WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL */
  ulAuthLevel: WDS_TRANSPORTCLIENT_REQUEST_AUTH_LEVEL;
  /** Windows.Win32.Foundation.PWSTR */
  pwszServer: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszNamespace: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszObjectName: string | null;
  /** u32 */
  ulCacheSize: number;
  /** u32 */
  ulProtocol: number;
  /** ptr */
  pvProtocolData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulProtocolDataLength: number;
}

export const sizeofWDS_TRANSPORTCLIENT_REQUEST = 64;

export function allocWDS_TRANSPORTCLIENT_REQUEST(data?: Partial<WDS_TRANSPORTCLIENT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofWDS_TRANSPORTCLIENT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: u32
  if (data?.ulApiVersion !== undefined) view.setUint32(4, Number(data.ulApiVersion), true);
  // 0x08: u32
  if (data?.ulAuthLevel !== undefined) view.setUint32(8, Number(data.ulAuthLevel), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszServer !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszServer);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszNamespace !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszNamespace);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszObjectName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.ulCacheSize !== undefined) view.setUint32(40, Number(data.ulCacheSize), true);
  // 0x2c: u32
  if (data?.ulProtocol !== undefined) view.setUint32(44, Number(data.ulProtocol), true);
  // 0x30: pointer
  if (data?.pvProtocolData !== undefined) view.setBigUint64(48, data.pvProtocolData === null ? 0n : BigInt(util.toPointer(data.pvProtocolData)), true);
  // 0x38: u32
  if (data?.ulProtocolDataLength !== undefined) view.setUint32(56, Number(data.ulProtocolDataLength), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.System.DeploymentServices.WDS_TRANSPORTCLIENT_CALLBACKS (size: 48)
 */
export interface WDS_TRANSPORTCLIENT_CALLBACKS {
  /** Windows.Win32.System.DeploymentServices.PFN_WdsTransportClientSessionStart */
  SessionStart: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DeploymentServices.PFN_WdsTransportClientSessionStartEx */
  SessionStartEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DeploymentServices.PFN_WdsTransportClientReceiveContents */
  ReceiveContents: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DeploymentServices.PFN_WdsTransportClientReceiveMetadata */
  ReceiveMetadata: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DeploymentServices.PFN_WdsTransportClientSessionComplete */
  SessionComplete: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DeploymentServices.PFN_WdsTransportClientSessionNegotiate */
  SessionNegotiate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWDS_TRANSPORTCLIENT_CALLBACKS = 48;

export function allocWDS_TRANSPORTCLIENT_CALLBACKS(data?: Partial<WDS_TRANSPORTCLIENT_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofWDS_TRANSPORTCLIENT_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SessionStart !== undefined) view.setBigUint64(0, data.SessionStart === null ? 0n : BigInt(util.toPointer(data.SessionStart)), true);
  // 0x08: pointer
  if (data?.SessionStartEx !== undefined) view.setBigUint64(8, data.SessionStartEx === null ? 0n : BigInt(util.toPointer(data.SessionStartEx)), true);
  // 0x10: pointer
  if (data?.ReceiveContents !== undefined) view.setBigUint64(16, data.ReceiveContents === null ? 0n : BigInt(util.toPointer(data.ReceiveContents)), true);
  // 0x18: pointer
  if (data?.ReceiveMetadata !== undefined) view.setBigUint64(24, data.ReceiveMetadata === null ? 0n : BigInt(util.toPointer(data.ReceiveMetadata)), true);
  // 0x20: pointer
  if (data?.SessionComplete !== undefined) view.setBigUint64(32, data.SessionComplete === null ? 0n : BigInt(util.toPointer(data.SessionComplete)), true);
  // 0x28: pointer
  if (data?.SessionNegotiate !== undefined) view.setBigUint64(40, data.SessionNegotiate === null ? 0n : BigInt(util.toPointer(data.SessionNegotiate)), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libWDSCLIENTAPI = Deno.dlopen("WDSCLIENTAPI", {
    WdsCliClose: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WdsCliRegisterTrace: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WdsCliFreeStringArray: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    WdsCliFindFirstImage: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliFindNextImage: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WdsCliGetEnumerationFlags: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageHandleFromFindHandle: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageHandleFromTransferHandle: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliCreateSession: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliAuthorizeSession: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliInitializeLog: {
      parameters: ["pointer", "u32", "buffer", "buffer"],
      result: "pointer",
    },
    WdsCliLog: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    WdsCliGetImageName: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageDescription: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageType: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageFiles: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageLanguage: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageLanguages: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageVersion: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImagePath: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageIndex: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageArchitecture: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageLastModifiedTime: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageHalName: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageGroup: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageNamespace: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetImageParameter: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WdsCliGetTransferSize: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WdsCliSetTransferBufferSize: {
      parameters: ["u32"],
      result: "void",
    },
    WdsCliTransferImage: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliTransferFile: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliCancelTransfer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WdsCliWaitForTransfer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WdsCliObtainDriverPackages: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliObtainDriverPackagesEx: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WdsCliGetDriverQueryXml: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWDSPXE = Deno.dlopen("WDSPXE", {
    PxeProviderRegister: {
      parameters: ["buffer", "buffer", "u32", "i32", "pointer"],
      result: "u32",
    },
    PxeProviderUnRegister: {
      parameters: ["buffer"],
      result: "u32",
    },
    PxeProviderQueryIndex: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    PxeProviderEnumFirst: {
      parameters: ["pointer"],
      result: "u32",
    },
    PxeProviderEnumNext: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    PxeProviderEnumClose: {
      parameters: ["pointer"],
      result: "u32",
    },
    PxeProviderFreeInfo: {
      parameters: ["pointer"],
      result: "u32",
    },
    PxeRegisterCallback: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PxeSendReply: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PxeAsyncRecvDone: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    PxeTrace: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    PxeTraceV: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    PxePacketAllocate: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    PxePacketFree: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    PxeProviderSetAttribute: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    PxeDhcpInitialize: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PxeDhcpv6Initialize: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PxeDhcpAppendOption: {
      parameters: ["pointer", "u32", "pointer", "u8", "u8", "pointer"],
      result: "u32",
    },
    PxeDhcpv6AppendOption: {
      parameters: ["pointer", "u32", "pointer", "u16", "u16", "pointer"],
      result: "u32",
    },
    PxeDhcpAppendOptionRaw: {
      parameters: ["pointer", "u32", "pointer", "u16", "pointer"],
      result: "u32",
    },
    PxeDhcpv6AppendOptionRaw: {
      parameters: ["pointer", "u32", "pointer", "u16", "pointer"],
      result: "u32",
    },
    PxeDhcpIsValid: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "u32",
    },
    PxeDhcpv6IsValid: {
      parameters: ["pointer", "u32", "i32", "pointer"],
      result: "u32",
    },
    PxeDhcpGetOptionValue: {
      parameters: ["pointer", "u32", "u32", "u8", "pointer", "pointer"],
      result: "u32",
    },
    PxeDhcpv6GetOptionValue: {
      parameters: ["pointer", "u32", "u32", "u16", "pointer", "pointer"],
      result: "u32",
    },
    PxeDhcpGetVendorOptionValue: {
      parameters: ["pointer", "u32", "u8", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PxeDhcpv6GetVendorOptionValue: {
      parameters: ["pointer", "u32", "u32", "u16", "u32", "pointer", "pointer"],
      result: "u32",
    },
    PxeDhcpv6ParseRelayForw: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    PxeDhcpv6CreateRelayRepl: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    PxeGetServerInfo: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    PxeGetServerInfoEx: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWDSMC = Deno.dlopen("WDSMC", {
    WdsTransportServerRegisterCallback: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    WdsTransportServerCompleteRead: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WdsTransportServerTrace: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    WdsTransportServerTraceV: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    WdsTransportServerAllocateBuffer: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    WdsTransportServerFreeBuffer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWDSTPTC = Deno.dlopen("WDSTPTC", {
    WdsTransportClientInitialize: {
      parameters: [],
      result: "u32",
    },
    WdsTransportClientInitializeSession: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WdsTransportClientRegisterCallback: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    WdsTransportClientStartSession: {
      parameters: ["pointer"],
      result: "u32",
    },
    WdsTransportClientCompleteReceive: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    WdsTransportClientCancelSession: {
      parameters: ["pointer"],
      result: "u32",
    },
    WdsTransportClientCancelSessionEx: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WdsTransportClientWaitForCompletion: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WdsTransportClientQueryStatus: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    WdsTransportClientCloseSession: {
      parameters: ["pointer"],
      result: "u32",
    },
    WdsTransportClientAddRefBuffer: {
      parameters: ["pointer"],
      result: "u32",
    },
    WdsTransportClientReleaseBuffer: {
      parameters: ["pointer"],
      result: "u32",
    },
    WdsTransportClientShutdown: {
      parameters: [],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWDSBP = Deno.dlopen("WDSBP", {
    WdsBpParseInitialize: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WdsBpParseInitializev6: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WdsBpInitialize: {
      parameters: ["u8", "pointer"],
      result: "u32",
    },
    WdsBpCloseHandle: {
      parameters: ["pointer"],
      result: "u32",
    },
    WdsBpQueryOption: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WdsBpAddOption: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    WdsBpGetOptionBuffer: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WdsCliClose(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliClose(util.toPointer(Handle)));
}

export function WdsCliRegisterTrace(
  pfn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DeploymentServices.PFN_WdsCliTraceFunction */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliRegisterTrace(util.toPointer(pfn)));
}

export function WdsCliFreeStringArray(
  ppwszArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulCount: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliFreeStringArray(util.toPointer(ppwszArray), ulCount));
}

export function WdsCliFindFirstImage(
  hSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  phFindHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliFindFirstImage(util.toPointer(hSession), util.toPointer(phFindHandle)));
}

export function WdsCliFindNextImage(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliFindNextImage(util.toPointer(Handle)));
}

export function WdsCliGetEnumerationFlags(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetEnumerationFlags(util.toPointer(Handle), util.toPointer(pdwFlags)));
}

export function WdsCliGetImageHandleFromFindHandle(
  FindHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  phImageHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageHandleFromFindHandle(util.toPointer(FindHandle), util.toPointer(phImageHandle)));
}

export function WdsCliGetImageHandleFromTransferHandle(
  hTransfer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  phImageHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageHandleFromTransferHandle(util.toPointer(hTransfer), util.toPointer(phImageHandle)));
}

export function WdsCliCreateSession(
  pwszServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pCred: Deno.PointerValue | Uint8Array | null /* ptr */,
  phSession: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliCreateSession(util.pwstrToFfi(pwszServer), util.toPointer(pCred), util.toPointer(phSession)));
}

export function WdsCliAuthorizeSession(
  hSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pCred: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliAuthorizeSession(util.toPointer(hSession), util.toPointer(pCred)));
}

export function WdsCliInitializeLog(
  hSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulClientArchitecture: CPU_ARCHITECTURE /* Windows.Win32.System.DeploymentServices.CPU_ARCHITECTURE */,
  pwszClientId: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszClientAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliInitializeLog(util.toPointer(hSession), ulClientArchitecture, util.pwstrToFfi(pwszClientId), util.pwstrToFfi(pwszClientAddress)));
}

export function WdsCliLog(
  hSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulLogLevel: number /* u32 */,
  ulMessageCode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliLog(util.toPointer(hSession), ulLogLevel, ulMessageCode));
}

export function WdsCliGetImageName(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageName(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageDescription(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageDescription(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageType(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pImageType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageType(util.toPointer(hIfh), util.toPointer(pImageType)));
}

export function WdsCliGetImageFiles(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pppwszFiles: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageFiles(util.toPointer(hIfh), util.toPointer(pppwszFiles), util.toPointer(pdwCount)));
}

export function WdsCliGetImageLanguage(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageLanguage(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageLanguages(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pppszValues: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwNumValues: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageLanguages(util.toPointer(hIfh), util.toPointer(pppszValues), util.toPointer(pdwNumValues)));
}

export function WdsCliGetImageVersion(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageVersion(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImagePath(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImagePath(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageIndex(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageIndex(util.toPointer(hIfh), util.toPointer(pdwValue)));
}

export function WdsCliGetImageArchitecture(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageArchitecture(util.toPointer(hIfh), util.toPointer(pdwValue)));
}

export function WdsCliGetImageLastModifiedTime(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppSysTimeValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageLastModifiedTime(util.toPointer(hIfh), util.toPointer(ppSysTimeValue)));
}

export function WdsCliGetImageSize(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pullValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageSize(util.toPointer(hIfh), util.toPointer(pullValue)));
}

export function WdsCliGetImageHalName(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageHalName(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageGroup(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageGroup(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageNamespace(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageNamespace(util.toPointer(hIfh), util.toPointer(ppwszValue)));
}

export function WdsCliGetImageParameter(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ParamType: WDS_CLI_IMAGE_PARAM_TYPE /* Windows.Win32.System.DeploymentServices.WDS_CLI_IMAGE_PARAM_TYPE */,
  pResponse: Deno.PointerValue | Uint8Array | null /* ptr */,
  uResponseLen: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetImageParameter(util.toPointer(hIfh), ParamType, util.toPointer(pResponse), uResponseLen));
}

export function WdsCliGetTransferSize(
  hIfh: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pullValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetTransferSize(util.toPointer(hIfh), util.toPointer(pullValue)));
}

export function WdsCliSetTransferBufferSize(
  ulSizeInBytes: number /* u32 */,
): void /* void */ {
  return libWDSCLIENTAPI.WdsCliSetTransferBufferSize(ulSizeInBytes);
}

export function WdsCliTransferImage(
  hImage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pwszLocalPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
  pfnWdsCliCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DeploymentServices.PFN_WdsCliCallback */,
  pvUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  phTransfer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliTransferImage(util.toPointer(hImage), util.pwstrToFfi(pwszLocalPath), dwFlags, dwReserved, util.toPointer(pfnWdsCliCallback), util.toPointer(pvUserData), util.toPointer(phTransfer)));
}

export function WdsCliTransferFile(
  pwszServer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszNamespace: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszRemoteFilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszLocalFilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
  pfnWdsCliCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DeploymentServices.PFN_WdsCliCallback */,
  pvUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  phTransfer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliTransferFile(util.pwstrToFfi(pwszServer), util.pwstrToFfi(pwszNamespace), util.pwstrToFfi(pwszRemoteFilePath), util.pwstrToFfi(pwszLocalFilePath), dwFlags, dwReserved, util.toPointer(pfnWdsCliCallback), util.toPointer(pvUserData), util.toPointer(phTransfer)));
}

export function WdsCliCancelTransfer(
  hTransfer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliCancelTransfer(util.toPointer(hTransfer)));
}

export function WdsCliWaitForTransfer(
  hTransfer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliWaitForTransfer(util.toPointer(hTransfer)));
}

export function WdsCliObtainDriverPackages(
  hImage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppwszServerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pppwszDriverPackages: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliObtainDriverPackages(util.toPointer(hImage), util.toPointer(ppwszServerName), util.toPointer(pppwszDriverPackages), util.toPointer(pulCount)));
}

export function WdsCliObtainDriverPackagesEx(
  hSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pwszMachineInfo: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwszServerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pppwszDriverPackages: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliObtainDriverPackagesEx(util.toPointer(hSession), util.pwstrToFfi(pwszMachineInfo), util.toPointer(ppwszServerName), util.toPointer(pppwszDriverPackages), util.toPointer(pulCount)));
}

export function WdsCliGetDriverQueryXml(
  pwszWinDirPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwszDriverQuery: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSCLIENTAPI.WdsCliGetDriverQueryXml(util.pwstrToFfi(pwszWinDirPath), util.toPointer(ppwszDriverQuery)));
}

export function PxeProviderRegister(
  pszProviderName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszModulePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Index: number /* u32 */,
  bIsCritical: boolean /* Windows.Win32.Foundation.BOOL */,
  phProviderKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderRegister(util.pwstrToFfi(pszProviderName), util.pwstrToFfi(pszModulePath), Index, util.boolToFfi(bIsCritical), util.toPointer(phProviderKey));
}

export function PxeProviderUnRegister(
  pszProviderName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderUnRegister(util.pwstrToFfi(pszProviderName));
}

export function PxeProviderQueryIndex(
  pszProviderName: string | null /* Windows.Win32.Foundation.PWSTR */,
  puIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderQueryIndex(util.pwstrToFfi(pszProviderName), util.toPointer(puIndex));
}

export function PxeProviderEnumFirst(
  phEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderEnumFirst(util.toPointer(phEnum));
}

export function PxeProviderEnumNext(
  hEnum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderEnumNext(util.toPointer(hEnum), util.toPointer(ppProvider));
}

export function PxeProviderEnumClose(
  hEnum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderEnumClose(util.toPointer(hEnum));
}

export function PxeProviderFreeInfo(
  pProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderFreeInfo(util.toPointer(pProvider));
}

export function PxeRegisterCallback(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackType: number /* u32 */,
  pCallbackFunction: Deno.PointerValue | Uint8Array | null /* ptr */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeRegisterCallback(util.toPointer(hProvider), CallbackType, util.toPointer(pCallbackFunction), util.toPointer(pContext));
}

export function PxeSendReply(
  hClientRequest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  pAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeSendReply(util.toPointer(hClientRequest), util.toPointer(pPacket), uPacketLen, util.toPointer(pAddress));
}

export function PxeAsyncRecvDone(
  hClientRequest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Action: number /* u32 */,
): number /* u32 */ {
  return libWDSPXE.PxeAsyncRecvDone(util.toPointer(hClientRequest), Action);
}

export function PxeTrace(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Severity: number /* u32 */,
  pszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWDSPXE.PxeTrace(util.toPointer(hProvider), Severity, util.pwstrToFfi(pszFormat));
}

export function PxeTraceV(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Severity: number /* u32 */,
  pszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  Params: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeTraceV(util.toPointer(hProvider), Severity, util.pwstrToFfi(pszFormat), util.toPointer(Params));
}

export function PxePacketAllocate(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hClientRequest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uSize: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWDSPXE.PxePacketAllocate(util.toPointer(hProvider), util.toPointer(hClientRequest), uSize));
}

export function PxePacketFree(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hClientRequest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxePacketFree(util.toPointer(hProvider), util.toPointer(hClientRequest), util.toPointer(pPacket));
}

export function PxeProviderSetAttribute(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Attribute: number /* u32 */,
  pParameterBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  uParamLen: number /* u32 */,
): number /* u32 */ {
  return libWDSPXE.PxeProviderSetAttribute(util.toPointer(hProvider), Attribute, util.toPointer(pParameterBuffer), uParamLen);
}

export function PxeDhcpInitialize(
  pRecvPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uRecvPacketLen: number /* u32 */,
  pReplyPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uMaxReplyPacketLen: number /* u32 */,
  puReplyPacketLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpInitialize(util.toPointer(pRecvPacket), uRecvPacketLen, util.toPointer(pReplyPacket), uMaxReplyPacketLen, util.toPointer(puReplyPacketLen));
}

export function PxeDhcpv6Initialize(
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbRequest: number /* u32 */,
  pReply: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbReply: number /* u32 */,
  pcbReplyUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6Initialize(util.toPointer(pRequest), cbRequest, util.toPointer(pReply), cbReply, util.toPointer(pcbReplyUsed));
}

export function PxeDhcpAppendOption(
  pReplyPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uMaxReplyPacketLen: number /* u32 */,
  puReplyPacketLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  bOption: number /* u8 */,
  bOptionLen: number /* u8 */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpAppendOption(util.toPointer(pReplyPacket), uMaxReplyPacketLen, util.toPointer(puReplyPacketLen), bOption, bOptionLen, util.toPointer(pValue));
}

export function PxeDhcpv6AppendOption(
  pReply: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbReply: number /* u32 */,
  pcbReplyUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
  wOptionType: number /* u16 */,
  cbOption: number /* u16 */,
  pOption: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6AppendOption(util.toPointer(pReply), cbReply, util.toPointer(pcbReplyUsed), wOptionType, cbOption, util.toPointer(pOption));
}

export function PxeDhcpAppendOptionRaw(
  pReplyPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uMaxReplyPacketLen: number /* u32 */,
  puReplyPacketLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  uBufferLen: number /* u16 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpAppendOptionRaw(util.toPointer(pReplyPacket), uMaxReplyPacketLen, util.toPointer(puReplyPacketLen), uBufferLen, util.toPointer(pBuffer));
}

export function PxeDhcpv6AppendOptionRaw(
  pReply: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbReply: number /* u32 */,
  pcbReplyUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBuffer: number /* u16 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6AppendOptionRaw(util.toPointer(pReply), cbReply, util.toPointer(pcbReplyUsed), cbBuffer, util.toPointer(pBuffer));
}

export function PxeDhcpIsValid(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  bRequestPacket: boolean /* Windows.Win32.Foundation.BOOL */,
  pbPxeOptionPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpIsValid(util.toPointer(pPacket), uPacketLen, util.boolToFfi(bRequestPacket), util.toPointer(pbPxeOptionPresent));
}

export function PxeDhcpv6IsValid(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  bRequestPacket: boolean /* Windows.Win32.Foundation.BOOL */,
  pbPxeOptionPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6IsValid(util.toPointer(pPacket), uPacketLen, util.boolToFfi(bRequestPacket), util.toPointer(pbPxeOptionPresent));
}

export function PxeDhcpGetOptionValue(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  uInstance: number /* u32 */,
  bOption: number /* u8 */,
  pbOptionLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppOptionValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpGetOptionValue(util.toPointer(pPacket), uPacketLen, uInstance, bOption, util.toPointer(pbOptionLen), util.toPointer(ppOptionValue));
}

export function PxeDhcpv6GetOptionValue(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  uInstance: number /* u32 */,
  wOption: number /* u16 */,
  pwOptionLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppOptionValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6GetOptionValue(util.toPointer(pPacket), uPacketLen, uInstance, wOption, util.toPointer(pwOptionLen), util.toPointer(ppOptionValue));
}

export function PxeDhcpGetVendorOptionValue(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  bOption: number /* u8 */,
  uInstance: number /* u32 */,
  pbOptionLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppOptionValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpGetVendorOptionValue(util.toPointer(pPacket), uPacketLen, bOption, uInstance, util.toPointer(pbOptionLen), util.toPointer(ppOptionValue));
}

export function PxeDhcpv6GetVendorOptionValue(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  dwEnterpriseNumber: number /* u32 */,
  wOption: number /* u16 */,
  uInstance: number /* u32 */,
  pwOptionLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppOptionValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6GetVendorOptionValue(util.toPointer(pPacket), uPacketLen, dwEnterpriseNumber, wOption, uInstance, util.toPointer(pwOptionLen), util.toPointer(ppOptionValue));
}

export function PxeDhcpv6ParseRelayForw(
  pRelayForwPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uRelayForwPacketLen: number /* u32 */,
  pRelayMessages: Deno.PointerValue | Uint8Array | null /* ptr */,
  nRelayMessages: number /* u32 */,
  pnRelayMessages: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppInnerPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbInnerPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6ParseRelayForw(util.toPointer(pRelayForwPacket), uRelayForwPacketLen, util.toPointer(pRelayMessages), nRelayMessages, util.toPointer(pnRelayMessages), util.toPointer(ppInnerPacket), util.toPointer(pcbInnerPacket));
}

export function PxeDhcpv6CreateRelayRepl(
  pRelayMessages: Deno.PointerValue | Uint8Array | null /* ptr */,
  nRelayMessages: number /* u32 */,
  pInnerPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInnerPacket: number /* u32 */,
  pReplyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbReplyBuffer: number /* u32 */,
  pcbReplyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeDhcpv6CreateRelayRepl(util.toPointer(pRelayMessages), nRelayMessages, util.toPointer(pInnerPacket), cbInnerPacket, util.toPointer(pReplyBuffer), cbReplyBuffer, util.toPointer(pcbReplyBuffer));
}

export function PxeGetServerInfo(
  uInfoType: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  uBufferLen: number /* u32 */,
): number /* u32 */ {
  return libWDSPXE.PxeGetServerInfo(uInfoType, util.toPointer(pBuffer), uBufferLen);
}

export function PxeGetServerInfoEx(
  uInfoType: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  uBufferLen: number /* u32 */,
  puBufferUsed: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSPXE.PxeGetServerInfoEx(uInfoType, util.toPointer(pBuffer), uBufferLen, util.toPointer(puBufferUsed));
}

export function WdsTransportServerRegisterCallback(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackId: TRANSPORTPROVIDER_CALLBACK_ID /* Windows.Win32.System.DeploymentServices.TRANSPORTPROVIDER_CALLBACK_ID */,
  pfnCallback: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSMC.WdsTransportServerRegisterCallback(util.toPointer(hProvider), CallbackId, util.toPointer(pfnCallback)));
}

export function WdsTransportServerCompleteRead(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulBytesRead: number /* u32 */,
  pvUserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  hReadResult: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSMC.WdsTransportServerCompleteRead(util.toPointer(hProvider), ulBytesRead, util.toPointer(pvUserData), util.toPointer(hReadResult)));
}

export function WdsTransportServerTrace(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Severity: number /* u32 */,
  pwszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSMC.WdsTransportServerTrace(util.toPointer(hProvider), Severity, util.pwstrToFfi(pwszFormat)));
}

export function WdsTransportServerTraceV(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Severity: number /* u32 */,
  pwszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
  Params: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSMC.WdsTransportServerTraceV(util.toPointer(hProvider), Severity, util.pwstrToFfi(pwszFormat), util.toPointer(Params)));
}

export function WdsTransportServerAllocateBuffer(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulBufferSize: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWDSMC.WdsTransportServerAllocateBuffer(util.toPointer(hProvider), ulBufferSize));
}

export function WdsTransportServerFreeBuffer(
  hProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWDSMC.WdsTransportServerFreeBuffer(util.toPointer(hProvider), util.toPointer(pvBuffer)));
}

export function WdsTransportClientInitialize(): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientInitialize();
}

export function WdsTransportClientInitializeSession(
  pSessionRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSessionKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientInitializeSession(util.toPointer(pSessionRequest), util.toPointer(pCallerData), util.toPointer(hSessionKey));
}

export function WdsTransportClientRegisterCallback(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CallbackId: TRANSPORTCLIENT_CALLBACK_ID /* Windows.Win32.System.DeploymentServices.TRANSPORTCLIENT_CALLBACK_ID */,
  pfnCallback: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientRegisterCallback(util.toPointer(hSessionKey), CallbackId, util.toPointer(pfnCallback));
}

export function WdsTransportClientStartSession(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientStartSession(util.toPointer(hSessionKey));
}

export function WdsTransportClientCompleteReceive(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulSize: number /* u32 */,
  pullOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientCompleteReceive(util.toPointer(hSessionKey), ulSize, util.toPointer(pullOffset));
}

export function WdsTransportClientCancelSession(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientCancelSession(util.toPointer(hSessionKey));
}

export function WdsTransportClientCancelSessionEx(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwErrorCode: number /* u32 */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientCancelSessionEx(util.toPointer(hSessionKey), dwErrorCode);
}

export function WdsTransportClientWaitForCompletion(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uTimeout: number /* u32 */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientWaitForCompletion(util.toPointer(hSessionKey), uTimeout);
}

export function WdsTransportClientQueryStatus(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  puStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  puErrorCode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientQueryStatus(util.toPointer(hSessionKey), util.toPointer(puStatus), util.toPointer(puErrorCode));
}

export function WdsTransportClientCloseSession(
  hSessionKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientCloseSession(util.toPointer(hSessionKey));
}

export function WdsTransportClientAddRefBuffer(
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientAddRefBuffer(util.toPointer(pvBuffer));
}

export function WdsTransportClientReleaseBuffer(
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientReleaseBuffer(util.toPointer(pvBuffer));
}

export function WdsTransportClientShutdown(): number /* u32 */ {
  return libWDSTPTC.WdsTransportClientShutdown();
}

export function WdsBpParseInitialize(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  pbPacketType: Deno.PointerValue | Uint8Array | null /* ptr */,
  phHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSBP.WdsBpParseInitialize(util.toPointer(pPacket), uPacketLen, util.toPointer(pbPacketType), util.toPointer(phHandle));
}

export function WdsBpParseInitializev6(
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPacketLen: number /* u32 */,
  pbPacketType: Deno.PointerValue | Uint8Array | null /* ptr */,
  phHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSBP.WdsBpParseInitializev6(util.toPointer(pPacket), uPacketLen, util.toPointer(pbPacketType), util.toPointer(phHandle));
}

export function WdsBpInitialize(
  bPacketType: number /* u8 */,
  phHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSBP.WdsBpInitialize(bPacketType, util.toPointer(phHandle));
}

export function WdsBpCloseHandle(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libWDSBP.WdsBpCloseHandle(util.toPointer(hHandle));
}

export function WdsBpQueryOption(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uOption: number /* u32 */,
  uValueLen: number /* u32 */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  puBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSBP.WdsBpQueryOption(util.toPointer(hHandle), uOption, uValueLen, util.toPointer(pValue), util.toPointer(puBytes));
}

export function WdsBpAddOption(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uOption: number /* u32 */,
  uValueLen: number /* u32 */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSBP.WdsBpAddOption(util.toPointer(hHandle), uOption, uValueLen, util.toPointer(pValue));
}

export function WdsBpGetOptionBuffer(
  hHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uBufferLen: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  puBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWDSBP.WdsBpGetOptionBuffer(util.toPointer(hHandle), uBufferLen, util.toPointer(pBuffer), util.toPointer(puBytes));
}

