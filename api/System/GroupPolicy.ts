/// Auto-generated by Deno Win32: Windows.Win32.System.GroupPolicy.Apis

import * as util from "../../util.ts";

// Enums
export type GPMRSOPMode = number;
export type GPMPermissionType = number;
export type GPMSearchProperty = number;
export type GPMSearchOperation = number;
export type GPMReportType = number;
export type GPMEntryType = number;
export type GPMDestinationOption = number;
export type GPMReportingOptions = number;
export type GPMSOMType = number;
export type GPMBackupType = number;
export type GPMStarterGPOType = number;
export type GPO_LINK = number;
export type SETTINGSTATUS = number;
export type INSTALLSPECTYPE = number;
export type APPSTATE = number;
export type GROUP_POLICY_OBJECT_TYPE = number;
export type GROUP_POLICY_HINT_TYPE = number;

// Constants
export const GPM_USE_PDC = 0;
export const GPM_USE_ANYDC = 1;
export const GPM_DONOTUSE_W2KDC = 2;
export const GPM_DONOT_VALIDATEDC = 1;
export const GPM_MIGRATIONTABLE_ONLY = 1;
export const GPM_PROCESS_SECURITY = 2;
export const RSOP_NO_COMPUTER = 65536;
export const RSOP_NO_USER = 131072;
export const RSOP_PLANNING_ASSUME_SLOW_LINK = 1;
export const RSOP_PLANNING_ASSUME_LOOPBACK_MERGE = 2;
export const RSOP_PLANNING_ASSUME_LOOPBACK_REPLACE = 4;
export const RSOP_PLANNING_ASSUME_USER_WQLFILTER_TRUE = 8;
export const RSOP_PLANNING_ASSUME_COMP_WQLFILTER_TRUE = 16;
export const PI_NOUI = 1;
export const PI_APPLYPOLICY = 2;
export const PT_TEMPORARY = 1;
export const PT_ROAMING = 2;
export const PT_MANDATORY = 4;
export const PT_ROAMING_PREEXISTING = 8;
export const RP_FORCE = 1;
export const RP_SYNC = 2;
export const GPC_BLOCK_POLICY = 1;
export const GPO_FLAG_DISABLE = 1;
export const GPO_FLAG_FORCE = 2;
export const GPO_LIST_FLAG_MACHINE = 1;
export const GPO_LIST_FLAG_SITEONLY = 2;
export const GPO_LIST_FLAG_NO_WMIFILTERS = 4;
export const GPO_LIST_FLAG_NO_SECURITYFILTERS = 8;
export const GP_DLLNAME = `DllName`;
export const GP_ENABLEASYNCHRONOUSPROCESSING = `EnableAsynchronousProcessing`;
export const GP_MAXNOGPOLISTCHANGESINTERVAL = `MaxNoGPOListChangesInterval`;
export const GP_NOBACKGROUNDPOLICY = `NoBackgroundPolicy`;
export const GP_NOGPOLISTCHANGES = `NoGPOListChanges`;
export const GP_NOMACHINEPOLICY = `NoMachinePolicy`;
export const GP_NOSLOWLINK = `NoSlowLink`;
export const GP_NOTIFYLINKTRANSITION = `NotifyLinkTransition`;
export const GP_NOUSERPOLICY = `NoUserPolicy`;
export const GP_PERUSERLOCALSETTINGS = `PerUserLocalSettings`;
export const GP_PROCESSGROUPPOLICY = `ProcessGroupPolicy`;
export const GP_REQUIRESSUCCESSFULREGISTRY = `RequiresSuccessfulRegistry`;
export const GPO_INFO_FLAG_MACHINE = 1;
export const GPO_INFO_FLAG_BACKGROUND = 16;
export const GPO_INFO_FLAG_SLOWLINK = 32;
export const GPO_INFO_FLAG_VERBOSE = 64;
export const GPO_INFO_FLAG_NOCHANGES = 128;
export const GPO_INFO_FLAG_LINKTRANSITION = 256;
export const GPO_INFO_FLAG_LOGRSOP_TRANSITION = 512;
export const GPO_INFO_FLAG_FORCED_REFRESH = 1024;
export const GPO_INFO_FLAG_SAFEMODE_BOOT = 2048;
export const GPO_INFO_FLAG_ASYNC_FOREGROUND = 4096;
export const FLAG_NO_GPO_FILTER = 2147483648;
export const FLAG_NO_CSE_INVOKE = 1073741824;
export const FLAG_ASSUME_SLOW_LINK = 536870912;
export const FLAG_LOOPBACK_MERGE = 268435456;
export const FLAG_LOOPBACK_REPLACE = 134217728;
export const FLAG_ASSUME_USER_WQLFILTER_TRUE = 67108864;
export const FLAG_ASSUME_COMP_WQLFILTER_TRUE = 33554432;
export const FLAG_PLANNING_MODE = 16777216;
export const FLAG_NO_USER = 1;
export const FLAG_NO_COMPUTER = 2;
export const FLAG_FORCE_CREATENAMESPACE = 4;
export const RSOP_USER_ACCESS_DENIED = 1;
export const RSOP_COMPUTER_ACCESS_DENIED = 2;
export const RSOP_TEMPNAMESPACE_EXISTS = 4;
export const LOCALSTATE_ASSIGNED = 1;
export const LOCALSTATE_PUBLISHED = 2;
export const LOCALSTATE_UNINSTALL_UNMANAGED = 4;
export const LOCALSTATE_POLICYREMOVE_ORPHAN = 8;
export const LOCALSTATE_POLICYREMOVE_UNINSTALL = 16;
export const LOCALSTATE_ORPHANED = 32;
export const LOCALSTATE_UNINSTALLED = 64;
export const MANAGED_APPS_USERAPPLICATIONS = 1;
export const MANAGED_APPS_FROMCATEGORY = 2;
export const MANAGED_APPS_INFOLEVEL_DEFAULT = 65536;
export const MANAGED_APPTYPE_WINDOWSINSTALLER = 1;
export const MANAGED_APPTYPE_SETUPEXE = 2;
export const MANAGED_APPTYPE_UNSUPPORTED = 3;
export const GPO_SECTION_ROOT = 0;
export const GPO_SECTION_USER = 1;
export const GPO_SECTION_MACHINE = 2;
export const GPO_OPEN_LOAD_REGISTRY = 1;
export const GPO_OPEN_READ_ONLY = 2;
export const GPO_OPTION_DISABLE_USER = 1;
export const GPO_OPTION_DISABLE_MACHINE = 2;
export const RSOP_INFO_FLAG_DIAGNOSTIC_MODE = 1;
export const GPO_BROWSE_DISABLENEW = 1;
export const GPO_BROWSE_NOCOMPUTERS = 2;
export const GPO_BROWSE_NODSGPOS = 4;
export const GPO_BROWSE_OPENBUTTON = 8;
export const GPO_BROWSE_INITTOALL = 16;
export const GPO_BROWSE_NOUSERGPOS = 32;
export const GPO_BROWSE_SENDAPPLYONEDIT = 64;
export const rsopUnknown = 0;
export const rsopPlanning = 1;
export const rsopLogging = 2;
export const permGPOApply = 65536;
export const permGPORead = 65792;
export const permGPOEdit = 65793;
export const permGPOEditSecurityAndDelete = 65794;
export const permGPOCustom = 65795;
export const permWMIFilterEdit = 131072;
export const permWMIFilterFullControl = 131073;
export const permWMIFilterCustom = 131074;
export const permSOMLink = 1835008;
export const permSOMLogging = 1573120;
export const permSOMPlanning = 1573376;
export const permSOMWMICreate = 1049344;
export const permSOMWMIFullControl = 1049345;
export const permSOMGPOCreate = 1049600;
export const permStarterGPORead = 197888;
export const permStarterGPOEdit = 197889;
export const permStarterGPOFullControl = 197890;
export const permStarterGPOCustom = 197891;
export const permSOMStarterGPOCreate = 1049856;
export const gpoPermissions = 0;
export const gpoEffectivePermissions = 1;
export const gpoDisplayName = 2;
export const gpoWMIFilter = 3;
export const gpoID = 4;
export const gpoComputerExtensions = 5;
export const gpoUserExtensions = 6;
export const somLinks = 7;
export const gpoDomain = 8;
export const backupMostRecent = 9;
export const starterGPOPermissions = 10;
export const starterGPOEffectivePermissions = 11;
export const starterGPODisplayName = 12;
export const starterGPOID = 13;
export const starterGPODomain = 14;
export const opEquals = 0;
export const opContains = 1;
export const opNotContains = 2;
export const opNotEquals = 3;
export const repXML = 0;
export const repHTML = 1;
export const repInfraXML = 2;
export const repInfraRefreshXML = 3;
export const repClientHealthXML = 4;
export const repClientHealthRefreshXML = 5;
export const typeUser = 0;
export const typeComputer = 1;
export const typeLocalGroup = 2;
export const typeGlobalGroup = 3;
export const typeUniversalGroup = 4;
export const typeUNCPath = 5;
export const typeUnknown = 6;
export const opDestinationSameAsSource = 0;
export const opDestinationNone = 1;
export const opDestinationByRelativeName = 2;
export const opDestinationSet = 3;
export const opReportLegacy = 0;
export const opReportComments = 1;
export const somSite = 0;
export const somDomain = 1;
export const somOU = 2;
export const typeGPO = 0;
export const typeStarterGPO = 1;
export const typeSystem = 0;
export const typeCustom = 1;
export const GPLinkUnknown = 0;
export const GPLinkMachine = 1;
export const GPLinkSite = 2;
export const GPLinkDomain = 3;
export const GPLinkOrganizationalUnit = 4;
export const RSOPUnspecified = 0;
export const RSOPApplied = 1;
export const RSOPIgnored = 2;
export const RSOPFailed = 3;
export const RSOPSubsettingFailed = 4;
export const APPNAME = 1;
export const FILEEXT = 2;
export const PROGID = 3;
export const COMCLASS = 4;
export const ABSENT = 0;
export const ASSIGNED = 1;
export const PUBLISHED = 2;
export const GPOTypeLocal = 0;
export const GPOTypeRemote = 1;
export const GPOTypeDS = 2;
export const GPOTypeLocalUser = 3;
export const GPOTypeLocalGroup = 4;
export const GPHintUnknown = 0;
export const GPHintMachine = 1;
export const GPHintSite = 2;
export const GPHintDomain = 3;
export const GPHintOrganizationalUnit = 4;

// Structs

export type CriticalPolicySectionHandle = bigint | number;

export type PSTR = Deno.PointerValue | Uint8Array;

export type LPARAM = bigint | number;

/**
 * Windows.Win32.System.GroupPolicy.GROUP_POLICY_OBJECTA (size: 96)
 */
export interface GROUP_POLICY_OBJECTA {
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  lpDSPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpFileSysPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpDisplayName: string | null | Uint8Array;
  /** array */
  szGPOName: Deno.PointerValue;
  /** Windows.Win32.System.GroupPolicy.GPO_LINK */
  GPOLink: GPO_LINK;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array;
  /** ptr */
  pPrev: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpExtensions: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lParam2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpLink: string | null | Uint8Array;
}

export const sizeofGROUP_POLICY_OBJECTA = 96;

export function allocGROUP_POLICY_OBJECTA(data?: Partial<GROUP_POLICY_OBJECTA>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_POLICY_OBJECTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOptions !== undefined) view.setUint32(0, Number(data.dwOptions), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: buffer
  if (data?.lpDSPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpDSPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.lpFileSysPath !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpFileSysPath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpDisplayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.szGPOName !== undefined) view.setBigUint64(32, data.szGPOName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szGPOName))), true);
  // 0x28: i32
  if (data?.GPOLink !== undefined) view.setInt32(40, Number(data.GPOLink), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pNext !== undefined) view.setBigUint64(56, data.pNext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pNext))), true);
  // 0x40: pointer
  if (data?.pPrev !== undefined) view.setBigUint64(64, data.pPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrev))), true);
  // 0x48: buffer
  if (data?.lpExtensions !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpExtensions);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.lParam2 !== undefined) view.setBigUint64(80, data.lParam2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam2))), true);
  // 0x58: buffer
  if (data?.lpLink !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpLink);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  return buf;
}

export class GROUP_POLICY_OBJECTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get lpDSPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpFileSysPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szGPOName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get GPOLink(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pNext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get lpExtensions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lParam2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwOptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set lpDSPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set lpFileSysPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set szGPOName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set GPOLink(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pNext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set lpExtensions(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set lParam2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.GroupPolicy.GROUP_POLICY_OBJECTW (size: 96)
 */
export interface GROUP_POLICY_OBJECTW {
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpDSPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpFileSysPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpDisplayName: string | null | Uint8Array | Uint16Array;
  /** array */
  szGPOName: Deno.PointerValue;
  /** Windows.Win32.System.GroupPolicy.GPO_LINK */
  GPOLink: GPO_LINK;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array;
  /** ptr */
  pPrev: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpExtensions: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lParam2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpLink: string | null | Uint8Array | Uint16Array;
}

export const sizeofGROUP_POLICY_OBJECTW = 96;

export function allocGROUP_POLICY_OBJECTW(data?: Partial<GROUP_POLICY_OBJECTW>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_POLICY_OBJECTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOptions !== undefined) view.setUint32(0, Number(data.dwOptions), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: buffer
  if (data?.lpDSPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpDSPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.lpFileSysPath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpFileSysPath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpDisplayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.szGPOName !== undefined) view.setBigUint64(32, data.szGPOName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szGPOName))), true);
  // 0x28: i32
  if (data?.GPOLink !== undefined) view.setInt32(40, Number(data.GPOLink), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pNext !== undefined) view.setBigUint64(56, data.pNext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pNext))), true);
  // 0x40: pointer
  if (data?.pPrev !== undefined) view.setBigUint64(64, data.pPrev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrev))), true);
  // 0x48: buffer
  if (data?.lpExtensions !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpExtensions);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.lParam2 !== undefined) view.setBigUint64(80, data.lParam2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam2))), true);
  // 0x58: buffer
  if (data?.lpLink !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpLink);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  return buf;
}

export class GROUP_POLICY_OBJECTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get lpDSPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpFileSysPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szGPOName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get GPOLink(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pNext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pPrev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get lpExtensions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lParam2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwOptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set lpDSPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set lpFileSysPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set szGPOName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set GPOLink(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pNext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pPrev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set lpExtensions(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set lParam2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }
}

/**
 * Windows.Win32.System.GroupPolicy.RSOP_TARGET (size: 48)
 */
export interface RSOP_TARGET {
  /** Windows.Win32.Foundation.PWSTR */
  pwszAccountName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszNewSOM: string | null | Uint8Array | Uint16Array;
  /** ptr */
  psaSecurityGroups: Deno.PointerValue | Uint8Array;
  /** ptr */
  pRsopToken: Deno.PointerValue | Uint8Array;
  /** ptr */
  pGPOList: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Wmi.IWbemServices */
  pWbemServices: Uint8Array | Deno.PointerValue;
}

export const sizeofRSOP_TARGET = 48;

export function allocRSOP_TARGET(data?: Partial<RSOP_TARGET>): Uint8Array {
  const buf = new Uint8Array(sizeofRSOP_TARGET);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszAccountName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszAccountName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwszNewSOM !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszNewSOM);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.psaSecurityGroups !== undefined) view.setBigUint64(16, data.psaSecurityGroups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psaSecurityGroups))), true);
  // 0x18: pointer
  if (data?.pRsopToken !== undefined) view.setBigUint64(24, data.pRsopToken === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRsopToken))), true);
  // 0x20: pointer
  if (data?.pGPOList !== undefined) view.setBigUint64(32, data.pGPOList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pGPOList))), true);
  // 0x28: pointer
  if (data?.pWbemServices !== undefined) view.setBigUint64(40, data.pWbemServices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pWbemServices))), true);
  return buf;
}

export class RSOP_TARGETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszAccountName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwszNewSOM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get psaSecurityGroups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pRsopToken(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pGPOList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pWbemServices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwszAccountName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwszNewSOM(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set psaSecurityGroups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pRsopToken(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pGPOList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pWbemServices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.System.GroupPolicy.POLICYSETTINGSTATUSINFO (size: 48)
 */
export interface POLICYSETTINGSTATUSINFO {
  /** Windows.Win32.Foundation.PWSTR */
  szKey: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szEventSource: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szEventLogName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwEventID: number;
  /** u32 */
  dwErrorCode: number;
  /** Windows.Win32.System.GroupPolicy.SETTINGSTATUS */
  status: SETTINGSTATUS;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  timeLogged: Uint8Array | Deno.PointerValue;
}

export const sizeofPOLICYSETTINGSTATUSINFO = 48;

export function allocPOLICYSETTINGSTATUSINFO(data?: Partial<POLICYSETTINGSTATUSINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICYSETTINGSTATUSINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szKey !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szKey);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.szEventSource !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szEventSource);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.szEventLogName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szEventLogName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwEventID !== undefined) view.setUint32(24, Number(data.dwEventID), true);
  // 0x1c: u32
  if (data?.dwErrorCode !== undefined) view.setUint32(28, Number(data.dwErrorCode), true);
  // 0x20: i32
  if (data?.status !== undefined) view.setInt32(32, Number(data.status), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.timeLogged !== undefined) view.setBigUint64(40, data.timeLogged === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.timeLogged))), true);
  return buf;
}

export class POLICYSETTINGSTATUSINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szEventSource(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get szEventLogName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwEventID(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwErrorCode(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get status(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get timeLogged(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set szKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set szEventSource(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set szEventLogName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwEventID(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwErrorCode(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set status(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set timeLogged(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _AppName_e__Struct (size: 16)
 */
export interface _AppName_e__Struct {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  GPOId: Uint8Array | Deno.PointerValue;
}

export const sizeof_AppName_e__Struct = 16;

export function alloc_AppName_e__Struct(data?: Partial<_AppName_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_AppName_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.GPOId !== undefined) view.setBigUint64(8, data.GPOId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GPOId))), true);
  return buf;
}

export class _AppName_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get GPOId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set GPOId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _COMClass_e__Struct (size: 16)
 */
export interface _COMClass_e__Struct {
  /** System.Guid */
  Clsid: Uint8Array | Deno.PointerValue;
  /** u32 */
  ClsCtx: number;
}

export const sizeof_COMClass_e__Struct = 16;

export function alloc_COMClass_e__Struct(data?: Partial<_COMClass_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_COMClass_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Clsid !== undefined) view.setBigUint64(0, data.Clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Clsid))), true);
  // 0x08: u32
  if (data?.ClsCtx !== undefined) view.setUint32(8, Number(data.ClsCtx), true);
  // 0x0c: pad4
  return buf;
}

export class _COMClass_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ClsCtx(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ClsCtx(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.GroupPolicy.INSTALLSPEC (size: 32)
 */
export interface INSTALLSPEC {
  /** _AppName_e__Struct */
  AppName: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  FileExt: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ProgId: string | null | Uint8Array | Uint16Array;
  /** _COMClass_e__Struct */
  COMClass: Uint8Array | Deno.PointerValue;
}

export const sizeofINSTALLSPEC = 32;

export function allocINSTALLSPEC(data?: Partial<INSTALLSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTALLSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AppName !== undefined) view.setBigUint64(0, data.AppName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AppName))), true);
  // 0x08: buffer
  if (data?.FileExt !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.FileExt);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.ProgId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ProgId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.COMClass !== undefined) view.setBigUint64(24, data.COMClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.COMClass))), true);
  return buf;
}

export class INSTALLSPECView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AppName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get FileExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ProgId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get COMClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set AppName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set FileExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set ProgId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set COMClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.GroupPolicy.INSTALLDATA (size: 16)
 */
export interface INSTALLDATA {
  /** Windows.Win32.System.GroupPolicy.INSTALLSPECTYPE */
  Type: INSTALLSPECTYPE;
  /** Windows.Win32.System.GroupPolicy.INSTALLSPEC */
  Spec: Uint8Array | Deno.PointerValue;
}

export const sizeofINSTALLDATA = 16;

export function allocINSTALLDATA(data?: Partial<INSTALLDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofINSTALLDATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Spec !== undefined) view.setBigUint64(8, data.Spec === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Spec))), true);
  return buf;
}

export class INSTALLDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Spec(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Spec(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.GroupPolicy.LOCALMANAGEDAPPLICATION (size: 32)
 */
export interface LOCALMANAGEDAPPLICATION {
  /** Windows.Win32.Foundation.PWSTR */
  pszDeploymentName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPolicyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszProductId: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwState: number;
}

export const sizeofLOCALMANAGEDAPPLICATION = 32;

export function allocLOCALMANAGEDAPPLICATION(data?: Partial<LOCALMANAGEDAPPLICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALMANAGEDAPPLICATION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszDeploymentName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszDeploymentName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszPolicyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszPolicyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszProductId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszProductId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwState !== undefined) view.setUint32(24, Number(data.dwState), true);
  // 0x1c: pad4
  return buf;
}

export class LOCALMANAGEDAPPLICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszDeploymentName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszPolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszProductId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwState(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pszDeploymentName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszPolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszProductId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwState(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.System.GroupPolicy.MANAGEDAPPLICATION (size: 112)
 */
export interface MANAGEDAPPLICATION {
  /** Windows.Win32.Foundation.PWSTR */
  pszPackageName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPublisher: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwVersionHi: number;
  /** u32 */
  dwVersionLo: number;
  /** u32 */
  dwRevision: number;
  /** System.Guid */
  GpoId: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszPolicyName: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  ProductId: Uint8Array | Deno.PointerValue;
  /** u16 */
  Language: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszOwner: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCompany: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszComments: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszContact: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSupportUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPathType: number;
  /** Windows.Win32.Foundation.BOOL */
  bInstalled: boolean;
}

export const sizeofMANAGEDAPPLICATION = 112;

export function allocMANAGEDAPPLICATION(data?: Partial<MANAGEDAPPLICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMANAGEDAPPLICATION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszPackageName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszPackageName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszPublisher !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszPublisher);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.dwVersionHi !== undefined) view.setUint32(16, Number(data.dwVersionHi), true);
  // 0x14: u32
  if (data?.dwVersionLo !== undefined) view.setUint32(20, Number(data.dwVersionLo), true);
  // 0x18: u32
  if (data?.dwRevision !== undefined) view.setUint32(24, Number(data.dwRevision), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.GpoId !== undefined) view.setBigUint64(32, data.GpoId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GpoId))), true);
  // 0x28: buffer
  if (data?.pszPolicyName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszPolicyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.ProductId !== undefined) view.setBigUint64(48, data.ProductId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProductId))), true);
  // 0x38: u16
  if (data?.Language !== undefined) view.setUint16(56, Number(data.Language), true);
  // 0x3a: pad6
  // 0x40: buffer
  if (data?.pszOwner !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszOwner);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pszCompany !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszCompany);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszComments !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszComments);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.pszContact !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszContact);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.pszSupportUrl !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.pszSupportUrl);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: u32
  if (data?.dwPathType !== undefined) view.setUint32(104, Number(data.dwPathType), true);
  // 0x6c: i32
  if (data?.bInstalled !== undefined) view.setInt32(108, Number(data.bInstalled), true);
  return buf;
}

export class MANAGEDAPPLICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszPackageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszPublisher(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwVersionHi(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwVersionLo(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwRevision(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get GpoId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszPolicyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ProductId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u16
  get Language(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: pad6

  // 0x40: buffer
  get pszOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszCompany(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszComments(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pszContact(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get pszSupportUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwPathType(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: i32
  get bInstalled(): number {
    return this.view.getInt32(108, true);
  }

  // 0x00: buffer
  set pszPackageName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszPublisher(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set dwVersionHi(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwVersionLo(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwRevision(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set GpoId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set pszPolicyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set ProductId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u16
  set Language(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: pad6

  // 0x40: buffer
  set pszOwner(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pszCompany(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszComments(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set pszContact(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set pszSupportUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: u32
  set dwPathType(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: i32
  set bInstalled(value: number) {
    this.view.setInt32(108, value, true);
  }
}

export type HWND = bigint | number;

/**
 * Windows.Win32.System.GroupPolicy.GPOBROWSEINFO (size: 72)
 */
export interface GPOBROWSEINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpInitialOU: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpDSPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwDSPathSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwNameSize: number;
  /** Windows.Win32.System.GroupPolicy.GROUP_POLICY_OBJECT_TYPE */
  gpoType: GROUP_POLICY_OBJECT_TYPE;
  /** Windows.Win32.System.GroupPolicy.GROUP_POLICY_HINT_TYPE */
  gpoHint: GROUP_POLICY_HINT_TYPE;
}

export const sizeofGPOBROWSEINFO = 72;

export function allocGPOBROWSEINFO(data?: Partial<GPOBROWSEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGPOBROWSEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpTitle);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpInitialOU !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpInitialOU);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpDSPath !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpDSPath);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.dwDSPathSize !== undefined) view.setUint32(40, Number(data.dwDSPathSize), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.lpName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.dwNameSize !== undefined) view.setUint32(56, Number(data.dwNameSize), true);
  // 0x3c: i32
  if (data?.gpoType !== undefined) view.setInt32(60, Number(data.gpoType), true);
  // 0x40: i32
  if (data?.gpoHint !== undefined) view.setInt32(64, Number(data.gpoHint), true);
  // 0x44: pad4
  return buf;
}

export class GPOBROWSEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpInitialOU(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpDSPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwDSPathSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get lpName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwNameSize(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: i32
  get gpoType(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get gpoHint(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set lpTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpInitialOU(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpDSPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set dwDSPathSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set lpName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set dwNameSize(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: i32
  set gpoType(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set gpoHint(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4
}

export type HANDLE = bigint | number;

export type PSID = Deno.PointerValue | Uint8Array;

export type HRESULT = number;

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array;

// Native Libraries

try {
  var libUSERENV_dll = Deno.dlopen("USERENV.dll", {
    RefreshPolicy: {
      parameters: ["i32"],
      result: "i32",
      optional: true,
    },
    RefreshPolicyEx: {
      parameters: ["i32", "u32"],
      result: "i32",
      optional: true,
    },
    EnterCriticalPolicySection: {
      parameters: ["i32"],
      result: "pointer",
      optional: true,
    },
    LeaveCriticalPolicySection: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    RegisterGPNotification: {
      parameters: ["pointer", "i32"],
      result: "i32",
      optional: true,
    },
    UnregisterGPNotification: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetGPOListA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    GetGPOListW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    FreeGPOListA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    FreeGPOListW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetAppliedGPOListA: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetAppliedGPOListW: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    ProcessGroupPolicyCompleted: {
      parameters: ["pointer", "usize", "u32"],
      result: "u32",
      optional: true,
    },
    ProcessGroupPolicyCompletedEx: {
      parameters: ["pointer", "usize", "u32", "pointer"],
      result: "u32",
      optional: true,
    },
    RsopAccessCheckByType: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RsopFileAccessCheck: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    RsopSetPolicySettingStatus: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    RsopResetPolicySettingStatus: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    GenerateGPNotification: {
      parameters: ["i32", "buffer", "u32"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    InstallApplication: {
      parameters: ["pointer"],
      result: "u32",
      optional: true,
    },
    UninstallApplication: {
      parameters: ["buffer", "u32"],
      result: "u32",
      optional: true,
    },
    CommandLineFromMsiDescriptor: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetManagedApplications: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetLocalManagedApplications: {
      parameters: ["i32", "pointer", "pointer"],
      result: "u32",
      optional: true,
    },
    GetLocalManagedApplicationData: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "void",
      optional: true,
    },
    GetManagedApplicationCategories: {
      parameters: ["u32", "pointer"],
      result: "u32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libGPEDIT_dll = Deno.dlopen("GPEDIT.dll", {
    CreateGPOLink: {
      parameters: ["buffer", "buffer", "i32"],
      result: "pointer",
      optional: true,
    },
    DeleteGPOLink: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
      optional: true,
    },
    DeleteAllGPOLinks: {
      parameters: ["buffer"],
      result: "pointer",
      optional: true,
    },
    BrowseForGPO: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    ImportRSoPData: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
      optional: true,
    },
    ExportRSoPData: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function RefreshPolicy(
  bMachine: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.RefreshPolicy!(util.boolToFfi(bMachine)));
}

export function RefreshPolicyEx(
  bMachine: boolean /* Windows.Win32.Foundation.BOOL */,
  dwOptions: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.RefreshPolicyEx!(util.boolToFfi(bMachine), dwOptions));
}

export function EnterCriticalPolicySection(
  bMachine: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libUSERENV_dll.EnterCriticalPolicySection!(util.boolToFfi(bMachine));
}

export function LeaveCriticalPolicySection(
  hSection: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.LeaveCriticalPolicySection!(util.toPointer(hSection)));
}

export function RegisterGPNotification(
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  bMachine: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.RegisterGPNotification!(util.toPointer(hEvent), util.boolToFfi(bMachine)));
}

export function UnregisterGPNotification(
  hEvent: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.UnregisterGPNotification!(util.toPointer(hEvent)));
}

export function GetGPOListA(
  hToken: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpHostName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  pGPOList: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetGPOListA!(util.toPointer(hToken), util.pstrToFfi(lpName), util.pstrToFfi(lpHostName), util.pstrToFfi(lpComputerName), dwFlags, util.toPointer(pGPOList)));
}

export function GetGPOListW(
  hToken: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpHostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pGPOList: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetGPOListW!(util.toPointer(hToken), util.pwstrToFfi(lpName), util.pwstrToFfi(lpHostName), util.pwstrToFfi(lpComputerName), dwFlags, util.toPointer(pGPOList)));
}

export function FreeGPOListA(
  pGPOList: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.FreeGPOListA!(util.toPointer(pGPOList)));
}

export function FreeGPOListW(
  pGPOList: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.FreeGPOListW!(util.toPointer(pGPOList)));
}

export function GetAppliedGPOListA(
  dwFlags: number /* u32 */,
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pSidUser: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  pGuidExtension: Deno.PointerValue | Uint8Array /* ptr */,
  ppGPOList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libUSERENV_dll.GetAppliedGPOListA!(dwFlags, util.pstrToFfi(pMachineName), util.toPointer(pSidUser), util.toPointer(pGuidExtension), util.toPointer(ppGPOList));
}

export function GetAppliedGPOListW(
  dwFlags: number /* u32 */,
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSidUser: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  pGuidExtension: Deno.PointerValue | Uint8Array /* ptr */,
  ppGPOList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libUSERENV_dll.GetAppliedGPOListW!(dwFlags, util.pwstrToFfi(pMachineName), util.toPointer(pSidUser), util.toPointer(pGuidExtension), util.toPointer(ppGPOList));
}

export function ProcessGroupPolicyCompleted(
  extensionId: Deno.PointerValue | Uint8Array /* ptr */,
  pAsyncHandle: bigint | number /* usize */,
  dwStatus: number /* u32 */,
): number /* u32 */ {
  return libUSERENV_dll.ProcessGroupPolicyCompleted!(util.toPointer(extensionId), pAsyncHandle, dwStatus);
}

export function ProcessGroupPolicyCompletedEx(
  extensionId: Deno.PointerValue | Uint8Array /* ptr */,
  pAsyncHandle: bigint | number /* usize */,
  dwStatus: number /* u32 */,
  RsopStatus: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */,
): number /* u32 */ {
  return libUSERENV_dll.ProcessGroupPolicyCompletedEx!(util.toPointer(extensionId), pAsyncHandle, dwStatus, util.toPointer(RsopStatus));
}

export function RsopAccessCheckByType(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pPrincipalSelfSid: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.PSID */,
  pRsopToken: Deno.PointerValue | Uint8Array /* ptr */,
  dwDesiredAccessMask: number /* u32 */,
  pObjectTypeList: Deno.PointerValue | Uint8Array /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  pGenericMapping: Deno.PointerValue | Uint8Array /* ptr */,
  pPrivilegeSet: Deno.PointerValue | Uint8Array /* ptr */,
  pdwPrivilegeSetLength: Deno.PointerValue | Uint8Array /* ptr */,
  pdwGrantedAccessMask: Deno.PointerValue | Uint8Array /* ptr */,
  pbAccessStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSERENV_dll.RsopAccessCheckByType!(util.toPointer(pSecurityDescriptor), util.toPointer(pPrincipalSelfSid), util.toPointer(pRsopToken), dwDesiredAccessMask, util.toPointer(pObjectTypeList), ObjectTypeListLength, util.toPointer(pGenericMapping), util.toPointer(pPrivilegeSet), util.toPointer(pdwPrivilegeSetLength), util.toPointer(pdwGrantedAccessMask), util.toPointer(pbAccessStatus));
}

export function RsopFileAccessCheck(
  pszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pRsopToken: Deno.PointerValue | Uint8Array /* ptr */,
  dwDesiredAccessMask: number /* u32 */,
  pdwGrantedAccessMask: Deno.PointerValue | Uint8Array /* ptr */,
  pbAccessStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSERENV_dll.RsopFileAccessCheck!(util.pwstrToFfi(pszFileName), util.toPointer(pRsopToken), dwDesiredAccessMask, util.toPointer(pdwGrantedAccessMask), util.toPointer(pbAccessStatus));
}

export function RsopSetPolicySettingStatus(
  dwFlags: number /* u32 */,
  pServices: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Wmi.IWbemServices */,
  pSettingInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Wmi.IWbemClassObject */,
  nInfo: number /* u32 */,
  pStatus: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSERENV_dll.RsopSetPolicySettingStatus!(dwFlags, util.toPointer(pServices), util.toPointer(pSettingInstance), nInfo, util.toPointer(pStatus));
}

export function RsopResetPolicySettingStatus(
  dwFlags: number /* u32 */,
  pServices: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Wmi.IWbemServices */,
  pSettingInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Wmi.IWbemClassObject */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSERENV_dll.RsopResetPolicySettingStatus!(dwFlags, util.toPointer(pServices), util.toPointer(pSettingInstance));
}

export function GenerateGPNotification(
  bMachine: boolean /* Windows.Win32.Foundation.BOOL */,
  lpwszMgmtProduct: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwMgmtProductOptions: number /* u32 */,
): number /* u32 */ {
  return libUSERENV_dll.GenerateGPNotification!(util.boolToFfi(bMachine), util.pwstrToFfi(lpwszMgmtProduct), dwMgmtProductOptions);
}

export function InstallApplication(
  pInstallInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.InstallApplication!(util.toPointer(pInstallInfo));
}

export function UninstallApplication(
  ProductCode: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwStatus: number /* u32 */,
): number /* u32 */ {
  return libADVAPI32_dll.UninstallApplication!(util.pwstrToFfi(ProductCode), dwStatus);
}

export function CommandLineFromMsiDescriptor(
  Descriptor: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CommandLine: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CommandLineLength: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.CommandLineFromMsiDescriptor!(util.pwstrToFfi(Descriptor), util.pwstrToFfi(CommandLine), util.toPointer(CommandLineLength));
}

export function GetManagedApplications(
  pCategory: Deno.PointerValue | Uint8Array /* ptr */,
  dwQueryFlags: number /* u32 */,
  dwInfoLevel: number /* u32 */,
  pdwApps: Deno.PointerValue | Uint8Array /* ptr */,
  prgManagedApps: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.GetManagedApplications!(util.toPointer(pCategory), dwQueryFlags, dwInfoLevel, util.toPointer(pdwApps), util.toPointer(prgManagedApps));
}

export function GetLocalManagedApplications(
  bUserApps: boolean /* Windows.Win32.Foundation.BOOL */,
  pdwApps: Deno.PointerValue | Uint8Array /* ptr */,
  prgLocalApps: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.GetLocalManagedApplications!(util.boolToFfi(bUserApps), util.toPointer(pdwApps), util.toPointer(prgLocalApps));
}

export function GetLocalManagedApplicationData(
  ProductCode: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DisplayName: Deno.PointerValue | Uint8Array /* ptr */,
  SupportUrl: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.GetLocalManagedApplicationData!(util.pwstrToFfi(ProductCode), util.toPointer(DisplayName), util.toPointer(SupportUrl));
}

export function GetManagedApplicationCategories(
  dwReserved: number /* u32 */,
  pAppCategory: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.GetManagedApplicationCategories!(dwReserved, util.toPointer(pAppCategory));
}

export function CreateGPOLink(
  lpGPO: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpContainer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fHighPriority: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libGPEDIT_dll.CreateGPOLink!(util.pwstrToFfi(lpGPO), util.pwstrToFfi(lpContainer), util.boolToFfi(fHighPriority));
}

export function DeleteGPOLink(
  lpGPO: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpContainer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libGPEDIT_dll.DeleteGPOLink!(util.pwstrToFfi(lpGPO), util.pwstrToFfi(lpContainer));
}

export function DeleteAllGPOLinks(
  lpContainer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libGPEDIT_dll.DeleteAllGPOLinks!(util.pwstrToFfi(lpContainer));
}

export function BrowseForGPO(
  lpBrowseInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libGPEDIT_dll.BrowseForGPO!(util.toPointer(lpBrowseInfo));
}

export function ImportRSoPData(
  lpNameSpace: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libGPEDIT_dll.ImportRSoPData!(util.pwstrToFfi(lpNameSpace), util.pwstrToFfi(lpFileName));
}

export function ExportRSoPData(
  lpNameSpace: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libGPEDIT_dll.ExportRSoPData!(util.pwstrToFfi(lpNameSpace), util.pwstrToFfi(lpFileName));
}

