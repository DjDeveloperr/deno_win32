/// Auto-generated by Deno Win32: Windows.Win32.System.Iis.Apis

import * as util from "../../util.ts";

// Enums
export type FTP_ACCESS = number;
export type FTP_PROCESS_STATUS = number;
export type METADATATYPES = number;
export type SF_REQ_TYPE = number;
export type SF_PROPERTY_IIS = number;
export type SF_STATUS_TYPE = number;
export type HTTP_TRACE_TYPE = number;

// Constants
export const IISADMIN_EXTENSIONS_REG_KEYA = `SOFTWARE\\Microsoft\\InetStp\\Extensions`;
export const IISADMIN_EXTENSIONS_REG_KEYW = `SOFTWARE\\Microsoft\\InetStp\\Extensions`;
export const IISADMIN_EXTENSIONS_REG_KEY = `SOFTWARE\\Microsoft\\InetStp\\Extensions`;
export const IISADMIN_EXTENSIONS_CLSID_MD_KEYA = `LM/IISADMIN/EXTENSIONS/DCOMCLSIDS`;
export const IISADMIN_EXTENSIONS_CLSID_MD_KEYW = `LM/IISADMIN/EXTENSIONS/DCOMCLSIDS`;
export const IISADMIN_EXTENSIONS_CLSID_MD_KEY = `LM/IISADMIN/EXTENSIONS/DCOMCLSIDS`;
export const ADMINDATA_MAX_NAME_LEN = 256;
export const IMGCHG_SIZE = 1;
export const IMGCHG_VIEW = 2;
export const IMGCHG_COMPLETE = 4;
export const IMGCHG_ANIMATE = 8;
export const IMGCHG_MASK = 15;
export const IMGLOAD_NOTLOADED = 1048576;
export const IMGLOAD_LOADING = 2097152;
export const IMGLOAD_STOPPED = 4194304;
export const IMGLOAD_ERROR = 8388608;
export const IMGLOAD_COMPLETE = 16777216;
export const IMGLOAD_MASK = 32505856;
export const IMGBITS_NONE = 33554432;
export const IMGBITS_PARTIAL = 67108864;
export const IMGBITS_TOTAL = 134217728;
export const IMGBITS_MASK = 234881024;
export const IMGANIM_ANIMATED = 268435456;
export const IMGANIM_MASK = 268435456;
export const IMGTRANS_OPAQUE = 536870912;
export const IMGTRANS_MASK = 536870912;
export const DWN_COLORMODE = 63;
export const DWN_DOWNLOADONLY = 64;
export const DWN_FORCEDITHER = 128;
export const DWN_RAWIMAGE = 256;
export const DWN_MIRRORIMAGE = 512;
export const IIS_MD_LOCAL_MACHINE_PATH = `LM`;
export const IIS_MD_INSTANCE_ROOT = `Root`;
export const IIS_MD_ISAPI_FILTERS = `/Filters`;
export const IIS_MD_SVC_INFO_PATH = `Info`;
export const IIS_MD_ADSI_SCHEMA_PATH_A = `/Schema`;
export const IIS_MD_ADSI_SCHEMA_PATH_W = `/Schema`;
export const IIS_MD_ADSI_METAID_BEGIN = 130000;
export const IIS_MD_UT_SERVER = 1;
export const IIS_MD_UT_FILE = 2;
export const IIS_MD_UT_WAM = 100;
export const ASP_MD_UT_APP = 101;
export const IIS_MD_UT_END_RESERVED = 2000;
export const IIS_MD_ID_BEGIN_RESERVED = 1;
export const IIS_MD_ID_END_RESERVED = 32767;
export const ASP_MD_ID_BEGIN_RESERVED = 28672;
export const ASP_MD_ID_END_RESERVED = 29951;
export const WAM_MD_ID_BEGIN_RESERVED = 29952;
export const WAM_MD_ID_END_RESERVED = 32767;
export const FP_MD_ID_BEGIN_RESERVED = 32768;
export const FP_MD_ID_END_RESERVED = 36863;
export const SMTP_MD_ID_BEGIN_RESERVED = 36864;
export const SMTP_MD_ID_END_RESERVED = 40959;
export const POP3_MD_ID_BEGIN_RESERVED = 40960;
export const POP3_MD_ID_END_RESERVED = 45055;
export const NNTP_MD_ID_BEGIN_RESERVED = 45056;
export const NNTP_MD_ID_END_RESERVED = 49151;
export const IMAP_MD_ID_BEGIN_RESERVED = 49152;
export const IMAP_MD_ID_END_RESERVED = 53247;
export const MSCS_MD_ID_BEGIN_RESERVED = 53248;
export const MSCS_MD_ID_END_RESERVED = 57343;
export const APPCTR_MD_ID_BEGIN_RESERVED = 57344;
export const APPCTR_MD_ID_END_RESERVED = 61439;
export const USER_MD_ID_BASE_RESERVED = 65535;
export const IIS_MD_SERVER_BASE = 1000;
export const MD_MAX_BANDWIDTH = 1000;
export const MD_KEY_TYPE = 1002;
export const MD_MAX_BANDWIDTH_BLOCKED = 1003;
export const MD_SCHEMA_METAID = 1004;
export const MD_SERVER_COMMAND = 1012;
export const MD_CONNECTION_TIMEOUT = 1013;
export const MD_MAX_CONNECTIONS = 1014;
export const MD_SERVER_COMMENT = 1015;
export const MD_SERVER_STATE = 1016;
export const MD_SERVER_AUTOSTART = 1017;
export const MD_SERVER_SIZE = 1018;
export const MD_SERVER_LISTEN_BACKLOG = 1019;
export const MD_SERVER_LISTEN_TIMEOUT = 1020;
export const MD_DOWNLEVEL_ADMIN_INSTANCE = 1021;
export const MD_LEVELS_TO_SCAN = 1022;
export const MD_SERVER_BINDINGS = 1023;
export const MD_MAX_ENDPOINT_CONNECTIONS = 1024;
export const MD_SERVER_CONFIGURATION_INFO = 1027;
export const MD_IISADMIN_EXTENSIONS = 1028;
export const MD_DISABLE_SOCKET_POOLING = 1029;
export const MD_METADATA_ID_REGISTRATION = 1030;
export const IIS_MD_HTTP_BASE = 2000;
export const MD_SECURE_BINDINGS = 2021;
export const MD_BINDINGS = 2022;
export const MD_ENABLEDPROTOCOLS = 2023;
export const MD_FILTER_LOAD_ORDER = 2040;
export const MD_FILTER_IMAGE_PATH = 2041;
export const MD_FILTER_STATE = 2042;
export const MD_FILTER_ENABLED = 2043;
export const MD_FILTER_FLAGS = 2044;
export const MD_FILTER_DESCRIPTION = 2045;
export const MD_FILTER_ENABLE_CACHE = 2046;
export const MD_ADV_NOTIFY_PWD_EXP_IN_DAYS = 2063;
export const MD_ADV_CACHE_TTL = 2064;
export const MD_NET_LOGON_WKS = 2065;
export const MD_USE_HOST_NAME = 2066;
export const MD_AUTH_CHANGE_FLAGS = 2068;
export const MD_PROCESS_NTCR_IF_LOGGED_ON = 2070;
export const MD_FRONTPAGE_WEB = 2072;
export const MD_IN_PROCESS_ISAPI_APPS = 2073;
export const MD_AUTH_CHANGE_URL = 2060;
export const MD_AUTH_EXPIRED_URL = 2061;
export const MD_AUTH_EXPIRED_UNSECUREURL = 2067;
export const MD_ALLOW_PATH_INFO_FOR_SCRIPT_MAPPINGS = 2095;
export const MD_APP_FRIENDLY_NAME = 2102;
export const MD_APP_ROOT = 2103;
export const MD_APP_ISOLATED = 2104;
export const MD_APP_WAM_CLSID = 2105;
export const MD_APP_PACKAGE_ID = 2106;
export const MD_APP_PACKAGE_NAME = 2107;
export const MD_APP_OOP_RECOVER_LIMIT = 2110;
export const MD_APP_PERIODIC_RESTART_TIME = 2111;
export const MD_APP_PERIODIC_RESTART_REQUESTS = 2112;
export const MD_APP_PERIODIC_RESTART_SCHEDULE = 2113;
export const MD_APP_SHUTDOWN_TIME_LIMIT = 2114;
export const MD_ADMIN_INSTANCE = 2115;
export const MD_NOT_DELETABLE = 2116;
export const MD_APP_TRACE_URL_LIST = 2118;
export const MD_CENTRAL_W3C_LOGGING_ENABLED = 2119;
export const MD_CUSTOM_ERROR_DESC = 2120;
export const MD_CAL_VC_PER_CONNECT = 2130;
export const MD_CAL_AUTH_RESERVE_TIMEOUT = 2131;
export const MD_CAL_SSL_RESERVE_TIMEOUT = 2132;
export const MD_CAL_W3_ERROR = 2133;
export const MD_CPU_CGI_ENABLED = 2140;
export const MD_CPU_APP_ENABLED = 2141;
export const MD_CPU_LIMITS_ENABLED = 2143;
export const MD_CPU_RESET_INTERVAL = 2144;
export const MD_CPU_LOGGING_INTERVAL = 2145;
export const MD_CPU_LOGGING_OPTIONS = 2146;
export const MD_CPU_CGI_LIMIT = 2148;
export const MD_CPU_LIMIT_LOGEVENT = 2149;
export const MD_CPU_LIMIT_PRIORITY = 2150;
export const MD_CPU_LIMIT_PROCSTOP = 2151;
export const MD_CPU_LIMIT_PAUSE = 2152;
export const MD_SET_HOST_NAME = 2154;
export const MD_CPU_DISABLE_ALL_LOGGING = 0;
export const MD_CPU_ENABLE_ALL_PROC_LOGGING = 1;
export const MD_CPU_ENABLE_CGI_LOGGING = 2;
export const MD_CPU_ENABLE_APP_LOGGING = 4;
export const MD_CPU_ENABLE_EVENT = 1;
export const MD_CPU_ENABLE_PROC_TYPE = 2;
export const MD_CPU_ENABLE_USER_TIME = 4;
export const MD_CPU_ENABLE_KERNEL_TIME = 8;
export const MD_CPU_ENABLE_PAGE_FAULTS = 16;
export const MD_CPU_ENABLE_TOTAL_PROCS = 32;
export const MD_CPU_ENABLE_ACTIVE_PROCS = 64;
export const MD_CPU_ENABLE_TERMINATED_PROCS = 128;
export const MD_CPU_ENABLE_LOGGING = 2147483648;
export const MD_ISAPI_RESTRICTION_LIST = 2163;
export const MD_CGI_RESTRICTION_LIST = 2164;
export const MD_RESTRICTION_LIST_CUSTOM_DESC = 2165;
export const MD_SECURITY_SETUP_REQUIRED = 2166;
export const MD_APP_DEPENDENCIES = 2167;
export const MD_WEB_SVC_EXT_RESTRICTION_LIST = 2168;
export const MD_MD_SERVER_SS_AUTH_MAPPING = 2200;
export const MD_CERT_NO_REVOC_CHECK = 1;
export const MD_CERT_CACHE_RETRIEVAL_ONLY = 2;
export const MD_CERT_CHECK_REVOCATION_FRESHNESS_TIME = 4;
export const MD_CERT_NO_USAGE_CHECK = 65536;
export const MD_HC_COMPRESSION_DIRECTORY = 2210;
export const MD_HC_CACHE_CONTROL_HEADER = 2211;
export const MD_HC_EXPIRES_HEADER = 2212;
export const MD_HC_DO_DYNAMIC_COMPRESSION = 2213;
export const MD_HC_DO_STATIC_COMPRESSION = 2214;
export const MD_HC_DO_ON_DEMAND_COMPRESSION = 2215;
export const MD_HC_DO_DISK_SPACE_LIMITING = 2216;
export const MD_HC_NO_COMPRESSION_FOR_HTTP_10 = 2217;
export const MD_HC_NO_COMPRESSION_FOR_PROXIES = 2218;
export const MD_HC_NO_COMPRESSION_FOR_RANGE = 2219;
export const MD_HC_SEND_CACHE_HEADERS = 2220;
export const MD_HC_MAX_DISK_SPACE_USAGE = 2221;
export const MD_HC_IO_BUFFER_SIZE = 2222;
export const MD_HC_COMPRESSION_BUFFER_SIZE = 2223;
export const MD_HC_MAX_QUEUE_LENGTH = 2224;
export const MD_HC_FILES_DELETED_PER_DISK_FREE = 2225;
export const MD_HC_MIN_FILE_SIZE_FOR_COMP = 2226;
export const MD_HC_COMPRESSION_DLL = 2237;
export const MD_HC_FILE_EXTENSIONS = 2238;
export const MD_HC_MIME_TYPE = 2239;
export const MD_HC_PRIORITY = 2240;
export const MD_HC_DYNAMIC_COMPRESSION_LEVEL = 2241;
export const MD_HC_ON_DEMAND_COMP_LEVEL = 2242;
export const MD_HC_CREATE_FLAGS = 2243;
export const MD_HC_SCRIPT_FILE_EXTENSIONS = 2244;
export const MD_HC_DO_NAMESPACE_DYNAMIC_COMPRESSION = 2255;
export const MD_HC_DO_NAMESPACE_STATIC_COMPRESSION = 2256;
export const MD_WIN32_ERROR = 1099;
export const IIS_MD_VR_BASE = 3000;
export const MD_VR_PATH = 3001;
export const MD_VR_USERNAME = 3002;
export const MD_VR_PASSWORD = 3003;
export const MD_VR_PASSTHROUGH = 3006;
export const MD_VR_NO_CACHE = 3007;
export const MD_VR_IGNORE_TRANSLATE = 3008;
export const IIS_MD_LOG_BASE = 4000;
export const MD_LOG_TYPE = 4000;
export const MD_LOGFILE_DIRECTORY = 4001;
export const MD_LOG_UNUSED1 = 4002;
export const MD_LOGFILE_PERIOD = 4003;
export const MD_LOGFILE_TRUNCATE_SIZE = 4004;
export const MD_LOG_PLUGIN_MOD_ID = 4005;
export const MD_LOG_PLUGIN_UI_ID = 4006;
export const MD_LOGSQL_DATA_SOURCES = 4007;
export const MD_LOGSQL_TABLE_NAME = 4008;
export const MD_LOGSQL_USER_NAME = 4009;
export const MD_LOGSQL_PASSWORD = 4010;
export const MD_LOG_PLUGIN_ORDER = 4011;
export const MD_LOG_PLUGINS_AVAILABLE = 4012;
export const MD_LOGEXT_FIELD_MASK = 4013;
export const MD_LOGEXT_FIELD_MASK2 = 4014;
export const MD_LOGFILE_LOCALTIME_ROLLOVER = 4015;
export const IIS_MD_LOG_LAST = 4015;
export const MD_GLOBAL_BINARY_LOGGING_ENABLED = 4016;
export const MD_LOG_TYPE_DISABLED = 0;
export const MD_LOG_TYPE_ENABLED = 1;
export const MD_LOGFILE_PERIOD_NONE = 0;
export const MD_LOGFILE_PERIOD_MAXSIZE = 0;
export const MD_LOGFILE_PERIOD_DAILY = 1;
export const MD_LOGFILE_PERIOD_WEEKLY = 2;
export const MD_LOGFILE_PERIOD_MONTHLY = 3;
export const MD_LOGFILE_PERIOD_HOURLY = 4;
export const MD_EXTLOG_DATE = 1;
export const MD_EXTLOG_TIME = 2;
export const MD_EXTLOG_CLIENT_IP = 4;
export const MD_EXTLOG_USERNAME = 8;
export const MD_EXTLOG_SITE_NAME = 16;
export const MD_EXTLOG_COMPUTER_NAME = 32;
export const MD_EXTLOG_SERVER_IP = 64;
export const MD_EXTLOG_METHOD = 128;
export const MD_EXTLOG_URI_STEM = 256;
export const MD_EXTLOG_URI_QUERY = 512;
export const MD_EXTLOG_HTTP_STATUS = 1024;
export const MD_EXTLOG_WIN32_STATUS = 2048;
export const MD_EXTLOG_BYTES_SENT = 4096;
export const MD_EXTLOG_BYTES_RECV = 8192;
export const MD_EXTLOG_TIME_TAKEN = 16384;
export const MD_EXTLOG_SERVER_PORT = 32768;
export const MD_EXTLOG_USER_AGENT = 65536;
export const MD_EXTLOG_COOKIE = 131072;
export const MD_EXTLOG_REFERER = 262144;
export const MD_EXTLOG_PROTOCOL_VERSION = 524288;
export const MD_EXTLOG_HOST = 1048576;
export const MD_EXTLOG_HTTP_SUB_STATUS = 2097152;
export const IIS_MD_LOGCUSTOM_BASE = 4500;
export const MD_LOGCUSTOM_PROPERTY_NAME = 4501;
export const MD_LOGCUSTOM_PROPERTY_HEADER = 4502;
export const MD_LOGCUSTOM_PROPERTY_ID = 4503;
export const MD_LOGCUSTOM_PROPERTY_MASK = 4504;
export const MD_LOGCUSTOM_PROPERTY_DATATYPE = 4505;
export const MD_LOGCUSTOM_SERVICES_STRING = 4506;
export const MD_CPU_LOGGING_MASK = 4507;
export const MD_LOGCUSTOM_PROPERTY_NODE_ID = 4508;
export const IIS_MD_LOGCUSTOM_LAST = 4508;
export const MD_LOGCUSTOM_DATATYPE_INT = 0;
export const MD_LOGCUSTOM_DATATYPE_UINT = 1;
export const MD_LOGCUSTOM_DATATYPE_LONG = 2;
export const MD_LOGCUSTOM_DATATYPE_ULONG = 3;
export const MD_LOGCUSTOM_DATATYPE_FLOAT = 4;
export const MD_LOGCUSTOM_DATATYPE_DOUBLE = 5;
export const MD_LOGCUSTOM_DATATYPE_LPSTR = 6;
export const MD_LOGCUSTOM_DATATYPE_LPWSTR = 7;
export const MD_NOTIFY_SECURE_PORT = 1;
export const MD_NOTIFY_NONSECURE_PORT = 2;
export const MD_NOTIFY_READ_RAW_DATA = 32768;
export const MD_NOTIFY_PREPROC_HEADERS = 16384;
export const MD_NOTIFY_AUTHENTICATION = 8192;
export const MD_NOTIFY_URL_MAP = 4096;
export const MD_NOTIFY_ACCESS_DENIED = 2048;
export const MD_NOTIFY_SEND_RESPONSE = 64;
export const MD_NOTIFY_SEND_RAW_DATA = 1024;
export const MD_NOTIFY_LOG = 512;
export const MD_NOTIFY_END_OF_REQUEST = 128;
export const MD_NOTIFY_END_OF_NET_SESSION = 256;
export const MD_NOTIFY_AUTH_COMPLETE = 67108864;
export const MD_NOTIFY_ORDER_HIGH = 524288;
export const MD_NOTIFY_ORDER_MEDIUM = 262144;
export const MD_NOTIFY_ORDER_LOW = 131072;
export const MD_NOTIFY_ORDER_DEFAULT = 131072;
export const IIS_MD_FTP_BASE = 5000;
export const MD_EXIT_MESSAGE = 5001;
export const MD_GREETING_MESSAGE = 5002;
export const MD_MAX_CLIENTS_MESSAGE = 5003;
export const MD_MSDOS_DIR_OUTPUT = 5004;
export const MD_ALLOW_ANONYMOUS = 5005;
export const MD_ANONYMOUS_ONLY = 5006;
export const MD_LOG_ANONYMOUS = 5007;
export const MD_LOG_NONANONYMOUS = 5008;
export const MD_ALLOW_REPLACE_ON_RENAME = 5009;
export const MD_SHOW_4_DIGIT_YEAR = 5010;
export const MD_BANNER_MESSAGE = 5011;
export const MD_USER_ISOLATION = 5012;
export const MD_FTP_LOG_IN_UTF_8 = 5013;
export const MD_AD_CONNECTIONS_USERNAME = 5014;
export const MD_AD_CONNECTIONS_PASSWORD = 5015;
export const MD_PASSIVE_PORT_RANGE = 5016;
export const MD_SUPPRESS_DEFAULT_BANNER = 5017;
export const MD_FTP_PASV_RESPONSE_IP = 5018;
export const MD_FTP_KEEP_PARTIAL_UPLOADS = 5019;
export const MD_FTP_UTF8_FILE_NAMES = 5020;
export const MD_FTPS_SECURE_CONTROL_CHANNEL = 5050;
export const MD_FTPS_SECURE_DATA_CHANNEL = 5051;
export const MD_FTPS_SECURE_ANONYMOUS = 5052;
export const MD_FTPS_128_BITS = 5053;
export const MD_FTPS_ALLOW_CCC = 5054;
export const IIS_MD_SSL_BASE = 5500;
export const MD_SSL_PUBLIC_KEY = 5500;
export const MD_SSL_PRIVATE_KEY = 5501;
export const MD_SSL_KEY_PASSWORD = 5502;
export const MD_SSL_KEY_REQUEST = 5503;
export const MD_SSL_USE_DS_MAPPER = 5519;
export const MD_SSL_ALWAYS_NEGO_CLIENT_CERT = 5521;
export const IIS_MD_FILE_PROP_BASE = 6000;
export const MD_AUTHORIZATION = 6000;
export const MD_REALM = 6001;
export const MD_HTTP_EXPIRES = 6002;
export const MD_HTTP_PICS = 6003;
export const MD_HTTP_CUSTOM = 6004;
export const MD_DIRECTORY_BROWSING = 6005;
export const MD_DEFAULT_LOAD_FILE = 6006;
export const MD_CUSTOM_ERROR = 6008;
export const MD_FOOTER_DOCUMENT = 6009;
export const MD_FOOTER_ENABLED = 6010;
export const MD_HTTP_REDIRECT = 6011;
export const MD_DEFAULT_LOGON_DOMAIN = 6012;
export const MD_LOGON_METHOD = 6013;
export const MD_SCRIPT_MAPS = 6014;
export const MD_MIME_MAP = 6015;
export const MD_ACCESS_PERM = 6016;
export const MD_IP_SEC = 6019;
export const MD_ANONYMOUS_USER_NAME = 6020;
export const MD_ANONYMOUS_PWD = 6021;
export const MD_ANONYMOUS_USE_SUBAUTH = 6022;
export const MD_DONT_LOG = 6023;
export const MD_ADMIN_ACL = 6027;
export const MD_SSI_EXEC_DISABLED = 6028;
export const MD_DO_REVERSE_DNS = 6029;
export const MD_SSL_ACCESS_PERM = 6030;
export const MD_AUTHORIZATION_PERSISTENCE = 6031;
export const MD_NTAUTHENTICATION_PROVIDERS = 6032;
export const MD_SCRIPT_TIMEOUT = 6033;
export const MD_CACHE_EXTENSIONS = 6034;
export const MD_CREATE_PROCESS_AS_USER = 6035;
export const MD_CREATE_PROC_NEW_CONSOLE = 6036;
export const MD_POOL_IDC_TIMEOUT = 6037;
export const MD_ALLOW_KEEPALIVES = 6038;
export const MD_IS_CONTENT_INDEXED = 6039;
export const MD_CC_NO_CACHE = 6041;
export const MD_CC_MAX_AGE = 6042;
export const MD_CC_OTHER = 6043;
export const MD_REDIRECT_HEADERS = 6044;
export const MD_UPLOAD_READAHEAD_SIZE = 6045;
export const MD_PUT_READ_SIZE = 6046;
export const MD_USE_DIGEST_SSP = 6047;
export const MD_ENABLE_URL_AUTHORIZATION = 6048;
export const MD_URL_AUTHORIZATION_STORE_NAME = 6049;
export const MD_URL_AUTHORIZATION_SCOPE_NAME = 6050;
export const MD_MAX_REQUEST_ENTITY_ALLOWED = 6051;
export const MD_PASSPORT_REQUIRE_AD_MAPPING = 6052;
export const MD_URL_AUTHORIZATION_IMPERSONATION_LEVEL = 6053;
export const MD_HTTP_FORWARDER_CUSTOM = 6054;
export const MD_CUSTOM_DEPLOYMENT_DATA = 6055;
export const MD_HTTPERRORS_EXISTING_RESPONSE = 6056;
export const ASP_MD_SERVER_BASE = 7000;
export const MD_ASP_BUFFERINGON = 7000;
export const MD_ASP_LOGERRORREQUESTS = 7001;
export const MD_ASP_SCRIPTERRORSSENTTOBROWSER = 7002;
export const MD_ASP_SCRIPTERRORMESSAGE = 7003;
export const MD_ASP_SCRIPTFILECACHESIZE = 7004;
export const MD_ASP_SCRIPTENGINECACHEMAX = 7005;
export const MD_ASP_SCRIPTTIMEOUT = 7006;
export const MD_ASP_SESSIONTIMEOUT = 7007;
export const MD_ASP_ENABLEPARENTPATHS = 7008;
export const MD_ASP_MEMFREEFACTOR = 7009;
export const MD_ASP_MINUSEDBLOCKS = 7010;
export const MD_ASP_ALLOWSESSIONSTATE = 7011;
export const MD_ASP_SCRIPTLANGUAGE = 7012;
export const MD_ASP_QUEUETIMEOUT = 7013;
export const MD_ASP_ALLOWOUTOFPROCCOMPONENTS = 7014;
export const MD_ASP_ALLOWOUTOFPROCCMPNTS = 7014;
export const MD_ASP_EXCEPTIONCATCHENABLE = 7015;
export const MD_ASP_CODEPAGE = 7016;
export const MD_ASP_SCRIPTLANGUAGELIST = 7017;
export const MD_ASP_ENABLESERVERDEBUG = 7018;
export const MD_ASP_ENABLECLIENTDEBUG = 7019;
export const MD_ASP_TRACKTHREADINGMODEL = 7020;
export const MD_ASP_ENABLEASPHTMLFALLBACK = 7021;
export const MD_ASP_ENABLECHUNKEDENCODING = 7022;
export const MD_ASP_ENABLETYPELIBCACHE = 7023;
export const MD_ASP_ERRORSTONTLOG = 7024;
export const MD_ASP_PROCESSORTHREADMAX = 7025;
export const MD_ASP_REQEUSTQUEUEMAX = 7026;
export const MD_ASP_ENABLEAPPLICATIONRESTART = 7027;
export const MD_ASP_QUEUECONNECTIONTESTTIME = 7028;
export const MD_ASP_SESSIONMAX = 7029;
export const MD_ASP_THREADGATEENABLED = 7030;
export const MD_ASP_THREADGATETIMESLICE = 7031;
export const MD_ASP_THREADGATESLEEPDELAY = 7032;
export const MD_ASP_THREADGATESLEEPMAX = 7033;
export const MD_ASP_THREADGATELOADLOW = 7034;
export const MD_ASP_THREADGATELOADHIGH = 7035;
export const MD_ASP_DISKTEMPLATECACHEDIRECTORY = 7036;
export const MD_ASP_MAXDISKTEMPLATECACHEFILES = 7040;
export const MD_ASP_EXECUTEINMTA = 7041;
export const MD_ASP_LCID = 7042;
export const MD_ASP_KEEPSESSIONIDSECURE = 7043;
export const MD_ASP_SERVICE_FLAGS = 7044;
export const MD_ASP_SERVICE_FLAG_TRACKER = 7045;
export const MD_ASP_SERVICE_FLAG_FUSION = 7046;
export const MD_ASP_SERVICE_FLAG_PARTITIONS = 7047;
export const MD_ASP_SERVICE_PARTITION_ID = 7048;
export const MD_ASP_SERVICE_SXS_NAME = 7049;
export const MD_ASP_SERVICE_ENABLE_TRACKER = 1;
export const MD_ASP_SERVICE_ENABLE_SXS = 2;
export const MD_ASP_SERVICE_USE_PARTITION = 4;
export const MD_ASP_CALCLINENUMBER = 7050;
export const MD_ASP_RUN_ONEND_ANON = 7051;
export const MD_ASP_BUFFER_LIMIT = 7052;
export const MD_ASP_MAX_REQUEST_ENTITY_ALLOWED = 7053;
export const MD_ASP_MAXREQUESTENTITY = 7053;
export const MD_ASP_ID_LAST = 7053;
export const WAM_MD_SERVER_BASE = 7500;
export const MD_WAM_USER_NAME = 7501;
export const MD_WAM_PWD = 7502;
export const WEBDAV_MD_SERVER_BASE = 8500;
export const MD_WEBDAV_MAX_ATTRIBUTES_PER_ELEMENT = 8501;
export const IIS_MD_APPPOOL_BASE = 9000;
export const MD_APPPOOL_PERIODIC_RESTART_TIME = 9001;
export const MD_APPPOOL_PERIODIC_RESTART_REQUEST_COUNT = 9002;
export const MD_APPPOOL_MAX_PROCESS_COUNT = 9003;
export const MD_APPPOOL_PINGING_ENABLED = 9004;
export const MD_APPPOOL_IDLE_TIMEOUT = 9005;
export const MD_APPPOOL_RAPID_FAIL_PROTECTION_ENABLED = 9006;
export const MD_APPPOOL_SMP_AFFINITIZED = 9007;
export const MD_APPPOOL_SMP_AFFINITIZED_PROCESSOR_MASK = 9008;
export const MD_APPPOOL_ORPHAN_PROCESSES_FOR_DEBUGGING = 9009;
export const MD_APPPOOL_STARTUP_TIMELIMIT = 9011;
export const MD_APPPOOL_SHUTDOWN_TIMELIMIT = 9012;
export const MD_APPPOOL_PING_INTERVAL = 9013;
export const MD_APPPOOL_PING_RESPONSE_TIMELIMIT = 9014;
export const MD_APPPOOL_DISALLOW_OVERLAPPING_ROTATION = 9015;
export const MD_APPPOOL_UL_APPPOOL_QUEUE_LENGTH = 9017;
export const MD_APPPOOL_DISALLOW_ROTATION_ON_CONFIG_CHANGE = 9018;
export const MD_APPPOOL_PERIODIC_RESTART_SCHEDULE = 9020;
export const MD_APPPOOL_IDENTITY_TYPE = 9021;
export const MD_CPU_ACTION = 9022;
export const MD_CPU_LIMIT = 9023;
export const MD_APPPOOL_PERIODIC_RESTART_MEMORY = 9024;
export const MD_APPPOOL_COMMAND = 9026;
export const MD_APPPOOL_STATE = 9027;
export const MD_APPPOOL_AUTO_START = 9028;
export const MD_RAPID_FAIL_PROTECTION_INTERVAL = 9029;
export const MD_RAPID_FAIL_PROTECTION_MAX_CRASHES = 9030;
export const MD_APPPOOL_ORPHAN_ACTION_EXE = 9031;
export const MD_APPPOOL_ORPHAN_ACTION_PARAMS = 9032;
export const MB_DONT_IMPERSONATE = 9033;
export const MD_LOAD_BALANCER_CAPABILITIES = 9034;
export const MD_APPPOOL_AUTO_SHUTDOWN_EXE = 9035;
export const MD_APPPOOL_AUTO_SHUTDOWN_PARAMS = 9036;
export const MD_APP_POOL_LOG_EVENT_ON_RECYCLE = 9037;
export const MD_APPPOOL_PERIODIC_RESTART_PRIVATE_MEMORY = 9038;
export const MD_APPPOOL_MANAGED_RUNTIME_VERSION = 9039;
export const MD_APPPOOL_32_BIT_APP_ON_WIN64 = 9040;
export const MD_APPPOOL_MANAGED_PIPELINE_MODE = 9041;
export const MD_APP_POOL_LOG_EVENT_ON_PROCESSMODEL = 9042;
export const MD_APP_POOL_PROCESSMODEL_IDLE_TIMEOUT = 1;
export const MD_APP_POOL_RECYCLE_TIME = 1;
export const MD_APP_POOL_RECYCLE_REQUESTS = 2;
export const MD_APP_POOL_RECYCLE_SCHEDULE = 4;
export const MD_APP_POOL_RECYCLE_MEMORY = 8;
export const MD_APP_POOL_RECYCLE_ISAPI_UNHEALTHY = 16;
export const MD_APP_POOL_RECYCLE_ON_DEMAND = 32;
export const MD_APP_POOL_RECYCLE_CONFIG_CHANGE = 64;
export const MD_APP_POOL_RECYCLE_PRIVATE_MEMORY = 128;
export const MD_CPU_NO_ACTION = 0;
export const MD_CPU_KILL_W3WP = 1;
export const MD_CPU_TRACE = 2;
export const MD_CPU_THROTTLE = 3;
export const MD_APPPOOL_COMMAND_START = 1;
export const MD_APPPOOL_COMMAND_STOP = 2;
export const MD_APPPOOL_STATE_STARTING = 1;
export const MD_APPPOOL_STATE_STARTED = 2;
export const MD_APPPOOL_STATE_STOPPING = 3;
export const MD_APPPOOL_STATE_STOPPED = 4;
export const MD_APPPOOL_IDENTITY_TYPE_LOCALSYSTEM = 0;
export const MD_APPPOOL_IDENTITY_TYPE_LOCALSERVICE = 1;
export const MD_APPPOOL_IDENTITY_TYPE_NETWORKSERVICE = 2;
export const MD_APPPOOL_IDENTITY_TYPE_SPECIFICUSER = 3;
export const MD_LOAD_BALANCER_CAPABILITIES_BASIC = 1;
export const MD_LOAD_BALANCER_CAPABILITIES_SOPHISTICATED = 2;
export const IIS_MD_APP_BASE = 9100;
export const MD_APP_APPPOOL_ID = 9101;
export const MD_APP_ALLOW_TRANSIENT_REGISTRATION = 9102;
export const MD_APP_AUTO_START = 9103;
export const MD_APPPOOL_PERIODIC_RESTART_CONNECTIONS = 9104;
export const MD_APPPOOL_APPPOOL_ID = 9201;
export const MD_APPPOOL_ALLOW_TRANSIENT_REGISTRATION = 9202;
export const IIS_MD_GLOBAL_BASE = 9200;
export const MD_MAX_GLOBAL_BANDWIDTH = 9201;
export const MD_MAX_GLOBAL_CONNECTIONS = 9202;
export const MD_GLOBAL_STANDARD_APP_MODE_ENABLED = 9203;
export const MD_HEADER_WAIT_TIMEOUT = 9204;
export const MD_MIN_FILE_BYTES_PER_SEC = 9205;
export const MD_GLOBAL_LOG_IN_UTF_8 = 9206;
export const MD_DEMAND_START_THRESHOLD = 9207;
export const MD_GLOBAL_SESSIONKEY = 9999;
export const MD_ROOT_ENABLE_EDIT_WHILE_RUNNING = 9998;
export const MD_GLOBAL_CHANGE_NUMBER = 9997;
export const MD_ROOT_ENABLE_HISTORY = 9996;
export const MD_ROOT_MAX_HISTORY_FILES = 9995;
export const MD_GLOBAL_EDIT_WHILE_RUNNING_MAJOR_VERSION_NUMBER = 9994;
export const MD_GLOBAL_EDIT_WHILE_RUNNING_MINOR_VERSION_NUMBER = 9993;
export const MD_GLOBAL_XMLSCHEMATIMESTAMP = 9992;
export const MD_GLOBAL_BINSCHEMATIMESTAMP = 9991;
export const MD_COMMENTS = 9990;
export const MD_LOCATION = 9989;
export const MD_MAX_ERROR_FILES = 9988;
export const MD_STOP_LISTENING = 9987;
export const MD_AUTH_ANONYMOUS = 1;
export const MD_AUTH_BASIC = 2;
export const MD_AUTH_NT = 4;
export const MD_AUTH_MD5 = 16;
export const MD_AUTH_PASSPORT = 64;
export const MD_AUTH_SINGLEREQUEST = 64;
export const MD_AUTH_SINGLEREQUESTIFPROXY = 128;
export const MD_AUTH_SINGLEREQUESTALWAYSIFPROXY = 256;
export const MD_ACCESS_READ = 1;
export const MD_ACCESS_WRITE = 2;
export const MD_ACCESS_EXECUTE = 4;
export const MD_ACCESS_SOURCE = 16;
export const MD_ACCESS_SCRIPT = 512;
export const MD_ACCESS_NO_REMOTE_WRITE = 1024;
export const MD_ACCESS_NO_REMOTE_READ = 4096;
export const MD_ACCESS_NO_REMOTE_EXECUTE = 8192;
export const MD_ACCESS_NO_REMOTE_SCRIPT = 16384;
export const MD_ACCESS_NO_PHYSICAL_DIR = 32768;
export const MD_ACCESS_SSL = 8;
export const MD_ACCESS_NEGO_CERT = 32;
export const MD_ACCESS_REQUIRE_CERT = 64;
export const MD_ACCESS_MAP_CERT = 128;
export const MD_ACCESS_SSL128 = 256;
export const MD_ACCESS_MASK = 65535;
export const MD_DIRBROW_SHOW_DATE = 2;
export const MD_DIRBROW_SHOW_TIME = 4;
export const MD_DIRBROW_SHOW_SIZE = 8;
export const MD_DIRBROW_SHOW_EXTENSION = 16;
export const MD_DIRBROW_LONG_DATE = 32;
export const MD_DIRBROW_ENABLED = 2147483648;
export const MD_DIRBROW_LOADDEFAULT = 1073741824;
export const MD_LOGON_INTERACTIVE = 0;
export const MD_LOGON_BATCH = 1;
export const MD_LOGON_NETWORK = 2;
export const MD_LOGON_NETWORK_CLEARTEXT = 3;
export const MD_PASSPORT_NO_MAPPING = 0;
export const MD_PASSPORT_TRY_MAPPING = 1;
export const MD_PASSPORT_NEED_MAPPING = 2;
export const MD_NOTIFEXAUTH_NTLMSSL = 1;
export const MD_FILTER_STATE_LOADED = 1;
export const MD_FILTER_STATE_UNLOADED = 4;
export const MD_SERVER_STATE_STARTING = 1;
export const MD_SERVER_STATE_STARTED = 2;
export const MD_SERVER_STATE_STOPPING = 3;
export const MD_SERVER_STATE_STOPPED = 4;
export const MD_SERVER_STATE_PAUSING = 5;
export const MD_SERVER_STATE_PAUSED = 6;
export const MD_SERVER_STATE_CONTINUING = 7;
export const MD_SERVER_COMMAND_START = 1;
export const MD_SERVER_COMMAND_STOP = 2;
export const MD_SERVER_COMMAND_PAUSE = 3;
export const MD_SERVER_COMMAND_CONTINUE = 4;
export const MD_SERVER_SIZE_SMALL = 0;
export const MD_SERVER_SIZE_MEDIUM = 1;
export const MD_SERVER_SIZE_LARGE = 2;
export const MD_SERVER_CONFIG_SSL_40 = 1;
export const MD_SERVER_CONFIG_SSL_128 = 2;
export const MD_SERVER_CONFIG_ALLOW_ENCRYPT = 4;
export const MD_SERVER_CONFIG_AUTO_PW_SYNC = 8;
export const MD_SCRIPTMAPFLAG_SCRIPT = 1;
export const MD_SCRIPTMAPFLAG_CHECK_PATH_INFO = 4;
export const MD_SCRIPTMAPFLAG_ALLOWED_ON_READ_DIR = 1;
export const MD_AUTH_CHANGE_UNSECURE = 1;
export const MD_AUTH_CHANGE_DISABLE = 2;
export const MD_AUTH_ADVNOTIFY_DISABLE = 4;
export const MD_NETLOGON_WKS_NONE = 0;
export const MD_NETLOGON_WKS_IP = 1;
export const MD_NETLOGON_WKS_DNS = 2;
export const MD_ERROR_SUB400_INVALID_DESTINATION = 1;
export const MD_ERROR_SUB400_INVALID_DEPTH = 2;
export const MD_ERROR_SUB400_INVALID_IF = 3;
export const MD_ERROR_SUB400_INVALID_OVERWRITE = 4;
export const MD_ERROR_SUB400_INVALID_TRANSLATE = 5;
export const MD_ERROR_SUB400_INVALID_REQUEST_BODY = 6;
export const MD_ERROR_SUB400_INVALID_CONTENT_LENGTH = 7;
export const MD_ERROR_SUB400_INVALID_TIMEOUT = 8;
export const MD_ERROR_SUB400_INVALID_LOCK_TOKEN = 9;
export const MD_ERROR_SUB400_INVALID_XFF_HEADER = 10;
export const MD_ERROR_SUB400_INVALID_WEBSOCKET_REQUEST = 11;
export const MD_ERROR_SUB401_LOGON = 1;
export const MD_ERROR_SUB401_LOGON_CONFIG = 2;
export const MD_ERROR_SUB401_LOGON_ACL = 3;
export const MD_ERROR_SUB401_FILTER = 4;
export const MD_ERROR_SUB401_APPLICATION = 5;
export const MD_ERROR_SUB401_URLAUTH_POLICY = 7;
export const MD_ERROR_SUB403_EXECUTE_ACCESS_DENIED = 1;
export const MD_ERROR_SUB403_READ_ACCESS_DENIED = 2;
export const MD_ERROR_SUB403_WRITE_ACCESS_DENIED = 3;
export const MD_ERROR_SUB403_SSL_REQUIRED = 4;
export const MD_ERROR_SUB403_SSL128_REQUIRED = 5;
export const MD_ERROR_SUB403_ADDR_REJECT = 6;
export const MD_ERROR_SUB403_CERT_REQUIRED = 7;
export const MD_ERROR_SUB403_SITE_ACCESS_DENIED = 8;
export const MD_ERROR_SUB403_TOO_MANY_USERS = 9;
export const MD_ERROR_SUB403_INVALID_CNFG = 10;
export const MD_ERROR_SUB403_PWD_CHANGE = 11;
export const MD_ERROR_SUB403_MAPPER_DENY_ACCESS = 12;
export const MD_ERROR_SUB403_CERT_REVOKED = 13;
export const MD_ERROR_SUB403_DIR_LIST_DENIED = 14;
export const MD_ERROR_SUB403_CAL_EXCEEDED = 15;
export const MD_ERROR_SUB403_CERT_BAD = 16;
export const MD_ERROR_SUB403_CERT_TIME_INVALID = 17;
export const MD_ERROR_SUB403_APPPOOL_DENIED = 18;
export const MD_ERROR_SUB403_INSUFFICIENT_PRIVILEGE_FOR_CGI = 19;
export const MD_ERROR_SUB403_PASSPORT_LOGIN_FAILURE = 20;
export const MD_ERROR_SUB403_SOURCE_ACCESS_DENIED = 21;
export const MD_ERROR_SUB403_INFINITE_DEPTH_DENIED = 22;
export const MD_ERROR_SUB403_LOCK_TOKEN_REQUIRED = 23;
export const MD_ERROR_SUB403_VALIDATION_FAILURE = 24;
export const MD_ERROR_SUB404_SITE_NOT_FOUND = 1;
export const MD_ERROR_SUB404_DENIED_BY_POLICY = 2;
export const MD_ERROR_SUB404_DENIED_BY_MIMEMAP = 3;
export const MD_ERROR_SUB404_NO_HANDLER = 4;
export const MD_ERROR_SUB404_URL_SEQUENCE_DENIED = 5;
export const MD_ERROR_SUB404_VERB_DENIED = 6;
export const MD_ERROR_SUB404_FILE_EXTENSION_DENIED = 7;
export const MD_ERROR_SUB404_HIDDEN_SEGMENT = 8;
export const MD_ERROR_SUB404_FILE_ATTRIBUTE_HIDDEN = 9;
export const MD_ERROR_SUB404_URL_DOUBLE_ESCAPED = 11;
export const MD_ERROR_SUB404_URL_HAS_HIGH_BIT_CHARS = 12;
export const MD_ERROR_SUB404_URL_TOO_LONG = 14;
export const MD_ERROR_SUB404_QUERY_STRING_TOO_LONG = 15;
export const MD_ERROR_SUB404_STATICFILE_DAV = 16;
export const MD_ERROR_SUB404_PRECONDITIONED_HANDLER = 17;
export const MD_ERROR_SUB404_QUERY_STRING_SEQUENCE_DENIED = 18;
export const MD_ERROR_SUB404_DENIED_BY_FILTERING_RULE = 19;
export const MD_ERROR_SUB404_TOO_MANY_URL_SEGMENTS = 20;
export const MD_ERROR_SUB413_CONTENT_LENGTH_TOO_LARGE = 1;
export const MD_ERROR_SUB423_LOCK_TOKEN_SUBMITTED = 1;
export const MD_ERROR_SUB423_NO_CONFLICTING_LOCK = 2;
export const MD_ERROR_SUB500_UNC_ACCESS = 16;
export const MD_ERROR_SUB500_URLAUTH_NO_STORE = 17;
export const MD_ERROR_SUB500_URLAUTH_STORE_ERROR = 18;
export const MD_ERROR_SUB500_BAD_METADATA = 19;
export const MD_ERROR_SUB500_URLAUTH_NO_SCOPE = 20;
export const MD_ERROR_SUB500_HANDLERS_MODULE = 21;
export const MD_ERROR_SUB500_ASPNET_MODULES = 22;
export const MD_ERROR_SUB500_ASPNET_HANDLERS = 23;
export const MD_ERROR_SUB500_ASPNET_IMPERSONATION = 24;
export const MD_ERROR_SUB502_TIMEOUT = 1;
export const MD_ERROR_SUB502_PREMATURE_EXIT = 2;
export const MD_ERROR_SUB502_ARR_CONNECTION_ERROR = 3;
export const MD_ERROR_SUB502_ARR_NO_SERVER = 4;
export const MD_ERROR_SUB503_CPU_LIMIT = 1;
export const MD_ERROR_SUB503_APP_CONCURRENT = 2;
export const MD_ERROR_SUB503_ASPNET_QUEUE_FULL = 3;
export const MD_ERROR_SUB503_FASTCGI_QUEUE_FULL = 4;
export const MD_ERROR_SUB503_CONNECTION_LIMIT = 5;
export const MD_ACR_READ = 1;
export const MD_ACR_WRITE = 2;
export const MD_ACR_RESTRICTED_WRITE = 32;
export const MD_ACR_UNSECURE_PROPS_READ = 128;
export const MD_ACR_ENUM_KEYS = 8;
export const MD_ACR_WRITE_DAC = 262144;
export const MD_USER_ISOLATION_NONE = 0;
export const MD_USER_ISOLATION_BASIC = 1;
export const MD_USER_ISOLATION_AD = 2;
export const MD_USER_ISOLATION_LAST = 2;
export const IIS_CLASS_COMPUTER = `IIsComputer`;
export const IIS_CLASS_WEB_SERVICE = `IIsWebService`;
export const IIS_CLASS_WEB_SERVER = `IIsWebServer`;
export const IIS_CLASS_WEB_INFO = `IIsWebInfo`;
export const IIS_CLASS_WEB_DIR = `IIsWebDirectory`;
export const IIS_CLASS_WEB_VDIR = `IIsWebVirtualDir`;
export const IIS_CLASS_WEB_FILE = `IIsWebFile`;
export const IIS_CLASS_FTP_SERVICE = `IIsFtpService`;
export const IIS_CLASS_FTP_SERVER = `IIsFtpServer`;
export const IIS_CLASS_FTP_INFO = `IIsFtpInfo`;
export const IIS_CLASS_FTP_VDIR = `IIsFtpVirtualDir`;
export const IIS_CLASS_FILTERS = `IIsFilters`;
export const IIS_CLASS_FILTER = `IIsFilter`;
export const IIS_CLASS_LOG_MODULES = `IIsLogModules`;
export const IIS_CLASS_LOG_MODULE = `IIsLogModule`;
export const IIS_CLASS_MIMEMAP = `IIsMimeMap`;
export const IIS_CLASS_CERTMAPPER = `IIsCertMapper`;
export const IIS_CLASS_COMPRESS_SCHEMES = `IIsCompressionSchemes`;
export const IIS_CLASS_COMPRESS_SCHEME = `IIsCompressionScheme`;
export const IIS_CLASS_COMPUTER_W = `IIsComputer`;
export const IIS_CLASS_WEB_SERVICE_W = `IIsWebService`;
export const IIS_CLASS_WEB_SERVER_W = `IIsWebServer`;
export const IIS_CLASS_WEB_INFO_W = `IIsWebInfo`;
export const IIS_CLASS_WEB_DIR_W = `IIsWebDirectory`;
export const IIS_CLASS_WEB_VDIR_W = `IIsWebVirtualDir`;
export const IIS_CLASS_WEB_FILE_W = `IIsWebFile`;
export const IIS_CLASS_FTP_SERVICE_W = `IIsFtpService`;
export const IIS_CLASS_FTP_SERVER_W = `IIsFtpServer`;
export const IIS_CLASS_FTP_INFO_W = `IIsFtpInfo`;
export const IIS_CLASS_FTP_VDIR_W = `IIsFtpVirtualDir`;
export const IIS_CLASS_FILTERS_W = `IIsFilters`;
export const IIS_CLASS_FILTER_W = `IIsFilter`;
export const IIS_CLASS_LOG_MODULES_W = `IIsLogModules`;
export const IIS_CLASS_LOG_MODULE_W = `IIsLogModule`;
export const IIS_CLASS_MIMEMAP_W = `IIsMimeMap`;
export const IIS_CLASS_CERTMAPPER_W = `IIsCertMapper`;
export const IIS_CLASS_COMPRESS_SCHEMES_W = `IIsCompressionSchemes`;
export const IIS_CLASS_COMPRESS_SCHEME_W = `IIsCompressionScheme`;
export const IIS_WEBSOCKET = `websockets`;
export const IIS_WEBSOCKET_SERVER_VARIABLE = `IIS_WEBSOCK`;
export const APPSTATUS_STOPPED = 0;
export const APPSTATUS_RUNNING = 1;
export const APPSTATUS_NOTDEFINED = 2;
export const METADATA_MAX_NAME_LEN = 256;
export const METADATA_PERMISSION_READ = 1;
export const METADATA_PERMISSION_WRITE = 2;
export const METADATA_NO_ATTRIBUTES = 0;
export const METADATA_INHERIT = 1;
export const METADATA_PARTIAL_PATH = 2;
export const METADATA_SECURE = 4;
export const METADATA_REFERENCE = 8;
export const METADATA_VOLATILE = 16;
export const METADATA_ISINHERITED = 32;
export const METADATA_INSERT_PATH = 64;
export const METADATA_LOCAL_MACHINE_ONLY = 128;
export const METADATA_NON_SECURE_ONLY = 256;
export const METADATA_DONT_EXPAND = 512;
export const MD_BACKUP_OVERWRITE = 1;
export const MD_BACKUP_SAVE_FIRST = 2;
export const MD_BACKUP_FORCE_BACKUP = 4;
export const MD_BACKUP_NEXT_VERSION = 4294967295;
export const MD_BACKUP_HIGHEST_VERSION = 4294967294;
export const MD_BACKUP_MAX_VERSION = 9999;
export const MD_BACKUP_MAX_LEN = 100;
export const MD_DEFAULT_BACKUP_LOCATION = `MDBackUp`;
export const MD_HISTORY_LATEST = 1;
export const MD_EXPORT_INHERITED = 1;
export const MD_EXPORT_NODE_ONLY = 2;
export const MD_IMPORT_INHERITED = 1;
export const MD_IMPORT_NODE_ONLY = 2;
export const MD_IMPORT_MERGE = 4;
export const MD_INSERT_PATH_STRINGA = `<%INSERT_PATH%>`;
export const MD_INSERT_PATH_STRING = `<%INSERT_PATH%>`;
export const METADATA_MASTER_ROOT_HANDLE = 0;
export const MD_CHANGE_TYPE_DELETE_OBJECT = 1;
export const MD_CHANGE_TYPE_ADD_OBJECT = 2;
export const MD_CHANGE_TYPE_SET_DATA = 4;
export const MD_CHANGE_TYPE_DELETE_DATA = 8;
export const MD_CHANGE_TYPE_RENAME_OBJECT = 16;
export const MD_CHANGE_TYPE_RESTORE = 32;
export const MD_MAX_CHANGE_ENTRIES = 100;
export const MD_ERROR_NOT_INITIALIZED = `-2146646016`;
export const MD_ERROR_DATA_NOT_FOUND = `-2146646015`;
export const MD_ERROR_INVALID_VERSION = `-2146646014`;
export const MD_WARNING_PATH_NOT_FOUND = 837635;
export const MD_WARNING_DUP_NAME = 837636;
export const MD_WARNING_INVALID_DATA = 837637;
export const MD_ERROR_SECURE_CHANNEL_FAILURE = `-2146646010`;
export const MD_WARNING_PATH_NOT_INSERTED = 837639;
export const MD_ERROR_CANNOT_REMOVE_SECURE_ATTRIBUTE = `-2146646008`;
export const MD_WARNING_SAVE_FAILED = 837641;
export const MD_ERROR_IISAO_INVALID_SCHEMA = `-2146646000`;
export const MD_ERROR_READ_METABASE_FILE = `-2146645991`;
export const MD_ERROR_NO_SESSION_KEY = `-2146645987`;
export const HSE_VERSION_MAJOR = 8;
export const HSE_VERSION_MINOR = 0;
export const HSE_LOG_BUFFER_LEN = 80;
export const HSE_MAX_EXT_DLL_NAME_LEN = 256;
export const HSE_STATUS_SUCCESS = 1;
export const HSE_STATUS_SUCCESS_AND_KEEP_CONN = 2;
export const HSE_STATUS_PENDING = 3;
export const HSE_STATUS_ERROR = 4;
export const HSE_REQ_BASE = 0;
export const HSE_REQ_SEND_URL_REDIRECT_RESP = 1;
export const HSE_REQ_SEND_URL = 2;
export const HSE_REQ_SEND_RESPONSE_HEADER = 3;
export const HSE_REQ_DONE_WITH_SESSION = 4;
export const HSE_REQ_END_RESERVED = 1000;
export const HSE_REQ_MAP_URL_TO_PATH = 1001;
export const HSE_REQ_GET_SSPI_INFO = 1002;
export const HSE_APPEND_LOG_PARAMETER = 1003;
export const HSE_REQ_IO_COMPLETION = 1005;
export const HSE_REQ_TRANSMIT_FILE = 1006;
export const HSE_REQ_REFRESH_ISAPI_ACL = 1007;
export const HSE_REQ_IS_KEEP_CONN = 1008;
export const HSE_REQ_ASYNC_READ_CLIENT = 1010;
export const HSE_REQ_GET_IMPERSONATION_TOKEN = 1011;
export const HSE_REQ_MAP_URL_TO_PATH_EX = 1012;
export const HSE_REQ_ABORTIVE_CLOSE = 1014;
export const HSE_REQ_GET_CERT_INFO_EX = 1015;
export const HSE_REQ_SEND_RESPONSE_HEADER_EX = 1016;
export const HSE_REQ_CLOSE_CONNECTION = 1017;
export const HSE_REQ_IS_CONNECTED = 1018;
export const HSE_REQ_MAP_UNICODE_URL_TO_PATH = 1023;
export const HSE_REQ_MAP_UNICODE_URL_TO_PATH_EX = 1024;
export const HSE_REQ_EXEC_UNICODE_URL = 1025;
export const HSE_REQ_EXEC_URL = 1026;
export const HSE_REQ_GET_EXEC_URL_STATUS = 1027;
export const HSE_REQ_SEND_CUSTOM_ERROR = 1028;
export const HSE_REQ_IS_IN_PROCESS = 1030;
export const HSE_REQ_REPORT_UNHEALTHY = 1032;
export const HSE_REQ_NORMALIZE_URL = 1033;
export const HSE_REQ_VECTOR_SEND = 1037;
export const HSE_REQ_GET_ANONYMOUS_TOKEN = 1038;
export const HSE_REQ_GET_CACHE_INVALIDATION_CALLBACK = 1040;
export const HSE_REQ_GET_UNICODE_ANONYMOUS_TOKEN = 1041;
export const HSE_REQ_GET_TRACE_INFO = 1042;
export const HSE_REQ_SET_FLUSH_FLAG = 1043;
export const HSE_REQ_GET_TRACE_INFO_EX = 1044;
export const HSE_REQ_RAISE_TRACE_EVENT = 1045;
export const HSE_REQ_GET_CONFIG_OBJECT = 1046;
export const HSE_REQ_GET_WORKER_PROCESS_SETTINGS = 1047;
export const HSE_REQ_GET_PROTOCOL_MANAGER_CUSTOM_INTERFACE_CALLBACK = 1048;
export const HSE_REQ_CANCEL_IO = 1049;
export const HSE_REQ_GET_CHANNEL_BINDING_TOKEN = 1050;
export const HSE_TERM_ADVISORY_UNLOAD = 1;
export const HSE_TERM_MUST_UNLOAD = 2;
export const HSE_IO_SYNC = 1;
export const HSE_IO_ASYNC = 2;
export const HSE_IO_DISCONNECT_AFTER_SEND = 4;
export const HSE_IO_SEND_HEADERS = 8;
export const HSE_IO_NODELAY = 4096;
export const HSE_IO_FINAL_SEND = 16;
export const HSE_IO_CACHE_RESPONSE = 32;
export const HSE_IO_TRY_SKIP_CUSTOM_ERRORS = 64;
export const HSE_URL_FLAGS_READ = 1;
export const HSE_URL_FLAGS_WRITE = 2;
export const HSE_URL_FLAGS_EXECUTE = 4;
export const HSE_URL_FLAGS_SSL = 8;
export const HSE_URL_FLAGS_DONT_CACHE = 16;
export const HSE_URL_FLAGS_NEGO_CERT = 32;
export const HSE_URL_FLAGS_REQUIRE_CERT = 64;
export const HSE_URL_FLAGS_MAP_CERT = 128;
export const HSE_URL_FLAGS_SSL128 = 256;
export const HSE_URL_FLAGS_SCRIPT = 512;
export const HSE_URL_FLAGS_MASK = 1023;
export const HSE_EXEC_URL_NO_HEADERS = 2;
export const HSE_EXEC_URL_IGNORE_CURRENT_INTERCEPTOR = 4;
export const HSE_EXEC_URL_IGNORE_VALIDATION_AND_RANGE = 16;
export const HSE_EXEC_URL_DISABLE_CUSTOM_ERROR = 32;
export const HSE_EXEC_URL_SSI_CMD = 64;
export const HSE_EXEC_URL_HTTP_CACHE_ELIGIBLE = 128;
export const HSE_VECTOR_ELEMENT_TYPE_MEMORY_BUFFER = 0;
export const HSE_VECTOR_ELEMENT_TYPE_FILE_HANDLE = 1;
export const HSE_APP_FLAG_IN_PROCESS = 0;
export const HSE_APP_FLAG_ISOLATED_OOP = 1;
export const HSE_APP_FLAG_POOLED_OOP = 2;
export const SF_MAX_USERNAME = 257;
export const SF_MAX_PASSWORD = 257;
export const SF_MAX_AUTH_TYPE = 33;
export const SF_MAX_FILTER_DESC_LEN = 257;
export const SF_DENIED_LOGON = 1;
export const SF_DENIED_RESOURCE = 2;
export const SF_DENIED_FILTER = 4;
export const SF_DENIED_APPLICATION = 8;
export const SF_DENIED_BY_CONFIG = 65536;
export const SF_NOTIFY_SECURE_PORT = 1;
export const SF_NOTIFY_NONSECURE_PORT = 2;
export const SF_NOTIFY_READ_RAW_DATA = 32768;
export const SF_NOTIFY_PREPROC_HEADERS = 16384;
export const SF_NOTIFY_AUTHENTICATION = 8192;
export const SF_NOTIFY_URL_MAP = 4096;
export const SF_NOTIFY_ACCESS_DENIED = 2048;
export const SF_NOTIFY_SEND_RESPONSE = 64;
export const SF_NOTIFY_SEND_RAW_DATA = 1024;
export const SF_NOTIFY_LOG = 512;
export const SF_NOTIFY_END_OF_REQUEST = 128;
export const SF_NOTIFY_END_OF_NET_SESSION = 256;
export const SF_NOTIFY_AUTH_COMPLETE = 67108864;
export const SF_NOTIFY_ORDER_HIGH = 524288;
export const SF_NOTIFY_ORDER_MEDIUM = 262144;
export const SF_NOTIFY_ORDER_LOW = 131072;
export const SF_NOTIFY_ORDER_DEFAULT = 131072;
export const DISPID_HTTPREQUEST_BASE = 1;
export const DISPID_HTTPREQUEST_OPEN = 1;
export const DISPID_HTTPREQUEST_SETREQUESTHEADER = 2;
export const DISPID_HTTPREQUEST_GETRESPONSEHEADER = 3;
export const DISPID_HTTPREQUEST_GETALLRESPONSEHEADERS = 4;
export const DISPID_HTTPREQUEST_SEND = 5;
export const DISPID_HTTPREQUEST_OPTION = 6;
export const DISPID_HTTPREQUEST_STATUS = 7;
export const DISPID_HTTPREQUEST_STATUSTEXT = 8;
export const DISPID_HTTPREQUEST_RESPONSETEXT = 9;
export const DISPID_HTTPREQUEST_RESPONSEBODY = 10;
export const DISPID_HTTPREQUEST_RESPONSESTREAM = 11;
export const DISPID_HTTPREQUEST_ABORT = 12;
export const DISPID_HTTPREQUEST_SETPROXY = 13;
export const DISPID_HTTPREQUEST_SETCREDENTIALS = 14;
export const DISPID_HTTPREQUEST_WAITFORRESPONSE = 15;
export const DISPID_HTTPREQUEST_SETTIMEOUTS = 16;
export const DISPID_HTTPREQUEST_SETCLIENTCERTIFICATE = 17;
export const DISPID_HTTPREQUEST_SETAUTOLOGONPOLICY = 18;
export const HTTP_TRACE_EVENT_FLAG_STATIC_DESCRIPTIVE_FIELDS = 1;
export const HTTP_TRACE_LEVEL_START = 6;
export const HTTP_TRACE_LEVEL_END = 7;
export const WEB_CORE_DLL_NAME = `hwebcore.dll`;
export const WEB_CORE_ACTIVATE_DLL_ENTRY = `WebCoreActivate`;
export const WEB_CORE_SHUTDOWN_DLL_ENTRY = `WebCoreShutdown`;
export const WEB_CORE_SET_METADATA_DLL_ENTRY = `WebCoreSetMetadata`;
export const FTP_ACCESS_NONE = 0;
export const FTP_ACCESS_READ = 1;
export const FTP_ACCESS_WRITE = 2;
export const FTP_ACCESS_READ_WRITE = 3;
export const FTP_PROCESS_CONTINUE = 0;
export const FTP_PROCESS_CLOSE_SESSION = 1;
export const FTP_PROCESS_TERMINATE_SESSION = 2;
export const FTP_PROCESS_REJECT_COMMAND = 3;
export const ALL_METADATA = 0;
export const DWORD_METADATA = 1;
export const STRING_METADATA = 2;
export const BINARY_METADATA = 3;
export const EXPANDSZ_METADATA = 4;
export const MULTISZ_METADATA = 5;
export const INVALID_END_METADATA = 6;
export const SF_REQ_SEND_RESPONSE_HEADER = 0;
export const SF_REQ_ADD_HEADERS_ON_DENIAL = 1;
export const SF_REQ_SET_NEXT_READ_SIZE = 2;
export const SF_REQ_SET_PROXY_INFO = 3;
export const SF_REQ_GET_CONNID = 4;
export const SF_REQ_SET_CERTIFICATE_INFO = 5;
export const SF_REQ_GET_PROPERTY = 6;
export const SF_REQ_NORMALIZE_URL = 7;
export const SF_REQ_DISABLE_NOTIFICATIONS = 8;
export const SF_PROPERTY_SSL_CTXT = 0;
export const SF_PROPERTY_INSTANCE_NUM_ID = 1;
export const SF_STATUS_REQ_FINISHED = 134217728;
export const SF_STATUS_REQ_FINISHED_KEEP_CONN = 134217729;
export const SF_STATUS_REQ_NEXT_NOTIFICATION = 134217730;
export const SF_STATUS_REQ_HANDLED_NOTIFICATION = 134217731;
export const SF_STATUS_REQ_ERROR = 134217732;
export const SF_STATUS_REQ_READ_NEXT = 134217733;
export const HTTP_TRACE_TYPE_BYTE = 17;
export const HTTP_TRACE_TYPE_USHORT = 18;
export const HTTP_TRACE_TYPE_ULONG = 19;
export const HTTP_TRACE_TYPE_ULONGLONG = 21;
export const HTTP_TRACE_TYPE_CHAR = 16;
export const HTTP_TRACE_TYPE_SHORT = 2;
export const HTTP_TRACE_TYPE_LONG = 3;
export const HTTP_TRACE_TYPE_LONGLONG = 20;
export const HTTP_TRACE_TYPE_LPCWSTR = 31;
export const HTTP_TRACE_TYPE_LPCSTR = 30;
export const HTTP_TRACE_TYPE_LPCGUID = 72;
export const HTTP_TRACE_TYPE_BOOL = 11;

// Structs

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Iis.CONFIGURATION_ENTRY (size: 16)
 */
export interface CONFIGURATION_ENTRY {
  /** Windows.Win32.Foundation.BSTR */
  bstrKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  bstrValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONFIGURATION_ENTRY = 16;

export function allocCONFIGURATION_ENTRY(data?: Partial<CONFIGURATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIGURATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bstrKey !== undefined) view.setBigUint64(0, data.bstrKey === null ? 0n : BigInt(util.toPointer(data.bstrKey)), true);
  // 0x08: pointer
  if (data?.bstrValue !== undefined) view.setBigUint64(8, data.bstrValue === null ? 0n : BigInt(util.toPointer(data.bstrValue)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HRESULT = number;

/**
 * Windows.Win32.System.Iis.LOGGING_PARAMETERS (size: 136)
 */
export interface LOGGING_PARAMETERS {
  /** Windows.Win32.Foundation.PWSTR */
  pszSessionId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszRemoteIpAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwRemoteIpPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocalIpAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwLocalIpPort: number;
  /** u64 */
  BytesSent: Deno.PointerValue;
  /** u64 */
  BytesReceived: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCommand: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCommandParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszFullPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwElapsedMilliseconds: number;
  /** u32 */
  FtpStatus: number;
  /** u32 */
  FtpSubStatus: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInformation: string | null | Uint8Array | Uint16Array;
}

export const sizeofLOGGING_PARAMETERS = 136;

export function allocLOGGING_PARAMETERS(data?: Partial<LOGGING_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGGING_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSessionId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszSessionId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszSiteName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSiteName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszHostName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszRemoteIpAddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRemoteIpAddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwRemoteIpPort !== undefined) view.setUint32(40, Number(data.dwRemoteIpPort), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pszLocalIpAddress !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszLocalIpAddress);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.dwLocalIpPort !== undefined) view.setUint32(56, Number(data.dwLocalIpPort), true);
  // 0x3c: pad4
  // 0x40: u64
  if (data?.BytesSent !== undefined) view.setBigUint64(64, BigInt(data.BytesSent), true);
  // 0x48: u64
  if (data?.BytesReceived !== undefined) view.setBigUint64(72, BigInt(data.BytesReceived), true);
  // 0x50: buffer
  if (data?.pszCommand !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszCommand);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.pszCommandParameters !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszCommandParameters);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.pszFullPath !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.pszFullPath);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: u32
  if (data?.dwElapsedMilliseconds !== undefined) view.setUint32(104, Number(data.dwElapsedMilliseconds), true);
  // 0x6c: u32
  if (data?.FtpStatus !== undefined) view.setUint32(108, Number(data.FtpStatus), true);
  // 0x70: u32
  if (data?.FtpSubStatus !== undefined) view.setUint32(112, Number(data.FtpSubStatus), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.hrStatus !== undefined) view.setBigUint64(120, data.hrStatus === null ? 0n : BigInt(util.toPointer(data.hrStatus)), true);
  // 0x80: buffer
  if (data?.pszInformation !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.pszInformation);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.PRE_PROCESS_PARAMETERS (size: 104)
 */
export interface PRE_PROCESS_PARAMETERS {
  /** Windows.Win32.Foundation.PWSTR */
  pszSessionId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszRemoteIpAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwRemoteIpPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocalIpAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwLocalIpPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszCommand: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCommandParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  SessionStartTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  BytesSentPerSession: Deno.PointerValue;
  /** u64 */
  BytesReceivedPerSession: Deno.PointerValue;
}

export const sizeofPRE_PROCESS_PARAMETERS = 104;

export function allocPRE_PROCESS_PARAMETERS(data?: Partial<PRE_PROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRE_PROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSessionId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszSessionId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszSiteName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSiteName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszHostName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszRemoteIpAddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRemoteIpAddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwRemoteIpPort !== undefined) view.setUint32(40, Number(data.dwRemoteIpPort), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pszLocalIpAddress !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszLocalIpAddress);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.dwLocalIpPort !== undefined) view.setUint32(56, Number(data.dwLocalIpPort), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.pszCommand !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszCommand);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pszCommandParameters !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszCommandParameters);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: pointer
  if (data?.SessionStartTime !== undefined) view.setBigUint64(80, data.SessionStartTime === null ? 0n : BigInt(util.toPointer(data.SessionStartTime)), true);
  // 0x58: u64
  if (data?.BytesSentPerSession !== undefined) view.setBigUint64(88, BigInt(data.BytesSentPerSession), true);
  // 0x60: u64
  if (data?.BytesReceivedPerSession !== undefined) view.setBigUint64(96, BigInt(data.BytesReceivedPerSession), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.POST_PROCESS_PARAMETERS (size: 152)
 */
export interface POST_PROCESS_PARAMETERS {
  /** Windows.Win32.Foundation.PWSTR */
  pszSessionId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszRemoteIpAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwRemoteIpPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocalIpAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwLocalIpPort: number;
  /** u64 */
  BytesSent: Deno.PointerValue;
  /** u64 */
  BytesReceived: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCommand: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCommandParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszFullPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPhysicalPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  FtpStatus: number;
  /** u32 */
  FtpSubStatus: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  SessionStartTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  BytesSentPerSession: Deno.PointerValue;
  /** u64 */
  BytesReceivedPerSession: Deno.PointerValue;
}

export const sizeofPOST_PROCESS_PARAMETERS = 152;

export function allocPOST_PROCESS_PARAMETERS(data?: Partial<POST_PROCESS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPOST_PROCESS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSessionId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszSessionId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszSiteName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSiteName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszHostName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszRemoteIpAddress !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRemoteIpAddress);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwRemoteIpPort !== undefined) view.setUint32(40, Number(data.dwRemoteIpPort), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pszLocalIpAddress !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszLocalIpAddress);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.dwLocalIpPort !== undefined) view.setUint32(56, Number(data.dwLocalIpPort), true);
  // 0x3c: pad4
  // 0x40: u64
  if (data?.BytesSent !== undefined) view.setBigUint64(64, BigInt(data.BytesSent), true);
  // 0x48: u64
  if (data?.BytesReceived !== undefined) view.setBigUint64(72, BigInt(data.BytesReceived), true);
  // 0x50: buffer
  if (data?.pszCommand !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszCommand);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.pszCommandParameters !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszCommandParameters);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.pszFullPath !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.pszFullPath);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.pszPhysicalPath !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.pszPhysicalPath);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u32
  if (data?.FtpStatus !== undefined) view.setUint32(112, Number(data.FtpStatus), true);
  // 0x74: u32
  if (data?.FtpSubStatus !== undefined) view.setUint32(116, Number(data.FtpSubStatus), true);
  // 0x78: pointer
  if (data?.hrStatus !== undefined) view.setBigUint64(120, data.hrStatus === null ? 0n : BigInt(util.toPointer(data.hrStatus)), true);
  // 0x80: pointer
  if (data?.SessionStartTime !== undefined) view.setBigUint64(128, data.SessionStartTime === null ? 0n : BigInt(util.toPointer(data.SessionStartTime)), true);
  // 0x88: u64
  if (data?.BytesSentPerSession !== undefined) view.setBigUint64(136, BigInt(data.BytesSentPerSession), true);
  // 0x90: u64
  if (data?.BytesReceivedPerSession !== undefined) view.setBigUint64(144, BigInt(data.BytesReceivedPerSession), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.METADATA_RECORD (size: 40)
 */
export interface METADATA_RECORD {
  /** u32 */
  dwMDIdentifier: number;
  /** u32 */
  dwMDAttributes: number;
  /** u32 */
  dwMDUserType: number;
  /** u32 */
  dwMDDataType: number;
  /** u32 */
  dwMDDataLen: number;
  /** ptr */
  pbMDData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwMDDataTag: number;
}

export const sizeofMETADATA_RECORD = 40;

export function allocMETADATA_RECORD(data?: Partial<METADATA_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMETADATA_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMDIdentifier !== undefined) view.setUint32(0, Number(data.dwMDIdentifier), true);
  // 0x04: u32
  if (data?.dwMDAttributes !== undefined) view.setUint32(4, Number(data.dwMDAttributes), true);
  // 0x08: u32
  if (data?.dwMDUserType !== undefined) view.setUint32(8, Number(data.dwMDUserType), true);
  // 0x0c: u32
  if (data?.dwMDDataType !== undefined) view.setUint32(12, Number(data.dwMDDataType), true);
  // 0x10: u32
  if (data?.dwMDDataLen !== undefined) view.setUint32(16, Number(data.dwMDDataLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbMDData !== undefined) view.setBigUint64(24, data.pbMDData === null ? 0n : BigInt(util.toPointer(data.pbMDData)), true);
  // 0x20: u32
  if (data?.dwMDDataTag !== undefined) view.setUint32(32, Number(data.dwMDDataTag), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.METADATA_GETALL_RECORD (size: 32)
 */
export interface METADATA_GETALL_RECORD {
  /** u32 */
  dwMDIdentifier: number;
  /** u32 */
  dwMDAttributes: number;
  /** u32 */
  dwMDUserType: number;
  /** u32 */
  dwMDDataType: number;
  /** u32 */
  dwMDDataLen: number;
  /** u32 */
  dwMDDataOffset: number;
  /** u32 */
  dwMDDataTag: number;
}

export const sizeofMETADATA_GETALL_RECORD = 32;

export function allocMETADATA_GETALL_RECORD(data?: Partial<METADATA_GETALL_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMETADATA_GETALL_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMDIdentifier !== undefined) view.setUint32(0, Number(data.dwMDIdentifier), true);
  // 0x04: u32
  if (data?.dwMDAttributes !== undefined) view.setUint32(4, Number(data.dwMDAttributes), true);
  // 0x08: u32
  if (data?.dwMDUserType !== undefined) view.setUint32(8, Number(data.dwMDUserType), true);
  // 0x0c: u32
  if (data?.dwMDDataType !== undefined) view.setUint32(12, Number(data.dwMDDataType), true);
  // 0x10: u32
  if (data?.dwMDDataLen !== undefined) view.setUint32(16, Number(data.dwMDDataLen), true);
  // 0x14: u32
  if (data?.dwMDDataOffset !== undefined) view.setUint32(20, Number(data.dwMDDataOffset), true);
  // 0x18: u32
  if (data?.dwMDDataTag !== undefined) view.setUint32(24, Number(data.dwMDDataTag), true);
  // 0x1c: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.METADATA_GETALL_INTERNAL_RECORD (size: 40)
 */
export interface METADATA_GETALL_INTERNAL_RECORD {
  /** u32 */
  dwMDIdentifier: number;
  /** u32 */
  dwMDAttributes: number;
  /** u32 */
  dwMDUserType: number;
  /** u32 */
  dwMDDataType: number;
  /** u32 */
  dwMDDataLen: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMDDataTag: number;
}

export const sizeofMETADATA_GETALL_INTERNAL_RECORD = 40;

export function allocMETADATA_GETALL_INTERNAL_RECORD(data?: Partial<METADATA_GETALL_INTERNAL_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofMETADATA_GETALL_INTERNAL_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMDIdentifier !== undefined) view.setUint32(0, Number(data.dwMDIdentifier), true);
  // 0x04: u32
  if (data?.dwMDAttributes !== undefined) view.setUint32(4, Number(data.dwMDAttributes), true);
  // 0x08: u32
  if (data?.dwMDUserType !== undefined) view.setUint32(8, Number(data.dwMDUserType), true);
  // 0x0c: u32
  if (data?.dwMDDataType !== undefined) view.setUint32(12, Number(data.dwMDDataType), true);
  // 0x10: u32
  if (data?.dwMDDataLen !== undefined) view.setUint32(16, Number(data.dwMDDataLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.dwMDDataTag !== undefined) view.setUint32(32, Number(data.dwMDDataTag), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.METADATA_HANDLE_INFO (size: 8)
 */
export interface METADATA_HANDLE_INFO {
  /** u32 */
  dwMDPermissions: number;
  /** u32 */
  dwMDSystemChangeNumber: number;
}

export const sizeofMETADATA_HANDLE_INFO = 8;

export function allocMETADATA_HANDLE_INFO(data?: Partial<METADATA_HANDLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMETADATA_HANDLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMDPermissions !== undefined) view.setUint32(0, Number(data.dwMDPermissions), true);
  // 0x04: u32
  if (data?.dwMDSystemChangeNumber !== undefined) view.setUint32(4, Number(data.dwMDSystemChangeNumber), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.MD_CHANGE_OBJECT_W (size: 24)
 */
export interface MD_CHANGE_OBJECT_W {
  /** Windows.Win32.Foundation.PWSTR */
  pszMDPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMDChangeType: number;
  /** u32 */
  dwMDNumDataIDs: number;
  /** ptr */
  pdwMDDataIDs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMD_CHANGE_OBJECT_W = 24;

export function allocMD_CHANGE_OBJECT_W(data?: Partial<MD_CHANGE_OBJECT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofMD_CHANGE_OBJECT_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszMDPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszMDPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwMDChangeType !== undefined) view.setUint32(8, Number(data.dwMDChangeType), true);
  // 0x0c: u32
  if (data?.dwMDNumDataIDs !== undefined) view.setUint32(12, Number(data.dwMDNumDataIDs), true);
  // 0x10: pointer
  if (data?.pdwMDDataIDs !== undefined) view.setBigUint64(16, data.pdwMDDataIDs === null ? 0n : BigInt(util.toPointer(data.pdwMDDataIDs)), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_VERSION_INFO (size: 16)
 */
export interface HSE_VERSION_INFO {
  /** u32 */
  dwExtensionVersion: number;
  /** array */
  lpszExtensionDesc: Deno.PointerValue | null;
}

export const sizeofHSE_VERSION_INFO = 16;

export function allocHSE_VERSION_INFO(data?: Partial<HSE_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExtensionVersion !== undefined) view.setUint32(0, Number(data.dwExtensionVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpszExtensionDesc !== undefined) view.setBigUint64(8, data.lpszExtensionDesc === null ? 0n : BigInt(util.toPointer(data.lpszExtensionDesc)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Iis.EXTENSION_CONTROL_BLOCK (size: 120)
 */
export interface EXTENSION_CONTROL_BLOCK {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVersion: number;
  /** ptr */
  ConnID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwHttpStatusCode: number;
  /** array */
  lpszLogData: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszMethod: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszQueryString: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszPathInfo: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszPathTranslated: string | null | Uint8Array;
  /** u32 */
  cbTotalBytes: number;
  /** u32 */
  cbAvailable: number;
  /** ptr */
  lpbData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszContentType: string | null | Uint8Array;
  /** isize */
  GetServerVariable: Deno.PointerValue;
  /** isize */
  WriteClient: Deno.PointerValue;
  /** isize */
  ReadClient: Deno.PointerValue;
  /** isize */
  ServerSupportFunction: Deno.PointerValue;
}

export const sizeofEXTENSION_CONTROL_BLOCK = 120;

export function allocEXTENSION_CONTROL_BLOCK(data?: Partial<EXTENSION_CONTROL_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTENSION_CONTROL_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: pointer
  if (data?.ConnID !== undefined) view.setBigUint64(8, data.ConnID === null ? 0n : BigInt(util.toPointer(data.ConnID)), true);
  // 0x10: u32
  if (data?.dwHttpStatusCode !== undefined) view.setUint32(16, Number(data.dwHttpStatusCode), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpszLogData !== undefined) view.setBigUint64(24, data.lpszLogData === null ? 0n : BigInt(util.toPointer(data.lpszLogData)), true);
  // 0x20: buffer
  if (data?.lpszMethod !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszMethod);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpszQueryString !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpszQueryString);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.lpszPathInfo !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszPathInfo);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.lpszPathTranslated !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.lpszPathTranslated);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cbTotalBytes !== undefined) view.setUint32(64, Number(data.cbTotalBytes), true);
  // 0x44: u32
  if (data?.cbAvailable !== undefined) view.setUint32(68, Number(data.cbAvailable), true);
  // 0x48: pointer
  if (data?.lpbData !== undefined) view.setBigUint64(72, data.lpbData === null ? 0n : BigInt(util.toPointer(data.lpbData)), true);
  // 0x50: buffer
  if (data?.lpszContentType !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpszContentType);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: isize
  if (data?.GetServerVariable !== undefined) view.setBigInt64(88, BigInt(data.GetServerVariable), true);
  // 0x60: isize
  if (data?.WriteClient !== undefined) view.setBigInt64(96, BigInt(data.WriteClient), true);
  // 0x68: isize
  if (data?.ReadClient !== undefined) view.setBigInt64(104, BigInt(data.ReadClient), true);
  // 0x70: isize
  if (data?.ServerSupportFunction !== undefined) view.setBigInt64(112, BigInt(data.ServerSupportFunction), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_URL_MAPEX_INFO (size: 32)
 */
export interface HSE_URL_MAPEX_INFO {
  /** array */
  lpszPath: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cchMatchingPath: number;
  /** u32 */
  cchMatchingURL: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofHSE_URL_MAPEX_INFO = 32;

export function allocHSE_URL_MAPEX_INFO(data?: Partial<HSE_URL_MAPEX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_URL_MAPEX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpszPath !== undefined) view.setBigUint64(0, data.lpszPath === null ? 0n : BigInt(util.toPointer(data.lpszPath)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cchMatchingPath !== undefined) view.setUint32(12, Number(data.cchMatchingPath), true);
  // 0x10: u32
  if (data?.cchMatchingURL !== undefined) view.setUint32(16, Number(data.cchMatchingURL), true);
  // 0x14: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(20, Number(data.dwReserved1), true);
  // 0x18: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(24, Number(data.dwReserved2), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_UNICODE_URL_MAPEX_INFO (size: 24)
 */
export interface HSE_UNICODE_URL_MAPEX_INFO {
  /** array */
  lpszPath: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cchMatchingPath: number;
  /** u32 */
  cchMatchingURL: number;
}

export const sizeofHSE_UNICODE_URL_MAPEX_INFO = 24;

export function allocHSE_UNICODE_URL_MAPEX_INFO(data?: Partial<HSE_UNICODE_URL_MAPEX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_UNICODE_URL_MAPEX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpszPath !== undefined) view.setBigUint64(0, data.lpszPath === null ? 0n : BigInt(util.toPointer(data.lpszPath)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cchMatchingPath !== undefined) view.setUint32(12, Number(data.cchMatchingPath), true);
  // 0x10: u32
  if (data?.cchMatchingURL !== undefined) view.setUint32(16, Number(data.cchMatchingURL), true);
  // 0x14: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.System.Iis.HSE_TF_INFO (size: 72)
 */
export interface HSE_TF_INFO {
  /** Windows.Win32.System.Iis.PFN_HSE_IO_COMPLETION */
  pfnHseIO: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszStatusCode: string | null | Uint8Array;
  /** u32 */
  BytesToWrite: number;
  /** u32 */
  Offset: number;
  /** ptr */
  pHead: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  HeadLength: number;
  /** ptr */
  pTail: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TailLength: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofHSE_TF_INFO = 72;

export function allocHSE_TF_INFO(data?: Partial<HSE_TF_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_TF_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnHseIO !== undefined) view.setBigUint64(0, data.pfnHseIO === null ? 0n : BigInt(util.toPointer(data.pfnHseIO)), true);
  // 0x08: pointer
  if (data?.pContext !== undefined) view.setBigUint64(8, data.pContext === null ? 0n : BigInt(util.toPointer(data.pContext)), true);
  // 0x10: pointer
  if (data?.hFile !== undefined) view.setBigUint64(16, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x18: buffer
  if (data?.pszStatusCode !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszStatusCode);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.BytesToWrite !== undefined) view.setUint32(32, Number(data.BytesToWrite), true);
  // 0x24: u32
  if (data?.Offset !== undefined) view.setUint32(36, Number(data.Offset), true);
  // 0x28: pointer
  if (data?.pHead !== undefined) view.setBigUint64(40, data.pHead === null ? 0n : BigInt(util.toPointer(data.pHead)), true);
  // 0x30: u32
  if (data?.HeadLength !== undefined) view.setUint32(48, Number(data.HeadLength), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pTail !== undefined) view.setBigUint64(56, data.pTail === null ? 0n : BigInt(util.toPointer(data.pTail)), true);
  // 0x40: u32
  if (data?.TailLength !== undefined) view.setUint32(64, Number(data.TailLength), true);
  // 0x44: u32
  if (data?.dwFlags !== undefined) view.setUint32(68, Number(data.dwFlags), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.Iis.HSE_SEND_HEADER_EX_INFO (size: 32)
 */
export interface HSE_SEND_HEADER_EX_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszStatus: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeader: string | null | Uint8Array;
  /** u32 */
  cchStatus: number;
  /** u32 */
  cchHeader: number;
  /** Windows.Win32.Foundation.BOOL */
  fKeepConn: boolean;
}

export const sizeofHSE_SEND_HEADER_EX_INFO = 32;

export function allocHSE_SEND_HEADER_EX_INFO(data?: Partial<HSE_SEND_HEADER_EX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_SEND_HEADER_EX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszStatus !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszStatus);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszHeader !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszHeader);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cchStatus !== undefined) view.setUint32(16, Number(data.cchStatus), true);
  // 0x14: u32
  if (data?.cchHeader !== undefined) view.setUint32(20, Number(data.cchHeader), true);
  // 0x18: i32
  if (data?.fKeepConn !== undefined) view.setInt32(24, Number(data.fKeepConn), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_EXEC_URL_USER_INFO (size: 24)
 */
export interface HSE_EXEC_URL_USER_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hImpersonationToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszCustomUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszCustomAuthType: string | null | Uint8Array;
}

export const sizeofHSE_EXEC_URL_USER_INFO = 24;

export function allocHSE_EXEC_URL_USER_INFO(data?: Partial<HSE_EXEC_URL_USER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_EXEC_URL_USER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hImpersonationToken !== undefined) view.setBigUint64(0, data.hImpersonationToken === null ? 0n : BigInt(util.toPointer(data.hImpersonationToken)), true);
  // 0x08: buffer
  if (data?.pszCustomUserName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszCustomUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszCustomAuthType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszCustomAuthType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_EXEC_URL_ENTITY_INFO (size: 16)
 */
export interface HSE_EXEC_URL_ENTITY_INFO {
  /** u32 */
  cbAvailable: number;
  /** ptr */
  lpbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHSE_EXEC_URL_ENTITY_INFO = 16;

export function allocHSE_EXEC_URL_ENTITY_INFO(data?: Partial<HSE_EXEC_URL_ENTITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_EXEC_URL_ENTITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbAvailable !== undefined) view.setUint32(0, Number(data.cbAvailable), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpbData !== undefined) view.setBigUint64(8, data.lpbData === null ? 0n : BigInt(util.toPointer(data.lpbData)), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_EXEC_URL_STATUS (size: 8)
 */
export interface HSE_EXEC_URL_STATUS {
  /** u16 */
  uHttpStatusCode: number;
  /** u16 */
  uHttpSubStatus: number;
  /** u32 */
  dwWin32Error: number;
}

export const sizeofHSE_EXEC_URL_STATUS = 8;

export function allocHSE_EXEC_URL_STATUS(data?: Partial<HSE_EXEC_URL_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_EXEC_URL_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.uHttpStatusCode !== undefined) view.setUint16(0, Number(data.uHttpStatusCode), true);
  // 0x02: u16
  if (data?.uHttpSubStatus !== undefined) view.setUint16(2, Number(data.uHttpSubStatus), true);
  // 0x04: u32
  if (data?.dwWin32Error !== undefined) view.setUint32(4, Number(data.dwWin32Error), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_EXEC_URL_INFO (size: 48)
 */
export interface HSE_EXEC_URL_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszUrl: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszMethod: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszChildHeaders: string | null | Uint8Array;
  /** ptr */
  pUserInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pEntity: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwExecUrlFlags: number;
}

export const sizeofHSE_EXEC_URL_INFO = 48;

export function allocHSE_EXEC_URL_INFO(data?: Partial<HSE_EXEC_URL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_EXEC_URL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszUrl !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszUrl);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszMethod !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszMethod);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszChildHeaders !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszChildHeaders);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pUserInfo !== undefined) view.setBigUint64(24, data.pUserInfo === null ? 0n : BigInt(util.toPointer(data.pUserInfo)), true);
  // 0x20: pointer
  if (data?.pEntity !== undefined) view.setBigUint64(32, data.pEntity === null ? 0n : BigInt(util.toPointer(data.pEntity)), true);
  // 0x28: u32
  if (data?.dwExecUrlFlags !== undefined) view.setUint32(40, Number(data.dwExecUrlFlags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_EXEC_UNICODE_URL_USER_INFO (size: 24)
 */
export interface HSE_EXEC_UNICODE_URL_USER_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hImpersonationToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszCustomUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszCustomAuthType: string | null | Uint8Array;
}

export const sizeofHSE_EXEC_UNICODE_URL_USER_INFO = 24;

export function allocHSE_EXEC_UNICODE_URL_USER_INFO(data?: Partial<HSE_EXEC_UNICODE_URL_USER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_EXEC_UNICODE_URL_USER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hImpersonationToken !== undefined) view.setBigUint64(0, data.hImpersonationToken === null ? 0n : BigInt(util.toPointer(data.hImpersonationToken)), true);
  // 0x08: buffer
  if (data?.pszCustomUserName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszCustomUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszCustomAuthType !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszCustomAuthType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_EXEC_UNICODE_URL_INFO (size: 48)
 */
export interface HSE_EXEC_UNICODE_URL_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszMethod: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszChildHeaders: string | null | Uint8Array;
  /** ptr */
  pUserInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pEntity: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwExecUrlFlags: number;
}

export const sizeofHSE_EXEC_UNICODE_URL_INFO = 48;

export function allocHSE_EXEC_UNICODE_URL_INFO(data?: Partial<HSE_EXEC_UNICODE_URL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_EXEC_UNICODE_URL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszUrl !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszUrl);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszMethod !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszMethod);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszChildHeaders !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszChildHeaders);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pUserInfo !== undefined) view.setBigUint64(24, data.pUserInfo === null ? 0n : BigInt(util.toPointer(data.pUserInfo)), true);
  // 0x20: pointer
  if (data?.pEntity !== undefined) view.setBigUint64(32, data.pEntity === null ? 0n : BigInt(util.toPointer(data.pEntity)), true);
  // 0x28: u32
  if (data?.dwExecUrlFlags !== undefined) view.setUint32(40, Number(data.dwExecUrlFlags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_CUSTOM_ERROR_INFO (size: 16)
 */
export interface HSE_CUSTOM_ERROR_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszStatus: string | null | Uint8Array;
  /** u16 */
  uHttpSubError: number;
  /** Windows.Win32.Foundation.BOOL */
  fAsync: boolean;
}

export const sizeofHSE_CUSTOM_ERROR_INFO = 16;

export function allocHSE_CUSTOM_ERROR_INFO(data?: Partial<HSE_CUSTOM_ERROR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_CUSTOM_ERROR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszStatus !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszStatus);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.uHttpSubError !== undefined) view.setUint16(8, Number(data.uHttpSubError), true);
  // 0x0a: i32
  if (data?.fAsync !== undefined) view.setInt32(10, Number(data.fAsync), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_VECTOR_ELEMENT (size: 32)
 */
export interface HSE_VECTOR_ELEMENT {
  /** u32 */
  ElementType: number;
  /** ptr */
  pvContext: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  cbOffset: Deno.PointerValue;
  /** u64 */
  cbSize: Deno.PointerValue;
}

export const sizeofHSE_VECTOR_ELEMENT = 32;

export function allocHSE_VECTOR_ELEMENT(data?: Partial<HSE_VECTOR_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_VECTOR_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ElementType !== undefined) view.setUint32(0, Number(data.ElementType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvContext !== undefined) view.setBigUint64(8, data.pvContext === null ? 0n : BigInt(util.toPointer(data.pvContext)), true);
  // 0x10: u64
  if (data?.cbOffset !== undefined) view.setBigUint64(16, BigInt(data.cbOffset), true);
  // 0x18: u64
  if (data?.cbSize !== undefined) view.setBigUint64(24, BigInt(data.cbSize), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_RESPONSE_VECTOR (size: 40)
 */
export interface HSE_RESPONSE_VECTOR {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  pszStatus: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaders: string | null | Uint8Array;
  /** u32 */
  nElementCount: number;
  /** ptr */
  lpElementArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHSE_RESPONSE_VECTOR = 40;

export function allocHSE_RESPONSE_VECTOR(data?: Partial<HSE_RESPONSE_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_RESPONSE_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszStatus !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszStatus);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszHeaders !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszHeaders);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.nElementCount !== undefined) view.setUint32(24, Number(data.nElementCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpElementArray !== undefined) view.setBigUint64(32, data.lpElementArray === null ? 0n : BigInt(util.toPointer(data.lpElementArray)), true);
  return buf;
}

export type HCERTSTORE = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Cryptography.CERT_CONTEXT (size: 40)
 */
export interface CERT_CONTEXT {
  /** u32 */
  dwCertEncodingType: number;
  /** ptr */
  pbCertEncoded: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCertEncoded: number;
  /** ptr */
  pCertInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_CONTEXT = 40;

export function allocCERT_CONTEXT(data?: Partial<CERT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCertEncodingType !== undefined) view.setUint32(0, Number(data.dwCertEncodingType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCertEncoded !== undefined) view.setBigUint64(8, data.pbCertEncoded === null ? 0n : BigInt(util.toPointer(data.pbCertEncoded)), true);
  // 0x10: u32
  if (data?.cbCertEncoded !== undefined) view.setUint32(16, Number(data.cbCertEncoded), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCertInfo !== undefined) view.setBigUint64(24, data.pCertInfo === null ? 0n : BigInt(util.toPointer(data.pCertInfo)), true);
  // 0x20: pointer
  if (data?.hCertStore !== undefined) view.setBigUint64(32, data.hCertStore === null ? 0n : BigInt(util.toPointer(data.hCertStore)), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.CERT_CONTEXT_EX (size: 16)
 */
export interface CERT_CONTEXT_EX {
  /** Windows.Win32.Security.Cryptography.CERT_CONTEXT */
  CertContext: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbAllocated: number;
  /** u32 */
  dwCertificateFlags: number;
}

export const sizeofCERT_CONTEXT_EX = 16;

export function allocCERT_CONTEXT_EX(data?: Partial<CERT_CONTEXT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CONTEXT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CertContext !== undefined) view.setBigUint64(0, data.CertContext === null ? 0n : BigInt(util.toPointer(data.CertContext)), true);
  // 0x08: u32
  if (data?.cbAllocated !== undefined) view.setUint32(8, Number(data.cbAllocated), true);
  // 0x0c: u32
  if (data?.dwCertificateFlags !== undefined) view.setUint32(12, Number(data.dwCertificateFlags), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HSE_TRACE_INFO (size: 24)
 */
export interface HSE_TRACE_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fTraceRequest: boolean;
  /** array */
  TraceContextId: Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofHSE_TRACE_INFO = 24;

export function allocHSE_TRACE_INFO(data?: Partial<HSE_TRACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHSE_TRACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fTraceRequest !== undefined) view.setInt32(0, Number(data.fTraceRequest), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TraceContextId !== undefined) view.setBigUint64(8, data.TraceContextId === null ? 0n : BigInt(util.toPointer(data.TraceContextId)), true);
  // 0x10: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(16, Number(data.dwReserved1), true);
  // 0x14: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(20, Number(data.dwReserved2), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_CONTEXT (size: 72)
 */
export interface HTTP_FILTER_CONTEXT {
  /** u32 */
  cbSize: number;
  /** u32 */
  Revision: number;
  /** ptr */
  ServerContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulReserved: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsSecurePort: boolean;
  /** ptr */
  pFilterContext: Deno.PointerValue | Uint8Array | null;
  /** isize */
  GetServerVariable: Deno.PointerValue;
  /** isize */
  AddResponseHeaders: Deno.PointerValue;
  /** isize */
  WriteClient: Deno.PointerValue;
  /** isize */
  AllocMem: Deno.PointerValue;
  /** isize */
  ServerSupportFunction: Deno.PointerValue;
}

export const sizeofHTTP_FILTER_CONTEXT = 72;

export function allocHTTP_FILTER_CONTEXT(data?: Partial<HTTP_FILTER_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Revision !== undefined) view.setUint32(4, Number(data.Revision), true);
  // 0x08: pointer
  if (data?.ServerContext !== undefined) view.setBigUint64(8, data.ServerContext === null ? 0n : BigInt(util.toPointer(data.ServerContext)), true);
  // 0x10: u32
  if (data?.ulReserved !== undefined) view.setUint32(16, Number(data.ulReserved), true);
  // 0x14: i32
  if (data?.fIsSecurePort !== undefined) view.setInt32(20, Number(data.fIsSecurePort), true);
  // 0x18: pointer
  if (data?.pFilterContext !== undefined) view.setBigUint64(24, data.pFilterContext === null ? 0n : BigInt(util.toPointer(data.pFilterContext)), true);
  // 0x20: isize
  if (data?.GetServerVariable !== undefined) view.setBigInt64(32, BigInt(data.GetServerVariable), true);
  // 0x28: isize
  if (data?.AddResponseHeaders !== undefined) view.setBigInt64(40, BigInt(data.AddResponseHeaders), true);
  // 0x30: isize
  if (data?.WriteClient !== undefined) view.setBigInt64(48, BigInt(data.WriteClient), true);
  // 0x38: isize
  if (data?.AllocMem !== undefined) view.setBigInt64(56, BigInt(data.AllocMem), true);
  // 0x40: isize
  if (data?.ServerSupportFunction !== undefined) view.setBigInt64(64, BigInt(data.ServerSupportFunction), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_RAW_DATA (size: 24)
 */
export interface HTTP_FILTER_RAW_DATA {
  /** ptr */
  pvInData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbInData: number;
  /** u32 */
  cbInBuffer: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofHTTP_FILTER_RAW_DATA = 24;

export function allocHTTP_FILTER_RAW_DATA(data?: Partial<HTTP_FILTER_RAW_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_RAW_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvInData !== undefined) view.setBigUint64(0, data.pvInData === null ? 0n : BigInt(util.toPointer(data.pvInData)), true);
  // 0x08: u32
  if (data?.cbInData !== undefined) view.setUint32(8, Number(data.cbInData), true);
  // 0x0c: u32
  if (data?.cbInBuffer !== undefined) view.setUint32(12, Number(data.cbInBuffer), true);
  // 0x10: u32
  if (data?.dwReserved !== undefined) view.setUint32(16, Number(data.dwReserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_PREPROC_HEADERS (size: 32)
 */
export interface HTTP_FILTER_PREPROC_HEADERS {
  /** isize */
  GetHeader: Deno.PointerValue;
  /** isize */
  SetHeader: Deno.PointerValue;
  /** isize */
  AddHeader: Deno.PointerValue;
  /** u32 */
  HttpStatus: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofHTTP_FILTER_PREPROC_HEADERS = 32;

export function allocHTTP_FILTER_PREPROC_HEADERS(data?: Partial<HTTP_FILTER_PREPROC_HEADERS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_PREPROC_HEADERS);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetHeader !== undefined) view.setBigInt64(0, BigInt(data.GetHeader), true);
  // 0x08: isize
  if (data?.SetHeader !== undefined) view.setBigInt64(8, BigInt(data.SetHeader), true);
  // 0x10: isize
  if (data?.AddHeader !== undefined) view.setBigInt64(16, BigInt(data.AddHeader), true);
  // 0x18: u32
  if (data?.HttpStatus !== undefined) view.setUint32(24, Number(data.HttpStatus), true);
  // 0x1c: u32
  if (data?.dwReserved !== undefined) view.setUint32(28, Number(data.dwReserved), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_AUTHENT (size: 32)
 */
export interface HTTP_FILTER_AUTHENT {
  /** Windows.Win32.Foundation.PSTR */
  pszUser: string | null | Uint8Array;
  /** u32 */
  cbUserBuff: number;
  /** Windows.Win32.Foundation.PSTR */
  pszPassword: string | null | Uint8Array;
  /** u32 */
  cbPasswordBuff: number;
}

export const sizeofHTTP_FILTER_AUTHENT = 32;

export function allocHTTP_FILTER_AUTHENT(data?: Partial<HTTP_FILTER_AUTHENT>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_AUTHENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszUser !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszUser);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cbUserBuff !== undefined) view.setUint32(8, Number(data.cbUserBuff), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cbPasswordBuff !== undefined) view.setUint32(24, Number(data.cbPasswordBuff), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_URL_MAP (size: 24)
 */
export interface HTTP_FILTER_URL_MAP {
  /** Windows.Win32.Foundation.PSTR */
  pszURL: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPhysicalPath: string | null | Uint8Array;
  /** u32 */
  cbPathBuff: number;
}

export const sizeofHTTP_FILTER_URL_MAP = 24;

export function allocHTTP_FILTER_URL_MAP(data?: Partial<HTTP_FILTER_URL_MAP>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_URL_MAP);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszURL !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszURL);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszPhysicalPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszPhysicalPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbPathBuff !== undefined) view.setUint32(16, Number(data.cbPathBuff), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_URL_MAP_EX (size: 40)
 */
export interface HTTP_FILTER_URL_MAP_EX {
  /** Windows.Win32.Foundation.PSTR */
  pszURL: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPhysicalPath: string | null | Uint8Array;
  /** u32 */
  cbPathBuff: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cchMatchingPath: number;
  /** u32 */
  cchMatchingURL: number;
  /** Windows.Win32.Foundation.PSTR */
  pszScriptMapEntry: string | null | Uint8Array;
}

export const sizeofHTTP_FILTER_URL_MAP_EX = 40;

export function allocHTTP_FILTER_URL_MAP_EX(data?: Partial<HTTP_FILTER_URL_MAP_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_URL_MAP_EX);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszURL !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszURL);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszPhysicalPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszPhysicalPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbPathBuff !== undefined) view.setUint32(16, Number(data.cbPathBuff), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: u32
  if (data?.cchMatchingPath !== undefined) view.setUint32(24, Number(data.cchMatchingPath), true);
  // 0x1c: u32
  if (data?.cchMatchingURL !== undefined) view.setUint32(28, Number(data.cchMatchingURL), true);
  // 0x20: buffer
  if (data?.pszScriptMapEntry !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszScriptMapEntry);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_ACCESS_DENIED (size: 24)
 */
export interface HTTP_FILTER_ACCESS_DENIED {
  /** Windows.Win32.Foundation.PSTR */
  pszURL: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPhysicalPath: string | null | Uint8Array;
  /** u32 */
  dwReason: number;
}

export const sizeofHTTP_FILTER_ACCESS_DENIED = 24;

export function allocHTTP_FILTER_ACCESS_DENIED(data?: Partial<HTTP_FILTER_ACCESS_DENIED>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_ACCESS_DENIED);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszURL !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszURL);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszPhysicalPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszPhysicalPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwReason !== undefined) view.setUint32(16, Number(data.dwReason), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_LOG (size: 72)
 */
export interface HTTP_FILTER_LOG {
  /** Windows.Win32.Foundation.PSTR */
  pszClientHostName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszClientUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszOperation: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszTarget: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszParameters: string | null | Uint8Array;
  /** u32 */
  dwHttpStatus: number;
  /** u32 */
  dwWin32Status: number;
  /** u32 */
  dwBytesSent: number;
  /** u32 */
  dwBytesRecvd: number;
  /** u32 */
  msTimeForProcessing: number;
}

export const sizeofHTTP_FILTER_LOG = 72;

export function allocHTTP_FILTER_LOG(data?: Partial<HTTP_FILTER_LOG>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_LOG);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszClientHostName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszClientHostName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszClientUserName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszClientUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszServerName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszOperation !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszOperation);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszTarget !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTarget);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszParameters !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pszParameters);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.dwHttpStatus !== undefined) view.setUint32(48, Number(data.dwHttpStatus), true);
  // 0x34: u32
  if (data?.dwWin32Status !== undefined) view.setUint32(52, Number(data.dwWin32Status), true);
  // 0x38: u32
  if (data?.dwBytesSent !== undefined) view.setUint32(56, Number(data.dwBytesSent), true);
  // 0x3c: u32
  if (data?.dwBytesRecvd !== undefined) view.setUint32(60, Number(data.dwBytesRecvd), true);
  // 0x40: u32
  if (data?.msTimeForProcessing !== undefined) view.setUint32(64, Number(data.msTimeForProcessing), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_AUTH_COMPLETE_INFO (size: 48)
 */
export interface HTTP_FILTER_AUTH_COMPLETE_INFO {
  /** isize */
  GetHeader: Deno.PointerValue;
  /** isize */
  SetHeader: Deno.PointerValue;
  /** isize */
  AddHeader: Deno.PointerValue;
  /** isize */
  GetUserToken: Deno.PointerValue;
  /** u32 */
  HttpStatus: number;
  /** Windows.Win32.Foundation.BOOL */
  fResetAuth: boolean;
  /** u32 */
  dwReserved: number;
}

export const sizeofHTTP_FILTER_AUTH_COMPLETE_INFO = 48;

export function allocHTTP_FILTER_AUTH_COMPLETE_INFO(data?: Partial<HTTP_FILTER_AUTH_COMPLETE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_AUTH_COMPLETE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.GetHeader !== undefined) view.setBigInt64(0, BigInt(data.GetHeader), true);
  // 0x08: isize
  if (data?.SetHeader !== undefined) view.setBigInt64(8, BigInt(data.SetHeader), true);
  // 0x10: isize
  if (data?.AddHeader !== undefined) view.setBigInt64(16, BigInt(data.AddHeader), true);
  // 0x18: isize
  if (data?.GetUserToken !== undefined) view.setBigInt64(24, BigInt(data.GetUserToken), true);
  // 0x20: u32
  if (data?.HttpStatus !== undefined) view.setUint32(32, Number(data.HttpStatus), true);
  // 0x24: i32
  if (data?.fResetAuth !== undefined) view.setInt32(36, Number(data.fResetAuth), true);
  // 0x28: u32
  if (data?.dwReserved !== undefined) view.setUint32(40, Number(data.dwReserved), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_FILTER_VERSION (size: 24)
 */
export interface HTTP_FILTER_VERSION {
  /** u32 */
  dwServerFilterVersion: number;
  /** u32 */
  dwFilterVersion: number;
  /** array */
  lpszFilterDesc: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofHTTP_FILTER_VERSION = 24;

export function allocHTTP_FILTER_VERSION(data?: Partial<HTTP_FILTER_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FILTER_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServerFilterVersion !== undefined) view.setUint32(0, Number(data.dwServerFilterVersion), true);
  // 0x04: u32
  if (data?.dwFilterVersion !== undefined) view.setUint32(4, Number(data.dwFilterVersion), true);
  // 0x08: pointer
  if (data?.lpszFilterDesc !== undefined) view.setBigUint64(8, data.lpszFilterDesc === null ? 0n : BigInt(util.toPointer(data.lpszFilterDesc)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_TRACE_EVENT (size: 88)
 */
export interface HTTP_TRACE_EVENT {
  /** ptr */
  pProviderGuid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwArea: number;
  /** ptr */
  pAreaGuid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwEvent: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszEventName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwEventVersion: number;
  /** u32 */
  dwVerbosity: number;
  /** ptr */
  pActivityGuid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pRelatedActivityGuid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwTimeStamp: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cEventItems: number;
  /** ptr */
  pEventItems: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_TRACE_EVENT = 88;

export function allocHTTP_TRACE_EVENT(data?: Partial<HTTP_TRACE_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TRACE_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pProviderGuid !== undefined) view.setBigUint64(0, data.pProviderGuid === null ? 0n : BigInt(util.toPointer(data.pProviderGuid)), true);
  // 0x08: u32
  if (data?.dwArea !== undefined) view.setUint32(8, Number(data.dwArea), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pAreaGuid !== undefined) view.setBigUint64(16, data.pAreaGuid === null ? 0n : BigInt(util.toPointer(data.pAreaGuid)), true);
  // 0x18: u32
  if (data?.dwEvent !== undefined) view.setUint32(24, Number(data.dwEvent), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszEventName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszEventName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwEventVersion !== undefined) view.setUint32(40, Number(data.dwEventVersion), true);
  // 0x2c: u32
  if (data?.dwVerbosity !== undefined) view.setUint32(44, Number(data.dwVerbosity), true);
  // 0x30: pointer
  if (data?.pActivityGuid !== undefined) view.setBigUint64(48, data.pActivityGuid === null ? 0n : BigInt(util.toPointer(data.pActivityGuid)), true);
  // 0x38: pointer
  if (data?.pRelatedActivityGuid !== undefined) view.setBigUint64(56, data.pRelatedActivityGuid === null ? 0n : BigInt(util.toPointer(data.pRelatedActivityGuid)), true);
  // 0x40: u32
  if (data?.dwTimeStamp !== undefined) view.setUint32(64, Number(data.dwTimeStamp), true);
  // 0x44: u32
  if (data?.dwFlags !== undefined) view.setUint32(68, Number(data.dwFlags), true);
  // 0x48: u32
  if (data?.cEventItems !== undefined) view.setUint32(72, Number(data.cEventItems), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pEventItems !== undefined) view.setBigUint64(80, data.pEventItems === null ? 0n : BigInt(util.toPointer(data.pEventItems)), true);
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_TRACE_EVENT_ITEM (size: 40)
 */
export interface HTTP_TRACE_EVENT_ITEM {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Iis.HTTP_TRACE_TYPE */
  dwDataType: HTTP_TRACE_TYPE;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDataDescription: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_TRACE_EVENT_ITEM = 40;

export function allocHTTP_TRACE_EVENT_ITEM(data?: Partial<HTTP_TRACE_EVENT_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TRACE_EVENT_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.dwDataType !== undefined) view.setInt32(8, Number(data.dwDataType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbData !== undefined) view.setBigUint64(16, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszDataDescription !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszDataDescription);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Iis.HTTP_TRACE_CONFIGURATION (size: 24)
 */
export interface HTTP_TRACE_CONFIGURATION {
  /** ptr */
  pProviderGuid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwAreas: number;
  /** u32 */
  dwVerbosity: number;
  /** Windows.Win32.Foundation.BOOL */
  fProviderEnabled: boolean;
}

export const sizeofHTTP_TRACE_CONFIGURATION = 24;

export function allocHTTP_TRACE_CONFIGURATION(data?: Partial<HTTP_TRACE_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TRACE_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pProviderGuid !== undefined) view.setBigUint64(0, data.pProviderGuid === null ? 0n : BigInt(util.toPointer(data.pProviderGuid)), true);
  // 0x08: u32
  if (data?.dwAreas !== undefined) view.setUint32(8, Number(data.dwAreas), true);
  // 0x0c: u32
  if (data?.dwVerbosity !== undefined) view.setUint32(12, Number(data.dwVerbosity), true);
  // 0x10: i32
  if (data?.fProviderEnabled !== undefined) view.setInt32(16, Number(data.fProviderEnabled), true);
  // 0x14: pad4
  return buf;
}

// Native Libraries

try {
  var libRpcProxy_dll = Deno.dlopen("RpcProxy.dll", {
    GetExtensionVersion: {
      parameters: ["pointer"],
      result: "i32",
    },
    HttpExtensionProc: {
      parameters: ["pointer"],
      result: "u32",
    },
    HttpFilterProc: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetFilterVersion: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetExtensionVersion(
  pVer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRpcProxy_dll.GetExtensionVersion(util.toPointer(pVer)));
}

export function HttpExtensionProc(
  pECB: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRpcProxy_dll.HttpExtensionProc(util.toPointer(pECB));
}

export function HttpFilterProc(
  pfc: Deno.PointerValue | Uint8Array | null /* ptr */,
  NotificationType: number /* u32 */,
  pvNotification: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRpcProxy_dll.HttpFilterProc(util.toPointer(pfc), NotificationType, util.toPointer(pvNotification));
}

export function GetFilterVersion(
  pVer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRpcProxy_dll.GetFilterVersion(util.toPointer(pVer)));
}

