/// Auto-generated by Deno Win32: Windows.Win32.System.WindowsSync.Apis

import * as util from "../../util.ts";

// Enums
export type SYNC_PROVIDER_ROLE = number;
export type CONFLICT_RESOLUTION_POLICY = number;
export type SYNC_PROGRESS_STAGE = number;
export type SYNC_FULL_ENUMERATION_ACTION = number;
export type SYNC_RESOLVE_ACTION = number;
export type SYNC_STATISTICS = number;
export type SYNC_SERIALIZATION_VERSION = number;
export type FILTERING_TYPE = number;
export type SYNC_CONSTRAINT_RESOLVE_ACTION = number;
export type CONSTRAINT_CONFLICT_REASON = number;
export type KNOWLEDGE_COOKIE_COMPARISON_RESULT = number;
export type FILTER_COMBINATION_TYPE = number;
export type SYNC_REGISTRATION_EVENT = number;

// Constants
export const SYNC_VERSION_FLAG_FROM_FEED = 1;
export const SYNC_VERSION_FLAG_HAS_BY = 2;
export const SYNC_SERIALIZE_REPLICA_KEY_MAP = 1;
export const SYNC_FILTER_INFO_FLAG_ITEM_LIST = 1;
export const SYNC_FILTER_INFO_FLAG_CHANGE_UNIT_LIST = 2;
export const SYNC_FILTER_INFO_FLAG_CUSTOM = 4;
export const SYNC_FILTER_INFO_COMBINED = 8;
export const SYNC_CHANGE_FLAG_DELETED = 1;
export const SYNC_CHANGE_FLAG_DOES_NOT_EXIST = 2;
export const SYNC_CHANGE_FLAG_GHOST = 4;
export const SPR_SOURCE = 0;
export const SPR_DESTINATION = 1;
export const CRP_NONE = 0;
export const CRP_DESTINATION_PROVIDER_WINS = 1;
export const CRP_SOURCE_PROVIDER_WINS = 2;
export const CRP_LAST = 3;
export const SPS_CHANGE_DETECTION = 0;
export const SPS_CHANGE_ENUMERATION = 1;
export const SPS_CHANGE_APPLICATION = 2;
export const SFEA_FULL_ENUMERATION = 0;
export const SFEA_PARTIAL_SYNC = 1;
export const SFEA_ABORT = 2;
export const SRA_DEFER = 0;
export const SRA_ACCEPT_DESTINATION_PROVIDER = 1;
export const SRA_ACCEPT_SOURCE_PROVIDER = 2;
export const SRA_MERGE = 3;
export const SRA_TRANSFER_AND_DEFER = 4;
export const SRA_LAST = 5;
export const SYNC_STATISTICS_RANGE_COUNT = 0;
export const SYNC_SERIALIZATION_VERSION_V1 = 1;
export const SYNC_SERIALIZATION_VERSION_V2 = 4;
export const SYNC_SERIALIZATION_VERSION_V3 = 5;
export const FT_CURRENT_ITEMS_ONLY = 0;
export const FT_CURRENT_ITEMS_AND_VERSIONS_FOR_MOVED_OUT_ITEMS = 1;
export const SCRA_DEFER = 0;
export const SCRA_ACCEPT_DESTINATION_PROVIDER = 1;
export const SCRA_ACCEPT_SOURCE_PROVIDER = 2;
export const SCRA_TRANSFER_AND_DEFER = 3;
export const SCRA_MERGE = 4;
export const SCRA_RENAME_SOURCE = 5;
export const SCRA_RENAME_DESTINATION = 6;
export const CCR_OTHER = 0;
export const CCR_COLLISION = 1;
export const CCR_NOPARENT = 2;
export const CCR_IDENTITY = 3;
export const KCCR_COOKIE_KNOWLEDGE_EQUAL = 0;
export const KCCR_COOKIE_KNOWLEDGE_CONTAINED = 1;
export const KCCR_COOKIE_KNOWLEDGE_CONTAINS = 2;
export const KCCR_COOKIE_KNOWLEDGE_NOT_COMPARABLE = 3;
export const FCT_INTERSECTION = 0;
export const SRE_PROVIDER_ADDED = 0;
export const SRE_PROVIDER_REMOVED = 1;
export const SRE_PROVIDER_UPDATED = 2;
export const SRE_PROVIDER_STATE_CHANGED = 3;
export const SRE_CONFIGUI_ADDED = 4;
export const SRE_CONFIGUI_REMOVED = 5;
export const SRE_CONFIGUI_UPDATED = 6;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.Apis (size: 176)
 */
export interface Apis {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_INSTANCEID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_CLSID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_CONFIGUI: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_CONTENTTYPE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_CAPABILITIES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_SUPPORTED_ARCHITECTURE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_NAME: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_DESCRIPTION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_TOOLTIPS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_PROVIDER_ICON: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_INSTANCEID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_CLSID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_CONTENTTYPE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_CAPABILITIES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_SUPPORTED_ARCHITECTURE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_IS_GLOBAL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_NAME: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_DESCRIPTION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_TOOLTIPS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_ICON: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_MENUITEM_NOUI: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  PKEY_CONFIGUI_MENUITEM: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 176;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PKEY_PROVIDER_INSTANCEID !== undefined) view.setBigUint64(0, data.PKEY_PROVIDER_INSTANCEID === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_INSTANCEID)), true);
  // 0x08: pointer
  if (data?.PKEY_PROVIDER_CLSID !== undefined) view.setBigUint64(8, data.PKEY_PROVIDER_CLSID === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_CLSID)), true);
  // 0x10: pointer
  if (data?.PKEY_PROVIDER_CONFIGUI !== undefined) view.setBigUint64(16, data.PKEY_PROVIDER_CONFIGUI === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_CONFIGUI)), true);
  // 0x18: pointer
  if (data?.PKEY_PROVIDER_CONTENTTYPE !== undefined) view.setBigUint64(24, data.PKEY_PROVIDER_CONTENTTYPE === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_CONTENTTYPE)), true);
  // 0x20: pointer
  if (data?.PKEY_PROVIDER_CAPABILITIES !== undefined) view.setBigUint64(32, data.PKEY_PROVIDER_CAPABILITIES === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_CAPABILITIES)), true);
  // 0x28: pointer
  if (data?.PKEY_PROVIDER_SUPPORTED_ARCHITECTURE !== undefined) view.setBigUint64(40, data.PKEY_PROVIDER_SUPPORTED_ARCHITECTURE === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_SUPPORTED_ARCHITECTURE)), true);
  // 0x30: pointer
  if (data?.PKEY_PROVIDER_NAME !== undefined) view.setBigUint64(48, data.PKEY_PROVIDER_NAME === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_NAME)), true);
  // 0x38: pointer
  if (data?.PKEY_PROVIDER_DESCRIPTION !== undefined) view.setBigUint64(56, data.PKEY_PROVIDER_DESCRIPTION === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_DESCRIPTION)), true);
  // 0x40: pointer
  if (data?.PKEY_PROVIDER_TOOLTIPS !== undefined) view.setBigUint64(64, data.PKEY_PROVIDER_TOOLTIPS === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_TOOLTIPS)), true);
  // 0x48: pointer
  if (data?.PKEY_PROVIDER_ICON !== undefined) view.setBigUint64(72, data.PKEY_PROVIDER_ICON === null ? 0n : BigInt(util.toPointer(data.PKEY_PROVIDER_ICON)), true);
  // 0x50: pointer
  if (data?.PKEY_CONFIGUI_INSTANCEID !== undefined) view.setBigUint64(80, data.PKEY_CONFIGUI_INSTANCEID === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_INSTANCEID)), true);
  // 0x58: pointer
  if (data?.PKEY_CONFIGUI_CLSID !== undefined) view.setBigUint64(88, data.PKEY_CONFIGUI_CLSID === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_CLSID)), true);
  // 0x60: pointer
  if (data?.PKEY_CONFIGUI_CONTENTTYPE !== undefined) view.setBigUint64(96, data.PKEY_CONFIGUI_CONTENTTYPE === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_CONTENTTYPE)), true);
  // 0x68: pointer
  if (data?.PKEY_CONFIGUI_CAPABILITIES !== undefined) view.setBigUint64(104, data.PKEY_CONFIGUI_CAPABILITIES === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_CAPABILITIES)), true);
  // 0x70: pointer
  if (data?.PKEY_CONFIGUI_SUPPORTED_ARCHITECTURE !== undefined) view.setBigUint64(112, data.PKEY_CONFIGUI_SUPPORTED_ARCHITECTURE === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_SUPPORTED_ARCHITECTURE)), true);
  // 0x78: pointer
  if (data?.PKEY_CONFIGUI_IS_GLOBAL !== undefined) view.setBigUint64(120, data.PKEY_CONFIGUI_IS_GLOBAL === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_IS_GLOBAL)), true);
  // 0x80: pointer
  if (data?.PKEY_CONFIGUI_NAME !== undefined) view.setBigUint64(128, data.PKEY_CONFIGUI_NAME === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_NAME)), true);
  // 0x88: pointer
  if (data?.PKEY_CONFIGUI_DESCRIPTION !== undefined) view.setBigUint64(136, data.PKEY_CONFIGUI_DESCRIPTION === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_DESCRIPTION)), true);
  // 0x90: pointer
  if (data?.PKEY_CONFIGUI_TOOLTIPS !== undefined) view.setBigUint64(144, data.PKEY_CONFIGUI_TOOLTIPS === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_TOOLTIPS)), true);
  // 0x98: pointer
  if (data?.PKEY_CONFIGUI_ICON !== undefined) view.setBigUint64(152, data.PKEY_CONFIGUI_ICON === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_ICON)), true);
  // 0xa0: pointer
  if (data?.PKEY_CONFIGUI_MENUITEM_NOUI !== undefined) view.setBigUint64(160, data.PKEY_CONFIGUI_MENUITEM_NOUI === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_MENUITEM_NOUI)), true);
  // 0xa8: pointer
  if (data?.PKEY_CONFIGUI_MENUITEM !== undefined) view.setBigUint64(168, data.PKEY_CONFIGUI_MENUITEM === null ? 0n : BigInt(util.toPointer(data.PKEY_CONFIGUI_MENUITEM)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.WindowsSync.ID_PARAMETER_PAIR (size: 8)
 */
export interface ID_PARAMETER_PAIR {
  /** Windows.Win32.Foundation.BOOL */
  fIsVariable: boolean;
  /** u16 */
  cbIdSize: number;
}

export const sizeofID_PARAMETER_PAIR = 8;

export function allocID_PARAMETER_PAIR(data?: Partial<ID_PARAMETER_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofID_PARAMETER_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsVariable !== undefined) view.setInt32(0, Number(data.fIsVariable), true);
  // 0x04: u16
  if (data?.cbIdSize !== undefined) view.setUint16(4, Number(data.cbIdSize), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.ID_PARAMETERS (size: 32)
 */
export interface ID_PARAMETERS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.System.WindowsSync.ID_PARAMETER_PAIR */
  replicaId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.WindowsSync.ID_PARAMETER_PAIR */
  itemId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.WindowsSync.ID_PARAMETER_PAIR */
  changeUnitId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofID_PARAMETERS = 32;

export function allocID_PARAMETERS(data?: Partial<ID_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofID_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.replicaId !== undefined) view.setBigUint64(8, data.replicaId === null ? 0n : BigInt(util.toPointer(data.replicaId)), true);
  // 0x10: pointer
  if (data?.itemId !== undefined) view.setBigUint64(16, data.itemId === null ? 0n : BigInt(util.toPointer(data.itemId)), true);
  // 0x18: pointer
  if (data?.changeUnitId !== undefined) view.setBigUint64(24, data.changeUnitId === null ? 0n : BigInt(util.toPointer(data.changeUnitId)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SYNC_SESSION_STATISTICS (size: 8)
 */
export interface SYNC_SESSION_STATISTICS {
  /** u32 */
  dwChangesApplied: number;
  /** u32 */
  dwChangesFailed: number;
}

export const sizeofSYNC_SESSION_STATISTICS = 8;

export function allocSYNC_SESSION_STATISTICS(data?: Partial<SYNC_SESSION_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNC_SESSION_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwChangesApplied !== undefined) view.setUint32(0, Number(data.dwChangesApplied), true);
  // 0x04: u32
  if (data?.dwChangesFailed !== undefined) view.setUint32(4, Number(data.dwChangesFailed), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SYNC_VERSION (size: 16)
 */
export interface SYNC_VERSION {
  /** u32 */
  dwLastUpdatingReplicaKey: number;
  /** u64 */
  ullTickCount: Deno.PointerValue;
}

export const sizeofSYNC_VERSION = 16;

export function allocSYNC_VERSION(data?: Partial<SYNC_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNC_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLastUpdatingReplicaKey !== undefined) view.setUint32(0, Number(data.dwLastUpdatingReplicaKey), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ullTickCount !== undefined) view.setBigUint64(8, BigInt(data.ullTickCount), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SYNC_RANGE (size: 16)
 */
export interface SYNC_RANGE {
  /** ptr */
  pbClosedLowerBound: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pbClosedUpperBound: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSYNC_RANGE = 16;

export function allocSYNC_RANGE(data?: Partial<SYNC_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNC_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbClosedLowerBound !== undefined) view.setBigUint64(0, data.pbClosedLowerBound === null ? 0n : BigInt(util.toPointer(data.pbClosedLowerBound)), true);
  // 0x08: pointer
  if (data?.pbClosedUpperBound !== undefined) view.setBigUint64(8, data.pbClosedUpperBound === null ? 0n : BigInt(util.toPointer(data.pbClosedUpperBound)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SYNC_TIME (size: 8)
 */
export interface SYNC_TIME {
  /** u32 */
  dwDate: number;
  /** u32 */
  dwTime: number;
}

export const sizeofSYNC_TIME = 8;

export function allocSYNC_TIME(data?: Partial<SYNC_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNC_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDate !== undefined) view.setUint32(0, Number(data.dwDate), true);
  // 0x04: u32
  if (data?.dwTime !== undefined) view.setUint32(4, Number(data.dwTime), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SYNC_FILTER_CHANGE (size: 16)
 */
export interface SYNC_FILTER_CHANGE {
  /** Windows.Win32.Foundation.BOOL */
  fMoveIn: boolean;
  /** Windows.Win32.System.WindowsSync.SYNC_VERSION */
  moveVersion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYNC_FILTER_CHANGE = 16;

export function allocSYNC_FILTER_CHANGE(data?: Partial<SYNC_FILTER_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNC_FILTER_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fMoveIn !== undefined) view.setInt32(0, Number(data.fMoveIn), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.moveVersion !== undefined) view.setBigUint64(8, data.moveVersion === null ? 0n : BigInt(util.toPointer(data.moveVersion)), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SyncProviderConfiguration (size: 48)
 */
export interface SyncProviderConfiguration {
  /** u32 */
  dwVersion: number;
  /** System.Guid */
  guidInstanceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidProvider: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConfigUIInstanceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidContentType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCapabilities: number;
  /** u32 */
  dwSupportedArchitecture: number;
}

export const sizeofSyncProviderConfiguration = 48;

export function allocSyncProviderConfiguration(data?: Partial<SyncProviderConfiguration>): Uint8Array {
  const buf = new Uint8Array(sizeofSyncProviderConfiguration);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstanceId !== undefined) view.setBigUint64(8, data.guidInstanceId === null ? 0n : BigInt(util.toPointer(data.guidInstanceId)), true);
  // 0x10: pointer
  if (data?.clsidProvider !== undefined) view.setBigUint64(16, data.clsidProvider === null ? 0n : BigInt(util.toPointer(data.clsidProvider)), true);
  // 0x18: pointer
  if (data?.guidConfigUIInstanceId !== undefined) view.setBigUint64(24, data.guidConfigUIInstanceId === null ? 0n : BigInt(util.toPointer(data.guidConfigUIInstanceId)), true);
  // 0x20: pointer
  if (data?.guidContentType !== undefined) view.setBigUint64(32, data.guidContentType === null ? 0n : BigInt(util.toPointer(data.guidContentType)), true);
  // 0x28: u32
  if (data?.dwCapabilities !== undefined) view.setUint32(40, Number(data.dwCapabilities), true);
  // 0x2c: u32
  if (data?.dwSupportedArchitecture !== undefined) view.setUint32(44, Number(data.dwSupportedArchitecture), true);
  return buf;
}

/**
 * Windows.Win32.System.WindowsSync.SyncProviderConfigUIConfiguration (size: 48)
 */
export interface SyncProviderConfigUIConfiguration {
  /** u32 */
  dwVersion: number;
  /** System.Guid */
  guidInstanceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidConfigUI: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidContentType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCapabilities: number;
  /** u32 */
  dwSupportedArchitecture: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsGlobal: boolean;
}

export const sizeofSyncProviderConfigUIConfiguration = 48;

export function allocSyncProviderConfigUIConfiguration(data?: Partial<SyncProviderConfigUIConfiguration>): Uint8Array {
  const buf = new Uint8Array(sizeofSyncProviderConfigUIConfiguration);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstanceId !== undefined) view.setBigUint64(8, data.guidInstanceId === null ? 0n : BigInt(util.toPointer(data.guidInstanceId)), true);
  // 0x10: pointer
  if (data?.clsidConfigUI !== undefined) view.setBigUint64(16, data.clsidConfigUI === null ? 0n : BigInt(util.toPointer(data.clsidConfigUI)), true);
  // 0x18: pointer
  if (data?.guidContentType !== undefined) view.setBigUint64(24, data.guidContentType === null ? 0n : BigInt(util.toPointer(data.guidContentType)), true);
  // 0x20: u32
  if (data?.dwCapabilities !== undefined) view.setUint32(32, Number(data.dwCapabilities), true);
  // 0x24: u32
  if (data?.dwSupportedArchitecture !== undefined) view.setUint32(36, Number(data.dwSupportedArchitecture), true);
  // 0x28: i32
  if (data?.fIsGlobal !== undefined) view.setInt32(40, Number(data.fIsGlobal), true);
  // 0x2c: pad4
  return buf;
}

// Native Libraries

// Symbols

