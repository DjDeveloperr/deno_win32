/// Auto-generated by Deno Win32: Windows.Win32.System.Antimalware.Apis

import * as util from "../../util.ts";

// Enums
export type AMSI_RESULT = number;
export type AMSI_ATTRIBUTE = number;
export type AMSI_UAC_REQUEST_TYPE = number;
export type AMSI_UAC_TRUST_STATE = number;
export type AMSI_UAC_MSI_ACTION = number;

// Constants
export const AMSI_RESULT_CLEAN = 0;
export const AMSI_RESULT_NOT_DETECTED = 1;
export const AMSI_RESULT_BLOCKED_BY_ADMIN_START = 16384;
export const AMSI_RESULT_BLOCKED_BY_ADMIN_END = 20479;
export const AMSI_RESULT_DETECTED = 32768;
export const AMSI_ATTRIBUTE_APP_NAME = 0;
export const AMSI_ATTRIBUTE_CONTENT_NAME = 1;
export const AMSI_ATTRIBUTE_CONTENT_SIZE = 2;
export const AMSI_ATTRIBUTE_CONTENT_ADDRESS = 3;
export const AMSI_ATTRIBUTE_SESSION = 4;
export const AMSI_ATTRIBUTE_REDIRECT_CHAIN_SIZE = 5;
export const AMSI_ATTRIBUTE_REDIRECT_CHAIN_ADDRESS = 6;
export const AMSI_ATTRIBUTE_ALL_SIZE = 7;
export const AMSI_ATTRIBUTE_ALL_ADDRESS = 8;
export const AMSI_ATTRIBUTE_QUIET = 9;
export const AMSI_UAC_REQUEST_TYPE_EXE = 0;
export const AMSI_UAC_REQUEST_TYPE_COM = 1;
export const AMSI_UAC_REQUEST_TYPE_MSI = 2;
export const AMSI_UAC_REQUEST_TYPE_AX = 3;
export const AMSI_UAC_REQUEST_TYPE_PACKAGED_APP = 4;
export const AMSI_UAC_REQUEST_TYPE_MAX = 5;
export const AMSI_UAC_TRUST_STATE_TRUSTED = 0;
export const AMSI_UAC_TRUST_STATE_UNTRUSTED = 1;
export const AMSI_UAC_TRUST_STATE_BLOCKED = 2;
export const AMSI_UAC_TRUST_STATE_MAX = 3;
export const AMSI_UAC_MSI_ACTION_INSTALL = 0;
export const AMSI_UAC_MSI_ACTION_UNINSTALL = 1;
export const AMSI_UAC_MSI_ACTION_UPDATE = 2;
export const AMSI_UAC_MSI_ACTION_MAINTENANCE = 3;
export const AMSI_UAC_MSI_ACTION_MAX = 4;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_EXE_INFO (size: 32)
 */
export interface AMSI_UAC_REQUEST_EXE_INFO {
  /** u32 */
  ulLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszApplicationName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszCommandLine: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszDLLParameter: string | null | Uint8Array | Uint16Array;
}

export const sizeofAMSI_UAC_REQUEST_EXE_INFO = 32;

export function allocAMSI_UAC_REQUEST_EXE_INFO(data?: Partial<AMSI_UAC_REQUEST_EXE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMSI_UAC_REQUEST_EXE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwszApplicationName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszApplicationName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwszCommandLine !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwszCommandLine);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpwszDLLParameter !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpwszDLLParameter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_COM_INFO (size: 32)
 */
export interface AMSI_UAC_REQUEST_COM_INFO {
  /** u32 */
  ulLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszServerBinary: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszRequestor: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  Clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAMSI_UAC_REQUEST_COM_INFO = 32;

export function allocAMSI_UAC_REQUEST_COM_INFO(data?: Partial<AMSI_UAC_REQUEST_COM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMSI_UAC_REQUEST_COM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwszServerBinary !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszServerBinary);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwszRequestor !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwszRequestor);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.Clsid !== undefined) view.setBigUint64(24, data.Clsid === null ? 0n : BigInt(util.toPointer(data.Clsid)), true);
  return buf;
}

/**
 * Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_MSI_INFO (size: 80)
 */
export interface AMSI_UAC_REQUEST_MSI_INFO {
  /** u32 */
  ulLength: number;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_MSI_ACTION */
  MsiAction: AMSI_UAC_MSI_ACTION;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszProductName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszVersion: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszLanguage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszManufacturer: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszPackagePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszPackageSource: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulUpdates: number;
  /** ptr */
  ppwszUpdates: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppwszUpdateSources: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAMSI_UAC_REQUEST_MSI_INFO = 80;

export function allocAMSI_UAC_REQUEST_MSI_INFO(data?: Partial<AMSI_UAC_REQUEST_MSI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMSI_UAC_REQUEST_MSI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: i32
  if (data?.MsiAction !== undefined) view.setInt32(4, Number(data.MsiAction), true);
  // 0x08: buffer
  if (data?.lpwszProductName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszProductName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwszVersion !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwszVersion);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpwszLanguage !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpwszLanguage);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpwszManufacturer !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpwszManufacturer);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpwszPackagePath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpwszPackagePath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.lpwszPackageSource !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpwszPackageSource);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.ulUpdates !== undefined) view.setUint32(56, Number(data.ulUpdates), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ppwszUpdates !== undefined) view.setBigUint64(64, data.ppwszUpdates === null ? 0n : BigInt(util.toPointer(data.ppwszUpdates)), true);
  // 0x48: pointer
  if (data?.ppwszUpdateSources !== undefined) view.setBigUint64(72, data.ppwszUpdateSources === null ? 0n : BigInt(util.toPointer(data.ppwszUpdateSources)), true);
  return buf;
}

/**
 * Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_AX_INFO (size: 24)
 */
export interface AMSI_UAC_REQUEST_AX_INFO {
  /** u32 */
  ulLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszLocalInstallPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszSourceURL: string | null | Uint8Array | Uint16Array;
}

export const sizeofAMSI_UAC_REQUEST_AX_INFO = 24;

export function allocAMSI_UAC_REQUEST_AX_INFO(data?: Partial<AMSI_UAC_REQUEST_AX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMSI_UAC_REQUEST_AX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwszLocalInstallPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszLocalInstallPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwszSourceURL !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwszSourceURL);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_PACKAGED_APP_INFO (size: 40)
 */
export interface AMSI_UAC_REQUEST_PACKAGED_APP_INFO {
  /** u32 */
  ulLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszApplicationName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwszCommandLine: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpPackageFamilyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpApplicationId: string | null | Uint8Array | Uint16Array;
}

export const sizeofAMSI_UAC_REQUEST_PACKAGED_APP_INFO = 40;

export function allocAMSI_UAC_REQUEST_PACKAGED_APP_INFO(data?: Partial<AMSI_UAC_REQUEST_PACKAGED_APP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAMSI_UAC_REQUEST_PACKAGED_APP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwszApplicationName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwszApplicationName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwszCommandLine !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwszCommandLine);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpPackageFamilyName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpPackageFamilyName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpApplicationId !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpApplicationId);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * _RequestType_e__Union (size: 40)
 */
export interface _RequestType_e__Union {
  /** Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_EXE_INFO */
  ExeInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_COM_INFO */
  ComInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_MSI_INFO */
  MsiInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_AX_INFO */
  ActiveXInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_PACKAGED_APP_INFO */
  PackagedAppInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_RequestType_e__Union = 40;

export function alloc_RequestType_e__Union(data?: Partial<_RequestType_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_RequestType_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExeInfo !== undefined) view.setBigUint64(0, data.ExeInfo === null ? 0n : BigInt(util.toPointer(data.ExeInfo)), true);
  // 0x08: pointer
  if (data?.ComInfo !== undefined) view.setBigUint64(8, data.ComInfo === null ? 0n : BigInt(util.toPointer(data.ComInfo)), true);
  // 0x10: pointer
  if (data?.MsiInfo !== undefined) view.setBigUint64(16, data.MsiInfo === null ? 0n : BigInt(util.toPointer(data.MsiInfo)), true);
  // 0x18: pointer
  if (data?.ActiveXInfo !== undefined) view.setBigUint64(24, data.ActiveXInfo === null ? 0n : BigInt(util.toPointer(data.ActiveXInfo)), true);
  // 0x20: pointer
  if (data?.PackagedAppInfo !== undefined) view.setBigUint64(32, data.PackagedAppInfo === null ? 0n : BigInt(util.toPointer(data.PackagedAppInfo)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_CONTEXT (size: 32)
 */
export interface AMSI_UAC_REQUEST_CONTEXT {
  /** u32 */
  ulLength: number;
  /** u32 */
  ulRequestorProcessId: number;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_TRUST_STATE */
  UACTrustState: AMSI_UAC_TRUST_STATE;
  /** Windows.Win32.System.Antimalware.AMSI_UAC_REQUEST_TYPE */
  Type: AMSI_UAC_REQUEST_TYPE;
  /** _RequestType_e__Union */
  RequestType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  bAutoElevateRequest: boolean;
}

export const sizeofAMSI_UAC_REQUEST_CONTEXT = 32;

export function allocAMSI_UAC_REQUEST_CONTEXT(data?: Partial<AMSI_UAC_REQUEST_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofAMSI_UAC_REQUEST_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulLength !== undefined) view.setUint32(0, Number(data.ulLength), true);
  // 0x04: u32
  if (data?.ulRequestorProcessId !== undefined) view.setUint32(4, Number(data.ulRequestorProcessId), true);
  // 0x08: i32
  if (data?.UACTrustState !== undefined) view.setInt32(8, Number(data.UACTrustState), true);
  // 0x0c: i32
  if (data?.Type !== undefined) view.setInt32(12, Number(data.Type), true);
  // 0x10: pointer
  if (data?.RequestType !== undefined) view.setBigUint64(16, data.RequestType === null ? 0n : BigInt(util.toPointer(data.RequestType)), true);
  // 0x18: i32
  if (data?.bAutoElevateRequest !== undefined) view.setInt32(24, Number(data.bAutoElevateRequest), true);
  // 0x1c: pad4
  return buf;
}

export type HAMSICONTEXT = Deno.PointerValue;

export type HAMSISESSION = Deno.PointerValue;

export type HRESULT = number;

export type HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libAmsi_dll = Deno.dlopen("Amsi.dll", {
    AmsiInitialize: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    AmsiUninitialize: {
      parameters: ["pointer"],
      result: "void",
    },
    AmsiOpenSession: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AmsiCloseSession: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    AmsiScanBuffer: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    AmsiNotifyOperation: {
      parameters: ["pointer", "pointer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    AmsiScanString: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    InstallELAMCertificateInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function AmsiInitialize(
  appName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  amsiContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAmsi_dll.AmsiInitialize(util.pwstrToFfi(appName), util.toPointer(amsiContext)));
}

export function AmsiUninitialize(
  amsiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSICONTEXT */,
): void /* void */ {
  return libAmsi_dll.AmsiUninitialize(util.toPointer(amsiContext));
}

export function AmsiOpenSession(
  amsiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSICONTEXT */,
  amsiSession: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAmsi_dll.AmsiOpenSession(util.toPointer(amsiContext), util.toPointer(amsiSession)));
}

export function AmsiCloseSession(
  amsiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSICONTEXT */,
  amsiSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSISESSION */,
): void /* void */ {
  return libAmsi_dll.AmsiCloseSession(util.toPointer(amsiContext), util.toPointer(amsiSession));
}

export function AmsiScanBuffer(
  amsiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSICONTEXT */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  length: number /* u32 */,
  contentName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  amsiSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSISESSION */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAmsi_dll.AmsiScanBuffer(util.toPointer(amsiContext), util.toPointer(buffer), length, util.pwstrToFfi(contentName), util.toPointer(amsiSession), util.toPointer(result)));
}

export function AmsiNotifyOperation(
  amsiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSICONTEXT */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  length: number /* u32 */,
  contentName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAmsi_dll.AmsiNotifyOperation(util.toPointer(amsiContext), util.toPointer(buffer), length, util.pwstrToFfi(contentName), util.toPointer(result)));
}

export function AmsiScanString(
  amsiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSICONTEXT */,
  string: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  contentName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  amsiSession: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Antimalware.HAMSISESSION */,
  result: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libAmsi_dll.AmsiScanString(util.toPointer(amsiContext), util.pwstrToFfi(string), util.pwstrToFfi(contentName), util.toPointer(amsiSession), util.toPointer(result)));
}

export function InstallELAMCertificateInfo(
  ELAMFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InstallELAMCertificateInfo(util.toPointer(ELAMFile)));
}

