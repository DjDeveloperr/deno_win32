/// Auto-generated by Deno Win32: Windows.Win32.System.DataExchange.Apis

import * as util from "../../util.ts";

// Enums
export type DDE_ENABLE_CALLBACK_CMD = number;
export type DDE_INITIALIZE_COMMAND = number;
export type DDE_NAME_SERVICE_CMD = number;
export type DDE_CLIENT_TRANSACTION_TYPE = number;
export type CONVINFO_CONVERSATION_STATE = number;
export type CONVINFO_STATUS = number;
export type SECURITY_IMPERSONATION_LEVEL = number;

// Constants
export const EC_ENABLEALL = 0;
export const EC_ENABLEONE = 128;
export const EC_DISABLE = 8;
export const EC_QUERYWAITING = 2;
export const APPCLASS_MONITOR = 1;
export const APPCLASS_STANDARD = 0;
export const APPCMD_CLIENTONLY = 16;
export const APPCMD_FILTERINITS = 32;
export const CBF_FAIL_ALLSVRXACTIONS = 258048;
export const CBF_FAIL_ADVISES = 16384;
export const CBF_FAIL_CONNECTIONS = 8192;
export const CBF_FAIL_EXECUTES = 32768;
export const CBF_FAIL_POKES = 65536;
export const CBF_FAIL_REQUESTS = 131072;
export const CBF_FAIL_SELFCONNECTIONS = 4096;
export const CBF_SKIP_ALLNOTIFICATIONS = 3932160;
export const CBF_SKIP_CONNECT_CONFIRMS = 262144;
export const CBF_SKIP_DISCONNECTS = 2097152;
export const CBF_SKIP_REGISTRATIONS = 524288;
export const CBF_SKIP_UNREGISTRATIONS = 1048576;
export const MF_CALLBACKS = 134217728;
export const MF_CONV = 1073741824;
export const MF_ERRORS = 268435456;
export const MF_HSZ_INFO = 16777216;
export const MF_LINKS = 536870912;
export const MF_POSTMSGS = 67108864;
export const MF_SENDMSGS = 33554432;
export const DNS_REGISTER = 1;
export const DNS_UNREGISTER = 2;
export const DNS_FILTERON = 4;
export const DNS_FILTEROFF = 8;
export const XTYP_ADVSTART = 4144;
export const XTYP_ADVSTOP = 32832;
export const XTYP_EXECUTE = 16464;
export const XTYP_POKE = 16528;
export const XTYP_REQUEST = 8368;
export const XTYP_ADVDATA = 16400;
export const XTYP_ADVREQ = 8226;
export const XTYP_CONNECT = 4194;
export const XTYP_CONNECT_CONFIRM = 32882;
export const XTYP_DISCONNECT = 32962;
export const XTYP_MONITOR = 33010;
export const XTYP_REGISTER = 32930;
export const XTYP_UNREGISTER = 32978;
export const XTYP_WILDCONNECT = 8418;
export const XTYP_XACT_COMPLETE = 32896;
export const XST_ADVACKRCVD = 13;
export const XST_ADVDATAACKRCVD = 16;
export const XST_ADVDATASENT = 15;
export const XST_ADVSENT = 11;
export const XST_CONNECTED = 2;
export const XST_DATARCVD = 6;
export const XST_EXECACKRCVD = 10;
export const XST_EXECSENT = 9;
export const XST_INCOMPLETE = 1;
export const XST_INIT1 = 3;
export const XST_INIT2 = 4;
export const XST_NULL = 0;
export const XST_POKEACKRCVD = 8;
export const XST_POKESENT = 7;
export const XST_REQSENT = 5;
export const XST_UNADVACKRCVD = 14;
export const XST_UNADVSENT = 12;
export const ST_ADVISE = 2;
export const ST_BLOCKED = 8;
export const ST_BLOCKNEXT = 128;
export const ST_CLIENT = 16;
export const ST_CONNECTED = 1;
export const ST_INLIST = 64;
export const ST_ISLOCAL = 4;
export const ST_ISSELF = 256;
export const ST_TERMINATED = 32;
export const WM_DDE_FIRST = 992;
export const WM_DDE_INITIATE = 992;
export const WM_DDE_TERMINATE = 993;
export const WM_DDE_ADVISE = 994;
export const WM_DDE_UNADVISE = 995;
export const WM_DDE_ACK = 996;
export const WM_DDE_DATA = 997;
export const WM_DDE_REQUEST = 998;
export const WM_DDE_POKE = 999;
export const WM_DDE_EXECUTE = 1000;
export const WM_DDE_LAST = 1000;
export const CADV_LATEACK = 65535;
export const DDE_FACK = 32768;
export const DDE_FBUSY = 16384;
export const DDE_FDEFERUPD = 16384;
export const DDE_FACKREQ = 32768;
export const DDE_FRELEASE = 8192;
export const DDE_FREQUESTED = 4096;
export const DDE_FAPPSTATUS = 255;
export const DDE_FNOTPROCESSED = 0;
export const MSGF_DDEMGR = 32769;
export const CP_WINANSI = 1004;
export const CP_WINUNICODE = 1200;
export const CP_WINNEUTRAL = 1200;
export const XTYPF_NOBLOCK = 2;
export const XTYPF_NODATA = 4;
export const XTYPF_ACKREQ = 8;
export const XCLASS_MASK = 64512;
export const XCLASS_BOOL = 4096;
export const XCLASS_DATA = 8192;
export const XCLASS_FLAGS = 16384;
export const XCLASS_NOTIFICATION = 32768;
export const XTYP_MASK = 240;
export const XTYP_SHIFT = 4;
export const TIMEOUT_ASYNC = 4294967295;
export const QID_SYNC = 4294967295;
export const SZDDESYS_TOPIC = "System";
export const SZDDESYS_ITEM_TOPICS = "Topics";
export const SZDDESYS_ITEM_SYSITEMS = "SysItems";
export const SZDDESYS_ITEM_RTNMSG = "ReturnMessage";
export const SZDDESYS_ITEM_STATUS = "Status";
export const SZDDESYS_ITEM_FORMATS = "Formats";
export const SZDDESYS_ITEM_HELP = "Help";
export const SZDDE_ITEM_ITEMLIST = "TopicItemList";
export const APPCMD_MASK = 4080;
export const APPCLASS_MASK = 15;
export const HDATA_APPOWNED = 1;
export const DMLERR_NO_ERROR = 0;
export const DMLERR_FIRST = 16384;
export const DMLERR_ADVACKTIMEOUT = 16384;
export const DMLERR_BUSY = 16385;
export const DMLERR_DATAACKTIMEOUT = 16386;
export const DMLERR_DLL_NOT_INITIALIZED = 16387;
export const DMLERR_DLL_USAGE = 16388;
export const DMLERR_EXECACKTIMEOUT = 16389;
export const DMLERR_INVALIDPARAMETER = 16390;
export const DMLERR_LOW_MEMORY = 16391;
export const DMLERR_MEMORY_ERROR = 16392;
export const DMLERR_NOTPROCESSED = 16393;
export const DMLERR_NO_CONV_ESTABLISHED = 16394;
export const DMLERR_POKEACKTIMEOUT = 16395;
export const DMLERR_POSTMSG_FAILED = 16396;
export const DMLERR_REENTRANCY = 16397;
export const DMLERR_SERVER_DIED = 16398;
export const DMLERR_SYS_ERROR = 16399;
export const DMLERR_UNADVACKTIMEOUT = 16400;
export const DMLERR_UNFOUND_QUEUE_ID = 16401;
export const DMLERR_LAST = 16401;
export const MH_CREATE = 1;
export const MH_KEEP = 2;
export const MH_DELETE = 3;
export const MH_CLEANUP = 4;
export const MAX_MONITORS = 4;
export const MF_MASK = 4278190080;
export const SecurityAnonymous = 0;
export const SecurityIdentification = 1;
export const SecurityImpersonation = 2;
export const SecurityDelegation = 3;

// Structs

export type HSZ = Deno.PointerValue;

export type HCONV = Deno.PointerValue;

export type HCONVLIST = Deno.PointerValue;

export type HDDEDATA = Deno.PointerValue;

/**
 * Windows.Win32.System.DataExchange.DDEACK (size: 8)
 */
export interface DDEACK {
  /** u16 */
  _bitfield: number;
}

export const sizeofDDEACK = 8;

export function allocDDEACK(data?: Partial<DDEACK>): Uint8Array {
  const buf = new Uint8Array(sizeofDDEACK);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.DDEADVISE (size: 8)
 */
export interface DDEADVISE {
  /** u16 */
  _bitfield: number;
  /** i16 */
  cfFormat: number;
}

export const sizeofDDEADVISE = 8;

export function allocDDEADVISE(data?: Partial<DDEADVISE>): Uint8Array {
  const buf = new Uint8Array(sizeofDDEADVISE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: i16
  if (data?.cfFormat !== undefined) view.setInt16(2, Number(data.cfFormat), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.DDEDATA (size: 16)
 */
export interface DDEDATA {
  /** u16 */
  _bitfield: number;
  /** i16 */
  cfFormat: number;
  /** array */
  Value: Deno.PointerValue | null;
}

export const sizeofDDEDATA = 16;

export function allocDDEDATA(data?: Partial<DDEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: i16
  if (data?.cfFormat !== undefined) view.setInt16(2, Number(data.cfFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.DDEPOKE (size: 16)
 */
export interface DDEPOKE {
  /** u16 */
  _bitfield: number;
  /** i16 */
  cfFormat: number;
  /** array */
  Value: Deno.PointerValue | null;
}

export const sizeofDDEPOKE = 16;

export function allocDDEPOKE(data?: Partial<DDEPOKE>): Uint8Array {
  const buf = new Uint8Array(sizeofDDEPOKE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: i16
  if (data?.cfFormat !== undefined) view.setInt16(2, Number(data.cfFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.DDELN (size: 8)
 */
export interface DDELN {
  /** u16 */
  _bitfield: number;
  /** i16 */
  cfFormat: number;
}

export const sizeofDDELN = 8;

export function allocDDELN(data?: Partial<DDELN>): Uint8Array {
  const buf = new Uint8Array(sizeofDDELN);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: i16
  if (data?.cfFormat !== undefined) view.setInt16(2, Number(data.cfFormat), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.DDEUP (size: 16)
 */
export interface DDEUP {
  /** u16 */
  _bitfield: number;
  /** i16 */
  cfFormat: number;
  /** array */
  rgb: Deno.PointerValue | null;
}

export const sizeofDDEUP = 16;

export function allocDDEUP(data?: Partial<DDEUP>): Uint8Array {
  const buf = new Uint8Array(sizeofDDEUP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: i16
  if (data?.cfFormat !== undefined) view.setInt16(2, Number(data.cfFormat), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgb !== undefined) view.setBigUint64(8, data.rgb === null ? 0n : BigInt(util.toPointer(data.rgb)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.HSZPAIR (size: 16)
 */
export interface HSZPAIR {
  /** Windows.Win32.System.DataExchange.HSZ */
  hszSvc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszTopic: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHSZPAIR = 16;

export function allocHSZPAIR(data?: Partial<HSZPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofHSZPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hszSvc !== undefined) view.setBigUint64(0, data.hszSvc === null ? 0n : BigInt(util.toPointer(data.hszSvc)), true);
  // 0x08: pointer
  if (data?.hszTopic !== undefined) view.setBigUint64(8, data.hszTopic === null ? 0n : BigInt(util.toPointer(data.hszTopic)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Security.SECURITY_QUALITY_OF_SERVICE (size: 24)
 */
export interface SECURITY_QUALITY_OF_SERVICE {
  /** u32 */
  Length: number;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL;
  /** u8 */
  ContextTrackingMode: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  EffectiveOnly: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECURITY_QUALITY_OF_SERVICE = 24;

export function allocSECURITY_QUALITY_OF_SERVICE(data?: Partial<SECURITY_QUALITY_OF_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_QUALITY_OF_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: i32
  if (data?.ImpersonationLevel !== undefined) view.setInt32(4, Number(data.ImpersonationLevel), true);
  // 0x08: u8
  if (data?.ContextTrackingMode !== undefined) view.setUint8(8, Number(data.ContextTrackingMode));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.EffectiveOnly !== undefined) view.setBigUint64(16, data.EffectiveOnly === null ? 0n : BigInt(util.toPointer(data.EffectiveOnly)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.CONVCONTEXT (size: 32)
 */
export interface CONVCONTEXT {
  /** u32 */
  cb: number;
  /** u32 */
  wFlags: number;
  /** u32 */
  wCountryID: number;
  /** i32 */
  iCodePage: number;
  /** u32 */
  dwLangID: number;
  /** u32 */
  dwSecurity: number;
  /** Windows.Win32.Security.SECURITY_QUALITY_OF_SERVICE */
  qos: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONVCONTEXT = 32;

export function allocCONVCONTEXT(data?: Partial<CONVCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONVCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.wFlags !== undefined) view.setUint32(4, Number(data.wFlags), true);
  // 0x08: u32
  if (data?.wCountryID !== undefined) view.setUint32(8, Number(data.wCountryID), true);
  // 0x0c: i32
  if (data?.iCodePage !== undefined) view.setInt32(12, Number(data.iCodePage), true);
  // 0x10: u32
  if (data?.dwLangID !== undefined) view.setUint32(16, Number(data.dwLangID), true);
  // 0x14: u32
  if (data?.dwSecurity !== undefined) view.setUint32(20, Number(data.dwSecurity), true);
  // 0x18: pointer
  if (data?.qos !== undefined) view.setBigUint64(24, data.qos === null ? 0n : BigInt(util.toPointer(data.qos)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.System.DataExchange.CONVINFO (size: 112)
 */
export interface CONVINFO {
  /** u32 */
  cb: number;
  /** usize */
  hUser: Deno.PointerValue;
  /** Windows.Win32.System.DataExchange.HCONV */
  hConvPartner: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszSvcPartner: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszServiceReq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszTopic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszItem: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wFmt: number;
  /** Windows.Win32.System.DataExchange.DDE_CLIENT_TRANSACTION_TYPE */
  wType: DDE_CLIENT_TRANSACTION_TYPE;
  /** Windows.Win32.System.DataExchange.CONVINFO_STATUS */
  wStatus: CONVINFO_STATUS;
  /** Windows.Win32.System.DataExchange.CONVINFO_CONVERSATION_STATE */
  wConvst: CONVINFO_CONVERSATION_STATE;
  /** u32 */
  wLastError: number;
  /** Windows.Win32.System.DataExchange.HCONVLIST */
  hConvList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.CONVCONTEXT */
  ConvCtxt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndPartner: Deno.PointerValue | null;
}

export const sizeofCONVINFO = 112;

export function allocCONVINFO(data?: Partial<CONVINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONVINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hUser !== undefined) view.setBigUint64(8, BigInt(data.hUser), true);
  // 0x10: pointer
  if (data?.hConvPartner !== undefined) view.setBigUint64(16, data.hConvPartner === null ? 0n : BigInt(util.toPointer(data.hConvPartner)), true);
  // 0x18: pointer
  if (data?.hszSvcPartner !== undefined) view.setBigUint64(24, data.hszSvcPartner === null ? 0n : BigInt(util.toPointer(data.hszSvcPartner)), true);
  // 0x20: pointer
  if (data?.hszServiceReq !== undefined) view.setBigUint64(32, data.hszServiceReq === null ? 0n : BigInt(util.toPointer(data.hszServiceReq)), true);
  // 0x28: pointer
  if (data?.hszTopic !== undefined) view.setBigUint64(40, data.hszTopic === null ? 0n : BigInt(util.toPointer(data.hszTopic)), true);
  // 0x30: pointer
  if (data?.hszItem !== undefined) view.setBigUint64(48, data.hszItem === null ? 0n : BigInt(util.toPointer(data.hszItem)), true);
  // 0x38: u32
  if (data?.wFmt !== undefined) view.setUint32(56, Number(data.wFmt), true);
  // 0x3c: u32
  if (data?.wType !== undefined) view.setUint32(60, Number(data.wType), true);
  // 0x40: u32
  if (data?.wStatus !== undefined) view.setUint32(64, Number(data.wStatus), true);
  // 0x44: u32
  if (data?.wConvst !== undefined) view.setUint32(68, Number(data.wConvst), true);
  // 0x48: u32
  if (data?.wLastError !== undefined) view.setUint32(72, Number(data.wLastError), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.hConvList !== undefined) view.setBigUint64(80, data.hConvList === null ? 0n : BigInt(util.toPointer(data.hConvList)), true);
  // 0x58: pointer
  if (data?.ConvCtxt !== undefined) view.setBigUint64(88, data.ConvCtxt === null ? 0n : BigInt(util.toPointer(data.ConvCtxt)), true);
  // 0x60: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(96, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x68: pointer
  if (data?.hwndPartner !== undefined) view.setBigUint64(104, data.hwndPartner === null ? 0n : BigInt(util.toPointer(data.hwndPartner)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.DDEML_MSG_HOOK_DATA (size: 32)
 */
export interface DDEML_MSG_HOOK_DATA {
  /** usize */
  uiLo: Deno.PointerValue;
  /** usize */
  uiHi: Deno.PointerValue;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofDDEML_MSG_HOOK_DATA = 32;

export function allocDDEML_MSG_HOOK_DATA(data?: Partial<DDEML_MSG_HOOK_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDEML_MSG_HOOK_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.uiLo !== undefined) view.setBigUint64(0, BigInt(data.uiLo), true);
  // 0x08: usize
  if (data?.uiHi !== undefined) view.setBigUint64(8, BigInt(data.uiHi), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type WPARAM = Deno.PointerValue;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.System.DataExchange.MONMSGSTRUCT (size: 64)
 */
export interface MONMSGSTRUCT {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.HWND */
  hwndTo: Deno.PointerValue | null;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wMsg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.DDEML_MSG_HOOK_DATA */
  dmhd: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMONMSGSTRUCT = 64;

export function allocMONMSGSTRUCT(data?: Partial<MONMSGSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMONMSGSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndTo !== undefined) view.setBigUint64(8, data.hwndTo === null ? 0n : BigInt(util.toPointer(data.hwndTo)), true);
  // 0x10: u32
  if (data?.dwTime !== undefined) view.setUint32(16, Number(data.dwTime), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hTask !== undefined) view.setBigUint64(24, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x20: u32
  if (data?.wMsg !== undefined) view.setUint32(32, Number(data.wMsg), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.wParam !== undefined) view.setBigUint64(40, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x38: pointer
  if (data?.dmhd !== undefined) view.setBigUint64(56, data.dmhd === null ? 0n : BigInt(util.toPointer(data.dmhd)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.MONCBSTRUCT (size: 104)
 */
export interface MONCBSTRUCT {
  /** u32 */
  cb: number;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwRet: number;
  /** u32 */
  wType: number;
  /** u32 */
  wFmt: number;
  /** Windows.Win32.System.DataExchange.HCONV */
  hConv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hsz1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hsz2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HDDEDATA */
  hData: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwData1: Deno.PointerValue;
  /** usize */
  dwData2: Deno.PointerValue;
  /** Windows.Win32.System.DataExchange.CONVCONTEXT */
  cc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofMONCBSTRUCT = 104;

export function allocMONCBSTRUCT(data?: Partial<MONCBSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMONCBSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.dwTime !== undefined) view.setUint32(4, Number(data.dwTime), true);
  // 0x08: pointer
  if (data?.hTask !== undefined) view.setBigUint64(8, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x10: u32
  if (data?.dwRet !== undefined) view.setUint32(16, Number(data.dwRet), true);
  // 0x14: u32
  if (data?.wType !== undefined) view.setUint32(20, Number(data.wType), true);
  // 0x18: u32
  if (data?.wFmt !== undefined) view.setUint32(24, Number(data.wFmt), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hConv !== undefined) view.setBigUint64(32, data.hConv === null ? 0n : BigInt(util.toPointer(data.hConv)), true);
  // 0x28: pointer
  if (data?.hsz1 !== undefined) view.setBigUint64(40, data.hsz1 === null ? 0n : BigInt(util.toPointer(data.hsz1)), true);
  // 0x30: pointer
  if (data?.hsz2 !== undefined) view.setBigUint64(48, data.hsz2 === null ? 0n : BigInt(util.toPointer(data.hsz2)), true);
  // 0x38: pointer
  if (data?.hData !== undefined) view.setBigUint64(56, data.hData === null ? 0n : BigInt(util.toPointer(data.hData)), true);
  // 0x40: usize
  if (data?.dwData1 !== undefined) view.setBigUint64(64, BigInt(data.dwData1), true);
  // 0x48: usize
  if (data?.dwData2 !== undefined) view.setBigUint64(72, BigInt(data.dwData2), true);
  // 0x50: pointer
  if (data?.cc !== undefined) view.setBigUint64(80, data.cc === null ? 0n : BigInt(util.toPointer(data.cc)), true);
  // 0x58: u32
  if (data?.cbData !== undefined) view.setUint32(88, Number(data.cbData), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Data !== undefined) view.setBigUint64(96, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.System.DataExchange.MONHSZSTRUCTA (size: 40)
 */
export interface MONHSZSTRUCTA {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.BOOL */
  fsAction: boolean;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.System.DataExchange.HSZ */
  hsz: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** array */
  str: Deno.PointerValue | null;
}

export const sizeofMONHSZSTRUCTA = 40;

export function allocMONHSZSTRUCTA(data?: Partial<MONHSZSTRUCTA>): Uint8Array {
  const buf = new Uint8Array(sizeofMONHSZSTRUCTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: i32
  if (data?.fsAction !== undefined) view.setInt32(4, Number(data.fsAction), true);
  // 0x08: u32
  if (data?.dwTime !== undefined) view.setUint32(8, Number(data.dwTime), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hsz !== undefined) view.setBigUint64(16, data.hsz === null ? 0n : BigInt(util.toPointer(data.hsz)), true);
  // 0x18: pointer
  if (data?.hTask !== undefined) view.setBigUint64(24, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x20: pointer
  if (data?.str !== undefined) view.setBigUint64(32, data.str === null ? 0n : BigInt(util.toPointer(data.str)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.MONHSZSTRUCTW (size: 40)
 */
export interface MONHSZSTRUCTW {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.BOOL */
  fsAction: boolean;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.System.DataExchange.HSZ */
  hsz: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** array */
  str: Deno.PointerValue | null;
}

export const sizeofMONHSZSTRUCTW = 40;

export function allocMONHSZSTRUCTW(data?: Partial<MONHSZSTRUCTW>): Uint8Array {
  const buf = new Uint8Array(sizeofMONHSZSTRUCTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: i32
  if (data?.fsAction !== undefined) view.setInt32(4, Number(data.fsAction), true);
  // 0x08: u32
  if (data?.dwTime !== undefined) view.setUint32(8, Number(data.dwTime), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hsz !== undefined) view.setBigUint64(16, data.hsz === null ? 0n : BigInt(util.toPointer(data.hsz)), true);
  // 0x18: pointer
  if (data?.hTask !== undefined) view.setBigUint64(24, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x20: pointer
  if (data?.str !== undefined) view.setBigUint64(32, data.str === null ? 0n : BigInt(util.toPointer(data.str)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.MONERRSTRUCT (size: 24)
 */
export interface MONERRSTRUCT {
  /** u32 */
  cb: number;
  /** u32 */
  wLastError: number;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMONERRSTRUCT = 24;

export function allocMONERRSTRUCT(data?: Partial<MONERRSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMONERRSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.wLastError !== undefined) view.setUint32(4, Number(data.wLastError), true);
  // 0x08: u32
  if (data?.dwTime !== undefined) view.setUint32(8, Number(data.dwTime), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hTask !== undefined) view.setBigUint64(16, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.MONLINKSTRUCT (size: 72)
 */
export interface MONLINKSTRUCT {
  /** u32 */
  cb: number;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fEstablished: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNoData: boolean;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszSvc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszTopic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszItem: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  wFmt: number;
  /** Windows.Win32.Foundation.BOOL */
  fServer: boolean;
  /** Windows.Win32.System.DataExchange.HCONV */
  hConvServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HCONV */
  hConvClient: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMONLINKSTRUCT = 72;

export function allocMONLINKSTRUCT(data?: Partial<MONLINKSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMONLINKSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.dwTime !== undefined) view.setUint32(4, Number(data.dwTime), true);
  // 0x08: pointer
  if (data?.hTask !== undefined) view.setBigUint64(8, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x10: i32
  if (data?.fEstablished !== undefined) view.setInt32(16, Number(data.fEstablished), true);
  // 0x14: i32
  if (data?.fNoData !== undefined) view.setInt32(20, Number(data.fNoData), true);
  // 0x18: pointer
  if (data?.hszSvc !== undefined) view.setBigUint64(24, data.hszSvc === null ? 0n : BigInt(util.toPointer(data.hszSvc)), true);
  // 0x20: pointer
  if (data?.hszTopic !== undefined) view.setBigUint64(32, data.hszTopic === null ? 0n : BigInt(util.toPointer(data.hszTopic)), true);
  // 0x28: pointer
  if (data?.hszItem !== undefined) view.setBigUint64(40, data.hszItem === null ? 0n : BigInt(util.toPointer(data.hszItem)), true);
  // 0x30: u32
  if (data?.wFmt !== undefined) view.setUint32(48, Number(data.wFmt), true);
  // 0x34: i32
  if (data?.fServer !== undefined) view.setInt32(52, Number(data.fServer), true);
  // 0x38: pointer
  if (data?.hConvServer !== undefined) view.setBigUint64(56, data.hConvServer === null ? 0n : BigInt(util.toPointer(data.hConvServer)), true);
  // 0x40: pointer
  if (data?.hConvClient !== undefined) view.setBigUint64(64, data.hConvClient === null ? 0n : BigInt(util.toPointer(data.hConvClient)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.MONCONVSTRUCT (size: 56)
 */
export interface MONCONVSTRUCT {
  /** u32 */
  cb: number;
  /** Windows.Win32.Foundation.BOOL */
  fConnect: boolean;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszSvc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HSZ */
  hszTopic: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HCONV */
  hConvClient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.DataExchange.HCONV */
  hConvServer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMONCONVSTRUCT = 56;

export function allocMONCONVSTRUCT(data?: Partial<MONCONVSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMONCONVSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: i32
  if (data?.fConnect !== undefined) view.setInt32(4, Number(data.fConnect), true);
  // 0x08: u32
  if (data?.dwTime !== undefined) view.setUint32(8, Number(data.dwTime), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hTask !== undefined) view.setBigUint64(16, data.hTask === null ? 0n : BigInt(util.toPointer(data.hTask)), true);
  // 0x18: pointer
  if (data?.hszSvc !== undefined) view.setBigUint64(24, data.hszSvc === null ? 0n : BigInt(util.toPointer(data.hszSvc)), true);
  // 0x20: pointer
  if (data?.hszTopic !== undefined) view.setBigUint64(32, data.hszTopic === null ? 0n : BigInt(util.toPointer(data.hszTopic)), true);
  // 0x28: pointer
  if (data?.hConvClient !== undefined) view.setBigUint64(40, data.hConvClient === null ? 0n : BigInt(util.toPointer(data.hConvClient)), true);
  // 0x30: pointer
  if (data?.hConvServer !== undefined) view.setBigUint64(48, data.hConvServer === null ? 0n : BigInt(util.toPointer(data.hConvServer)), true);
  return buf;
}

export type HMETAFILE = Deno.PointerValue;

/**
 * Windows.Win32.System.DataExchange.METAFILEPICT (size: 24)
 */
export interface METAFILEPICT {
  /** i32 */
  mm: number;
  /** i32 */
  xExt: number;
  /** i32 */
  yExt: number;
  /** Windows.Win32.Graphics.Gdi.HMETAFILE */
  hMF: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMETAFILEPICT = 24;

export function allocMETAFILEPICT(data?: Partial<METAFILEPICT>): Uint8Array {
  const buf = new Uint8Array(sizeofMETAFILEPICT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mm !== undefined) view.setInt32(0, Number(data.mm), true);
  // 0x04: i32
  if (data?.xExt !== undefined) view.setInt32(4, Number(data.xExt), true);
  // 0x08: i32
  if (data?.yExt !== undefined) view.setInt32(8, Number(data.yExt), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hMF !== undefined) view.setBigUint64(16, data.hMF === null ? 0n : BigInt(util.toPointer(data.hMF)), true);
  return buf;
}

/**
 * Windows.Win32.System.DataExchange.COPYDATASTRUCT (size: 24)
 */
export interface COPYDATASTRUCT {
  /** usize */
  dwData: Deno.PointerValue;
  /** u32 */
  cbData: number;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCOPYDATASTRUCT = 24;

export function allocCOPYDATASTRUCT(data?: Partial<COPYDATASTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCOPYDATASTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwData !== undefined) view.setBigUint64(0, BigInt(data.dwData), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpData !== undefined) view.setBigUint64(16, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HDC = Deno.PointerValue;

export type HENHMETAFILE = Deno.PointerValue;

// Native Libraries

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    DdeSetQualityOfService: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImpersonateDdeClientWindow: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PackDDElParam: {
      parameters: ["u32", "usize", "usize"],
      result: "pointer",
    },
    UnpackDDElParam: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FreeDDElParam: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    ReuseDDElParam: {
      parameters: ["pointer", "u32", "u32", "usize", "usize"],
      result: "pointer",
    },
    DdeInitializeA: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    DdeInitializeW: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    DdeUninitialize: {
      parameters: ["u32"],
      result: "i32",
    },
    DdeConnectList: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DdeQueryNextServer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdeDisconnectList: {
      parameters: ["pointer"],
      result: "i32",
    },
    DdeConnect: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DdeDisconnect: {
      parameters: ["pointer"],
      result: "i32",
    },
    DdeReconnect: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DdeQueryConvInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    DdeSetUserHandle: {
      parameters: ["pointer", "u32", "usize"],
      result: "i32",
    },
    DdeAbandonTransaction: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    DdePostAdvise: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    DdeEnableCallback: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    DdeImpersonateClient: {
      parameters: ["pointer"],
      result: "i32",
    },
    DdeNameService: {
      parameters: ["u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    DdeClientTransaction: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    DdeCreateDataHandle: {
      parameters: ["u32", "pointer", "u32", "u32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    DdeAddData: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    DdeGetData: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    DdeAccessData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DdeUnaccessData: {
      parameters: ["pointer"],
      result: "i32",
    },
    DdeFreeDataHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    DdeGetLastError: {
      parameters: ["u32"],
      result: "u32",
    },
    DdeCreateStringHandleA: {
      parameters: ["u32", "buffer", "i32"],
      result: "pointer",
    },
    DdeCreateStringHandleW: {
      parameters: ["u32", "buffer", "i32"],
      result: "pointer",
    },
    DdeQueryStringA: {
      parameters: ["u32", "pointer", "buffer", "u32", "i32"],
      result: "u32",
    },
    DdeQueryStringW: {
      parameters: ["u32", "pointer", "buffer", "u32", "i32"],
      result: "u32",
    },
    DdeFreeStringHandle: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    DdeKeepStringHandle: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    DdeCmpStringHandles: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    OpenClipboard: {
      parameters: ["pointer"],
      result: "i32",
    },
    CloseClipboard: {
      parameters: [],
      result: "i32",
    },
    GetClipboardSequenceNumber: {
      parameters: [],
      result: "u32",
    },
    GetClipboardOwner: {
      parameters: [],
      result: "pointer",
    },
    SetClipboardViewer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetClipboardViewer: {
      parameters: [],
      result: "pointer",
    },
    ChangeClipboardChain: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetClipboardData: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    GetClipboardData: {
      parameters: ["u32"],
      result: "pointer",
    },
    RegisterClipboardFormatA: {
      parameters: ["buffer"],
      result: "u32",
    },
    RegisterClipboardFormatW: {
      parameters: ["buffer"],
      result: "u32",
    },
    CountClipboardFormats: {
      parameters: [],
      result: "i32",
    },
    EnumClipboardFormats: {
      parameters: ["u32"],
      result: "u32",
    },
    GetClipboardFormatNameA: {
      parameters: ["u32", "buffer", "i32"],
      result: "i32",
    },
    GetClipboardFormatNameW: {
      parameters: ["u32", "buffer", "i32"],
      result: "i32",
    },
    EmptyClipboard: {
      parameters: [],
      result: "i32",
    },
    IsClipboardFormatAvailable: {
      parameters: ["u32"],
      result: "i32",
    },
    GetPriorityClipboardFormat: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    GetOpenClipboardWindow: {
      parameters: [],
      result: "pointer",
    },
    AddClipboardFormatListener: {
      parameters: ["pointer"],
      result: "i32",
    },
    RemoveClipboardFormatListener: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetUpdatedClipboardFormats: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    SetWinMetaFileBits: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    GlobalDeleteAtom: {
      parameters: ["u16"],
      result: "u16",
    },
    InitAtomTable: {
      parameters: ["u32"],
      result: "i32",
    },
    DeleteAtom: {
      parameters: ["u16"],
      result: "u16",
    },
    GlobalAddAtomA: {
      parameters: ["buffer"],
      result: "u16",
    },
    GlobalAddAtomW: {
      parameters: ["buffer"],
      result: "u16",
    },
    GlobalAddAtomExA: {
      parameters: ["buffer", "u32"],
      result: "u16",
    },
    GlobalAddAtomExW: {
      parameters: ["buffer", "u32"],
      result: "u16",
    },
    GlobalFindAtomA: {
      parameters: ["buffer"],
      result: "u16",
    },
    GlobalFindAtomW: {
      parameters: ["buffer"],
      result: "u16",
    },
    GlobalGetAtomNameA: {
      parameters: ["u16", "buffer", "i32"],
      result: "u32",
    },
    GlobalGetAtomNameW: {
      parameters: ["u16", "buffer", "i32"],
      result: "u32",
    },
    AddAtomA: {
      parameters: ["buffer"],
      result: "u16",
    },
    AddAtomW: {
      parameters: ["buffer"],
      result: "u16",
    },
    FindAtomA: {
      parameters: ["buffer"],
      result: "u16",
    },
    FindAtomW: {
      parameters: ["buffer"],
      result: "u16",
    },
    GetAtomNameA: {
      parameters: ["u16", "buffer", "i32"],
      result: "u32",
    },
    GetAtomNameW: {
      parameters: ["u16", "buffer", "i32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DdeSetQualityOfService(
  hwndClient: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pqosNew: Deno.PointerValue | Uint8Array | null /* ptr */,
  pqosPrev: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeSetQualityOfService(util.hwndToFfi(hwndClient), util.toPointer(pqosNew), util.toPointer(pqosPrev)));
}

export function ImpersonateDdeClientWindow(
  hWndClient: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hWndServer: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ImpersonateDdeClientWindow(util.hwndToFfi(hWndClient), util.hwndToFfi(hWndServer)));
}

export function PackDDElParam(
  msg: number /* u32 */,
  uiLo: Deno.PointerValue /* usize */,
  uiHi: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */ {
  return util.pointerFromFfi(libUSER32_dll.PackDDElParam(msg, uiLo, uiHi));
}

export function UnpackDDElParam(
  msg: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  puiLo: Deno.PointerValue | Uint8Array | null /* ptr */,
  puiHi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnpackDDElParam(msg, util.toPointer(lParam), util.toPointer(puiLo), util.toPointer(puiHi)));
}

export function FreeDDElParam(
  msg: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.FreeDDElParam(msg, util.toPointer(lParam)));
}

export function ReuseDDElParam(
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  msgIn: number /* u32 */,
  msgOut: number /* u32 */,
  uiLo: Deno.PointerValue /* usize */,
  uiHi: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */ {
  return util.pointerFromFfi(libUSER32_dll.ReuseDDElParam(util.toPointer(lParam), msgIn, msgOut, uiLo, uiHi));
}

export function DdeInitializeA(
  pidInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.PFNCALLBACK */,
  afCmd: DDE_INITIALIZE_COMMAND /* Windows.Win32.System.DataExchange.DDE_INITIALIZE_COMMAND */,
  ulRes: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.DdeInitializeA(util.toPointer(pidInst), util.toPointer(pfnCallback), afCmd, ulRes);
}

export function DdeInitializeW(
  pidInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.PFNCALLBACK */,
  afCmd: DDE_INITIALIZE_COMMAND /* Windows.Win32.System.DataExchange.DDE_INITIALIZE_COMMAND */,
  ulRes: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.DdeInitializeW(util.toPointer(pidInst), util.toPointer(pfnCallback), afCmd, ulRes);
}

export function DdeUninitialize(
  idInst: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeUninitialize(idInst));
}

export function DdeConnectList(
  idInst: number /* u32 */,
  hszService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  hszTopic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  hConvList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONVLIST */,
  pCC: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONVLIST */ {
  return util.pointerFromFfi(libUSER32_dll.DdeConnectList(idInst, util.toPointer(hszService), util.toPointer(hszTopic), util.toPointer(hConvList), util.toPointer(pCC)));
}

export function DdeQueryNextServer(
  hConvList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONVLIST */,
  hConvPrev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */ {
  return util.pointerFromFfi(libUSER32_dll.DdeQueryNextServer(util.toPointer(hConvList), util.toPointer(hConvPrev)));
}

export function DdeDisconnectList(
  hConvList: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONVLIST */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeDisconnectList(util.toPointer(hConvList)));
}

export function DdeConnect(
  idInst: number /* u32 */,
  hszService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  hszTopic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  pCC: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */ {
  return util.pointerFromFfi(libUSER32_dll.DdeConnect(idInst, util.toPointer(hszService), util.toPointer(hszTopic), util.toPointer(pCC)));
}

export function DdeDisconnect(
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeDisconnect(util.toPointer(hConv)));
}

export function DdeReconnect(
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */ {
  return util.pointerFromFfi(libUSER32_dll.DdeReconnect(util.toPointer(hConv)));
}

export function DdeQueryConvInfo(
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
  idTransaction: number /* u32 */,
  pConvInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libUSER32_dll.DdeQueryConvInfo(util.toPointer(hConv), idTransaction, util.toPointer(pConvInfo));
}

export function DdeSetUserHandle(
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
  id: number /* u32 */,
  hUser: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeSetUserHandle(util.toPointer(hConv), id, hUser));
}

export function DdeAbandonTransaction(
  idInst: number /* u32 */,
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
  idTransaction: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeAbandonTransaction(idInst, util.toPointer(hConv), idTransaction));
}

export function DdePostAdvise(
  idInst: number /* u32 */,
  hszTopic: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  hszItem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdePostAdvise(idInst, util.toPointer(hszTopic), util.toPointer(hszItem)));
}

export function DdeEnableCallback(
  idInst: number /* u32 */,
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
  wCmd: DDE_ENABLE_CALLBACK_CMD /* Windows.Win32.System.DataExchange.DDE_ENABLE_CALLBACK_CMD */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeEnableCallback(idInst, util.toPointer(hConv), wCmd));
}

export function DdeImpersonateClient(
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeImpersonateClient(util.toPointer(hConv)));
}

export function DdeNameService(
  idInst: number /* u32 */,
  hsz1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  hsz2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  afCmd: DDE_NAME_SERVICE_CMD /* Windows.Win32.System.DataExchange.DDE_NAME_SERVICE_CMD */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */ {
  return util.pointerFromFfi(libUSER32_dll.DdeNameService(idInst, util.toPointer(hsz1), util.toPointer(hsz2), afCmd));
}

export function DdeClientTransaction(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  hConv: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HCONV */,
  hszItem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  wFmt: number /* u32 */,
  wType: DDE_CLIENT_TRANSACTION_TYPE /* Windows.Win32.System.DataExchange.DDE_CLIENT_TRANSACTION_TYPE */,
  dwTimeout: number /* u32 */,
  pdwResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */ {
  return util.pointerFromFfi(libUSER32_dll.DdeClientTransaction(util.toPointer(pData), cbData, util.toPointer(hConv), util.toPointer(hszItem), wFmt, wType, dwTimeout, util.toPointer(pdwResult)));
}

export function DdeCreateDataHandle(
  idInst: number /* u32 */,
  pSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  cbOff: number /* u32 */,
  hszItem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  wFmt: number /* u32 */,
  afCmd: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */ {
  return util.pointerFromFfi(libUSER32_dll.DdeCreateDataHandle(idInst, util.toPointer(pSrc), cb, cbOff, util.toPointer(hszItem), wFmt, afCmd));
}

export function DdeAddData(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */,
  pSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  cbOff: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */ {
  return util.pointerFromFfi(libUSER32_dll.DdeAddData(util.toPointer(hData), util.toPointer(pSrc), cb, cbOff));
}

export function DdeGetData(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */,
  pDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbMax: number /* u32 */,
  cbOff: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.DdeGetData(util.toPointer(hData), util.toPointer(pDst), cbMax, cbOff);
}

export function DdeAccessData(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */,
  pcbDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libUSER32_dll.DdeAccessData(util.toPointer(hData), util.toPointer(pcbDataSize)));
}

export function DdeUnaccessData(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeUnaccessData(util.toPointer(hData)));
}

export function DdeFreeDataHandle(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HDDEDATA */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeFreeDataHandle(util.toPointer(hData)));
}

export function DdeGetLastError(
  idInst: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.DdeGetLastError(idInst);
}

export function DdeCreateStringHandleA(
  idInst: number /* u32 */,
  psz: string | null /* Windows.Win32.Foundation.PSTR */,
  iCodePage: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */ {
  return util.pointerFromFfi(libUSER32_dll.DdeCreateStringHandleA(idInst, util.pstrToFfi(psz), iCodePage));
}

export function DdeCreateStringHandleW(
  idInst: number /* u32 */,
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  iCodePage: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */ {
  return util.pointerFromFfi(libUSER32_dll.DdeCreateStringHandleW(idInst, util.pwstrToFfi(psz), iCodePage));
}

export function DdeQueryStringA(
  idInst: number /* u32 */,
  hsz: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  psz: string | null /* Windows.Win32.Foundation.PSTR */,
  cchMax: number /* u32 */,
  iCodePage: number /* i32 */,
): number /* u32 */ {
  return libUSER32_dll.DdeQueryStringA(idInst, util.toPointer(hsz), util.pstrToFfi(psz), cchMax, iCodePage);
}

export function DdeQueryStringW(
  idInst: number /* u32 */,
  hsz: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
  iCodePage: number /* i32 */,
): number /* u32 */ {
  return libUSER32_dll.DdeQueryStringW(idInst, util.toPointer(hsz), util.pwstrToFfi(psz), cchMax, iCodePage);
}

export function DdeFreeStringHandle(
  idInst: number /* u32 */,
  hsz: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeFreeStringHandle(idInst, util.toPointer(hsz)));
}

export function DdeKeepStringHandle(
  idInst: number /* u32 */,
  hsz: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DdeKeepStringHandle(idInst, util.toPointer(hsz)));
}

export function DdeCmpStringHandles(
  hsz1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
  hsz2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.DataExchange.HSZ */,
): number /* i32 */ {
  return libUSER32_dll.DdeCmpStringHandles(util.toPointer(hsz1), util.toPointer(hsz2));
}

export function SetWinMetaFileBits(
  nSize: number /* u32 */,
  lpMeta16Data: Deno.PointerValue | Uint8Array | null /* ptr */,
  hdcRef: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  lpMFP: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HENHMETAFILE */ {
  return util.pointerFromFfi(libGDI32_dll.SetWinMetaFileBits(nSize, util.toPointer(lpMeta16Data), util.toPointer(hdcRef), util.toPointer(lpMFP)));
}

export function OpenClipboard(
  hWndNewOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.OpenClipboard(util.hwndToFfi(hWndNewOwner)));
}

export function CloseClipboard(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.CloseClipboard());
}

export function GetClipboardSequenceNumber(): number /* u32 */ {
  return libUSER32_dll.GetClipboardSequenceNumber();
}

export function GetClipboardOwner(): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libUSER32_dll.GetClipboardOwner());
}

export function SetClipboardViewer(
  hWndNewViewer: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libUSER32_dll.SetClipboardViewer(util.hwndToFfi(hWndNewViewer)));
}

export function GetClipboardViewer(): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libUSER32_dll.GetClipboardViewer());
}

export function ChangeClipboardChain(
  hWndRemove: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hWndNewNext: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ChangeClipboardChain(util.hwndToFfi(hWndRemove), util.hwndToFfi(hWndNewNext)));
}

export function SetClipboardData(
  uFormat: number /* u32 */,
  hMem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libUSER32_dll.SetClipboardData(uFormat, util.toPointer(hMem)));
}

export function GetClipboardData(
  uFormat: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libUSER32_dll.GetClipboardData(uFormat));
}

export function RegisterClipboardFormatA(
  lpszFormat: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libUSER32_dll.RegisterClipboardFormatA(util.pstrToFfi(lpszFormat));
}

export function RegisterClipboardFormatW(
  lpszFormat: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libUSER32_dll.RegisterClipboardFormatW(util.pwstrToFfi(lpszFormat));
}

export function CountClipboardFormats(): number /* i32 */ {
  return libUSER32_dll.CountClipboardFormats();
}

export function EnumClipboardFormats(
  format: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.EnumClipboardFormats(format);
}

export function GetClipboardFormatNameA(
  format: number /* u32 */,
  lpszFormatName: string | null /* Windows.Win32.Foundation.PSTR */,
  cchMaxCount: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.GetClipboardFormatNameA(format, util.pstrToFfi(lpszFormatName), cchMaxCount);
}

export function GetClipboardFormatNameW(
  format: number /* u32 */,
  lpszFormatName: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMaxCount: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.GetClipboardFormatNameW(format, util.pwstrToFfi(lpszFormatName), cchMaxCount);
}

export function EmptyClipboard(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EmptyClipboard());
}

export function IsClipboardFormatAvailable(
  format: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsClipboardFormatAvailable(format));
}

export function GetPriorityClipboardFormat(
  paFormatPriorityList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cFormats: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.GetPriorityClipboardFormat(util.toPointer(paFormatPriorityList), cFormats);
}

export function GetOpenClipboardWindow(): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libUSER32_dll.GetOpenClipboardWindow());
}

export function AddClipboardFormatListener(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.AddClipboardFormatListener(util.hwndToFfi(hwnd)));
}

export function RemoveClipboardFormatListener(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RemoveClipboardFormatListener(util.hwndToFfi(hwnd)));
}

export function GetUpdatedClipboardFormats(
  lpuiFormats: Deno.PointerValue | Uint8Array | null /* ptr */,
  cFormats: number /* u32 */,
  pcFormatsOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetUpdatedClipboardFormats(util.toPointer(lpuiFormats), cFormats, util.toPointer(pcFormatsOut)));
}

export function GlobalDeleteAtom(
  nAtom: number /* u16 */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalDeleteAtom(nAtom);
}

export function InitAtomTable(
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.InitAtomTable(nSize));
}

export function DeleteAtom(
  nAtom: number /* u16 */,
): number /* u16 */ {
  return libKERNEL32_dll.DeleteAtom(nAtom);
}

export function GlobalAddAtomA(
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalAddAtomA(util.pstrToFfi(lpString));
}

export function GlobalAddAtomW(
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalAddAtomW(util.pwstrToFfi(lpString));
}

export function GlobalAddAtomExA(
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalAddAtomExA(util.pstrToFfi(lpString), Flags);
}

export function GlobalAddAtomExW(
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalAddAtomExW(util.pwstrToFfi(lpString), Flags);
}

export function GlobalFindAtomA(
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalFindAtomA(util.pstrToFfi(lpString));
}

export function GlobalFindAtomW(
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.GlobalFindAtomW(util.pwstrToFfi(lpString));
}

export function GlobalGetAtomNameA(
  nAtom: number /* u16 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GlobalGetAtomNameA(nAtom, util.pstrToFfi(lpBuffer), nSize);
}

export function GlobalGetAtomNameW(
  nAtom: number /* u16 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GlobalGetAtomNameW(nAtom, util.pwstrToFfi(lpBuffer), nSize);
}

export function AddAtomA(
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.AddAtomA(util.pstrToFfi(lpString));
}

export function AddAtomW(
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.AddAtomW(util.pwstrToFfi(lpString));
}

export function FindAtomA(
  lpString: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.FindAtomA(util.pstrToFfi(lpString));
}

export function FindAtomW(
  lpString: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u16 */ {
  return libKERNEL32_dll.FindAtomW(util.pwstrToFfi(lpString));
}

export function GetAtomNameA(
  nAtom: number /* u16 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  nSize: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetAtomNameA(nAtom, util.pstrToFfi(lpBuffer), nSize);
}

export function GetAtomNameW(
  nAtom: number /* u16 */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: number /* i32 */,
): number /* u32 */ {
  return libKERNEL32_dll.GetAtomNameW(nAtom, util.pwstrToFfi(lpBuffer), nSize);
}

