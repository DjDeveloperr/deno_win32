/// Auto-generated by Deno Win32: Windows.Win32.System.Time.Apis

import * as util from "../../util.ts";

// Constants
export const TSF_Hardware = 1;
export const TSF_Authenticated = 2;
export const TSF_IPv6 = 4;
export const TSF_SignatureAuthenticated = 8;

// Structs

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.System.Time.TIME_ZONE_INFORMATION (size: 56)
 */
export interface TIME_ZONE_INFORMATION {
  /** i32 */
  Bias: number;
  /** array */
  StandardName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  StandardDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  StandardBias: number;
  /** array */
  DaylightName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  DaylightDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  DaylightBias: number;
}

export const sizeofTIME_ZONE_INFORMATION = 56;

export function allocTIME_ZONE_INFORMATION(data?: Partial<TIME_ZONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTIME_ZONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Bias !== undefined) view.setInt32(0, Number(data.Bias), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StandardName !== undefined) view.setBigUint64(8, data.StandardName === null ? 0n : BigInt(util.toPointer(data.StandardName)), true);
  // 0x10: pointer
  if (data?.StandardDate !== undefined) view.setBigUint64(16, data.StandardDate === null ? 0n : BigInt(util.toPointer(data.StandardDate)), true);
  // 0x18: i32
  if (data?.StandardBias !== undefined) view.setInt32(24, Number(data.StandardBias), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DaylightName !== undefined) view.setBigUint64(32, data.DaylightName === null ? 0n : BigInt(util.toPointer(data.DaylightName)), true);
  // 0x28: pointer
  if (data?.DaylightDate !== undefined) view.setBigUint64(40, data.DaylightDate === null ? 0n : BigInt(util.toPointer(data.DaylightDate)), true);
  // 0x30: i32
  if (data?.DaylightBias !== undefined) view.setInt32(48, Number(data.DaylightBias), true);
  // 0x34: pad4
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.System.Time.DYNAMIC_TIME_ZONE_INFORMATION (size: 72)
 */
export interface DYNAMIC_TIME_ZONE_INFORMATION {
  /** i32 */
  Bias: number;
  /** array */
  StandardName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  StandardDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  StandardBias: number;
  /** array */
  DaylightName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  DaylightDate: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  DaylightBias: number;
  /** array */
  TimeZoneKeyName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  DynamicDaylightTimeDisabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDYNAMIC_TIME_ZONE_INFORMATION = 72;

export function allocDYNAMIC_TIME_ZONE_INFORMATION(data?: Partial<DYNAMIC_TIME_ZONE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDYNAMIC_TIME_ZONE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Bias !== undefined) view.setInt32(0, Number(data.Bias), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.StandardName !== undefined) view.setBigUint64(8, data.StandardName === null ? 0n : BigInt(util.toPointer(data.StandardName)), true);
  // 0x10: pointer
  if (data?.StandardDate !== undefined) view.setBigUint64(16, data.StandardDate === null ? 0n : BigInt(util.toPointer(data.StandardDate)), true);
  // 0x18: i32
  if (data?.StandardBias !== undefined) view.setInt32(24, Number(data.StandardBias), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DaylightName !== undefined) view.setBigUint64(32, data.DaylightName === null ? 0n : BigInt(util.toPointer(data.DaylightName)), true);
  // 0x28: pointer
  if (data?.DaylightDate !== undefined) view.setBigUint64(40, data.DaylightDate === null ? 0n : BigInt(util.toPointer(data.DaylightDate)), true);
  // 0x30: i32
  if (data?.DaylightBias !== undefined) view.setInt32(48, Number(data.DaylightBias), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.TimeZoneKeyName !== undefined) view.setBigUint64(56, data.TimeZoneKeyName === null ? 0n : BigInt(util.toPointer(data.TimeZoneKeyName)), true);
  // 0x40: pointer
  if (data?.DynamicDaylightTimeDisabled !== undefined) view.setBigUint64(64, data.DynamicDaylightTimeDisabled === null ? 0n : BigInt(util.toPointer(data.DynamicDaylightTimeDisabled)), true);
  return buf;
}

export type BOOL = number;

// Native Libraries

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    SystemTimeToTzSpecificLocalTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    TzSpecificLocalTimeToSystemTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FileTimeToSystemTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SystemTimeToFileTime: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetTimeZoneInformation: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetTimeZoneInformation: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetDynamicTimeZoneInformation: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetDynamicTimeZoneInformation: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetTimeZoneInformationForYear: {
      parameters: ["u16", "pointer", "pointer"],
      result: "i32",
    },
    SystemTimeToTzSpecificLocalTimeEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    TzSpecificLocalTimeToSystemTimeEx: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    LocalFileTimeToLocalSystemTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    LocalSystemTimeToLocalFileTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32 = Deno.dlopen("ADVAPI32", {
    EnumDynamicTimeZoneInformation: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    GetDynamicTimeZoneInformationEffectiveYears: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SystemTimeToTzSpecificLocalTime(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUniversalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLocalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SystemTimeToTzSpecificLocalTime(util.toPointer(lpTimeZoneInformation), util.toPointer(lpUniversalTime), util.toPointer(lpLocalTime)));
}

export function TzSpecificLocalTimeToSystemTime(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLocalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUniversalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TzSpecificLocalTimeToSystemTime(util.toPointer(lpTimeZoneInformation), util.toPointer(lpLocalTime), util.toPointer(lpUniversalTime)));
}

export function FileTimeToSystemTime(
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.FileTimeToSystemTime(util.toPointer(lpFileTime), util.toPointer(lpSystemTime)));
}

export function SystemTimeToFileTime(
  lpSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SystemTimeToFileTime(util.toPointer(lpSystemTime), util.toPointer(lpFileTime)));
}

export function GetTimeZoneInformation(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.GetTimeZoneInformation(util.toPointer(lpTimeZoneInformation));
}

export function SetTimeZoneInformation(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetTimeZoneInformation(util.toPointer(lpTimeZoneInformation)));
}

export function SetDynamicTimeZoneInformation(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetDynamicTimeZoneInformation(util.toPointer(lpTimeZoneInformation)));
}

export function GetDynamicTimeZoneInformation(
  pTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libKERNEL32.GetDynamicTimeZoneInformation(util.toPointer(pTimeZoneInformation));
}

export function GetTimeZoneInformationForYear(
  wYear: number /* u16 */,
  pdtzi: Deno.PointerValue | Uint8Array | null /* ptr */,
  ptzi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetTimeZoneInformationForYear(wYear, util.toPointer(pdtzi), util.toPointer(ptzi)));
}

export function EnumDynamicTimeZoneInformation(
  dwIndex: number /* u32 */,
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.EnumDynamicTimeZoneInformation(dwIndex, util.toPointer(lpTimeZoneInformation));
}

export function GetDynamicTimeZoneInformationEffectiveYears(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  FirstYear: Deno.PointerValue | Uint8Array | null /* ptr */,
  LastYear: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32.GetDynamicTimeZoneInformationEffectiveYears(util.toPointer(lpTimeZoneInformation), util.toPointer(FirstYear), util.toPointer(LastYear));
}

export function SystemTimeToTzSpecificLocalTimeEx(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUniversalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLocalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SystemTimeToTzSpecificLocalTimeEx(util.toPointer(lpTimeZoneInformation), util.toPointer(lpUniversalTime), util.toPointer(lpLocalTime)));
}

export function TzSpecificLocalTimeToSystemTimeEx(
  lpTimeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLocalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpUniversalTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TzSpecificLocalTimeToSystemTimeEx(util.toPointer(lpTimeZoneInformation), util.toPointer(lpLocalTime), util.toPointer(lpUniversalTime)));
}

export function LocalFileTimeToLocalSystemTime(
  timeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  localFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  localSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.LocalFileTimeToLocalSystemTime(util.toPointer(timeZoneInformation), util.toPointer(localFileTime), util.toPointer(localSystemTime)));
}

export function LocalSystemTimeToLocalFileTime(
  timeZoneInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  localSystemTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  localFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.LocalSystemTimeToLocalFileTime(util.toPointer(timeZoneInformation), util.toPointer(localSystemTime), util.toPointer(localFileTime)));
}

