/// Auto-generated by Deno Win32: Windows.Win32.System.Memory.Apis

import * as util from "../../util.ts";

// Enums
export type FILE_MAP = number;
export type HEAP_FLAGS = number;
export type PAGE_PROTECTION_FLAGS = number;
export type UNMAP_VIEW_OF_FILE_FLAGS = number;
export type VIRTUAL_FREE_TYPE = number;
export type VIRTUAL_ALLOCATION_TYPE = number;
export type LOCAL_ALLOC_FLAGS = number;
export type GLOBAL_ALLOC_FLAGS = number;
export type PAGE_TYPE = number;
export type MEMORY_RESOURCE_NOTIFICATION_TYPE = number;
export type OFFER_PRIORITY = number;
export type WIN32_MEMORY_INFORMATION_CLASS = number;
export type WIN32_MEMORY_PARTITION_INFORMATION_CLASS = number;
export type MEM_EXTENDED_PARAMETER_TYPE = number;
export type HEAP_INFORMATION_CLASS = number;

// Constants
export const FILE_MAP_WRITE = 2;
export const FILE_MAP_READ = 4;
export const FILE_MAP_ALL_ACCESS = 983071;
export const FILE_MAP_EXECUTE = 32;
export const FILE_MAP_COPY = 1;
export const FILE_MAP_RESERVE = 2147483648;
export const FILE_MAP_TARGETS_INVALID = 1073741824;
export const FILE_MAP_LARGE_PAGES = 536870912;
export const HEAP_NONE = 0;
export const HEAP_NO_SERIALIZE = 1;
export const HEAP_GROWABLE = 2;
export const HEAP_GENERATE_EXCEPTIONS = 4;
export const HEAP_ZERO_MEMORY = 8;
export const HEAP_REALLOC_IN_PLACE_ONLY = 16;
export const HEAP_TAIL_CHECKING_ENABLED = 32;
export const HEAP_FREE_CHECKING_ENABLED = 64;
export const HEAP_DISABLE_COALESCE_ON_FREE = 128;
export const HEAP_CREATE_ALIGN_16 = 65536;
export const HEAP_CREATE_ENABLE_TRACING = 131072;
export const HEAP_CREATE_ENABLE_EXECUTE = 262144;
export const HEAP_MAXIMUM_TAG = 4095;
export const HEAP_PSEUDO_TAG_FLAG = 32768;
export const HEAP_TAG_SHIFT = 18;
export const HEAP_CREATE_SEGMENT_HEAP = 256;
export const HEAP_CREATE_HARDENED = 512;
export const PAGE_NOACCESS = 1;
export const PAGE_READONLY = 2;
export const PAGE_READWRITE = 4;
export const PAGE_WRITECOPY = 8;
export const PAGE_EXECUTE = 16;
export const PAGE_EXECUTE_READ = 32;
export const PAGE_EXECUTE_READWRITE = 64;
export const PAGE_EXECUTE_WRITECOPY = 128;
export const PAGE_GUARD = 256;
export const PAGE_NOCACHE = 512;
export const PAGE_WRITECOMBINE = 1024;
export const PAGE_GRAPHICS_NOACCESS = 2048;
export const PAGE_GRAPHICS_READONLY = 4096;
export const PAGE_GRAPHICS_READWRITE = 8192;
export const PAGE_GRAPHICS_EXECUTE = 16384;
export const PAGE_GRAPHICS_EXECUTE_READ = 32768;
export const PAGE_GRAPHICS_EXECUTE_READWRITE = 65536;
export const PAGE_GRAPHICS_COHERENT = 131072;
export const PAGE_GRAPHICS_NOCACHE = 262144;
export const PAGE_ENCLAVE_THREAD_CONTROL = 2147483648;
export const PAGE_REVERT_TO_FILE_MAP = 2147483648;
export const PAGE_TARGETS_NO_UPDATE = 1073741824;
export const PAGE_TARGETS_INVALID = 1073741824;
export const PAGE_ENCLAVE_UNVALIDATED = 536870912;
export const PAGE_ENCLAVE_MASK = 268435456;
export const PAGE_ENCLAVE_DECOMMIT = 268435456;
export const PAGE_ENCLAVE_SS_FIRST = 268435457;
export const PAGE_ENCLAVE_SS_REST = 268435458;
export const SEC_PARTITION_OWNER_HANDLE = 262144;
export const SEC_64K_PAGES = 524288;
export const SEC_FILE = 8388608;
export const SEC_IMAGE = 16777216;
export const SEC_PROTECTED_IMAGE = 33554432;
export const SEC_RESERVE = 67108864;
export const SEC_COMMIT = 134217728;
export const SEC_NOCACHE = 268435456;
export const SEC_WRITECOMBINE = 1073741824;
export const SEC_LARGE_PAGES = 2147483648;
export const SEC_IMAGE_NO_EXECUTE = 285212672;
export const MEM_UNMAP_NONE = 0;
export const MEM_UNMAP_WITH_TRANSIENT_BOOST = 1;
export const MEM_PRESERVE_PLACEHOLDER = 2;
export const MEM_DECOMMIT = 16384;
export const MEM_RELEASE = 32768;
export const MEM_COMMIT = 4096;
export const MEM_RESERVE = 8192;
export const MEM_RESET = 524288;
export const MEM_RESET_UNDO = 16777216;
export const MEM_REPLACE_PLACEHOLDER = 16384;
export const MEM_LARGE_PAGES = 536870912;
export const MEM_RESERVE_PLACEHOLDER = 262144;
export const MEM_FREE = 65536;
export const LHND = 66;
export const LMEM_FIXED = 0;
export const LMEM_MOVEABLE = 2;
export const LMEM_ZEROINIT = 64;
export const LPTR = 64;
export const NONZEROLHND = 2;
export const NONZEROLPTR = 0;
export const GHND = 66;
export const GMEM_FIXED = 0;
export const GMEM_MOVEABLE = 2;
export const GMEM_ZEROINIT = 64;
export const GPTR = 64;
export const MEM_PRIVATE = 131072;
export const MEM_MAPPED = 262144;
export const MEM_IMAGE = 16777216;
export const FILE_CACHE_MAX_HARD_ENABLE = 1;
export const FILE_CACHE_MAX_HARD_DISABLE = 2;
export const FILE_CACHE_MIN_HARD_ENABLE = 4;
export const FILE_CACHE_MIN_HARD_DISABLE = 8;
export const MEHC_PATROL_SCRUBBER_PRESENT = 1;
export const LowMemoryResourceNotification = 0;
export const HighMemoryResourceNotification = 1;
export const VmOfferPriorityVeryLow = 1;
export const VmOfferPriorityLow = 2;
export const VmOfferPriorityBelowNormal = 3;
export const VmOfferPriorityNormal = 4;
export const MemoryRegionInfo = 0;
export const MemoryPartitionInfo = 0;
export const MemoryPartitionDedicatedMemoryInfo = 1;
export const MemExtendedParameterInvalidType = 0;
export const MemExtendedParameterAddressRequirements = 1;
export const MemExtendedParameterNumaNode = 2;
export const MemExtendedParameterPartitionHandle = 3;
export const MemExtendedParameterUserPhysicalHandle = 4;
export const MemExtendedParameterAttributeFlags = 5;
export const MemExtendedParameterImageMachine = 6;
export const MemExtendedParameterMax = 7;
export const HeapCompatibilityInformation = 0;
export const HeapEnableTerminationOnCorruption = 1;
export const HeapOptimizeResources = 3;
export const HeapTag = 7;

// Structs

export type HeapHandle = Deno.PointerValue;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Memory.PROCESS_HEAP_ENTRY (size: 24)
 */
export interface PROCESS_HEAP_ENTRY {
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
  /** u8 */
  cbOverhead: number;
  /** u8 */
  iRegionIndex: number;
  /** u16 */
  wFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPROCESS_HEAP_ENTRY = 24;

export function allocPROCESS_HEAP_ENTRY(data?: Partial<PROCESS_HEAP_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_HEAP_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpData !== undefined) view.setBigUint64(0, data.lpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpData))), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: u8
  if (data?.cbOverhead !== undefined) view.setUint8(12, Number(data.cbOverhead));
  // 0x0d: u8
  if (data?.iRegionIndex !== undefined) view.setUint8(13, Number(data.iRegionIndex));
  // 0x0e: u16
  if (data?.wFlags !== undefined) view.setUint16(14, Number(data.wFlags), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PROCESS_HEAP_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get cbOverhead(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u8
  get iRegionIndex(): number {
    return this.view.getUint8(13);
  }

  // 0x0e: u16
  get wFlags(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set cbOverhead(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u8
  set iRegionIndex(value: number) {
    this.view.setUint8(13, value);
  }

  // 0x0e: u16
  set wFlags(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Memory.HEAP_SUMMARY (size: 40)
 */
export interface HEAP_SUMMARY {
  /** u32 */
  cb: number;
  /** usize */
  cbAllocated: Deno.PointerValue;
  /** usize */
  cbCommitted: Deno.PointerValue;
  /** usize */
  cbReserved: Deno.PointerValue;
  /** usize */
  cbMaxReserve: Deno.PointerValue;
}

export const sizeofHEAP_SUMMARY = 40;

export function allocHEAP_SUMMARY(data?: Partial<HEAP_SUMMARY>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAP_SUMMARY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.cbAllocated !== undefined) view.setBigUint64(8, BigInt(data.cbAllocated), true);
  // 0x10: usize
  if (data?.cbCommitted !== undefined) view.setBigUint64(16, BigInt(data.cbCommitted), true);
  // 0x18: usize
  if (data?.cbReserved !== undefined) view.setBigUint64(24, BigInt(data.cbReserved), true);
  // 0x20: usize
  if (data?.cbMaxReserve !== undefined) view.setBigUint64(32, BigInt(data.cbMaxReserve), true);
  return buf;
}

export class HEAP_SUMMARYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get cbAllocated(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get cbCommitted(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get cbReserved(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get cbMaxReserve(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set cbAllocated(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set cbCommitted(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set cbReserved(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set cbMaxReserve(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Memory.WIN32_MEMORY_RANGE_ENTRY (size: 16)
 */
export interface WIN32_MEMORY_RANGE_ENTRY {
  /** ptr */
  VirtualAddress: Deno.PointerValue | Uint8Array;
  /** usize */
  NumberOfBytes: Deno.PointerValue;
}

export const sizeofWIN32_MEMORY_RANGE_ENTRY = 16;

export function allocWIN32_MEMORY_RANGE_ENTRY(data?: Partial<WIN32_MEMORY_RANGE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN32_MEMORY_RANGE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VirtualAddress !== undefined) view.setBigUint64(0, data.VirtualAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VirtualAddress))), true);
  // 0x08: usize
  if (data?.NumberOfBytes !== undefined) view.setBigUint64(8, BigInt(data.NumberOfBytes), true);
  return buf;
}

export class WIN32_MEMORY_RANGE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get VirtualAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get NumberOfBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set VirtualAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set NumberOfBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Memory.WIN32_MEMORY_REGION_INFORMATION (size: 40)
 */
export interface WIN32_MEMORY_REGION_INFORMATION {
  /** ptr */
  AllocationBase: Deno.PointerValue | Uint8Array;
  /** u32 */
  AllocationProtect: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** usize */
  RegionSize: Deno.PointerValue;
  /** usize */
  CommitSize: Deno.PointerValue;
}

export const sizeofWIN32_MEMORY_REGION_INFORMATION = 40;

export function allocWIN32_MEMORY_REGION_INFORMATION(data?: Partial<WIN32_MEMORY_REGION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN32_MEMORY_REGION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocationBase !== undefined) view.setBigUint64(0, data.AllocationBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocationBase))), true);
  // 0x08: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(8, Number(data.AllocationProtect), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x18: usize
  if (data?.RegionSize !== undefined) view.setBigUint64(24, BigInt(data.RegionSize), true);
  // 0x20: usize
  if (data?.CommitSize !== undefined) view.setBigUint64(32, BigInt(data.CommitSize), true);
  return buf;
}

export class WIN32_MEMORY_REGION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllocationBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get AllocationProtect(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get RegionSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get CommitSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: pointer
  set AllocationBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set AllocationProtect(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set RegionSize(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set CommitSize(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Memory.WIN32_MEMORY_PARTITION_INFORMATION (size: 120)
 */
export interface WIN32_MEMORY_PARTITION_INFORMATION {
  /** u32 */
  Flags: number;
  /** u32 */
  NumaNode: number;
  /** u32 */
  Channel: number;
  /** u32 */
  NumberOfNumaNodes: number;
  /** u64 */
  ResidentAvailablePages: Deno.PointerValue;
  /** u64 */
  CommittedPages: Deno.PointerValue;
  /** u64 */
  CommitLimit: Deno.PointerValue;
  /** u64 */
  PeakCommitment: Deno.PointerValue;
  /** u64 */
  TotalNumberOfPages: Deno.PointerValue;
  /** u64 */
  AvailablePages: Deno.PointerValue;
  /** u64 */
  ZeroPages: Deno.PointerValue;
  /** u64 */
  FreePages: Deno.PointerValue;
  /** u64 */
  StandbyPages: Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** u64 */
  MaximumCommitLimit: Deno.PointerValue;
  /** u64 */
  Reserved2: Deno.PointerValue;
  /** u32 */
  PartitionId: number;
}

export const sizeofWIN32_MEMORY_PARTITION_INFORMATION = 120;

export function allocWIN32_MEMORY_PARTITION_INFORMATION(data?: Partial<WIN32_MEMORY_PARTITION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN32_MEMORY_PARTITION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.NumaNode !== undefined) view.setUint32(4, Number(data.NumaNode), true);
  // 0x08: u32
  if (data?.Channel !== undefined) view.setUint32(8, Number(data.Channel), true);
  // 0x0c: u32
  if (data?.NumberOfNumaNodes !== undefined) view.setUint32(12, Number(data.NumberOfNumaNodes), true);
  // 0x10: u64
  if (data?.ResidentAvailablePages !== undefined) view.setBigUint64(16, BigInt(data.ResidentAvailablePages), true);
  // 0x18: u64
  if (data?.CommittedPages !== undefined) view.setBigUint64(24, BigInt(data.CommittedPages), true);
  // 0x20: u64
  if (data?.CommitLimit !== undefined) view.setBigUint64(32, BigInt(data.CommitLimit), true);
  // 0x28: u64
  if (data?.PeakCommitment !== undefined) view.setBigUint64(40, BigInt(data.PeakCommitment), true);
  // 0x30: u64
  if (data?.TotalNumberOfPages !== undefined) view.setBigUint64(48, BigInt(data.TotalNumberOfPages), true);
  // 0x38: u64
  if (data?.AvailablePages !== undefined) view.setBigUint64(56, BigInt(data.AvailablePages), true);
  // 0x40: u64
  if (data?.ZeroPages !== undefined) view.setBigUint64(64, BigInt(data.ZeroPages), true);
  // 0x48: u64
  if (data?.FreePages !== undefined) view.setBigUint64(72, BigInt(data.FreePages), true);
  // 0x50: u64
  if (data?.StandbyPages !== undefined) view.setBigUint64(80, BigInt(data.StandbyPages), true);
  // 0x58: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(88, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x60: u64
  if (data?.MaximumCommitLimit !== undefined) view.setBigUint64(96, BigInt(data.MaximumCommitLimit), true);
  // 0x68: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(104, BigInt(data.Reserved2), true);
  // 0x70: u32
  if (data?.PartitionId !== undefined) view.setUint32(112, Number(data.PartitionId), true);
  // 0x74: pad4
  return buf;
}

export class WIN32_MEMORY_PARTITION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumaNode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Channel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfNumaNodes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get ResidentAvailablePages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get CommittedPages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get CommitLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get PeakCommitment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get TotalNumberOfPages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get AvailablePages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ZeroPages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get FreePages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get StandbyPages(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u64
  get MaximumCommitLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: u64
  get Reserved2(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: u32
  get PartitionId(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumaNode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Channel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfNumaNodes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set ResidentAvailablePages(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set CommittedPages(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set CommitLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set PeakCommitment(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set TotalNumberOfPages(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set AvailablePages(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ZeroPages(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set FreePages(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set StandbyPages(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u64
  set MaximumCommitLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: u64
  set Reserved2(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: u32
  set PartitionId(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION (size: 48)
 */
export interface MEMORY_BASIC_INFORMATION {
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  AllocationBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  AllocationProtect: PAGE_PROTECTION_FLAGS;
  /** u16 */
  PartitionId: number;
  /** usize */
  RegionSize: Deno.PointerValue;
  /** Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */
  State: VIRTUAL_ALLOCATION_TYPE;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  Protect: PAGE_PROTECTION_FLAGS;
  /** Windows.Win32.System.Memory.PAGE_TYPE */
  Type: PAGE_TYPE;
}

export const sizeofMEMORY_BASIC_INFORMATION = 48;

export function allocMEMORY_BASIC_INFORMATION(data?: Partial<MEMORY_BASIC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_BASIC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, data.BaseAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BaseAddress))), true);
  // 0x08: pointer
  if (data?.AllocationBase !== undefined) view.setBigUint64(8, data.AllocationBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AllocationBase))), true);
  // 0x10: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(16, Number(data.AllocationProtect), true);
  // 0x14: u16
  if (data?.PartitionId !== undefined) view.setUint16(20, Number(data.PartitionId), true);
  // 0x16: pad2
  // 0x18: usize
  if (data?.RegionSize !== undefined) view.setBigUint64(24, BigInt(data.RegionSize), true);
  // 0x20: u32
  if (data?.State !== undefined) view.setUint32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.Protect !== undefined) view.setUint32(36, Number(data.Protect), true);
  // 0x28: u32
  if (data?.Type !== undefined) view.setUint32(40, Number(data.Type), true);
  // 0x2c: pad4
  return buf;
}

export class MEMORY_BASIC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BaseAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get AllocationBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get AllocationProtect(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get PartitionId(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: pad2

  // 0x18: usize
  get RegionSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get State(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Protect(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Type(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set BaseAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set AllocationBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set AllocationProtect(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set PartitionId(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: pad2

  // 0x18: usize
  set RegionSize(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set State(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Protect(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Type(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION32 (size: 32)
 */
export interface MEMORY_BASIC_INFORMATION32 {
  /** u32 */
  BaseAddress: number;
  /** u32 */
  AllocationBase: number;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  AllocationProtect: PAGE_PROTECTION_FLAGS;
  /** u32 */
  RegionSize: number;
  /** Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */
  State: VIRTUAL_ALLOCATION_TYPE;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  Protect: PAGE_PROTECTION_FLAGS;
  /** Windows.Win32.System.Memory.PAGE_TYPE */
  Type: PAGE_TYPE;
}

export const sizeofMEMORY_BASIC_INFORMATION32 = 32;

export function allocMEMORY_BASIC_INFORMATION32(data?: Partial<MEMORY_BASIC_INFORMATION32>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_BASIC_INFORMATION32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BaseAddress !== undefined) view.setUint32(0, Number(data.BaseAddress), true);
  // 0x04: u32
  if (data?.AllocationBase !== undefined) view.setUint32(4, Number(data.AllocationBase), true);
  // 0x08: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(8, Number(data.AllocationProtect), true);
  // 0x0c: u32
  if (data?.RegionSize !== undefined) view.setUint32(12, Number(data.RegionSize), true);
  // 0x10: u32
  if (data?.State !== undefined) view.setUint32(16, Number(data.State), true);
  // 0x14: u32
  if (data?.Protect !== undefined) view.setUint32(20, Number(data.Protect), true);
  // 0x18: u32
  if (data?.Type !== undefined) view.setUint32(24, Number(data.Type), true);
  // 0x1c: pad4
  return buf;
}

export class MEMORY_BASIC_INFORMATION32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BaseAddress(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AllocationBase(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AllocationProtect(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RegionSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get State(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Protect(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Type(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set BaseAddress(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AllocationBase(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AllocationProtect(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RegionSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set State(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Protect(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Type(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.System.Memory.MEMORY_BASIC_INFORMATION64 (size: 48)
 */
export interface MEMORY_BASIC_INFORMATION64 {
  /** u64 */
  BaseAddress: Deno.PointerValue;
  /** u64 */
  AllocationBase: Deno.PointerValue;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  AllocationProtect: PAGE_PROTECTION_FLAGS;
  /** u32 */
  __alignment1: number;
  /** u64 */
  RegionSize: Deno.PointerValue;
  /** Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */
  State: VIRTUAL_ALLOCATION_TYPE;
  /** Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */
  Protect: PAGE_PROTECTION_FLAGS;
  /** Windows.Win32.System.Memory.PAGE_TYPE */
  Type: PAGE_TYPE;
  /** u32 */
  __alignment2: number;
}

export const sizeofMEMORY_BASIC_INFORMATION64 = 48;

export function allocMEMORY_BASIC_INFORMATION64(data?: Partial<MEMORY_BASIC_INFORMATION64>): Uint8Array {
  const buf = new Uint8Array(sizeofMEMORY_BASIC_INFORMATION64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, BigInt(data.BaseAddress), true);
  // 0x08: u64
  if (data?.AllocationBase !== undefined) view.setBigUint64(8, BigInt(data.AllocationBase), true);
  // 0x10: u32
  if (data?.AllocationProtect !== undefined) view.setUint32(16, Number(data.AllocationProtect), true);
  // 0x14: u32
  if (data?.__alignment1 !== undefined) view.setUint32(20, Number(data.__alignment1), true);
  // 0x18: u64
  if (data?.RegionSize !== undefined) view.setBigUint64(24, BigInt(data.RegionSize), true);
  // 0x20: u32
  if (data?.State !== undefined) view.setUint32(32, Number(data.State), true);
  // 0x24: u32
  if (data?.Protect !== undefined) view.setUint32(36, Number(data.Protect), true);
  // 0x28: u32
  if (data?.Type !== undefined) view.setUint32(40, Number(data.Type), true);
  // 0x2c: u32
  if (data?.__alignment2 !== undefined) view.setUint32(44, Number(data.__alignment2), true);
  return buf;
}

export class MEMORY_BASIC_INFORMATION64View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get BaseAddress(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get AllocationBase(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get AllocationProtect(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get __alignment1(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u64
  get RegionSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get State(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Protect(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get Type(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get __alignment2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u64
  set BaseAddress(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set AllocationBase(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set AllocationProtect(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set __alignment1(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u64
  set RegionSize(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set State(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Protect(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set Type(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set __alignment2(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Memory.CFG_CALL_TARGET_INFO (size: 16)
 */
export interface CFG_CALL_TARGET_INFO {
  /** usize */
  Offset: Deno.PointerValue;
  /** usize */
  Flags: Deno.PointerValue;
}

export const sizeofCFG_CALL_TARGET_INFO = 16;

export function allocCFG_CALL_TARGET_INFO(data?: Partial<CFG_CALL_TARGET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCFG_CALL_TARGET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Offset !== undefined) view.setBigUint64(0, BigInt(data.Offset), true);
  // 0x08: usize
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  return buf;
}

export class CFG_CALL_TARGET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Offset(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: usize
  set Offset(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.System.Memory.MEM_ADDRESS_REQUIREMENTS (size: 24)
 */
export interface MEM_ADDRESS_REQUIREMENTS {
  /** ptr */
  LowestStartingAddress: Deno.PointerValue | Uint8Array;
  /** ptr */
  HighestEndingAddress: Deno.PointerValue | Uint8Array;
  /** usize */
  Alignment: Deno.PointerValue;
}

export const sizeofMEM_ADDRESS_REQUIREMENTS = 24;

export function allocMEM_ADDRESS_REQUIREMENTS(data?: Partial<MEM_ADDRESS_REQUIREMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_ADDRESS_REQUIREMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LowestStartingAddress !== undefined) view.setBigUint64(0, data.LowestStartingAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LowestStartingAddress))), true);
  // 0x08: pointer
  if (data?.HighestEndingAddress !== undefined) view.setBigUint64(8, data.HighestEndingAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HighestEndingAddress))), true);
  // 0x10: usize
  if (data?.Alignment !== undefined) view.setBigUint64(16, BigInt(data.Alignment), true);
  return buf;
}

export class MEM_ADDRESS_REQUIREMENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LowestStartingAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get HighestEndingAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set LowestStartingAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set HighestEndingAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * _Anonymous1_e__Struct (size: 24)
 */
export interface _Anonymous1_e__Struct {
  /** f32 */
  m11: number;
  /** f32 */
  m12: number;
  /** f32 */
  m21: number;
  /** f32 */
  m22: number;
  /** f32 */
  dx: number;
  /** f32 */
  dy: number;
}

export const sizeof_Anonymous1_e__Struct = 24;

export function alloc_Anonymous1_e__Struct(data?: Partial<_Anonymous1_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.m11 !== undefined) view.setFloat32(0, Number(data.m11), true);
  // 0x04: f32
  if (data?.m12 !== undefined) view.setFloat32(4, Number(data.m12), true);
  // 0x08: f32
  if (data?.m21 !== undefined) view.setFloat32(8, Number(data.m21), true);
  // 0x0c: f32
  if (data?.m22 !== undefined) view.setFloat32(12, Number(data.m22), true);
  // 0x10: f32
  if (data?.dx !== undefined) view.setFloat32(16, Number(data.dx), true);
  // 0x14: f32
  if (data?.dy !== undefined) view.setFloat32(20, Number(data.dy), true);
  return buf;
}

export class _Anonymous1_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get m11(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get m12(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get m21(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get m22(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get dx(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get dy(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: f32
  set m11(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set m12(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set m21(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set m22(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set dx(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set dy(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Memory.MEM_EXTENDED_PARAMETER (size: 16)
 */
export interface MEM_EXTENDED_PARAMETER {
  /** _Anonymous1_e__Struct */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
}

export const sizeofMEM_EXTENDED_PARAMETER = 16;

export function allocMEM_EXTENDED_PARAMETER(data?: Partial<MEM_EXTENDED_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_EXTENDED_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  return buf;
}

export class MEM_EXTENDED_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Memory.NonVolatile.NV_MEMORY_RANGE (size: 16)
 */
export interface NV_MEMORY_RANGE {
  /** ptr */
  BaseAddress: Deno.PointerValue | Uint8Array;
  /** usize */
  Length: Deno.PointerValue;
}

export const sizeofNV_MEMORY_RANGE = 16;

export function allocNV_MEMORY_RANGE(data?: Partial<NV_MEMORY_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofNV_MEMORY_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BaseAddress !== undefined) view.setBigUint64(0, data.BaseAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BaseAddress))), true);
  // 0x08: usize
  if (data?.Length !== undefined) view.setBigUint64(8, BigInt(data.Length), true);
  return buf;
}

export class NV_MEMORY_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get BaseAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get Length(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set BaseAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set Length(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type BOOL = number;

export type HANDLE = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array;

export type BOOLEAN = number;

export type PSTR = Deno.PointerValue | Uint8Array;

// Native Libraries

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    HeapCreate: {
      parameters: ["u32", "usize", "usize"],
      result: "pointer",
    },
    HeapDestroy: {
      parameters: ["pointer"],
      result: "i32",
    },
    HeapAlloc: {
      parameters: ["pointer", "u32", "usize"],
      result: "pointer",
    },
    HeapReAlloc: {
      parameters: ["pointer", "u32", "pointer", "usize"],
      result: "pointer",
    },
    HeapFree: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    HeapSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "usize",
    },
    GetProcessHeap: {
      parameters: [],
      result: "pointer",
    },
    HeapCompact: {
      parameters: ["pointer", "u32"],
      result: "usize",
    },
    HeapSetInformation: {
      parameters: ["pointer", "i32", "pointer", "usize"],
      result: "i32",
    },
    HeapValidate: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    HeapSummary: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetProcessHeaps: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    HeapLock: {
      parameters: ["pointer"],
      result: "i32",
    },
    HeapUnlock: {
      parameters: ["pointer"],
      result: "i32",
    },
    HeapWalk: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    HeapQueryInformation: {
      parameters: ["pointer", "i32", "pointer", "usize", "pointer"],
      result: "i32",
    },
    VirtualAlloc: {
      parameters: ["pointer", "usize", "u32", "u32"],
      result: "pointer",
    },
    VirtualProtect: {
      parameters: ["pointer", "usize", "u32", "pointer"],
      result: "i32",
    },
    VirtualFree: {
      parameters: ["pointer", "usize", "u32"],
      result: "i32",
    },
    VirtualQuery: {
      parameters: ["pointer", "pointer", "usize"],
      result: "usize",
    },
    VirtualAllocEx: {
      parameters: ["pointer", "pointer", "usize", "u32", "u32"],
      result: "pointer",
    },
    VirtualProtectEx: {
      parameters: ["pointer", "pointer", "usize", "u32", "pointer"],
      result: "i32",
    },
    VirtualQueryEx: {
      parameters: ["pointer", "pointer", "pointer", "usize"],
      result: "usize",
    },
    CreateFileMappingW: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "buffer"],
      result: "pointer",
    },
    OpenFileMappingW: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    MapViewOfFile: {
      parameters: ["pointer", "u32", "u32", "u32", "usize"],
      result: "pointer",
    },
    MapViewOfFileEx: {
      parameters: ["pointer", "u32", "u32", "u32", "usize", "pointer"],
      result: "pointer",
    },
    VirtualFreeEx: {
      parameters: ["pointer", "pointer", "usize", "u32"],
      result: "i32",
    },
    FlushViewOfFile: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    UnmapViewOfFile: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetLargePageMinimum: {
      parameters: [],
      result: "usize",
    },
    GetProcessWorkingSetSizeEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetProcessWorkingSetSizeEx: {
      parameters: ["pointer", "usize", "usize", "u32"],
      result: "i32",
    },
    VirtualLock: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    VirtualUnlock: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    GetWriteWatch: {
      parameters: ["u32", "pointer", "usize", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResetWriteWatch: {
      parameters: ["pointer", "usize"],
      result: "u32",
    },
    CreateMemoryResourceNotification: {
      parameters: ["i32"],
      result: "pointer",
    },
    QueryMemoryResourceNotification: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetSystemFileCacheSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetSystemFileCacheSize: {
      parameters: ["usize", "usize", "u32"],
      result: "i32",
    },
    CreateFileMappingNumaW: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "buffer", "u32"],
      result: "pointer",
    },
    PrefetchVirtualMemory: {
      parameters: ["pointer", "usize", "pointer", "u32"],
      result: "i32",
    },
    CreateFileMappingFromApp: {
      parameters: ["pointer", "pointer", "u32", "u64", "buffer"],
      result: "pointer",
    },
    MapViewOfFileFromApp: {
      parameters: ["pointer", "u32", "u64", "usize"],
      result: "pointer",
    },
    UnmapViewOfFileEx: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    AllocateUserPhysicalPages: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FreeUserPhysicalPages: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    MapUserPhysicalPages: {
      parameters: ["pointer", "usize", "pointer"],
      result: "i32",
    },
    AllocateUserPhysicalPagesNuma: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    VirtualAllocExNuma: {
      parameters: ["pointer", "pointer", "usize", "u32", "u32", "u32"],
      result: "pointer",
    },
    GetMemoryErrorHandlingCapabilities: {
      parameters: ["pointer"],
      result: "i32",
    },
    RegisterBadMemoryNotification: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UnregisterBadMemoryNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    OfferVirtualMemory: {
      parameters: ["pointer", "usize", "i32"],
      result: "u32",
    },
    ReclaimVirtualMemory: {
      parameters: ["pointer", "usize"],
      result: "u32",
    },
    DiscardVirtualMemory: {
      parameters: ["pointer", "usize"],
      result: "u32",
    },
    RtlCompareMemory: {
      parameters: ["pointer", "pointer", "usize"],
      result: "usize",
    },
    GlobalAlloc: {
      parameters: ["u32", "usize"],
      result: "isize",
    },
    GlobalReAlloc: {
      parameters: ["isize", "usize", "u32"],
      result: "isize",
    },
    GlobalSize: {
      parameters: ["isize"],
      result: "usize",
    },
    GlobalUnlock: {
      parameters: ["isize"],
      result: "i32",
    },
    GlobalLock: {
      parameters: ["isize"],
      result: "pointer",
    },
    GlobalFlags: {
      parameters: ["isize"],
      result: "u32",
    },
    GlobalHandle: {
      parameters: ["pointer"],
      result: "isize",
    },
    GlobalFree: {
      parameters: ["isize"],
      result: "isize",
    },
    LocalAlloc: {
      parameters: ["u32", "usize"],
      result: "isize",
    },
    LocalReAlloc: {
      parameters: ["isize", "usize", "u32"],
      result: "isize",
    },
    LocalLock: {
      parameters: ["isize"],
      result: "pointer",
    },
    LocalHandle: {
      parameters: ["pointer"],
      result: "isize",
    },
    LocalUnlock: {
      parameters: ["isize"],
      result: "i32",
    },
    LocalSize: {
      parameters: ["isize"],
      result: "usize",
    },
    LocalFlags: {
      parameters: ["isize"],
      result: "u32",
    },
    LocalFree: {
      parameters: ["isize"],
      result: "isize",
    },
    CreateFileMappingA: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "buffer"],
      result: "pointer",
    },
    CreateFileMappingNumaA: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "buffer", "u32"],
      result: "pointer",
    },
    OpenFileMappingA: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
    MapViewOfFileExNuma: {
      parameters: ["pointer", "u32", "u32", "u32", "usize", "pointer", "u32"],
      result: "pointer",
    },
    IsBadReadPtr: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    IsBadWritePtr: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    IsBadCodePtr: {
      parameters: ["pointer"],
      result: "i32",
    },
    IsBadStringPtrA: {
      parameters: ["buffer", "usize"],
      result: "i32",
    },
    IsBadStringPtrW: {
      parameters: ["buffer", "usize"],
      result: "i32",
    },
    MapUserPhysicalPagesScatter: {
      parameters: ["pointer", "usize", "pointer"],
      result: "i32",
    },
    AddSecureMemoryCacheCallback: {
      parameters: ["pointer"],
      result: "i32",
    },
    RemoveSecureMemoryCacheCallback: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_memory_l1_1_3_dll = Deno.dlopen("api-ms-win-core-memory-l1-1-3.dll", {
    SetProcessValidCallTargets: {
      parameters: ["pointer", "pointer", "usize", "u32", "pointer"],
      result: "i32",
    },
    VirtualAllocFromApp: {
      parameters: ["pointer", "usize", "u32", "u32"],
      result: "pointer",
    },
    VirtualProtectFromApp: {
      parameters: ["pointer", "usize", "u32", "pointer"],
      result: "i32",
    },
    OpenFileMappingFromApp: {
      parameters: ["u32", "i32", "buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_memory_l1_1_7_dll = Deno.dlopen("api-ms-win-core-memory-l1-1-7.dll", {
    SetProcessValidCallTargetsForMappedView: {
      parameters: ["pointer", "pointer", "usize", "u32", "pointer", "pointer", "u64"],
      result: "i32",
    },
    CreateFileMapping2: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "u64", "buffer", "pointer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_memory_l1_1_4_dll = Deno.dlopen("api-ms-win-core-memory-l1-1-4.dll", {
    QueryVirtualMemoryInformation: {
      parameters: ["pointer", "pointer", "i32", "pointer", "usize", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_memory_l1_1_5_dll = Deno.dlopen("api-ms-win-core-memory-l1-1-5.dll", {
    MapViewOfFileNuma2: {
      parameters: ["pointer", "pointer", "u64", "pointer", "usize", "u32", "u32", "u32"],
      result: "pointer",
    },
    UnmapViewOfFile2: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    VirtualUnlockEx: {
      parameters: ["pointer", "pointer", "usize"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_memory_l1_1_6_dll = Deno.dlopen("api-ms-win-core-memory-l1-1-6.dll", {
    VirtualAlloc2: {
      parameters: ["pointer", "pointer", "usize", "u32", "u32", "pointer", "u32"],
      result: "pointer",
    },
    MapViewOfFile3: {
      parameters: ["pointer", "pointer", "pointer", "u64", "usize", "u32", "u32", "pointer", "u32"],
      result: "pointer",
    },
    VirtualAlloc2FromApp: {
      parameters: ["pointer", "pointer", "usize", "u32", "u32", "pointer", "u32"],
      result: "pointer",
    },
    MapViewOfFile3FromApp: {
      parameters: ["pointer", "pointer", "pointer", "u64", "usize", "u32", "u32", "pointer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_memory_l1_1_8_dll = Deno.dlopen("api-ms-win-core-memory-l1-1-8.dll", {
    AllocateUserPhysicalPages2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    OpenDedicatedMemoryPartition: {
      parameters: ["pointer", "u64", "u32", "i32"],
      result: "pointer",
    },
    QueryPartitionInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlCrc32: {
      parameters: ["pointer", "usize", "u32"],
      result: "u32",
    },
    RtlCrc64: {
      parameters: ["pointer", "usize", "u64"],
      result: "u64",
    },
    RtlIsZeroMemory: {
      parameters: ["pointer", "usize"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function HeapCreate(
  flOptions: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
  dwInitialSize: Deno.PointerValue /* usize */,
  dwMaximumSize: Deno.PointerValue /* usize */,
): Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */ {
  return libKERNEL32_dll.HeapCreate(flOptions, dwInitialSize, dwMaximumSize);
}

export function HeapDestroy(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapDestroy(util.toPointer(hHeap)));
}

export function HeapAlloc(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  dwFlags: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
  dwBytes: Deno.PointerValue /* usize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.HeapAlloc(util.toPointer(hHeap), dwFlags, dwBytes);
}

export function HeapReAlloc(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  dwFlags: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
  lpMem: Deno.PointerValue | Uint8Array /* ptr */,
  dwBytes: Deno.PointerValue /* usize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.HeapReAlloc(util.toPointer(hHeap), dwFlags, util.toPointer(lpMem), dwBytes);
}

export function HeapFree(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  dwFlags: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
  lpMem: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapFree(util.toPointer(hHeap), dwFlags, util.toPointer(lpMem)));
}

export function HeapSize(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  dwFlags: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
  lpMem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.HeapSize(util.toPointer(hHeap), dwFlags, util.toPointer(lpMem));
}

export function GetProcessHeap(): Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */ {
  return libKERNEL32_dll.GetProcessHeap();
}

export function HeapCompact(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  dwFlags: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.HeapCompact(util.toPointer(hHeap), dwFlags);
}

export function HeapSetInformation(
  HeapHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  HeapInformationClass: HEAP_INFORMATION_CLASS /* Windows.Win32.System.Memory.HEAP_INFORMATION_CLASS */,
  HeapInformation: Deno.PointerValue | Uint8Array /* ptr */,
  HeapInformationLength: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapSetInformation(util.toPointer(HeapHandle), HeapInformationClass, util.toPointer(HeapInformation), HeapInformationLength));
}

export function HeapValidate(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  dwFlags: HEAP_FLAGS /* Windows.Win32.System.Memory.HEAP_FLAGS */,
  lpMem: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapValidate(util.toPointer(hHeap), dwFlags, util.toPointer(lpMem)));
}

export function HeapSummary(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  lpSummary: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapSummary(util.toPointer(hHeap), dwFlags, util.toPointer(lpSummary)));
}

export function GetProcessHeaps(
  NumberOfHeaps: number /* u32 */,
  ProcessHeaps: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.GetProcessHeaps(NumberOfHeaps, util.toPointer(ProcessHeaps));
}

export function HeapLock(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapLock(util.toPointer(hHeap)));
}

export function HeapUnlock(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapUnlock(util.toPointer(hHeap)));
}

export function HeapWalk(
  hHeap: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  lpEntry: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapWalk(util.toPointer(hHeap), util.toPointer(lpEntry)));
}

export function HeapQueryInformation(
  HeapHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.HeapHandle */,
  HeapInformationClass: HEAP_INFORMATION_CLASS /* Windows.Win32.System.Memory.HEAP_INFORMATION_CLASS */,
  HeapInformation: Deno.PointerValue | Uint8Array /* ptr */,
  HeapInformationLength: Deno.PointerValue /* usize */,
  ReturnLength: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.HeapQueryInformation(util.toPointer(HeapHandle), HeapInformationClass, util.toPointer(HeapInformation), HeapInformationLength, util.toPointer(ReturnLength)));
}

export function VirtualAlloc(
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  flAllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  flProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.VirtualAlloc(util.toPointer(lpAddress), dwSize, flAllocationType, flProtect);
}

export function VirtualProtect(
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  flNewProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  lpflOldProtect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VirtualProtect(util.toPointer(lpAddress), dwSize, flNewProtect, util.toPointer(lpflOldProtect)));
}

export function VirtualFree(
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  dwFreeType: VIRTUAL_FREE_TYPE /* Windows.Win32.System.Memory.VIRTUAL_FREE_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VirtualFree(util.toPointer(lpAddress), dwSize, dwFreeType));
}

export function VirtualQuery(
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwLength: Deno.PointerValue /* usize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.VirtualQuery(util.toPointer(lpAddress), util.toPointer(lpBuffer), dwLength);
}

export function VirtualAllocEx(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  flAllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  flProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.VirtualAllocEx(util.toPointer(hProcess), util.toPointer(lpAddress), dwSize, flAllocationType, flProtect);
}

export function VirtualProtectEx(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  flNewProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  lpflOldProtect: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VirtualProtectEx(util.toPointer(hProcess), util.toPointer(lpAddress), dwSize, flNewProtect, util.toPointer(lpflOldProtect)));
}

export function VirtualQueryEx(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwLength: Deno.PointerValue /* usize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.VirtualQueryEx(util.toPointer(hProcess), util.toPointer(lpAddress), util.toPointer(lpBuffer), dwLength);
}

export function CreateFileMappingW(
  hFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpFileMappingAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  flProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  dwMaximumSizeHigh: number /* u32 */,
  dwMaximumSizeLow: number /* u32 */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateFileMappingW(util.toPointer(hFile), util.toPointer(lpFileMappingAttributes), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, util.pwstrToFfi(lpName));
}

export function OpenFileMappingW(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenFileMappingW(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pwstrToFfi(lpName));
}

export function MapViewOfFile(
  hFileMappingObject: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwDesiredAccess: FILE_MAP /* Windows.Win32.System.Memory.FILE_MAP */,
  dwFileOffsetHigh: number /* u32 */,
  dwFileOffsetLow: number /* u32 */,
  dwNumberOfBytesToMap: Deno.PointerValue /* usize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.MapViewOfFile(util.toPointer(hFileMappingObject), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap);
}

export function MapViewOfFileEx(
  hFileMappingObject: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwDesiredAccess: FILE_MAP /* Windows.Win32.System.Memory.FILE_MAP */,
  dwFileOffsetHigh: number /* u32 */,
  dwFileOffsetLow: number /* u32 */,
  dwNumberOfBytesToMap: Deno.PointerValue /* usize */,
  lpBaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.MapViewOfFileEx(util.toPointer(hFileMappingObject), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, util.toPointer(lpBaseAddress));
}

export function VirtualFreeEx(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  dwFreeType: VIRTUAL_FREE_TYPE /* Windows.Win32.System.Memory.VIRTUAL_FREE_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VirtualFreeEx(util.toPointer(hProcess), util.toPointer(lpAddress), dwSize, dwFreeType));
}

export function FlushViewOfFile(
  lpBaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumberOfBytesToFlush: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FlushViewOfFile(util.toPointer(lpBaseAddress), dwNumberOfBytesToFlush));
}

export function UnmapViewOfFile(
  lpBaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UnmapViewOfFile(util.toPointer(lpBaseAddress)));
}

export function GetLargePageMinimum(): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.GetLargePageMinimum();
}

export function GetProcessWorkingSetSizeEx(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpMinimumWorkingSetSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpMaximumWorkingSetSize: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessWorkingSetSizeEx(util.toPointer(hProcess), util.toPointer(lpMinimumWorkingSetSize), util.toPointer(lpMaximumWorkingSetSize), util.toPointer(Flags)));
}

export function SetProcessWorkingSetSizeEx(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwMinimumWorkingSetSize: Deno.PointerValue /* usize */,
  dwMaximumWorkingSetSize: Deno.PointerValue /* usize */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessWorkingSetSizeEx(util.toPointer(hProcess), dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags));
}

export function VirtualLock(
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VirtualLock(util.toPointer(lpAddress), dwSize));
}

export function VirtualUnlock(
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VirtualUnlock(util.toPointer(lpAddress), dwSize));
}

export function GetWriteWatch(
  dwFlags: number /* u32 */,
  lpBaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwRegionSize: Deno.PointerValue /* usize */,
  lpAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwCount: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwGranularity: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.GetWriteWatch(dwFlags, util.toPointer(lpBaseAddress), dwRegionSize, util.toPointer(lpAddresses), util.toPointer(lpdwCount), util.toPointer(lpdwGranularity));
}

export function ResetWriteWatch(
  lpBaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwRegionSize: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libKERNEL32_dll.ResetWriteWatch(util.toPointer(lpBaseAddress), dwRegionSize);
}

export function CreateMemoryResourceNotification(
  NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE /* Windows.Win32.System.Memory.MEMORY_RESOURCE_NOTIFICATION_TYPE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateMemoryResourceNotification(NotificationType);
}

export function QueryMemoryResourceNotification(
  ResourceNotificationHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ResourceState: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.QueryMemoryResourceNotification(util.toPointer(ResourceNotificationHandle), util.toPointer(ResourceState)));
}

export function GetSystemFileCacheSize(
  lpMinimumFileCacheSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpMaximumFileCacheSize: Deno.PointerValue | Uint8Array /* ptr */,
  lpFlags: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemFileCacheSize(util.toPointer(lpMinimumFileCacheSize), util.toPointer(lpMaximumFileCacheSize), util.toPointer(lpFlags)));
}

export function SetSystemFileCacheSize(
  MinimumFileCacheSize: Deno.PointerValue /* usize */,
  MaximumFileCacheSize: Deno.PointerValue /* usize */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetSystemFileCacheSize(MinimumFileCacheSize, MaximumFileCacheSize, Flags));
}

export function CreateFileMappingNumaW(
  hFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpFileMappingAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  flProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  dwMaximumSizeHigh: number /* u32 */,
  dwMaximumSizeLow: number /* u32 */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nndPreferred: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateFileMappingNumaW(util.toPointer(hFile), util.toPointer(lpFileMappingAttributes), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, util.pwstrToFfi(lpName), nndPreferred);
}

export function PrefetchVirtualMemory(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NumberOfEntries: Deno.PointerValue /* usize */,
  VirtualAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.PrefetchVirtualMemory(util.toPointer(hProcess), NumberOfEntries, util.toPointer(VirtualAddresses), Flags));
}

export function CreateFileMappingFromApp(
  hFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SecurityAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  PageProtection: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  MaximumSize: Deno.PointerValue /* u64 */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateFileMappingFromApp(util.toPointer(hFile), util.toPointer(SecurityAttributes), PageProtection, MaximumSize, util.pwstrToFfi(Name));
}

export function MapViewOfFileFromApp(
  hFileMappingObject: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: FILE_MAP /* Windows.Win32.System.Memory.FILE_MAP */,
  FileOffset: Deno.PointerValue /* u64 */,
  NumberOfBytesToMap: Deno.PointerValue /* usize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.MapViewOfFileFromApp(util.toPointer(hFileMappingObject), DesiredAccess, FileOffset, NumberOfBytesToMap);
}

export function UnmapViewOfFileEx(
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  UnmapFlags: UNMAP_VIEW_OF_FILE_FLAGS /* Windows.Win32.System.Memory.UNMAP_VIEW_OF_FILE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UnmapViewOfFileEx(util.toPointer(BaseAddress), UnmapFlags));
}

export function AllocateUserPhysicalPages(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NumberOfPages: Deno.PointerValue | Uint8Array /* ptr */,
  PageArray: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AllocateUserPhysicalPages(util.toPointer(hProcess), util.toPointer(NumberOfPages), util.toPointer(PageArray)));
}

export function FreeUserPhysicalPages(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NumberOfPages: Deno.PointerValue | Uint8Array /* ptr */,
  PageArray: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.FreeUserPhysicalPages(util.toPointer(hProcess), util.toPointer(NumberOfPages), util.toPointer(PageArray)));
}

export function MapUserPhysicalPages(
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  NumberOfPages: Deno.PointerValue /* usize */,
  PageArray: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.MapUserPhysicalPages(util.toPointer(VirtualAddress), NumberOfPages, util.toPointer(PageArray)));
}

export function AllocateUserPhysicalPagesNuma(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NumberOfPages: Deno.PointerValue | Uint8Array /* ptr */,
  PageArray: Deno.PointerValue | Uint8Array /* ptr */,
  nndPreferred: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AllocateUserPhysicalPagesNuma(util.toPointer(hProcess), util.toPointer(NumberOfPages), util.toPointer(PageArray), nndPreferred));
}

export function VirtualAllocExNuma(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpAddress: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: Deno.PointerValue /* usize */,
  flAllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  flProtect: number /* u32 */,
  nndPreferred: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.VirtualAllocExNuma(util.toPointer(hProcess), util.toPointer(lpAddress), dwSize, flAllocationType, flProtect, nndPreferred);
}

export function GetMemoryErrorHandlingCapabilities(
  Capabilities: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetMemoryErrorHandlingCapabilities(util.toPointer(Capabilities)));
}

export function RegisterBadMemoryNotification(
  Callback: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.PBAD_MEMORY_CALLBACK_ROUTINE */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.RegisterBadMemoryNotification(util.toPointer(Callback));
}

export function UnregisterBadMemoryNotification(
  RegistrationHandle: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.UnregisterBadMemoryNotification(util.toPointer(RegistrationHandle)));
}

export function OfferVirtualMemory(
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  Priority: OFFER_PRIORITY /* Windows.Win32.System.Memory.OFFER_PRIORITY */,
): number /* u32 */ {
  return libKERNEL32_dll.OfferVirtualMemory(util.toPointer(VirtualAddress), Size, Priority);
}

export function ReclaimVirtualMemory(
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libKERNEL32_dll.ReclaimVirtualMemory(util.toPointer(VirtualAddress), Size);
}

export function DiscardVirtualMemory(
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libKERNEL32_dll.DiscardVirtualMemory(util.toPointer(VirtualAddress), Size);
}

export function SetProcessValidCallTargets(
  hProcess: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  RegionSize: Deno.PointerValue /* usize */,
  NumberOfOffsets: number /* u32 */,
  OffsetInformation: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_3_dll.SetProcessValidCallTargets(util.toPointer(hProcess), util.toPointer(VirtualAddress), RegionSize, NumberOfOffsets, util.toPointer(OffsetInformation)));
}

export function SetProcessValidCallTargetsForMappedView(
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  RegionSize: Deno.PointerValue /* usize */,
  NumberOfOffsets: number /* u32 */,
  OffsetInformation: Deno.PointerValue | Uint8Array /* ptr */,
  Section: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ExpectedFileOffset: Deno.PointerValue /* u64 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_7_dll.SetProcessValidCallTargetsForMappedView(util.toPointer(Process), util.toPointer(VirtualAddress), RegionSize, NumberOfOffsets, util.toPointer(OffsetInformation), util.toPointer(Section), ExpectedFileOffset));
}

export function VirtualAllocFromApp(
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  AllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  Protection: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_memory_l1_1_3_dll.VirtualAllocFromApp(util.toPointer(BaseAddress), Size, AllocationType, Protection);
}

export function VirtualProtectFromApp(
  Address: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  NewProtection: number /* u32 */,
  OldProtection: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_3_dll.VirtualProtectFromApp(util.toPointer(Address), Size, NewProtection, util.toPointer(OldProtection)));
}

export function OpenFileMappingFromApp(
  DesiredAccess: number /* u32 */,
  InheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libapi_ms_win_core_memory_l1_1_3_dll.OpenFileMappingFromApp(DesiredAccess, util.boolToFfi(InheritHandle), util.pwstrToFfi(Name));
}

export function QueryVirtualMemoryInformation(
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  VirtualAddress: Deno.PointerValue | Uint8Array /* ptr */,
  MemoryInformationClass: WIN32_MEMORY_INFORMATION_CLASS /* Windows.Win32.System.Memory.WIN32_MEMORY_INFORMATION_CLASS */,
  MemoryInformation: Deno.PointerValue | Uint8Array /* ptr */,
  MemoryInformationSize: Deno.PointerValue /* usize */,
  ReturnSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_4_dll.QueryVirtualMemoryInformation(util.toPointer(Process), util.toPointer(VirtualAddress), MemoryInformationClass, util.toPointer(MemoryInformation), MemoryInformationSize, util.toPointer(ReturnSize)));
}

export function MapViewOfFileNuma2(
  FileMappingHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ProcessHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Offset: Deno.PointerValue /* u64 */,
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  ViewSize: Deno.PointerValue /* usize */,
  AllocationType: number /* u32 */,
  PageProtection: number /* u32 */,
  PreferredNode: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_memory_l1_1_5_dll.MapViewOfFileNuma2(util.toPointer(FileMappingHandle), util.toPointer(ProcessHandle), Offset, util.toPointer(BaseAddress), ViewSize, AllocationType, PageProtection, PreferredNode);
}

export function UnmapViewOfFile2(
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  UnmapFlags: UNMAP_VIEW_OF_FILE_FLAGS /* Windows.Win32.System.Memory.UNMAP_VIEW_OF_FILE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_5_dll.UnmapViewOfFile2(util.toPointer(Process), util.toPointer(BaseAddress), UnmapFlags));
}

export function VirtualUnlockEx(
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Address: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_5_dll.VirtualUnlockEx(util.toPointer(Process), util.toPointer(Address), Size));
}

export function VirtualAlloc2(
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  AllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  PageProtection: number /* u32 */,
  ExtendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterCount: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_memory_l1_1_6_dll.VirtualAlloc2(util.toPointer(Process), util.toPointer(BaseAddress), Size, AllocationType, PageProtection, util.toPointer(ExtendedParameters), ParameterCount);
}

export function MapViewOfFile3(
  FileMapping: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Offset: Deno.PointerValue /* u64 */,
  ViewSize: Deno.PointerValue /* usize */,
  AllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  PageProtection: number /* u32 */,
  ExtendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterCount: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_memory_l1_1_6_dll.MapViewOfFile3(util.toPointer(FileMapping), util.toPointer(Process), util.toPointer(BaseAddress), Offset, ViewSize, AllocationType, PageProtection, util.toPointer(ExtendedParameters), ParameterCount);
}

export function VirtualAlloc2FromApp(
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  AllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  PageProtection: number /* u32 */,
  ExtendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterCount: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_memory_l1_1_6_dll.VirtualAlloc2FromApp(util.toPointer(Process), util.toPointer(BaseAddress), Size, AllocationType, PageProtection, util.toPointer(ExtendedParameters), ParameterCount);
}

export function MapViewOfFile3FromApp(
  FileMapping: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Process: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  BaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  Offset: Deno.PointerValue /* u64 */,
  ViewSize: Deno.PointerValue /* usize */,
  AllocationType: VIRTUAL_ALLOCATION_TYPE /* Windows.Win32.System.Memory.VIRTUAL_ALLOCATION_TYPE */,
  PageProtection: number /* u32 */,
  ExtendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterCount: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libapi_ms_win_core_memory_l1_1_6_dll.MapViewOfFile3FromApp(util.toPointer(FileMapping), util.toPointer(Process), util.toPointer(BaseAddress), Offset, ViewSize, AllocationType, PageProtection, util.toPointer(ExtendedParameters), ParameterCount);
}

export function CreateFileMapping2(
  File: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SecurityAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  DesiredAccess: number /* u32 */,
  PageProtection: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  AllocationAttributes: number /* u32 */,
  MaximumSize: Deno.PointerValue /* u64 */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ExtendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
  ParameterCount: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libapi_ms_win_core_memory_l1_1_7_dll.CreateFileMapping2(util.toPointer(File), util.toPointer(SecurityAttributes), DesiredAccess, PageProtection, AllocationAttributes, MaximumSize, util.pwstrToFfi(Name), util.toPointer(ExtendedParameters), ParameterCount);
}

export function AllocateUserPhysicalPages2(
  ObjectHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NumberOfPages: Deno.PointerValue | Uint8Array /* ptr */,
  PageArray: Deno.PointerValue | Uint8Array /* ptr */,
  ExtendedParameters: Deno.PointerValue | Uint8Array /* ptr */,
  ExtendedParameterCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_8_dll.AllocateUserPhysicalPages2(util.toPointer(ObjectHandle), util.toPointer(NumberOfPages), util.toPointer(PageArray), util.toPointer(ExtendedParameters), ExtendedParameterCount));
}

export function OpenDedicatedMemoryPartition(
  Partition: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DedicatedMemoryTypeId: Deno.PointerValue /* u64 */,
  DesiredAccess: number /* u32 */,
  InheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libapi_ms_win_core_memory_l1_1_8_dll.OpenDedicatedMemoryPartition(util.toPointer(Partition), DedicatedMemoryTypeId, DesiredAccess, util.boolToFfi(InheritHandle));
}

export function QueryPartitionInformation(
  Partition: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  PartitionInformationClass: WIN32_MEMORY_PARTITION_INFORMATION_CLASS /* Windows.Win32.System.Memory.WIN32_MEMORY_PARTITION_INFORMATION_CLASS */,
  PartitionInformation: Deno.PointerValue | Uint8Array /* ptr */,
  PartitionInformationLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_memory_l1_1_8_dll.QueryPartitionInformation(util.toPointer(Partition), PartitionInformationClass, util.toPointer(PartitionInformation), PartitionInformationLength));
}

export function RtlCompareMemory(
  Source1: Deno.PointerValue | Uint8Array /* ptr */,
  Source2: Deno.PointerValue | Uint8Array /* ptr */,
  Length: Deno.PointerValue /* usize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.RtlCompareMemory(util.toPointer(Source1), util.toPointer(Source2), Length);
}

export function RtlCrc32(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  InitialCrc: number /* u32 */,
): number /* u32 */ {
  return libntdll_dll.RtlCrc32(util.toPointer(Buffer), Size, InitialCrc);
}

export function RtlCrc64(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  Size: Deno.PointerValue /* usize */,
  InitialCrc: Deno.PointerValue /* u64 */,
): Deno.PointerValue /* u64 */ {
  return libntdll_dll.RtlCrc64(util.toPointer(Buffer), Size, InitialCrc);
}

export function RtlIsZeroMemory(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
  Length: Deno.PointerValue /* usize */,
): Deno.PointerValue /* Windows.Win32.Foundation.BOOLEAN */ {
  return libntdll_dll.RtlIsZeroMemory(util.toPointer(Buffer), Length);
}

export function GlobalAlloc(
  uFlags: GLOBAL_ALLOC_FLAGS /* Windows.Win32.System.Memory.GLOBAL_ALLOC_FLAGS */,
  dwBytes: Deno.PointerValue /* usize */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.GlobalAlloc(uFlags, dwBytes);
}

export function GlobalReAlloc(
  hMem: Deno.PointerValue /* isize */,
  dwBytes: Deno.PointerValue /* usize */,
  uFlags: number /* u32 */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.GlobalReAlloc(hMem, dwBytes, uFlags);
}

export function GlobalSize(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.GlobalSize(hMem);
}

export function GlobalUnlock(
  hMem: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GlobalUnlock(hMem));
}

export function GlobalLock(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.GlobalLock(hMem);
}

export function GlobalFlags(
  hMem: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libKERNEL32_dll.GlobalFlags(hMem);
}

export function GlobalHandle(
  pMem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.GlobalHandle(util.toPointer(pMem));
}

export function GlobalFree(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.GlobalFree(hMem);
}

export function LocalAlloc(
  uFlags: LOCAL_ALLOC_FLAGS /* Windows.Win32.System.Memory.LOCAL_ALLOC_FLAGS */,
  uBytes: Deno.PointerValue /* usize */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.LocalAlloc(uFlags, uBytes);
}

export function LocalReAlloc(
  hMem: Deno.PointerValue /* isize */,
  uBytes: Deno.PointerValue /* usize */,
  uFlags: number /* u32 */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.LocalReAlloc(hMem, uBytes, uFlags);
}

export function LocalLock(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.LocalLock(hMem);
}

export function LocalHandle(
  pMem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.LocalHandle(util.toPointer(pMem));
}

export function LocalUnlock(
  hMem: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.LocalUnlock(hMem));
}

export function LocalSize(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue /* usize */ {
  return libKERNEL32_dll.LocalSize(hMem);
}

export function LocalFlags(
  hMem: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libKERNEL32_dll.LocalFlags(hMem);
}

export function LocalFree(
  hMem: Deno.PointerValue /* isize */,
): Deno.PointerValue /* isize */ {
  return libKERNEL32_dll.LocalFree(hMem);
}

export function CreateFileMappingA(
  hFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpFileMappingAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  flProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  dwMaximumSizeHigh: number /* u32 */,
  dwMaximumSizeLow: number /* u32 */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateFileMappingA(util.toPointer(hFile), util.toPointer(lpFileMappingAttributes), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, util.pstrToFfi(lpName));
}

export function CreateFileMappingNumaA(
  hFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  lpFileMappingAttributes: Deno.PointerValue | Uint8Array /* ptr */,
  flProtect: PAGE_PROTECTION_FLAGS /* Windows.Win32.System.Memory.PAGE_PROTECTION_FLAGS */,
  dwMaximumSizeHigh: number /* u32 */,
  dwMaximumSizeLow: number /* u32 */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nndPreferred: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.CreateFileMappingNumaA(util.toPointer(hFile), util.toPointer(lpFileMappingAttributes), flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, util.pstrToFfi(lpName), nndPreferred);
}

export function OpenFileMappingA(
  dwDesiredAccess: number /* u32 */,
  bInheritHandle: boolean /* Windows.Win32.Foundation.BOOL */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libKERNEL32_dll.OpenFileMappingA(dwDesiredAccess, util.boolToFfi(bInheritHandle), util.pstrToFfi(lpName));
}

export function MapViewOfFileExNuma(
  hFileMappingObject: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwDesiredAccess: FILE_MAP /* Windows.Win32.System.Memory.FILE_MAP */,
  dwFileOffsetHigh: number /* u32 */,
  dwFileOffsetLow: number /* u32 */,
  dwNumberOfBytesToMap: Deno.PointerValue /* usize */,
  lpBaseAddress: Deno.PointerValue | Uint8Array /* ptr */,
  nndPreferred: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libKERNEL32_dll.MapViewOfFileExNuma(util.toPointer(hFileMappingObject), dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, util.toPointer(lpBaseAddress), nndPreferred);
}

export function IsBadReadPtr(
  lp: Deno.PointerValue | Uint8Array /* ptr */,
  ucb: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadReadPtr(util.toPointer(lp), ucb));
}

export function IsBadWritePtr(
  lp: Deno.PointerValue | Uint8Array /* ptr */,
  ucb: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadWritePtr(util.toPointer(lp), ucb));
}

export function IsBadCodePtr(
  lpfn: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.FARPROC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadCodePtr(util.toPointer(lpfn)));
}

export function IsBadStringPtrA(
  lpsz: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ucchMax: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadStringPtrA(util.pstrToFfi(lpsz), ucchMax));
}

export function IsBadStringPtrW(
  lpsz: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ucchMax: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsBadStringPtrW(util.pwstrToFfi(lpsz), ucchMax));
}

export function MapUserPhysicalPagesScatter(
  VirtualAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  NumberOfPages: Deno.PointerValue /* usize */,
  PageArray: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.MapUserPhysicalPagesScatter(util.toPointer(VirtualAddresses), NumberOfPages, util.toPointer(PageArray)));
}

export function AddSecureMemoryCacheCallback(
  pfnCallBack: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.PSECURE_MEMORY_CACHE_CALLBACK */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddSecureMemoryCacheCallback(util.toPointer(pfnCallBack)));
}

export function RemoveSecureMemoryCacheCallback(
  pfnCallBack: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Memory.PSECURE_MEMORY_CACHE_CALLBACK */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.RemoveSecureMemoryCacheCallback(util.toPointer(pfnCallBack)));
}

