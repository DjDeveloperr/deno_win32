/// Auto-generated by Deno Win32: Windows.Win32.System.ErrorReporting.Apis

import * as util from "../../util.ts";

// Enums
export type WER_FILE = number;
export type WER_SUBMIT_FLAGS = number;
export type WER_FAULT_REPORTING = number;
export type WER_REPORT_UI = number;
export type WER_REGISTER_FILE_TYPE = number;
export type WER_FILE_TYPE = number;
export type WER_SUBMIT_RESULT = number;
export type WER_REPORT_TYPE = number;
export type WER_CONSENT = number;
export type WER_DUMP_TYPE = number;
export type REPORT_STORE_TYPES = number;
export type EFaultRepRetVal = number;

// Constants
export const WER_FILE_ANONYMOUS_DATA = 2;
export const WER_FILE_DELETE_WHEN_DONE = 1;
export const WER_SUBMIT_ADD_REGISTERED_DATA = 16;
export const WER_SUBMIT_HONOR_RECOVERY = 1;
export const WER_SUBMIT_HONOR_RESTART = 2;
export const WER_SUBMIT_NO_ARCHIVE = 256;
export const WER_SUBMIT_NO_CLOSE_UI = 64;
export const WER_SUBMIT_NO_QUEUE = 128;
export const WER_SUBMIT_OUTOFPROCESS = 32;
export const WER_SUBMIT_OUTOFPROCESS_ASYNC = 1024;
export const WER_SUBMIT_QUEUE = 4;
export const WER_SUBMIT_SHOW_DEBUG = 8;
export const WER_SUBMIT_START_MINIMIZED = 512;
export const WER_SUBMIT_BYPASS_DATA_THROTTLING = 2048;
export const WER_SUBMIT_ARCHIVE_PARAMETERS_ONLY = 4096;
export const WER_SUBMIT_REPORT_MACHINE_ID = 8192;
export const WER_FAULT_REPORTING_FLAG_DISABLE_THREAD_SUSPENSION = 4;
export const WER_FAULT_REPORTING_FLAG_NOHEAP = 1;
export const WER_FAULT_REPORTING_FLAG_QUEUE = 2;
export const WER_FAULT_REPORTING_FLAG_QUEUE_UPLOAD = 8;
export const WER_FAULT_REPORTING_ALWAYS_SHOW_UI = 16;
export const WER_FAULT_REPORTING_NO_UI = 32;
export const WER_FAULT_REPORTING_FLAG_NO_HEAP_ON_QUEUE = 64;
export const WER_FAULT_REPORTING_DISABLE_SNAPSHOT_CRASH = 128;
export const WER_FAULT_REPORTING_DISABLE_SNAPSHOT_HANG = 256;
export const WER_FAULT_REPORTING_CRITICAL = 512;
export const WER_FAULT_REPORTING_DURABLE = 1024;
export const WER_MAX_TOTAL_PARAM_LENGTH = 1720;
export const WER_MAX_PREFERRED_MODULES = 128;
export const WER_MAX_PREFERRED_MODULES_BUFFER = 256;
export const APPCRASH_EVENT = `APPCRASH`;
export const PACKAGED_APPCRASH_EVENT = `MoAppCrash`;
export const WER_P0 = 0;
export const WER_P1 = 1;
export const WER_P2 = 2;
export const WER_P3 = 3;
export const WER_P4 = 4;
export const WER_P5 = 5;
export const WER_P6 = 6;
export const WER_P7 = 7;
export const WER_P8 = 8;
export const WER_P9 = 9;
export const WER_FILE_COMPRESSED = 4;
export const WER_SUBMIT_BYPASS_POWER_THROTTLING = 16384;
export const WER_SUBMIT_BYPASS_NETWORK_COST_THROTTLING = 32768;
export const WER_DUMP_MASK_START = 1;
export const WER_DUMP_NOHEAP_ONQUEUE = 1;
export const WER_DUMP_AUXILIARY = 2;
export const WER_MAX_REGISTERED_ENTRIES = 512;
export const WER_MAX_REGISTERED_METADATA = 8;
export const WER_MAX_REGISTERED_DUMPCOLLECTION = 4;
export const WER_METADATA_KEY_MAX_LENGTH = 64;
export const WER_METADATA_VALUE_MAX_LENGTH = 128;
export const WER_MAX_SIGNATURE_NAME_LENGTH = 128;
export const WER_MAX_EVENT_NAME_LENGTH = 64;
export const WER_MAX_PARAM_LENGTH = 260;
export const WER_MAX_PARAM_COUNT = 10;
export const WER_MAX_FRIENDLY_EVENT_NAME_LENGTH = 128;
export const WER_MAX_APPLICATION_NAME_LENGTH = 128;
export const WER_MAX_DESCRIPTION_LENGTH = 512;
export const WER_MAX_BUCKET_ID_STRING_LENGTH = 260;
export const WER_MAX_LOCAL_DUMP_SUBPATH_LENGTH = 64;
export const WER_MAX_REGISTERED_RUNTIME_EXCEPTION_MODULES = 16;
export const WER_RUNTIME_EXCEPTION_EVENT_FUNCTION = `OutOfProcessExceptionEventCallback`;
export const WER_RUNTIME_EXCEPTION_EVENT_SIGNATURE_FUNCTION = `OutOfProcessExceptionEventSignatureCallback`;
export const WER_RUNTIME_EXCEPTION_DEBUGGER_LAUNCH = `OutOfProcessExceptionEventDebuggerLaunchCallback`;
export const WerUIAdditionalDataDlgHeader = 1;
export const WerUIIconFilePath = 2;
export const WerUIConsentDlgHeader = 3;
export const WerUIConsentDlgBody = 4;
export const WerUIOnlineSolutionCheckText = 5;
export const WerUIOfflineSolutionCheckText = 6;
export const WerUICloseText = 7;
export const WerUICloseDlgHeader = 8;
export const WerUICloseDlgBody = 9;
export const WerUICloseDlgButtonText = 10;
export const WerUIMax = 11;
export const WerRegFileTypeUserDocument = 1;
export const WerRegFileTypeOther = 2;
export const WerRegFileTypeMax = 3;
export const WerFileTypeMicrodump = 1;
export const WerFileTypeMinidump = 2;
export const WerFileTypeHeapdump = 3;
export const WerFileTypeUserDocument = 4;
export const WerFileTypeOther = 5;
export const WerFileTypeTriagedump = 6;
export const WerFileTypeCustomDump = 7;
export const WerFileTypeAuxiliaryDump = 8;
export const WerFileTypeEtlTrace = 9;
export const WerFileTypeMax = 10;
export const WerReportQueued = 1;
export const WerReportUploaded = 2;
export const WerReportDebug = 3;
export const WerReportFailed = 4;
export const WerDisabled = 5;
export const WerReportCancelled = 6;
export const WerDisabledQueue = 7;
export const WerReportAsync = 8;
export const WerCustomAction = 9;
export const WerThrottled = 10;
export const WerReportUploadedCab = 11;
export const WerStorageLocationNotFound = 12;
export const WerSubmitResultMax = 13;
export const WerReportNonCritical = 0;
export const WerReportCritical = 1;
export const WerReportApplicationCrash = 2;
export const WerReportApplicationHang = 3;
export const WerReportKernel = 4;
export const WerReportInvalid = 5;
export const WerConsentNotAsked = 1;
export const WerConsentApproved = 2;
export const WerConsentDenied = 3;
export const WerConsentAlwaysPrompt = 4;
export const WerConsentMax = 5;
export const WerDumpTypeNone = 0;
export const WerDumpTypeMicroDump = 1;
export const WerDumpTypeMiniDump = 2;
export const WerDumpTypeHeapDump = 3;
export const WerDumpTypeTriageDump = 4;
export const WerDumpTypeMax = 5;
export const E_STORE_USER_ARCHIVE = 0;
export const E_STORE_USER_QUEUE = 1;
export const E_STORE_MACHINE_ARCHIVE = 2;
export const E_STORE_MACHINE_QUEUE = 3;
export const E_STORE_INVALID = 4;
export const frrvOk = 0;
export const frrvOkManifest = 1;
export const frrvOkQueued = 2;
export const frrvErr = 3;
export const frrvErrNoDW = 4;
export const frrvErrTimeout = 5;
export const frrvLaunchDebugger = 6;
export const frrvOkHeadless = 7;
export const frrvErrAnotherInstance = 8;
export const frrvErrNoMemory = 9;
export const frrvErrDoubleFault = 10;

// Structs

export type HREPORT = number | bigint;

export type HREPORTSTORE = number | bigint;

export type HANDLE = number | bigint;

export type HWND = number | bigint;

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_INFORMATION (size: 64)
 */
export interface WER_REPORT_INFORMATION {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** array */
  wzConsentKey: Deno.PointerValue | null;
  /** array */
  wzFriendlyEventName: Deno.PointerValue | null;
  /** array */
  wzApplicationName: Deno.PointerValue | null;
  /** array */
  wzApplicationPath: Deno.PointerValue | null;
  /** array */
  wzDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
}

export const sizeofWER_REPORT_INFORMATION = 64;

export function allocWER_REPORT_INFORMATION(data?: Partial<WER_REPORT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : util.toBigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.wzConsentKey !== undefined) view.setBigUint64(16, data.wzConsentKey === null ? 0n : util.toBigInt(util.toPointer(data.wzConsentKey)), true);
  // 0x18: pointer
  if (data?.wzFriendlyEventName !== undefined) view.setBigUint64(24, data.wzFriendlyEventName === null ? 0n : util.toBigInt(util.toPointer(data.wzFriendlyEventName)), true);
  // 0x20: pointer
  if (data?.wzApplicationName !== undefined) view.setBigUint64(32, data.wzApplicationName === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationName)), true);
  // 0x28: pointer
  if (data?.wzApplicationPath !== undefined) view.setBigUint64(40, data.wzApplicationPath === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationPath)), true);
  // 0x30: pointer
  if (data?.wzDescription !== undefined) view.setBigUint64(48, data.wzDescription === null ? 0n : util.toBigInt(util.toPointer(data.wzDescription)), true);
  // 0x38: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(56, data.hwndParent === null ? 0n : util.toBigInt(util.toPointer(data.hwndParent)), true);
  return buf;
}

export class WER_REPORT_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wzConsentKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wzFriendlyEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wzApplicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wzApplicationPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get wzDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wzConsentKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wzFriendlyEventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wzApplicationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wzApplicationPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set wzDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_INFORMATION_V3 (size: 80)
 */
export interface WER_REPORT_INFORMATION_V3 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** array */
  wzConsentKey: Deno.PointerValue | null;
  /** array */
  wzFriendlyEventName: Deno.PointerValue | null;
  /** array */
  wzApplicationName: Deno.PointerValue | null;
  /** array */
  wzApplicationPath: Deno.PointerValue | null;
  /** array */
  wzDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** array */
  wzNamespacePartner: Deno.PointerValue | null;
  /** array */
  wzNamespaceGroup: Deno.PointerValue | null;
}

export const sizeofWER_REPORT_INFORMATION_V3 = 80;

export function allocWER_REPORT_INFORMATION_V3(data?: Partial<WER_REPORT_INFORMATION_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_INFORMATION_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : util.toBigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.wzConsentKey !== undefined) view.setBigUint64(16, data.wzConsentKey === null ? 0n : util.toBigInt(util.toPointer(data.wzConsentKey)), true);
  // 0x18: pointer
  if (data?.wzFriendlyEventName !== undefined) view.setBigUint64(24, data.wzFriendlyEventName === null ? 0n : util.toBigInt(util.toPointer(data.wzFriendlyEventName)), true);
  // 0x20: pointer
  if (data?.wzApplicationName !== undefined) view.setBigUint64(32, data.wzApplicationName === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationName)), true);
  // 0x28: pointer
  if (data?.wzApplicationPath !== undefined) view.setBigUint64(40, data.wzApplicationPath === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationPath)), true);
  // 0x30: pointer
  if (data?.wzDescription !== undefined) view.setBigUint64(48, data.wzDescription === null ? 0n : util.toBigInt(util.toPointer(data.wzDescription)), true);
  // 0x38: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(56, data.hwndParent === null ? 0n : util.toBigInt(util.toPointer(data.hwndParent)), true);
  // 0x40: pointer
  if (data?.wzNamespacePartner !== undefined) view.setBigUint64(64, data.wzNamespacePartner === null ? 0n : util.toBigInt(util.toPointer(data.wzNamespacePartner)), true);
  // 0x48: pointer
  if (data?.wzNamespaceGroup !== undefined) view.setBigUint64(72, data.wzNamespaceGroup === null ? 0n : util.toBigInt(util.toPointer(data.wzNamespaceGroup)), true);
  return buf;
}

export class WER_REPORT_INFORMATION_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wzConsentKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wzFriendlyEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wzApplicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wzApplicationPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get wzDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get wzNamespacePartner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get wzNamespaceGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wzConsentKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wzFriendlyEventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wzApplicationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wzApplicationPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set wzDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set wzNamespacePartner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set wzNamespaceGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.System.ErrorReporting.WER_DUMP_CUSTOM_OPTIONS (size: 48)
 */
export interface WER_DUMP_CUSTOM_OPTIONS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwDumpFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  bOnlyThisThread: boolean;
  /** u32 */
  dwExceptionThreadFlags: number;
  /** u32 */
  dwOtherThreadFlags: number;
  /** u32 */
  dwExceptionThreadExFlags: number;
  /** u32 */
  dwOtherThreadExFlags: number;
  /** u32 */
  dwPreferredModuleFlags: number;
  /** u32 */
  dwOtherModuleFlags: number;
  /** array */
  wzPreferredModuleList: Deno.PointerValue | null;
}

export const sizeofWER_DUMP_CUSTOM_OPTIONS = 48;

export function allocWER_DUMP_CUSTOM_OPTIONS(data?: Partial<WER_DUMP_CUSTOM_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_DUMP_CUSTOM_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwDumpFlags !== undefined) view.setUint32(8, Number(data.dwDumpFlags), true);
  // 0x0c: i32
  if (data?.bOnlyThisThread !== undefined) view.setInt32(12, Number(data.bOnlyThisThread), true);
  // 0x10: u32
  if (data?.dwExceptionThreadFlags !== undefined) view.setUint32(16, Number(data.dwExceptionThreadFlags), true);
  // 0x14: u32
  if (data?.dwOtherThreadFlags !== undefined) view.setUint32(20, Number(data.dwOtherThreadFlags), true);
  // 0x18: u32
  if (data?.dwExceptionThreadExFlags !== undefined) view.setUint32(24, Number(data.dwExceptionThreadExFlags), true);
  // 0x1c: u32
  if (data?.dwOtherThreadExFlags !== undefined) view.setUint32(28, Number(data.dwOtherThreadExFlags), true);
  // 0x20: u32
  if (data?.dwPreferredModuleFlags !== undefined) view.setUint32(32, Number(data.dwPreferredModuleFlags), true);
  // 0x24: u32
  if (data?.dwOtherModuleFlags !== undefined) view.setUint32(36, Number(data.dwOtherModuleFlags), true);
  // 0x28: pointer
  if (data?.wzPreferredModuleList !== undefined) view.setBigUint64(40, data.wzPreferredModuleList === null ? 0n : util.toBigInt(util.toPointer(data.wzPreferredModuleList)), true);
  return buf;
}

export class WER_DUMP_CUSTOM_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDumpFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get bOnlyThisThread(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwExceptionThreadFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOtherThreadFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwExceptionThreadExFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwOtherThreadExFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwPreferredModuleFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOtherModuleFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get wzPreferredModuleList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDumpFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set bOnlyThisThread(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwExceptionThreadFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOtherThreadFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwExceptionThreadExFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwOtherThreadExFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwPreferredModuleFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOtherModuleFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set wzPreferredModuleList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_DUMP_CUSTOM_OPTIONS_V2 (size: 56)
 */
export interface WER_DUMP_CUSTOM_OPTIONS_V2 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwDumpFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  bOnlyThisThread: boolean;
  /** u32 */
  dwExceptionThreadFlags: number;
  /** u32 */
  dwOtherThreadFlags: number;
  /** u32 */
  dwExceptionThreadExFlags: number;
  /** u32 */
  dwOtherThreadExFlags: number;
  /** u32 */
  dwPreferredModuleFlags: number;
  /** u32 */
  dwOtherModuleFlags: number;
  /** array */
  wzPreferredModuleList: Deno.PointerValue | null;
  /** u32 */
  dwPreferredModuleResetFlags: number;
  /** u32 */
  dwOtherModuleResetFlags: number;
}

export const sizeofWER_DUMP_CUSTOM_OPTIONS_V2 = 56;

export function allocWER_DUMP_CUSTOM_OPTIONS_V2(data?: Partial<WER_DUMP_CUSTOM_OPTIONS_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_DUMP_CUSTOM_OPTIONS_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwDumpFlags !== undefined) view.setUint32(8, Number(data.dwDumpFlags), true);
  // 0x0c: i32
  if (data?.bOnlyThisThread !== undefined) view.setInt32(12, Number(data.bOnlyThisThread), true);
  // 0x10: u32
  if (data?.dwExceptionThreadFlags !== undefined) view.setUint32(16, Number(data.dwExceptionThreadFlags), true);
  // 0x14: u32
  if (data?.dwOtherThreadFlags !== undefined) view.setUint32(20, Number(data.dwOtherThreadFlags), true);
  // 0x18: u32
  if (data?.dwExceptionThreadExFlags !== undefined) view.setUint32(24, Number(data.dwExceptionThreadExFlags), true);
  // 0x1c: u32
  if (data?.dwOtherThreadExFlags !== undefined) view.setUint32(28, Number(data.dwOtherThreadExFlags), true);
  // 0x20: u32
  if (data?.dwPreferredModuleFlags !== undefined) view.setUint32(32, Number(data.dwPreferredModuleFlags), true);
  // 0x24: u32
  if (data?.dwOtherModuleFlags !== undefined) view.setUint32(36, Number(data.dwOtherModuleFlags), true);
  // 0x28: pointer
  if (data?.wzPreferredModuleList !== undefined) view.setBigUint64(40, data.wzPreferredModuleList === null ? 0n : util.toBigInt(util.toPointer(data.wzPreferredModuleList)), true);
  // 0x30: u32
  if (data?.dwPreferredModuleResetFlags !== undefined) view.setUint32(48, Number(data.dwPreferredModuleResetFlags), true);
  // 0x34: u32
  if (data?.dwOtherModuleResetFlags !== undefined) view.setUint32(52, Number(data.dwOtherModuleResetFlags), true);
  return buf;
}

export class WER_DUMP_CUSTOM_OPTIONS_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDumpFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get bOnlyThisThread(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwExceptionThreadFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOtherThreadFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwExceptionThreadExFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwOtherThreadExFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwPreferredModuleFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOtherModuleFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get wzPreferredModuleList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwPreferredModuleResetFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwOtherModuleResetFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDumpFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set bOnlyThisThread(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwExceptionThreadFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOtherThreadFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwExceptionThreadExFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwOtherThreadExFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwPreferredModuleFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOtherModuleFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set wzPreferredModuleList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwPreferredModuleResetFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwOtherModuleResetFlags(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_INFORMATION_V4 (size: 104)
 */
export interface WER_REPORT_INFORMATION_V4 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** array */
  wzConsentKey: Deno.PointerValue | null;
  /** array */
  wzFriendlyEventName: Deno.PointerValue | null;
  /** array */
  wzApplicationName: Deno.PointerValue | null;
  /** array */
  wzApplicationPath: Deno.PointerValue | null;
  /** array */
  wzDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** array */
  wzNamespacePartner: Deno.PointerValue | null;
  /** array */
  wzNamespaceGroup: Deno.PointerValue | null;
  /** array */
  rgbApplicationIdentity: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSnapshot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hDeleteFilesImpersonationToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWER_REPORT_INFORMATION_V4 = 104;

export function allocWER_REPORT_INFORMATION_V4(data?: Partial<WER_REPORT_INFORMATION_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_INFORMATION_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : util.toBigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.wzConsentKey !== undefined) view.setBigUint64(16, data.wzConsentKey === null ? 0n : util.toBigInt(util.toPointer(data.wzConsentKey)), true);
  // 0x18: pointer
  if (data?.wzFriendlyEventName !== undefined) view.setBigUint64(24, data.wzFriendlyEventName === null ? 0n : util.toBigInt(util.toPointer(data.wzFriendlyEventName)), true);
  // 0x20: pointer
  if (data?.wzApplicationName !== undefined) view.setBigUint64(32, data.wzApplicationName === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationName)), true);
  // 0x28: pointer
  if (data?.wzApplicationPath !== undefined) view.setBigUint64(40, data.wzApplicationPath === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationPath)), true);
  // 0x30: pointer
  if (data?.wzDescription !== undefined) view.setBigUint64(48, data.wzDescription === null ? 0n : util.toBigInt(util.toPointer(data.wzDescription)), true);
  // 0x38: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(56, data.hwndParent === null ? 0n : util.toBigInt(util.toPointer(data.hwndParent)), true);
  // 0x40: pointer
  if (data?.wzNamespacePartner !== undefined) view.setBigUint64(64, data.wzNamespacePartner === null ? 0n : util.toBigInt(util.toPointer(data.wzNamespacePartner)), true);
  // 0x48: pointer
  if (data?.wzNamespaceGroup !== undefined) view.setBigUint64(72, data.wzNamespaceGroup === null ? 0n : util.toBigInt(util.toPointer(data.wzNamespaceGroup)), true);
  // 0x50: pointer
  if (data?.rgbApplicationIdentity !== undefined) view.setBigUint64(80, data.rgbApplicationIdentity === null ? 0n : util.toBigInt(util.toPointer(data.rgbApplicationIdentity)), true);
  // 0x58: pointer
  if (data?.hSnapshot !== undefined) view.setBigUint64(88, data.hSnapshot === null ? 0n : util.toBigInt(util.toPointer(data.hSnapshot)), true);
  // 0x60: pointer
  if (data?.hDeleteFilesImpersonationToken !== undefined) view.setBigUint64(96, data.hDeleteFilesImpersonationToken === null ? 0n : util.toBigInt(util.toPointer(data.hDeleteFilesImpersonationToken)), true);
  return buf;
}

export class WER_REPORT_INFORMATION_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wzConsentKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wzFriendlyEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wzApplicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wzApplicationPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get wzDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get wzNamespacePartner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get wzNamespaceGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get rgbApplicationIdentity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get hSnapshot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get hDeleteFilesImpersonationToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wzConsentKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wzFriendlyEventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wzApplicationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wzApplicationPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set wzDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set wzNamespacePartner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set wzNamespaceGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set rgbApplicationIdentity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set hSnapshot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set hDeleteFilesImpersonationToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_INFORMATION_V5 (size: 112)
 */
export interface WER_REPORT_INFORMATION_V5 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** array */
  wzConsentKey: Deno.PointerValue | null;
  /** array */
  wzFriendlyEventName: Deno.PointerValue | null;
  /** array */
  wzApplicationName: Deno.PointerValue | null;
  /** array */
  wzApplicationPath: Deno.PointerValue | null;
  /** array */
  wzDescription: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** array */
  wzNamespacePartner: Deno.PointerValue | null;
  /** array */
  wzNamespaceGroup: Deno.PointerValue | null;
  /** array */
  rgbApplicationIdentity: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSnapshot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hDeleteFilesImpersonationToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.ErrorReporting.WER_SUBMIT_RESULT */
  submitResultMax: WER_SUBMIT_RESULT;
}

export const sizeofWER_REPORT_INFORMATION_V5 = 112;

export function allocWER_REPORT_INFORMATION_V5(data?: Partial<WER_REPORT_INFORMATION_V5>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_INFORMATION_V5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : util.toBigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.wzConsentKey !== undefined) view.setBigUint64(16, data.wzConsentKey === null ? 0n : util.toBigInt(util.toPointer(data.wzConsentKey)), true);
  // 0x18: pointer
  if (data?.wzFriendlyEventName !== undefined) view.setBigUint64(24, data.wzFriendlyEventName === null ? 0n : util.toBigInt(util.toPointer(data.wzFriendlyEventName)), true);
  // 0x20: pointer
  if (data?.wzApplicationName !== undefined) view.setBigUint64(32, data.wzApplicationName === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationName)), true);
  // 0x28: pointer
  if (data?.wzApplicationPath !== undefined) view.setBigUint64(40, data.wzApplicationPath === null ? 0n : util.toBigInt(util.toPointer(data.wzApplicationPath)), true);
  // 0x30: pointer
  if (data?.wzDescription !== undefined) view.setBigUint64(48, data.wzDescription === null ? 0n : util.toBigInt(util.toPointer(data.wzDescription)), true);
  // 0x38: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(56, data.hwndParent === null ? 0n : util.toBigInt(util.toPointer(data.hwndParent)), true);
  // 0x40: pointer
  if (data?.wzNamespacePartner !== undefined) view.setBigUint64(64, data.wzNamespacePartner === null ? 0n : util.toBigInt(util.toPointer(data.wzNamespacePartner)), true);
  // 0x48: pointer
  if (data?.wzNamespaceGroup !== undefined) view.setBigUint64(72, data.wzNamespaceGroup === null ? 0n : util.toBigInt(util.toPointer(data.wzNamespaceGroup)), true);
  // 0x50: pointer
  if (data?.rgbApplicationIdentity !== undefined) view.setBigUint64(80, data.rgbApplicationIdentity === null ? 0n : util.toBigInt(util.toPointer(data.rgbApplicationIdentity)), true);
  // 0x58: pointer
  if (data?.hSnapshot !== undefined) view.setBigUint64(88, data.hSnapshot === null ? 0n : util.toBigInt(util.toPointer(data.hSnapshot)), true);
  // 0x60: pointer
  if (data?.hDeleteFilesImpersonationToken !== undefined) view.setBigUint64(96, data.hDeleteFilesImpersonationToken === null ? 0n : util.toBigInt(util.toPointer(data.hDeleteFilesImpersonationToken)), true);
  // 0x68: i32
  if (data?.submitResultMax !== undefined) view.setInt32(104, Number(data.submitResultMax), true);
  // 0x6c: pad4
  return buf;
}

export class WER_REPORT_INFORMATION_V5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wzConsentKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wzFriendlyEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wzApplicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wzApplicationPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get wzDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get wzNamespacePartner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get wzNamespaceGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get rgbApplicationIdentity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get hSnapshot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get hDeleteFilesImpersonationToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: i32
  get submitResultMax(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wzConsentKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wzFriendlyEventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wzApplicationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wzApplicationPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set wzDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set wzNamespacePartner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set wzNamespaceGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set rgbApplicationIdentity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set hSnapshot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set hDeleteFilesImpersonationToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: i32
  set submitResultMax(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.System.ErrorReporting.WER_DUMP_CUSTOM_OPTIONS_V3 (size: 80)
 */
export interface WER_DUMP_CUSTOM_OPTIONS_V3 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwDumpFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  bOnlyThisThread: boolean;
  /** u32 */
  dwExceptionThreadFlags: number;
  /** u32 */
  dwOtherThreadFlags: number;
  /** u32 */
  dwExceptionThreadExFlags: number;
  /** u32 */
  dwOtherThreadExFlags: number;
  /** u32 */
  dwPreferredModuleFlags: number;
  /** u32 */
  dwOtherModuleFlags: number;
  /** array */
  wzPreferredModuleList: Deno.PointerValue | null;
  /** u32 */
  dwPreferredModuleResetFlags: number;
  /** u32 */
  dwOtherModuleResetFlags: number;
  /** ptr */
  pvDumpKey: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSnapshot: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwThreadID: number;
}

export const sizeofWER_DUMP_CUSTOM_OPTIONS_V3 = 80;

export function allocWER_DUMP_CUSTOM_OPTIONS_V3(data?: Partial<WER_DUMP_CUSTOM_OPTIONS_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_DUMP_CUSTOM_OPTIONS_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwDumpFlags !== undefined) view.setUint32(8, Number(data.dwDumpFlags), true);
  // 0x0c: i32
  if (data?.bOnlyThisThread !== undefined) view.setInt32(12, Number(data.bOnlyThisThread), true);
  // 0x10: u32
  if (data?.dwExceptionThreadFlags !== undefined) view.setUint32(16, Number(data.dwExceptionThreadFlags), true);
  // 0x14: u32
  if (data?.dwOtherThreadFlags !== undefined) view.setUint32(20, Number(data.dwOtherThreadFlags), true);
  // 0x18: u32
  if (data?.dwExceptionThreadExFlags !== undefined) view.setUint32(24, Number(data.dwExceptionThreadExFlags), true);
  // 0x1c: u32
  if (data?.dwOtherThreadExFlags !== undefined) view.setUint32(28, Number(data.dwOtherThreadExFlags), true);
  // 0x20: u32
  if (data?.dwPreferredModuleFlags !== undefined) view.setUint32(32, Number(data.dwPreferredModuleFlags), true);
  // 0x24: u32
  if (data?.dwOtherModuleFlags !== undefined) view.setUint32(36, Number(data.dwOtherModuleFlags), true);
  // 0x28: pointer
  if (data?.wzPreferredModuleList !== undefined) view.setBigUint64(40, data.wzPreferredModuleList === null ? 0n : util.toBigInt(util.toPointer(data.wzPreferredModuleList)), true);
  // 0x30: u32
  if (data?.dwPreferredModuleResetFlags !== undefined) view.setUint32(48, Number(data.dwPreferredModuleResetFlags), true);
  // 0x34: u32
  if (data?.dwOtherModuleResetFlags !== undefined) view.setUint32(52, Number(data.dwOtherModuleResetFlags), true);
  // 0x38: pointer
  if (data?.pvDumpKey !== undefined) view.setBigUint64(56, data.pvDumpKey === null ? 0n : util.toBigInt(util.toPointer(data.pvDumpKey)), true);
  // 0x40: pointer
  if (data?.hSnapshot !== undefined) view.setBigUint64(64, data.hSnapshot === null ? 0n : util.toBigInt(util.toPointer(data.hSnapshot)), true);
  // 0x48: u32
  if (data?.dwThreadID !== undefined) view.setUint32(72, Number(data.dwThreadID), true);
  // 0x4c: pad4
  return buf;
}

export class WER_DUMP_CUSTOM_OPTIONS_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDumpFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get bOnlyThisThread(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwExceptionThreadFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOtherThreadFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwExceptionThreadExFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwOtherThreadExFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwPreferredModuleFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOtherModuleFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get wzPreferredModuleList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwPreferredModuleResetFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwOtherModuleResetFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get pvDumpKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get hSnapshot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get dwThreadID(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDumpFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set bOnlyThisThread(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwExceptionThreadFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOtherThreadFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwExceptionThreadExFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwOtherThreadExFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwPreferredModuleFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOtherModuleFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set wzPreferredModuleList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwPreferredModuleResetFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwOtherModuleResetFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set pvDumpKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set hSnapshot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set dwThreadID(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.System.ErrorReporting.WER_EXCEPTION_INFORMATION (size: 16)
 */
export interface WER_EXCEPTION_INFORMATION {
  /** ptr */
  pExceptionPointers: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  bClientPointers: boolean;
}

export const sizeofWER_EXCEPTION_INFORMATION = 16;

export function allocWER_EXCEPTION_INFORMATION(data?: Partial<WER_EXCEPTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_EXCEPTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pExceptionPointers !== undefined) view.setBigUint64(0, data.pExceptionPointers === null ? 0n : util.toBigInt(util.toPointer(data.pExceptionPointers)), true);
  // 0x08: i32
  if (data?.bClientPointers !== undefined) view.setInt32(8, Number(data.bClientPointers), true);
  // 0x0c: pad4
  return buf;
}

export class WER_EXCEPTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pExceptionPointers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get bClientPointers(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pExceptionPointers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set bClientPointers(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : util.toBigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CONTEXT (size: 80)
 */
export interface CONTEXT {
  /** u32 */
  ContextFlags: number;
  /** u32 */
  Cpsr: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Sp: number | bigint;
  /** u64 */
  Pc: number | bigint;
  /** array */
  V: Deno.PointerValue | null;
  /** u32 */
  Fpcr: number;
  /** u32 */
  Fpsr: number;
  /** array */
  Bcr: Deno.PointerValue | null;
  /** array */
  Bvr: Deno.PointerValue | null;
  /** array */
  Wcr: Deno.PointerValue | null;
  /** array */
  Wvr: Deno.PointerValue | null;
}

export const sizeofCONTEXT = 80;

export function allocCONTEXT(data?: Partial<CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ContextFlags !== undefined) view.setUint32(0, Number(data.ContextFlags), true);
  // 0x04: u32
  if (data?.Cpsr !== undefined) view.setUint32(4, Number(data.Cpsr), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u64
  if (data?.Sp !== undefined) view.setBigUint64(16, util.toBigInt(data.Sp), true);
  // 0x18: u64
  if (data?.Pc !== undefined) view.setBigUint64(24, util.toBigInt(data.Pc), true);
  // 0x20: pointer
  if (data?.V !== undefined) view.setBigUint64(32, data.V === null ? 0n : util.toBigInt(util.toPointer(data.V)), true);
  // 0x28: u32
  if (data?.Fpcr !== undefined) view.setUint32(40, Number(data.Fpcr), true);
  // 0x2c: u32
  if (data?.Fpsr !== undefined) view.setUint32(44, Number(data.Fpsr), true);
  // 0x30: pointer
  if (data?.Bcr !== undefined) view.setBigUint64(48, data.Bcr === null ? 0n : util.toBigInt(util.toPointer(data.Bcr)), true);
  // 0x38: pointer
  if (data?.Bvr !== undefined) view.setBigUint64(56, data.Bvr === null ? 0n : util.toBigInt(util.toPointer(data.Bvr)), true);
  // 0x40: pointer
  if (data?.Wcr !== undefined) view.setBigUint64(64, data.Wcr === null ? 0n : util.toBigInt(util.toPointer(data.Wcr)), true);
  // 0x48: pointer
  if (data?.Wvr !== undefined) view.setBigUint64(72, data.Wvr === null ? 0n : util.toBigInt(util.toPointer(data.Wvr)), true);
  return buf;
}

export class CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ContextFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Cpsr(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get Sp(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: u64
  get Pc(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x20: pointer
  get V(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Fpcr(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Fpsr(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Bcr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Bvr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Wcr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Wvr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ContextFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Cpsr(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set Sp(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: u64
  set Pc(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }

  // 0x20: pointer
  set V(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Fpcr(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Fpsr(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Bcr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Bvr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Wcr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Wvr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.ErrorReporting.WER_RUNTIME_EXCEPTION_INFORMATION (size: 56)
 */
export interface WER_RUNTIME_EXCEPTION_INFORMATION {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  exceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CONTEXT */
  context: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszReportId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  bIsFatal: boolean;
  /** u32 */
  dwReserved: number;
}

export const sizeofWER_RUNTIME_EXCEPTION_INFORMATION = 56;

export function allocWER_RUNTIME_EXCEPTION_INFORMATION(data?: Partial<WER_RUNTIME_EXCEPTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_RUNTIME_EXCEPTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : util.toBigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : util.toBigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.exceptionRecord !== undefined) view.setBigUint64(24, data.exceptionRecord === null ? 0n : util.toBigInt(util.toPointer(data.exceptionRecord)), true);
  // 0x20: pointer
  if (data?.context !== undefined) view.setBigUint64(32, data.context === null ? 0n : util.toBigInt(util.toPointer(data.context)), true);
  // 0x28: buffer
  if (data?.pwszReportId !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszReportId);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.bIsFatal !== undefined) view.setInt32(48, Number(data.bIsFatal), true);
  // 0x34: u32
  if (data?.dwReserved !== undefined) view.setUint32(52, Number(data.dwReserved), true);
  return buf;
}

export class WER_RUNTIME_EXCEPTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get exceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get context(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get pwszReportId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get bIsFatal(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get dwReserved(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set exceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set context(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: buffer
  set pwszReportId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, util.toBigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: i32
  set bIsFatal(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set dwReserved(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_PARAMETER (size: 16)
 */
export interface WER_REPORT_PARAMETER {
  /** array */
  Name: Deno.PointerValue | null;
  /** array */
  Value: Deno.PointerValue | null;
}

export const sizeofWER_REPORT_PARAMETER = 16;

export function allocWER_REPORT_PARAMETER(data?: Partial<WER_REPORT_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : util.toBigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : util.toBigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class WER_REPORT_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_SIGNATURE (size: 16)
 */
export interface WER_REPORT_SIGNATURE {
  /** array */
  EventName: Deno.PointerValue | null;
  /** array */
  Parameters: Deno.PointerValue | null;
}

export const sizeofWER_REPORT_SIGNATURE = 16;

export function allocWER_REPORT_SIGNATURE(data?: Partial<WER_REPORT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EventName !== undefined) view.setBigUint64(0, data.EventName === null ? 0n : util.toBigInt(util.toPointer(data.EventName)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : util.toBigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class WER_REPORT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set EventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_METADATA_V2 (size: 80)
 */
export interface WER_REPORT_METADATA_V2 {
  /** Windows.Win32.System.ErrorReporting.WER_REPORT_SIGNATURE */
  Signature: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BucketId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ReportId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  CreationTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SizeInBytes: number | bigint;
  /** array */
  CabId: Deno.PointerValue | null;
  /** u32 */
  ReportStatus: number;
  /** System.Guid */
  ReportIntegratorId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfFiles: number;
  /** u32 */
  SizeOfFileNames: number;
  /** Windows.Win32.Foundation.PWSTR */
  FileNames: string | null | Uint8Array | Uint16Array;
}

export const sizeofWER_REPORT_METADATA_V2 = 80;

export function allocWER_REPORT_METADATA_V2(data?: Partial<WER_REPORT_METADATA_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_METADATA_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : util.toBigInt(util.toPointer(data.Signature)), true);
  // 0x08: pointer
  if (data?.BucketId !== undefined) view.setBigUint64(8, data.BucketId === null ? 0n : util.toBigInt(util.toPointer(data.BucketId)), true);
  // 0x10: pointer
  if (data?.ReportId !== undefined) view.setBigUint64(16, data.ReportId === null ? 0n : util.toBigInt(util.toPointer(data.ReportId)), true);
  // 0x18: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(24, data.CreationTime === null ? 0n : util.toBigInt(util.toPointer(data.CreationTime)), true);
  // 0x20: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(32, util.toBigInt(data.SizeInBytes), true);
  // 0x28: pointer
  if (data?.CabId !== undefined) view.setBigUint64(40, data.CabId === null ? 0n : util.toBigInt(util.toPointer(data.CabId)), true);
  // 0x30: u32
  if (data?.ReportStatus !== undefined) view.setUint32(48, Number(data.ReportStatus), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ReportIntegratorId !== undefined) view.setBigUint64(56, data.ReportIntegratorId === null ? 0n : util.toBigInt(util.toPointer(data.ReportIntegratorId)), true);
  // 0x40: u32
  if (data?.NumberOfFiles !== undefined) view.setUint32(64, Number(data.NumberOfFiles), true);
  // 0x44: u32
  if (data?.SizeOfFileNames !== undefined) view.setUint32(68, Number(data.SizeOfFileNames), true);
  // 0x48: buffer
  if (data?.FileNames !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.FileNames);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  return buf;
}

export class WER_REPORT_METADATA_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BucketId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ReportId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CreationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get CabId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get ReportStatus(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ReportIntegratorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get NumberOfFiles(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get SizeOfFileNames(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: buffer
  get FileNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BucketId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ReportId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CreationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set CabId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set ReportStatus(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ReportIntegratorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set NumberOfFiles(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set SizeOfFileNames(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: buffer
  set FileNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, util.toBigInt(util.toPointer((this.buf as any)._f72)), true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_METADATA_V3 (size: 128)
 */
export interface WER_REPORT_METADATA_V3 {
  /** Windows.Win32.System.ErrorReporting.WER_REPORT_SIGNATURE */
  Signature: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BucketId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ReportId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  CreationTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SizeInBytes: number | bigint;
  /** array */
  CabId: Deno.PointerValue | null;
  /** u32 */
  ReportStatus: number;
  /** System.Guid */
  ReportIntegratorId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfFiles: number;
  /** u32 */
  SizeOfFileNames: number;
  /** Windows.Win32.Foundation.PWSTR */
  FileNames: string | null | Uint8Array | Uint16Array;
  /** array */
  FriendlyEventName: Deno.PointerValue | null;
  /** array */
  ApplicationName: Deno.PointerValue | null;
  /** array */
  ApplicationPath: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  BucketIdString: Deno.PointerValue | null;
  /** u64 */
  LegacyBucketId: number | bigint;
}

export const sizeofWER_REPORT_METADATA_V3 = 128;

export function allocWER_REPORT_METADATA_V3(data?: Partial<WER_REPORT_METADATA_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_METADATA_V3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : util.toBigInt(util.toPointer(data.Signature)), true);
  // 0x08: pointer
  if (data?.BucketId !== undefined) view.setBigUint64(8, data.BucketId === null ? 0n : util.toBigInt(util.toPointer(data.BucketId)), true);
  // 0x10: pointer
  if (data?.ReportId !== undefined) view.setBigUint64(16, data.ReportId === null ? 0n : util.toBigInt(util.toPointer(data.ReportId)), true);
  // 0x18: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(24, data.CreationTime === null ? 0n : util.toBigInt(util.toPointer(data.CreationTime)), true);
  // 0x20: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(32, util.toBigInt(data.SizeInBytes), true);
  // 0x28: pointer
  if (data?.CabId !== undefined) view.setBigUint64(40, data.CabId === null ? 0n : util.toBigInt(util.toPointer(data.CabId)), true);
  // 0x30: u32
  if (data?.ReportStatus !== undefined) view.setUint32(48, Number(data.ReportStatus), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ReportIntegratorId !== undefined) view.setBigUint64(56, data.ReportIntegratorId === null ? 0n : util.toBigInt(util.toPointer(data.ReportIntegratorId)), true);
  // 0x40: u32
  if (data?.NumberOfFiles !== undefined) view.setUint32(64, Number(data.NumberOfFiles), true);
  // 0x44: u32
  if (data?.SizeOfFileNames !== undefined) view.setUint32(68, Number(data.SizeOfFileNames), true);
  // 0x48: buffer
  if (data?.FileNames !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.FileNames);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: pointer
  if (data?.FriendlyEventName !== undefined) view.setBigUint64(80, data.FriendlyEventName === null ? 0n : util.toBigInt(util.toPointer(data.FriendlyEventName)), true);
  // 0x58: pointer
  if (data?.ApplicationName !== undefined) view.setBigUint64(88, data.ApplicationName === null ? 0n : util.toBigInt(util.toPointer(data.ApplicationName)), true);
  // 0x60: pointer
  if (data?.ApplicationPath !== undefined) view.setBigUint64(96, data.ApplicationPath === null ? 0n : util.toBigInt(util.toPointer(data.ApplicationPath)), true);
  // 0x68: pointer
  if (data?.Description !== undefined) view.setBigUint64(104, data.Description === null ? 0n : util.toBigInt(util.toPointer(data.Description)), true);
  // 0x70: pointer
  if (data?.BucketIdString !== undefined) view.setBigUint64(112, data.BucketIdString === null ? 0n : util.toBigInt(util.toPointer(data.BucketIdString)), true);
  // 0x78: u64
  if (data?.LegacyBucketId !== undefined) view.setBigUint64(120, util.toBigInt(data.LegacyBucketId), true);
  return buf;
}

export class WER_REPORT_METADATA_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BucketId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ReportId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CreationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: pointer
  get CabId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get ReportStatus(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ReportIntegratorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get NumberOfFiles(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get SizeOfFileNames(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: buffer
  get FileNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get FriendlyEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get ApplicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get ApplicationPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get BucketIdString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u64
  get LegacyBucketId(): number | bigint {
    return this.view.getBigUint64(120, true);
  }

  // 0x00: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BucketId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ReportId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CreationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: pointer
  set CabId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set ReportStatus(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ReportIntegratorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set NumberOfFiles(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set SizeOfFileNames(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: buffer
  set FileNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, util.toBigInt(util.toPointer((this.buf as any)._f72)), true);
  }

  // 0x50: pointer
  set FriendlyEventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set ApplicationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set ApplicationPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set BucketIdString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: u64
  set LegacyBucketId(value: number | bigint) {
    this.view.setBigUint64(120, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.System.ErrorReporting.WER_REPORT_METADATA_V1 (size: 40)
 */
export interface WER_REPORT_METADATA_V1 {
  /** Windows.Win32.System.ErrorReporting.WER_REPORT_SIGNATURE */
  Signature: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BucketId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ReportId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  CreationTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SizeInBytes: number | bigint;
}

export const sizeofWER_REPORT_METADATA_V1 = 40;

export function allocWER_REPORT_METADATA_V1(data?: Partial<WER_REPORT_METADATA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofWER_REPORT_METADATA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Signature !== undefined) view.setBigUint64(0, data.Signature === null ? 0n : util.toBigInt(util.toPointer(data.Signature)), true);
  // 0x08: pointer
  if (data?.BucketId !== undefined) view.setBigUint64(8, data.BucketId === null ? 0n : util.toBigInt(util.toPointer(data.BucketId)), true);
  // 0x10: pointer
  if (data?.ReportId !== undefined) view.setBigUint64(16, data.ReportId === null ? 0n : util.toBigInt(util.toPointer(data.ReportId)), true);
  // 0x18: pointer
  if (data?.CreationTime !== undefined) view.setBigUint64(24, data.CreationTime === null ? 0n : util.toBigInt(util.toPointer(data.CreationTime)), true);
  // 0x20: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(32, util.toBigInt(data.SizeInBytes), true);
  return buf;
}

export class WER_REPORT_METADATA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BucketId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ReportId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CreationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get SizeInBytes(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x00: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BucketId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ReportId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CreationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set SizeInBytes(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }
}

export type HRESULT = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libwer_dll = Deno.dlopen("wer.dll", {
    WerReportCreate: {
      parameters: ["buffer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WerReportSetParameter: {
      parameters: ["pointer", "u32", "buffer", "buffer"],
      result: "pointer",
    },
    WerReportAddFile: {
      parameters: ["pointer", "buffer", "i32", "u32"],
      result: "pointer",
    },
    WerReportSetUIOption: {
      parameters: ["pointer", "i32", "buffer"],
      result: "pointer",
    },
    WerReportSubmit: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "pointer",
    },
    WerReportAddDump: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    WerReportCloseHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WerAddExcludedApplication: {
      parameters: ["buffer", "i32"],
      result: "pointer",
    },
    WerRemoveExcludedApplication: {
      parameters: ["buffer", "i32"],
      result: "pointer",
    },
    WerStoreOpen: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    WerStoreClose: {
      parameters: ["pointer"],
      result: "void",
    },
    WerStoreGetFirstReportKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WerStoreGetNextReportKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WerStoreQueryReportMetadataV2: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    WerStoreQueryReportMetadataV3: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    WerFreeString: {
      parameters: ["buffer"],
      result: "void",
    },
    WerStorePurge: {
      parameters: [],
      result: "pointer",
    },
    WerStoreGetReportCount: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WerStoreGetSizeOnDisk: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WerStoreQueryReportMetadataV1: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    WerStoreUploadReport: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    WerRegisterFile: {
      parameters: ["buffer", "i32", "u32"],
      result: "pointer",
    },
    WerUnregisterFile: {
      parameters: ["buffer"],
      result: "pointer",
    },
    WerRegisterMemoryBlock: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    WerUnregisterMemoryBlock: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WerRegisterExcludedMemoryBlock: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    WerUnregisterExcludedMemoryBlock: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WerRegisterCustomMetadata: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    WerUnregisterCustomMetadata: {
      parameters: ["buffer"],
      result: "pointer",
    },
    WerRegisterAdditionalProcess: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WerUnregisterAdditionalProcess: {
      parameters: ["u32"],
      result: "pointer",
    },
    WerRegisterAppLocalDump: {
      parameters: ["buffer"],
      result: "pointer",
    },
    WerUnregisterAppLocalDump: {
      parameters: [],
      result: "pointer",
    },
    WerSetFlags: {
      parameters: ["u32"],
      result: "pointer",
    },
    WerGetFlags: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WerRegisterRuntimeExceptionModule: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    WerUnregisterRuntimeExceptionModule: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libfaultrep_dll = Deno.dlopen("faultrep.dll", {
    ReportFault: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    AddERExcludedApplicationA: {
      parameters: ["buffer"],
      result: "i32",
    },
    AddERExcludedApplicationW: {
      parameters: ["buffer"],
      result: "i32",
    },
    WerReportHang: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WerReportCreate(
  pwzEventType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  repType: WER_REPORT_TYPE /* Windows.Win32.System.ErrorReporting.WER_REPORT_TYPE */,
  pReportInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  phReportHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportCreate(util.pwstrToFfi(pwzEventType), repType, util.toPointer(pReportInformation), util.toPointer(phReportHandle)));
}

export function WerReportSetParameter(
  hReportHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORT */,
  dwparamID: number /* u32 */,
  pwzName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwzValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportSetParameter(util.toPointer(hReportHandle), dwparamID, util.pwstrToFfi(pwzName), util.pwstrToFfi(pwzValue)));
}

export function WerReportAddFile(
  hReportHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORT */,
  pwzPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  repFileType: WER_FILE_TYPE /* Windows.Win32.System.ErrorReporting.WER_FILE_TYPE */,
  dwFileFlags: WER_FILE /* Windows.Win32.System.ErrorReporting.WER_FILE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportAddFile(util.toPointer(hReportHandle), util.pwstrToFfi(pwzPath), repFileType, dwFileFlags));
}

export function WerReportSetUIOption(
  hReportHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORT */,
  repUITypeID: WER_REPORT_UI /* Windows.Win32.System.ErrorReporting.WER_REPORT_UI */,
  pwzValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportSetUIOption(util.toPointer(hReportHandle), repUITypeID, util.pwstrToFfi(pwzValue)));
}

export function WerReportSubmit(
  hReportHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORT */,
  consent: WER_CONSENT /* Windows.Win32.System.ErrorReporting.WER_CONSENT */,
  dwFlags: WER_SUBMIT_FLAGS /* Windows.Win32.System.ErrorReporting.WER_SUBMIT_FLAGS */,
  pSubmitResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportSubmit(util.toPointer(hReportHandle), consent, dwFlags, util.toPointer(pSubmitResult)));
}

export function WerReportAddDump(
  hReportHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORT */,
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hThread: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dumpType: WER_DUMP_TYPE /* Windows.Win32.System.ErrorReporting.WER_DUMP_TYPE */,
  pExceptionParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDumpCustomOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportAddDump(util.toPointer(hReportHandle), util.toPointer(hProcess), util.toPointer(hThread), dumpType, util.toPointer(pExceptionParam), util.toPointer(pDumpCustomOptions), dwFlags));
}

export function WerReportCloseHandle(
  hReportHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerReportCloseHandle(util.toPointer(hReportHandle)));
}

export function WerRegisterFile(
  pwzFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  regFileType: WER_REGISTER_FILE_TYPE /* Windows.Win32.System.ErrorReporting.WER_REGISTER_FILE_TYPE */,
  dwFlags: WER_FILE /* Windows.Win32.System.ErrorReporting.WER_FILE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterFile(util.pwstrToFfi(pwzFile), regFileType, dwFlags));
}

export function WerUnregisterFile(
  pwzFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterFile(util.pwstrToFfi(pwzFilePath)));
}

export function WerRegisterMemoryBlock(
  pvAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterMemoryBlock(util.toPointer(pvAddress), dwSize));
}

export function WerUnregisterMemoryBlock(
  pvAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterMemoryBlock(util.toPointer(pvAddress)));
}

export function WerRegisterExcludedMemoryBlock(
  address: Deno.PointerValue | Uint8Array | null /* ptr */,
  size: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterExcludedMemoryBlock(util.toPointer(address), size));
}

export function WerUnregisterExcludedMemoryBlock(
  address: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterExcludedMemoryBlock(util.toPointer(address)));
}

export function WerRegisterCustomMetadata(
  key: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterCustomMetadata(util.pwstrToFfi(key), util.pwstrToFfi(value)));
}

export function WerUnregisterCustomMetadata(
  key: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterCustomMetadata(util.pwstrToFfi(key)));
}

export function WerRegisterAdditionalProcess(
  processId: number /* u32 */,
  captureExtraInfoForThreadId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterAdditionalProcess(processId, captureExtraInfoForThreadId));
}

export function WerUnregisterAdditionalProcess(
  processId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterAdditionalProcess(processId));
}

export function WerRegisterAppLocalDump(
  localAppDataRelativePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterAppLocalDump(util.pwstrToFfi(localAppDataRelativePath)));
}

export function WerUnregisterAppLocalDump(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterAppLocalDump());
}

export function WerSetFlags(
  dwFlags: WER_FAULT_REPORTING /* Windows.Win32.System.ErrorReporting.WER_FAULT_REPORTING */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerSetFlags(dwFlags));
}

export function WerGetFlags(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerGetFlags(util.toPointer(hProcess), util.toPointer(pdwFlags)));
}

export function WerAddExcludedApplication(
  pwzExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bAllUsers: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerAddExcludedApplication(util.pwstrToFfi(pwzExeName), util.boolToFfi(bAllUsers)));
}

export function WerRemoveExcludedApplication(
  pwzExeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bAllUsers: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerRemoveExcludedApplication(util.pwstrToFfi(pwzExeName), util.boolToFfi(bAllUsers)));
}

export function WerRegisterRuntimeExceptionModule(
  pwszOutOfProcessCallbackDll: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerRegisterRuntimeExceptionModule(util.pwstrToFfi(pwszOutOfProcessCallbackDll), util.toPointer(pContext)));
}

export function WerUnregisterRuntimeExceptionModule(
  pwszOutOfProcessCallbackDll: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libKERNEL32_dll.WerUnregisterRuntimeExceptionModule(util.pwstrToFfi(pwszOutOfProcessCallbackDll), util.toPointer(pContext)));
}

export function WerStoreOpen(
  repStoreType: REPORT_STORE_TYPES /* Windows.Win32.System.ErrorReporting.REPORT_STORE_TYPES */,
  phReportStore: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreOpen(repStoreType, util.toPointer(phReportStore)));
}

export function WerStoreClose(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
): void /* void */ {
  return libwer_dll.WerStoreClose(util.toPointer(hReportStore));
}

export function WerStoreGetFirstReportKey(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  ppszReportKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreGetFirstReportKey(util.toPointer(hReportStore), util.toPointer(ppszReportKey)));
}

export function WerStoreGetNextReportKey(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  ppszReportKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreGetNextReportKey(util.toPointer(hReportStore), util.toPointer(ppszReportKey)));
}

export function WerStoreQueryReportMetadataV2(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  pszReportKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReportMetadata: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreQueryReportMetadataV2(util.toPointer(hReportStore), util.pwstrToFfi(pszReportKey), util.toPointer(pReportMetadata)));
}

export function WerStoreQueryReportMetadataV3(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  pszReportKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReportMetadata: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreQueryReportMetadataV3(util.toPointer(hReportStore), util.pwstrToFfi(pszReportKey), util.toPointer(pReportMetadata)));
}

export function WerFreeString(
  pwszStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libwer_dll.WerFreeString(util.pwstrToFfi(pwszStr));
}

export function WerStorePurge(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStorePurge());
}

export function WerStoreGetReportCount(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  pdwReportCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreGetReportCount(util.toPointer(hReportStore), util.toPointer(pdwReportCount)));
}

export function WerStoreGetSizeOnDisk(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  pqwSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreGetSizeOnDisk(util.toPointer(hReportStore), util.toPointer(pqwSizeInBytes)));
}

export function WerStoreQueryReportMetadataV1(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  pszReportKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pReportMetadata: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreQueryReportMetadataV1(util.toPointer(hReportStore), util.pwstrToFfi(pszReportKey), util.toPointer(pReportMetadata)));
}

export function WerStoreUploadReport(
  hReportStore: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.ErrorReporting.HREPORTSTORE */,
  pszReportKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pSubmitResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwer_dll.WerStoreUploadReport(util.toPointer(hReportStore), util.pwstrToFfi(pszReportKey), dwFlags, util.toPointer(pSubmitResult)));
}

export function ReportFault(
  pep: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOpt: number /* u32 */,
): EFaultRepRetVal /* Windows.Win32.System.ErrorReporting.EFaultRepRetVal */ {
  return libfaultrep_dll.ReportFault(util.toPointer(pep), dwOpt);
}

export function AddERExcludedApplicationA(
  szApplication: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libfaultrep_dll.AddERExcludedApplicationA(util.pstrToFfi(szApplication)));
}

export function AddERExcludedApplicationW(
  wszApplication: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libfaultrep_dll.AddERExcludedApplicationW(util.pwstrToFfi(wszApplication)));
}

export function WerReportHang(
  hwndHungApp: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwzHungApplicationName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libfaultrep_dll.WerReportHang(util.hwndToFfi(hwndHungApp), util.pwstrToFfi(pwzHungApplicationName)));
}

