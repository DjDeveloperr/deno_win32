/// Auto-generated by Deno Win32: Windows.Win32.Devices.Communication.Apis

import * as util from "../../util.ts";

// Enums
export type MODEM_STATUS_FLAGS = number;
export type CLEAR_COMM_ERROR_FLAGS = number;
export type PURGE_COMM_FLAGS = number;
export type COMM_EVENT_MASK = number;
export type ESCAPE_COMM_FUNCTION = number;
export type MODEMDEVCAPS_DIAL_OPTIONS = number;
export type MODEMSETTINGS_SPEAKER_MODE = number;
export type COMMPROP_STOP_PARITY = number;
export type MODEM_SPEAKER_VOLUME = number;
export type MODEMDEVCAPS_SPEAKER_VOLUME = number;
export type MODEMDEVCAPS_SPEAKER_MODE = number;

// Constants
export const MS_CTS_ON = 16;
export const MS_DSR_ON = 32;
export const MS_RING_ON = 64;
export const MS_RLSD_ON = 128;
export const CE_BREAK = 16;
export const CE_FRAME = 8;
export const CE_OVERRUN = 2;
export const CE_RXOVER = 1;
export const CE_RXPARITY = 4;
export const PURGE_RXABORT = 2;
export const PURGE_RXCLEAR = 8;
export const PURGE_TXABORT = 1;
export const PURGE_TXCLEAR = 4;
export const EV_BREAK = 64;
export const EV_CTS = 8;
export const EV_DSR = 16;
export const EV_ERR = 128;
export const EV_EVENT1 = 2048;
export const EV_EVENT2 = 4096;
export const EV_PERR = 512;
export const EV_RING = 256;
export const EV_RLSD = 32;
export const EV_RX80FULL = 1024;
export const EV_RXCHAR = 1;
export const EV_RXFLAG = 2;
export const EV_TXEMPTY = 4;
export const CLRBREAK = 9;
export const CLRDTR = 6;
export const CLRRTS = 4;
export const SETBREAK = 8;
export const SETDTR = 5;
export const SETRTS = 3;
export const SETXOFF = 1;
export const SETXON = 2;
export const DIALOPTION_BILLING = 64;
export const DIALOPTION_DIALTONE = 256;
export const DIALOPTION_QUIET = 128;
export const MDMSPKR_CALLSETUP = 8;
export const MDMSPKR_DIAL = 2;
export const MDMSPKR_OFF = 1;
export const MDMSPKR_ON = 4;
export const STOPBITS_10 = 1;
export const STOPBITS_15 = 2;
export const STOPBITS_20 = 4;
export const PARITY_NONE = 256;
export const PARITY_ODD = 512;
export const PARITY_EVEN = 1024;
export const PARITY_MARK = 2048;
export const PARITY_SPACE = 4096;
export const MDMVOL_HIGH = 2;
export const MDMVOL_LOW = 0;
export const MDMVOL_MEDIUM = 1;
export const MDMVOLFLAG_HIGH = 4;
export const MDMVOLFLAG_LOW = 1;
export const MDMVOLFLAG_MEDIUM = 2;
export const MDMSPKRFLAG_CALLSETUP = 8;
export const MDMSPKRFLAG_DIAL = 2;
export const MDMSPKRFLAG_OFF = 1;
export const MDMSPKRFLAG_ON = 4;
export const MDM_COMPRESSION = 1;
export const MDM_ERROR_CONTROL = 2;
export const MDM_FORCED_EC = 4;
export const MDM_CELLULAR = 8;
export const MDM_FLOWCONTROL_HARD = 16;
export const MDM_FLOWCONTROL_SOFT = 32;
export const MDM_CCITT_OVERRIDE = 64;
export const MDM_SPEED_ADJUST = 128;
export const MDM_TONE_DIAL = 256;
export const MDM_BLIND_DIAL = 512;
export const MDM_V23_OVERRIDE = 1024;
export const MDM_DIAGNOSTICS = 2048;
export const MDM_MASK_BEARERMODE = 61440;
export const MDM_SHIFT_BEARERMODE = 12;
export const MDM_MASK_PROTOCOLID = 983040;
export const MDM_SHIFT_PROTOCOLID = 16;
export const MDM_MASK_PROTOCOLDATA = 267386880;
export const MDM_SHIFT_PROTOCOLDATA = 20;
export const MDM_SHIFT_PROTOCOLINFO = 16;
export const MDM_SHIFT_EXTENDEDINFO = 12;
export const MDM_BEARERMODE_ANALOG = 0;
export const MDM_BEARERMODE_ISDN = 1;
export const MDM_BEARERMODE_GSM = 2;
export const MDM_PROTOCOLID_DEFAULT = 0;
export const MDM_PROTOCOLID_HDLCPPP = 1;
export const MDM_PROTOCOLID_V128 = 2;
export const MDM_PROTOCOLID_X75 = 3;
export const MDM_PROTOCOLID_V110 = 4;
export const MDM_PROTOCOLID_V120 = 5;
export const MDM_PROTOCOLID_AUTO = 6;
export const MDM_PROTOCOLID_ANALOG = 7;
export const MDM_PROTOCOLID_GPRS = 8;
export const MDM_PROTOCOLID_PIAFS = 9;
export const MDM_SHIFT_HDLCPPP_SPEED = 0;
export const MDM_MASK_HDLCPPP_SPEED = 7;
export const MDM_HDLCPPP_SPEED_DEFAULT = 0;
export const MDM_HDLCPPP_SPEED_64K = 1;
export const MDM_HDLCPPP_SPEED_56K = 2;
export const MDM_SHIFT_HDLCPPP_AUTH = 3;
export const MDM_HDLCPPP_AUTH_DEFAULT = 0;
export const MDM_HDLCPPP_AUTH_NONE = 1;
export const MDM_HDLCPPP_AUTH_PAP = 2;
export const MDM_HDLCPPP_AUTH_CHAP = 3;
export const MDM_HDLCPPP_AUTH_MSCHAP = 4;
export const MDM_SHIFT_HDLCPPP_ML = 6;
export const MDM_HDLCPPP_ML_DEFAULT = 0;
export const MDM_HDLCPPP_ML_NONE = 1;
export const MDM_HDLCPPP_ML_2 = 2;
export const MDM_SHIFT_V120_SPEED = 0;
export const MDM_MASK_V120_SPEED = 7;
export const MDM_V120_SPEED_DEFAULT = 0;
export const MDM_V120_SPEED_64K = 1;
export const MDM_V120_SPEED_56K = 2;
export const MDM_SHIFT_V120_ML = 6;
export const MDM_V120_ML_DEFAULT = 0;
export const MDM_V120_ML_NONE = 1;
export const MDM_V120_ML_2 = 2;
export const MDM_SHIFT_X75_DATA = 0;
export const MDM_MASK_X75_DATA = 7;
export const MDM_X75_DATA_DEFAULT = 0;
export const MDM_X75_DATA_64K = 1;
export const MDM_X75_DATA_128K = 2;
export const MDM_X75_DATA_T_70 = 3;
export const MDM_X75_DATA_BTX = 4;
export const MDM_SHIFT_V110_SPEED = 0;
export const MDM_MASK_V110_SPEED = 15;
export const MDM_V110_SPEED_DEFAULT = 0;
export const MDM_V110_SPEED_1DOT2K = 1;
export const MDM_V110_SPEED_2DOT4K = 2;
export const MDM_V110_SPEED_4DOT8K = 3;
export const MDM_V110_SPEED_9DOT6K = 4;
export const MDM_V110_SPEED_12DOT0K = 5;
export const MDM_V110_SPEED_14DOT4K = 6;
export const MDM_V110_SPEED_19DOT2K = 7;
export const MDM_V110_SPEED_28DOT8K = 8;
export const MDM_V110_SPEED_38DOT4K = 9;
export const MDM_V110_SPEED_57DOT6K = 10;
export const MDM_SHIFT_AUTO_SPEED = 0;
export const MDM_MASK_AUTO_SPEED = 7;
export const MDM_AUTO_SPEED_DEFAULT = 0;
export const MDM_SHIFT_AUTO_ML = 6;
export const MDM_AUTO_ML_DEFAULT = 0;
export const MDM_AUTO_ML_NONE = 1;
export const MDM_AUTO_ML_2 = 2;
export const MDM_ANALOG_RLP_ON = 0;
export const MDM_ANALOG_RLP_OFF = 1;
export const MDM_ANALOG_V34 = 2;
export const MDM_PIAFS_INCOMING = 0;
export const MDM_PIAFS_OUTGOING = 1;
export const MAXLENGTH_NAI = 72;
export const MAXLENGTH_UICCDATASTORE = 10;

// Structs

/**
 * Windows.Win32.Devices.Communication.MODEMDEVCAPS (size: 88)
 */
export interface MODEMDEVCAPS {
  /** u32 */
  dwActualSize: number;
  /** u32 */
  dwRequiredSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwModemProviderVersion: number;
  /** u32 */
  dwModemManufacturerOffset: number;
  /** u32 */
  dwModemManufacturerSize: number;
  /** u32 */
  dwModemModelOffset: number;
  /** u32 */
  dwModemModelSize: number;
  /** u32 */
  dwModemVersionOffset: number;
  /** u32 */
  dwModemVersionSize: number;
  /** Windows.Win32.Devices.Communication.MODEMDEVCAPS_DIAL_OPTIONS */
  dwDialOptions: MODEMDEVCAPS_DIAL_OPTIONS;
  /** u32 */
  dwCallSetupFailTimer: number;
  /** u32 */
  dwInactivityTimeout: number;
  /** Windows.Win32.Devices.Communication.MODEMDEVCAPS_SPEAKER_VOLUME */
  dwSpeakerVolume: MODEMDEVCAPS_SPEAKER_VOLUME;
  /** Windows.Win32.Devices.Communication.MODEMDEVCAPS_SPEAKER_MODE */
  dwSpeakerMode: MODEMDEVCAPS_SPEAKER_MODE;
  /** u32 */
  dwModemOptions: number;
  /** u32 */
  dwMaxDTERate: number;
  /** u32 */
  dwMaxDCERate: number;
  /** array */
  abVariablePortion: Deno.PointerValue | null;
}

export const sizeofMODEMDEVCAPS = 88;

export function allocMODEMDEVCAPS(data?: Partial<MODEMDEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofMODEMDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwActualSize !== undefined) view.setUint32(0, Number(data.dwActualSize), true);
  // 0x04: u32
  if (data?.dwRequiredSize !== undefined) view.setUint32(4, Number(data.dwRequiredSize), true);
  // 0x08: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(8, Number(data.dwDevSpecificOffset), true);
  // 0x0c: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(12, Number(data.dwDevSpecificSize), true);
  // 0x10: u32
  if (data?.dwModemProviderVersion !== undefined) view.setUint32(16, Number(data.dwModemProviderVersion), true);
  // 0x14: u32
  if (data?.dwModemManufacturerOffset !== undefined) view.setUint32(20, Number(data.dwModemManufacturerOffset), true);
  // 0x18: u32
  if (data?.dwModemManufacturerSize !== undefined) view.setUint32(24, Number(data.dwModemManufacturerSize), true);
  // 0x1c: u32
  if (data?.dwModemModelOffset !== undefined) view.setUint32(28, Number(data.dwModemModelOffset), true);
  // 0x20: u32
  if (data?.dwModemModelSize !== undefined) view.setUint32(32, Number(data.dwModemModelSize), true);
  // 0x24: u32
  if (data?.dwModemVersionOffset !== undefined) view.setUint32(36, Number(data.dwModemVersionOffset), true);
  // 0x28: u32
  if (data?.dwModemVersionSize !== undefined) view.setUint32(40, Number(data.dwModemVersionSize), true);
  // 0x2c: u32
  if (data?.dwDialOptions !== undefined) view.setUint32(44, Number(data.dwDialOptions), true);
  // 0x30: u32
  if (data?.dwCallSetupFailTimer !== undefined) view.setUint32(48, Number(data.dwCallSetupFailTimer), true);
  // 0x34: u32
  if (data?.dwInactivityTimeout !== undefined) view.setUint32(52, Number(data.dwInactivityTimeout), true);
  // 0x38: u32
  if (data?.dwSpeakerVolume !== undefined) view.setUint32(56, Number(data.dwSpeakerVolume), true);
  // 0x3c: u32
  if (data?.dwSpeakerMode !== undefined) view.setUint32(60, Number(data.dwSpeakerMode), true);
  // 0x40: u32
  if (data?.dwModemOptions !== undefined) view.setUint32(64, Number(data.dwModemOptions), true);
  // 0x44: u32
  if (data?.dwMaxDTERate !== undefined) view.setUint32(68, Number(data.dwMaxDTERate), true);
  // 0x48: u32
  if (data?.dwMaxDCERate !== undefined) view.setUint32(72, Number(data.dwMaxDCERate), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.abVariablePortion !== undefined) view.setBigUint64(80, data.abVariablePortion === null ? 0n : BigInt(util.toPointer(data.abVariablePortion)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Communication.MODEMSETTINGS (size: 56)
 */
export interface MODEMSETTINGS {
  /** u32 */
  dwActualSize: number;
  /** u32 */
  dwRequiredSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwCallSetupFailTimer: number;
  /** u32 */
  dwInactivityTimeout: number;
  /** Windows.Win32.Devices.Communication.MODEM_SPEAKER_VOLUME */
  dwSpeakerVolume: MODEM_SPEAKER_VOLUME;
  /** Windows.Win32.Devices.Communication.MODEMSETTINGS_SPEAKER_MODE */
  dwSpeakerMode: MODEMSETTINGS_SPEAKER_MODE;
  /** u32 */
  dwPreferredModemOptions: number;
  /** u32 */
  dwNegotiatedModemOptions: number;
  /** u32 */
  dwNegotiatedDCERate: number;
  /** array */
  abVariablePortion: Deno.PointerValue | null;
}

export const sizeofMODEMSETTINGS = 56;

export function allocMODEMSETTINGS(data?: Partial<MODEMSETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofMODEMSETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwActualSize !== undefined) view.setUint32(0, Number(data.dwActualSize), true);
  // 0x04: u32
  if (data?.dwRequiredSize !== undefined) view.setUint32(4, Number(data.dwRequiredSize), true);
  // 0x08: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(8, Number(data.dwDevSpecificOffset), true);
  // 0x0c: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(12, Number(data.dwDevSpecificSize), true);
  // 0x10: u32
  if (data?.dwCallSetupFailTimer !== undefined) view.setUint32(16, Number(data.dwCallSetupFailTimer), true);
  // 0x14: u32
  if (data?.dwInactivityTimeout !== undefined) view.setUint32(20, Number(data.dwInactivityTimeout), true);
  // 0x18: u32
  if (data?.dwSpeakerVolume !== undefined) view.setUint32(24, Number(data.dwSpeakerVolume), true);
  // 0x1c: u32
  if (data?.dwSpeakerMode !== undefined) view.setUint32(28, Number(data.dwSpeakerMode), true);
  // 0x20: u32
  if (data?.dwPreferredModemOptions !== undefined) view.setUint32(32, Number(data.dwPreferredModemOptions), true);
  // 0x24: u32
  if (data?.dwNegotiatedModemOptions !== undefined) view.setUint32(36, Number(data.dwNegotiatedModemOptions), true);
  // 0x28: u32
  if (data?.dwNegotiatedDCERate !== undefined) view.setUint32(40, Number(data.dwNegotiatedDCERate), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.abVariablePortion !== undefined) view.setBigUint64(48, data.abVariablePortion === null ? 0n : BigInt(util.toPointer(data.abVariablePortion)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Communication.COMMPROP (size: 72)
 */
export interface COMMPROP {
  /** u16 */
  wPacketLength: number;
  /** u16 */
  wPacketVersion: number;
  /** u32 */
  dwServiceMask: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwMaxTxQueue: number;
  /** u32 */
  dwMaxRxQueue: number;
  /** u32 */
  dwMaxBaud: number;
  /** u32 */
  dwProvSubType: number;
  /** u32 */
  dwProvCapabilities: number;
  /** u32 */
  dwSettableParams: number;
  /** u32 */
  dwSettableBaud: number;
  /** u16 */
  wSettableData: number;
  /** Windows.Win32.Devices.Communication.COMMPROP_STOP_PARITY */
  wSettableStopParity: COMMPROP_STOP_PARITY;
  /** u32 */
  dwCurrentTxQueue: number;
  /** u32 */
  dwCurrentRxQueue: number;
  /** u32 */
  dwProvSpec1: number;
  /** u32 */
  dwProvSpec2: number;
  /** array */
  wcProvChar: Deno.PointerValue | null;
}

export const sizeofCOMMPROP = 72;

export function allocCOMMPROP(data?: Partial<COMMPROP>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMMPROP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wPacketLength !== undefined) view.setUint16(0, Number(data.wPacketLength), true);
  // 0x02: u16
  if (data?.wPacketVersion !== undefined) view.setUint16(2, Number(data.wPacketVersion), true);
  // 0x04: u32
  if (data?.dwServiceMask !== undefined) view.setUint32(4, Number(data.dwServiceMask), true);
  // 0x08: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(8, Number(data.dwReserved1), true);
  // 0x0c: u32
  if (data?.dwMaxTxQueue !== undefined) view.setUint32(12, Number(data.dwMaxTxQueue), true);
  // 0x10: u32
  if (data?.dwMaxRxQueue !== undefined) view.setUint32(16, Number(data.dwMaxRxQueue), true);
  // 0x14: u32
  if (data?.dwMaxBaud !== undefined) view.setUint32(20, Number(data.dwMaxBaud), true);
  // 0x18: u32
  if (data?.dwProvSubType !== undefined) view.setUint32(24, Number(data.dwProvSubType), true);
  // 0x1c: u32
  if (data?.dwProvCapabilities !== undefined) view.setUint32(28, Number(data.dwProvCapabilities), true);
  // 0x20: u32
  if (data?.dwSettableParams !== undefined) view.setUint32(32, Number(data.dwSettableParams), true);
  // 0x24: u32
  if (data?.dwSettableBaud !== undefined) view.setUint32(36, Number(data.dwSettableBaud), true);
  // 0x28: u16
  if (data?.wSettableData !== undefined) view.setUint16(40, Number(data.wSettableData), true);
  // 0x2a: u16
  if (data?.wSettableStopParity !== undefined) view.setUint16(42, Number(data.wSettableStopParity), true);
  // 0x2c: u32
  if (data?.dwCurrentTxQueue !== undefined) view.setUint32(44, Number(data.dwCurrentTxQueue), true);
  // 0x30: u32
  if (data?.dwCurrentRxQueue !== undefined) view.setUint32(48, Number(data.dwCurrentRxQueue), true);
  // 0x34: u32
  if (data?.dwProvSpec1 !== undefined) view.setUint32(52, Number(data.dwProvSpec1), true);
  // 0x38: u32
  if (data?.dwProvSpec2 !== undefined) view.setUint32(56, Number(data.dwProvSpec2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.wcProvChar !== undefined) view.setBigUint64(64, data.wcProvChar === null ? 0n : BigInt(util.toPointer(data.wcProvChar)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Communication.COMSTAT (size: 16)
 */
export interface COMSTAT {
  /** u32 */
  _bitfield: number;
  /** u32 */
  cbInQue: number;
  /** u32 */
  cbOutQue: number;
}

export const sizeofCOMSTAT = 16;

export function allocCOMSTAT(data?: Partial<COMSTAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMSTAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: u32
  if (data?.cbInQue !== undefined) view.setUint32(4, Number(data.cbInQue), true);
  // 0x08: u32
  if (data?.cbOutQue !== undefined) view.setUint32(8, Number(data.cbOutQue), true);
  // 0x0c: pad4
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.Devices.Communication.DCB (size: 72)
 */
export interface DCB {
  /** u32 */
  DCBlength: number;
  /** u32 */
  BaudRate: number;
  /** u32 */
  _bitfield: number;
  /** u16 */
  wReserved: number;
  /** u16 */
  XonLim: number;
  /** u16 */
  XoffLim: number;
  /** u8 */
  ByteSize: number;
  /** u8 */
  Parity: number;
  /** u8 */
  StopBits: number;
  /** Windows.Win32.Foundation.CHAR */
  XonChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  XoffChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  ErrorChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  EofChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  EvtChar: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wReserved1: number;
}

export const sizeofDCB = 72;

export function allocDCB(data?: Partial<DCB>): Uint8Array {
  const buf = new Uint8Array(sizeofDCB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DCBlength !== undefined) view.setUint32(0, Number(data.DCBlength), true);
  // 0x04: u32
  if (data?.BaudRate !== undefined) view.setUint32(4, Number(data.BaudRate), true);
  // 0x08: u32
  if (data?._bitfield !== undefined) view.setUint32(8, Number(data._bitfield), true);
  // 0x0c: u16
  if (data?.wReserved !== undefined) view.setUint16(12, Number(data.wReserved), true);
  // 0x0e: u16
  if (data?.XonLim !== undefined) view.setUint16(14, Number(data.XonLim), true);
  // 0x10: u16
  if (data?.XoffLim !== undefined) view.setUint16(16, Number(data.XoffLim), true);
  // 0x12: u8
  if (data?.ByteSize !== undefined) view.setUint8(18, Number(data.ByteSize));
  // 0x13: u8
  if (data?.Parity !== undefined) view.setUint8(19, Number(data.Parity));
  // 0x14: u8
  if (data?.StopBits !== undefined) view.setUint8(20, Number(data.StopBits));
  // 0x15: pad3
  // 0x18: pointer
  if (data?.XonChar !== undefined) view.setBigUint64(24, data.XonChar === null ? 0n : BigInt(util.toPointer(data.XonChar)), true);
  // 0x20: pointer
  if (data?.XoffChar !== undefined) view.setBigUint64(32, data.XoffChar === null ? 0n : BigInt(util.toPointer(data.XoffChar)), true);
  // 0x28: pointer
  if (data?.ErrorChar !== undefined) view.setBigUint64(40, data.ErrorChar === null ? 0n : BigInt(util.toPointer(data.ErrorChar)), true);
  // 0x30: pointer
  if (data?.EofChar !== undefined) view.setBigUint64(48, data.EofChar === null ? 0n : BigInt(util.toPointer(data.EofChar)), true);
  // 0x38: pointer
  if (data?.EvtChar !== undefined) view.setBigUint64(56, data.EvtChar === null ? 0n : BigInt(util.toPointer(data.EvtChar)), true);
  // 0x40: u16
  if (data?.wReserved1 !== undefined) view.setUint16(64, Number(data.wReserved1), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Communication.COMMTIMEOUTS (size: 24)
 */
export interface COMMTIMEOUTS {
  /** u32 */
  ReadIntervalTimeout: number;
  /** u32 */
  ReadTotalTimeoutMultiplier: number;
  /** u32 */
  ReadTotalTimeoutConstant: number;
  /** u32 */
  WriteTotalTimeoutMultiplier: number;
  /** u32 */
  WriteTotalTimeoutConstant: number;
}

export const sizeofCOMMTIMEOUTS = 24;

export function allocCOMMTIMEOUTS(data?: Partial<COMMTIMEOUTS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMMTIMEOUTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReadIntervalTimeout !== undefined) view.setUint32(0, Number(data.ReadIntervalTimeout), true);
  // 0x04: u32
  if (data?.ReadTotalTimeoutMultiplier !== undefined) view.setUint32(4, Number(data.ReadTotalTimeoutMultiplier), true);
  // 0x08: u32
  if (data?.ReadTotalTimeoutConstant !== undefined) view.setUint32(8, Number(data.ReadTotalTimeoutConstant), true);
  // 0x0c: u32
  if (data?.WriteTotalTimeoutMultiplier !== undefined) view.setUint32(12, Number(data.WriteTotalTimeoutMultiplier), true);
  // 0x10: u32
  if (data?.WriteTotalTimeoutConstant !== undefined) view.setUint32(16, Number(data.WriteTotalTimeoutConstant), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Communication.COMMCONFIG (size: 40)
 */
export interface COMMCONFIG {
  /** u32 */
  dwSize: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wReserved: number;
  /** Windows.Win32.Devices.Communication.DCB */
  dcb: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwProviderSubType: number;
  /** u32 */
  dwProviderOffset: number;
  /** u32 */
  dwProviderSize: number;
  /** array */
  wcProviderData: Deno.PointerValue | null;
}

export const sizeofCOMMCONFIG = 40;

export function allocCOMMCONFIG(data?: Partial<COMMCONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMMCONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wReserved !== undefined) view.setUint16(6, Number(data.wReserved), true);
  // 0x08: pointer
  if (data?.dcb !== undefined) view.setBigUint64(8, data.dcb === null ? 0n : BigInt(util.toPointer(data.dcb)), true);
  // 0x10: u32
  if (data?.dwProviderSubType !== undefined) view.setUint32(16, Number(data.dwProviderSubType), true);
  // 0x14: u32
  if (data?.dwProviderOffset !== undefined) view.setUint32(20, Number(data.dwProviderOffset), true);
  // 0x18: u32
  if (data?.dwProviderSize !== undefined) view.setUint32(24, Number(data.dwProviderSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.wcProviderData !== undefined) view.setBigUint64(32, data.wcProviderData === null ? 0n : BigInt(util.toPointer(data.wcProviderData)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libKERNEL32 = Deno.dlopen("KERNEL32", {
    ClearCommBreak: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClearCommError: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupComm: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    EscapeCommFunction: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetCommConfig: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetCommMask: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCommProperties: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCommModemStatus: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCommState: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetCommTimeouts: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PurgeComm: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetCommBreak: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetCommConfig: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SetCommMask: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetCommState: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetCommTimeouts: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    TransmitCommChar: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WaitCommEvent: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    BuildCommDCBA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    BuildCommDCBW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    BuildCommDCBAndTimeoutsA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    BuildCommDCBAndTimeoutsW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    CommConfigDialogA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    CommConfigDialogW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetDefaultCommConfigA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetDefaultCommConfigW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetDefaultCommConfigA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    SetDefaultCommConfigW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_comm_l1_1_1 = Deno.dlopen("api-ms-win-core-comm-l1-1-1", {
    OpenCommPort: {
      parameters: ["u32", "u32", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_comm_l1_1_2 = Deno.dlopen("api-ms-win-core-comm-l1-1-2", {
    GetCommPorts: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function ClearCommBreak(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ClearCommBreak(util.toPointer(hFile)));
}

export function ClearCommError(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpErrors: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpStat: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.ClearCommError(util.toPointer(hFile), util.toPointer(lpErrors), util.toPointer(lpStat)));
}

export function SetupComm(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwInQueue: number /* u32 */,
  dwOutQueue: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetupComm(util.toPointer(hFile), dwInQueue, dwOutQueue));
}

export function EscapeCommFunction(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFunc: ESCAPE_COMM_FUNCTION /* Windows.Win32.Devices.Communication.ESCAPE_COMM_FUNCTION */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.EscapeCommFunction(util.toPointer(hFile), dwFunc));
}

export function GetCommConfig(
  hCommDev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetCommConfig(util.toPointer(hCommDev), util.toPointer(lpCC), util.toPointer(lpdwSize)));
}

export function GetCommMask(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpEvtMask: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetCommMask(util.toPointer(hFile), util.toPointer(lpEvtMask)));
}

export function GetCommProperties(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCommProp: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetCommProperties(util.toPointer(hFile), util.toPointer(lpCommProp)));
}

export function GetCommModemStatus(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpModemStat: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetCommModemStatus(util.toPointer(hFile), util.toPointer(lpModemStat)));
}

export function GetCommState(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpDCB: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetCommState(util.toPointer(hFile), util.toPointer(lpDCB)));
}

export function GetCommTimeouts(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCommTimeouts: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetCommTimeouts(util.toPointer(hFile), util.toPointer(lpCommTimeouts)));
}

export function PurgeComm(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: PURGE_COMM_FLAGS /* Windows.Win32.Devices.Communication.PURGE_COMM_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.PurgeComm(util.toPointer(hFile), dwFlags));
}

export function SetCommBreak(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetCommBreak(util.toPointer(hFile)));
}

export function SetCommConfig(
  hCommDev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetCommConfig(util.toPointer(hCommDev), util.toPointer(lpCC), dwSize));
}

export function SetCommMask(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwEvtMask: COMM_EVENT_MASK /* Windows.Win32.Devices.Communication.COMM_EVENT_MASK */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetCommMask(util.toPointer(hFile), dwEvtMask));
}

export function SetCommState(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpDCB: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetCommState(util.toPointer(hFile), util.toPointer(lpDCB)));
}

export function SetCommTimeouts(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpCommTimeouts: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetCommTimeouts(util.toPointer(hFile), util.toPointer(lpCommTimeouts)));
}

export function TransmitCommChar(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  cChar: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.TransmitCommChar(util.toPointer(hFile), util.toPointer(cChar)));
}

export function WaitCommEvent(
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpEvtMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.WaitCommEvent(util.toPointer(hFile), util.toPointer(lpEvtMask), util.toPointer(lpOverlapped)));
}

export function OpenCommPort(
  uPortNumber: number /* u32 */,
  dwDesiredAccess: number /* u32 */,
  dwFlagsAndAttributes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libapi_ms_win_core_comm_l1_1_1.OpenCommPort(uPortNumber, dwDesiredAccess, dwFlagsAndAttributes));
}

export function GetCommPorts(
  lpPortNumbers: Deno.PointerValue | Uint8Array | null /* ptr */,
  uPortNumbersCount: number /* u32 */,
  puPortNumbersFound: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_comm_l1_1_2.GetCommPorts(util.toPointer(lpPortNumbers), uPortNumbersCount, util.toPointer(puPortNumbersFound));
}

export function BuildCommDCBA(
  lpDef: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDCB: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.BuildCommDCBA(util.pstrToFfi(lpDef), util.toPointer(lpDCB)));
}

export function BuildCommDCBW(
  lpDef: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDCB: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.BuildCommDCBW(util.pwstrToFfi(lpDef), util.toPointer(lpDCB)));
}

export function BuildCommDCBAndTimeoutsA(
  lpDef: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDCB: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCommTimeouts: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.BuildCommDCBAndTimeoutsA(util.pstrToFfi(lpDef), util.toPointer(lpDCB), util.toPointer(lpCommTimeouts)));
}

export function BuildCommDCBAndTimeoutsW(
  lpDef: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDCB: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCommTimeouts: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.BuildCommDCBAndTimeoutsW(util.pwstrToFfi(lpDef), util.toPointer(lpDCB), util.toPointer(lpCommTimeouts)));
}

export function CommConfigDialogA(
  lpszName: string | null /* Windows.Win32.Foundation.PSTR */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CommConfigDialogA(util.pstrToFfi(lpszName), util.hwndToFfi(hWnd), util.toPointer(lpCC)));
}

export function CommConfigDialogW(
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.CommConfigDialogW(util.pwstrToFfi(lpszName), util.hwndToFfi(hWnd), util.toPointer(lpCC)));
}

export function GetDefaultCommConfigA(
  lpszName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetDefaultCommConfigA(util.pstrToFfi(lpszName), util.toPointer(lpCC), util.toPointer(lpdwSize)));
}

export function GetDefaultCommConfigW(
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.GetDefaultCommConfigW(util.pwstrToFfi(lpszName), util.toPointer(lpCC), util.toPointer(lpdwSize)));
}

export function SetDefaultCommConfigA(
  lpszName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetDefaultCommConfigA(util.pstrToFfi(lpszName), util.toPointer(lpCC), dwSize));
}

export function SetDefaultCommConfigW(
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpCC: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32.SetDefaultCommConfigW(util.pwstrToFfi(lpszName), util.toPointer(lpCC), dwSize));
}

