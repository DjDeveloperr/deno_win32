/// Auto-generated by Deno Win32: Windows.Win32.Devices.Enumeration.Pnp.Apis

import * as util from "../../../util.ts";

// Enums
export type SW_DEVICE_CAPABILITIES = number;
export type SW_DEVICE_LIFETIME = number;

// Constants
export const UPNP_E_ROOT_ELEMENT_EXPECTED = 288827430293209600n;
export const UPNP_E_DEVICE_ELEMENT_EXPECTED = 288795544456004097n;
export const UPNP_E_SERVICE_ELEMENT_EXPECTED = 1187558720002;
export const UPNP_E_SERVICE_NODE_INCOMPLETE = 288797743479259651n;
export const UPNP_E_DEVICE_NODE_INCOMPLETE = 288798842990887428n;
export const UPNP_E_ICON_ELEMENT_EXPECTED = 288799942502515205n;
export const UPNP_E_ICON_NODE_INCOMPLETE = 288801042014142982n;
export const UPNP_E_INVALID_ACTION = 288802141525770759n;
export const UPNP_E_INVALID_ARGUMENTS = 288803241037398536n;
export const UPNP_E_OUT_OF_SYNC = 288804340549026313n;
export const UPNP_E_ACTION_REQUEST_FAILED = 288864813688554000n;
export const UPNP_E_TRANSPORT_ERROR = 288814236153676305n;
export const UPNP_E_VARIABLE_VALUE_UNKNOWN = 288823032246698514n;
export const UPNP_E_INVALID_VARIABLE = 288815335665304083n;
export const UPNP_E_DEVICE_ERROR = 288816435176931860n;
export const UPNP_E_PROTOCOL_ERROR = 288817534688559637n;
export const UPNP_E_ERROR_PROCESSING_RESPONSE = 288818634200187414n;
export const UPNP_E_DEVICE_TIMEOUT = 988480280986135;
export const UPNP_E_INVALID_DOCUMENT = 289638869874509056n;
export const UPNP_E_EVENT_SUBSCRIPTION_FAILED = 289639969386136833n;
export const FAULT_INVALID_ACTION = 401;
export const FAULT_INVALID_ARG = 402;
export const FAULT_INVALID_SEQUENCE_NUMBER = 403;
export const FAULT_INVALID_VARIABLE = 404;
export const FAULT_DEVICE_INTERNAL_ERROR = 501;
export const FAULT_ACTION_SPECIFIC_BASE = 600;
export const FAULT_ACTION_SPECIFIC_MAX = 899;
export const UPNP_E_ACTION_SPECIFIC_BASE = 333301576125121280n;
export const UPNP_ADDRESSFAMILY_IPv4 = 1;
export const UPNP_ADDRESSFAMILY_IPv6 = 2;
export const UPNP_ADDRESSFAMILY_BOTH = 3;
export const UPNP_SERVICE_DELAY_SCPD_AND_SUBSCRIPTION = 1;
export const UPNP_E_REQUIRED_ELEMENT_ERROR = 333302675636789280n;
export const UPNP_E_DUPLICATE_NOT_ALLOWED = 333303775148417057n;
export const UPNP_E_DUPLICATE_SERVICE_ID = 333304874660044834n;
export const UPNP_E_INVALID_DESCRIPTION = 333305974171672611n;
export const UPNP_E_INVALID_SERVICE = 333307073683300388n;
export const UPNP_E_INVALID_ICON = 333308173194928165n;
export const UPNP_E_INVALID_XML = 333309272706555942n;
export const UPNP_E_INVALID_ROOT_NAMESPACE = 333310372218183719n;
export const UPNP_E_SUFFIX_TOO_LONG = 333311471729811496n;
export const UPNP_E_URLBASE_PRESENT = 333319168311205929n;
export const UPNP_E_VALUE_TOO_LONG = 333320267822833712n;
export const UPNP_E_DEVICE_RUNNING = 333321367334461489n;
export const UPNP_E_DEVICE_NOTREGISTERED = 7277907271601135666n;
export const REMOTE_ADDRESS_VALUE_NAME = `RemoteAddress`;
export const ADDRESS_FAMILY_VALUE_NAME = `AddressFamily`;
export const SWDeviceCapabilitiesNone = 0;
export const SWDeviceCapabilitiesRemovable = 1;
export const SWDeviceCapabilitiesSilentInstall = 2;
export const SWDeviceCapabilitiesNoDisplayInUI = 4;
export const SWDeviceCapabilitiesDriverRequired = 8;
export const SWDeviceLifetimeHandle = 0;
export const SWDeviceLifetimeParentPresent = 1;
export const SWDeviceLifetimeMax = 2;

// Structs

export type HSWDEVICE = number | bigint;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.Enumeration.Pnp.SW_DEVICE_CREATE_INFO (size: 72)
 */
export interface SW_DEVICE_CREATE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszInstanceId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszzHardwareIds: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszzCompatibleIds: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pContainerId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  CapabilityFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDeviceDescription: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDeviceLocation: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSW_DEVICE_CREATE_INFO = 72;

export function allocSW_DEVICE_CREATE_INFO(data?: Partial<SW_DEVICE_CREATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSW_DEVICE_CREATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszInstanceId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszInstanceId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszzHardwareIds !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszzHardwareIds);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszzCompatibleIds !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszzCompatibleIds);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pContainerId !== undefined) view.setBigUint64(32, data.pContainerId === null ? 0n : util.toBigInt(util.toPointer(data.pContainerId)), true);
  // 0x28: u32
  if (data?.CapabilityFlags !== undefined) view.setUint32(40, Number(data.CapabilityFlags), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pszDeviceDescription !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszDeviceDescription);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pszDeviceLocation !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszDeviceLocation);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(64, data.pSecurityDescriptor === null ? 0n : util.toBigInt(util.toPointer(data.pSecurityDescriptor)), true);
  return buf;
}

export class SW_DEVICE_CREATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszInstanceId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszzHardwareIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszzCompatibleIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pContainerId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get CapabilityFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get pszDeviceDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pszDeviceLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszInstanceId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszzHardwareIds(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszzCompatibleIds(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, util.toBigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set pContainerId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set CapabilityFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set pszDeviceDescription(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, util.toBigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set pszDeviceLocation(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, util.toBigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

export type BOOL = number;

// Native Libraries

try {
  var libCFGMGR32_dll = Deno.dlopen("CFGMGR32.dll", {
    SwDeviceCreate: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SwDeviceClose: {
      parameters: ["pointer"],
      result: "void",
    },
    SwDeviceSetLifetime: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    SwDeviceGetLifetime: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SwDevicePropertySet: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SwDeviceInterfaceRegister: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    SwMemFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SwDeviceInterfaceSetState: {
      parameters: ["pointer", "buffer", "i32"],
      result: "pointer",
    },
    SwDeviceInterfacePropertySet: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SwDeviceCreate(
  pszEnumeratorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszParentDeviceInstance: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCreateInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cPropertyCount: number /* u32 */,
  pProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.SW_DEVICE_CREATE_CALLBACK */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  phSwDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDeviceCreate(util.pwstrToFfi(pszEnumeratorName), util.pwstrToFfi(pszParentDeviceInstance), util.toPointer(pCreateInfo), cPropertyCount, util.toPointer(pProperties), util.toPointer(pCallback), util.toPointer(pContext), util.toPointer(phSwDevice)));
}

export function SwDeviceClose(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
): void /* void */ {
  return libCFGMGR32_dll.SwDeviceClose(util.toPointer(hSwDevice));
}

export function SwDeviceSetLifetime(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
  Lifetime: SW_DEVICE_LIFETIME /* Windows.Win32.Devices.Enumeration.Pnp.SW_DEVICE_LIFETIME */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDeviceSetLifetime(util.toPointer(hSwDevice), Lifetime));
}

export function SwDeviceGetLifetime(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
  pLifetime: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDeviceGetLifetime(util.toPointer(hSwDevice), util.toPointer(pLifetime)));
}

export function SwDevicePropertySet(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
  cPropertyCount: number /* u32 */,
  pProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDevicePropertySet(util.toPointer(hSwDevice), cPropertyCount, util.toPointer(pProperties)));
}

export function SwDeviceInterfaceRegister(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
  pInterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszReferenceString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cPropertyCount: number /* u32 */,
  pProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  fEnabled: boolean /* Windows.Win32.Foundation.BOOL */,
  ppszDeviceInterfaceId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDeviceInterfaceRegister(util.toPointer(hSwDevice), util.toPointer(pInterfaceClassGuid), util.pwstrToFfi(pszReferenceString), cPropertyCount, util.toPointer(pProperties), util.boolToFfi(fEnabled), util.toPointer(ppszDeviceInterfaceId)));
}

export function SwMemFree(
  pMem: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libCFGMGR32_dll.SwMemFree(util.toPointer(pMem));
}

export function SwDeviceInterfaceSetState(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
  pszDeviceInterfaceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fEnabled: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDeviceInterfaceSetState(util.toPointer(hSwDevice), util.pwstrToFfi(pszDeviceInterfaceId), util.boolToFfi(fEnabled)));
}

export function SwDeviceInterfacePropertySet(
  hSwDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Enumeration.Pnp.HSWDEVICE */,
  pszDeviceInterfaceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cPropertyCount: number /* u32 */,
  pProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libCFGMGR32_dll.SwDeviceInterfacePropertySet(util.toPointer(hSwDevice), util.pwstrToFfi(pszDeviceInterfaceId), cPropertyCount, util.toPointer(pProperties)));
}

