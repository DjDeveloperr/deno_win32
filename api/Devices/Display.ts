/// Auto-generated by Deno Win32: Windows.Win32.Devices.Display.Apis

import * as util from "../../util.ts";

// Enums
export type DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = number;
export type DISPLAYCONFIG_SCANLINE_ORDERING = number;
export type DISPLAYCONFIG_SCALING = number;
export type DISPLAYCONFIG_ROTATION = number;
export type DISPLAYCONFIG_MODE_INFO_TYPE = number;
export type DISPLAYCONFIG_PIXELFORMAT = number;
export type DISPLAYCONFIG_TOPOLOGY_ID = number;
export type DISPLAYCONFIG_DEVICE_INFO_TYPE = number;
export type DISPLAYCONFIG_COLOR_ENCODING = number;
export type MC_VCP_CODE_TYPE = number;
export type MC_DISPLAY_TECHNOLOGY_TYPE = number;
export type MC_DRIVE_TYPE = number;
export type MC_GAIN_TYPE = number;
export type MC_POSITION_TYPE = number;
export type MC_SIZE_TYPE = number;
export type MC_COLOR_TEMPERATURE = number;
export type DEVMODE_FIELD_FLAGS = number;
export type DEVMODE_COLOR = number;
export type DEVMODE_TRUETYPE_OPTION = number;
export type DEVMODE_COLLATE = number;
export type PAN_FAMILY_TYPE = number;
export type PAN_SERIF_STYLE = number;
export type PAN_WEIGHT = number;
export type PAN_PROPORTION = number;
export type PAN_CONTRAST = number;
export type PAN_STROKE_VARIATION = number;
export type PAN_ARM_STYLE = number;
export type PAN_LETT_FORM = number;
export type PAN_MIDLINE = number;
export type PAN_XHEIGHT = number;
export type FONT_CHARSET = number;
export type FONT_OUTPUT_PRECISION = number;
export type FONT_CLIP_PRECISION = number;
export type FONT_QUALITY = number;
export type ENG_SYSTEM_ATTRIBUTE = number;
export type ENG_DEVICE_ATTRIBUTE = number;
export type VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE = number;
export type BlackScreenDiagnosticsCalloutParam = number;
export type VIDEO_BANK_TYPE = number;
export type VIDEO_POWER_STATE = number;
export type BRIGHTNESS_INTERFACE_VERSION = number;
export type BACKLIGHT_OPTIMIZATION_LEVEL = number;
export type COLORSPACE_TRANSFORM_DATA_TYPE = number;
export type COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION = number;
export type COLORSPACE_TRANSFORM_TYPE = number;
export type OUTPUT_WIRE_COLOR_SPACE_TYPE = number;
export type OUTPUT_COLOR_ENCODING = number;
export type COLORSPACE_TRANSFORM_STAGE_CONTROL = number;
export type DSI_CONTROL_TRANSMISSION_MODE = number;
export type AR_STATE = number;
export type ORIENTATION_PREFERENCE = number;

// Constants
export const INDIRECT_DISPLAY_INFO_FLAGS_CREATED_IDDCX_ADAPTER = 1;
export const VIDEO_DEVICE_NAME = `DISPLAY%d`;
export const WVIDEO_DEVICE_NAME = `DISPLAY%d`;
export const IOCTL_VIDEO_DISABLE_VDM = 2293764;
export const IOCTL_VIDEO_REGISTER_VDM = 2293768;
export const IOCTL_VIDEO_SET_OUTPUT_DEVICE_POWER_STATE = 2293772;
export const IOCTL_VIDEO_GET_OUTPUT_DEVICE_POWER_STATE = 2293776;
export const IOCTL_VIDEO_MONITOR_DEVICE = 2293780;
export const IOCTL_VIDEO_ENUM_MONITOR_PDO = 2293784;
export const IOCTL_VIDEO_INIT_WIN32K_CALLBACKS = 2293788;
export const IOCTL_VIDEO_IS_VGA_DEVICE = 2293796;
export const IOCTL_VIDEO_USE_DEVICE_IN_SESSION = 2293800;
export const IOCTL_VIDEO_PREPARE_FOR_EARECOVERY = 2293804;
export const IOCTL_VIDEO_ENABLE_VDM = 2293760;
export const IOCTL_VIDEO_SAVE_HARDWARE_STATE = 2294272;
export const IOCTL_VIDEO_RESTORE_HARDWARE_STATE = 2294276;
export const IOCTL_VIDEO_HANDLE_VIDEOPARAMETERS = 2293792;
export const IOCTL_VIDEO_QUERY_AVAIL_MODES = 2294784;
export const IOCTL_VIDEO_QUERY_NUM_AVAIL_MODES = 2294788;
export const IOCTL_VIDEO_QUERY_CURRENT_MODE = 2294792;
export const IOCTL_VIDEO_SET_CURRENT_MODE = 2294796;
export const IOCTL_VIDEO_RESET_DEVICE = 2294800;
export const IOCTL_VIDEO_LOAD_AND_SET_FONT = 2294804;
export const IOCTL_VIDEO_SET_PALETTE_REGISTERS = 2294808;
export const IOCTL_VIDEO_SET_COLOR_REGISTERS = 2294812;
export const IOCTL_VIDEO_ENABLE_CURSOR = 2294816;
export const IOCTL_VIDEO_DISABLE_CURSOR = 2294820;
export const IOCTL_VIDEO_SET_CURSOR_ATTR = 2294824;
export const IOCTL_VIDEO_QUERY_CURSOR_ATTR = 2294828;
export const IOCTL_VIDEO_SET_CURSOR_POSITION = 2294832;
export const IOCTL_VIDEO_QUERY_CURSOR_POSITION = 2294836;
export const IOCTL_VIDEO_ENABLE_POINTER = 2294840;
export const IOCTL_VIDEO_DISABLE_POINTER = 2294844;
export const IOCTL_VIDEO_SET_POINTER_ATTR = 2294848;
export const IOCTL_VIDEO_QUERY_POINTER_ATTR = 2294852;
export const IOCTL_VIDEO_SET_POINTER_POSITION = 2294856;
export const IOCTL_VIDEO_QUERY_POINTER_POSITION = 2294860;
export const IOCTL_VIDEO_QUERY_POINTER_CAPABILITIES = 2294864;
export const IOCTL_VIDEO_GET_BANK_SELECT_CODE = 2294868;
export const IOCTL_VIDEO_MAP_VIDEO_MEMORY = 2294872;
export const IOCTL_VIDEO_UNMAP_VIDEO_MEMORY = 2294876;
export const IOCTL_VIDEO_QUERY_PUBLIC_ACCESS_RANGES = 2294880;
export const IOCTL_VIDEO_FREE_PUBLIC_ACCESS_RANGES = 2294884;
export const IOCTL_VIDEO_QUERY_COLOR_CAPABILITIES = 2294888;
export const IOCTL_VIDEO_SET_POWER_MANAGEMENT = 2294892;
export const IOCTL_VIDEO_GET_POWER_MANAGEMENT = 2294896;
export const IOCTL_VIDEO_SHARE_VIDEO_MEMORY = 2294900;
export const IOCTL_VIDEO_UNSHARE_VIDEO_MEMORY = 2294904;
export const IOCTL_VIDEO_SET_COLOR_LUT_DATA = 2294908;
export const IOCTL_VIDEO_GET_CHILD_STATE = 2294912;
export const IOCTL_VIDEO_VALIDATE_CHILD_STATE_CONFIGURATION = 2294916;
export const IOCTL_VIDEO_SET_CHILD_STATE_CONFIGURATION = 2294920;
export const IOCTL_VIDEO_SWITCH_DUALVIEW = 2294924;
export const IOCTL_VIDEO_SET_BANK_POSITION = 2294928;
export const IOCTL_VIDEO_QUERY_SUPPORTED_BRIGHTNESS = 2294932;
export const IOCTL_VIDEO_QUERY_DISPLAY_BRIGHTNESS = 2294936;
export const IOCTL_VIDEO_SET_DISPLAY_BRIGHTNESS = 2294940;
export const IOCTL_FSVIDEO_COPY_FRAME_BUFFER = 3409920;
export const IOCTL_FSVIDEO_WRITE_TO_FRAME_BUFFER = 3409924;
export const IOCTL_FSVIDEO_REVERSE_MOUSE_POINTER = 3409928;
export const IOCTL_FSVIDEO_SET_CURRENT_MODE = 3409932;
export const IOCTL_FSVIDEO_SET_SCREEN_INFORMATION = 3409936;
export const IOCTL_FSVIDEO_SET_CURSOR_POSITION = 3409940;
export const IOCTL_PANEL_QUERY_BRIGHTNESS_CAPS = 2296832;
export const IOCTL_PANEL_QUERY_BRIGHTNESS_RANGES = 2296836;
export const IOCTL_PANEL_GET_BRIGHTNESS = 2296840;
export const IOCTL_PANEL_SET_BRIGHTNESS = 2296844;
export const IOCTL_PANEL_SET_BRIGHTNESS_STATE = 2296848;
export const IOCTL_PANEL_SET_BACKLIGHT_OPTIMIZATION = 2296852;
export const IOCTL_PANEL_GET_BACKLIGHT_REDUCTION = 2296856;
export const IOCTL_COLORSPACE_TRANSFORM_QUERY_TARGET_CAPS = 2297856;
export const IOCTL_COLORSPACE_TRANSFORM_SET = 2297860;
export const IOCTL_SET_ACTIVE_COLOR_PROFILE_NAME = 2297864;
export const IOCTL_MIPI_DSI_QUERY_CAPS = 2298880;
export const IOCTL_MIPI_DSI_TRANSMISSION = 2298884;
export const IOCTL_MIPI_DSI_RESET = 2298888;
export const DXGK_WIN32K_PARAM_FLAG_UPDATEREGISTRY = 1;
export const DXGK_WIN32K_PARAM_FLAG_MODESWITCH = 2;
export const DXGK_WIN32K_PARAM_FLAG_DISABLEVIEW = 4;
export const VIDEO_DUALVIEW_REMOVABLE = 1;
export const VIDEO_DUALVIEW_PRIMARY = 2147483648;
export const VIDEO_DUALVIEW_SECONDARY = 1073741824;
export const VIDEO_DUALVIEW_WDDM_VGA = 536870912;
export const VIDEO_STATE_NON_STANDARD_VGA = 1;
export const VIDEO_STATE_UNEMULATED_VGA_STATE = 2;
export const VIDEO_STATE_PACKED_CHAIN4_MODE = 4;
export const VIDEO_MODE_NO_ZERO_MEMORY = 2147483648;
export const VIDEO_MODE_MAP_MEM_LINEAR = 1073741824;
export const VIDEO_MODE_COLOR = 1;
export const VIDEO_MODE_GRAPHICS = 2;
export const VIDEO_MODE_PALETTE_DRIVEN = 4;
export const VIDEO_MODE_MANAGED_PALETTE = 8;
export const VIDEO_MODE_INTERLACED = 16;
export const VIDEO_MODE_NO_OFF_SCREEN = 32;
export const VIDEO_MODE_NO_64_BIT_ACCESS = 64;
export const VIDEO_MODE_BANKED = 128;
export const VIDEO_MODE_LINEAR = 256;
export const VIDEO_MODE_ASYNC_POINTER = 1;
export const VIDEO_MODE_MONO_POINTER = 2;
export const VIDEO_MODE_COLOR_POINTER = 4;
export const VIDEO_MODE_ANIMATE_START = 8;
export const VIDEO_MODE_ANIMATE_UPDATE = 16;
export const PLANAR_HC = 1;
export const VIDEO_DEVICE_COLOR = 1;
export const VIDEO_OPTIONAL_GAMMET_TABLE = 2;
export const VIDEO_COLOR_LUT_DATA_FORMAT_RGB256WORDS = 1;
export const VIDEO_COLOR_LUT_DATA_FORMAT_PRIVATEFORMAT = 2147483648;
export const DISPLAYPOLICY_AC = 1;
export const DISPLAYPOLICY_DC = 2;
export const CHAR_TYPE_SBCS = 0;
export const CHAR_TYPE_LEADING = 2;
export const CHAR_TYPE_TRAILING = 3;
export const BITMAP_BITS_BYTE_ALIGN = 8;
export const BITMAP_BITS_WORD_ALIGN = 16;
export const BITMAP_ARRAY_BYTE = 3;
export const BITMAP_PLANES = 1;
export const BITMAP_BITS_PIXEL = 1;
export const DD_FULLSCREEN_VIDEO_DEVICE_NAME = `\\Device\\FSVideo`;
export const VIDEO_REASON_NONE = 0;
export const VIDEO_REASON_POLICY1 = 1;
export const VIDEO_REASON_POLICY2 = 2;
export const VIDEO_REASON_POLICY3 = 3;
export const VIDEO_REASON_POLICY4 = 4;
export const VIDEO_REASON_LOCK = 5;
export const VIDEO_REASON_FAILED_ROTATION = 5;
export const VIDEO_REASON_ALLOCATION = 6;
export const VIDEO_REASON_SCRATCH = 8;
export const VIDEO_REASON_CONFIGURATION = 9;
export const VIDEO_MAX_REASON = 9;
export const BRIGHTNESS_MAX_LEVEL_COUNT = 103;
export const BRIGHTNESS_MAX_NIT_RANGE_COUNT = 16;
export const DSI_PACKET_EMBEDDED_PAYLOAD_SIZE = 8;
export const MAX_PACKET_COUNT = 128;
export const DSI_INVALID_PACKET_INDEX = 255;
export const DSI_SOT_ERROR = 1;
export const DSI_SOT_SYNC_ERROR = 2;
export const DSI_EOT_SYNC_ERROR = 4;
export const DSI_ESCAPE_MODE_ENTRY_COMMAND_ERROR = 8;
export const DSI_LOW_POWER_TRANSMIT_SYNC_ERROR = 16;
export const DSI_PERIPHERAL_TIMEOUT_ERROR = 32;
export const DSI_FALSE_CONTROL_ERROR = 64;
export const DSI_CONTENTION_DETECTED = 128;
export const DSI_CHECKSUM_ERROR_CORRECTED = 256;
export const DSI_CHECKSUM_ERROR_NOT_CORRECTED = 512;
export const DSI_LONG_PACKET_PAYLOAD_CHECKSUM_ERROR = 1024;
export const DSI_DSI_DATA_TYPE_NOT_RECOGNIZED = 2048;
export const DSI_DSI_VC_ID_INVALID = 4096;
export const DSI_INVALID_TRANSMISSION_LENGTH = 8192;
export const DSI_DSI_PROTOCOL_VIOLATION = 32768;
export const HOST_DSI_DEVICE_NOT_READY = 1;
export const HOST_DSI_INTERFACE_RESET = 2;
export const HOST_DSI_DEVICE_RESET = 4;
export const HOST_DSI_TRANSMISSION_CANCELLED = 16;
export const HOST_DSI_TRANSMISSION_DROPPED = 32;
export const HOST_DSI_TRANSMISSION_TIMEOUT = 64;
export const HOST_DSI_INVALID_TRANSMISSION = 256;
export const HOST_DSI_OS_REJECTED_PACKET = 512;
export const HOST_DSI_DRIVER_REJECTED_PACKET = 1024;
export const HOST_DSI_BAD_TRANSMISSION_MODE = 4096;
export const FD_ERROR = 4294967295;
export const DDI_ERROR = 4294967295;
export const FDM_TYPE_BM_SIDE_CONST = 1;
export const FDM_TYPE_MAXEXT_EQUAL_BM_SIDE = 2;
export const FDM_TYPE_CHAR_INC_EQUAL_BM_BASE = 4;
export const FDM_TYPE_ZERO_BEARINGS = 8;
export const FDM_TYPE_CONST_BEARINGS = 16;
export const GS_UNICODE_HANDLES = 1;
export const GS_8BIT_HANDLES = 2;
export const GS_16BIT_HANDLES = 4;
export const FM_VERSION_NUMBER = 0;
export const FM_TYPE_LICENSED = 2;
export const FM_READONLY_EMBED = 4;
export const FM_EDITABLE_EMBED = 8;
export const FM_NO_EMBEDDING = 2;
export const FM_INFO_TECH_TRUETYPE = 1;
export const FM_INFO_TECH_BITMAP = 2;
export const FM_INFO_TECH_STROKE = 4;
export const FM_INFO_TECH_OUTLINE_NOT_TRUETYPE = 8;
export const FM_INFO_ARB_XFORMS = 16;
export const FM_INFO_1BPP = 32;
export const FM_INFO_4BPP = 64;
export const FM_INFO_8BPP = 128;
export const FM_INFO_16BPP = 256;
export const FM_INFO_24BPP = 512;
export const FM_INFO_32BPP = 1024;
export const FM_INFO_INTEGER_WIDTH = 2048;
export const FM_INFO_CONSTANT_WIDTH = 4096;
export const FM_INFO_NOT_CONTIGUOUS = 8192;
export const FM_INFO_TECH_MM = 16384;
export const FM_INFO_RETURNS_OUTLINES = 32768;
export const FM_INFO_RETURNS_STROKES = 65536;
export const FM_INFO_RETURNS_BITMAPS = 131072;
export const FM_INFO_DSIG = 262144;
export const FM_INFO_RIGHT_HANDED = 524288;
export const FM_INFO_INTEGRAL_SCALING = 1048576;
export const FM_INFO_90DEGREE_ROTATIONS = 2097152;
export const FM_INFO_OPTICALLY_FIXED_PITCH = 4194304;
export const FM_INFO_DO_NOT_ENUMERATE = 8388608;
export const FM_INFO_ISOTROPIC_SCALING_ONLY = 16777216;
export const FM_INFO_ANISOTROPIC_SCALING_ONLY = 33554432;
export const FM_INFO_TECH_CFF = 67108864;
export const FM_INFO_FAMILY_EQUIV = 134217728;
export const FM_INFO_DBCS_FIXED_PITCH = 268435456;
export const FM_INFO_NONNEGATIVE_AC = 536870912;
export const FM_INFO_IGNORE_TC_RA_ABLE = 1073741824;
export const FM_INFO_TECH_TYPE1 = 2147483648;
export const MAXCHARSETS = 16;
export const FM_PANOSE_CULTURE_LATIN = 0;
export const FM_SEL_ITALIC = 1;
export const FM_SEL_UNDERSCORE = 2;
export const FM_SEL_NEGATIVE = 4;
export const FM_SEL_OUTLINED = 8;
export const FM_SEL_STRIKEOUT = 16;
export const FM_SEL_BOLD = 32;
export const FM_SEL_REGULAR = 64;
export const OPENGL_CMD = 4352;
export const OPENGL_GETINFO = 4353;
export const WNDOBJ_SETUP = 4354;
export const DDI_DRIVER_VERSION_NT4 = 131072;
export const DDI_DRIVER_VERSION_SP3 = 131075;
export const DDI_DRIVER_VERSION_NT5 = 196608;
export const DDI_DRIVER_VERSION_NT5_01 = 196864;
export const DDI_DRIVER_VERSION_NT5_01_SP1 = 196865;
export const GDI_DRIVER_VERSION = 16384;
export const INDEX_DrvEnablePDEV = 0;
export const INDEX_DrvCompletePDEV = 1;
export const INDEX_DrvDisablePDEV = 2;
export const INDEX_DrvEnableSurface = 3;
export const INDEX_DrvDisableSurface = 4;
export const INDEX_DrvAssertMode = 5;
export const INDEX_DrvOffset = 6;
export const INDEX_DrvResetPDEV = 7;
export const INDEX_DrvDisableDriver = 8;
export const INDEX_DrvCreateDeviceBitmap = 10;
export const INDEX_DrvDeleteDeviceBitmap = 11;
export const INDEX_DrvRealizeBrush = 12;
export const INDEX_DrvDitherColor = 13;
export const INDEX_DrvStrokePath = 14;
export const INDEX_DrvFillPath = 15;
export const INDEX_DrvStrokeAndFillPath = 16;
export const INDEX_DrvPaint = 17;
export const INDEX_DrvBitBlt = 18;
export const INDEX_DrvCopyBits = 19;
export const INDEX_DrvStretchBlt = 20;
export const INDEX_DrvSetPalette = 22;
export const INDEX_DrvTextOut = 23;
export const INDEX_DrvEscape = 24;
export const INDEX_DrvDrawEscape = 25;
export const INDEX_DrvQueryFont = 26;
export const INDEX_DrvQueryFontTree = 27;
export const INDEX_DrvQueryFontData = 28;
export const INDEX_DrvSetPointerShape = 29;
export const INDEX_DrvMovePointer = 30;
export const INDEX_DrvLineTo = 31;
export const INDEX_DrvSendPage = 32;
export const INDEX_DrvStartPage = 33;
export const INDEX_DrvEndDoc = 34;
export const INDEX_DrvStartDoc = 35;
export const INDEX_DrvGetGlyphMode = 37;
export const INDEX_DrvSynchronize = 38;
export const INDEX_DrvSaveScreenBits = 40;
export const INDEX_DrvGetModes = 41;
export const INDEX_DrvFree = 42;
export const INDEX_DrvDestroyFont = 43;
export const INDEX_DrvQueryFontCaps = 44;
export const INDEX_DrvLoadFontFile = 45;
export const INDEX_DrvUnloadFontFile = 46;
export const INDEX_DrvFontManagement = 47;
export const INDEX_DrvQueryTrueTypeTable = 48;
export const INDEX_DrvQueryTrueTypeOutline = 49;
export const INDEX_DrvGetTrueTypeFile = 50;
export const INDEX_DrvQueryFontFile = 51;
export const INDEX_DrvMovePanning = 52;
export const INDEX_DrvQueryAdvanceWidths = 53;
export const INDEX_DrvSetPixelFormat = 54;
export const INDEX_DrvDescribePixelFormat = 55;
export const INDEX_DrvSwapBuffers = 56;
export const INDEX_DrvStartBanding = 57;
export const INDEX_DrvNextBand = 58;
export const INDEX_DrvGetDirectDrawInfo = 59;
export const INDEX_DrvEnableDirectDraw = 60;
export const INDEX_DrvDisableDirectDraw = 61;
export const INDEX_DrvQuerySpoolType = 62;
export const INDEX_DrvIcmCreateColorTransform = 64;
export const INDEX_DrvIcmDeleteColorTransform = 65;
export const INDEX_DrvIcmCheckBitmapBits = 66;
export const INDEX_DrvIcmSetDeviceGammaRamp = 67;
export const INDEX_DrvGradientFill = 68;
export const INDEX_DrvStretchBltROP = 69;
export const INDEX_DrvPlgBlt = 70;
export const INDEX_DrvAlphaBlend = 71;
export const INDEX_DrvSynthesizeFont = 72;
export const INDEX_DrvGetSynthesizedFontFiles = 73;
export const INDEX_DrvTransparentBlt = 74;
export const INDEX_DrvQueryPerBandInfo = 75;
export const INDEX_DrvQueryDeviceSupport = 76;
export const INDEX_DrvReserved1 = 77;
export const INDEX_DrvReserved2 = 78;
export const INDEX_DrvReserved3 = 79;
export const INDEX_DrvReserved4 = 80;
export const INDEX_DrvReserved5 = 81;
export const INDEX_DrvReserved6 = 82;
export const INDEX_DrvReserved7 = 83;
export const INDEX_DrvReserved8 = 84;
export const INDEX_DrvDeriveSurface = 85;
export const INDEX_DrvQueryGlyphAttrs = 86;
export const INDEX_DrvNotify = 87;
export const INDEX_DrvSynchronizeSurface = 88;
export const INDEX_DrvResetDevice = 89;
export const INDEX_DrvReserved9 = 90;
export const INDEX_DrvReserved10 = 91;
export const INDEX_DrvReserved11 = 92;
export const INDEX_DrvRenderHint = 93;
export const INDEX_DrvCreateDeviceBitmapEx = 94;
export const INDEX_DrvDeleteDeviceBitmapEx = 95;
export const INDEX_DrvAssociateSharedSurface = 96;
export const INDEX_DrvSynchronizeRedirectionBitmaps = 97;
export const INDEX_DrvAccumulateD3DDirtyRect = 98;
export const INDEX_DrvStartDxInterop = 99;
export const INDEX_DrvEndDxInterop = 100;
export const INDEX_DrvLockDisplayArea = 101;
export const INDEX_DrvUnlockDisplayArea = 102;
export const INDEX_DrvSurfaceComplete = 103;
export const INDEX_LAST = 89;
export const GCAPS_BEZIERS = 1;
export const GCAPS_GEOMETRICWIDE = 2;
export const GCAPS_ALTERNATEFILL = 4;
export const GCAPS_WINDINGFILL = 8;
export const GCAPS_HALFTONE = 16;
export const GCAPS_COLOR_DITHER = 32;
export const GCAPS_HORIZSTRIKE = 64;
export const GCAPS_VERTSTRIKE = 128;
export const GCAPS_OPAQUERECT = 256;
export const GCAPS_VECTORFONT = 512;
export const GCAPS_MONO_DITHER = 1024;
export const GCAPS_ASYNCCHANGE = 2048;
export const GCAPS_ASYNCMOVE = 4096;
export const GCAPS_DONTJOURNAL = 8192;
export const GCAPS_DIRECTDRAW = 16384;
export const GCAPS_ARBRUSHOPAQUE = 32768;
export const GCAPS_PANNING = 65536;
export const GCAPS_HIGHRESTEXT = 262144;
export const GCAPS_PALMANAGED = 524288;
export const GCAPS_DITHERONREALIZE = 2097152;
export const GCAPS_NO64BITMEMACCESS = 4194304;
export const GCAPS_FORCEDITHER = 8388608;
export const GCAPS_GRAY16 = 16777216;
export const GCAPS_ICM = 33554432;
export const GCAPS_CMYKCOLOR = 67108864;
export const GCAPS_LAYERED = 134217728;
export const GCAPS_ARBRUSHTEXT = 268435456;
export const GCAPS_SCREENPRECISION = 536870912;
export const GCAPS_FONT_RASTERIZER = 1073741824;
export const GCAPS_NUP = 2147483648;
export const GCAPS2_JPEGSRC = 1;
export const GCAPS2_xxxx = 2;
export const GCAPS2_PNGSRC = 8;
export const GCAPS2_CHANGEGAMMARAMP = 16;
export const GCAPS2_ALPHACURSOR = 32;
export const GCAPS2_SYNCFLUSH = 64;
export const GCAPS2_SYNCTIMER = 128;
export const GCAPS2_ICD_MULTIMON = 256;
export const GCAPS2_MOUSETRAILS = 512;
export const GCAPS2_RESERVED1 = 1024;
export const GCAPS2_REMOTEDRIVER = 1024;
export const GCAPS2_EXCLUDELAYERED = 2048;
export const GCAPS2_INCLUDEAPIBITMAPS = 4096;
export const GCAPS2_SHOWHIDDENPOINTER = 8192;
export const GCAPS2_CLEARTYPE = 16384;
export const GCAPS2_ACC_DRIVER = 32768;
export const GCAPS2_BITMAPEXREUSE = 65536;
export const LA_GEOMETRIC = 1;
export const LA_ALTERNATE = 2;
export const LA_STARTGAP = 4;
export const LA_STYLED = 8;
export const JOIN_ROUND = 0;
export const JOIN_BEVEL = 1;
export const JOIN_MITER = 2;
export const ENDCAP_ROUND = 0;
export const ENDCAP_SQUARE = 1;
export const ENDCAP_BUTT = 2;
export const PRIMARY_ORDER_ABC = 0;
export const PRIMARY_ORDER_ACB = 1;
export const PRIMARY_ORDER_BAC = 2;
export const PRIMARY_ORDER_BCA = 3;
export const PRIMARY_ORDER_CBA = 4;
export const PRIMARY_ORDER_CAB = 5;
export const HT_PATSIZE_2x2 = 0;
export const HT_PATSIZE_2x2_M = 1;
export const HT_PATSIZE_4x4 = 2;
export const HT_PATSIZE_4x4_M = 3;
export const HT_PATSIZE_6x6 = 4;
export const HT_PATSIZE_6x6_M = 5;
export const HT_PATSIZE_8x8 = 6;
export const HT_PATSIZE_8x8_M = 7;
export const HT_PATSIZE_10x10 = 8;
export const HT_PATSIZE_10x10_M = 9;
export const HT_PATSIZE_12x12 = 10;
export const HT_PATSIZE_12x12_M = 11;
export const HT_PATSIZE_14x14 = 12;
export const HT_PATSIZE_14x14_M = 13;
export const HT_PATSIZE_16x16 = 14;
export const HT_PATSIZE_16x16_M = 15;
export const HT_PATSIZE_SUPERCELL = 16;
export const HT_PATSIZE_SUPERCELL_M = 17;
export const HT_PATSIZE_USER = 18;
export const HT_PATSIZE_MAX_INDEX = 18;
export const HT_PATSIZE_DEFAULT = 17;
export const HT_USERPAT_CX_MIN = 4;
export const HT_USERPAT_CX_MAX = 256;
export const HT_USERPAT_CY_MIN = 4;
export const HT_USERPAT_CY_MAX = 256;
export const HT_FORMAT_1BPP = 0;
export const HT_FORMAT_4BPP = 2;
export const HT_FORMAT_4BPP_IRGB = 3;
export const HT_FORMAT_8BPP = 4;
export const HT_FORMAT_16BPP = 5;
export const HT_FORMAT_24BPP = 6;
export const HT_FORMAT_32BPP = 7;
export const WINDDI_MAX_BROADCAST_CONTEXT = 64;
export const HT_FLAG_SQUARE_DEVICE_PEL = 1;
export const HT_FLAG_HAS_BLACK_DYE = 2;
export const HT_FLAG_ADDITIVE_PRIMS = 4;
export const HT_FLAG_USE_8BPP_BITMASK = 8;
export const HT_FLAG_INK_HIGH_ABSORPTION = 16;
export const HT_FLAG_INK_ABSORPTION_INDICES = 96;
export const HT_FLAG_DO_DEVCLR_XFORM = 128;
export const HT_FLAG_OUTPUT_CMY = 256;
export const HT_FLAG_PRINT_DRAFT_MODE = 512;
export const HT_FLAG_INVERT_8BPP_BITMASK_IDX = 1024;
export const HT_FLAG_8BPP_CMY332_MASK = 4278190080;
export const HT_FLAG_INK_ABSORPTION_IDX0 = 0;
export const HT_FLAG_INK_ABSORPTION_IDX1 = 32;
export const HT_FLAG_INK_ABSORPTION_IDX2 = 64;
export const HT_FLAG_INK_ABSORPTION_IDX3 = 96;
export const HT_FLAG_NORMAL_INK_ABSORPTION = 0;
export const HT_FLAG_LOW_INK_ABSORPTION = 32;
export const HT_FLAG_LOWER_INK_ABSORPTION = 64;
export const HT_FLAG_LOWEST_INK_ABSORPTION = 96;
export const PPC_DEFAULT = 0;
export const PPC_UNDEFINED = 1;
export const PPC_RGB_ORDER_VERTICAL_STRIPES = 2;
export const PPC_BGR_ORDER_VERTICAL_STRIPES = 3;
export const PPC_RGB_ORDER_HORIZONTAL_STRIPES = 4;
export const PPC_BGR_ORDER_HORIZONTAL_STRIPES = 5;
export const PPG_DEFAULT = 0;
export const PPG_SRGB = 1;
export const BR_DEVICE_ICM = 1;
export const BR_HOST_ICM = 2;
export const BR_CMYKCOLOR = 4;
export const BR_ORIGCOLOR = 8;
export const FO_SIM_BOLD = 8192;
export const FO_SIM_ITALIC = 16384;
export const FO_EM_HEIGHT = 32768;
export const FO_GRAY16 = 65536;
export const FO_NOGRAY16 = 131072;
export const FO_NOHINTS = 262144;
export const FO_NO_CHOICE = 524288;
export const FO_CFF = 1048576;
export const FO_POSTSCRIPT = 2097152;
export const FO_MULTIPLEMASTER = 4194304;
export const FO_VERT_FACE = 8388608;
export const FO_DBCS_FONT = 16777216;
export const FO_NOCLEARTYPE = 33554432;
export const FO_CLEARTYPE_X = 268435456;
export const FO_CLEARTYPE_Y = 536870912;
export const FO_CLEARTYPENATURAL_X = 1073741824;
export const DC_TRIVIAL = 0;
export const DC_RECT = 1;
export const DC_COMPLEX = 3;
export const FC_RECT = 1;
export const FC_RECT4 = 2;
export const FC_COMPLEX = 3;
export const TC_RECTANGLES = 0;
export const TC_PATHOBJ = 2;
export const OC_BANK_CLIP = 1;
export const CT_RECTANGLES = 0;
export const CD_RIGHTDOWN = 0;
export const CD_LEFTDOWN = 1;
export const CD_RIGHTUP = 2;
export const CD_LEFTUP = 3;
export const CD_ANY = 4;
export const CD_LEFTWARDS = 1;
export const CD_UPWARDS = 2;
export const FO_HGLYPHS = 0;
export const FO_GLYPHBITS = 1;
export const FO_PATHOBJ = 2;
export const FD_NEGATIVE_FONT = 1;
export const FO_DEVICE_FONT = 1;
export const FO_OUTLINE_CAPABLE = 2;
export const SO_FLAG_DEFAULT_PLACEMENT = 1;
export const SO_HORIZONTAL = 2;
export const SO_VERTICAL = 4;
export const SO_REVERSED = 8;
export const SO_ZERO_BEARINGS = 16;
export const SO_CHAR_INC_EQUAL_BM_BASE = 32;
export const SO_MAXEXT_EQUAL_BM_SIDE = 64;
export const SO_DO_NOT_SUBSTITUTE_DEVICE_FONT = 128;
export const SO_GLYPHINDEX_TEXTOUT = 256;
export const SO_ESC_NOT_ORIENT = 512;
export const SO_DXDY = 1024;
export const SO_CHARACTER_EXTRA = 2048;
export const SO_BREAK_EXTRA = 4096;
export const FO_ATTR_MODE_ROTATE = 1;
export const PAL_INDEXED = 1;
export const PAL_BITFIELDS = 2;
export const PAL_RGB = 4;
export const PAL_BGR = 8;
export const PAL_CMYK = 16;
export const PO_BEZIERS = 1;
export const PO_ELLIPSE = 2;
export const PO_ALL_INTEGERS = 4;
export const PO_ENUM_AS_INTEGERS = 8;
export const PO_WIDENED = 16;
export const PD_BEGINSUBPATH = 1;
export const PD_ENDSUBPATH = 2;
export const PD_RESETSTYLE = 4;
export const PD_CLOSEFIGURE = 8;
export const PD_BEZIERS = 16;
export const SGI_EXTRASPACE = 0;
export const STYPE_BITMAP = 0;
export const STYPE_DEVBITMAP = 3;
export const BMF_1BPP = 1;
export const BMF_4BPP = 2;
export const BMF_8BPP = 3;
export const BMF_16BPP = 4;
export const BMF_24BPP = 5;
export const BMF_32BPP = 6;
export const BMF_4RLE = 7;
export const BMF_8RLE = 8;
export const BMF_JPEG = 9;
export const BMF_PNG = 10;
export const BMF_TOPDOWN = 1;
export const BMF_NOZEROINIT = 2;
export const BMF_DONTCACHE = 4;
export const BMF_USERMEM = 8;
export const BMF_KMSECTION = 16;
export const BMF_NOTSYSMEM = 32;
export const BMF_WINDOW_BLT = 64;
export const BMF_UMPDMEM = 128;
export const BMF_TEMP_ALPHA = 256;
export const BMF_ACC_NOTIFY = 32768;
export const BMF_RMT_ENTER = 16384;
export const BMF_RESERVED = 15872;
export const GX_IDENTITY = 0;
export const GX_OFFSET = 1;
export const GX_SCALE = 2;
export const GX_GENERAL = 3;
export const XF_LTOL = 0;
export const XF_INV_LTOL = 1;
export const XF_LTOFX = 2;
export const XF_INV_FXTOL = 3;
export const XO_TRIVIAL = 1;
export const XO_TABLE = 2;
export const XO_TO_MONO = 4;
export const XO_FROM_CMYK = 8;
export const XO_DEVICE_ICM = 16;
export const XO_HOST_ICM = 32;
export const XO_SRCPALETTE = 1;
export const XO_DESTPALETTE = 2;
export const XO_DESTDCPALETTE = 3;
export const XO_SRCBITFIELDS = 4;
export const XO_DESTBITFIELDS = 5;
export const HOOK_BITBLT = 1;
export const HOOK_STRETCHBLT = 2;
export const HOOK_PLGBLT = 4;
export const HOOK_TEXTOUT = 8;
export const HOOK_PAINT = 16;
export const HOOK_STROKEPATH = 32;
export const HOOK_FILLPATH = 64;
export const HOOK_STROKEANDFILLPATH = 128;
export const HOOK_LINETO = 256;
export const HOOK_COPYBITS = 1024;
export const HOOK_MOVEPANNING = 2048;
export const HOOK_SYNCHRONIZE = 4096;
export const HOOK_STRETCHBLTROP = 8192;
export const HOOK_SYNCHRONIZEACCESS = 16384;
export const HOOK_TRANSPARENTBLT = 32768;
export const HOOK_ALPHABLEND = 65536;
export const HOOK_GRADIENTFILL = 131072;
export const HOOK_FLAGS = 243199;
export const MS_NOTSYSTEMMEMORY = 1;
export const MS_SHAREDACCESS = 2;
export const MS_CDDDEVICEBITMAP = 4;
export const MS_REUSEDDEVICEBITMAP = 8;
export const DRVQUERY_USERMODE = 1;
export const HS_DDI_MAX = 6;
export const DRD_SUCCESS = 0;
export const DRD_ERROR = 1;
export const SS_SAVE = 0;
export const SS_RESTORE = 1;
export const SS_FREE = 2;
export const CDBEX_REDIRECTION = 1;
export const CDBEX_DXINTEROP = 2;
export const CDBEX_NTSHAREDSURFACEHANDLE = 4;
export const CDBEX_CROSSADAPTER = 8;
export const CDBEX_REUSE = 16;
export const WINDDI_MAXSETPALETTECOLORS = 256;
export const WINDDI_MAXSETPALETTECOLORINDEX = 255;
export const DM_DEFAULT = 1;
export const DM_MONOCHROME = 2;
export const DCR_SOLID = 0;
export const DCR_DRIVER = 1;
export const DCR_HALFTONE = 2;
export const RB_DITHERCOLOR = `-2147483648`;
export const QFT_LIGATURES = 1;
export const QFT_KERNPAIRS = 2;
export const QFT_GLYPHSET = 3;
export const QFD_GLYPHANDBITMAP = 1;
export const QFD_GLYPHANDOUTLINE = 2;
export const QFD_MAXEXTENTS = 3;
export const QFD_TT_GLYPHANDBITMAP = 4;
export const QFD_TT_GRAY1_BITMAP = 5;
export const QFD_TT_GRAY2_BITMAP = 6;
export const QFD_TT_GRAY4_BITMAP = 8;
export const QFD_TT_GRAY8_BITMAP = 9;
export const QFD_TT_MONO_BITMAP = 5;
export const QC_OUTLINES = 1;
export const QC_1BIT = 2;
export const QC_4BIT = 4;
export const FF_SIGNATURE_VERIFIED = 1;
export const FF_IGNORED_SIGNATURE = 2;
export const QAW_GETWIDTHS = 0;
export const QAW_GETEASYWIDTHS = 1;
export const TTO_METRICS_ONLY = 1;
export const TTO_QUBICS = 2;
export const TTO_UNHINTED = 4;
export const QFF_DESCRIPTION = 1;
export const QFF_NUMFACES = 2;
export const FP_ALTERNATEMODE = 1;
export const FP_WINDINGMODE = 2;
export const SPS_ERROR = 0;
export const SPS_DECLINE = 1;
export const SPS_ACCEPT_NOEXCLUDE = 2;
export const SPS_ACCEPT_EXCLUDE = 3;
export const SPS_ACCEPT_SYNCHRONOUS = 4;
export const SPS_CHANGE = 1;
export const SPS_ASYNCCHANGE = 2;
export const SPS_ANIMATESTART = 4;
export const SPS_ANIMATEUPDATE = 8;
export const SPS_ALPHA = 16;
export const SPS_RESERVED = 32;
export const SPS_RESERVED1 = 64;
export const SPS_FLAGSMASK = 255;
export const SPS_LENGTHMASK = 3840;
export const SPS_FREQMASK = 1044480;
export const ED_ABORTDOC = 1;
export const IGRF_RGB_256BYTES = 0;
export const IGRF_RGB_256WORDS = 1;
export const QDS_CHECKJPEGFORMAT = 0;
export const QDS_CHECKPNGFORMAT = 1;
export const DSS_TIMER_EVENT = 1;
export const DSS_FLUSH_EVENT = 2;
export const DSS_RESERVED = 4;
export const DSS_RESERVED1 = 8;
export const DSS_RESERVED2 = 16;
export const DN_ACCELERATION_LEVEL = 1;
export const DN_DEVICE_ORIGIN = 2;
export const DN_SLEEP_MODE = 3;
export const DN_DRAWING_BEGIN = 4;
export const DN_ASSOCIATE_WINDOW = 5;
export const DN_COMPOSITION_CHANGED = 6;
export const DN_DRAWING_BEGIN_APIBITMAP = 7;
export const DN_SURFOBJ_DESTRUCTION = 8;
export const WOC_RGN_CLIENT_DELTA = 1;
export const WOC_RGN_CLIENT = 2;
export const WOC_RGN_SURFACE_DELTA = 4;
export const WOC_RGN_SURFACE = 8;
export const WOC_CHANGED = 16;
export const WOC_DELETE = 32;
export const WOC_DRAWN = 64;
export const WOC_SPRITE_OVERLAP = 128;
export const WOC_SPRITE_NO_OVERLAP = 256;
export const WOC_RGN_SPRITE = 512;
export const WO_RGN_CLIENT_DELTA = 1;
export const WO_RGN_CLIENT = 2;
export const WO_RGN_SURFACE_DELTA = 4;
export const WO_RGN_SURFACE = 8;
export const WO_RGN_UPDATE_ALL = 16;
export const WO_RGN_WINDOW = 32;
export const WO_DRAW_NOTIFY = 64;
export const WO_SPRITE_NOTIFY = 128;
export const WO_RGN_DESKTOP_COORD = 256;
export const WO_RGN_SPRITE = 512;
export const EHN_RESTORED = 0;
export const EHN_ERROR = 1;
export const ECS_TEARDOWN = 1;
export const ECS_REDRAW = 2;
export const DEVHTADJF_COLOR_DEVICE = 1;
export const DEVHTADJF_ADDITIVE_DEVICE = 2;
export const FL_ZERO_MEMORY = 1;
export const FL_NONPAGED_MEMORY = 2;
export const FL_NON_SESSION = 4;
export const QSA_MMX = 256;
export const QSA_SSE = 8192;
export const QSA_3DNOW = 16384;
export const QSA_SSE1 = 8192;
export const QSA_SSE2 = 65536;
export const QSA_SSE3 = 524288;
export const ENG_FNT_CACHE_READ_FAULT = 1;
export const ENG_FNT_CACHE_WRITE_FAULT = 2;
export const DRH_APIBITMAP = 1;
export const MC_CAPS_NONE = 0;
export const MC_CAPS_MONITOR_TECHNOLOGY_TYPE = 1;
export const MC_CAPS_BRIGHTNESS = 2;
export const MC_CAPS_CONTRAST = 4;
export const MC_CAPS_COLOR_TEMPERATURE = 8;
export const MC_CAPS_RED_GREEN_BLUE_GAIN = 16;
export const MC_CAPS_RED_GREEN_BLUE_DRIVE = 32;
export const MC_CAPS_DEGAUSS = 64;
export const MC_CAPS_DISPLAY_AREA_POSITION = 128;
export const MC_CAPS_DISPLAY_AREA_SIZE = 256;
export const MC_CAPS_RESTORE_FACTORY_DEFAULTS = 1024;
export const MC_CAPS_RESTORE_FACTORY_COLOR_DEFAULTS = 2048;
export const MC_RESTORE_FACTORY_DEFAULTS_ENABLES_MONITOR_SETTINGS = 4096;
export const MC_SUPPORTED_COLOR_TEMPERATURE_NONE = 0;
export const MC_SUPPORTED_COLOR_TEMPERATURE_4000K = 1;
export const MC_SUPPORTED_COLOR_TEMPERATURE_5000K = 2;
export const MC_SUPPORTED_COLOR_TEMPERATURE_6500K = 4;
export const MC_SUPPORTED_COLOR_TEMPERATURE_7500K = 8;
export const MC_SUPPORTED_COLOR_TEMPERATURE_8200K = 16;
export const MC_SUPPORTED_COLOR_TEMPERATURE_9300K = 32;
export const MC_SUPPORTED_COLOR_TEMPERATURE_10000K = 64;
export const MC_SUPPORTED_COLOR_TEMPERATURE_11500K = 128;
export const PHYSICAL_MONITOR_DESCRIPTION_SIZE = 128;
export const GETCONNECTEDIDS_TARGET = 0;
export const GETCONNECTEDIDS_SOURCE = 1;
export const S_INIT = 2;
export const SETCONFIGURATION_STATUS_APPLIED = 0;
export const SETCONFIGURATION_STATUS_ADDITIONAL = 1;
export const SETCONFIGURATION_STATUS_OVERRIDDEN = 2;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = `-1`;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 18;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = `-2147483648`;
export const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0;
export const DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1;
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2;
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2;
export const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3;
export const DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_SCALING_IDENTITY = 1;
export const DISPLAYCONFIG_SCALING_CENTERED = 2;
export const DISPLAYCONFIG_SCALING_STRETCHED = 3;
export const DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4;
export const DISPLAYCONFIG_SCALING_CUSTOM = 5;
export const DISPLAYCONFIG_SCALING_PREFERRED = 128;
export const DISPLAYCONFIG_SCALING_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_ROTATION_IDENTITY = 1;
export const DISPLAYCONFIG_ROTATION_ROTATE90 = 2;
export const DISPLAYCONFIG_ROTATION_ROTATE180 = 3;
export const DISPLAYCONFIG_ROTATION_ROTATE270 = 4;
export const DISPLAYCONFIG_ROTATION_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1;
export const DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2;
export const DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3;
export const DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_PIXELFORMAT_8BPP = 1;
export const DISPLAYCONFIG_PIXELFORMAT_16BPP = 2;
export const DISPLAYCONFIG_PIXELFORMAT_24BPP = 3;
export const DISPLAYCONFIG_PIXELFORMAT_32BPP = 4;
export const DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5;
export const DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1;
export const DISPLAYCONFIG_TOPOLOGY_CLONE = 2;
export const DISPLAYCONFIG_TOPOLOGY_EXTEND = 4;
export const DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8;
export const DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1;
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2;
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3;
export const DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4;
export const DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5;
export const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6;
export const DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7;
export const DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8;
export const DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9;
export const DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10;
export const DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11;
export const DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 12;
export const DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 13;
export const DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = `-1`;
export const DISPLAYCONFIG_COLOR_ENCODING_RGB = 0;
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1;
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2;
export const DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3;
export const DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4;
export const DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = `-1`;
export const MC_MOMENTARY = 0;
export const MC_SET_PARAMETER = 1;
export const MC_SHADOW_MASK_CATHODE_RAY_TUBE = 0;
export const MC_APERTURE_GRILL_CATHODE_RAY_TUBE = 1;
export const MC_THIN_FILM_TRANSISTOR = 2;
export const MC_LIQUID_CRYSTAL_ON_SILICON = 3;
export const MC_PLASMA = 4;
export const MC_ORGANIC_LIGHT_EMITTING_DIODE = 5;
export const MC_ELECTROLUMINESCENT = 6;
export const MC_MICROELECTROMECHANICAL = 7;
export const MC_FIELD_EMISSION_DEVICE = 8;
export const MC_RED_DRIVE = 0;
export const MC_GREEN_DRIVE = 1;
export const MC_BLUE_DRIVE = 2;
export const MC_RED_GAIN = 0;
export const MC_GREEN_GAIN = 1;
export const MC_BLUE_GAIN = 2;
export const MC_HORIZONTAL_POSITION = 0;
export const MC_VERTICAL_POSITION = 1;
export const MC_WIDTH = 0;
export const MC_HEIGHT = 1;
export const MC_COLOR_TEMPERATURE_UNKNOWN = 0;
export const MC_COLOR_TEMPERATURE_4000K = 1;
export const MC_COLOR_TEMPERATURE_5000K = 2;
export const MC_COLOR_TEMPERATURE_6500K = 3;
export const MC_COLOR_TEMPERATURE_7500K = 4;
export const MC_COLOR_TEMPERATURE_8200K = 5;
export const MC_COLOR_TEMPERATURE_9300K = 6;
export const MC_COLOR_TEMPERATURE_10000K = 7;
export const MC_COLOR_TEMPERATURE_11500K = 8;
export const DM_SPECVERSION = 1025;
export const DM_ORIENTATION = 1;
export const DM_PAPERSIZE = 2;
export const DM_PAPERLENGTH = 4;
export const DM_PAPERWIDTH = 8;
export const DM_SCALE = 16;
export const DM_POSITION = 32;
export const DM_NUP = 64;
export const DM_DISPLAYORIENTATION = 128;
export const DM_COPIES = 256;
export const DM_DEFAULTSOURCE = 512;
export const DM_PRINTQUALITY = 1024;
export const DM_COLOR = 2048;
export const DM_DUPLEX = 4096;
export const DM_YRESOLUTION = 8192;
export const DM_TTOPTION = 16384;
export const DM_COLLATE = 32768;
export const DM_FORMNAME = 65536;
export const DM_LOGPIXELS = 131072;
export const DM_BITSPERPEL = 262144;
export const DM_PELSWIDTH = 524288;
export const DM_PELSHEIGHT = 1048576;
export const DM_DISPLAYFLAGS = 2097152;
export const DM_DISPLAYFREQUENCY = 4194304;
export const DM_ICMMETHOD = 8388608;
export const DM_ICMINTENT = 16777216;
export const DM_MEDIATYPE = 33554432;
export const DM_DITHERTYPE = 67108864;
export const DM_PANNINGWIDTH = 134217728;
export const DM_PANNINGHEIGHT = 268435456;
export const DM_DISPLAYFIXEDOUTPUT = 536870912;
export const DM_INTERLACED = 2;
export const DM_UPDATE = 1;
export const DM_COPY = 2;
export const DM_PROMPT = 4;
export const DM_MODIFY = 8;
export const DM_IN_BUFFER = 8;
export const DM_IN_PROMPT = 4;
export const DM_OUT_BUFFER = 2;
export const DM_OUT_DEFAULT = 1;
export const DMCOLOR_MONOCHROME = 1;
export const DMCOLOR_COLOR = 2;
export const DMTT_BITMAP = 1;
export const DMTT_DOWNLOAD = 2;
export const DMTT_SUBDEV = 3;
export const DMTT_DOWNLOAD_OUTLINE = 4;
export const DMCOLLATE_FALSE = 0;
export const DMCOLLATE_TRUE = 1;
export const PAN_FAMILY_ANY = 0;
export const PAN_FAMILY_NO_FIT = 1;
export const PAN_FAMILY_TEXT_DISPLAY = 2;
export const PAN_FAMILY_SCRIPT = 3;
export const PAN_FAMILY_DECORATIVE = 4;
export const PAN_FAMILY_PICTORIAL = 5;
export const PAN_SERIF_ANY = 0;
export const PAN_SERIF_NO_FIT = 1;
export const PAN_SERIF_COVE = 2;
export const PAN_SERIF_OBTUSE_COVE = 3;
export const PAN_SERIF_SQUARE_COVE = 4;
export const PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
export const PAN_SERIF_SQUARE = 6;
export const PAN_SERIF_THIN = 7;
export const PAN_SERIF_BONE = 8;
export const PAN_SERIF_EXAGGERATED = 9;
export const PAN_SERIF_TRIANGLE = 10;
export const PAN_SERIF_NORMAL_SANS = 11;
export const PAN_SERIF_OBTUSE_SANS = 12;
export const PAN_SERIF_PERP_SANS = 13;
export const PAN_SERIF_FLARED = 14;
export const PAN_SERIF_ROUNDED = 15;
export const PAN_WEIGHT_ANY = 0;
export const PAN_WEIGHT_NO_FIT = 1;
export const PAN_WEIGHT_INDEX = 2;
export const PAN_WEIGHT_VERY_LIGHT = 2;
export const PAN_WEIGHT_LIGHT = 3;
export const PAN_WEIGHT_THIN = 4;
export const PAN_WEIGHT_BOOK = 5;
export const PAN_WEIGHT_MEDIUM = 6;
export const PAN_WEIGHT_DEMI = 7;
export const PAN_WEIGHT_BOLD = 8;
export const PAN_WEIGHT_HEAVY = 9;
export const PAN_WEIGHT_BLACK = 10;
export const PAN_WEIGHT_NORD = 11;
export const PAN_PROP_ANY = 0;
export const PAN_PROP_NO_FIT = 1;
export const PAN_PROP_OLD_STYLE = 2;
export const PAN_PROP_MODERN = 3;
export const PAN_PROP_EVEN_WIDTH = 4;
export const PAN_PROP_EXPANDED = 5;
export const PAN_PROP_CONDENSED = 6;
export const PAN_PROP_VERY_EXPANDED = 7;
export const PAN_PROP_VERY_CONDENSED = 8;
export const PAN_PROP_MONOSPACED = 9;
export const PAN_CONTRAST_ANY = 0;
export const PAN_CONTRAST_NO_FIT = 1;
export const PAN_CONTRAST_INDEX = 4;
export const PAN_CONTRAST_NONE = 2;
export const PAN_CONTRAST_VERY_LOW = 3;
export const PAN_CONTRAST_LOW = 4;
export const PAN_CONTRAST_MEDIUM_LOW = 5;
export const PAN_CONTRAST_MEDIUM = 6;
export const PAN_CONTRAST_MEDIUM_HIGH = 7;
export const PAN_CONTRAST_HIGH = 8;
export const PAN_CONTRAST_VERY_HIGH = 9;
export const PAN_STROKE_ANY = 0;
export const PAN_STROKE_NO_FIT = 1;
export const PAN_STROKE_GRADUAL_DIAG = 2;
export const PAN_STROKE_GRADUAL_TRAN = 3;
export const PAN_STROKE_GRADUAL_VERT = 4;
export const PAN_STROKE_GRADUAL_HORZ = 5;
export const PAN_STROKE_RAPID_VERT = 6;
export const PAN_STROKE_RAPID_HORZ = 7;
export const PAN_STROKE_INSTANT_VERT = 8;
export const PAN_ARM_ANY = 0;
export const PAN_ARM_NO_FIT = 1;
export const PAN_STRAIGHT_ARMS_HORZ = 2;
export const PAN_STRAIGHT_ARMS_WEDGE = 3;
export const PAN_STRAIGHT_ARMS_VERT = 4;
export const PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
export const PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
export const PAN_BENT_ARMS_HORZ = 7;
export const PAN_BENT_ARMS_WEDGE = 8;
export const PAN_BENT_ARMS_VERT = 9;
export const PAN_BENT_ARMS_SINGLE_SERIF = 10;
export const PAN_BENT_ARMS_DOUBLE_SERIF = 11;
export const PAN_LETT_FORM_ANY = 0;
export const PAN_LETT_FORM_NO_FIT = 1;
export const PAN_LETT_NORMAL_CONTACT = 2;
export const PAN_LETT_NORMAL_WEIGHTED = 3;
export const PAN_LETT_NORMAL_BOXED = 4;
export const PAN_LETT_NORMAL_FLATTENED = 5;
export const PAN_LETT_NORMAL_ROUNDED = 6;
export const PAN_LETT_NORMAL_OFF_CENTER = 7;
export const PAN_LETT_NORMAL_SQUARE = 8;
export const PAN_LETT_OBLIQUE_CONTACT = 9;
export const PAN_LETT_OBLIQUE_WEIGHTED = 10;
export const PAN_LETT_OBLIQUE_BOXED = 11;
export const PAN_LETT_OBLIQUE_FLATTENED = 12;
export const PAN_LETT_OBLIQUE_ROUNDED = 13;
export const PAN_LETT_OBLIQUE_OFF_CENTER = 14;
export const PAN_LETT_OBLIQUE_SQUARE = 15;
export const PAN_MIDLINE_ANY = 0;
export const PAN_MIDLINE_NO_FIT = 1;
export const PAN_MIDLINE_INDEX = 8;
export const PAN_MIDLINE_STANDARD_TRIMMED = 2;
export const PAN_MIDLINE_STANDARD_POINTED = 3;
export const PAN_MIDLINE_STANDARD_SERIFED = 4;
export const PAN_MIDLINE_HIGH_TRIMMED = 5;
export const PAN_MIDLINE_HIGH_POINTED = 6;
export const PAN_MIDLINE_HIGH_SERIFED = 7;
export const PAN_MIDLINE_CONSTANT_TRIMMED = 8;
export const PAN_MIDLINE_CONSTANT_POINTED = 9;
export const PAN_MIDLINE_CONSTANT_SERIFED = 10;
export const PAN_MIDLINE_LOW_TRIMMED = 11;
export const PAN_MIDLINE_LOW_POINTED = 12;
export const PAN_MIDLINE_LOW_SERIFED = 13;
export const PAN_XHEIGHT_ANY = 0;
export const PAN_XHEIGHT_NO_FIT = 1;
export const PAN_XHEIGHT_INDEX = 9;
export const PAN_XHEIGHT_CONSTANT_SMALL = 2;
export const PAN_XHEIGHT_CONSTANT_STD = 3;
export const PAN_XHEIGHT_CONSTANT_LARGE = 4;
export const PAN_XHEIGHT_DUCKING_SMALL = 5;
export const PAN_XHEIGHT_DUCKING_STD = 6;
export const PAN_XHEIGHT_DUCKING_LARGE = 7;
export const ANSI_CHARSET = 0;
export const DEFAULT_CHARSET = 1;
export const SYMBOL_CHARSET = 2;
export const SHIFTJIS_CHARSET = 128;
export const HANGEUL_CHARSET = 129;
export const HANGUL_CHARSET = 129;
export const GB2312_CHARSET = 134;
export const CHINESEBIG5_CHARSET = 136;
export const OEM_CHARSET = 255;
export const JOHAB_CHARSET = 130;
export const HEBREW_CHARSET = 177;
export const ARABIC_CHARSET = 178;
export const GREEK_CHARSET = 161;
export const TURKISH_CHARSET = 162;
export const VIETNAMESE_CHARSET = 163;
export const THAI_CHARSET = 222;
export const EASTEUROPE_CHARSET = 238;
export const RUSSIAN_CHARSET = 204;
export const MAC_CHARSET = 77;
export const BALTIC_CHARSET = 186;
export const OUT_DEFAULT_PRECIS = 0;
export const OUT_STRING_PRECIS = 1;
export const OUT_CHARACTER_PRECIS = 2;
export const OUT_STROKE_PRECIS = 3;
export const OUT_TT_PRECIS = 4;
export const OUT_DEVICE_PRECIS = 5;
export const OUT_RASTER_PRECIS = 6;
export const OUT_TT_ONLY_PRECIS = 7;
export const OUT_OUTLINE_PRECIS = 8;
export const OUT_SCREEN_OUTLINE_PRECIS = 9;
export const OUT_PS_ONLY_PRECIS = 10;
export const CLIP_DEFAULT_PRECIS = 0;
export const CLIP_CHARACTER_PRECIS = 1;
export const CLIP_STROKE_PRECIS = 2;
export const CLIP_MASK = 15;
export const CLIP_LH_ANGLES = 16;
export const CLIP_TT_ALWAYS = 32;
export const CLIP_DFA_DISABLE = 64;
export const CLIP_EMBEDDED = 128;
export const CLIP_DFA_OVERRIDE = 64;
export const DEFAULT_QUALITY = 0;
export const DRAFT_QUALITY = 1;
export const PROOF_QUALITY = 2;
export const NONANTIALIASED_QUALITY = 3;
export const ANTIALIASED_QUALITY = 4;
export const CLEARTYPE_QUALITY = 5;
export const EngProcessorFeature = 1;
export const EngNumberOfProcessors = 2;
export const EngOptimumAvailableUserMemory = 3;
export const EngOptimumAvailableSystemMemory = 4;
export const QDA_RESERVED = 0;
export const QDA_ACCELERATION_LEVEL = 1;
export const VideoPowerNotifyCallout = 1;
export const VideoEnumChildPdoNotifyCallout = 3;
export const VideoFindAdapterCallout = 4;
export const VideoPnpNotifyCallout = 7;
export const VideoDxgkDisplaySwitchCallout = 8;
export const VideoDxgkFindAdapterTdrCallout = 10;
export const VideoDxgkHardwareProtectionTeardown = 11;
export const VideoRepaintDesktop = 12;
export const VideoUpdateCursor = 13;
export const VideoDisableMultiPlaneOverlay = 14;
export const VideoDesktopDuplicationChange = 15;
export const VideoBlackScreenDiagnostics = 16;
export const BlackScreenDiagnosticsData = 1;
export const BlackScreenDisplayRecovery = 2;
export const VideoNotBanked = 0;
export const VideoBanked1RW = 1;
export const VideoBanked1R1W = 2;
export const VideoBanked2RW = 3;
export const NumVideoBankTypes = 4;
export const VideoPowerUnspecified = 0;
export const VideoPowerOn = 1;
export const VideoPowerStandBy = 2;
export const VideoPowerSuspend = 3;
export const VideoPowerOff = 4;
export const VideoPowerHibernate = 5;
export const VideoPowerShutdown = 6;
export const VideoPowerMaximum = 7;
export const BRIGHTNESS_INTERFACE_VERSION_1 = 1;
export const BRIGHTNESS_INTERFACE_VERSION_2 = 2;
export const BRIGHTNESS_INTERFACE_VERSION_3 = 3;
export const BacklightOptimizationDisable = 0;
export const BacklightOptimizationDesktop = 1;
export const BacklightOptimizationDynamic = 2;
export const BacklightOptimizationDimmed = 3;
export const BacklightOptimizationEDR = 4;
export const COLORSPACE_TRANSFORM_DATA_TYPE_FIXED_POINT = 0;
export const COLORSPACE_TRANSFORM_DATA_TYPE_FLOAT = 1;
export const COLORSPACE_TRANSFORM_VERSION_DEFAULT = 0;
export const COLORSPACE_TRANSFORM_VERSION_1 = 1;
export const COLORSPACE_TRANSFORM_VERSION_NOT_SUPPORTED = 0;
export const COLORSPACE_TRANSFORM_TYPE_UNINITIALIZED = 0;
export const COLORSPACE_TRANSFORM_TYPE_DEFAULT = 1;
export const COLORSPACE_TRANSFORM_TYPE_RGB256x3x16 = 2;
export const COLORSPACE_TRANSFORM_TYPE_DXGI_1 = 3;
export const COLORSPACE_TRANSFORM_TYPE_MATRIX_3x4 = 4;
export const COLORSPACE_TRANSFORM_TYPE_MATRIX_V2 = 5;
export const OUTPUT_WIRE_COLOR_SPACE_G22_P709 = 0;
export const OUTPUT_WIRE_COLOR_SPACE_RESERVED = 4;
export const OUTPUT_WIRE_COLOR_SPACE_G2084_P2020 = 12;
export const OUTPUT_WIRE_COLOR_SPACE_G22_P709_WCG = 30;
export const OUTPUT_WIRE_COLOR_SPACE_G22_P2020 = 31;
export const OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_HDR10PLUS = 32;
export const OUTPUT_WIRE_COLOR_SPACE_G2084_P2020_DVLL = 33;
export const OUTPUT_COLOR_ENCODING_RGB = 0;
export const OUTPUT_COLOR_ENCODING_YCBCR444 = 1;
export const OUTPUT_COLOR_ENCODING_YCBCR422 = 2;
export const OUTPUT_COLOR_ENCODING_YCBCR420 = 3;
export const OUTPUT_COLOR_ENCODING_INTENSITY = 4;
export const OUTPUT_COLOR_ENCODING_FORCE_UINT32 = `-1`;
export const ColorSpaceTransformStageControl_No_Change = 0;
export const ColorSpaceTransformStageControl_Enable = 1;
export const ColorSpaceTransformStageControl_Bypass = 2;
export const DCT_DEFAULT = 0;
export const DCT_FORCE_LOW_POWER = 1;
export const DCT_FORCE_HIGH_PERFORMANCE = 2;
export const AR_ENABLED = 0;
export const AR_DISABLED = 1;
export const AR_SUPPRESSED = 2;
export const AR_REMOTESESSION = 4;
export const AR_MULTIMON = 8;
export const AR_NOSENSOR = 16;
export const AR_NOT_SUPPORTED = 32;
export const AR_DOCKED = 64;
export const AR_LAPTOP = 128;
export const ORIENTATION_PREFERENCE_NONE = 0;
export const ORIENTATION_PREFERENCE_LANDSCAPE = 1;
export const ORIENTATION_PREFERENCE_PORTRAIT = 2;
export const ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4;
export const ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export type HSEMAPHORE = Deno.PointerValue;

export type HSURF = Deno.PointerValue;

export type HFASTMUTEX = Deno.PointerValue;

export type HDRVOBJ = Deno.PointerValue;

export type HDEV = Deno.PointerValue;

export type HBM = Deno.PointerValue;

export type DHSURF = Deno.PointerValue;

export type DHPDEV = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL (size: 8)
 */
export interface DISPLAYCONFIG_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDISPLAYCONFIG_RATIONAL = 8;

export function allocDISPLAYCONFIG_RATIONAL(data?: Partial<DISPLAYCONFIG_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION (size: 8)
 */
export interface DISPLAYCONFIG_2DREGION {
  /** u32 */
  cx: number;
  /** u32 */
  cy: number;
}

export const sizeofDISPLAYCONFIG_2DREGION = 8;

export function allocDISPLAYCONFIG_2DREGION(data?: Partial<DISPLAYCONFIG_2DREGION>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_2DREGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cx !== undefined) view.setUint32(0, Number(data.cx), true);
  // 0x04: u32
  if (data?.cy !== undefined) view.setUint32(4, Number(data.cy), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO (size: 56)
 */
export interface DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
  /** u64 */
  pixelRate: Deno.PointerValue;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL */
  hSyncFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL */
  vSyncFreq: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION */
  activeSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_2DREGION */
  totalSize: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING */
  scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING;
}

export const sizeofDISPLAYCONFIG_VIDEO_SIGNAL_INFO = 56;

export function allocDISPLAYCONFIG_VIDEO_SIGNAL_INFO(data?: Partial<DISPLAYCONFIG_VIDEO_SIGNAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_VIDEO_SIGNAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.pixelRate !== undefined) view.setBigUint64(0, BigInt(data.pixelRate), true);
  // 0x08: pointer
  if (data?.hSyncFreq !== undefined) view.setBigUint64(8, data.hSyncFreq === null ? 0n : BigInt(util.toPointer(data.hSyncFreq)), true);
  // 0x10: pointer
  if (data?.vSyncFreq !== undefined) view.setBigUint64(16, data.vSyncFreq === null ? 0n : BigInt(util.toPointer(data.vSyncFreq)), true);
  // 0x18: pointer
  if (data?.activeSize !== undefined) view.setBigUint64(24, data.activeSize === null ? 0n : BigInt(util.toPointer(data.activeSize)), true);
  // 0x20: pointer
  if (data?.totalSize !== undefined) view.setBigUint64(32, data.totalSize === null ? 0n : BigInt(util.toPointer(data.totalSize)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: i32
  if (data?.scanLineOrdering !== undefined) view.setInt32(48, Number(data.scanLineOrdering), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.POINTL (size: 8)
 */
export interface POINTL {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINTL = 8;

export function allocPOINTL(data?: Partial<POINTL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_MODE (size: 24)
 */
export interface DISPLAYCONFIG_SOURCE_MODE {
  /** u32 */
  width: number;
  /** u32 */
  height: number;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_PIXELFORMAT */
  pixelFormat: DISPLAYCONFIG_PIXELFORMAT;
  /** Windows.Win32.Foundation.POINTL */
  position: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_SOURCE_MODE = 24;

export function allocDISPLAYCONFIG_SOURCE_MODE(data?: Partial<DISPLAYCONFIG_SOURCE_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SOURCE_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.width !== undefined) view.setUint32(0, Number(data.width), true);
  // 0x04: u32
  if (data?.height !== undefined) view.setUint32(4, Number(data.height), true);
  // 0x08: i32
  if (data?.pixelFormat !== undefined) view.setInt32(8, Number(data.pixelFormat), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.position !== undefined) view.setBigUint64(16, data.position === null ? 0n : BigInt(util.toPointer(data.position)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_MODE (size: 8)
 */
export interface DISPLAYCONFIG_TARGET_MODE {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_SIGNAL_INFO */
  targetVideoSignalInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_TARGET_MODE = 8;

export function allocDISPLAYCONFIG_TARGET_MODE(data?: Partial<DISPLAYCONFIG_TARGET_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_TARGET_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.targetVideoSignalInfo !== undefined) view.setBigUint64(0, data.targetVideoSignalInfo === null ? 0n : BigInt(util.toPointer(data.targetVideoSignalInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECTL (size: 16)
 */
export interface RECTL {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECTL = 16;

export function allocRECTL(data?: Partial<RECTL>): Uint8Array {
  const buf = new Uint8Array(sizeofRECTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_DESKTOP_IMAGE_INFO (size: 24)
 */
export interface DISPLAYCONFIG_DESKTOP_IMAGE_INFO {
  /** Windows.Win32.Foundation.POINTL */
  PathSourceSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECTL */
  DesktopImageRegion: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECTL */
  DesktopImageClip: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_DESKTOP_IMAGE_INFO = 24;

export function allocDISPLAYCONFIG_DESKTOP_IMAGE_INFO(data?: Partial<DISPLAYCONFIG_DESKTOP_IMAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_DESKTOP_IMAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PathSourceSize !== undefined) view.setBigUint64(0, data.PathSourceSize === null ? 0n : BigInt(util.toPointer(data.PathSourceSize)), true);
  // 0x08: pointer
  if (data?.DesktopImageRegion !== undefined) view.setBigUint64(8, data.DesktopImageRegion === null ? 0n : BigInt(util.toPointer(data.DesktopImageRegion)), true);
  // 0x10: pointer
  if (data?.DesktopImageClip !== undefined) view.setBigUint64(16, data.DesktopImageClip === null ? 0n : BigInt(util.toPointer(data.DesktopImageClip)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO (size: 24)
 */
export interface DISPLAYCONFIG_MODE_INFO {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_MODE_INFO_TYPE */
  infoType: DISPLAYCONFIG_MODE_INFO_TYPE;
  /** u32 */
  id: number;
  /** Windows.Win32.Foundation.LUID */
  adapterId: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_MODE_INFO = 24;

export function allocDISPLAYCONFIG_MODE_INFO(data?: Partial<DISPLAYCONFIG_MODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_MODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.infoType !== undefined) view.setInt32(0, Number(data.infoType), true);
  // 0x04: u32
  if (data?.id !== undefined) view.setUint32(4, Number(data.id), true);
  // 0x08: pointer
  if (data?.adapterId !== undefined) view.setBigUint64(8, data.adapterId === null ? 0n : BigInt(util.toPointer(data.adapterId)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO (size: 32)
 */
export interface DISPLAYCONFIG_PATH_SOURCE_INFO {
  /** Windows.Win32.Foundation.LUID */
  adapterId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  id: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  statusFlags: number;
}

export const sizeofDISPLAYCONFIG_PATH_SOURCE_INFO = 32;

export function allocDISPLAYCONFIG_PATH_SOURCE_INFO(data?: Partial<DISPLAYCONFIG_PATH_SOURCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_PATH_SOURCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adapterId !== undefined) view.setBigUint64(0, data.adapterId === null ? 0n : BigInt(util.toPointer(data.adapterId)), true);
  // 0x08: u32
  if (data?.id !== undefined) view.setUint32(8, Number(data.id), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u32
  if (data?.statusFlags !== undefined) view.setUint32(24, Number(data.statusFlags), true);
  // 0x1c: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO (size: 64)
 */
export interface DISPLAYCONFIG_PATH_TARGET_INFO {
  /** Windows.Win32.Foundation.LUID */
  adapterId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  id: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY */
  outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_ROTATION */
  rotation: DISPLAYCONFIG_ROTATION;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_SCALING */
  scaling: DISPLAYCONFIG_SCALING;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_RATIONAL */
  refreshRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_SCANLINE_ORDERING */
  scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING;
  /** Windows.Win32.Foundation.BOOL */
  targetAvailable: boolean;
  /** u32 */
  statusFlags: number;
}

export const sizeofDISPLAYCONFIG_PATH_TARGET_INFO = 64;

export function allocDISPLAYCONFIG_PATH_TARGET_INFO(data?: Partial<DISPLAYCONFIG_PATH_TARGET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_PATH_TARGET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adapterId !== undefined) view.setBigUint64(0, data.adapterId === null ? 0n : BigInt(util.toPointer(data.adapterId)), true);
  // 0x08: u32
  if (data?.id !== undefined) view.setUint32(8, Number(data.id), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: i32
  if (data?.outputTechnology !== undefined) view.setInt32(24, Number(data.outputTechnology), true);
  // 0x1c: i32
  if (data?.rotation !== undefined) view.setInt32(28, Number(data.rotation), true);
  // 0x20: i32
  if (data?.scaling !== undefined) view.setInt32(32, Number(data.scaling), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.refreshRate !== undefined) view.setBigUint64(40, data.refreshRate === null ? 0n : BigInt(util.toPointer(data.refreshRate)), true);
  // 0x30: i32
  if (data?.scanLineOrdering !== undefined) view.setInt32(48, Number(data.scanLineOrdering), true);
  // 0x34: i32
  if (data?.targetAvailable !== undefined) view.setInt32(52, Number(data.targetAvailable), true);
  // 0x38: u32
  if (data?.statusFlags !== undefined) view.setUint32(56, Number(data.statusFlags), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_INFO (size: 24)
 */
export interface DISPLAYCONFIG_PATH_INFO {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_SOURCE_INFO */
  sourceInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_PATH_TARGET_INFO */
  targetInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flags: number;
}

export const sizeofDISPLAYCONFIG_PATH_INFO = 24;

export function allocDISPLAYCONFIG_PATH_INFO(data?: Partial<DISPLAYCONFIG_PATH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_PATH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sourceInfo !== undefined) view.setBigUint64(0, data.sourceInfo === null ? 0n : BigInt(util.toPointer(data.sourceInfo)), true);
  // 0x08: pointer
  if (data?.targetInfo !== undefined) view.setBigUint64(8, data.targetInfo === null ? 0n : BigInt(util.toPointer(data.targetInfo)), true);
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER (size: 24)
 */
export interface DISPLAYCONFIG_DEVICE_INFO_HEADER {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_TYPE */
  type: DISPLAYCONFIG_DEVICE_INFO_TYPE;
  /** u32 */
  size: number;
  /** Windows.Win32.Foundation.LUID */
  adapterId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  id: number;
}

export const sizeofDISPLAYCONFIG_DEVICE_INFO_HEADER = 24;

export function allocDISPLAYCONFIG_DEVICE_INFO_HEADER(data?: Partial<DISPLAYCONFIG_DEVICE_INFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_DEVICE_INFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: u32
  if (data?.size !== undefined) view.setUint32(4, Number(data.size), true);
  // 0x08: pointer
  if (data?.adapterId !== undefined) view.setBigUint64(8, data.adapterId === null ? 0n : BigInt(util.toPointer(data.adapterId)), true);
  // 0x10: u32
  if (data?.id !== undefined) view.setUint32(16, Number(data.id), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SOURCE_DEVICE_NAME (size: 16)
 */
export interface DISPLAYCONFIG_SOURCE_DEVICE_NAME {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** array */
  viewGdiDeviceName: Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_SOURCE_DEVICE_NAME = 16;

export function allocDISPLAYCONFIG_SOURCE_DEVICE_NAME(data?: Partial<DISPLAYCONFIG_SOURCE_DEVICE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SOURCE_DEVICE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.viewGdiDeviceName !== undefined) view.setBigUint64(8, data.viewGdiDeviceName === null ? 0n : BigInt(util.toPointer(data.viewGdiDeviceName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS (size: 8)
 */
export interface DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = 8;

export function allocDISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS(data?: Partial<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME (size: 48)
 */
export interface DISPLAYCONFIG_TARGET_DEVICE_NAME {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS */
  flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY */
  outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
  /** u16 */
  edidManufactureId: number;
  /** u16 */
  edidProductCodeId: number;
  /** u32 */
  connectorInstance: number;
  /** array */
  monitorFriendlyDeviceName: Deno.PointerValue | null;
  /** array */
  monitorDevicePath: Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_TARGET_DEVICE_NAME = 48;

export function allocDISPLAYCONFIG_TARGET_DEVICE_NAME(data?: Partial<DISPLAYCONFIG_TARGET_DEVICE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_TARGET_DEVICE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.flags !== undefined) view.setBigUint64(8, data.flags === null ? 0n : BigInt(util.toPointer(data.flags)), true);
  // 0x10: i32
  if (data?.outputTechnology !== undefined) view.setInt32(16, Number(data.outputTechnology), true);
  // 0x14: u16
  if (data?.edidManufactureId !== undefined) view.setUint16(20, Number(data.edidManufactureId), true);
  // 0x16: u16
  if (data?.edidProductCodeId !== undefined) view.setUint16(22, Number(data.edidProductCodeId), true);
  // 0x18: u32
  if (data?.connectorInstance !== undefined) view.setUint32(24, Number(data.connectorInstance), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.monitorFriendlyDeviceName !== undefined) view.setBigUint64(32, data.monitorFriendlyDeviceName === null ? 0n : BigInt(util.toPointer(data.monitorFriendlyDeviceName)), true);
  // 0x28: pointer
  if (data?.monitorDevicePath !== undefined) view.setBigUint64(40, data.monitorDevicePath === null ? 0n : BigInt(util.toPointer(data.monitorDevicePath)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_PREFERRED_MODE (size: 24)
 */
export interface DISPLAYCONFIG_TARGET_PREFERRED_MODE {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  width: number;
  /** u32 */
  height: number;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_MODE */
  targetMode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_TARGET_PREFERRED_MODE = 24;

export function allocDISPLAYCONFIG_TARGET_PREFERRED_MODE(data?: Partial<DISPLAYCONFIG_TARGET_PREFERRED_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_TARGET_PREFERRED_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: u32
  if (data?.width !== undefined) view.setUint32(8, Number(data.width), true);
  // 0x0c: u32
  if (data?.height !== undefined) view.setUint32(12, Number(data.height), true);
  // 0x10: pointer
  if (data?.targetMode !== undefined) view.setBigUint64(16, data.targetMode === null ? 0n : BigInt(util.toPointer(data.targetMode)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_ADAPTER_NAME (size: 16)
 */
export interface DISPLAYCONFIG_ADAPTER_NAME {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** array */
  adapterDevicePath: Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_ADAPTER_NAME = 16;

export function allocDISPLAYCONFIG_ADAPTER_NAME(data?: Partial<DISPLAYCONFIG_ADAPTER_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_ADAPTER_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.adapterDevicePath !== undefined) view.setBigUint64(8, data.adapterDevicePath === null ? 0n : BigInt(util.toPointer(data.adapterDevicePath)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_TARGET_BASE_TYPE (size: 16)
 */
export interface DISPLAYCONFIG_TARGET_BASE_TYPE {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY */
  baseOutputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
}

export const sizeofDISPLAYCONFIG_TARGET_BASE_TYPE = 16;

export function allocDISPLAYCONFIG_TARGET_BASE_TYPE(data?: Partial<DISPLAYCONFIG_TARGET_BASE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_TARGET_BASE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: i32
  if (data?.baseOutputTechnology !== undefined) view.setInt32(8, Number(data.baseOutputTechnology), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SET_TARGET_PERSISTENCE (size: 16)
 */
export interface DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_SET_TARGET_PERSISTENCE = 16;

export function allocDISPLAYCONFIG_SET_TARGET_PERSISTENCE(data?: Partial<DISPLAYCONFIG_SET_TARGET_PERSISTENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SET_TARGET_PERSISTENCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION (size: 16)
 */
export interface DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = 16;

export function allocDISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION(data?: Partial<DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO (size: 24)
 */
export interface DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.DISPLAYCONFIG_COLOR_ENCODING */
  colorEncoding: DISPLAYCONFIG_COLOR_ENCODING;
  /** u32 */
  bitsPerColorChannel: number;
}

export const sizeofDISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = 24;

export function allocDISPLAYCONFIG_GET_ADVANCED_COLOR_INFO(data?: Partial<DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_GET_ADVANCED_COLOR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: i32
  if (data?.colorEncoding !== undefined) view.setInt32(16, Number(data.colorEncoding), true);
  // 0x14: u32
  if (data?.bitsPerColorChannel !== undefined) view.setUint32(20, Number(data.bitsPerColorChannel), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE (size: 16)
 */
export interface DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = 16;

export function allocDISPLAYCONFIG_SET_ADVANCED_COLOR_STATE(data?: Partial<DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SET_ADVANCED_COLOR_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SDR_WHITE_LEVEL (size: 16)
 */
export interface DISPLAYCONFIG_SDR_WHITE_LEVEL {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SDRWhiteLevel: number;
}

export const sizeofDISPLAYCONFIG_SDR_WHITE_LEVEL = 16;

export function allocDISPLAYCONFIG_SDR_WHITE_LEVEL(data?: Partial<DISPLAYCONFIG_SDR_WHITE_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SDR_WHITE_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: u32
  if (data?.SDRWhiteLevel !== undefined) view.setUint32(8, Number(data.SDRWhiteLevel), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION (size: 16)
 */
export interface DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_GET_MONITOR_SPECIALIZATION = 16;

export function allocDISPLAYCONFIG_GET_MONITOR_SPECIALIZATION(data?: Partial<DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_GET_MONITOR_SPECIALIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION (size: 40)
 */
export interface DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION {
  /** Windows.Win32.Devices.Display.DISPLAYCONFIG_DEVICE_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  specializationType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  specializationSubType: Uint8Array | Deno.PointerValue | null;
  /** array */
  specializationApplicationName: Deno.PointerValue | null;
}

export const sizeofDISPLAYCONFIG_SET_MONITOR_SPECIALIZATION = 40;

export function allocDISPLAYCONFIG_SET_MONITOR_SPECIALIZATION(data?: Partial<DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAYCONFIG_SET_MONITOR_SPECIALIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.specializationType !== undefined) view.setBigUint64(16, data.specializationType === null ? 0n : BigInt(util.toPointer(data.specializationType)), true);
  // 0x18: pointer
  if (data?.specializationSubType !== undefined) view.setBigUint64(24, data.specializationSubType === null ? 0n : BigInt(util.toPointer(data.specializationSubType)), true);
  // 0x20: pointer
  if (data?.specializationApplicationName !== undefined) view.setBigUint64(32, data.specializationApplicationName === null ? 0n : BigInt(util.toPointer(data.specializationApplicationName)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Display.PHYSICAL_MONITOR (size: 16)
 */
export interface PHYSICAL_MONITOR {
  /** Windows.Win32.Foundation.HANDLE */
  hPhysicalMonitor: Uint8Array | Deno.PointerValue | null;
  /** array */
  szPhysicalMonitorDescription: Deno.PointerValue | null;
}

export const sizeofPHYSICAL_MONITOR = 16;

export function allocPHYSICAL_MONITOR(data?: Partial<PHYSICAL_MONITOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPHYSICAL_MONITOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hPhysicalMonitor !== undefined) view.setBigUint64(0, data.hPhysicalMonitor === null ? 0n : BigInt(util.toPointer(data.hPhysicalMonitor)), true);
  // 0x08: pointer
  if (data?.szPhysicalMonitorDescription !== undefined) view.setBigUint64(8, data.szPhysicalMonitorDescription === null ? 0n : BigInt(util.toPointer(data.szPhysicalMonitorDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.MC_TIMING_REPORT (size: 16)
 */
export interface MC_TIMING_REPORT {
  /** u32 */
  dwHorizontalFrequencyInHZ: number;
  /** u32 */
  dwVerticalFrequencyInHZ: number;
  /** u8 */
  bTimingStatusByte: number;
}

export const sizeofMC_TIMING_REPORT = 16;

export function allocMC_TIMING_REPORT(data?: Partial<MC_TIMING_REPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofMC_TIMING_REPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwHorizontalFrequencyInHZ !== undefined) view.setUint32(0, Number(data.dwHorizontalFrequencyInHZ), true);
  // 0x04: u32
  if (data?.dwVerticalFrequencyInHZ !== undefined) view.setUint32(4, Number(data.dwVerticalFrequencyInHZ), true);
  // 0x08: u8
  if (data?.bTimingStatusByte !== undefined) view.setUint8(8, Number(data.bTimingStatusByte));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.Display.Sources (size: 16)
 */
export interface Sources {
  /** u32 */
  sourceId: number;
  /** i32 */
  numTargets: number;
  /** array */
  aTargets: Deno.PointerValue | null;
}

export const sizeofSources = 16;

export function allocSources(data?: Partial<Sources>): Uint8Array {
  const buf = new Uint8Array(sizeofSources);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sourceId !== undefined) view.setUint32(0, Number(data.sourceId), true);
  // 0x04: i32
  if (data?.numTargets !== undefined) view.setInt32(4, Number(data.numTargets), true);
  // 0x08: pointer
  if (data?.aTargets !== undefined) view.setBigUint64(8, data.aTargets === null ? 0n : BigInt(util.toPointer(data.aTargets)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.Adapter (size: 24)
 */
export interface Adapter {
  /** array */
  AdapterName: Deno.PointerValue | null;
  /** i32 */
  numSources: number;
  /** array */
  sources: Deno.PointerValue | null;
}

export const sizeofAdapter = 24;

export function allocAdapter(data?: Partial<Adapter>): Uint8Array {
  const buf = new Uint8Array(sizeofAdapter);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AdapterName !== undefined) view.setBigUint64(0, data.AdapterName === null ? 0n : BigInt(util.toPointer(data.AdapterName)), true);
  // 0x08: i32
  if (data?.numSources !== undefined) view.setInt32(8, Number(data.numSources), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sources !== undefined) view.setBigUint64(16, data.sources === null ? 0n : BigInt(util.toPointer(data.sources)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.Adapters (size: 16)
 */
export interface Adapters {
  /** i32 */
  numAdapters: number;
  /** array */
  adapter: Deno.PointerValue | null;
}

export const sizeofAdapters = 16;

export function allocAdapters(data?: Partial<Adapters>): Uint8Array {
  const buf = new Uint8Array(sizeofAdapters);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.numAdapters !== undefined) view.setInt32(0, Number(data.numAdapters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.adapter !== undefined) view.setBigUint64(8, data.adapter === null ? 0n : BigInt(util.toPointer(data.adapter)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.DEVMODEW (size: 120)
 */
export interface DEVMODEW {
  /** array */
  dmDeviceName: Deno.PointerValue | null;
  /** u16 */
  dmSpecVersion: number;
  /** u16 */
  dmDriverVersion: number;
  /** u16 */
  dmSize: number;
  /** u16 */
  dmDriverExtra: number;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_FIELD_FLAGS */
  dmFields: DEVMODE_FIELD_FLAGS;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_COLOR */
  dmColor: DEVMODE_COLOR;
  /** i16 */
  dmDuplex: number;
  /** i16 */
  dmYResolution: number;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_TRUETYPE_OPTION */
  dmTTOption: DEVMODE_TRUETYPE_OPTION;
  /** Windows.Win32.Graphics.Gdi.DEVMODE_COLLATE */
  dmCollate: DEVMODE_COLLATE;
  /** array */
  dmFormName: Deno.PointerValue | null;
  /** u16 */
  dmLogPixels: number;
  /** u32 */
  dmBitsPerPel: number;
  /** u32 */
  dmPelsWidth: number;
  /** u32 */
  dmPelsHeight: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dmDisplayFrequency: number;
  /** u32 */
  dmICMMethod: number;
  /** u32 */
  dmICMIntent: number;
  /** u32 */
  dmMediaType: number;
  /** u32 */
  dmDitherType: number;
  /** u32 */
  dmReserved1: number;
  /** u32 */
  dmReserved2: number;
  /** u32 */
  dmPanningWidth: number;
  /** u32 */
  dmPanningHeight: number;
}

export const sizeofDEVMODEW = 120;

export function allocDEVMODEW(data?: Partial<DEVMODEW>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVMODEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dmDeviceName !== undefined) view.setBigUint64(0, data.dmDeviceName === null ? 0n : BigInt(util.toPointer(data.dmDeviceName)), true);
  // 0x08: u16
  if (data?.dmSpecVersion !== undefined) view.setUint16(8, Number(data.dmSpecVersion), true);
  // 0x0a: u16
  if (data?.dmDriverVersion !== undefined) view.setUint16(10, Number(data.dmDriverVersion), true);
  // 0x0c: u16
  if (data?.dmSize !== undefined) view.setUint16(12, Number(data.dmSize), true);
  // 0x0e: u16
  if (data?.dmDriverExtra !== undefined) view.setUint16(14, Number(data.dmDriverExtra), true);
  // 0x10: u32
  if (data?.dmFields !== undefined) view.setUint32(16, Number(data.dmFields), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: u32
  if (data?.dmColor !== undefined) view.setUint32(32, Number(data.dmColor), true);
  // 0x24: i16
  if (data?.dmDuplex !== undefined) view.setInt16(36, Number(data.dmDuplex), true);
  // 0x26: i16
  if (data?.dmYResolution !== undefined) view.setInt16(38, Number(data.dmYResolution), true);
  // 0x28: u32
  if (data?.dmTTOption !== undefined) view.setUint32(40, Number(data.dmTTOption), true);
  // 0x2c: u32
  if (data?.dmCollate !== undefined) view.setUint32(44, Number(data.dmCollate), true);
  // 0x30: pointer
  if (data?.dmFormName !== undefined) view.setBigUint64(48, data.dmFormName === null ? 0n : BigInt(util.toPointer(data.dmFormName)), true);
  // 0x38: u16
  if (data?.dmLogPixels !== undefined) view.setUint16(56, Number(data.dmLogPixels), true);
  // 0x3a: u32
  if (data?.dmBitsPerPel !== undefined) view.setUint32(58, Number(data.dmBitsPerPel), true);
  // 0x3e: u32
  if (data?.dmPelsWidth !== undefined) view.setUint32(62, Number(data.dmPelsWidth), true);
  // 0x42: u32
  if (data?.dmPelsHeight !== undefined) view.setUint32(66, Number(data.dmPelsHeight), true);
  // 0x46: pad2
  // 0x48: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(72, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x50: u32
  if (data?.dmDisplayFrequency !== undefined) view.setUint32(80, Number(data.dmDisplayFrequency), true);
  // 0x54: u32
  if (data?.dmICMMethod !== undefined) view.setUint32(84, Number(data.dmICMMethod), true);
  // 0x58: u32
  if (data?.dmICMIntent !== undefined) view.setUint32(88, Number(data.dmICMIntent), true);
  // 0x5c: u32
  if (data?.dmMediaType !== undefined) view.setUint32(92, Number(data.dmMediaType), true);
  // 0x60: u32
  if (data?.dmDitherType !== undefined) view.setUint32(96, Number(data.dmDitherType), true);
  // 0x64: u32
  if (data?.dmReserved1 !== undefined) view.setUint32(100, Number(data.dmReserved1), true);
  // 0x68: u32
  if (data?.dmReserved2 !== undefined) view.setUint32(104, Number(data.dmReserved2), true);
  // 0x6c: u32
  if (data?.dmPanningWidth !== undefined) view.setUint32(108, Number(data.dmPanningWidth), true);
  // 0x70: u32
  if (data?.dmPanningHeight !== undefined) view.setUint32(112, Number(data.dmPanningHeight), true);
  // 0x74: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DisplayMode (size: 16)
 */
export interface DisplayMode {
  /** array */
  DeviceName: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.DEVMODEW */
  devMode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDisplayMode = 16;

export function allocDisplayMode(data?: Partial<DisplayMode>): Uint8Array {
  const buf = new Uint8Array(sizeofDisplayMode);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(0, data.DeviceName === null ? 0n : BigInt(util.toPointer(data.DeviceName)), true);
  // 0x08: pointer
  if (data?.devMode !== undefined) view.setBigUint64(8, data.devMode === null ? 0n : BigInt(util.toPointer(data.devMode)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DisplayModes (size: 16)
 */
export interface DisplayModes {
  /** i32 */
  numDisplayModes: number;
  /** array */
  displayMode: Deno.PointerValue | null;
}

export const sizeofDisplayModes = 16;

export function allocDisplayModes(data?: Partial<DisplayModes>): Uint8Array {
  const buf = new Uint8Array(sizeofDisplayModes);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.numDisplayModes !== undefined) view.setInt32(0, Number(data.numDisplayModes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.displayMode !== undefined) view.setBigUint64(8, data.displayMode === null ? 0n : BigInt(util.toPointer(data.displayMode)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEOPARAMETERS (size: 104)
 */
export interface VIDEOPARAMETERS {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwCommand: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwMode: number;
  /** u32 */
  dwTVStandard: number;
  /** u32 */
  dwAvailableModes: number;
  /** u32 */
  dwAvailableTVStandard: number;
  /** u32 */
  dwFlickerFilter: number;
  /** u32 */
  dwOverScanX: number;
  /** u32 */
  dwOverScanY: number;
  /** u32 */
  dwMaxUnscaledX: number;
  /** u32 */
  dwMaxUnscaledY: number;
  /** u32 */
  dwPositionX: number;
  /** u32 */
  dwPositionY: number;
  /** u32 */
  dwBrightness: number;
  /** u32 */
  dwContrast: number;
  /** u32 */
  dwCPType: number;
  /** u32 */
  dwCPCommand: number;
  /** u32 */
  dwCPStandard: number;
  /** u32 */
  dwCPKey: number;
  /** u32 */
  bCP_APSTriggerBits: number;
  /** array */
  bOEMCopyProtection: Deno.PointerValue | null;
}

export const sizeofVIDEOPARAMETERS = 104;

export function allocVIDEOPARAMETERS(data?: Partial<VIDEOPARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOPARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  // 0x08: u32
  if (data?.dwOffset !== undefined) view.setUint32(8, Number(data.dwOffset), true);
  // 0x0c: u32
  if (data?.dwCommand !== undefined) view.setUint32(12, Number(data.dwCommand), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwMode !== undefined) view.setUint32(20, Number(data.dwMode), true);
  // 0x18: u32
  if (data?.dwTVStandard !== undefined) view.setUint32(24, Number(data.dwTVStandard), true);
  // 0x1c: u32
  if (data?.dwAvailableModes !== undefined) view.setUint32(28, Number(data.dwAvailableModes), true);
  // 0x20: u32
  if (data?.dwAvailableTVStandard !== undefined) view.setUint32(32, Number(data.dwAvailableTVStandard), true);
  // 0x24: u32
  if (data?.dwFlickerFilter !== undefined) view.setUint32(36, Number(data.dwFlickerFilter), true);
  // 0x28: u32
  if (data?.dwOverScanX !== undefined) view.setUint32(40, Number(data.dwOverScanX), true);
  // 0x2c: u32
  if (data?.dwOverScanY !== undefined) view.setUint32(44, Number(data.dwOverScanY), true);
  // 0x30: u32
  if (data?.dwMaxUnscaledX !== undefined) view.setUint32(48, Number(data.dwMaxUnscaledX), true);
  // 0x34: u32
  if (data?.dwMaxUnscaledY !== undefined) view.setUint32(52, Number(data.dwMaxUnscaledY), true);
  // 0x38: u32
  if (data?.dwPositionX !== undefined) view.setUint32(56, Number(data.dwPositionX), true);
  // 0x3c: u32
  if (data?.dwPositionY !== undefined) view.setUint32(60, Number(data.dwPositionY), true);
  // 0x40: u32
  if (data?.dwBrightness !== undefined) view.setUint32(64, Number(data.dwBrightness), true);
  // 0x44: u32
  if (data?.dwContrast !== undefined) view.setUint32(68, Number(data.dwContrast), true);
  // 0x48: u32
  if (data?.dwCPType !== undefined) view.setUint32(72, Number(data.dwCPType), true);
  // 0x4c: u32
  if (data?.dwCPCommand !== undefined) view.setUint32(76, Number(data.dwCPCommand), true);
  // 0x50: u32
  if (data?.dwCPStandard !== undefined) view.setUint32(80, Number(data.dwCPStandard), true);
  // 0x54: u32
  if (data?.dwCPKey !== undefined) view.setUint32(84, Number(data.dwCPKey), true);
  // 0x58: u32
  if (data?.bCP_APSTriggerBits !== undefined) view.setUint32(88, Number(data.bCP_APSTriggerBits), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.bOEMCopyProtection !== undefined) view.setBigUint64(96, data.bOEMCopyProtection === null ? 0n : BigInt(util.toPointer(data.bOEMCopyProtection)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.POINTE (size: 8)
 */
export interface POINTE {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofPOINTE = 8;

export function allocPOINTE(data?: Partial<POINTE>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FLOAT_LONG (size: 8)
 */
export interface FLOAT_LONG {
  /** f32 */
  e: number;
  /** i32 */
  l: number;
}

export const sizeofFLOAT_LONG = 8;

export function allocFLOAT_LONG(data?: Partial<FLOAT_LONG>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOAT_LONG);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.e !== undefined) view.setFloat32(0, Number(data.e), true);
  // 0x04: i32
  if (data?.l !== undefined) view.setInt32(4, Number(data.l), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FD_XFORM (size: 16)
 */
export interface FD_XFORM {
  /** f32 */
  eXX: number;
  /** f32 */
  eXY: number;
  /** f32 */
  eYX: number;
  /** f32 */
  eYY: number;
}

export const sizeofFD_XFORM = 16;

export function allocFD_XFORM(data?: Partial<FD_XFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofFD_XFORM);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.eXX !== undefined) view.setFloat32(0, Number(data.eXX), true);
  // 0x04: f32
  if (data?.eXY !== undefined) view.setFloat32(4, Number(data.eXY), true);
  // 0x08: f32
  if (data?.eYX !== undefined) view.setFloat32(8, Number(data.eYX), true);
  // 0x0c: f32
  if (data?.eYY !== undefined) view.setFloat32(12, Number(data.eYY), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.PANOSE (size: 40)
 */
export interface PANOSE {
  /** Windows.Win32.Graphics.Gdi.PAN_FAMILY_TYPE */
  bFamilyType: PAN_FAMILY_TYPE;
  /** Windows.Win32.Graphics.Gdi.PAN_SERIF_STYLE */
  bSerifStyle: PAN_SERIF_STYLE;
  /** Windows.Win32.Graphics.Gdi.PAN_WEIGHT */
  bWeight: PAN_WEIGHT;
  /** Windows.Win32.Graphics.Gdi.PAN_PROPORTION */
  bProportion: PAN_PROPORTION;
  /** Windows.Win32.Graphics.Gdi.PAN_CONTRAST */
  bContrast: PAN_CONTRAST;
  /** Windows.Win32.Graphics.Gdi.PAN_STROKE_VARIATION */
  bStrokeVariation: PAN_STROKE_VARIATION;
  /** Windows.Win32.Graphics.Gdi.PAN_ARM_STYLE */
  bArmStyle: PAN_ARM_STYLE;
  /** Windows.Win32.Graphics.Gdi.PAN_LETT_FORM */
  bLetterform: PAN_LETT_FORM;
  /** Windows.Win32.Graphics.Gdi.PAN_MIDLINE */
  bMidline: PAN_MIDLINE;
  /** Windows.Win32.Graphics.Gdi.PAN_XHEIGHT */
  bXHeight: PAN_XHEIGHT;
}

export const sizeofPANOSE = 40;

export function allocPANOSE(data?: Partial<PANOSE>): Uint8Array {
  const buf = new Uint8Array(sizeofPANOSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bFamilyType !== undefined) view.setUint32(0, Number(data.bFamilyType), true);
  // 0x04: u32
  if (data?.bSerifStyle !== undefined) view.setUint32(4, Number(data.bSerifStyle), true);
  // 0x08: u32
  if (data?.bWeight !== undefined) view.setUint32(8, Number(data.bWeight), true);
  // 0x0c: u32
  if (data?.bProportion !== undefined) view.setUint32(12, Number(data.bProportion), true);
  // 0x10: u32
  if (data?.bContrast !== undefined) view.setUint32(16, Number(data.bContrast), true);
  // 0x14: u32
  if (data?.bStrokeVariation !== undefined) view.setUint32(20, Number(data.bStrokeVariation), true);
  // 0x18: u32
  if (data?.bArmStyle !== undefined) view.setUint32(24, Number(data.bArmStyle), true);
  // 0x1c: u32
  if (data?.bLetterform !== undefined) view.setUint32(28, Number(data.bLetterform), true);
  // 0x20: u32
  if (data?.bMidline !== undefined) view.setUint32(32, Number(data.bMidline), true);
  // 0x24: u32
  if (data?.bXHeight !== undefined) view.setUint32(36, Number(data.bXHeight), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.IFIMETRICS (size: 208)
 */
export interface IFIMETRICS {
  /** u32 */
  cjThis: number;
  /** u32 */
  cjIfiExtra: number;
  /** i32 */
  dpwszFamilyName: number;
  /** i32 */
  dpwszStyleName: number;
  /** i32 */
  dpwszFaceName: number;
  /** i32 */
  dpwszUniqueName: number;
  /** i32 */
  dpFontSim: number;
  /** i32 */
  lEmbedId: number;
  /** i32 */
  lItalicAngle: number;
  /** i32 */
  lCharBias: number;
  /** i32 */
  dpCharSets: number;
  /** u8 */
  jWinCharSet: number;
  /** u8 */
  jWinPitchAndFamily: number;
  /** u16 */
  usWinWeight: number;
  /** u32 */
  flInfo: number;
  /** u16 */
  fsSelection: number;
  /** u16 */
  fsType: number;
  /** i16 */
  fwdUnitsPerEm: number;
  /** i16 */
  fwdLowestPPEm: number;
  /** i16 */
  fwdWinAscender: number;
  /** i16 */
  fwdWinDescender: number;
  /** i16 */
  fwdMacAscender: number;
  /** i16 */
  fwdMacDescender: number;
  /** i16 */
  fwdMacLineGap: number;
  /** i16 */
  fwdTypoAscender: number;
  /** i16 */
  fwdTypoDescender: number;
  /** i16 */
  fwdTypoLineGap: number;
  /** i16 */
  fwdAveCharWidth: number;
  /** i16 */
  fwdMaxCharInc: number;
  /** i16 */
  fwdCapHeight: number;
  /** i16 */
  fwdXHeight: number;
  /** i16 */
  fwdSubscriptXSize: number;
  /** i16 */
  fwdSubscriptYSize: number;
  /** i16 */
  fwdSubscriptXOffset: number;
  /** i16 */
  fwdSubscriptYOffset: number;
  /** i16 */
  fwdSuperscriptXSize: number;
  /** i16 */
  fwdSuperscriptYSize: number;
  /** i16 */
  fwdSuperscriptXOffset: number;
  /** i16 */
  fwdSuperscriptYOffset: number;
  /** i16 */
  fwdUnderscoreSize: number;
  /** i16 */
  fwdUnderscorePosition: number;
  /** i16 */
  fwdStrikeoutSize: number;
  /** i16 */
  fwdStrikeoutPosition: number;
  /** u8 */
  chFirstChar: number;
  /** u8 */
  chLastChar: number;
  /** u8 */
  chDefaultChar: number;
  /** u8 */
  chBreakChar: number;
  /** char */
  wcFirstChar: Uint8Array | Deno.PointerValue | null;
  /** char */
  wcLastChar: Uint8Array | Deno.PointerValue | null;
  /** char */
  wcDefaultChar: Uint8Array | Deno.PointerValue | null;
  /** char */
  wcBreakChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptlBaseline: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptlAspect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptlCaret: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECTL */
  rclFontBox: Uint8Array | Deno.PointerValue | null;
  /** array */
  achVendId: Deno.PointerValue | null;
  /** u32 */
  cKerningPairs: number;
  /** u32 */
  ulPanoseCulture: number;
  /** Windows.Win32.Graphics.Gdi.PANOSE */
  panose: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Align: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIFIMETRICS = 208;

export function allocIFIMETRICS(data?: Partial<IFIMETRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofIFIMETRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cjThis !== undefined) view.setUint32(0, Number(data.cjThis), true);
  // 0x04: u32
  if (data?.cjIfiExtra !== undefined) view.setUint32(4, Number(data.cjIfiExtra), true);
  // 0x08: i32
  if (data?.dpwszFamilyName !== undefined) view.setInt32(8, Number(data.dpwszFamilyName), true);
  // 0x0c: i32
  if (data?.dpwszStyleName !== undefined) view.setInt32(12, Number(data.dpwszStyleName), true);
  // 0x10: i32
  if (data?.dpwszFaceName !== undefined) view.setInt32(16, Number(data.dpwszFaceName), true);
  // 0x14: i32
  if (data?.dpwszUniqueName !== undefined) view.setInt32(20, Number(data.dpwszUniqueName), true);
  // 0x18: i32
  if (data?.dpFontSim !== undefined) view.setInt32(24, Number(data.dpFontSim), true);
  // 0x1c: i32
  if (data?.lEmbedId !== undefined) view.setInt32(28, Number(data.lEmbedId), true);
  // 0x20: i32
  if (data?.lItalicAngle !== undefined) view.setInt32(32, Number(data.lItalicAngle), true);
  // 0x24: i32
  if (data?.lCharBias !== undefined) view.setInt32(36, Number(data.lCharBias), true);
  // 0x28: i32
  if (data?.dpCharSets !== undefined) view.setInt32(40, Number(data.dpCharSets), true);
  // 0x2c: u8
  if (data?.jWinCharSet !== undefined) view.setUint8(44, Number(data.jWinCharSet));
  // 0x2d: u8
  if (data?.jWinPitchAndFamily !== undefined) view.setUint8(45, Number(data.jWinPitchAndFamily));
  // 0x2e: u16
  if (data?.usWinWeight !== undefined) view.setUint16(46, Number(data.usWinWeight), true);
  // 0x30: u32
  if (data?.flInfo !== undefined) view.setUint32(48, Number(data.flInfo), true);
  // 0x34: u16
  if (data?.fsSelection !== undefined) view.setUint16(52, Number(data.fsSelection), true);
  // 0x36: u16
  if (data?.fsType !== undefined) view.setUint16(54, Number(data.fsType), true);
  // 0x38: i16
  if (data?.fwdUnitsPerEm !== undefined) view.setInt16(56, Number(data.fwdUnitsPerEm), true);
  // 0x3a: i16
  if (data?.fwdLowestPPEm !== undefined) view.setInt16(58, Number(data.fwdLowestPPEm), true);
  // 0x3c: i16
  if (data?.fwdWinAscender !== undefined) view.setInt16(60, Number(data.fwdWinAscender), true);
  // 0x3e: i16
  if (data?.fwdWinDescender !== undefined) view.setInt16(62, Number(data.fwdWinDescender), true);
  // 0x40: i16
  if (data?.fwdMacAscender !== undefined) view.setInt16(64, Number(data.fwdMacAscender), true);
  // 0x42: i16
  if (data?.fwdMacDescender !== undefined) view.setInt16(66, Number(data.fwdMacDescender), true);
  // 0x44: i16
  if (data?.fwdMacLineGap !== undefined) view.setInt16(68, Number(data.fwdMacLineGap), true);
  // 0x46: i16
  if (data?.fwdTypoAscender !== undefined) view.setInt16(70, Number(data.fwdTypoAscender), true);
  // 0x48: i16
  if (data?.fwdTypoDescender !== undefined) view.setInt16(72, Number(data.fwdTypoDescender), true);
  // 0x4a: i16
  if (data?.fwdTypoLineGap !== undefined) view.setInt16(74, Number(data.fwdTypoLineGap), true);
  // 0x4c: i16
  if (data?.fwdAveCharWidth !== undefined) view.setInt16(76, Number(data.fwdAveCharWidth), true);
  // 0x4e: i16
  if (data?.fwdMaxCharInc !== undefined) view.setInt16(78, Number(data.fwdMaxCharInc), true);
  // 0x50: i16
  if (data?.fwdCapHeight !== undefined) view.setInt16(80, Number(data.fwdCapHeight), true);
  // 0x52: i16
  if (data?.fwdXHeight !== undefined) view.setInt16(82, Number(data.fwdXHeight), true);
  // 0x54: i16
  if (data?.fwdSubscriptXSize !== undefined) view.setInt16(84, Number(data.fwdSubscriptXSize), true);
  // 0x56: i16
  if (data?.fwdSubscriptYSize !== undefined) view.setInt16(86, Number(data.fwdSubscriptYSize), true);
  // 0x58: i16
  if (data?.fwdSubscriptXOffset !== undefined) view.setInt16(88, Number(data.fwdSubscriptXOffset), true);
  // 0x5a: i16
  if (data?.fwdSubscriptYOffset !== undefined) view.setInt16(90, Number(data.fwdSubscriptYOffset), true);
  // 0x5c: i16
  if (data?.fwdSuperscriptXSize !== undefined) view.setInt16(92, Number(data.fwdSuperscriptXSize), true);
  // 0x5e: i16
  if (data?.fwdSuperscriptYSize !== undefined) view.setInt16(94, Number(data.fwdSuperscriptYSize), true);
  // 0x60: i16
  if (data?.fwdSuperscriptXOffset !== undefined) view.setInt16(96, Number(data.fwdSuperscriptXOffset), true);
  // 0x62: i16
  if (data?.fwdSuperscriptYOffset !== undefined) view.setInt16(98, Number(data.fwdSuperscriptYOffset), true);
  // 0x64: i16
  if (data?.fwdUnderscoreSize !== undefined) view.setInt16(100, Number(data.fwdUnderscoreSize), true);
  // 0x66: i16
  if (data?.fwdUnderscorePosition !== undefined) view.setInt16(102, Number(data.fwdUnderscorePosition), true);
  // 0x68: i16
  if (data?.fwdStrikeoutSize !== undefined) view.setInt16(104, Number(data.fwdStrikeoutSize), true);
  // 0x6a: i16
  if (data?.fwdStrikeoutPosition !== undefined) view.setInt16(106, Number(data.fwdStrikeoutPosition), true);
  // 0x6c: u8
  if (data?.chFirstChar !== undefined) view.setUint8(108, Number(data.chFirstChar));
  // 0x6d: u8
  if (data?.chLastChar !== undefined) view.setUint8(109, Number(data.chLastChar));
  // 0x6e: u8
  if (data?.chDefaultChar !== undefined) view.setUint8(110, Number(data.chDefaultChar));
  // 0x6f: u8
  if (data?.chBreakChar !== undefined) view.setUint8(111, Number(data.chBreakChar));
  // 0x70: pointer
  if (data?.wcFirstChar !== undefined) view.setBigUint64(112, data.wcFirstChar === null ? 0n : BigInt(util.toPointer(data.wcFirstChar)), true);
  // 0x78: pointer
  if (data?.wcLastChar !== undefined) view.setBigUint64(120, data.wcLastChar === null ? 0n : BigInt(util.toPointer(data.wcLastChar)), true);
  // 0x80: pointer
  if (data?.wcDefaultChar !== undefined) view.setBigUint64(128, data.wcDefaultChar === null ? 0n : BigInt(util.toPointer(data.wcDefaultChar)), true);
  // 0x88: pointer
  if (data?.wcBreakChar !== undefined) view.setBigUint64(136, data.wcBreakChar === null ? 0n : BigInt(util.toPointer(data.wcBreakChar)), true);
  // 0x90: pointer
  if (data?.ptlBaseline !== undefined) view.setBigUint64(144, data.ptlBaseline === null ? 0n : BigInt(util.toPointer(data.ptlBaseline)), true);
  // 0x98: pointer
  if (data?.ptlAspect !== undefined) view.setBigUint64(152, data.ptlAspect === null ? 0n : BigInt(util.toPointer(data.ptlAspect)), true);
  // 0xa0: pointer
  if (data?.ptlCaret !== undefined) view.setBigUint64(160, data.ptlCaret === null ? 0n : BigInt(util.toPointer(data.ptlCaret)), true);
  // 0xa8: pointer
  if (data?.rclFontBox !== undefined) view.setBigUint64(168, data.rclFontBox === null ? 0n : BigInt(util.toPointer(data.rclFontBox)), true);
  // 0xb0: pointer
  if (data?.achVendId !== undefined) view.setBigUint64(176, data.achVendId === null ? 0n : BigInt(util.toPointer(data.achVendId)), true);
  // 0xb8: u32
  if (data?.cKerningPairs !== undefined) view.setUint32(184, Number(data.cKerningPairs), true);
  // 0xbc: u32
  if (data?.ulPanoseCulture !== undefined) view.setUint32(188, Number(data.ulPanoseCulture), true);
  // 0xc0: pointer
  if (data?.panose !== undefined) view.setBigUint64(192, data.panose === null ? 0n : BigInt(util.toPointer(data.panose)), true);
  // 0xc8: pointer
  if (data?.Align !== undefined) view.setBigUint64(200, data.Align === null ? 0n : BigInt(util.toPointer(data.Align)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.LINEATTRS (size: 48)
 */
export interface LINEATTRS {
  /** u32 */
  fl: number;
  /** u32 */
  iJoin: number;
  /** u32 */
  iEndCap: number;
  /** Windows.Win32.Devices.Display.FLOAT_LONG */
  elWidth: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  eMiterLimit: number;
  /** u32 */
  cstyle: number;
  /** ptr */
  pstyle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Display.FLOAT_LONG */
  elStyleState: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLINEATTRS = 48;

export function allocLINEATTRS(data?: Partial<LINEATTRS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEATTRS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fl !== undefined) view.setUint32(0, Number(data.fl), true);
  // 0x04: u32
  if (data?.iJoin !== undefined) view.setUint32(4, Number(data.iJoin), true);
  // 0x08: u32
  if (data?.iEndCap !== undefined) view.setUint32(8, Number(data.iEndCap), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.elWidth !== undefined) view.setBigUint64(16, data.elWidth === null ? 0n : BigInt(util.toPointer(data.elWidth)), true);
  // 0x18: f32
  if (data?.eMiterLimit !== undefined) view.setFloat32(24, Number(data.eMiterLimit), true);
  // 0x1c: u32
  if (data?.cstyle !== undefined) view.setUint32(28, Number(data.cstyle), true);
  // 0x20: pointer
  if (data?.pstyle !== undefined) view.setBigUint64(32, data.pstyle === null ? 0n : BigInt(util.toPointer(data.pstyle)), true);
  // 0x28: pointer
  if (data?.elStyleState !== undefined) view.setBigUint64(40, data.elStyleState === null ? 0n : BigInt(util.toPointer(data.elStyleState)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.XFORML (size: 24)
 */
export interface XFORML {
  /** f32 */
  eM11: number;
  /** f32 */
  eM12: number;
  /** f32 */
  eM21: number;
  /** f32 */
  eM22: number;
  /** f32 */
  eDx: number;
  /** f32 */
  eDy: number;
}

export const sizeofXFORML = 24;

export function allocXFORML(data?: Partial<XFORML>): Uint8Array {
  const buf = new Uint8Array(sizeofXFORML);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.eM11 !== undefined) view.setFloat32(0, Number(data.eM11), true);
  // 0x04: f32
  if (data?.eM12 !== undefined) view.setFloat32(4, Number(data.eM12), true);
  // 0x08: f32
  if (data?.eM21 !== undefined) view.setFloat32(8, Number(data.eM21), true);
  // 0x0c: f32
  if (data?.eM22 !== undefined) view.setFloat32(12, Number(data.eM22), true);
  // 0x10: f32
  if (data?.eDx !== undefined) view.setFloat32(16, Number(data.eDx), true);
  // 0x14: f32
  if (data?.eDy !== undefined) view.setFloat32(20, Number(data.eDy), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FLOATOBJ_XFORM (size: 24)
 */
export interface FLOATOBJ_XFORM {
  /** f32 */
  eM11: number;
  /** f32 */
  eM12: number;
  /** f32 */
  eM21: number;
  /** f32 */
  eM22: number;
  /** f32 */
  eDx: number;
  /** f32 */
  eDy: number;
}

export const sizeofFLOATOBJ_XFORM = 24;

export function allocFLOATOBJ_XFORM(data?: Partial<FLOATOBJ_XFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOATOBJ_XFORM);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.eM11 !== undefined) view.setFloat32(0, Number(data.eM11), true);
  // 0x04: f32
  if (data?.eM12 !== undefined) view.setFloat32(4, Number(data.eM12), true);
  // 0x08: f32
  if (data?.eM21 !== undefined) view.setFloat32(8, Number(data.eM21), true);
  // 0x0c: f32
  if (data?.eM22 !== undefined) view.setFloat32(12, Number(data.eM22), true);
  // 0x10: f32
  if (data?.eDx !== undefined) view.setFloat32(16, Number(data.eDx), true);
  // 0x14: f32
  if (data?.eDy !== undefined) view.setFloat32(20, Number(data.eDy), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.POINTFIX (size: 8)
 */
export interface POINTFIX {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINTFIX = 8;

export function allocPOINTFIX(data?: Partial<POINTFIX>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTFIX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.RECTFX (size: 16)
 */
export interface RECTFX {
  /** i32 */
  xLeft: number;
  /** i32 */
  yTop: number;
  /** i32 */
  xRight: number;
  /** i32 */
  yBottom: number;
}

export const sizeofRECTFX = 16;

export function allocRECTFX(data?: Partial<RECTFX>): Uint8Array {
  const buf = new Uint8Array(sizeofRECTFX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.xLeft !== undefined) view.setInt32(0, Number(data.xLeft), true);
  // 0x04: i32
  if (data?.yTop !== undefined) view.setInt32(4, Number(data.yTop), true);
  // 0x08: i32
  if (data?.xRight !== undefined) view.setInt32(8, Number(data.xRight), true);
  // 0x0c: i32
  if (data?.yBottom !== undefined) view.setInt32(12, Number(data.yBottom), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FD_DEVICEMETRICS (size: 136)
 */
export interface FD_DEVICEMETRICS {
  /** u32 */
  flRealizedType: number;
  /** Windows.Win32.Devices.Display.POINTE */
  pteBase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.POINTE */
  pteSide: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lD: number;
  /** i32 */
  fxMaxAscender: number;
  /** i32 */
  fxMaxDescender: number;
  /** Windows.Win32.Foundation.POINTL */
  ptlUnderline1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptlStrikeOut: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptlULThickness: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptlSOThickness: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cxMax: number;
  /** u32 */
  cyMax: number;
  /** u32 */
  cjGlyphMax: number;
  /** Windows.Win32.Devices.Display.FD_XFORM */
  fdxQuantized: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lNonLinearExtLeading: number;
  /** i32 */
  lNonLinearIntLeading: number;
  /** i32 */
  lNonLinearMaxCharWidth: number;
  /** i32 */
  lNonLinearAvgCharWidth: number;
  /** i32 */
  lMinA: number;
  /** i32 */
  lMinC: number;
  /** i32 */
  lMinD: number;
  /** array */
  alReserved: Deno.PointerValue | null;
}

export const sizeofFD_DEVICEMETRICS = 136;

export function allocFD_DEVICEMETRICS(data?: Partial<FD_DEVICEMETRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofFD_DEVICEMETRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flRealizedType !== undefined) view.setUint32(0, Number(data.flRealizedType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pteBase !== undefined) view.setBigUint64(8, data.pteBase === null ? 0n : BigInt(util.toPointer(data.pteBase)), true);
  // 0x10: pointer
  if (data?.pteSide !== undefined) view.setBigUint64(16, data.pteSide === null ? 0n : BigInt(util.toPointer(data.pteSide)), true);
  // 0x18: i32
  if (data?.lD !== undefined) view.setInt32(24, Number(data.lD), true);
  // 0x1c: i32
  if (data?.fxMaxAscender !== undefined) view.setInt32(28, Number(data.fxMaxAscender), true);
  // 0x20: i32
  if (data?.fxMaxDescender !== undefined) view.setInt32(32, Number(data.fxMaxDescender), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ptlUnderline1 !== undefined) view.setBigUint64(40, data.ptlUnderline1 === null ? 0n : BigInt(util.toPointer(data.ptlUnderline1)), true);
  // 0x30: pointer
  if (data?.ptlStrikeOut !== undefined) view.setBigUint64(48, data.ptlStrikeOut === null ? 0n : BigInt(util.toPointer(data.ptlStrikeOut)), true);
  // 0x38: pointer
  if (data?.ptlULThickness !== undefined) view.setBigUint64(56, data.ptlULThickness === null ? 0n : BigInt(util.toPointer(data.ptlULThickness)), true);
  // 0x40: pointer
  if (data?.ptlSOThickness !== undefined) view.setBigUint64(64, data.ptlSOThickness === null ? 0n : BigInt(util.toPointer(data.ptlSOThickness)), true);
  // 0x48: u32
  if (data?.cxMax !== undefined) view.setUint32(72, Number(data.cxMax), true);
  // 0x4c: u32
  if (data?.cyMax !== undefined) view.setUint32(76, Number(data.cyMax), true);
  // 0x50: u32
  if (data?.cjGlyphMax !== undefined) view.setUint32(80, Number(data.cjGlyphMax), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.fdxQuantized !== undefined) view.setBigUint64(88, data.fdxQuantized === null ? 0n : BigInt(util.toPointer(data.fdxQuantized)), true);
  // 0x60: i32
  if (data?.lNonLinearExtLeading !== undefined) view.setInt32(96, Number(data.lNonLinearExtLeading), true);
  // 0x64: i32
  if (data?.lNonLinearIntLeading !== undefined) view.setInt32(100, Number(data.lNonLinearIntLeading), true);
  // 0x68: i32
  if (data?.lNonLinearMaxCharWidth !== undefined) view.setInt32(104, Number(data.lNonLinearMaxCharWidth), true);
  // 0x6c: i32
  if (data?.lNonLinearAvgCharWidth !== undefined) view.setInt32(108, Number(data.lNonLinearAvgCharWidth), true);
  // 0x70: i32
  if (data?.lMinA !== undefined) view.setInt32(112, Number(data.lMinA), true);
  // 0x74: i32
  if (data?.lMinC !== undefined) view.setInt32(116, Number(data.lMinC), true);
  // 0x78: i32
  if (data?.lMinD !== undefined) view.setInt32(120, Number(data.lMinD), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.alReserved !== undefined) view.setBigUint64(128, data.alReserved === null ? 0n : BigInt(util.toPointer(data.alReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.LIGATURE (size: 32)
 */
export interface LIGATURE {
  /** u32 */
  culSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwsz: string | null;
  /** u32 */
  chglyph: number;
  /** array */
  ahglyph: Deno.PointerValue | null;
}

export const sizeofLIGATURE = 32;

export function allocLIGATURE(data?: Partial<LIGATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.culSize !== undefined) view.setUint32(0, Number(data.culSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwsz !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwsz);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.chglyph !== undefined) view.setUint32(16, Number(data.chglyph), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ahglyph !== undefined) view.setBigUint64(24, data.ahglyph === null ? 0n : BigInt(util.toPointer(data.ahglyph)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FD_LIGATURE (size: 24)
 */
export interface FD_LIGATURE {
  /** u32 */
  culThis: number;
  /** u32 */
  ulType: number;
  /** u32 */
  cLigatures: number;
  /** array */
  alig: Deno.PointerValue | null;
}

export const sizeofFD_LIGATURE = 24;

export function allocFD_LIGATURE(data?: Partial<FD_LIGATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofFD_LIGATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.culThis !== undefined) view.setUint32(0, Number(data.culThis), true);
  // 0x04: u32
  if (data?.ulType !== undefined) view.setUint32(4, Number(data.ulType), true);
  // 0x08: u32
  if (data?.cLigatures !== undefined) view.setUint32(8, Number(data.cLigatures), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.alig !== undefined) view.setBigUint64(16, data.alig === null ? 0n : BigInt(util.toPointer(data.alig)), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.POINTQF (size: 16)
 */
export interface POINTQF {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  x: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  y: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOINTQF = 16;

export function allocPOINTQF(data?: Partial<POINTQF>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTQF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.x !== undefined) view.setBigUint64(0, data.x === null ? 0n : BigInt(util.toPointer(data.x)), true);
  // 0x08: pointer
  if (data?.y !== undefined) view.setBigUint64(8, data.y === null ? 0n : BigInt(util.toPointer(data.y)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.WCRUN (size: 24)
 */
export interface WCRUN {
  /** char */
  wcLow: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cGlyphs: number;
  /** ptr */
  phg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWCRUN = 24;

export function allocWCRUN(data?: Partial<WCRUN>): Uint8Array {
  const buf = new Uint8Array(sizeofWCRUN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wcLow !== undefined) view.setBigUint64(0, data.wcLow === null ? 0n : BigInt(util.toPointer(data.wcLow)), true);
  // 0x08: u16
  if (data?.cGlyphs !== undefined) view.setUint16(8, Number(data.cGlyphs), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.phg !== undefined) view.setBigUint64(16, data.phg === null ? 0n : BigInt(util.toPointer(data.phg)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FD_GLYPHSET (size: 24)
 */
export interface FD_GLYPHSET {
  /** u32 */
  cjThis: number;
  /** u32 */
  flAccel: number;
  /** u32 */
  cGlyphsSupported: number;
  /** u32 */
  cRuns: number;
  /** array */
  awcrun: Deno.PointerValue | null;
}

export const sizeofFD_GLYPHSET = 24;

export function allocFD_GLYPHSET(data?: Partial<FD_GLYPHSET>): Uint8Array {
  const buf = new Uint8Array(sizeofFD_GLYPHSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cjThis !== undefined) view.setUint32(0, Number(data.cjThis), true);
  // 0x04: u32
  if (data?.flAccel !== undefined) view.setUint32(4, Number(data.flAccel), true);
  // 0x08: u32
  if (data?.cGlyphsSupported !== undefined) view.setUint32(8, Number(data.cGlyphsSupported), true);
  // 0x0c: u32
  if (data?.cRuns !== undefined) view.setUint32(12, Number(data.cRuns), true);
  // 0x10: pointer
  if (data?.awcrun !== undefined) view.setBigUint64(16, data.awcrun === null ? 0n : BigInt(util.toPointer(data.awcrun)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FD_GLYPHATTR (size: 24)
 */
export interface FD_GLYPHATTR {
  /** u32 */
  cjThis: number;
  /** u32 */
  cGlyphs: number;
  /** u32 */
  iMode: number;
  /** array */
  aGlyphAttr: Deno.PointerValue | null;
}

export const sizeofFD_GLYPHATTR = 24;

export function allocFD_GLYPHATTR(data?: Partial<FD_GLYPHATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofFD_GLYPHATTR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cjThis !== undefined) view.setUint32(0, Number(data.cjThis), true);
  // 0x04: u32
  if (data?.cGlyphs !== undefined) view.setUint32(4, Number(data.cGlyphs), true);
  // 0x08: u32
  if (data?.iMode !== undefined) view.setUint32(8, Number(data.iMode), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aGlyphAttr !== undefined) view.setBigUint64(16, data.aGlyphAttr === null ? 0n : BigInt(util.toPointer(data.aGlyphAttr)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FD_KERNINGPAIR (size: 24)
 */
export interface FD_KERNINGPAIR {
  /** char */
  wcFirst: Uint8Array | Deno.PointerValue | null;
  /** char */
  wcSecond: Uint8Array | Deno.PointerValue | null;
  /** i16 */
  fwdKern: number;
}

export const sizeofFD_KERNINGPAIR = 24;

export function allocFD_KERNINGPAIR(data?: Partial<FD_KERNINGPAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofFD_KERNINGPAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wcFirst !== undefined) view.setBigUint64(0, data.wcFirst === null ? 0n : BigInt(util.toPointer(data.wcFirst)), true);
  // 0x08: pointer
  if (data?.wcSecond !== undefined) view.setBigUint64(8, data.wcSecond === null ? 0n : BigInt(util.toPointer(data.wcSecond)), true);
  // 0x10: i16
  if (data?.fwdKern !== undefined) view.setInt16(16, Number(data.fwdKern), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FONTDIFF (size: 24)
 */
export interface FONTDIFF {
  /** u8 */
  jReserved1: number;
  /** u8 */
  jReserved2: number;
  /** u8 */
  jReserved3: number;
  /** u8 */
  bWeight: number;
  /** u16 */
  usWinWeight: number;
  /** u16 */
  fsSelection: number;
  /** i16 */
  fwdAveCharWidth: number;
  /** i16 */
  fwdMaxCharInc: number;
  /** Windows.Win32.Foundation.POINTL */
  ptlCaret: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFONTDIFF = 24;

export function allocFONTDIFF(data?: Partial<FONTDIFF>): Uint8Array {
  const buf = new Uint8Array(sizeofFONTDIFF);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.jReserved1 !== undefined) view.setUint8(0, Number(data.jReserved1));
  // 0x01: u8
  if (data?.jReserved2 !== undefined) view.setUint8(1, Number(data.jReserved2));
  // 0x02: u8
  if (data?.jReserved3 !== undefined) view.setUint8(2, Number(data.jReserved3));
  // 0x03: u8
  if (data?.bWeight !== undefined) view.setUint8(3, Number(data.bWeight));
  // 0x04: u16
  if (data?.usWinWeight !== undefined) view.setUint16(4, Number(data.usWinWeight), true);
  // 0x06: u16
  if (data?.fsSelection !== undefined) view.setUint16(6, Number(data.fsSelection), true);
  // 0x08: i16
  if (data?.fwdAveCharWidth !== undefined) view.setInt16(8, Number(data.fwdAveCharWidth), true);
  // 0x0a: i16
  if (data?.fwdMaxCharInc !== undefined) view.setInt16(10, Number(data.fwdMaxCharInc), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ptlCaret !== undefined) view.setBigUint64(16, data.ptlCaret === null ? 0n : BigInt(util.toPointer(data.ptlCaret)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FONTSIM (size: 16)
 */
export interface FONTSIM {
  /** i32 */
  dpBold: number;
  /** i32 */
  dpItalic: number;
  /** i32 */
  dpBoldItalic: number;
}

export const sizeofFONTSIM = 16;

export function allocFONTSIM(data?: Partial<FONTSIM>): Uint8Array {
  const buf = new Uint8Array(sizeofFONTSIM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dpBold !== undefined) view.setInt32(0, Number(data.dpBold), true);
  // 0x04: i32
  if (data?.dpItalic !== undefined) view.setInt32(4, Number(data.dpItalic), true);
  // 0x08: i32
  if (data?.dpBoldItalic !== undefined) view.setInt32(8, Number(data.dpBoldItalic), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.IFIEXTRA (size: 32)
 */
export interface IFIEXTRA {
  /** u32 */
  ulIdentifier: number;
  /** i32 */
  dpFontSig: number;
  /** u32 */
  cig: number;
  /** i32 */
  dpDesignVector: number;
  /** i32 */
  dpAxesInfoW: number;
  /** array */
  aulReserved: Deno.PointerValue | null;
}

export const sizeofIFIEXTRA = 32;

export function allocIFIEXTRA(data?: Partial<IFIEXTRA>): Uint8Array {
  const buf = new Uint8Array(sizeofIFIEXTRA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulIdentifier !== undefined) view.setUint32(0, Number(data.ulIdentifier), true);
  // 0x04: i32
  if (data?.dpFontSig !== undefined) view.setInt32(4, Number(data.dpFontSig), true);
  // 0x08: u32
  if (data?.cig !== undefined) view.setUint32(8, Number(data.cig), true);
  // 0x0c: i32
  if (data?.dpDesignVector !== undefined) view.setInt32(12, Number(data.dpDesignVector), true);
  // 0x10: i32
  if (data?.dpAxesInfoW !== undefined) view.setInt32(16, Number(data.dpAxesInfoW), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.aulReserved !== undefined) view.setBigUint64(24, data.aulReserved === null ? 0n : BigInt(util.toPointer(data.aulReserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DRVFN (size: 16)
 */
export interface DRVFN {
  /** u32 */
  iFunc: number;
  /** Windows.Win32.Devices.Display.PFN */
  pfn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRVFN = 16;

export function allocDRVFN(data?: Partial<DRVFN>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVFN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iFunc !== undefined) view.setUint32(0, Number(data.iFunc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfn !== undefined) view.setBigUint64(8, data.pfn === null ? 0n : BigInt(util.toPointer(data.pfn)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DRVENABLEDATA (size: 16)
 */
export interface DRVENABLEDATA {
  /** u32 */
  iDriverVersion: number;
  /** u32 */
  c: number;
  /** ptr */
  pdrvfn: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDRVENABLEDATA = 16;

export function allocDRVENABLEDATA(data?: Partial<DRVENABLEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRVENABLEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iDriverVersion !== undefined) view.setUint32(0, Number(data.iDriverVersion), true);
  // 0x04: u32
  if (data?.c !== undefined) view.setUint32(4, Number(data.c), true);
  // 0x08: pointer
  if (data?.pdrvfn !== undefined) view.setBigUint64(8, data.pdrvfn === null ? 0n : BigInt(util.toPointer(data.pdrvfn)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTW (size: 40)
 */
export interface LOGFONTW {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue | null;
}

export const sizeofLOGFONTW = 40;

export function allocLOGFONTW(data?: Partial<LOGFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : BigInt(util.toPointer(data.lfFaceName)), true);
  return buf;
}

export type HPALETTE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Display.DEVINFO (size: 64)
 */
export interface DEVINFO {
  /** u32 */
  flGraphicsCaps: number;
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  lfDefaultFont: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  lfAnsiVarFont: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  lfAnsiFixFont: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cFonts: number;
  /** u32 */
  iDitherFormat: number;
  /** u16 */
  cxDither: number;
  /** u16 */
  cyDither: number;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hpalDefault: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  flGraphicsCaps2: number;
}

export const sizeofDEVINFO = 64;

export function allocDEVINFO(data?: Partial<DEVINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flGraphicsCaps !== undefined) view.setUint32(0, Number(data.flGraphicsCaps), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lfDefaultFont !== undefined) view.setBigUint64(8, data.lfDefaultFont === null ? 0n : BigInt(util.toPointer(data.lfDefaultFont)), true);
  // 0x10: pointer
  if (data?.lfAnsiVarFont !== undefined) view.setBigUint64(16, data.lfAnsiVarFont === null ? 0n : BigInt(util.toPointer(data.lfAnsiVarFont)), true);
  // 0x18: pointer
  if (data?.lfAnsiFixFont !== undefined) view.setBigUint64(24, data.lfAnsiFixFont === null ? 0n : BigInt(util.toPointer(data.lfAnsiFixFont)), true);
  // 0x20: u32
  if (data?.cFonts !== undefined) view.setUint32(32, Number(data.cFonts), true);
  // 0x24: u32
  if (data?.iDitherFormat !== undefined) view.setUint32(36, Number(data.iDitherFormat), true);
  // 0x28: u16
  if (data?.cxDither !== undefined) view.setUint16(40, Number(data.cxDither), true);
  // 0x2a: u16
  if (data?.cyDither !== undefined) view.setUint16(42, Number(data.cyDither), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hpalDefault !== undefined) view.setBigUint64(48, data.hpalDefault === null ? 0n : BigInt(util.toPointer(data.hpalDefault)), true);
  // 0x38: u32
  if (data?.flGraphicsCaps2 !== undefined) view.setUint32(56, Number(data.flGraphicsCaps2), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.CIECHROMA (size: 16)
 */
export interface CIECHROMA {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** i32 */
  Y: number;
}

export const sizeofCIECHROMA = 16;

export function allocCIECHROMA(data?: Partial<CIECHROMA>): Uint8Array {
  const buf = new Uint8Array(sizeofCIECHROMA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: i32
  if (data?.Y !== undefined) view.setInt32(8, Number(data.Y), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORINFO (size: 96)
 */
export interface COLORINFO {
  /** Windows.Win32.Devices.Display.CIECHROMA */
  Red: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.CIECHROMA */
  Green: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.CIECHROMA */
  Blue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.CIECHROMA */
  Cyan: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.CIECHROMA */
  Magenta: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.CIECHROMA */
  Yellow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.CIECHROMA */
  AlignmentWhite: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  RedGamma: number;
  /** i32 */
  GreenGamma: number;
  /** i32 */
  BlueGamma: number;
  /** i32 */
  MagentaInCyanDye: number;
  /** i32 */
  YellowInCyanDye: number;
  /** i32 */
  CyanInMagentaDye: number;
  /** i32 */
  YellowInMagentaDye: number;
  /** i32 */
  CyanInYellowDye: number;
  /** i32 */
  MagentaInYellowDye: number;
}

export const sizeofCOLORINFO = 96;

export function allocCOLORINFO(data?: Partial<COLORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Red !== undefined) view.setBigUint64(0, data.Red === null ? 0n : BigInt(util.toPointer(data.Red)), true);
  // 0x08: pointer
  if (data?.Green !== undefined) view.setBigUint64(8, data.Green === null ? 0n : BigInt(util.toPointer(data.Green)), true);
  // 0x10: pointer
  if (data?.Blue !== undefined) view.setBigUint64(16, data.Blue === null ? 0n : BigInt(util.toPointer(data.Blue)), true);
  // 0x18: pointer
  if (data?.Cyan !== undefined) view.setBigUint64(24, data.Cyan === null ? 0n : BigInt(util.toPointer(data.Cyan)), true);
  // 0x20: pointer
  if (data?.Magenta !== undefined) view.setBigUint64(32, data.Magenta === null ? 0n : BigInt(util.toPointer(data.Magenta)), true);
  // 0x28: pointer
  if (data?.Yellow !== undefined) view.setBigUint64(40, data.Yellow === null ? 0n : BigInt(util.toPointer(data.Yellow)), true);
  // 0x30: pointer
  if (data?.AlignmentWhite !== undefined) view.setBigUint64(48, data.AlignmentWhite === null ? 0n : BigInt(util.toPointer(data.AlignmentWhite)), true);
  // 0x38: i32
  if (data?.RedGamma !== undefined) view.setInt32(56, Number(data.RedGamma), true);
  // 0x3c: i32
  if (data?.GreenGamma !== undefined) view.setInt32(60, Number(data.GreenGamma), true);
  // 0x40: i32
  if (data?.BlueGamma !== undefined) view.setInt32(64, Number(data.BlueGamma), true);
  // 0x44: i32
  if (data?.MagentaInCyanDye !== undefined) view.setInt32(68, Number(data.MagentaInCyanDye), true);
  // 0x48: i32
  if (data?.YellowInCyanDye !== undefined) view.setInt32(72, Number(data.YellowInCyanDye), true);
  // 0x4c: i32
  if (data?.CyanInMagentaDye !== undefined) view.setInt32(76, Number(data.CyanInMagentaDye), true);
  // 0x50: i32
  if (data?.YellowInMagentaDye !== undefined) view.setInt32(80, Number(data.YellowInMagentaDye), true);
  // 0x54: i32
  if (data?.CyanInYellowDye !== undefined) view.setInt32(84, Number(data.CyanInYellowDye), true);
  // 0x58: i32
  if (data?.MagentaInYellowDye !== undefined) view.setInt32(88, Number(data.MagentaInYellowDye), true);
  // 0x5c: pad4
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Devices.Display.CDDDXGK_REDIRBITMAPPRESENTINFO (size: 40)
 */
export interface CDDDXGK_REDIRBITMAPPRESENTINFO {
  /** u32 */
  NumDirtyRects: number;
  /** ptr */
  DirtyRect: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumContexts: number;
  /** array */
  hContext: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  bDoNotSynchronizeWithDxContent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCDDDXGK_REDIRBITMAPPRESENTINFO = 40;

export function allocCDDDXGK_REDIRBITMAPPRESENTINFO(data?: Partial<CDDDXGK_REDIRBITMAPPRESENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCDDDXGK_REDIRBITMAPPRESENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDirtyRects !== undefined) view.setUint32(0, Number(data.NumDirtyRects), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DirtyRect !== undefined) view.setBigUint64(8, data.DirtyRect === null ? 0n : BigInt(util.toPointer(data.DirtyRect)), true);
  // 0x10: u32
  if (data?.NumContexts !== undefined) view.setUint32(16, Number(data.NumContexts), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hContext !== undefined) view.setBigUint64(24, data.hContext === null ? 0n : BigInt(util.toPointer(data.hContext)), true);
  // 0x20: pointer
  if (data?.bDoNotSynchronizeWithDxContent !== undefined) view.setBigUint64(32, data.bDoNotSynchronizeWithDxContent === null ? 0n : BigInt(util.toPointer(data.bDoNotSynchronizeWithDxContent)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GDIINFO (size: 216)
 */
export interface GDIINFO {
  /** u32 */
  ulVersion: number;
  /** u32 */
  ulTechnology: number;
  /** u32 */
  ulHorzSize: number;
  /** u32 */
  ulVertSize: number;
  /** u32 */
  ulHorzRes: number;
  /** u32 */
  ulVertRes: number;
  /** u32 */
  cBitsPixel: number;
  /** u32 */
  cPlanes: number;
  /** u32 */
  ulNumColors: number;
  /** u32 */
  flRaster: number;
  /** u32 */
  ulLogPixelsX: number;
  /** u32 */
  ulLogPixelsY: number;
  /** u32 */
  flTextCaps: number;
  /** u32 */
  ulDACRed: number;
  /** u32 */
  ulDACGreen: number;
  /** u32 */
  ulDACBlue: number;
  /** u32 */
  ulAspectX: number;
  /** u32 */
  ulAspectY: number;
  /** u32 */
  ulAspectXY: number;
  /** i32 */
  xStyleStep: number;
  /** i32 */
  yStyleStep: number;
  /** i32 */
  denStyleStep: number;
  /** Windows.Win32.Foundation.POINTL */
  ptlPhysOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  szlPhysSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulNumPalReg: number;
  /** Windows.Win32.Devices.Display.COLORINFO */
  ciDevice: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulDevicePelsDPI: number;
  /** u32 */
  ulPrimaryOrder: number;
  /** u32 */
  ulHTPatternSize: number;
  /** u32 */
  ulHTOutputFormat: number;
  /** u32 */
  flHTFlags: number;
  /** u32 */
  ulVRefresh: number;
  /** u32 */
  ulBltAlignment: number;
  /** u32 */
  ulPanningHorzRes: number;
  /** u32 */
  ulPanningVertRes: number;
  /** u32 */
  xPanningAlignment: number;
  /** u32 */
  yPanningAlignment: number;
  /** u32 */
  cxHTPat: number;
  /** u32 */
  cyHTPat: number;
  /** ptr */
  pHTPatA: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHTPatB: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHTPatC: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flShadeBlend: number;
  /** u32 */
  ulPhysicalPixelCharacteristics: number;
  /** u32 */
  ulPhysicalPixelGamma: number;
}

export const sizeofGDIINFO = 216;

export function allocGDIINFO(data?: Partial<GDIINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGDIINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.ulTechnology !== undefined) view.setUint32(4, Number(data.ulTechnology), true);
  // 0x08: u32
  if (data?.ulHorzSize !== undefined) view.setUint32(8, Number(data.ulHorzSize), true);
  // 0x0c: u32
  if (data?.ulVertSize !== undefined) view.setUint32(12, Number(data.ulVertSize), true);
  // 0x10: u32
  if (data?.ulHorzRes !== undefined) view.setUint32(16, Number(data.ulHorzRes), true);
  // 0x14: u32
  if (data?.ulVertRes !== undefined) view.setUint32(20, Number(data.ulVertRes), true);
  // 0x18: u32
  if (data?.cBitsPixel !== undefined) view.setUint32(24, Number(data.cBitsPixel), true);
  // 0x1c: u32
  if (data?.cPlanes !== undefined) view.setUint32(28, Number(data.cPlanes), true);
  // 0x20: u32
  if (data?.ulNumColors !== undefined) view.setUint32(32, Number(data.ulNumColors), true);
  // 0x24: u32
  if (data?.flRaster !== undefined) view.setUint32(36, Number(data.flRaster), true);
  // 0x28: u32
  if (data?.ulLogPixelsX !== undefined) view.setUint32(40, Number(data.ulLogPixelsX), true);
  // 0x2c: u32
  if (data?.ulLogPixelsY !== undefined) view.setUint32(44, Number(data.ulLogPixelsY), true);
  // 0x30: u32
  if (data?.flTextCaps !== undefined) view.setUint32(48, Number(data.flTextCaps), true);
  // 0x34: u32
  if (data?.ulDACRed !== undefined) view.setUint32(52, Number(data.ulDACRed), true);
  // 0x38: u32
  if (data?.ulDACGreen !== undefined) view.setUint32(56, Number(data.ulDACGreen), true);
  // 0x3c: u32
  if (data?.ulDACBlue !== undefined) view.setUint32(60, Number(data.ulDACBlue), true);
  // 0x40: u32
  if (data?.ulAspectX !== undefined) view.setUint32(64, Number(data.ulAspectX), true);
  // 0x44: u32
  if (data?.ulAspectY !== undefined) view.setUint32(68, Number(data.ulAspectY), true);
  // 0x48: u32
  if (data?.ulAspectXY !== undefined) view.setUint32(72, Number(data.ulAspectXY), true);
  // 0x4c: i32
  if (data?.xStyleStep !== undefined) view.setInt32(76, Number(data.xStyleStep), true);
  // 0x50: i32
  if (data?.yStyleStep !== undefined) view.setInt32(80, Number(data.yStyleStep), true);
  // 0x54: i32
  if (data?.denStyleStep !== undefined) view.setInt32(84, Number(data.denStyleStep), true);
  // 0x58: pointer
  if (data?.ptlPhysOffset !== undefined) view.setBigUint64(88, data.ptlPhysOffset === null ? 0n : BigInt(util.toPointer(data.ptlPhysOffset)), true);
  // 0x60: pointer
  if (data?.szlPhysSize !== undefined) view.setBigUint64(96, data.szlPhysSize === null ? 0n : BigInt(util.toPointer(data.szlPhysSize)), true);
  // 0x68: u32
  if (data?.ulNumPalReg !== undefined) view.setUint32(104, Number(data.ulNumPalReg), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.ciDevice !== undefined) view.setBigUint64(112, data.ciDevice === null ? 0n : BigInt(util.toPointer(data.ciDevice)), true);
  // 0x78: u32
  if (data?.ulDevicePelsDPI !== undefined) view.setUint32(120, Number(data.ulDevicePelsDPI), true);
  // 0x7c: u32
  if (data?.ulPrimaryOrder !== undefined) view.setUint32(124, Number(data.ulPrimaryOrder), true);
  // 0x80: u32
  if (data?.ulHTPatternSize !== undefined) view.setUint32(128, Number(data.ulHTPatternSize), true);
  // 0x84: u32
  if (data?.ulHTOutputFormat !== undefined) view.setUint32(132, Number(data.ulHTOutputFormat), true);
  // 0x88: u32
  if (data?.flHTFlags !== undefined) view.setUint32(136, Number(data.flHTFlags), true);
  // 0x8c: u32
  if (data?.ulVRefresh !== undefined) view.setUint32(140, Number(data.ulVRefresh), true);
  // 0x90: u32
  if (data?.ulBltAlignment !== undefined) view.setUint32(144, Number(data.ulBltAlignment), true);
  // 0x94: u32
  if (data?.ulPanningHorzRes !== undefined) view.setUint32(148, Number(data.ulPanningHorzRes), true);
  // 0x98: u32
  if (data?.ulPanningVertRes !== undefined) view.setUint32(152, Number(data.ulPanningVertRes), true);
  // 0x9c: u32
  if (data?.xPanningAlignment !== undefined) view.setUint32(156, Number(data.xPanningAlignment), true);
  // 0xa0: u32
  if (data?.yPanningAlignment !== undefined) view.setUint32(160, Number(data.yPanningAlignment), true);
  // 0xa4: u32
  if (data?.cxHTPat !== undefined) view.setUint32(164, Number(data.cxHTPat), true);
  // 0xa8: u32
  if (data?.cyHTPat !== undefined) view.setUint32(168, Number(data.cyHTPat), true);
  // 0xac: pad4
  // 0xb0: pointer
  if (data?.pHTPatA !== undefined) view.setBigUint64(176, data.pHTPatA === null ? 0n : BigInt(util.toPointer(data.pHTPatA)), true);
  // 0xb8: pointer
  if (data?.pHTPatB !== undefined) view.setBigUint64(184, data.pHTPatB === null ? 0n : BigInt(util.toPointer(data.pHTPatB)), true);
  // 0xc0: pointer
  if (data?.pHTPatC !== undefined) view.setBigUint64(192, data.pHTPatC === null ? 0n : BigInt(util.toPointer(data.pHTPatC)), true);
  // 0xc8: u32
  if (data?.flShadeBlend !== undefined) view.setUint32(200, Number(data.flShadeBlend), true);
  // 0xcc: u32
  if (data?.ulPhysicalPixelCharacteristics !== undefined) view.setUint32(204, Number(data.ulPhysicalPixelCharacteristics), true);
  // 0xd0: u32
  if (data?.ulPhysicalPixelGamma !== undefined) view.setUint32(208, Number(data.ulPhysicalPixelGamma), true);
  // 0xd4: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BRUSHOBJ (size: 24)
 */
export interface BRUSHOBJ {
  /** u32 */
  iSolidColor: number;
  /** ptr */
  pvRbrush: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  flColorType: number;
}

export const sizeofBRUSHOBJ = 24;

export function allocBRUSHOBJ(data?: Partial<BRUSHOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofBRUSHOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iSolidColor !== undefined) view.setUint32(0, Number(data.iSolidColor), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvRbrush !== undefined) view.setBigUint64(8, data.pvRbrush === null ? 0n : BigInt(util.toPointer(data.pvRbrush)), true);
  // 0x10: u32
  if (data?.flColorType !== undefined) view.setUint32(16, Number(data.flColorType), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.CLIPOBJ (size: 24)
 */
export interface CLIPOBJ {
  /** u32 */
  iUniq: number;
  /** Windows.Win32.Foundation.RECTL */
  rclBounds: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  iDComplexity: number;
  /** u8 */
  iFComplexity: number;
  /** u8 */
  iMode: number;
  /** u8 */
  fjOptions: number;
}

export const sizeofCLIPOBJ = 24;

export function allocCLIPOBJ(data?: Partial<CLIPOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIPOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iUniq !== undefined) view.setUint32(0, Number(data.iUniq), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rclBounds !== undefined) view.setBigUint64(8, data.rclBounds === null ? 0n : BigInt(util.toPointer(data.rclBounds)), true);
  // 0x10: u8
  if (data?.iDComplexity !== undefined) view.setUint8(16, Number(data.iDComplexity));
  // 0x11: u8
  if (data?.iFComplexity !== undefined) view.setUint8(17, Number(data.iFComplexity));
  // 0x12: u8
  if (data?.iMode !== undefined) view.setUint8(18, Number(data.iMode));
  // 0x13: u8
  if (data?.fjOptions !== undefined) view.setUint8(19, Number(data.fjOptions));
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DRIVEROBJ (size: 32)
 */
export interface DRIVEROBJ {
  /** ptr */
  pvObj: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Display.FREEOBJPROC */
  pFreeProc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.HDEV */
  hdev: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DHPDEV */
  dhpdev: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDRIVEROBJ = 32;

export function allocDRIVEROBJ(data?: Partial<DRIVEROBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVEROBJ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvObj !== undefined) view.setBigUint64(0, data.pvObj === null ? 0n : BigInt(util.toPointer(data.pvObj)), true);
  // 0x08: pointer
  if (data?.pFreeProc !== undefined) view.setBigUint64(8, data.pFreeProc === null ? 0n : BigInt(util.toPointer(data.pFreeProc)), true);
  // 0x10: pointer
  if (data?.hdev !== undefined) view.setBigUint64(16, data.hdev === null ? 0n : BigInt(util.toPointer(data.hdev)), true);
  // 0x18: pointer
  if (data?.dhpdev !== undefined) view.setBigUint64(24, data.dhpdev === null ? 0n : BigInt(util.toPointer(data.dhpdev)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FONTOBJ (size: 64)
 */
export interface FONTOBJ {
  /** u32 */
  iUniq: number;
  /** u32 */
  iFace: number;
  /** u32 */
  cxMax: number;
  /** u32 */
  flFontType: number;
  /** usize */
  iTTUniq: Deno.PointerValue;
  /** usize */
  iFile: Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  sizLogResPpi: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulStyleSize: number;
  /** ptr */
  pvConsumer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pvProducer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFONTOBJ = 64;

export function allocFONTOBJ(data?: Partial<FONTOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofFONTOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iUniq !== undefined) view.setUint32(0, Number(data.iUniq), true);
  // 0x04: u32
  if (data?.iFace !== undefined) view.setUint32(4, Number(data.iFace), true);
  // 0x08: u32
  if (data?.cxMax !== undefined) view.setUint32(8, Number(data.cxMax), true);
  // 0x0c: u32
  if (data?.flFontType !== undefined) view.setUint32(12, Number(data.flFontType), true);
  // 0x10: usize
  if (data?.iTTUniq !== undefined) view.setBigUint64(16, BigInt(data.iTTUniq), true);
  // 0x18: usize
  if (data?.iFile !== undefined) view.setBigUint64(24, BigInt(data.iFile), true);
  // 0x20: pointer
  if (data?.sizLogResPpi !== undefined) view.setBigUint64(32, data.sizLogResPpi === null ? 0n : BigInt(util.toPointer(data.sizLogResPpi)), true);
  // 0x28: u32
  if (data?.ulStyleSize !== undefined) view.setUint32(40, Number(data.ulStyleSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pvConsumer !== undefined) view.setBigUint64(48, data.pvConsumer === null ? 0n : BigInt(util.toPointer(data.pvConsumer)), true);
  // 0x38: pointer
  if (data?.pvProducer !== undefined) view.setBigUint64(56, data.pvProducer === null ? 0n : BigInt(util.toPointer(data.pvProducer)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.BLENDFUNCTION (size: 8)
 */
export interface BLENDFUNCTION {
  /** u8 */
  BlendOp: number;
  /** u8 */
  BlendFlags: number;
  /** u8 */
  SourceConstantAlpha: number;
  /** u8 */
  AlphaFormat: number;
}

export const sizeofBLENDFUNCTION = 8;

export function allocBLENDFUNCTION(data?: Partial<BLENDFUNCTION>): Uint8Array {
  const buf = new Uint8Array(sizeofBLENDFUNCTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BlendOp !== undefined) view.setUint8(0, Number(data.BlendOp));
  // 0x01: u8
  if (data?.BlendFlags !== undefined) view.setUint8(1, Number(data.BlendFlags));
  // 0x02: u8
  if (data?.SourceConstantAlpha !== undefined) view.setUint8(2, Number(data.SourceConstantAlpha));
  // 0x03: u8
  if (data?.AlphaFormat !== undefined) view.setUint8(3, Number(data.AlphaFormat));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BLENDOBJ (size: 8)
 */
export interface BLENDOBJ {
  /** Windows.Win32.Graphics.Gdi.BLENDFUNCTION */
  BlendFunction: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBLENDOBJ = 8;

export function allocBLENDOBJ(data?: Partial<BLENDOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofBLENDOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BlendFunction !== undefined) view.setBigUint64(0, data.BlendFunction === null ? 0n : BigInt(util.toPointer(data.BlendFunction)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PALOBJ (size: 8)
 */
export interface PALOBJ {
  /** u32 */
  ulReserved: number;
}

export const sizeofPALOBJ = 8;

export function allocPALOBJ(data?: Partial<PALOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofPALOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReserved !== undefined) view.setUint32(0, Number(data.ulReserved), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PATHOBJ (size: 8)
 */
export interface PATHOBJ {
  /** u32 */
  fl: number;
  /** u32 */
  cCurves: number;
}

export const sizeofPATHOBJ = 8;

export function allocPATHOBJ(data?: Partial<PATHOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofPATHOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fl !== undefined) view.setUint32(0, Number(data.fl), true);
  // 0x04: u32
  if (data?.cCurves !== undefined) view.setUint32(4, Number(data.cCurves), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.SURFOBJ (size: 80)
 */
export interface SURFOBJ {
  /** Windows.Win32.Devices.Display.DHSURF */
  dhsurf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.HSURF */
  hsurf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.DHPDEV */
  dhpdev: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.HDEV */
  hdev: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  sizlBitmap: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cjBits: number;
  /** ptr */
  pvBits: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pvScan0: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lDelta: number;
  /** u32 */
  iUniq: number;
  /** u32 */
  iBitmapFormat: number;
  /** u16 */
  iType: number;
  /** u16 */
  fjBitmap: number;
}

export const sizeofSURFOBJ = 80;

export function allocSURFOBJ(data?: Partial<SURFOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofSURFOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dhsurf !== undefined) view.setBigUint64(0, data.dhsurf === null ? 0n : BigInt(util.toPointer(data.dhsurf)), true);
  // 0x08: pointer
  if (data?.hsurf !== undefined) view.setBigUint64(8, data.hsurf === null ? 0n : BigInt(util.toPointer(data.hsurf)), true);
  // 0x10: pointer
  if (data?.dhpdev !== undefined) view.setBigUint64(16, data.dhpdev === null ? 0n : BigInt(util.toPointer(data.dhpdev)), true);
  // 0x18: pointer
  if (data?.hdev !== undefined) view.setBigUint64(24, data.hdev === null ? 0n : BigInt(util.toPointer(data.hdev)), true);
  // 0x20: pointer
  if (data?.sizlBitmap !== undefined) view.setBigUint64(32, data.sizlBitmap === null ? 0n : BigInt(util.toPointer(data.sizlBitmap)), true);
  // 0x28: u32
  if (data?.cjBits !== undefined) view.setUint32(40, Number(data.cjBits), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pvBits !== undefined) view.setBigUint64(48, data.pvBits === null ? 0n : BigInt(util.toPointer(data.pvBits)), true);
  // 0x38: pointer
  if (data?.pvScan0 !== undefined) view.setBigUint64(56, data.pvScan0 === null ? 0n : BigInt(util.toPointer(data.pvScan0)), true);
  // 0x40: i32
  if (data?.lDelta !== undefined) view.setInt32(64, Number(data.lDelta), true);
  // 0x44: u32
  if (data?.iUniq !== undefined) view.setUint32(68, Number(data.iUniq), true);
  // 0x48: u32
  if (data?.iBitmapFormat !== undefined) view.setUint32(72, Number(data.iBitmapFormat), true);
  // 0x4c: u16
  if (data?.iType !== undefined) view.setUint16(76, Number(data.iType), true);
  // 0x4e: u16
  if (data?.fjBitmap !== undefined) view.setUint16(78, Number(data.fjBitmap), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.WNDOBJ (size: 32)
 */
export interface WNDOBJ {
  /** Windows.Win32.Devices.Display.CLIPOBJ */
  coClient: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvConsumer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.RECTL */
  rclClient: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  psoOwner: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWNDOBJ = 32;

export function allocWNDOBJ(data?: Partial<WNDOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofWNDOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.coClient !== undefined) view.setBigUint64(0, data.coClient === null ? 0n : BigInt(util.toPointer(data.coClient)), true);
  // 0x08: pointer
  if (data?.pvConsumer !== undefined) view.setBigUint64(8, data.pvConsumer === null ? 0n : BigInt(util.toPointer(data.pvConsumer)), true);
  // 0x10: pointer
  if (data?.rclClient !== undefined) view.setBigUint64(16, data.rclClient === null ? 0n : BigInt(util.toPointer(data.rclClient)), true);
  // 0x18: pointer
  if (data?.psoOwner !== undefined) view.setBigUint64(24, data.psoOwner === null ? 0n : BigInt(util.toPointer(data.psoOwner)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.XFORMOBJ (size: 8)
 */
export interface XFORMOBJ {
  /** u32 */
  ulReserved: number;
}

export const sizeofXFORMOBJ = 8;

export function allocXFORMOBJ(data?: Partial<XFORMOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofXFORMOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulReserved !== undefined) view.setUint32(0, Number(data.ulReserved), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.XLATEOBJ (size: 24)
 */
export interface XLATEOBJ {
  /** u32 */
  iUniq: number;
  /** u32 */
  flXlate: number;
  /** u16 */
  iSrcType: number;
  /** u16 */
  iDstType: number;
  /** u32 */
  cEntries: number;
  /** ptr */
  pulXlate: Deno.PointerValue | Uint8Array | null;
}

export const sizeofXLATEOBJ = 24;

export function allocXLATEOBJ(data?: Partial<XLATEOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofXLATEOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iUniq !== undefined) view.setUint32(0, Number(data.iUniq), true);
  // 0x04: u32
  if (data?.flXlate !== undefined) view.setUint32(4, Number(data.flXlate), true);
  // 0x08: u16
  if (data?.iSrcType !== undefined) view.setUint16(8, Number(data.iSrcType), true);
  // 0x0a: u16
  if (data?.iDstType !== undefined) view.setUint16(10, Number(data.iDstType), true);
  // 0x0c: u32
  if (data?.cEntries !== undefined) view.setUint32(12, Number(data.cEntries), true);
  // 0x10: pointer
  if (data?.pulXlate !== undefined) view.setBigUint64(16, data.pulXlate === null ? 0n : BigInt(util.toPointer(data.pulXlate)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.ENUMRECTS (size: 16)
 */
export interface ENUMRECTS {
  /** u32 */
  c: number;
  /** array */
  arcl: Deno.PointerValue | null;
}

export const sizeofENUMRECTS = 16;

export function allocENUMRECTS(data?: Partial<ENUMRECTS>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMRECTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.c !== undefined) view.setUint32(0, Number(data.c), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.arcl !== undefined) view.setBigUint64(8, data.arcl === null ? 0n : BigInt(util.toPointer(data.arcl)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GLYPHBITS (size: 24)
 */
export interface GLYPHBITS {
  /** Windows.Win32.Foundation.POINTL */
  ptlOrigin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  sizlBitmap: Uint8Array | Deno.PointerValue | null;
  /** array */
  aj: Deno.PointerValue | null;
}

export const sizeofGLYPHBITS = 24;

export function allocGLYPHBITS(data?: Partial<GLYPHBITS>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHBITS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ptlOrigin !== undefined) view.setBigUint64(0, data.ptlOrigin === null ? 0n : BigInt(util.toPointer(data.ptlOrigin)), true);
  // 0x08: pointer
  if (data?.sizlBitmap !== undefined) view.setBigUint64(8, data.sizlBitmap === null ? 0n : BigInt(util.toPointer(data.sizlBitmap)), true);
  // 0x10: pointer
  if (data?.aj !== undefined) view.setBigUint64(16, data.aj === null ? 0n : BigInt(util.toPointer(data.aj)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GLYPHDEF (size: 16)
 */
export interface GLYPHDEF {
  /** ptr */
  pgb: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGLYPHDEF = 16;

export function allocGLYPHDEF(data?: Partial<GLYPHDEF>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHDEF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pgb !== undefined) view.setBigUint64(0, data.pgb === null ? 0n : BigInt(util.toPointer(data.pgb)), true);
  // 0x08: pointer
  if (data?.ppo !== undefined) view.setBigUint64(8, data.ppo === null ? 0n : BigInt(util.toPointer(data.ppo)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GLYPHPOS (size: 24)
 */
export interface GLYPHPOS {
  /** u32 */
  hg: number;
  /** ptr */
  pgdf: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.POINTL */
  ptl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGLYPHPOS = 24;

export function allocGLYPHPOS(data?: Partial<GLYPHPOS>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHPOS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hg !== undefined) view.setUint32(0, Number(data.hg), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgdf !== undefined) view.setBigUint64(8, data.pgdf === null ? 0n : BigInt(util.toPointer(data.pgdf)), true);
  // 0x10: pointer
  if (data?.ptl !== undefined) view.setBigUint64(16, data.ptl === null ? 0n : BigInt(util.toPointer(data.ptl)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GLYPHDATA (size: 48)
 */
export interface GLYPHDATA {
  /** Windows.Win32.Devices.Display.GLYPHDEF */
  gdf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  hg: number;
  /** i32 */
  fxD: number;
  /** i32 */
  fxA: number;
  /** i32 */
  fxAB: number;
  /** i32 */
  fxInkTop: number;
  /** i32 */
  fxInkBottom: number;
  /** Windows.Win32.Foundation.RECTL */
  rclInk: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.POINTQF */
  ptqD: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGLYPHDATA = 48;

export function allocGLYPHDATA(data?: Partial<GLYPHDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gdf !== undefined) view.setBigUint64(0, data.gdf === null ? 0n : BigInt(util.toPointer(data.gdf)), true);
  // 0x08: u32
  if (data?.hg !== undefined) view.setUint32(8, Number(data.hg), true);
  // 0x0c: i32
  if (data?.fxD !== undefined) view.setInt32(12, Number(data.fxD), true);
  // 0x10: i32
  if (data?.fxA !== undefined) view.setInt32(16, Number(data.fxA), true);
  // 0x14: i32
  if (data?.fxAB !== undefined) view.setInt32(20, Number(data.fxAB), true);
  // 0x18: i32
  if (data?.fxInkTop !== undefined) view.setInt32(24, Number(data.fxInkTop), true);
  // 0x1c: i32
  if (data?.fxInkBottom !== undefined) view.setInt32(28, Number(data.fxInkBottom), true);
  // 0x20: pointer
  if (data?.rclInk !== undefined) view.setBigUint64(32, data.rclInk === null ? 0n : BigInt(util.toPointer(data.rclInk)), true);
  // 0x28: pointer
  if (data?.ptqD !== undefined) view.setBigUint64(40, data.ptqD === null ? 0n : BigInt(util.toPointer(data.ptqD)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.STROBJ (size: 40)
 */
export interface STROBJ {
  /** u32 */
  cGlyphs: number;
  /** u32 */
  flAccel: number;
  /** u32 */
  ulCharInc: number;
  /** Windows.Win32.Foundation.RECTL */
  rclBkGround: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pgp: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszOrg: string | null;
}

export const sizeofSTROBJ = 40;

export function allocSTROBJ(data?: Partial<STROBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofSTROBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cGlyphs !== undefined) view.setUint32(0, Number(data.cGlyphs), true);
  // 0x04: u32
  if (data?.flAccel !== undefined) view.setUint32(4, Number(data.flAccel), true);
  // 0x08: u32
  if (data?.ulCharInc !== undefined) view.setUint32(8, Number(data.ulCharInc), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rclBkGround !== undefined) view.setBigUint64(16, data.rclBkGround === null ? 0n : BigInt(util.toPointer(data.rclBkGround)), true);
  // 0x18: pointer
  if (data?.pgp !== undefined) view.setBigUint64(24, data.pgp === null ? 0n : BigInt(util.toPointer(data.pgp)), true);
  // 0x20: buffer
  if (data?.pwszOrg !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszOrg);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FONTINFO (size: 32)
 */
export interface FONTINFO {
  /** u32 */
  cjThis: number;
  /** u32 */
  flCaps: number;
  /** u32 */
  cGlyphsSupported: number;
  /** u32 */
  cjMaxGlyph1: number;
  /** u32 */
  cjMaxGlyph4: number;
  /** u32 */
  cjMaxGlyph8: number;
  /** u32 */
  cjMaxGlyph32: number;
}

export const sizeofFONTINFO = 32;

export function allocFONTINFO(data?: Partial<FONTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFONTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cjThis !== undefined) view.setUint32(0, Number(data.cjThis), true);
  // 0x04: u32
  if (data?.flCaps !== undefined) view.setUint32(4, Number(data.flCaps), true);
  // 0x08: u32
  if (data?.cGlyphsSupported !== undefined) view.setUint32(8, Number(data.cGlyphsSupported), true);
  // 0x0c: u32
  if (data?.cjMaxGlyph1 !== undefined) view.setUint32(12, Number(data.cjMaxGlyph1), true);
  // 0x10: u32
  if (data?.cjMaxGlyph4 !== undefined) view.setUint32(16, Number(data.cjMaxGlyph4), true);
  // 0x14: u32
  if (data?.cjMaxGlyph8 !== undefined) view.setUint32(20, Number(data.cjMaxGlyph8), true);
  // 0x18: u32
  if (data?.cjMaxGlyph32 !== undefined) view.setUint32(24, Number(data.cjMaxGlyph32), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PATHDATA (size: 16)
 */
export interface PATHDATA {
  /** u32 */
  flags: number;
  /** u32 */
  count: number;
  /** ptr */
  pptfx: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPATHDATA = 16;

export function allocPATHDATA(data?: Partial<PATHDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPATHDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.count !== undefined) view.setUint32(4, Number(data.count), true);
  // 0x08: pointer
  if (data?.pptfx !== undefined) view.setBigUint64(8, data.pptfx === null ? 0n : BigInt(util.toPointer(data.pptfx)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.RUN (size: 8)
 */
export interface RUN {
  /** i32 */
  iStart: number;
  /** i32 */
  iStop: number;
}

export const sizeofRUN = 8;

export function allocRUN(data?: Partial<RUN>): Uint8Array {
  const buf = new Uint8Array(sizeofRUN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iStart !== undefined) view.setInt32(0, Number(data.iStart), true);
  // 0x04: i32
  if (data?.iStop !== undefined) view.setInt32(4, Number(data.iStop), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.CLIPLINE (size: 32)
 */
export interface CLIPLINE {
  /** Windows.Win32.Devices.Display.POINTFIX */
  ptfxA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.POINTFIX */
  ptfxB: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lStyleState: number;
  /** u32 */
  c: number;
  /** array */
  arun: Deno.PointerValue | null;
}

export const sizeofCLIPLINE = 32;

export function allocCLIPLINE(data?: Partial<CLIPLINE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIPLINE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ptfxA !== undefined) view.setBigUint64(0, data.ptfxA === null ? 0n : BigInt(util.toPointer(data.ptfxA)), true);
  // 0x08: pointer
  if (data?.ptfxB !== undefined) view.setBigUint64(8, data.ptfxB === null ? 0n : BigInt(util.toPointer(data.ptfxB)), true);
  // 0x10: i32
  if (data?.lStyleState !== undefined) view.setInt32(16, Number(data.lStyleState), true);
  // 0x14: u32
  if (data?.c !== undefined) view.setUint32(20, Number(data.c), true);
  // 0x18: pointer
  if (data?.arun !== undefined) view.setBigUint64(24, data.arun === null ? 0n : BigInt(util.toPointer(data.arun)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PERBANDINFO (size: 24)
 */
export interface PERBANDINFO {
  /** Windows.Win32.Foundation.BOOL */
  bRepeatThisBand: boolean;
  /** Windows.Win32.Foundation.SIZE */
  szlBand: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulHorzRes: number;
  /** u32 */
  ulVertRes: number;
}

export const sizeofPERBANDINFO = 24;

export function allocPERBANDINFO(data?: Partial<PERBANDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPERBANDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bRepeatThisBand !== undefined) view.setInt32(0, Number(data.bRepeatThisBand), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szlBand !== undefined) view.setBigUint64(8, data.szlBand === null ? 0n : BigInt(util.toPointer(data.szlBand)), true);
  // 0x10: u32
  if (data?.ulHorzRes !== undefined) view.setUint32(16, Number(data.ulHorzRes), true);
  // 0x14: u32
  if (data?.ulVertRes !== undefined) view.setUint32(20, Number(data.ulVertRes), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GAMMARAMP (size: 24)
 */
export interface GAMMARAMP {
  /** array */
  Red: Deno.PointerValue | null;
  /** array */
  Green: Deno.PointerValue | null;
  /** array */
  Blue: Deno.PointerValue | null;
}

export const sizeofGAMMARAMP = 24;

export function allocGAMMARAMP(data?: Partial<GAMMARAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofGAMMARAMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Red !== undefined) view.setBigUint64(0, data.Red === null ? 0n : BigInt(util.toPointer(data.Red)), true);
  // 0x08: pointer
  if (data?.Green !== undefined) view.setBigUint64(8, data.Green === null ? 0n : BigInt(util.toPointer(data.Green)), true);
  // 0x10: pointer
  if (data?.Blue !== undefined) view.setBigUint64(16, data.Blue === null ? 0n : BigInt(util.toPointer(data.Blue)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DEVHTINFO (size: 24)
 */
export interface DEVHTINFO {
  /** u32 */
  HTFlags: number;
  /** u32 */
  HTPatternSize: number;
  /** u32 */
  DevPelsDPI: number;
  /** Windows.Win32.Devices.Display.COLORINFO */
  ColorInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDEVHTINFO = 24;

export function allocDEVHTINFO(data?: Partial<DEVHTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVHTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HTFlags !== undefined) view.setUint32(0, Number(data.HTFlags), true);
  // 0x04: u32
  if (data?.HTPatternSize !== undefined) view.setUint32(4, Number(data.HTPatternSize), true);
  // 0x08: u32
  if (data?.DevPelsDPI !== undefined) view.setUint32(8, Number(data.DevPelsDPI), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ColorInfo !== undefined) view.setBigUint64(16, data.ColorInfo === null ? 0n : BigInt(util.toPointer(data.ColorInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DEVHTADJDATA (size: 32)
 */
export interface DEVHTADJDATA {
  /** u32 */
  DeviceFlags: number;
  /** u32 */
  DeviceXDPI: number;
  /** u32 */
  DeviceYDPI: number;
  /** ptr */
  pDefHTInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAdjHTInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDEVHTADJDATA = 32;

export function allocDEVHTADJDATA(data?: Partial<DEVHTADJDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVHTADJDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceFlags !== undefined) view.setUint32(0, Number(data.DeviceFlags), true);
  // 0x04: u32
  if (data?.DeviceXDPI !== undefined) view.setUint32(4, Number(data.DeviceXDPI), true);
  // 0x08: u32
  if (data?.DeviceYDPI !== undefined) view.setUint32(8, Number(data.DeviceYDPI), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDefHTInfo !== undefined) view.setBigUint64(16, data.pDefHTInfo === null ? 0n : BigInt(util.toPointer(data.pDefHTInfo)), true);
  // 0x18: pointer
  if (data?.pAdjHTInfo !== undefined) view.setBigUint64(24, data.pAdjHTInfo === null ? 0n : BigInt(util.toPointer(data.pAdjHTInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.TYPE1_FONT (size: 24)
 */
export interface TYPE1_FONT {
  /** Windows.Win32.Foundation.HANDLE */
  hPFM: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hPFB: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulIdentifier: number;
}

export const sizeofTYPE1_FONT = 24;

export function allocTYPE1_FONT(data?: Partial<TYPE1_FONT>): Uint8Array {
  const buf = new Uint8Array(sizeofTYPE1_FONT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hPFM !== undefined) view.setBigUint64(0, data.hPFM === null ? 0n : BigInt(util.toPointer(data.hPFM)), true);
  // 0x08: pointer
  if (data?.hPFB !== undefined) view.setBigUint64(8, data.hPFB === null ? 0n : BigInt(util.toPointer(data.hPFB)), true);
  // 0x10: u32
  if (data?.ulIdentifier !== undefined) view.setUint32(16, Number(data.ulIdentifier), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.ENGSAFESEMAPHORE (size: 16)
 */
export interface ENGSAFESEMAPHORE {
  /** Windows.Win32.Devices.Display.HSEMAPHORE */
  hsem: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lCount: number;
}

export const sizeofENGSAFESEMAPHORE = 16;

export function allocENGSAFESEMAPHORE(data?: Partial<ENGSAFESEMAPHORE>): Uint8Array {
  const buf = new Uint8Array(sizeofENGSAFESEMAPHORE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hsem !== undefined) view.setBigUint64(0, data.hsem === null ? 0n : BigInt(util.toPointer(data.hsem)), true);
  // 0x08: i32
  if (data?.lCount !== undefined) view.setInt32(8, Number(data.lCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FLOATOBJ (size: 8)
 */
export interface FLOATOBJ {
  /** u32 */
  ul1: number;
  /** u32 */
  ul2: number;
}

export const sizeofFLOATOBJ = 8;

export function allocFLOATOBJ(data?: Partial<FLOATOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOATOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ul1 !== undefined) view.setUint32(0, Number(data.ul1), true);
  // 0x04: u32
  if (data?.ul2 !== undefined) view.setUint32(4, Number(data.ul2), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.ENG_TIME_FIELDS (size: 16)
 */
export interface ENG_TIME_FIELDS {
  /** u16 */
  usYear: number;
  /** u16 */
  usMonth: number;
  /** u16 */
  usDay: number;
  /** u16 */
  usHour: number;
  /** u16 */
  usMinute: number;
  /** u16 */
  usSecond: number;
  /** u16 */
  usMilliseconds: number;
  /** u16 */
  usWeekday: number;
}

export const sizeofENG_TIME_FIELDS = 16;

export function allocENG_TIME_FIELDS(data?: Partial<ENG_TIME_FIELDS>): Uint8Array {
  const buf = new Uint8Array(sizeofENG_TIME_FIELDS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usYear !== undefined) view.setUint16(0, Number(data.usYear), true);
  // 0x02: u16
  if (data?.usMonth !== undefined) view.setUint16(2, Number(data.usMonth), true);
  // 0x04: u16
  if (data?.usDay !== undefined) view.setUint16(4, Number(data.usDay), true);
  // 0x06: u16
  if (data?.usHour !== undefined) view.setUint16(6, Number(data.usHour), true);
  // 0x08: u16
  if (data?.usMinute !== undefined) view.setUint16(8, Number(data.usMinute), true);
  // 0x0a: u16
  if (data?.usSecond !== undefined) view.setUint16(10, Number(data.usSecond), true);
  // 0x0c: u16
  if (data?.usMilliseconds !== undefined) view.setUint16(12, Number(data.usMilliseconds), true);
  // 0x0e: u16
  if (data?.usWeekday !== undefined) view.setUint16(14, Number(data.usWeekday), true);
  return buf;
}

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Display.EMFINFO (size: 32)
 */
export interface EMFINFO {
  /** u32 */
  nSize: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvEMF: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pvCurrentRecord: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEMFINFO = 32;

export function allocEMFINFO(data?: Partial<EMFINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEMFINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSize !== undefined) view.setUint32(0, Number(data.nSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hdc !== undefined) view.setBigUint64(8, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x10: pointer
  if (data?.pvEMF !== undefined) view.setBigUint64(16, data.pvEMF === null ? 0n : BigInt(util.toPointer(data.pvEMF)), true);
  // 0x18: pointer
  if (data?.pvCurrentRecord !== undefined) view.setBigUint64(24, data.pvCurrentRecord === null ? 0n : BigInt(util.toPointer(data.pvCurrentRecord)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DRH_APIBITMAPDATA (size: 16)
 */
export interface DRH_APIBITMAPDATA {
  /** ptr */
  pso: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  b: boolean;
}

export const sizeofDRH_APIBITMAPDATA = 16;

export function allocDRH_APIBITMAPDATA(data?: Partial<DRH_APIBITMAPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRH_APIBITMAPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pso !== undefined) view.setBigUint64(0, data.pso === null ? 0n : BigInt(util.toPointer(data.pso)), true);
  // 0x08: i32
  if (data?.b !== undefined) view.setInt32(8, Number(data.b), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.INDIRECT_DISPLAY_INFO (size: 24)
 */
export interface INDIRECT_DISPLAY_INFO {
  /** Windows.Win32.Foundation.LUID */
  DisplayAdapterLuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  NumMonitors: number;
  /** u32 */
  DisplayAdapterTargetBase: number;
}

export const sizeofINDIRECT_DISPLAY_INFO = 24;

export function allocINDIRECT_DISPLAY_INFO(data?: Partial<INDIRECT_DISPLAY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINDIRECT_DISPLAY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DisplayAdapterLuid !== undefined) view.setBigUint64(0, data.DisplayAdapterLuid === null ? 0n : BigInt(util.toPointer(data.DisplayAdapterLuid)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NumMonitors !== undefined) view.setUint32(12, Number(data.NumMonitors), true);
  // 0x10: u32
  if (data?.DisplayAdapterTargetBase !== undefined) view.setUint32(16, Number(data.DisplayAdapterTargetBase), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_VDM (size: 8)
 */
export interface VIDEO_VDM {
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIDEO_VDM = 8;

export function allocVIDEO_VDM(data?: Partial<VIDEO_VDM>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_VDM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(0, data.ProcessHandle === null ? 0n : BigInt(util.toPointer(data.ProcessHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_REGISTER_VDM (size: 8)
 */
export interface VIDEO_REGISTER_VDM {
  /** u32 */
  MinimumStateSize: number;
}

export const sizeofVIDEO_REGISTER_VDM = 8;

export function allocVIDEO_REGISTER_VDM(data?: Partial<VIDEO_REGISTER_VDM>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_REGISTER_VDM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinimumStateSize !== undefined) view.setUint32(0, Number(data.MinimumStateSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_MONITOR_DESCRIPTOR (size: 16)
 */
export interface VIDEO_MONITOR_DESCRIPTOR {
  /** u32 */
  DescriptorSize: number;
  /** array */
  Descriptor: Deno.PointerValue | null;
}

export const sizeofVIDEO_MONITOR_DESCRIPTOR = 16;

export function allocVIDEO_MONITOR_DESCRIPTOR(data?: Partial<VIDEO_MONITOR_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_MONITOR_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DescriptorSize !== undefined) view.setUint32(0, Number(data.DescriptorSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Descriptor !== undefined) view.setBigUint64(8, data.Descriptor === null ? 0n : BigInt(util.toPointer(data.Descriptor)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DXGK_WIN32K_PARAM_DATA (size: 32)
 */
export interface DXGK_WIN32K_PARAM_DATA {
  /** ptr */
  PathsArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ModesArray: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumPathArrayElements: number;
  /** u32 */
  NumModeArrayElements: number;
  /** u32 */
  SDCFlags: number;
}

export const sizeofDXGK_WIN32K_PARAM_DATA = 32;

export function allocDXGK_WIN32K_PARAM_DATA(data?: Partial<DXGK_WIN32K_PARAM_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGK_WIN32K_PARAM_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PathsArray !== undefined) view.setBigUint64(0, data.PathsArray === null ? 0n : BigInt(util.toPointer(data.PathsArray)), true);
  // 0x08: pointer
  if (data?.ModesArray !== undefined) view.setBigUint64(8, data.ModesArray === null ? 0n : BigInt(util.toPointer(data.ModesArray)), true);
  // 0x10: u32
  if (data?.NumPathArrayElements !== undefined) view.setUint32(16, Number(data.NumPathArrayElements), true);
  // 0x14: u32
  if (data?.NumModeArrayElements !== undefined) view.setUint32(20, Number(data.NumModeArrayElements), true);
  // 0x18: u32
  if (data?.SDCFlags !== undefined) view.setUint32(24, Number(data.SDCFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_WIN32K_CALLBACKS_PARAMS (size: 64)
 */
export interface VIDEO_WIN32K_CALLBACKS_PARAMS {
  /** Windows.Win32.Devices.Display.VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE */
  CalloutType: VIDEO_WIN32K_CALLBACKS_PARAMS_TYPE;
  /** ptr */
  PhysDisp: Deno.PointerValue | Uint8Array | null;
  /** usize */
  Param: Deno.PointerValue;
  /** i32 */
  Status: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  LockUserSession: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsPostDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  SurpriseRemoval: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  WaitForQueueReady: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVIDEO_WIN32K_CALLBACKS_PARAMS = 64;

export function allocVIDEO_WIN32K_CALLBACKS_PARAMS(data?: Partial<VIDEO_WIN32K_CALLBACKS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_WIN32K_CALLBACKS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CalloutType !== undefined) view.setInt32(0, Number(data.CalloutType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PhysDisp !== undefined) view.setBigUint64(8, data.PhysDisp === null ? 0n : BigInt(util.toPointer(data.PhysDisp)), true);
  // 0x10: usize
  if (data?.Param !== undefined) view.setBigUint64(16, BigInt(data.Param), true);
  // 0x18: i32
  if (data?.Status !== undefined) view.setInt32(24, Number(data.Status), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.LockUserSession !== undefined) view.setBigUint64(32, data.LockUserSession === null ? 0n : BigInt(util.toPointer(data.LockUserSession)), true);
  // 0x28: pointer
  if (data?.IsPostDevice !== undefined) view.setBigUint64(40, data.IsPostDevice === null ? 0n : BigInt(util.toPointer(data.IsPostDevice)), true);
  // 0x30: pointer
  if (data?.SurpriseRemoval !== undefined) view.setBigUint64(48, data.SurpriseRemoval === null ? 0n : BigInt(util.toPointer(data.SurpriseRemoval)), true);
  // 0x38: pointer
  if (data?.WaitForQueueReady !== undefined) view.setBigUint64(56, data.WaitForQueueReady === null ? 0n : BigInt(util.toPointer(data.WaitForQueueReady)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_WIN32K_CALLBACKS (size: 40)
 */
export interface VIDEO_WIN32K_CALLBACKS {
  /** ptr */
  PhysDisp: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Display.PVIDEO_WIN32K_CALLOUT */
  Callout: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  bACPI: number;
  /** Windows.Win32.Foundation.HANDLE */
  pPhysDeviceObject: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DualviewFlags: number;
}

export const sizeofVIDEO_WIN32K_CALLBACKS = 40;

export function allocVIDEO_WIN32K_CALLBACKS(data?: Partial<VIDEO_WIN32K_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_WIN32K_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PhysDisp !== undefined) view.setBigUint64(0, data.PhysDisp === null ? 0n : BigInt(util.toPointer(data.PhysDisp)), true);
  // 0x08: pointer
  if (data?.Callout !== undefined) view.setBigUint64(8, data.Callout === null ? 0n : BigInt(util.toPointer(data.Callout)), true);
  // 0x10: u32
  if (data?.bACPI !== undefined) view.setUint32(16, Number(data.bACPI), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPhysDeviceObject !== undefined) view.setBigUint64(24, data.pPhysDeviceObject === null ? 0n : BigInt(util.toPointer(data.pPhysDeviceObject)), true);
  // 0x20: u32
  if (data?.DualviewFlags !== undefined) view.setUint32(32, Number(data.DualviewFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_DEVICE_SESSION_STATUS (size: 8)
 */
export interface VIDEO_DEVICE_SESSION_STATUS {
  /** u32 */
  bEnable: number;
  /** u32 */
  bSuccess: number;
}

export const sizeofVIDEO_DEVICE_SESSION_STATUS = 8;

export function allocVIDEO_DEVICE_SESSION_STATUS(data?: Partial<VIDEO_DEVICE_SESSION_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_DEVICE_SESSION_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bEnable !== undefined) view.setUint32(0, Number(data.bEnable), true);
  // 0x04: u32
  if (data?.bSuccess !== undefined) view.setUint32(4, Number(data.bSuccess), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_HARDWARE_STATE_HEADER (size: 136)
 */
export interface VIDEO_HARDWARE_STATE_HEADER {
  /** u32 */
  Length: number;
  /** array */
  PortValue: Deno.PointerValue | null;
  /** u32 */
  AttribIndexDataState: number;
  /** u32 */
  BasicSequencerOffset: number;
  /** u32 */
  BasicCrtContOffset: number;
  /** u32 */
  BasicGraphContOffset: number;
  /** u32 */
  BasicAttribContOffset: number;
  /** u32 */
  BasicDacOffset: number;
  /** u32 */
  BasicLatchesOffset: number;
  /** u32 */
  ExtendedSequencerOffset: number;
  /** u32 */
  ExtendedCrtContOffset: number;
  /** u32 */
  ExtendedGraphContOffset: number;
  /** u32 */
  ExtendedAttribContOffset: number;
  /** u32 */
  ExtendedDacOffset: number;
  /** u32 */
  ExtendedValidatorStateOffset: number;
  /** u32 */
  ExtendedMiscDataOffset: number;
  /** u32 */
  PlaneLength: number;
  /** u32 */
  Plane1Offset: number;
  /** u32 */
  Plane2Offset: number;
  /** u32 */
  Plane3Offset: number;
  /** u32 */
  Plane4Offset: number;
  /** u32 */
  VGAStateFlags: number;
  /** u32 */
  DIBOffset: number;
  /** u32 */
  DIBBitsPerPixel: number;
  /** u32 */
  DIBXResolution: number;
  /** u32 */
  DIBYResolution: number;
  /** u32 */
  DIBXlatOffset: number;
  /** u32 */
  DIBXlatLength: number;
  /** u32 */
  VesaInfoOffset: number;
  /** ptr */
  FrameBufferData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVIDEO_HARDWARE_STATE_HEADER = 136;

export function allocVIDEO_HARDWARE_STATE_HEADER(data?: Partial<VIDEO_HARDWARE_STATE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_HARDWARE_STATE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PortValue !== undefined) view.setBigUint64(8, data.PortValue === null ? 0n : BigInt(util.toPointer(data.PortValue)), true);
  // 0x10: u32
  if (data?.AttribIndexDataState !== undefined) view.setUint32(16, Number(data.AttribIndexDataState), true);
  // 0x14: u32
  if (data?.BasicSequencerOffset !== undefined) view.setUint32(20, Number(data.BasicSequencerOffset), true);
  // 0x18: u32
  if (data?.BasicCrtContOffset !== undefined) view.setUint32(24, Number(data.BasicCrtContOffset), true);
  // 0x1c: u32
  if (data?.BasicGraphContOffset !== undefined) view.setUint32(28, Number(data.BasicGraphContOffset), true);
  // 0x20: u32
  if (data?.BasicAttribContOffset !== undefined) view.setUint32(32, Number(data.BasicAttribContOffset), true);
  // 0x24: u32
  if (data?.BasicDacOffset !== undefined) view.setUint32(36, Number(data.BasicDacOffset), true);
  // 0x28: u32
  if (data?.BasicLatchesOffset !== undefined) view.setUint32(40, Number(data.BasicLatchesOffset), true);
  // 0x2c: u32
  if (data?.ExtendedSequencerOffset !== undefined) view.setUint32(44, Number(data.ExtendedSequencerOffset), true);
  // 0x30: u32
  if (data?.ExtendedCrtContOffset !== undefined) view.setUint32(48, Number(data.ExtendedCrtContOffset), true);
  // 0x34: u32
  if (data?.ExtendedGraphContOffset !== undefined) view.setUint32(52, Number(data.ExtendedGraphContOffset), true);
  // 0x38: u32
  if (data?.ExtendedAttribContOffset !== undefined) view.setUint32(56, Number(data.ExtendedAttribContOffset), true);
  // 0x3c: u32
  if (data?.ExtendedDacOffset !== undefined) view.setUint32(60, Number(data.ExtendedDacOffset), true);
  // 0x40: u32
  if (data?.ExtendedValidatorStateOffset !== undefined) view.setUint32(64, Number(data.ExtendedValidatorStateOffset), true);
  // 0x44: u32
  if (data?.ExtendedMiscDataOffset !== undefined) view.setUint32(68, Number(data.ExtendedMiscDataOffset), true);
  // 0x48: u32
  if (data?.PlaneLength !== undefined) view.setUint32(72, Number(data.PlaneLength), true);
  // 0x4c: u32
  if (data?.Plane1Offset !== undefined) view.setUint32(76, Number(data.Plane1Offset), true);
  // 0x50: u32
  if (data?.Plane2Offset !== undefined) view.setUint32(80, Number(data.Plane2Offset), true);
  // 0x54: u32
  if (data?.Plane3Offset !== undefined) view.setUint32(84, Number(data.Plane3Offset), true);
  // 0x58: u32
  if (data?.Plane4Offset !== undefined) view.setUint32(88, Number(data.Plane4Offset), true);
  // 0x5c: u32
  if (data?.VGAStateFlags !== undefined) view.setUint32(92, Number(data.VGAStateFlags), true);
  // 0x60: u32
  if (data?.DIBOffset !== undefined) view.setUint32(96, Number(data.DIBOffset), true);
  // 0x64: u32
  if (data?.DIBBitsPerPixel !== undefined) view.setUint32(100, Number(data.DIBBitsPerPixel), true);
  // 0x68: u32
  if (data?.DIBXResolution !== undefined) view.setUint32(104, Number(data.DIBXResolution), true);
  // 0x6c: u32
  if (data?.DIBYResolution !== undefined) view.setUint32(108, Number(data.DIBYResolution), true);
  // 0x70: u32
  if (data?.DIBXlatOffset !== undefined) view.setUint32(112, Number(data.DIBXlatOffset), true);
  // 0x74: u32
  if (data?.DIBXlatLength !== undefined) view.setUint32(116, Number(data.DIBXlatLength), true);
  // 0x78: u32
  if (data?.VesaInfoOffset !== undefined) view.setUint32(120, Number(data.VesaInfoOffset), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.FrameBufferData !== undefined) view.setBigUint64(128, data.FrameBufferData === null ? 0n : BigInt(util.toPointer(data.FrameBufferData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_HARDWARE_STATE (size: 16)
 */
export interface VIDEO_HARDWARE_STATE {
  /** ptr */
  StateHeader: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  StateLength: number;
}

export const sizeofVIDEO_HARDWARE_STATE = 16;

export function allocVIDEO_HARDWARE_STATE(data?: Partial<VIDEO_HARDWARE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_HARDWARE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StateHeader !== undefined) view.setBigUint64(0, data.StateHeader === null ? 0n : BigInt(util.toPointer(data.StateHeader)), true);
  // 0x08: u32
  if (data?.StateLength !== undefined) view.setUint32(8, Number(data.StateLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_NUM_MODES (size: 8)
 */
export interface VIDEO_NUM_MODES {
  /** u32 */
  NumModes: number;
  /** u32 */
  ModeInformationLength: number;
}

export const sizeofVIDEO_NUM_MODES = 8;

export function allocVIDEO_NUM_MODES(data?: Partial<VIDEO_NUM_MODES>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_NUM_MODES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumModes !== undefined) view.setUint32(0, Number(data.NumModes), true);
  // 0x04: u32
  if (data?.ModeInformationLength !== undefined) view.setUint32(4, Number(data.ModeInformationLength), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_MODE (size: 8)
 */
export interface VIDEO_MODE {
  /** u32 */
  RequestedMode: number;
}

export const sizeofVIDEO_MODE = 8;

export function allocVIDEO_MODE(data?: Partial<VIDEO_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RequestedMode !== undefined) view.setUint32(0, Number(data.RequestedMode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_MODE_INFORMATION (size: 80)
 */
export interface VIDEO_MODE_INFORMATION {
  /** u32 */
  Length: number;
  /** u32 */
  ModeIndex: number;
  /** u32 */
  VisScreenWidth: number;
  /** u32 */
  VisScreenHeight: number;
  /** u32 */
  ScreenStride: number;
  /** u32 */
  NumberOfPlanes: number;
  /** u32 */
  BitsPerPlane: number;
  /** u32 */
  Frequency: number;
  /** u32 */
  XMillimeter: number;
  /** u32 */
  YMillimeter: number;
  /** u32 */
  NumberRedBits: number;
  /** u32 */
  NumberGreenBits: number;
  /** u32 */
  NumberBlueBits: number;
  /** u32 */
  RedMask: number;
  /** u32 */
  GreenMask: number;
  /** u32 */
  BlueMask: number;
  /** u32 */
  AttributeFlags: number;
  /** u32 */
  VideoMemoryBitmapWidth: number;
  /** u32 */
  VideoMemoryBitmapHeight: number;
  /** u32 */
  DriverSpecificAttributeFlags: number;
}

export const sizeofVIDEO_MODE_INFORMATION = 80;

export function allocVIDEO_MODE_INFORMATION(data?: Partial<VIDEO_MODE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_MODE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.ModeIndex !== undefined) view.setUint32(4, Number(data.ModeIndex), true);
  // 0x08: u32
  if (data?.VisScreenWidth !== undefined) view.setUint32(8, Number(data.VisScreenWidth), true);
  // 0x0c: u32
  if (data?.VisScreenHeight !== undefined) view.setUint32(12, Number(data.VisScreenHeight), true);
  // 0x10: u32
  if (data?.ScreenStride !== undefined) view.setUint32(16, Number(data.ScreenStride), true);
  // 0x14: u32
  if (data?.NumberOfPlanes !== undefined) view.setUint32(20, Number(data.NumberOfPlanes), true);
  // 0x18: u32
  if (data?.BitsPerPlane !== undefined) view.setUint32(24, Number(data.BitsPerPlane), true);
  // 0x1c: u32
  if (data?.Frequency !== undefined) view.setUint32(28, Number(data.Frequency), true);
  // 0x20: u32
  if (data?.XMillimeter !== undefined) view.setUint32(32, Number(data.XMillimeter), true);
  // 0x24: u32
  if (data?.YMillimeter !== undefined) view.setUint32(36, Number(data.YMillimeter), true);
  // 0x28: u32
  if (data?.NumberRedBits !== undefined) view.setUint32(40, Number(data.NumberRedBits), true);
  // 0x2c: u32
  if (data?.NumberGreenBits !== undefined) view.setUint32(44, Number(data.NumberGreenBits), true);
  // 0x30: u32
  if (data?.NumberBlueBits !== undefined) view.setUint32(48, Number(data.NumberBlueBits), true);
  // 0x34: u32
  if (data?.RedMask !== undefined) view.setUint32(52, Number(data.RedMask), true);
  // 0x38: u32
  if (data?.GreenMask !== undefined) view.setUint32(56, Number(data.GreenMask), true);
  // 0x3c: u32
  if (data?.BlueMask !== undefined) view.setUint32(60, Number(data.BlueMask), true);
  // 0x40: u32
  if (data?.AttributeFlags !== undefined) view.setUint32(64, Number(data.AttributeFlags), true);
  // 0x44: u32
  if (data?.VideoMemoryBitmapWidth !== undefined) view.setUint32(68, Number(data.VideoMemoryBitmapWidth), true);
  // 0x48: u32
  if (data?.VideoMemoryBitmapHeight !== undefined) view.setUint32(72, Number(data.VideoMemoryBitmapHeight), true);
  // 0x4c: u32
  if (data?.DriverSpecificAttributeFlags !== undefined) view.setUint32(76, Number(data.DriverSpecificAttributeFlags), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_LOAD_FONT_INFORMATION (size: 16)
 */
export interface VIDEO_LOAD_FONT_INFORMATION {
  /** u16 */
  WidthInPixels: number;
  /** u16 */
  HeightInPixels: number;
  /** u32 */
  FontSize: number;
  /** array */
  Font: Deno.PointerValue | null;
}

export const sizeofVIDEO_LOAD_FONT_INFORMATION = 16;

export function allocVIDEO_LOAD_FONT_INFORMATION(data?: Partial<VIDEO_LOAD_FONT_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_LOAD_FONT_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.WidthInPixels !== undefined) view.setUint16(0, Number(data.WidthInPixels), true);
  // 0x02: u16
  if (data?.HeightInPixels !== undefined) view.setUint16(2, Number(data.HeightInPixels), true);
  // 0x04: u32
  if (data?.FontSize !== undefined) view.setUint32(4, Number(data.FontSize), true);
  // 0x08: pointer
  if (data?.Font !== undefined) view.setBigUint64(8, data.Font === null ? 0n : BigInt(util.toPointer(data.Font)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_PALETTE_DATA (size: 16)
 */
export interface VIDEO_PALETTE_DATA {
  /** u16 */
  NumEntries: number;
  /** u16 */
  FirstEntry: number;
  /** array */
  Colors: Deno.PointerValue | null;
}

export const sizeofVIDEO_PALETTE_DATA = 16;

export function allocVIDEO_PALETTE_DATA(data?: Partial<VIDEO_PALETTE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_PALETTE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumEntries !== undefined) view.setUint16(0, Number(data.NumEntries), true);
  // 0x02: u16
  if (data?.FirstEntry !== undefined) view.setUint16(2, Number(data.FirstEntry), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Colors !== undefined) view.setBigUint64(8, data.Colors === null ? 0n : BigInt(util.toPointer(data.Colors)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_CLUTDATA (size: 8)
 */
export interface VIDEO_CLUTDATA {
  /** u8 */
  Red: number;
  /** u8 */
  Green: number;
  /** u8 */
  Blue: number;
  /** u8 */
  Unused: number;
}

export const sizeofVIDEO_CLUTDATA = 8;

export function allocVIDEO_CLUTDATA(data?: Partial<VIDEO_CLUTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_CLUTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Red !== undefined) view.setUint8(0, Number(data.Red));
  // 0x01: u8
  if (data?.Green !== undefined) view.setUint8(1, Number(data.Green));
  // 0x02: u8
  if (data?.Blue !== undefined) view.setUint8(2, Number(data.Blue));
  // 0x03: u8
  if (data?.Unused !== undefined) view.setUint8(3, Number(data.Unused));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_CLUT (size: 16)
 */
export interface VIDEO_CLUT {
  /** u16 */
  NumEntries: number;
  /** u16 */
  FirstEntry: number;
  /** array */
  LookupTable: Deno.PointerValue | null;
}

export const sizeofVIDEO_CLUT = 16;

export function allocVIDEO_CLUT(data?: Partial<VIDEO_CLUT>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_CLUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumEntries !== undefined) view.setUint16(0, Number(data.NumEntries), true);
  // 0x02: u16
  if (data?.FirstEntry !== undefined) view.setUint16(2, Number(data.FirstEntry), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LookupTable !== undefined) view.setBigUint64(8, data.LookupTable === null ? 0n : BigInt(util.toPointer(data.LookupTable)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_CURSOR_POSITION (size: 8)
 */
export interface VIDEO_CURSOR_POSITION {
  /** i16 */
  Column: number;
  /** i16 */
  Row: number;
}

export const sizeofVIDEO_CURSOR_POSITION = 8;

export function allocVIDEO_CURSOR_POSITION(data?: Partial<VIDEO_CURSOR_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_CURSOR_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.Column !== undefined) view.setInt16(0, Number(data.Column), true);
  // 0x02: i16
  if (data?.Row !== undefined) view.setInt16(2, Number(data.Row), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_CURSOR_ATTRIBUTES (size: 16)
 */
export interface VIDEO_CURSOR_ATTRIBUTES {
  /** u16 */
  Width: number;
  /** u16 */
  Height: number;
  /** i16 */
  Column: number;
  /** i16 */
  Row: number;
  /** u8 */
  Rate: number;
  /** u8 */
  Enable: number;
}

export const sizeofVIDEO_CURSOR_ATTRIBUTES = 16;

export function allocVIDEO_CURSOR_ATTRIBUTES(data?: Partial<VIDEO_CURSOR_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_CURSOR_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Width !== undefined) view.setUint16(0, Number(data.Width), true);
  // 0x02: u16
  if (data?.Height !== undefined) view.setUint16(2, Number(data.Height), true);
  // 0x04: i16
  if (data?.Column !== undefined) view.setInt16(4, Number(data.Column), true);
  // 0x06: i16
  if (data?.Row !== undefined) view.setInt16(6, Number(data.Row), true);
  // 0x08: u8
  if (data?.Rate !== undefined) view.setUint8(8, Number(data.Rate));
  // 0x09: u8
  if (data?.Enable !== undefined) view.setUint8(9, Number(data.Enable));
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_POINTER_POSITION (size: 8)
 */
export interface VIDEO_POINTER_POSITION {
  /** i16 */
  Column: number;
  /** i16 */
  Row: number;
}

export const sizeofVIDEO_POINTER_POSITION = 8;

export function allocVIDEO_POINTER_POSITION(data?: Partial<VIDEO_POINTER_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_POINTER_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.Column !== undefined) view.setInt16(0, Number(data.Column), true);
  // 0x02: i16
  if (data?.Row !== undefined) view.setInt16(2, Number(data.Row), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_POINTER_ATTRIBUTES (size: 32)
 */
export interface VIDEO_POINTER_ATTRIBUTES {
  /** u32 */
  Flags: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  WidthInBytes: number;
  /** u32 */
  Enable: number;
  /** i16 */
  Column: number;
  /** i16 */
  Row: number;
  /** array */
  Pixels: Deno.PointerValue | null;
}

export const sizeofVIDEO_POINTER_ATTRIBUTES = 32;

export function allocVIDEO_POINTER_ATTRIBUTES(data?: Partial<VIDEO_POINTER_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_POINTER_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.WidthInBytes !== undefined) view.setUint32(12, Number(data.WidthInBytes), true);
  // 0x10: u32
  if (data?.Enable !== undefined) view.setUint32(16, Number(data.Enable), true);
  // 0x14: i16
  if (data?.Column !== undefined) view.setInt16(20, Number(data.Column), true);
  // 0x16: i16
  if (data?.Row !== undefined) view.setInt16(22, Number(data.Row), true);
  // 0x18: pointer
  if (data?.Pixels !== undefined) view.setBigUint64(24, data.Pixels === null ? 0n : BigInt(util.toPointer(data.Pixels)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_POINTER_CAPABILITIES (size: 24)
 */
export interface VIDEO_POINTER_CAPABILITIES {
  /** u32 */
  Flags: number;
  /** u32 */
  MaxWidth: number;
  /** u32 */
  MaxHeight: number;
  /** u32 */
  HWPtrBitmapStart: number;
  /** u32 */
  HWPtrBitmapEnd: number;
}

export const sizeofVIDEO_POINTER_CAPABILITIES = 24;

export function allocVIDEO_POINTER_CAPABILITIES(data?: Partial<VIDEO_POINTER_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_POINTER_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.MaxWidth !== undefined) view.setUint32(4, Number(data.MaxWidth), true);
  // 0x08: u32
  if (data?.MaxHeight !== undefined) view.setUint32(8, Number(data.MaxHeight), true);
  // 0x0c: u32
  if (data?.HWPtrBitmapStart !== undefined) view.setUint32(12, Number(data.HWPtrBitmapStart), true);
  // 0x10: u32
  if (data?.HWPtrBitmapEnd !== undefined) view.setUint32(16, Number(data.HWPtrBitmapEnd), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_BANK_SELECT (size: 56)
 */
export interface VIDEO_BANK_SELECT {
  /** u32 */
  Length: number;
  /** u32 */
  Size: number;
  /** u32 */
  BankingFlags: number;
  /** u32 */
  BankingType: number;
  /** u32 */
  PlanarHCBankingType: number;
  /** u32 */
  BitmapWidthInBytes: number;
  /** u32 */
  BitmapSize: number;
  /** u32 */
  Granularity: number;
  /** u32 */
  PlanarHCGranularity: number;
  /** u32 */
  CodeOffset: number;
  /** u32 */
  PlanarHCBankCodeOffset: number;
  /** u32 */
  PlanarHCEnableCodeOffset: number;
  /** u32 */
  PlanarHCDisableCodeOffset: number;
}

export const sizeofVIDEO_BANK_SELECT = 56;

export function allocVIDEO_BANK_SELECT(data?: Partial<VIDEO_BANK_SELECT>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_BANK_SELECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.BankingFlags !== undefined) view.setUint32(8, Number(data.BankingFlags), true);
  // 0x0c: u32
  if (data?.BankingType !== undefined) view.setUint32(12, Number(data.BankingType), true);
  // 0x10: u32
  if (data?.PlanarHCBankingType !== undefined) view.setUint32(16, Number(data.PlanarHCBankingType), true);
  // 0x14: u32
  if (data?.BitmapWidthInBytes !== undefined) view.setUint32(20, Number(data.BitmapWidthInBytes), true);
  // 0x18: u32
  if (data?.BitmapSize !== undefined) view.setUint32(24, Number(data.BitmapSize), true);
  // 0x1c: u32
  if (data?.Granularity !== undefined) view.setUint32(28, Number(data.Granularity), true);
  // 0x20: u32
  if (data?.PlanarHCGranularity !== undefined) view.setUint32(32, Number(data.PlanarHCGranularity), true);
  // 0x24: u32
  if (data?.CodeOffset !== undefined) view.setUint32(36, Number(data.CodeOffset), true);
  // 0x28: u32
  if (data?.PlanarHCBankCodeOffset !== undefined) view.setUint32(40, Number(data.PlanarHCBankCodeOffset), true);
  // 0x2c: u32
  if (data?.PlanarHCEnableCodeOffset !== undefined) view.setUint32(44, Number(data.PlanarHCEnableCodeOffset), true);
  // 0x30: u32
  if (data?.PlanarHCDisableCodeOffset !== undefined) view.setUint32(48, Number(data.PlanarHCDisableCodeOffset), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_MEMORY (size: 8)
 */
export interface VIDEO_MEMORY {
  /** ptr */
  RequestedVirtualAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVIDEO_MEMORY = 8;

export function allocVIDEO_MEMORY(data?: Partial<VIDEO_MEMORY>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_MEMORY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RequestedVirtualAddress !== undefined) view.setBigUint64(0, data.RequestedVirtualAddress === null ? 0n : BigInt(util.toPointer(data.RequestedVirtualAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_SHARE_MEMORY (size: 24)
 */
export interface VIDEO_SHARE_MEMORY {
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ViewOffset: number;
  /** u32 */
  ViewSize: number;
  /** ptr */
  RequestedVirtualAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVIDEO_SHARE_MEMORY = 24;

export function allocVIDEO_SHARE_MEMORY(data?: Partial<VIDEO_SHARE_MEMORY>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_SHARE_MEMORY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(0, data.ProcessHandle === null ? 0n : BigInt(util.toPointer(data.ProcessHandle)), true);
  // 0x08: u32
  if (data?.ViewOffset !== undefined) view.setUint32(8, Number(data.ViewOffset), true);
  // 0x0c: u32
  if (data?.ViewSize !== undefined) view.setUint32(12, Number(data.ViewSize), true);
  // 0x10: pointer
  if (data?.RequestedVirtualAddress !== undefined) view.setBigUint64(16, data.RequestedVirtualAddress === null ? 0n : BigInt(util.toPointer(data.RequestedVirtualAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_SHARE_MEMORY_INFORMATION (size: 16)
 */
export interface VIDEO_SHARE_MEMORY_INFORMATION {
  /** u32 */
  SharedViewOffset: number;
  /** u32 */
  SharedViewSize: number;
  /** ptr */
  VirtualAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVIDEO_SHARE_MEMORY_INFORMATION = 16;

export function allocVIDEO_SHARE_MEMORY_INFORMATION(data?: Partial<VIDEO_SHARE_MEMORY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_SHARE_MEMORY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SharedViewOffset !== undefined) view.setUint32(0, Number(data.SharedViewOffset), true);
  // 0x04: u32
  if (data?.SharedViewSize !== undefined) view.setUint32(4, Number(data.SharedViewSize), true);
  // 0x08: pointer
  if (data?.VirtualAddress !== undefined) view.setBigUint64(8, data.VirtualAddress === null ? 0n : BigInt(util.toPointer(data.VirtualAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_MEMORY_INFORMATION (size: 32)
 */
export interface VIDEO_MEMORY_INFORMATION {
  /** ptr */
  VideoRamBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  VideoRamLength: number;
  /** ptr */
  FrameBufferBase: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  FrameBufferLength: number;
}

export const sizeofVIDEO_MEMORY_INFORMATION = 32;

export function allocVIDEO_MEMORY_INFORMATION(data?: Partial<VIDEO_MEMORY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_MEMORY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VideoRamBase !== undefined) view.setBigUint64(0, data.VideoRamBase === null ? 0n : BigInt(util.toPointer(data.VideoRamBase)), true);
  // 0x08: u32
  if (data?.VideoRamLength !== undefined) view.setUint32(8, Number(data.VideoRamLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FrameBufferBase !== undefined) view.setBigUint64(16, data.FrameBufferBase === null ? 0n : BigInt(util.toPointer(data.FrameBufferBase)), true);
  // 0x18: u32
  if (data?.FrameBufferLength !== undefined) view.setUint32(24, Number(data.FrameBufferLength), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_PUBLIC_ACCESS_RANGES (size: 16)
 */
export interface VIDEO_PUBLIC_ACCESS_RANGES {
  /** u32 */
  InIoSpace: number;
  /** u32 */
  MappedInIoSpace: number;
  /** ptr */
  VirtualAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVIDEO_PUBLIC_ACCESS_RANGES = 16;

export function allocVIDEO_PUBLIC_ACCESS_RANGES(data?: Partial<VIDEO_PUBLIC_ACCESS_RANGES>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_PUBLIC_ACCESS_RANGES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InIoSpace !== undefined) view.setUint32(0, Number(data.InIoSpace), true);
  // 0x04: u32
  if (data?.MappedInIoSpace !== undefined) view.setUint32(4, Number(data.MappedInIoSpace), true);
  // 0x08: pointer
  if (data?.VirtualAddress !== undefined) view.setBigUint64(8, data.VirtualAddress === null ? 0n : BigInt(util.toPointer(data.VirtualAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_COLOR_CAPABILITIES (size: 72)
 */
export interface VIDEO_COLOR_CAPABILITIES {
  /** u32 */
  Length: number;
  /** u32 */
  AttributeFlags: number;
  /** i32 */
  RedPhosphoreDecay: number;
  /** i32 */
  GreenPhosphoreDecay: number;
  /** i32 */
  BluePhosphoreDecay: number;
  /** i32 */
  WhiteChromaticity_x: number;
  /** i32 */
  WhiteChromaticity_y: number;
  /** i32 */
  WhiteChromaticity_Y: number;
  /** i32 */
  RedChromaticity_x: number;
  /** i32 */
  RedChromaticity_y: number;
  /** i32 */
  GreenChromaticity_x: number;
  /** i32 */
  GreenChromaticity_y: number;
  /** i32 */
  BlueChromaticity_x: number;
  /** i32 */
  BlueChromaticity_y: number;
  /** i32 */
  WhiteGamma: number;
  /** i32 */
  RedGamma: number;
  /** i32 */
  GreenGamma: number;
  /** i32 */
  BlueGamma: number;
}

export const sizeofVIDEO_COLOR_CAPABILITIES = 72;

export function allocVIDEO_COLOR_CAPABILITIES(data?: Partial<VIDEO_COLOR_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_COLOR_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.AttributeFlags !== undefined) view.setUint32(4, Number(data.AttributeFlags), true);
  // 0x08: i32
  if (data?.RedPhosphoreDecay !== undefined) view.setInt32(8, Number(data.RedPhosphoreDecay), true);
  // 0x0c: i32
  if (data?.GreenPhosphoreDecay !== undefined) view.setInt32(12, Number(data.GreenPhosphoreDecay), true);
  // 0x10: i32
  if (data?.BluePhosphoreDecay !== undefined) view.setInt32(16, Number(data.BluePhosphoreDecay), true);
  // 0x14: i32
  if (data?.WhiteChromaticity_x !== undefined) view.setInt32(20, Number(data.WhiteChromaticity_x), true);
  // 0x18: i32
  if (data?.WhiteChromaticity_y !== undefined) view.setInt32(24, Number(data.WhiteChromaticity_y), true);
  // 0x1c: i32
  if (data?.WhiteChromaticity_Y !== undefined) view.setInt32(28, Number(data.WhiteChromaticity_Y), true);
  // 0x20: i32
  if (data?.RedChromaticity_x !== undefined) view.setInt32(32, Number(data.RedChromaticity_x), true);
  // 0x24: i32
  if (data?.RedChromaticity_y !== undefined) view.setInt32(36, Number(data.RedChromaticity_y), true);
  // 0x28: i32
  if (data?.GreenChromaticity_x !== undefined) view.setInt32(40, Number(data.GreenChromaticity_x), true);
  // 0x2c: i32
  if (data?.GreenChromaticity_y !== undefined) view.setInt32(44, Number(data.GreenChromaticity_y), true);
  // 0x30: i32
  if (data?.BlueChromaticity_x !== undefined) view.setInt32(48, Number(data.BlueChromaticity_x), true);
  // 0x34: i32
  if (data?.BlueChromaticity_y !== undefined) view.setInt32(52, Number(data.BlueChromaticity_y), true);
  // 0x38: i32
  if (data?.WhiteGamma !== undefined) view.setInt32(56, Number(data.WhiteGamma), true);
  // 0x3c: i32
  if (data?.RedGamma !== undefined) view.setInt32(60, Number(data.RedGamma), true);
  // 0x40: i32
  if (data?.GreenGamma !== undefined) view.setInt32(64, Number(data.GreenGamma), true);
  // 0x44: i32
  if (data?.BlueGamma !== undefined) view.setInt32(68, Number(data.BlueGamma), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_POWER_MANAGEMENT (size: 16)
 */
export interface VIDEO_POWER_MANAGEMENT {
  /** u32 */
  Length: number;
  /** u32 */
  DPMSVersion: number;
  /** u32 */
  PowerState: number;
}

export const sizeofVIDEO_POWER_MANAGEMENT = 16;

export function allocVIDEO_POWER_MANAGEMENT(data?: Partial<VIDEO_POWER_MANAGEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_POWER_MANAGEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.DPMSVersion !== undefined) view.setUint32(4, Number(data.DPMSVersion), true);
  // 0x08: u32
  if (data?.PowerState !== undefined) view.setUint32(8, Number(data.PowerState), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_COLOR_LUT_DATA (size: 16)
 */
export interface VIDEO_COLOR_LUT_DATA {
  /** u32 */
  Length: number;
  /** u32 */
  LutDataFormat: number;
  /** array */
  LutData: Deno.PointerValue | null;
}

export const sizeofVIDEO_COLOR_LUT_DATA = 16;

export function allocVIDEO_COLOR_LUT_DATA(data?: Partial<VIDEO_COLOR_LUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_COLOR_LUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.LutDataFormat !== undefined) view.setUint32(4, Number(data.LutDataFormat), true);
  // 0x08: pointer
  if (data?.LutData !== undefined) view.setBigUint64(8, data.LutData === null ? 0n : BigInt(util.toPointer(data.LutData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_LUT_RGB256WORDS (size: 24)
 */
export interface VIDEO_LUT_RGB256WORDS {
  /** array */
  Red: Deno.PointerValue | null;
  /** array */
  Green: Deno.PointerValue | null;
  /** array */
  Blue: Deno.PointerValue | null;
}

export const sizeofVIDEO_LUT_RGB256WORDS = 24;

export function allocVIDEO_LUT_RGB256WORDS(data?: Partial<VIDEO_LUT_RGB256WORDS>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_LUT_RGB256WORDS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Red !== undefined) view.setBigUint64(0, data.Red === null ? 0n : BigInt(util.toPointer(data.Red)), true);
  // 0x08: pointer
  if (data?.Green !== undefined) view.setBigUint64(8, data.Green === null ? 0n : BigInt(util.toPointer(data.Green)), true);
  // 0x10: pointer
  if (data?.Blue !== undefined) view.setBigUint64(16, data.Blue === null ? 0n : BigInt(util.toPointer(data.Blue)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BANK_POSITION (size: 8)
 */
export interface BANK_POSITION {
  /** u32 */
  ReadBankPosition: number;
  /** u32 */
  WriteBankPosition: number;
}

export const sizeofBANK_POSITION = 8;

export function allocBANK_POSITION(data?: Partial<BANK_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofBANK_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ReadBankPosition !== undefined) view.setUint32(0, Number(data.ReadBankPosition), true);
  // 0x04: u32
  if (data?.WriteBankPosition !== undefined) view.setUint32(4, Number(data.WriteBankPosition), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.DISPLAY_BRIGHTNESS (size: 8)
 */
export interface DISPLAY_BRIGHTNESS {
  /** u8 */
  ucDisplayPolicy: number;
  /** u8 */
  ucACBrightness: number;
  /** u8 */
  ucDCBrightness: number;
}

export const sizeofDISPLAY_BRIGHTNESS = 8;

export function allocDISPLAY_BRIGHTNESS(data?: Partial<DISPLAY_BRIGHTNESS>): Uint8Array {
  const buf = new Uint8Array(sizeofDISPLAY_BRIGHTNESS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ucDisplayPolicy !== undefined) view.setUint8(0, Number(data.ucDisplayPolicy));
  // 0x01: u8
  if (data?.ucACBrightness !== undefined) view.setUint8(1, Number(data.ucACBrightness));
  // 0x02: u8
  if (data?.ucDCBrightness !== undefined) view.setUint8(2, Number(data.ucDCBrightness));
  // 0x03: pad5
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_BRIGHTNESS_POLICY (size: 24)
 */
export interface VIDEO_BRIGHTNESS_POLICY {
  /** Windows.Win32.Foundation.BOOLEAN */
  DefaultToBiosPolicy: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  LevelCount: number;
  /** array */
  Level: Deno.PointerValue | null;
}

export const sizeofVIDEO_BRIGHTNESS_POLICY = 24;

export function allocVIDEO_BRIGHTNESS_POLICY(data?: Partial<VIDEO_BRIGHTNESS_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_BRIGHTNESS_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DefaultToBiosPolicy !== undefined) view.setBigUint64(0, data.DefaultToBiosPolicy === null ? 0n : BigInt(util.toPointer(data.DefaultToBiosPolicy)), true);
  // 0x08: u8
  if (data?.LevelCount !== undefined) view.setUint8(8, Number(data.LevelCount));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.Level !== undefined) view.setBigUint64(16, data.Level === null ? 0n : BigInt(util.toPointer(data.Level)), true);
  return buf;
}

/**
 * Windows.Win32.System.Console.COORD (size: 8)
 */
export interface COORD {
  /** i16 */
  X: number;
  /** i16 */
  Y: number;
}

export const sizeofCOORD = 8;

export function allocCOORD(data?: Partial<COORD>): Uint8Array {
  const buf = new Uint8Array(sizeofCOORD);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.X !== undefined) view.setInt16(0, Number(data.X), true);
  // 0x02: i16
  if (data?.Y !== undefined) view.setInt16(2, Number(data.Y), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSCNTL_SCREEN_INFO (size: 24)
 */
export interface FSCNTL_SCREEN_INFO {
  /** Windows.Win32.System.Console.COORD */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  ScreenSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nNumberOfChars: number;
}

export const sizeofFSCNTL_SCREEN_INFO = 24;

export function allocFSCNTL_SCREEN_INFO(data?: Partial<FSCNTL_SCREEN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFSCNTL_SCREEN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Position !== undefined) view.setBigUint64(0, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x08: pointer
  if (data?.ScreenSize !== undefined) view.setBigUint64(8, data.ScreenSize === null ? 0n : BigInt(util.toPointer(data.ScreenSize)), true);
  // 0x10: u32
  if (data?.nNumberOfChars !== undefined) view.setUint32(16, Number(data.nNumberOfChars), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FONT_IMAGE_INFO (size: 16)
 */
export interface FONT_IMAGE_INFO {
  /** Windows.Win32.System.Console.COORD */
  FontSize: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ImageBits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofFONT_IMAGE_INFO = 16;

export function allocFONT_IMAGE_INFO(data?: Partial<FONT_IMAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFONT_IMAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FontSize !== undefined) view.setBigUint64(0, data.FontSize === null ? 0n : BigInt(util.toPointer(data.FontSize)), true);
  // 0x08: pointer
  if (data?.ImageBits !== undefined) view.setBigUint64(8, data.ImageBits === null ? 0n : BigInt(util.toPointer(data.ImageBits)), true);
  return buf;
}

export type CHAR = number;

/**
 * _Char_e__Union (size: 16)
 */
export interface _Char_e__Union {
  /** char */
  UnicodeChar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  AsciiChar: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Char_e__Union = 16;

export function alloc_Char_e__Union(data?: Partial<_Char_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Char_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UnicodeChar !== undefined) view.setBigUint64(0, data.UnicodeChar === null ? 0n : BigInt(util.toPointer(data.UnicodeChar)), true);
  // 0x08: pointer
  if (data?.AsciiChar !== undefined) view.setBigUint64(8, data.AsciiChar === null ? 0n : BigInt(util.toPointer(data.AsciiChar)), true);
  return buf;
}

/**
 * Windows.Win32.System.Console.CHAR_INFO (size: 16)
 */
export interface CHAR_INFO {
  /** _Char_e__Union */
  Char: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Attributes: number;
}

export const sizeofCHAR_INFO = 16;

export function allocCHAR_INFO(data?: Partial<CHAR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCHAR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Char !== undefined) view.setBigUint64(0, data.Char === null ? 0n : BigInt(util.toPointer(data.Char)), true);
  // 0x08: u16
  if (data?.Attributes !== undefined) view.setUint16(8, Number(data.Attributes), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Display.CHAR_IMAGE_INFO (size: 16)
 */
export interface CHAR_IMAGE_INFO {
  /** Windows.Win32.System.Console.CHAR_INFO */
  CharInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.FONT_IMAGE_INFO */
  FontImageInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCHAR_IMAGE_INFO = 16;

export function allocCHAR_IMAGE_INFO(data?: Partial<CHAR_IMAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCHAR_IMAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CharInfo !== undefined) view.setBigUint64(0, data.CharInfo === null ? 0n : BigInt(util.toPointer(data.CharInfo)), true);
  // 0x08: pointer
  if (data?.FontImageInfo !== undefined) view.setBigUint64(8, data.FontImageInfo === null ? 0n : BigInt(util.toPointer(data.FontImageInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VGA_CHAR (size: 16)
 */
export interface VGA_CHAR {
  /** Windows.Win32.Foundation.CHAR */
  Char: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  Attributes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVGA_CHAR = 16;

export function allocVGA_CHAR(data?: Partial<VGA_CHAR>): Uint8Array {
  const buf = new Uint8Array(sizeofVGA_CHAR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Char !== undefined) view.setBigUint64(0, data.Char === null ? 0n : BigInt(util.toPointer(data.Char)), true);
  // 0x08: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(8, data.Attributes === null ? 0n : BigInt(util.toPointer(data.Attributes)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSVIDEO_COPY_FRAME_BUFFER (size: 16)
 */
export interface FSVIDEO_COPY_FRAME_BUFFER {
  /** Windows.Win32.Devices.Display.FSCNTL_SCREEN_INFO */
  SrcScreen: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.FSCNTL_SCREEN_INFO */
  DestScreen: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFSVIDEO_COPY_FRAME_BUFFER = 16;

export function allocFSVIDEO_COPY_FRAME_BUFFER(data?: Partial<FSVIDEO_COPY_FRAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFSVIDEO_COPY_FRAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SrcScreen !== undefined) view.setBigUint64(0, data.SrcScreen === null ? 0n : BigInt(util.toPointer(data.SrcScreen)), true);
  // 0x08: pointer
  if (data?.DestScreen !== undefined) view.setBigUint64(8, data.DestScreen === null ? 0n : BigInt(util.toPointer(data.DestScreen)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSVIDEO_WRITE_TO_FRAME_BUFFER (size: 16)
 */
export interface FSVIDEO_WRITE_TO_FRAME_BUFFER {
  /** ptr */
  SrcBuffer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Display.FSCNTL_SCREEN_INFO */
  DestScreen: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFSVIDEO_WRITE_TO_FRAME_BUFFER = 16;

export function allocFSVIDEO_WRITE_TO_FRAME_BUFFER(data?: Partial<FSVIDEO_WRITE_TO_FRAME_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofFSVIDEO_WRITE_TO_FRAME_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SrcBuffer !== undefined) view.setBigUint64(0, data.SrcBuffer === null ? 0n : BigInt(util.toPointer(data.SrcBuffer)), true);
  // 0x08: pointer
  if (data?.DestScreen !== undefined) view.setBigUint64(8, data.DestScreen === null ? 0n : BigInt(util.toPointer(data.DestScreen)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSVIDEO_REVERSE_MOUSE_POINTER (size: 16)
 */
export interface FSVIDEO_REVERSE_MOUSE_POINTER {
  /** Windows.Win32.Devices.Display.FSCNTL_SCREEN_INFO */
  Screen: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwType: number;
}

export const sizeofFSVIDEO_REVERSE_MOUSE_POINTER = 16;

export function allocFSVIDEO_REVERSE_MOUSE_POINTER(data?: Partial<FSVIDEO_REVERSE_MOUSE_POINTER>): Uint8Array {
  const buf = new Uint8Array(sizeofFSVIDEO_REVERSE_MOUSE_POINTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Screen !== undefined) view.setBigUint64(0, data.Screen === null ? 0n : BigInt(util.toPointer(data.Screen)), true);
  // 0x08: u32
  if (data?.dwType !== undefined) view.setUint32(8, Number(data.dwType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSVIDEO_MODE_INFORMATION (size: 16)
 */
export interface FSVIDEO_MODE_INFORMATION {
  /** Windows.Win32.Devices.Display.VIDEO_MODE_INFORMATION */
  VideoMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.VIDEO_MEMORY_INFORMATION */
  VideoMemory: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFSVIDEO_MODE_INFORMATION = 16;

export function allocFSVIDEO_MODE_INFORMATION(data?: Partial<FSVIDEO_MODE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFSVIDEO_MODE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VideoMode !== undefined) view.setBigUint64(0, data.VideoMode === null ? 0n : BigInt(util.toPointer(data.VideoMode)), true);
  // 0x08: pointer
  if (data?.VideoMemory !== undefined) view.setBigUint64(8, data.VideoMemory === null ? 0n : BigInt(util.toPointer(data.VideoMemory)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSVIDEO_SCREEN_INFORMATION (size: 16)
 */
export interface FSVIDEO_SCREEN_INFORMATION {
  /** Windows.Win32.System.Console.COORD */
  ScreenSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  FontSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFSVIDEO_SCREEN_INFORMATION = 16;

export function allocFSVIDEO_SCREEN_INFORMATION(data?: Partial<FSVIDEO_SCREEN_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofFSVIDEO_SCREEN_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ScreenSize !== undefined) view.setBigUint64(0, data.ScreenSize === null ? 0n : BigInt(util.toPointer(data.ScreenSize)), true);
  // 0x08: pointer
  if (data?.FontSize !== undefined) view.setBigUint64(8, data.FontSize === null ? 0n : BigInt(util.toPointer(data.FontSize)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.FSVIDEO_CURSOR_POSITION (size: 16)
 */
export interface FSVIDEO_CURSOR_POSITION {
  /** Windows.Win32.Devices.Display.VIDEO_CURSOR_POSITION */
  Coord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwType: number;
}

export const sizeofFSVIDEO_CURSOR_POSITION = 16;

export function allocFSVIDEO_CURSOR_POSITION(data?: Partial<FSVIDEO_CURSOR_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofFSVIDEO_CURSOR_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Coord !== undefined) view.setBigUint64(0, data.Coord === null ? 0n : BigInt(util.toPointer(data.Coord)), true);
  // 0x08: u32
  if (data?.dwType !== undefined) view.setUint32(8, Number(data.dwType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.ENG_EVENT (size: 16)
 */
export interface ENG_EVENT {
  /** ptr */
  pKEvent: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fFlags: number;
}

export const sizeofENG_EVENT = 16;

export function allocENG_EVENT(data?: Partial<ENG_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofENG_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pKEvent !== undefined) view.setBigUint64(0, data.pKEvent === null ? 0n : BigInt(util.toPointer(data.pKEvent)), true);
  // 0x08: u32
  if (data?.fFlags !== undefined) view.setUint32(8, Number(data.fFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_PERFORMANCE_COUNTER (size: 168)
 */
export interface VIDEO_PERFORMANCE_COUNTER {
  /** array */
  NbOfAllocationEvicted: Deno.PointerValue | null;
  /** array */
  NbOfAllocationMarked: Deno.PointerValue | null;
  /** array */
  NbOfAllocationRestored: Deno.PointerValue | null;
  /** array */
  KBytesEvicted: Deno.PointerValue | null;
  /** array */
  KBytesMarked: Deno.PointerValue | null;
  /** array */
  KBytesRestored: Deno.PointerValue | null;
  /** u64 */
  NbProcessCommited: Deno.PointerValue;
  /** u64 */
  NbAllocationCommited: Deno.PointerValue;
  /** u64 */
  NbAllocationMarked: Deno.PointerValue;
  /** u64 */
  KBytesAllocated: Deno.PointerValue;
  /** u64 */
  KBytesAvailable: Deno.PointerValue;
  /** u64 */
  KBytesCurMarked: Deno.PointerValue;
  /** u64 */
  Reference: Deno.PointerValue;
  /** u64 */
  Unreference: Deno.PointerValue;
  /** u64 */
  TrueReference: Deno.PointerValue;
  /** u64 */
  NbOfPageIn: Deno.PointerValue;
  /** u64 */
  KBytesPageIn: Deno.PointerValue;
  /** u64 */
  NbOfPageOut: Deno.PointerValue;
  /** u64 */
  KBytesPageOut: Deno.PointerValue;
  /** u64 */
  NbOfRotateOut: Deno.PointerValue;
  /** u64 */
  KBytesRotateOut: Deno.PointerValue;
}

export const sizeofVIDEO_PERFORMANCE_COUNTER = 168;

export function allocVIDEO_PERFORMANCE_COUNTER(data?: Partial<VIDEO_PERFORMANCE_COUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_PERFORMANCE_COUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NbOfAllocationEvicted !== undefined) view.setBigUint64(0, data.NbOfAllocationEvicted === null ? 0n : BigInt(util.toPointer(data.NbOfAllocationEvicted)), true);
  // 0x08: pointer
  if (data?.NbOfAllocationMarked !== undefined) view.setBigUint64(8, data.NbOfAllocationMarked === null ? 0n : BigInt(util.toPointer(data.NbOfAllocationMarked)), true);
  // 0x10: pointer
  if (data?.NbOfAllocationRestored !== undefined) view.setBigUint64(16, data.NbOfAllocationRestored === null ? 0n : BigInt(util.toPointer(data.NbOfAllocationRestored)), true);
  // 0x18: pointer
  if (data?.KBytesEvicted !== undefined) view.setBigUint64(24, data.KBytesEvicted === null ? 0n : BigInt(util.toPointer(data.KBytesEvicted)), true);
  // 0x20: pointer
  if (data?.KBytesMarked !== undefined) view.setBigUint64(32, data.KBytesMarked === null ? 0n : BigInt(util.toPointer(data.KBytesMarked)), true);
  // 0x28: pointer
  if (data?.KBytesRestored !== undefined) view.setBigUint64(40, data.KBytesRestored === null ? 0n : BigInt(util.toPointer(data.KBytesRestored)), true);
  // 0x30: u64
  if (data?.NbProcessCommited !== undefined) view.setBigUint64(48, BigInt(data.NbProcessCommited), true);
  // 0x38: u64
  if (data?.NbAllocationCommited !== undefined) view.setBigUint64(56, BigInt(data.NbAllocationCommited), true);
  // 0x40: u64
  if (data?.NbAllocationMarked !== undefined) view.setBigUint64(64, BigInt(data.NbAllocationMarked), true);
  // 0x48: u64
  if (data?.KBytesAllocated !== undefined) view.setBigUint64(72, BigInt(data.KBytesAllocated), true);
  // 0x50: u64
  if (data?.KBytesAvailable !== undefined) view.setBigUint64(80, BigInt(data.KBytesAvailable), true);
  // 0x58: u64
  if (data?.KBytesCurMarked !== undefined) view.setBigUint64(88, BigInt(data.KBytesCurMarked), true);
  // 0x60: u64
  if (data?.Reference !== undefined) view.setBigUint64(96, BigInt(data.Reference), true);
  // 0x68: u64
  if (data?.Unreference !== undefined) view.setBigUint64(104, BigInt(data.Unreference), true);
  // 0x70: u64
  if (data?.TrueReference !== undefined) view.setBigUint64(112, BigInt(data.TrueReference), true);
  // 0x78: u64
  if (data?.NbOfPageIn !== undefined) view.setBigUint64(120, BigInt(data.NbOfPageIn), true);
  // 0x80: u64
  if (data?.KBytesPageIn !== undefined) view.setBigUint64(128, BigInt(data.KBytesPageIn), true);
  // 0x88: u64
  if (data?.NbOfPageOut !== undefined) view.setBigUint64(136, BigInt(data.NbOfPageOut), true);
  // 0x90: u64
  if (data?.KBytesPageOut !== undefined) view.setBigUint64(144, BigInt(data.KBytesPageOut), true);
  // 0x98: u64
  if (data?.NbOfRotateOut !== undefined) view.setBigUint64(152, BigInt(data.NbOfRotateOut), true);
  // 0xa0: u64
  if (data?.KBytesRotateOut !== undefined) view.setBigUint64(160, BigInt(data.KBytesRotateOut), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.VIDEO_QUERY_PERFORMANCE_COUNTER (size: 16)
 */
export interface VIDEO_QUERY_PERFORMANCE_COUNTER {
  /** u32 */
  BufferSize: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofVIDEO_QUERY_PERFORMANCE_COUNTER = 16;

export function allocVIDEO_QUERY_PERFORMANCE_COUNTER(data?: Partial<VIDEO_QUERY_PERFORMANCE_COUNTER>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEO_QUERY_PERFORMANCE_COUNTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BufferSize !== undefined) view.setUint32(0, Number(data.BufferSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_QUERY_BRIGHTNESS_CAPS (size: 16)
 */
export interface PANEL_QUERY_BRIGHTNESS_CAPS {
  /** Windows.Win32.Devices.Display.BRIGHTNESS_INTERFACE_VERSION */
  Version: BRIGHTNESS_INTERFACE_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPANEL_QUERY_BRIGHTNESS_CAPS = 16;

export function allocPANEL_QUERY_BRIGHTNESS_CAPS(data?: Partial<PANEL_QUERY_BRIGHTNESS_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_QUERY_BRIGHTNESS_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BRIGHTNESS_LEVEL (size: 16)
 */
export interface BRIGHTNESS_LEVEL {
  /** u8 */
  Count: number;
  /** array */
  Level: Deno.PointerValue | null;
}

export const sizeofBRIGHTNESS_LEVEL = 16;

export function allocBRIGHTNESS_LEVEL(data?: Partial<BRIGHTNESS_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofBRIGHTNESS_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Count !== undefined) view.setUint8(0, Number(data.Count));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Level !== undefined) view.setBigUint64(8, data.Level === null ? 0n : BigInt(util.toPointer(data.Level)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BRIGHTNESS_NIT_RANGE (size: 16)
 */
export interface BRIGHTNESS_NIT_RANGE {
  /** u32 */
  MinLevelInMillinit: number;
  /** u32 */
  MaxLevelInMillinit: number;
  /** u32 */
  StepSizeInMillinit: number;
}

export const sizeofBRIGHTNESS_NIT_RANGE = 16;

export function allocBRIGHTNESS_NIT_RANGE(data?: Partial<BRIGHTNESS_NIT_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofBRIGHTNESS_NIT_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MinLevelInMillinit !== undefined) view.setUint32(0, Number(data.MinLevelInMillinit), true);
  // 0x04: u32
  if (data?.MaxLevelInMillinit !== undefined) view.setUint32(4, Number(data.MaxLevelInMillinit), true);
  // 0x08: u32
  if (data?.StepSizeInMillinit !== undefined) view.setUint32(8, Number(data.StepSizeInMillinit), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BRIGHTNESS_NIT_RANGES (size: 24)
 */
export interface BRIGHTNESS_NIT_RANGES {
  /** u32 */
  NormalRangeCount: number;
  /** u32 */
  RangeCount: number;
  /** u32 */
  PreferredMaximumBrightness: number;
  /** array */
  SupportedRanges: Deno.PointerValue | null;
}

export const sizeofBRIGHTNESS_NIT_RANGES = 24;

export function allocBRIGHTNESS_NIT_RANGES(data?: Partial<BRIGHTNESS_NIT_RANGES>): Uint8Array {
  const buf = new Uint8Array(sizeofBRIGHTNESS_NIT_RANGES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NormalRangeCount !== undefined) view.setUint32(0, Number(data.NormalRangeCount), true);
  // 0x04: u32
  if (data?.RangeCount !== undefined) view.setUint32(4, Number(data.RangeCount), true);
  // 0x08: u32
  if (data?.PreferredMaximumBrightness !== undefined) view.setUint32(8, Number(data.PreferredMaximumBrightness), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SupportedRanges !== undefined) view.setBigUint64(16, data.SupportedRanges === null ? 0n : BigInt(util.toPointer(data.SupportedRanges)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_QUERY_BRIGHTNESS_RANGES (size: 16)
 */
export interface PANEL_QUERY_BRIGHTNESS_RANGES {
  /** Windows.Win32.Devices.Display.BRIGHTNESS_INTERFACE_VERSION */
  Version: BRIGHTNESS_INTERFACE_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPANEL_QUERY_BRIGHTNESS_RANGES = 16;

export function allocPANEL_QUERY_BRIGHTNESS_RANGES(data?: Partial<PANEL_QUERY_BRIGHTNESS_RANGES>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_QUERY_BRIGHTNESS_RANGES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_GET_BRIGHTNESS (size: 16)
 */
export interface PANEL_GET_BRIGHTNESS {
  /** Windows.Win32.Devices.Display.BRIGHTNESS_INTERFACE_VERSION */
  Version: BRIGHTNESS_INTERFACE_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPANEL_GET_BRIGHTNESS = 16;

export function allocPANEL_GET_BRIGHTNESS(data?: Partial<PANEL_GET_BRIGHTNESS>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_GET_BRIGHTNESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.CHROMATICITY_COORDINATE (size: 8)
 */
export interface CHROMATICITY_COORDINATE {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofCHROMATICITY_COORDINATE = 8;

export function allocCHROMATICITY_COORDINATE(data?: Partial<CHROMATICITY_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCHROMATICITY_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_BRIGHTNESS_SENSOR_DATA (size: 32)
 */
export interface PANEL_BRIGHTNESS_SENSOR_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  AlsReading: number;
  /** Windows.Win32.Devices.Display.CHROMATICITY_COORDINATE */
  ChromaticityCoordinate: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  ColorTemperature: number;
}

export const sizeofPANEL_BRIGHTNESS_SENSOR_DATA = 32;

export function allocPANEL_BRIGHTNESS_SENSOR_DATA(data?: Partial<PANEL_BRIGHTNESS_SENSOR_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_BRIGHTNESS_SENSOR_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: f32
  if (data?.AlsReading !== undefined) view.setFloat32(8, Number(data.AlsReading), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ChromaticityCoordinate !== undefined) view.setBigUint64(16, data.ChromaticityCoordinate === null ? 0n : BigInt(util.toPointer(data.ChromaticityCoordinate)), true);
  // 0x18: f32
  if (data?.ColorTemperature !== undefined) view.setFloat32(24, Number(data.ColorTemperature), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_SET_BRIGHTNESS (size: 16)
 */
export interface PANEL_SET_BRIGHTNESS {
  /** Windows.Win32.Devices.Display.BRIGHTNESS_INTERFACE_VERSION */
  Version: BRIGHTNESS_INTERFACE_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPANEL_SET_BRIGHTNESS = 16;

export function allocPANEL_SET_BRIGHTNESS(data?: Partial<PANEL_SET_BRIGHTNESS>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_SET_BRIGHTNESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_SET_BRIGHTNESS_STATE (size: 8)
 */
export interface PANEL_SET_BRIGHTNESS_STATE {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPANEL_SET_BRIGHTNESS_STATE = 8;

export function allocPANEL_SET_BRIGHTNESS_STATE(data?: Partial<PANEL_SET_BRIGHTNESS_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_SET_BRIGHTNESS_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_SET_BACKLIGHT_OPTIMIZATION (size: 8)
 */
export interface PANEL_SET_BACKLIGHT_OPTIMIZATION {
  /** Windows.Win32.Devices.Display.BACKLIGHT_OPTIMIZATION_LEVEL */
  Level: BACKLIGHT_OPTIMIZATION_LEVEL;
}

export const sizeofPANEL_SET_BACKLIGHT_OPTIMIZATION = 8;

export function allocPANEL_SET_BACKLIGHT_OPTIMIZATION(data?: Partial<PANEL_SET_BACKLIGHT_OPTIMIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_SET_BACKLIGHT_OPTIMIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Level !== undefined) view.setInt32(0, Number(data.Level), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.BACKLIGHT_REDUCTION_GAMMA_RAMP (size: 24)
 */
export interface BACKLIGHT_REDUCTION_GAMMA_RAMP {
  /** array */
  R: Deno.PointerValue | null;
  /** array */
  G: Deno.PointerValue | null;
  /** array */
  B: Deno.PointerValue | null;
}

export const sizeofBACKLIGHT_REDUCTION_GAMMA_RAMP = 24;

export function allocBACKLIGHT_REDUCTION_GAMMA_RAMP(data?: Partial<BACKLIGHT_REDUCTION_GAMMA_RAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofBACKLIGHT_REDUCTION_GAMMA_RAMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.R !== undefined) view.setBigUint64(0, data.R === null ? 0n : BigInt(util.toPointer(data.R)), true);
  // 0x08: pointer
  if (data?.G !== undefined) view.setBigUint64(8, data.G === null ? 0n : BigInt(util.toPointer(data.G)), true);
  // 0x10: pointer
  if (data?.B !== undefined) view.setBigUint64(16, data.B === null ? 0n : BigInt(util.toPointer(data.B)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.PANEL_GET_BACKLIGHT_REDUCTION (size: 16)
 */
export interface PANEL_GET_BACKLIGHT_REDUCTION {
  /** u16 */
  BacklightUsersetting: number;
  /** u16 */
  BacklightEffective: number;
  /** Windows.Win32.Devices.Display.BACKLIGHT_REDUCTION_GAMMA_RAMP */
  GammaRamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPANEL_GET_BACKLIGHT_REDUCTION = 16;

export function allocPANEL_GET_BACKLIGHT_REDUCTION(data?: Partial<PANEL_GET_BACKLIGHT_REDUCTION>): Uint8Array {
  const buf = new Uint8Array(sizeofPANEL_GET_BACKLIGHT_REDUCTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.BacklightUsersetting !== undefined) view.setUint16(0, Number(data.BacklightUsersetting), true);
  // 0x02: u16
  if (data?.BacklightEffective !== undefined) view.setUint16(2, Number(data.BacklightEffective), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GammaRamp !== undefined) view.setBigUint64(8, data.GammaRamp === null ? 0n : BigInt(util.toPointer(data.GammaRamp)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_DATA_CAP (size: 24)
 */
export interface COLORSPACE_TRANSFORM_DATA_CAP {
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_DATA_TYPE */
  DataType: COLORSPACE_TRANSFORM_DATA_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  NumericRangeMin: number;
  /** f32 */
  NumericRangeMax: number;
}

export const sizeofCOLORSPACE_TRANSFORM_DATA_CAP = 24;

export function allocCOLORSPACE_TRANSFORM_DATA_CAP(data?: Partial<COLORSPACE_TRANSFORM_DATA_CAP>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_DATA_CAP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DataType !== undefined) view.setInt32(0, Number(data.DataType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: f32
  if (data?.NumericRangeMin !== undefined) view.setFloat32(16, Number(data.NumericRangeMin), true);
  // 0x14: f32
  if (data?.NumericRangeMax !== undefined) view.setFloat32(20, Number(data.NumericRangeMax), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_1DLUT_CAP (size: 16)
 */
export interface COLORSPACE_TRANSFORM_1DLUT_CAP {
  /** u32 */
  NumberOfLUTEntries: number;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_DATA_CAP */
  DataCap: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM_1DLUT_CAP = 16;

export function allocCOLORSPACE_TRANSFORM_1DLUT_CAP(data?: Partial<COLORSPACE_TRANSFORM_1DLUT_CAP>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_1DLUT_CAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfLUTEntries !== undefined) view.setUint32(0, Number(data.NumberOfLUTEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DataCap !== undefined) view.setBigUint64(8, data.DataCap === null ? 0n : BigInt(util.toPointer(data.DataCap)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_MATRIX_CAP (size: 16)
 */
export interface COLORSPACE_TRANSFORM_MATRIX_CAP {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_DATA_CAP */
  DataCap: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM_MATRIX_CAP = 16;

export function allocCOLORSPACE_TRANSFORM_MATRIX_CAP(data?: Partial<COLORSPACE_TRANSFORM_MATRIX_CAP>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_MATRIX_CAP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.DataCap !== undefined) view.setBigUint64(8, data.DataCap === null ? 0n : BigInt(util.toPointer(data.DataCap)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_TARGET_CAPS (size: 32)
 */
export interface COLORSPACE_TRANSFORM_TARGET_CAPS {
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION */
  Version: COLORSPACE_TRANSFORM_TARGET_CAPS_VERSION;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_1DLUT_CAP */
  LookupTable1DDegammaCap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_MATRIX_CAP */
  ColorMatrix3x3Cap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_1DLUT_CAP */
  LookupTable1DRegammaCap: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM_TARGET_CAPS = 32;

export function allocCOLORSPACE_TRANSFORM_TARGET_CAPS(data?: Partial<COLORSPACE_TRANSFORM_TARGET_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_TARGET_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LookupTable1DDegammaCap !== undefined) view.setBigUint64(8, data.LookupTable1DDegammaCap === null ? 0n : BigInt(util.toPointer(data.LookupTable1DDegammaCap)), true);
  // 0x10: pointer
  if (data?.ColorMatrix3x3Cap !== undefined) view.setBigUint64(16, data.ColorMatrix3x3Cap === null ? 0n : BigInt(util.toPointer(data.ColorMatrix3x3Cap)), true);
  // 0x18: pointer
  if (data?.LookupTable1DRegammaCap !== undefined) view.setBigUint64(24, data.LookupTable1DRegammaCap === null ? 0n : BigInt(util.toPointer(data.LookupTable1DRegammaCap)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GAMMA_RAMP_RGB256x3x16 (size: 24)
 */
export interface GAMMA_RAMP_RGB256x3x16 {
  /** array */
  Red: Deno.PointerValue | null;
  /** array */
  Green: Deno.PointerValue | null;
  /** array */
  Blue: Deno.PointerValue | null;
}

export const sizeofGAMMA_RAMP_RGB256x3x16 = 24;

export function allocGAMMA_RAMP_RGB256x3x16(data?: Partial<GAMMA_RAMP_RGB256x3x16>): Uint8Array {
  const buf = new Uint8Array(sizeofGAMMA_RAMP_RGB256x3x16);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Red !== undefined) view.setBigUint64(0, data.Red === null ? 0n : BigInt(util.toPointer(data.Red)), true);
  // 0x08: pointer
  if (data?.Green !== undefined) view.setBigUint64(8, data.Green === null ? 0n : BigInt(util.toPointer(data.Green)), true);
  // 0x10: pointer
  if (data?.Blue !== undefined) view.setBigUint64(16, data.Blue === null ? 0n : BigInt(util.toPointer(data.Blue)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GAMMA_RAMP_RGB (size: 16)
 */
export interface GAMMA_RAMP_RGB {
  /** f32 */
  Red: number;
  /** f32 */
  Green: number;
  /** f32 */
  Blue: number;
}

export const sizeofGAMMA_RAMP_RGB = 16;

export function allocGAMMA_RAMP_RGB(data?: Partial<GAMMA_RAMP_RGB>): Uint8Array {
  const buf = new Uint8Array(sizeofGAMMA_RAMP_RGB);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Red !== undefined) view.setFloat32(0, Number(data.Red), true);
  // 0x04: f32
  if (data?.Green !== undefined) view.setFloat32(4, Number(data.Green), true);
  // 0x08: f32
  if (data?.Blue !== undefined) view.setFloat32(8, Number(data.Blue), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Display.GAMMA_RAMP_DXGI_1 (size: 24)
 */
export interface GAMMA_RAMP_DXGI_1 {
  /** Windows.Win32.Devices.Display.GAMMA_RAMP_RGB */
  Scale: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.GAMMA_RAMP_RGB */
  Offset: Uint8Array | Deno.PointerValue | null;
  /** array */
  GammaCurve: Deno.PointerValue | null;
}

export const sizeofGAMMA_RAMP_DXGI_1 = 24;

export function allocGAMMA_RAMP_DXGI_1(data?: Partial<GAMMA_RAMP_DXGI_1>): Uint8Array {
  const buf = new Uint8Array(sizeofGAMMA_RAMP_DXGI_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Scale !== undefined) view.setBigUint64(0, data.Scale === null ? 0n : BigInt(util.toPointer(data.Scale)), true);
  // 0x08: pointer
  if (data?.Offset !== undefined) view.setBigUint64(8, data.Offset === null ? 0n : BigInt(util.toPointer(data.Offset)), true);
  // 0x10: pointer
  if (data?.GammaCurve !== undefined) view.setBigUint64(16, data.GammaCurve === null ? 0n : BigInt(util.toPointer(data.GammaCurve)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_3x4 (size: 24)
 */
export interface COLORSPACE_TRANSFORM_3x4 {
  /** array */
  ColorMatrix3x4: Deno.PointerValue | null;
  /** f32 */
  ScalarMultiplier: number;
  /** array */
  LookupTable1D: Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM_3x4 = 24;

export function allocCOLORSPACE_TRANSFORM_3x4(data?: Partial<COLORSPACE_TRANSFORM_3x4>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_3x4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ColorMatrix3x4 !== undefined) view.setBigUint64(0, data.ColorMatrix3x4 === null ? 0n : BigInt(util.toPointer(data.ColorMatrix3x4)), true);
  // 0x08: f32
  if (data?.ScalarMultiplier !== undefined) view.setFloat32(8, Number(data.ScalarMultiplier), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.LookupTable1D !== undefined) view.setBigUint64(16, data.LookupTable1D === null ? 0n : BigInt(util.toPointer(data.LookupTable1D)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.OUTPUT_WIRE_FORMAT (size: 8)
 */
export interface OUTPUT_WIRE_FORMAT {
  /** Windows.Win32.Devices.Display.OUTPUT_COLOR_ENCODING */
  ColorEncoding: OUTPUT_COLOR_ENCODING;
  /** u32 */
  BitsPerPixel: number;
}

export const sizeofOUTPUT_WIRE_FORMAT = 8;

export function allocOUTPUT_WIRE_FORMAT(data?: Partial<OUTPUT_WIRE_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_WIRE_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ColorEncoding !== undefined) view.setInt32(0, Number(data.ColorEncoding), true);
  // 0x04: u32
  if (data?.BitsPerPixel !== undefined) view.setUint32(4, Number(data.BitsPerPixel), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_MATRIX_V2 (size: 48)
 */
export interface COLORSPACE_TRANSFORM_MATRIX_V2 {
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_STAGE_CONTROL */
  StageControlLookupTable1DDegamma: COLORSPACE_TRANSFORM_STAGE_CONTROL;
  /** array */
  LookupTable1DDegamma: Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_STAGE_CONTROL */
  StageControlColorMatrix3x3: COLORSPACE_TRANSFORM_STAGE_CONTROL;
  /** array */
  ColorMatrix3x3: Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_STAGE_CONTROL */
  StageControlLookupTable1DRegamma: COLORSPACE_TRANSFORM_STAGE_CONTROL;
  /** array */
  LookupTable1DRegamma: Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM_MATRIX_V2 = 48;

export function allocCOLORSPACE_TRANSFORM_MATRIX_V2(data?: Partial<COLORSPACE_TRANSFORM_MATRIX_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_MATRIX_V2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StageControlLookupTable1DDegamma !== undefined) view.setInt32(0, Number(data.StageControlLookupTable1DDegamma), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LookupTable1DDegamma !== undefined) view.setBigUint64(8, data.LookupTable1DDegamma === null ? 0n : BigInt(util.toPointer(data.LookupTable1DDegamma)), true);
  // 0x10: i32
  if (data?.StageControlColorMatrix3x3 !== undefined) view.setInt32(16, Number(data.StageControlColorMatrix3x3), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ColorMatrix3x3 !== undefined) view.setBigUint64(24, data.ColorMatrix3x3 === null ? 0n : BigInt(util.toPointer(data.ColorMatrix3x3)), true);
  // 0x20: i32
  if (data?.StageControlLookupTable1DRegamma !== undefined) view.setInt32(32, Number(data.StageControlLookupTable1DRegamma), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.LookupTable1DRegamma !== undefined) view.setBigUint64(40, data.LookupTable1DRegamma === null ? 0n : BigInt(util.toPointer(data.LookupTable1DRegamma)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA (size: 8)
 */
export interface RFCOMM_MSC_DATA {
  /** u8 */
  Signals: number;
  /** u8 */
  Break: number;
}

export const sizeofRFCOMM_MSC_DATA = 8;

export function allocRFCOMM_MSC_DATA(data?: Partial<RFCOMM_MSC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_MSC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Signals !== undefined) view.setUint8(0, Number(data.Signals));
  // 0x01: u8
  if (data?.Break !== undefined) view.setUint8(1, Number(data.Break));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA (size: 8)
 */
export interface RFCOMM_RLS_DATA {
  /** u8 */
  LineStatus: number;
}

export const sizeofRFCOMM_RLS_DATA = 8;

export function allocRFCOMM_RLS_DATA(data?: Partial<RFCOMM_RLS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RLS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.LineStatus !== undefined) view.setUint8(0, Number(data.LineStatus));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA (size: 8)
 */
export interface RFCOMM_RPN_DATA {
  /** u8 */
  Baud: number;
  /** u8 */
  Data: number;
  /** u8 */
  FlowControl: number;
  /** u8 */
  XonChar: number;
  /** u8 */
  XoffChar: number;
  /** u8 */
  ParameterMask1: number;
  /** u8 */
  ParameterMask2: number;
}

export const sizeofRFCOMM_RPN_DATA = 8;

export function allocRFCOMM_RPN_DATA(data?: Partial<RFCOMM_RPN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RPN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Baud !== undefined) view.setUint8(0, Number(data.Baud));
  // 0x01: u8
  if (data?.Data !== undefined) view.setUint8(1, Number(data.Data));
  // 0x02: u8
  if (data?.FlowControl !== undefined) view.setUint8(2, Number(data.FlowControl));
  // 0x03: u8
  if (data?.XonChar !== undefined) view.setUint8(3, Number(data.XonChar));
  // 0x04: u8
  if (data?.XoffChar !== undefined) view.setUint8(4, Number(data.XoffChar));
  // 0x05: u8
  if (data?.ParameterMask1 !== undefined) view.setUint8(5, Number(data.ParameterMask1));
  // 0x06: u8
  if (data?.ParameterMask2 !== undefined) view.setUint8(6, Number(data.ParameterMask2));
  // 0x07: pad1
  return buf;
}

/**
 * _Data_e__Union (size: 24)
 */
export interface _Data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA */
  MSC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA */
  RLS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA */
  RPN: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Data_e__Union = 24;

export function alloc_Data_e__Union(data?: Partial<_Data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MSC !== undefined) view.setBigUint64(0, data.MSC === null ? 0n : BigInt(util.toPointer(data.MSC)), true);
  // 0x08: pointer
  if (data?.RLS !== undefined) view.setBigUint64(8, data.RLS === null ? 0n : BigInt(util.toPointer(data.RLS)), true);
  // 0x10: pointer
  if (data?.RPN !== undefined) view.setBigUint64(16, data.RPN === null ? 0n : BigInt(util.toPointer(data.RPN)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM (size: 16)
 */
export interface COLORSPACE_TRANSFORM {
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_TYPE */
  Type: COLORSPACE_TRANSFORM_TYPE;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM = 16;

export function allocCOLORSPACE_TRANSFORM(data?: Partial<COLORSPACE_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM_SET_INPUT (size: 24)
 */
export interface COLORSPACE_TRANSFORM_SET_INPUT {
  /** Windows.Win32.Devices.Display.OUTPUT_WIRE_COLOR_SPACE_TYPE */
  OutputWireColorSpaceExpected: OUTPUT_WIRE_COLOR_SPACE_TYPE;
  /** Windows.Win32.Devices.Display.OUTPUT_WIRE_FORMAT */
  OutputWireFormatExpected: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Display.COLORSPACE_TRANSFORM */
  ColorSpaceTransform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOLORSPACE_TRANSFORM_SET_INPUT = 24;

export function allocCOLORSPACE_TRANSFORM_SET_INPUT(data?: Partial<COLORSPACE_TRANSFORM_SET_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSPACE_TRANSFORM_SET_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OutputWireColorSpaceExpected !== undefined) view.setInt32(0, Number(data.OutputWireColorSpaceExpected), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OutputWireFormatExpected !== undefined) view.setBigUint64(8, data.OutputWireFormatExpected === null ? 0n : BigInt(util.toPointer(data.OutputWireFormatExpected)), true);
  // 0x10: pointer
  if (data?.ColorSpaceTransform !== undefined) view.setBigUint64(16, data.ColorSpaceTransform === null ? 0n : BigInt(util.toPointer(data.ColorSpaceTransform)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.SET_ACTIVE_COLOR_PROFILE_NAME (size: 8)
 */
export interface SET_ACTIVE_COLOR_PROFILE_NAME {
  /** array */
  ColorProfileName: Deno.PointerValue | null;
}

export const sizeofSET_ACTIVE_COLOR_PROFILE_NAME = 8;

export function allocSET_ACTIVE_COLOR_PROFILE_NAME(data?: Partial<SET_ACTIVE_COLOR_PROFILE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofSET_ACTIVE_COLOR_PROFILE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ColorProfileName !== undefined) view.setBigUint64(0, data.ColorProfileName === null ? 0n : BigInt(util.toPointer(data.ColorProfileName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.MIPI_DSI_CAPS (size: 24)
 */
export interface MIPI_DSI_CAPS {
  /** u8 */
  DSITypeMajor: number;
  /** u8 */
  DSITypeMinor: number;
  /** u8 */
  SpecVersionMajor: number;
  /** u8 */
  SpecVersionMinor: number;
  /** u8 */
  SpecVersionPatch: number;
  /** u16 */
  TargetMaximumReturnPacketSize: number;
  /** u8 */
  ResultCodeFlags: number;
  /** u8 */
  ResultCodeStatus: number;
  /** u8 */
  Revision: number;
  /** u8 */
  Level: number;
  /** u8 */
  DeviceClassHi: number;
  /** u8 */
  DeviceClassLo: number;
  /** u8 */
  ManufacturerHi: number;
  /** u8 */
  ManufacturerLo: number;
  /** u8 */
  ProductHi: number;
  /** u8 */
  ProductLo: number;
  /** u8 */
  LengthHi: number;
  /** u8 */
  LengthLo: number;
}

export const sizeofMIPI_DSI_CAPS = 24;

export function allocMIPI_DSI_CAPS(data?: Partial<MIPI_DSI_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofMIPI_DSI_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.DSITypeMajor !== undefined) view.setUint8(0, Number(data.DSITypeMajor));
  // 0x01: u8
  if (data?.DSITypeMinor !== undefined) view.setUint8(1, Number(data.DSITypeMinor));
  // 0x02: u8
  if (data?.SpecVersionMajor !== undefined) view.setUint8(2, Number(data.SpecVersionMajor));
  // 0x03: u8
  if (data?.SpecVersionMinor !== undefined) view.setUint8(3, Number(data.SpecVersionMinor));
  // 0x04: u8
  if (data?.SpecVersionPatch !== undefined) view.setUint8(4, Number(data.SpecVersionPatch));
  // 0x05: u16
  if (data?.TargetMaximumReturnPacketSize !== undefined) view.setUint16(5, Number(data.TargetMaximumReturnPacketSize), true);
  // 0x07: u8
  if (data?.ResultCodeFlags !== undefined) view.setUint8(7, Number(data.ResultCodeFlags));
  // 0x08: u8
  if (data?.ResultCodeStatus !== undefined) view.setUint8(8, Number(data.ResultCodeStatus));
  // 0x09: u8
  if (data?.Revision !== undefined) view.setUint8(9, Number(data.Revision));
  // 0x0a: u8
  if (data?.Level !== undefined) view.setUint8(10, Number(data.Level));
  // 0x0b: u8
  if (data?.DeviceClassHi !== undefined) view.setUint8(11, Number(data.DeviceClassHi));
  // 0x0c: u8
  if (data?.DeviceClassLo !== undefined) view.setUint8(12, Number(data.DeviceClassLo));
  // 0x0d: u8
  if (data?.ManufacturerHi !== undefined) view.setUint8(13, Number(data.ManufacturerHi));
  // 0x0e: u8
  if (data?.ManufacturerLo !== undefined) view.setUint8(14, Number(data.ManufacturerLo));
  // 0x0f: u8
  if (data?.ProductHi !== undefined) view.setUint8(15, Number(data.ProductHi));
  // 0x10: u8
  if (data?.ProductLo !== undefined) view.setUint8(16, Number(data.ProductLo));
  // 0x11: u8
  if (data?.LengthHi !== undefined) view.setUint8(17, Number(data.LengthHi));
  // 0x12: u8
  if (data?.LengthLo !== undefined) view.setUint8(18, Number(data.LengthLo));
  // 0x13: pad5
  return buf;
}

/**
 * Windows.Win32.Devices.Display.MIPI_DSI_PACKET (size: 32)
 */
export interface MIPI_DSI_PACKET {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  EccFiller: number;
  /** array */
  Payload: Deno.PointerValue | null;
}

export const sizeofMIPI_DSI_PACKET = 32;

export function allocMIPI_DSI_PACKET(data?: Partial<MIPI_DSI_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofMIPI_DSI_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x10: u8
  if (data?.EccFiller !== undefined) view.setUint8(16, Number(data.EccFiller));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Payload !== undefined) view.setBigUint64(24, data.Payload === null ? 0n : BigInt(util.toPointer(data.Payload)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.MIPI_DSI_TRANSMISSION (size: 32)
 */
export interface MIPI_DSI_TRANSMISSION {
  /** u32 */
  TotalBufferSize: number;
  /** u8 */
  PacketCount: number;
  /** u8 */
  FailedPacket: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ReadWordCount: number;
  /** u16 */
  FinalCommandExtraPayload: number;
  /** u16 */
  MipiErrors: number;
  /** u16 */
  HostErrors: number;
  /** array */
  Packets: Deno.PointerValue | null;
}

export const sizeofMIPI_DSI_TRANSMISSION = 32;

export function allocMIPI_DSI_TRANSMISSION(data?: Partial<MIPI_DSI_TRANSMISSION>): Uint8Array {
  const buf = new Uint8Array(sizeofMIPI_DSI_TRANSMISSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TotalBufferSize !== undefined) view.setUint32(0, Number(data.TotalBufferSize), true);
  // 0x04: u8
  if (data?.PacketCount !== undefined) view.setUint8(4, Number(data.PacketCount));
  // 0x05: u8
  if (data?.FailedPacket !== undefined) view.setUint8(5, Number(data.FailedPacket));
  // 0x06: pad2
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u16
  if (data?.ReadWordCount !== undefined) view.setUint16(16, Number(data.ReadWordCount), true);
  // 0x12: u16
  if (data?.FinalCommandExtraPayload !== undefined) view.setUint16(18, Number(data.FinalCommandExtraPayload), true);
  // 0x14: u16
  if (data?.MipiErrors !== undefined) view.setUint16(20, Number(data.MipiErrors), true);
  // 0x16: u16
  if (data?.HostErrors !== undefined) view.setUint16(22, Number(data.HostErrors), true);
  // 0x18: pointer
  if (data?.Packets !== undefined) view.setBigUint64(24, data.Packets === null ? 0n : BigInt(util.toPointer(data.Packets)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Display.MIPI_DSI_RESET (size: 16)
 */
export interface MIPI_DSI_RESET {
  /** u32 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMIPI_DSI_RESET = 16;

export function allocMIPI_DSI_RESET(data?: Partial<MIPI_DSI_RESET>): Uint8Array {
  const buf = new Uint8Array(sizeofMIPI_DSI_RESET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HMONITOR = Deno.PointerValue;

export type HRESULT = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type HBITMAP = Deno.PointerValue;

// Native Libraries

try {
  var libdxva2_dll = Deno.dlopen("dxva2.dll", {
    GetNumberOfPhysicalMonitorsFromHMONITOR: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetNumberOfPhysicalMonitorsFromIDirect3DDevice9: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetPhysicalMonitorsFromHMONITOR: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPhysicalMonitorsFromIDirect3DDevice9: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    DestroyPhysicalMonitor: {
      parameters: ["pointer"],
      result: "i32",
    },
    DestroyPhysicalMonitors: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetVCPFeatureAndVCPFeatureReply: {
      parameters: ["pointer", "u8", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetVCPFeature: {
      parameters: ["pointer", "u8", "u32"],
      result: "i32",
    },
    SaveCurrentSettings: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetCapabilitiesStringLength: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    CapabilitiesRequestAndCapabilitiesReply: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    GetTimingReport: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetMonitorCapabilities: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SaveCurrentMonitorSettings: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetMonitorTechnologyType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetMonitorBrightness: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetMonitorContrast: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetMonitorColorTemperature: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetMonitorRedGreenOrBlueDrive: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetMonitorRedGreenOrBlueGain: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetMonitorBrightness: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetMonitorContrast: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetMonitorColorTemperature: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SetMonitorRedGreenOrBlueDrive: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    SetMonitorRedGreenOrBlueGain: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    DegaussMonitor: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetMonitorDisplayAreaSize: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetMonitorDisplayAreaPosition: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetMonitorDisplayAreaSize: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    SetMonitorDisplayAreaPosition: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    RestoreMonitorFactoryColorDefaults: {
      parameters: ["pointer"],
      result: "i32",
    },
    RestoreMonitorFactoryDefaults: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    BRUSHOBJ_pvAllocRbrush: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    BRUSHOBJ_pvGetRbrush: {
      parameters: ["pointer"],
      result: "pointer",
    },
    BRUSHOBJ_ulGetBrushColor: {
      parameters: ["pointer"],
      result: "u32",
    },
    BRUSHOBJ_hGetColorTransform: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CLIPOBJ_cEnumStart: {
      parameters: ["pointer", "i32", "u32", "u32", "u32"],
      result: "u32",
    },
    CLIPOBJ_bEnum: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    CLIPOBJ_ppoGetPath: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FONTOBJ_cGetAllGlyphHandles: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    FONTOBJ_vGetInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    FONTOBJ_cGetGlyphs: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FONTOBJ_pxoGetXform: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FONTOBJ_pifi: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FONTOBJ_pfdg: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FONTOBJ_pvTrueTypeFontFile: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    FONTOBJ_pQueryGlyphAttrs: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    PATHOBJ_vEnumStart: {
      parameters: ["pointer"],
      result: "void",
    },
    PATHOBJ_bEnum: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PATHOBJ_vEnumStartClipLines: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    PATHOBJ_bEnumClipLines: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    PATHOBJ_vGetBounds: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    STROBJ_vEnumStart: {
      parameters: ["pointer"],
      result: "void",
    },
    STROBJ_bEnum: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    STROBJ_bEnumPositionsOnly: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    STROBJ_dwGetCodePage: {
      parameters: ["pointer"],
      result: "u32",
    },
    STROBJ_bGetAdvanceWidths: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    XFORMOBJ_iGetXform: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    XFORMOBJ_bApplyXform: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    XLATEOBJ_iXlate: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    XLATEOBJ_piVector: {
      parameters: ["pointer"],
      result: "pointer",
    },
    XLATEOBJ_cGetPalette: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    XLATEOBJ_hGetColorTransform: {
      parameters: ["pointer"],
      result: "pointer",
    },
    EngCreateBitmap: {
      parameters: ["pointer", "i32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    EngCreateDeviceSurface: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    EngCreateDeviceBitmap: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    EngDeleteSurface: {
      parameters: ["pointer"],
      result: "i32",
    },
    EngLockSurface: {
      parameters: ["pointer"],
      result: "pointer",
    },
    EngUnlockSurface: {
      parameters: ["pointer"],
      result: "void",
    },
    EngEraseSurface: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    EngAssociateSurface: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    EngMarkBandingSurface: {
      parameters: ["pointer"],
      result: "i32",
    },
    EngCheckAbort: {
      parameters: ["pointer"],
      result: "i32",
    },
    EngDeletePath: {
      parameters: ["pointer"],
      result: "void",
    },
    EngCreatePalette: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "u32"],
      result: "pointer",
    },
    EngDeletePalette: {
      parameters: ["pointer"],
      result: "i32",
    },
    EngCreateClip: {
      parameters: [],
      result: "pointer",
    },
    EngDeleteClip: {
      parameters: ["pointer"],
      result: "void",
    },
    EngBitBlt: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EngLineTo: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32", "i32", "pointer", "u32"],
      result: "i32",
    },
    EngStretchBlt: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EngStretchBltROP: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    EngAlphaBlend: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    EngGradientFill: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EngTransparentBlt: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    EngTextOut: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EngStrokePath: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EngFillPath: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    EngStrokeAndFillPath: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32", "u32"],
      result: "i32",
    },
    EngPaint: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    EngCopyBits: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    EngPlgBlt: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    HT_Get8BPPFormatPalette: {
      parameters: ["pointer", "u16", "u16", "u16"],
      result: "i32",
    },
    HT_Get8BPPMaskPalette: {
      parameters: ["pointer", "i32", "u8", "u16", "u16", "u16"],
      result: "i32",
    },
    EngGetPrinterDataFileName: {
      parameters: ["pointer"],
      result: "buffer",
    },
    EngGetDriverName: {
      parameters: ["pointer"],
      result: "buffer",
    },
    EngLoadModule: {
      parameters: ["buffer"],
      result: "pointer",
    },
    EngFindResource: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    EngFreeModule: {
      parameters: ["pointer"],
      result: "void",
    },
    EngCreateSemaphore: {
      parameters: [],
      result: "pointer",
    },
    EngAcquireSemaphore: {
      parameters: ["pointer"],
      result: "void",
    },
    EngReleaseSemaphore: {
      parameters: ["pointer"],
      result: "void",
    },
    EngDeleteSemaphore: {
      parameters: ["pointer"],
      result: "void",
    },
    EngMultiByteToUnicodeN: {
      parameters: ["buffer", "u32", "pointer", "buffer", "u32"],
      result: "void",
    },
    EngUnicodeToMultiByteN: {
      parameters: ["buffer", "u32", "pointer", "buffer", "u32"],
      result: "void",
    },
    EngQueryLocalTime: {
      parameters: ["pointer"],
      result: "void",
    },
    EngComputeGlyphSet: {
      parameters: ["i32", "i32", "i32"],
      result: "pointer",
    },
    EngMultiByteToWideChar: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    EngWideCharToMultiByte: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    EngGetCurrentCodePage: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    EngQueryEMFInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    GetDisplayConfigBufferSizes: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    SetDisplayConfig: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    QueryDisplayConfig: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DisplayConfigGetDeviceInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    DisplayConfigSetDeviceInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetAutoRotationState: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetDisplayAutoRotationPreferences: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetDisplayAutoRotationPreferences: {
      parameters: ["i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetNumberOfPhysicalMonitorsFromHMONITOR(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  pdwNumberOfPhysicalMonitors: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetNumberOfPhysicalMonitorsFromHMONITOR(util.toPointer(hMonitor), util.toPointer(pdwNumberOfPhysicalMonitors));
}

export function GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(
  pDirect3DDevice9: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D9.IDirect3DDevice9 */,
  pdwNumberOfPhysicalMonitors: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxva2_dll.GetNumberOfPhysicalMonitorsFromIDirect3DDevice9(util.toPointer(pDirect3DDevice9), util.toPointer(pdwNumberOfPhysicalMonitors)));
}

export function GetPhysicalMonitorsFromHMONITOR(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  dwPhysicalMonitorArraySize: number /* u32 */,
  pPhysicalMonitorArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetPhysicalMonitorsFromHMONITOR(util.toPointer(hMonitor), dwPhysicalMonitorArraySize, util.toPointer(pPhysicalMonitorArray));
}

export function GetPhysicalMonitorsFromIDirect3DDevice9(
  pDirect3DDevice9: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D9.IDirect3DDevice9 */,
  dwPhysicalMonitorArraySize: number /* u32 */,
  pPhysicalMonitorArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxva2_dll.GetPhysicalMonitorsFromIDirect3DDevice9(util.toPointer(pDirect3DDevice9), dwPhysicalMonitorArraySize, util.toPointer(pPhysicalMonitorArray)));
}

export function DestroyPhysicalMonitor(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libdxva2_dll.DestroyPhysicalMonitor(util.toPointer(hMonitor));
}

export function DestroyPhysicalMonitors(
  dwPhysicalMonitorArraySize: number /* u32 */,
  pPhysicalMonitorArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.DestroyPhysicalMonitors(dwPhysicalMonitorArraySize, util.toPointer(pPhysicalMonitorArray));
}

export function GetVCPFeatureAndVCPFeatureReply(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bVCPCode: number /* u8 */,
  pvct: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetVCPFeatureAndVCPFeatureReply(util.toPointer(hMonitor), bVCPCode, util.toPointer(pvct), util.toPointer(pdwCurrentValue), util.toPointer(pdwMaximumValue));
}

export function SetVCPFeature(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  bVCPCode: number /* u8 */,
  dwNewValue: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetVCPFeature(util.toPointer(hMonitor), bVCPCode, dwNewValue);
}

export function SaveCurrentSettings(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libdxva2_dll.SaveCurrentSettings(util.toPointer(hMonitor));
}

export function GetCapabilitiesStringLength(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwCapabilitiesStringLengthInCharacters: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetCapabilitiesStringLength(util.toPointer(hMonitor), util.toPointer(pdwCapabilitiesStringLengthInCharacters));
}

export function CapabilitiesRequestAndCapabilitiesReply(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszASCIICapabilitiesString: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCapabilitiesStringLengthInCharacters: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.CapabilitiesRequestAndCapabilitiesReply(util.toPointer(hMonitor), util.pstrToFfi(pszASCIICapabilitiesString), dwCapabilitiesStringLengthInCharacters);
}

export function GetTimingReport(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pmtrMonitorTimingReport: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetTimingReport(util.toPointer(hMonitor), util.toPointer(pmtrMonitorTimingReport));
}

export function GetMonitorCapabilities(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwMonitorCapabilities: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSupportedColorTemperatures: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorCapabilities(util.toPointer(hMonitor), util.toPointer(pdwMonitorCapabilities), util.toPointer(pdwSupportedColorTemperatures));
}

export function SaveCurrentMonitorSettings(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libdxva2_dll.SaveCurrentMonitorSettings(util.toPointer(hMonitor));
}

export function GetMonitorTechnologyType(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdtyDisplayTechnologyType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorTechnologyType(util.toPointer(hMonitor), util.toPointer(pdtyDisplayTechnologyType));
}

export function GetMonitorBrightness(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwMinimumBrightness: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentBrightness: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumBrightness: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorBrightness(util.toPointer(hMonitor), util.toPointer(pdwMinimumBrightness), util.toPointer(pdwCurrentBrightness), util.toPointer(pdwMaximumBrightness));
}

export function GetMonitorContrast(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwMinimumContrast: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentContrast: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumContrast: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorContrast(util.toPointer(hMonitor), util.toPointer(pdwMinimumContrast), util.toPointer(pdwCurrentContrast), util.toPointer(pdwMaximumContrast));
}

export function GetMonitorColorTemperature(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pctCurrentColorTemperature: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorColorTemperature(util.toPointer(hMonitor), util.toPointer(pctCurrentColorTemperature));
}

export function GetMonitorRedGreenOrBlueDrive(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dtDriveType: MC_DRIVE_TYPE /* Windows.Win32.Devices.Display.MC_DRIVE_TYPE */,
  pdwMinimumDrive: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentDrive: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumDrive: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorRedGreenOrBlueDrive(util.toPointer(hMonitor), dtDriveType, util.toPointer(pdwMinimumDrive), util.toPointer(pdwCurrentDrive), util.toPointer(pdwMaximumDrive));
}

export function GetMonitorRedGreenOrBlueGain(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  gtGainType: MC_GAIN_TYPE /* Windows.Win32.Devices.Display.MC_GAIN_TYPE */,
  pdwMinimumGain: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentGain: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumGain: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorRedGreenOrBlueGain(util.toPointer(hMonitor), gtGainType, util.toPointer(pdwMinimumGain), util.toPointer(pdwCurrentGain), util.toPointer(pdwMaximumGain));
}

export function SetMonitorBrightness(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwNewBrightness: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorBrightness(util.toPointer(hMonitor), dwNewBrightness);
}

export function SetMonitorContrast(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwNewContrast: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorContrast(util.toPointer(hMonitor), dwNewContrast);
}

export function SetMonitorColorTemperature(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ctCurrentColorTemperature: MC_COLOR_TEMPERATURE /* Windows.Win32.Devices.Display.MC_COLOR_TEMPERATURE */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorColorTemperature(util.toPointer(hMonitor), ctCurrentColorTemperature);
}

export function SetMonitorRedGreenOrBlueDrive(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dtDriveType: MC_DRIVE_TYPE /* Windows.Win32.Devices.Display.MC_DRIVE_TYPE */,
  dwNewDrive: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorRedGreenOrBlueDrive(util.toPointer(hMonitor), dtDriveType, dwNewDrive);
}

export function SetMonitorRedGreenOrBlueGain(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  gtGainType: MC_GAIN_TYPE /* Windows.Win32.Devices.Display.MC_GAIN_TYPE */,
  dwNewGain: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorRedGreenOrBlueGain(util.toPointer(hMonitor), gtGainType, dwNewGain);
}

export function DegaussMonitor(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libdxva2_dll.DegaussMonitor(util.toPointer(hMonitor));
}

export function GetMonitorDisplayAreaSize(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  stSizeType: MC_SIZE_TYPE /* Windows.Win32.Devices.Display.MC_SIZE_TYPE */,
  pdwMinimumWidthOrHeight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentWidthOrHeight: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumWidthOrHeight: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorDisplayAreaSize(util.toPointer(hMonitor), stSizeType, util.toPointer(pdwMinimumWidthOrHeight), util.toPointer(pdwCurrentWidthOrHeight), util.toPointer(pdwMaximumWidthOrHeight));
}

export function GetMonitorDisplayAreaPosition(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ptPositionType: MC_POSITION_TYPE /* Windows.Win32.Devices.Display.MC_POSITION_TYPE */,
  pdwMinimumPosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCurrentPosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwMaximumPosition: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libdxva2_dll.GetMonitorDisplayAreaPosition(util.toPointer(hMonitor), ptPositionType, util.toPointer(pdwMinimumPosition), util.toPointer(pdwCurrentPosition), util.toPointer(pdwMaximumPosition));
}

export function SetMonitorDisplayAreaSize(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  stSizeType: MC_SIZE_TYPE /* Windows.Win32.Devices.Display.MC_SIZE_TYPE */,
  dwNewDisplayAreaWidthOrHeight: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorDisplayAreaSize(util.toPointer(hMonitor), stSizeType, dwNewDisplayAreaWidthOrHeight);
}

export function SetMonitorDisplayAreaPosition(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ptPositionType: MC_POSITION_TYPE /* Windows.Win32.Devices.Display.MC_POSITION_TYPE */,
  dwNewPosition: number /* u32 */,
): number /* i32 */ {
  return libdxva2_dll.SetMonitorDisplayAreaPosition(util.toPointer(hMonitor), ptPositionType, dwNewPosition);
}

export function RestoreMonitorFactoryColorDefaults(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libdxva2_dll.RestoreMonitorFactoryColorDefaults(util.toPointer(hMonitor));
}

export function RestoreMonitorFactoryDefaults(
  hMonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libdxva2_dll.RestoreMonitorFactoryDefaults(util.toPointer(hMonitor));
}

export function BRUSHOBJ_pvAllocRbrush(
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cj: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.BRUSHOBJ_pvAllocRbrush(util.toPointer(pbo), cj));
}

export function BRUSHOBJ_pvGetRbrush(
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.BRUSHOBJ_pvGetRbrush(util.toPointer(pbo)));
}

export function BRUSHOBJ_ulGetBrushColor(
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.BRUSHOBJ_ulGetBrushColor(util.toPointer(pbo));
}

export function BRUSHOBJ_hGetColorTransform(
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libGDI32_dll.BRUSHOBJ_hGetColorTransform(util.toPointer(pbo)));
}

export function CLIPOBJ_cEnumStart(
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  bAll: boolean /* Windows.Win32.Foundation.BOOL */,
  iType: number /* u32 */,
  iDirection: number /* u32 */,
  cLimit: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.CLIPOBJ_cEnumStart(util.toPointer(pco), util.boolToFfi(bAll), iType, iDirection, cLimit);
}

export function CLIPOBJ_bEnum(
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  cj: number /* u32 */,
  pul: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CLIPOBJ_bEnum(util.toPointer(pco), cj, util.toPointer(pul)));
}

export function CLIPOBJ_ppoGetPath(
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.CLIPOBJ_ppoGetPath(util.toPointer(pco)));
}

export function FONTOBJ_cGetAllGlyphHandles(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  phg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.FONTOBJ_cGetAllGlyphHandles(util.toPointer(pfo), util.toPointer(phg));
}

export function FONTOBJ_vGetInfo(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cjSize: number /* u32 */,
  pfi: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.FONTOBJ_vGetInfo(util.toPointer(pfo), cjSize, util.toPointer(pfi));
}

export function FONTOBJ_cGetGlyphs(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  iMode: number /* u32 */,
  cGlyph: number /* u32 */,
  phg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvGlyph: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.FONTOBJ_cGetGlyphs(util.toPointer(pfo), iMode, cGlyph, util.toPointer(phg), util.toPointer(ppvGlyph));
}

export function FONTOBJ_pxoGetXform(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.FONTOBJ_pxoGetXform(util.toPointer(pfo)));
}

export function FONTOBJ_pifi(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.FONTOBJ_pifi(util.toPointer(pfo)));
}

export function FONTOBJ_pfdg(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.FONTOBJ_pfdg(util.toPointer(pfo)));
}

export function FONTOBJ_pvTrueTypeFontFile(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcjFile: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.FONTOBJ_pvTrueTypeFontFile(util.toPointer(pfo), util.toPointer(pcjFile)));
}

export function FONTOBJ_pQueryGlyphAttrs(
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  iMode: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.FONTOBJ_pQueryGlyphAttrs(util.toPointer(pfo), iMode));
}

export function PATHOBJ_vEnumStart(
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.PATHOBJ_vEnumStart(util.toPointer(ppo));
}

export function PATHOBJ_bEnum(
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppd: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PATHOBJ_bEnum(util.toPointer(ppo), util.toPointer(ppd)));
}

export function PATHOBJ_vEnumStartClipLines(
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  pla: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.PATHOBJ_vEnumStartClipLines(util.toPointer(ppo), util.toPointer(pco), util.toPointer(pso), util.toPointer(pla));
}

export function PATHOBJ_bEnumClipLines(
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
  pcl: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.PATHOBJ_bEnumClipLines(util.toPointer(ppo), cb, util.toPointer(pcl)));
}

export function PATHOBJ_vGetBounds(
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  prectfx: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.PATHOBJ_vGetBounds(util.toPointer(ppo), util.toPointer(prectfx));
}

export function STROBJ_vEnumStart(
  pstro: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.STROBJ_vEnumStart(util.toPointer(pstro));
}

export function STROBJ_bEnum(
  pstro: Deno.PointerValue | Uint8Array | null /* ptr */,
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppgpos: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.STROBJ_bEnum(util.toPointer(pstro), util.toPointer(pc), util.toPointer(ppgpos)));
}

export function STROBJ_bEnumPositionsOnly(
  pstro: Deno.PointerValue | Uint8Array | null /* ptr */,
  pc: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppgpos: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.STROBJ_bEnumPositionsOnly(util.toPointer(pstro), util.toPointer(pc), util.toPointer(ppgpos)));
}

export function STROBJ_dwGetCodePage(
  pstro: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.STROBJ_dwGetCodePage(util.toPointer(pstro));
}

export function STROBJ_bGetAdvanceWidths(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  iFirst: number /* u32 */,
  c: number /* u32 */,
  pptqD: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.STROBJ_bGetAdvanceWidths(util.toPointer(pso), iFirst, c, util.toPointer(pptqD)));
}

export function XFORMOBJ_iGetXform(
  pxo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxform: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.XFORMOBJ_iGetXform(util.toPointer(pxo), util.toPointer(pxform));
}

export function XFORMOBJ_bApplyXform(
  pxo: Deno.PointerValue | Uint8Array | null /* ptr */,
  iMode: number /* u32 */,
  cPoints: number /* u32 */,
  pvIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.XFORMOBJ_bApplyXform(util.toPointer(pxo), iMode, cPoints, util.toPointer(pvIn), util.toPointer(pvOut)));
}

export function XLATEOBJ_iXlate(
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  iColor: number /* u32 */,
): number /* u32 */ {
  return libGDI32_dll.XLATEOBJ_iXlate(util.toPointer(pxlo), iColor);
}

export function XLATEOBJ_piVector(
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.XLATEOBJ_piVector(util.toPointer(pxlo)));
}

export function XLATEOBJ_cGetPalette(
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  iPal: number /* u32 */,
  cPal: number /* u32 */,
  pPal: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libGDI32_dll.XLATEOBJ_cGetPalette(util.toPointer(pxlo), iPal, cPal, util.toPointer(pPal));
}

export function XLATEOBJ_hGetColorTransform(
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libGDI32_dll.XLATEOBJ_hGetColorTransform(util.toPointer(pxlo)));
}

export function EngCreateBitmap(
  sizl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.SIZE */,
  lWidth: number /* i32 */,
  iFormat: number /* u32 */,
  fl: number /* u32 */,
  pvBits: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return util.pointerFromFfi(libGDI32_dll.EngCreateBitmap(util.toPointer(sizl), lWidth, iFormat, fl, util.toPointer(pvBits)));
}

export function EngCreateDeviceSurface(
  dhsurf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.DHSURF */,
  sizl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.SIZE */,
  iFormatCompat: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSURF */ {
  return util.pointerFromFfi(libGDI32_dll.EngCreateDeviceSurface(util.toPointer(dhsurf), util.toPointer(sizl), iFormatCompat));
}

export function EngCreateDeviceBitmap(
  dhsurf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.DHSURF */,
  sizl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.SIZE */,
  iFormatCompat: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return util.pointerFromFfi(libGDI32_dll.EngCreateDeviceBitmap(util.toPointer(dhsurf), util.toPointer(sizl), iFormatCompat));
}

export function EngDeleteSurface(
  hsurf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSURF */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngDeleteSurface(util.toPointer(hsurf)));
}

export function EngLockSurface(
  hsurf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSURF */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.EngLockSurface(util.toPointer(hsurf)));
}

export function EngUnlockSurface(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.EngUnlockSurface(util.toPointer(pso));
}

export function EngEraseSurface(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  prcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  iColor: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngEraseSurface(util.toPointer(pso), util.toPointer(prcl), iColor));
}

export function EngAssociateSurface(
  hsurf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSURF */,
  hdev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HDEV */,
  flHooks: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngAssociateSurface(util.toPointer(hsurf), util.toPointer(hdev), flHooks));
}

export function EngMarkBandingSurface(
  hsurf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSURF */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngMarkBandingSurface(util.toPointer(hsurf)));
}

export function EngCheckAbort(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngCheckAbort(util.toPointer(pso)));
}

export function EngDeletePath(
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.EngDeletePath(util.toPointer(ppo));
}

export function EngCreatePalette(
  iMode: number /* u32 */,
  cColors: number /* u32 */,
  pulColors: Deno.PointerValue | Uint8Array | null /* ptr */,
  flRed: number /* u32 */,
  flGreen: number /* u32 */,
  flBlue: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */ {
  return util.pointerFromFfi(libGDI32_dll.EngCreatePalette(iMode, cColors, util.toPointer(pulColors), flRed, flGreen, flBlue));
}

export function EngDeletePalette(
  hpal: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngDeletePalette(util.toPointer(hpal)));
}

export function EngCreateClip(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.EngCreateClip());
}

export function EngDeleteClip(
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.EngDeleteClip(util.toPointer(pco));
}

export function EngBitBlt(
  psoTrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclTrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlBrush: Deno.PointerValue | Uint8Array | null /* ptr */,
  rop4: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngBitBlt(util.toPointer(psoTrg), util.toPointer(psoSrc), util.toPointer(psoMask), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(prclTrg), util.toPointer(pptlSrc), util.toPointer(pptlMask), util.toPointer(pbo), util.toPointer(pptlBrush), rop4));
}

export function EngLineTo(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  x1: number /* i32 */,
  y1: number /* i32 */,
  x2: number /* i32 */,
  y2: number /* i32 */,
  prclBounds: Deno.PointerValue | Uint8Array | null /* ptr */,
  mix: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngLineTo(util.toPointer(pso), util.toPointer(pco), util.toPointer(pbo), x1, y1, x2, y2, util.toPointer(prclBounds), mix));
}

export function EngStretchBlt(
  psoDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pca: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlHTOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  iMode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngStretchBlt(util.toPointer(psoDest), util.toPointer(psoSrc), util.toPointer(psoMask), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(pca), util.toPointer(pptlHTOrg), util.toPointer(prclDest), util.toPointer(prclSrc), util.toPointer(pptlMask), iMode));
}

export function EngStretchBltROP(
  psoDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pca: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlHTOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  iMode: number /* u32 */,
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  rop4: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngStretchBltROP(util.toPointer(psoDest), util.toPointer(psoSrc), util.toPointer(psoMask), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(pca), util.toPointer(pptlHTOrg), util.toPointer(prclDest), util.toPointer(prclSrc), util.toPointer(pptlMask), iMode, util.toPointer(pbo), rop4));
}

export function EngAlphaBlend(
  psoDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBlendObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngAlphaBlend(util.toPointer(psoDest), util.toPointer(psoSrc), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(prclDest), util.toPointer(prclSrc), util.toPointer(pBlendObj)));
}

export function EngGradientFill(
  psoDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pVertex: Deno.PointerValue | Uint8Array | null /* ptr */,
  nVertex: number /* u32 */,
  pMesh: Deno.PointerValue | Uint8Array | null /* ptr */,
  nMesh: number /* u32 */,
  prclExtents: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlDitherOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulMode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngGradientFill(util.toPointer(psoDest), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(pVertex), nVertex, util.toPointer(pMesh), nMesh, util.toPointer(prclExtents), util.toPointer(pptlDitherOrg), ulMode));
}

export function EngTransparentBlt(
  psoDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  TransColor: number /* u32 */,
  bCalledFromBitBlt: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngTransparentBlt(util.toPointer(psoDst), util.toPointer(psoSrc), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(prclDst), util.toPointer(prclSrc), TransColor, bCalledFromBitBlt));
}

export function EngTextOut(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstro: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclOpaque: Deno.PointerValue | Uint8Array | null /* ptr */,
  pboFore: Deno.PointerValue | Uint8Array | null /* ptr */,
  pboOpaque: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  mix: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngTextOut(util.toPointer(pso), util.toPointer(pstro), util.toPointer(pfo), util.toPointer(pco), util.toPointer(prclExtra), util.toPointer(prclOpaque), util.toPointer(pboFore), util.toPointer(pboOpaque), util.toPointer(pptlOrg), mix));
}

export function EngStrokePath(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlBrushOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  plineattrs: Deno.PointerValue | Uint8Array | null /* ptr */,
  mix: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngStrokePath(util.toPointer(pso), util.toPointer(ppo), util.toPointer(pco), util.toPointer(pxo), util.toPointer(pbo), util.toPointer(pptlBrushOrg), util.toPointer(plineattrs), mix));
}

export function EngFillPath(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlBrushOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  mix: number /* u32 */,
  flOptions: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngFillPath(util.toPointer(pso), util.toPointer(ppo), util.toPointer(pco), util.toPointer(pbo), util.toPointer(pptlBrushOrg), mix, flOptions));
}

export function EngStrokeAndFillPath(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pboStroke: Deno.PointerValue | Uint8Array | null /* ptr */,
  plineattrs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pboFill: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlBrushOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  mixFill: number /* u32 */,
  flOptions: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngStrokeAndFillPath(util.toPointer(pso), util.toPointer(ppo), util.toPointer(pco), util.toPointer(pxo), util.toPointer(pboStroke), util.toPointer(plineattrs), util.toPointer(pboFill), util.toPointer(pptlBrushOrg), mixFill, flOptions));
}

export function EngPaint(
  pso: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlBrushOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  mix: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngPaint(util.toPointer(pso), util.toPointer(pco), util.toPointer(pbo), util.toPointer(pptlBrushOrg), mix));
}

export function EngCopyBits(
  psoDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  prclDest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngCopyBits(util.toPointer(psoDest), util.toPointer(psoSrc), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(prclDest), util.toPointer(pptlSrc)));
}

export function EngPlgBlt(
  psoTrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoSrc: Deno.PointerValue | Uint8Array | null /* ptr */,
  psoMsk: Deno.PointerValue | Uint8Array | null /* ptr */,
  pco: Deno.PointerValue | Uint8Array | null /* ptr */,
  pxlo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pca: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptlBrushOrg: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptfx: Deno.PointerValue | Uint8Array | null /* ptr */,
  prcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptl: Deno.PointerValue | Uint8Array | null /* ptr */,
  iMode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngPlgBlt(util.toPointer(psoTrg), util.toPointer(psoSrc), util.toPointer(psoMsk), util.toPointer(pco), util.toPointer(pxlo), util.toPointer(pca), util.toPointer(pptlBrushOrg), util.toPointer(pptfx), util.toPointer(prcl), util.toPointer(pptl), iMode));
}

export function HT_Get8BPPFormatPalette(
  pPaletteEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  RedGamma: number /* u16 */,
  GreenGamma: number /* u16 */,
  BlueGamma: number /* u16 */,
): number /* i32 */ {
  return libGDI32_dll.HT_Get8BPPFormatPalette(util.toPointer(pPaletteEntry), RedGamma, GreenGamma, BlueGamma);
}

export function HT_Get8BPPMaskPalette(
  pPaletteEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  Use8BPPMaskPal: boolean /* Windows.Win32.Foundation.BOOL */,
  CMYMask: number /* u8 */,
  RedGamma: number /* u16 */,
  GreenGamma: number /* u16 */,
  BlueGamma: number /* u16 */,
): number /* i32 */ {
  return libGDI32_dll.HT_Get8BPPMaskPalette(util.toPointer(pPaletteEntry), util.boolToFfi(Use8BPPMaskPal), CMYMask, RedGamma, GreenGamma, BlueGamma);
}

export function EngGetPrinterDataFileName(
  hdev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HDEV */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libGDI32_dll.EngGetPrinterDataFileName(util.toPointer(hdev)));
}

export function EngGetDriverName(
  hdev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HDEV */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libGDI32_dll.EngGetDriverName(util.toPointer(hdev)));
}

export function EngLoadModule(
  pwsz: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libGDI32_dll.EngLoadModule(util.pwstrToFfi(pwsz)));
}

export function EngFindResource(
  h: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  iName: number /* i32 */,
  iType: number /* i32 */,
  pulSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.EngFindResource(util.toPointer(h), iName, iType, util.toPointer(pulSize)));
}

export function EngFreeModule(
  h: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libGDI32_dll.EngFreeModule(util.toPointer(h));
}

export function EngCreateSemaphore(): Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSEMAPHORE */ {
  return util.pointerFromFfi(libGDI32_dll.EngCreateSemaphore());
}

export function EngAcquireSemaphore(
  hsem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSEMAPHORE */,
): void /* void */ {
  return libGDI32_dll.EngAcquireSemaphore(util.toPointer(hsem));
}

export function EngReleaseSemaphore(
  hsem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSEMAPHORE */,
): void /* void */ {
  return libGDI32_dll.EngReleaseSemaphore(util.toPointer(hsem));
}

export function EngDeleteSemaphore(
  hsem: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HSEMAPHORE */,
): void /* void */ {
  return libGDI32_dll.EngDeleteSemaphore(util.toPointer(hsem));
}

export function EngMultiByteToUnicodeN(
  UnicodeString: string | null /* Windows.Win32.Foundation.PWSTR */,
  MaxBytesInUnicodeString: number /* u32 */,
  BytesInUnicodeString: Deno.PointerValue | Uint8Array | null /* ptr */,
  MultiByteString: string | null /* Windows.Win32.Foundation.PSTR */,
  BytesInMultiByteString: number /* u32 */,
): void /* void */ {
  return libGDI32_dll.EngMultiByteToUnicodeN(util.pwstrToFfi(UnicodeString), MaxBytesInUnicodeString, util.toPointer(BytesInUnicodeString), util.pstrToFfi(MultiByteString), BytesInMultiByteString);
}

export function EngUnicodeToMultiByteN(
  MultiByteString: string | null /* Windows.Win32.Foundation.PSTR */,
  MaxBytesInMultiByteString: number /* u32 */,
  BytesInMultiByteString: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnicodeString: string | null /* Windows.Win32.Foundation.PWSTR */,
  BytesInUnicodeString: number /* u32 */,
): void /* void */ {
  return libGDI32_dll.EngUnicodeToMultiByteN(util.pstrToFfi(MultiByteString), MaxBytesInMultiByteString, util.toPointer(BytesInMultiByteString), util.pwstrToFfi(UnicodeString), BytesInUnicodeString);
}

export function EngQueryLocalTime(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.EngQueryLocalTime(util.toPointer(param0));
}

export function EngComputeGlyphSet(
  nCodePage: number /* i32 */,
  nFirstChar: number /* i32 */,
  cChars: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libGDI32_dll.EngComputeGlyphSet(nCodePage, nFirstChar, cChars));
}

export function EngMultiByteToWideChar(
  CodePage: number /* u32 */,
  WideCharString: string | null /* Windows.Win32.Foundation.PWSTR */,
  BytesInWideCharString: number /* i32 */,
  MultiByteString: string | null /* Windows.Win32.Foundation.PSTR */,
  BytesInMultiByteString: number /* i32 */,
): number /* i32 */ {
  return libGDI32_dll.EngMultiByteToWideChar(CodePage, util.pwstrToFfi(WideCharString), BytesInWideCharString, util.pstrToFfi(MultiByteString), BytesInMultiByteString);
}

export function EngWideCharToMultiByte(
  CodePage: number /* u32 */,
  WideCharString: string | null /* Windows.Win32.Foundation.PWSTR */,
  BytesInWideCharString: number /* i32 */,
  MultiByteString: string | null /* Windows.Win32.Foundation.PSTR */,
  BytesInMultiByteString: number /* i32 */,
): number /* i32 */ {
  return libGDI32_dll.EngWideCharToMultiByte(CodePage, util.pwstrToFfi(WideCharString), BytesInWideCharString, util.pstrToFfi(MultiByteString), BytesInMultiByteString);
}

export function EngGetCurrentCodePage(
  OemCodePage: Deno.PointerValue | Uint8Array | null /* ptr */,
  AnsiCodePage: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libGDI32_dll.EngGetCurrentCodePage(util.toPointer(OemCodePage), util.toPointer(AnsiCodePage));
}

export function EngQueryEMFInfo(
  hdev: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Display.HDEV */,
  pEMFInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.EngQueryEMFInfo(util.toPointer(hdev), util.toPointer(pEMFInfo)));
}

export function GetDisplayConfigBufferSizes(
  flags: number /* u32 */,
  numPathArrayElements: Deno.PointerValue | Uint8Array | null /* ptr */,
  numModeInfoArrayElements: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.GetDisplayConfigBufferSizes(flags, util.toPointer(numPathArrayElements), util.toPointer(numModeInfoArrayElements));
}

export function SetDisplayConfig(
  numPathArrayElements: number /* u32 */,
  pathArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  numModeInfoArrayElements: number /* u32 */,
  modeInfoArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
): number /* i32 */ {
  return libUSER32_dll.SetDisplayConfig(numPathArrayElements, util.toPointer(pathArray), numModeInfoArrayElements, util.toPointer(modeInfoArray), flags);
}

export function QueryDisplayConfig(
  flags: number /* u32 */,
  numPathArrayElements: Deno.PointerValue | Uint8Array | null /* ptr */,
  pathArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  numModeInfoArrayElements: Deno.PointerValue | Uint8Array | null /* ptr */,
  modeInfoArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  currentTopologyId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.QueryDisplayConfig(flags, util.toPointer(numPathArrayElements), util.toPointer(pathArray), util.toPointer(numModeInfoArrayElements), util.toPointer(modeInfoArray), util.toPointer(currentTopologyId));
}

export function DisplayConfigGetDeviceInfo(
  requestPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.DisplayConfigGetDeviceInfo(util.toPointer(requestPacket));
}

export function DisplayConfigSetDeviceInfo(
  setPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.DisplayConfigSetDeviceInfo(util.toPointer(setPacket));
}

export function GetAutoRotationState(
  pState: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetAutoRotationState(util.toPointer(pState)));
}

export function GetDisplayAutoRotationPreferences(
  pOrientation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetDisplayAutoRotationPreferences(util.toPointer(pOrientation)));
}

export function SetDisplayAutoRotationPreferences(
  orientation: ORIENTATION_PREFERENCE /* Windows.Win32.Devices.Display.ORIENTATION_PREFERENCE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetDisplayAutoRotationPreferences(orientation));
}

