/// Auto-generated by Deno Win32: Windows.Win32.Devices.Bluetooth.Apis

import * as util from "../../util.ts";

// Enums
export type NodeContainerType = number;
export type SDP_TYPE = number;
export type SDP_SPECIFICTYPE = number;
export type IO_CAPABILITY = number;
export type AUTHENTICATION_REQUIREMENTS = number;
export type BLUETOOTH_AUTHENTICATION_METHOD = number;
export type BLUETOOTH_IO_CAPABILITY = number;
export type BLUETOOTH_AUTHENTICATION_REQUIREMENTS = number;
export type BTH_LE_GATT_DESCRIPTOR_TYPE = number;
export type BTH_LE_GATT_EVENT_TYPE = number;

// Constants
export const BTH_MAJORVERSION = 2;
export const BTH_MINORVERSION = 1;
export const SDP_PROTOCOL_UUID16 = 1;
export const UDP_PROTOCOL_UUID16 = 2;
export const RFCOMM_PROTOCOL_UUID16 = 3;
export const TCP_PROTOCOL_UUID16 = 4;
export const TCSBIN_PROTOCOL_UUID16 = 5;
export const TCSAT_PROTOCOL_UUID16 = 6;
export const ATT_PROTOCOL_UUID16 = 7;
export const OBEX_PROTOCOL_UUID16 = 8;
export const IP_PROTOCOL_UUID16 = 9;
export const FTP_PROTOCOL_UUID16 = 10;
export const HTTP_PROTOCOL_UUID16 = 12;
export const WSP_PROTOCOL_UUID16 = 14;
export const BNEP_PROTOCOL_UUID16 = 15;
export const UPNP_PROTOCOL_UUID16 = 16;
export const HID_PROTOCOL_UUID16 = 17;
export const HCCC_PROTOCOL_UUID16 = 18;
export const HCDC_PROTOCOL_UUID16 = 20;
export const HCN_PROTOCOL_UUID16 = 22;
export const AVCTP_PROTOCOL_UUID16 = 23;
export const AVDTP_PROTOCOL_UUID16 = 25;
export const CMPT_PROTOCOL_UUID16 = 27;
export const UDI_C_PLANE_PROTOCOL_UUID16 = 29;
export const L2CAP_PROTOCOL_UUID16 = 256;
export const ServiceDiscoveryServerServiceClassID_UUID16 = 4096;
export const BrowseGroupDescriptorServiceClassID_UUID16 = 4097;
export const PublicBrowseGroupServiceClassID_UUID16 = 4098;
export const SerialPortServiceClassID_UUID16 = 4353;
export const LANAccessUsingPPPServiceClassID_UUID16 = 4354;
export const DialupNetworkingServiceClassID_UUID16 = 4355;
export const IrMCSyncServiceClassID_UUID16 = 4356;
export const OBEXObjectPushServiceClassID_UUID16 = 4357;
export const OBEXFileTransferServiceClassID_UUID16 = 4358;
export const IrMcSyncCommandServiceClassID_UUID16 = 4359;
export const HeadsetServiceClassID_UUID16 = 4360;
export const CordlessTelephonyServiceClassID_UUID16 = 4361;
export const AudioSourceServiceClassID_UUID16 = 4362;
export const AudioSinkServiceClassID_UUID16 = 4363;
export const AVRemoteControlTargetServiceClassID_UUID16 = 4364;
export const AVRemoteControlServiceClassID_UUID16 = 4366;
export const AVRemoteControlControllerServiceClass_UUID16 = 4367;
export const IntercomServiceClassID_UUID16 = 4368;
export const FaxServiceClassID_UUID16 = 4369;
export const HeadsetAudioGatewayServiceClassID_UUID16 = 4370;
export const WAPServiceClassID_UUID16 = 4371;
export const WAPClientServiceClassID_UUID16 = 4372;
export const PANUServiceClassID_UUID16 = 4373;
export const NAPServiceClassID_UUID16 = 4374;
export const GNServiceClassID_UUID16 = 4375;
export const DirectPrintingServiceClassID_UUID16 = 4376;
export const ReferencePrintingServiceClassID_UUID16 = 4377;
export const ImagingResponderServiceClassID_UUID16 = 4379;
export const ImagingAutomaticArchiveServiceClassID_UUID16 = 4380;
export const ImagingReferenceObjectsServiceClassID_UUID16 = 4381;
export const HandsfreeServiceClassID_UUID16 = 4382;
export const HandsfreeAudioGatewayServiceClassID_UUID16 = 4383;
export const DirectPrintingReferenceObjectsServiceClassID_UUID16 = 4384;
export const ReflectsUIServiceClassID_UUID16 = 4385;
export const PrintingStatusServiceClassID_UUID16 = 4387;
export const HumanInterfaceDeviceServiceClassID_UUID16 = 4388;
export const HCRPrintServiceClassID_UUID16 = 4390;
export const HCRScanServiceClassID_UUID16 = 4391;
export const CommonISDNAccessServiceClassID_UUID16 = 4392;
export const VideoConferencingGWServiceClassID_UUID16 = 4393;
export const UDIMTServiceClassID_UUID16 = 4394;
export const UDITAServiceClassID_UUID16 = 4395;
export const AudioVideoServiceClassID_UUID16 = 4396;
export const SimAccessServiceClassID_UUID16 = 4397;
export const PhonebookAccessPceServiceClassID_UUID16 = 4398;
export const PhonebookAccessPseServiceClassID_UUID16 = 4399;
export const HeadsetHSServiceClassID_UUID16 = 4401;
export const MessageAccessServerServiceClassID_UUID16 = 4402;
export const MessageNotificationServerServiceClassID_UUID16 = 4403;
export const GNSSServerServiceClassID_UUID16 = 4406;
export const ThreeDimensionalDisplayServiceClassID_UUID16 = 4407;
export const ThreeDimensionalGlassesServiceClassID_UUID16 = 4408;
export const MPSServiceClassID_UUID16 = 4411;
export const CTNAccessServiceClassID_UUID16 = 4412;
export const CTNNotificationServiceClassID_UUID16 = 4413;
export const PnPInformationServiceClassID_UUID16 = 4608;
export const GenericNetworkingServiceClassID_UUID16 = 4609;
export const GenericFileTransferServiceClassID_UUID16 = 4610;
export const GenericAudioServiceClassID_UUID16 = 4611;
export const GenericTelephonyServiceClassID_UUID16 = 4612;
export const UPnpServiceClassID_UUID16 = 4613;
export const UPnpIpServiceClassID_UUID16 = 4614;
export const ESdpUpnpIpPanServiceClassID_UUID16 = 4864;
export const ESdpUpnpIpLapServiceClassID_UUID16 = 4865;
export const ESdpUpnpL2capServiceClassID_UUID16 = 4866;
export const VideoSourceServiceClassID_UUID16 = 4867;
export const VideoSinkServiceClassID_UUID16 = 4868;
export const HealthDeviceProfileSourceServiceClassID_UUID16 = 5121;
export const HealthDeviceProfileSinkServiceClassID_UUID16 = 5122;
export const AdvancedAudioDistributionProfileID_UUID16 = 4365;
export const ImagingServiceProfileID_UUID16 = 4378;
export const BasicPrintingProfileID_UUID16 = 4386;
export const HardcopyCableReplacementProfileID_UUID16 = 4389;
export const PhonebookAccessProfileID_UUID16 = 4400;
export const MessageAccessProfileID_UUID16 = 4404;
export const GNSSProfileID_UUID16 = 4405;
export const ThreeDimensionalSynchronizationProfileID_UUID16 = 4409;
export const MPSProfileID_UUID16 = 4410;
export const CTNProfileID_UUID16 = 4414;
export const VideoDistributionProfileID_UUID16 = 4869;
export const HealthDeviceProfileID_UUID16 = 5120;
export const VideoConferencingServiceClassID_UUID16 = 4367;
export const CommonISDNAccessServiceClass_UUID16 = 4392;
export const VideoConferencingGWServiceClass_UUID16 = 4393;
export const UDIMTServiceClass_UUID16 = 4394;
export const UDITAServiceClass_UUID16 = 4395;
export const AudioVideoServiceClass_UUID16 = 4396;
export const CordlessServiceClassID_UUID16 = 4361;
export const AudioSinkSourceServiceClassID_UUID16 = 4363;
export const AdvancedAudioDistributionServiceClassID_UUID16 = 4365;
export const ImagingServiceClassID_UUID16 = 4378;
export const BasicPrintingServiceClassID_UUID16 = 4386;
export const HardcopyCableReplacementServiceClassID_UUID16 = 4389;
export const BTH_MAX_NAME_SIZE = 248;
export const BTH_MAX_PIN_SIZE = 16;
export const BTH_LINK_KEY_LENGTH = 16;
export const BTH_MFG_ERICSSON = 0;
export const BTH_MFG_NOKIA = 1;
export const BTH_MFG_INTEL = 2;
export const BTH_MFG_IBM = 3;
export const BTH_MFG_TOSHIBA = 4;
export const BTH_MFG_3COM = 5;
export const BTH_MFG_MICROSOFT = 6;
export const BTH_MFG_LUCENT = 7;
export const BTH_MFG_MOTOROLA = 8;
export const BTH_MFG_INFINEON = 9;
export const BTH_MFG_CSR = 10;
export const BTH_MFG_SILICONWAVE = 11;
export const BTH_MFG_DIGIANSWER = 12;
export const BTH_MFG_TI = 13;
export const BTH_MFG_PARTHUS = 14;
export const BTH_MFG_BROADCOM = 15;
export const BTH_MFG_MITEL = 16;
export const BTH_MFG_WIDCOMM = 17;
export const BTH_MFG_ZEEVO = 18;
export const BTH_MFG_ATMEL = 19;
export const BTH_MFG_MITSIBUSHI = 20;
export const BTH_MFG_RTX_TELECOM = 21;
export const BTH_MFG_KC_TECHNOLOGY = 22;
export const BTH_MFG_NEWLOGIC = 23;
export const BTH_MFG_TRANSILICA = 24;
export const BTH_MFG_ROHDE_SCHWARZ = 25;
export const BTH_MFG_TTPCOM = 26;
export const BTH_MFG_SIGNIA = 27;
export const BTH_MFG_CONEXANT = 28;
export const BTH_MFG_QUALCOMM = 29;
export const BTH_MFG_INVENTEL = 30;
export const BTH_MFG_AVM_BERLIN = 31;
export const BTH_MFG_BANDSPEED = 32;
export const BTH_MFG_MANSELLA = 33;
export const BTH_MFG_NEC = 34;
export const BTH_MFG_WAVEPLUS_TECHNOLOGY_CO = 35;
export const BTH_MFG_ALCATEL = 36;
export const BTH_MFG_PHILIPS_SEMICONDUCTOR = 37;
export const BTH_MFG_C_TECHNOLOGIES = 38;
export const BTH_MFG_OPEN_INTERFACE = 39;
export const BTH_MFG_RF_MICRO_DEVICES = 40;
export const BTH_MFG_HITACHI = 41;
export const BTH_MFG_SYMBOL_TECHNOLOGIES = 42;
export const BTH_MFG_TENOVIS = 43;
export const BTH_MFG_MACRONIX_INTERNATIONAL = 44;
export const BTH_MFG_MARVELL = 72;
export const BTH_MFG_APPLE = 76;
export const BTH_MFG_NORDIC_SEMICONDUCTORS_ASA = 89;
export const BTH_MFG_ARUBA_NETWORKS = 283;
export const BTH_MFG_INTERNAL_USE = 65535;
export const SAP_BIT_OFFSET = 0;
export const COD_FORMAT_BIT_OFFSET = 0;
export const COD_MINOR_BIT_OFFSET = 2;
export const COD_FORMAT_MASK = 3;
export const COD_MINOR_MASK = 252;
export const COD_MAJOR_MASK = 7936;
export const COD_SERVICE_MASK = 16769024;
export const COD_VERSION = 0;
export const COD_SERVICE_LIMITED = 1;
export const COD_SERVICE_POSITIONING = 8;
export const COD_SERVICE_NETWORKING = 16;
export const COD_SERVICE_RENDERING = 32;
export const COD_SERVICE_CAPTURING = 64;
export const COD_SERVICE_OBJECT_XFER = 128;
export const COD_SERVICE_AUDIO = 256;
export const COD_SERVICE_TELEPHONY = 512;
export const COD_SERVICE_INFORMATION = 1024;
export const COD_SERVICE_MAX_COUNT = 9;
export const COD_MAJOR_MISCELLANEOUS = 0;
export const COD_MAJOR_COMPUTER = 1;
export const COD_MAJOR_PHONE = 2;
export const COD_MAJOR_LAN_ACCESS = 3;
export const COD_MAJOR_AUDIO = 4;
export const COD_MAJOR_PERIPHERAL = 5;
export const COD_MAJOR_IMAGING = 6;
export const COD_MAJOR_WEARABLE = 7;
export const COD_MAJOR_TOY = 8;
export const COD_MAJOR_HEALTH = 9;
export const COD_MAJOR_UNCLASSIFIED = 31;
export const COD_COMPUTER_MINOR_UNCLASSIFIED = 0;
export const COD_COMPUTER_MINOR_DESKTOP = 1;
export const COD_COMPUTER_MINOR_SERVER = 2;
export const COD_COMPUTER_MINOR_LAPTOP = 3;
export const COD_COMPUTER_MINOR_HANDHELD = 4;
export const COD_COMPUTER_MINOR_PALM = 5;
export const COD_COMPUTER_MINOR_WEARABLE = 6;
export const COD_PHONE_MINOR_UNCLASSIFIED = 0;
export const COD_PHONE_MINOR_CELLULAR = 1;
export const COD_PHONE_MINOR_CORDLESS = 2;
export const COD_PHONE_MINOR_SMART = 3;
export const COD_PHONE_MINOR_WIRED_MODEM = 4;
export const COD_AUDIO_MINOR_UNCLASSIFIED = 0;
export const COD_AUDIO_MINOR_HEADSET = 1;
export const COD_AUDIO_MINOR_HANDS_FREE = 2;
export const COD_AUDIO_MINOR_HEADSET_HANDS_FREE = 3;
export const COD_AUDIO_MINOR_MICROPHONE = 4;
export const COD_AUDIO_MINOR_LOUDSPEAKER = 5;
export const COD_AUDIO_MINOR_HEADPHONES = 6;
export const COD_AUDIO_MINOR_PORTABLE_AUDIO = 7;
export const COD_AUDIO_MINOR_CAR_AUDIO = 8;
export const COD_AUDIO_MINOR_SET_TOP_BOX = 9;
export const COD_AUDIO_MINOR_HIFI_AUDIO = 10;
export const COD_AUDIO_MINOR_VCR = 11;
export const COD_AUDIO_MINOR_VIDEO_CAMERA = 12;
export const COD_AUDIO_MINOR_CAMCORDER = 13;
export const COD_AUDIO_MINOR_VIDEO_MONITOR = 14;
export const COD_AUDIO_MINOR_VIDEO_DISPLAY_LOUDSPEAKER = 15;
export const COD_AUDIO_MINOR_VIDEO_DISPLAY_CONFERENCING = 16;
export const COD_AUDIO_MINOR_GAMING_TOY = 18;
export const COD_PERIPHERAL_MINOR_KEYBOARD_MASK = 16;
export const COD_PERIPHERAL_MINOR_POINTER_MASK = 32;
export const COD_PERIPHERAL_MINOR_NO_CATEGORY = 0;
export const COD_PERIPHERAL_MINOR_JOYSTICK = 1;
export const COD_PERIPHERAL_MINOR_GAMEPAD = 2;
export const COD_PERIPHERAL_MINOR_REMOTE_CONTROL = 3;
export const COD_PERIPHERAL_MINOR_SENSING = 4;
export const COD_IMAGING_MINOR_DISPLAY_MASK = 4;
export const COD_IMAGING_MINOR_CAMERA_MASK = 8;
export const COD_IMAGING_MINOR_SCANNER_MASK = 16;
export const COD_IMAGING_MINOR_PRINTER_MASK = 32;
export const COD_WEARABLE_MINOR_WRIST_WATCH = 1;
export const COD_WEARABLE_MINOR_PAGER = 2;
export const COD_WEARABLE_MINOR_JACKET = 3;
export const COD_WEARABLE_MINOR_HELMET = 4;
export const COD_WEARABLE_MINOR_GLASSES = 5;
export const COD_TOY_MINOR_ROBOT = 1;
export const COD_TOY_MINOR_VEHICLE = 2;
export const COD_TOY_MINOR_DOLL_ACTION_FIGURE = 3;
export const COD_TOY_MINOR_CONTROLLER = 4;
export const COD_TOY_MINOR_GAME = 5;
export const COD_HEALTH_MINOR_BLOOD_PRESSURE_MONITOR = 1;
export const COD_HEALTH_MINOR_THERMOMETER = 2;
export const COD_HEALTH_MINOR_WEIGHING_SCALE = 3;
export const COD_HEALTH_MINOR_GLUCOSE_METER = 4;
export const COD_HEALTH_MINOR_PULSE_OXIMETER = 5;
export const COD_HEALTH_MINOR_HEART_PULSE_MONITOR = 6;
export const COD_HEALTH_MINOR_HEALTH_DATA_DISPLAY = 7;
export const COD_HEALTH_MINOR_STEP_COUNTER = 8;
export const COD_LAN_ACCESS_BIT_OFFSET = 5;
export const COD_LAN_MINOR_MASK = 28;
export const COD_LAN_ACCESS_MASK = 224;
export const COD_LAN_MINOR_UNCLASSIFIED = 0;
export const COD_LAN_ACCESS_0_USED = 0;
export const COD_LAN_ACCESS_17_USED = 1;
export const COD_LAN_ACCESS_33_USED = 2;
export const COD_LAN_ACCESS_50_USED = 3;
export const COD_LAN_ACCESS_67_USED = 4;
export const COD_LAN_ACCESS_83_USED = 5;
export const COD_LAN_ACCESS_99_USED = 6;
export const COD_LAN_ACCESS_FULL = 7;
export const BTH_EIR_FLAGS_ID = 1;
export const BTH_EIR_16_UUIDS_PARTIAL_ID = 2;
export const BTH_EIR_16_UUIDS_COMPLETE_ID = 3;
export const BTH_EIR_32_UUIDS_PARTIAL_ID = 4;
export const BTH_EIR_32_UUIDS_COMPLETE_ID = 5;
export const BTH_EIR_128_UUIDS_PARTIAL_ID = 6;
export const BTH_EIR_128_UUIDS_COMPLETE_ID = 7;
export const BTH_EIR_LOCAL_NAME_PARTIAL_ID = 8;
export const BTH_EIR_LOCAL_NAME_COMPLETE_ID = 9;
export const BTH_EIR_TX_POWER_LEVEL_ID = 10;
export const BTH_EIR_OOB_OPT_DATA_LEN_ID = 11;
export const BTH_EIR_OOB_BD_ADDR_ID = 12;
export const BTH_EIR_OOB_COD_ID = 13;
export const BTH_EIR_OOB_SP_HASH_ID = 14;
export const BTH_EIR_OOB_SP_RANDOMIZER_ID = 15;
export const BTH_EIR_MANUFACTURER_ID = 255;
export const BTH_EIR_SIZE = 240;
export const LAP_GIAC_VALUE = 10390323;
export const LAP_LIAC_VALUE = 10390272;
export const BTH_ADDR_IAC_FIRST = 10390272;
export const BTH_ADDR_IAC_LAST = 10390335;
export const BTH_ADDR_LIAC = 10390272;
export const BTH_ADDR_GIAC = 10390323;
export const BTH_ERROR_SUCCESS = 0;
export const BTH_ERROR_UNKNOWN_HCI_COMMAND = 1;
export const BTH_ERROR_NO_CONNECTION = 2;
export const BTH_ERROR_HARDWARE_FAILURE = 3;
export const BTH_ERROR_PAGE_TIMEOUT = 4;
export const BTH_ERROR_AUTHENTICATION_FAILURE = 5;
export const BTH_ERROR_KEY_MISSING = 6;
export const BTH_ERROR_MEMORY_FULL = 7;
export const BTH_ERROR_CONNECTION_TIMEOUT = 8;
export const BTH_ERROR_MAX_NUMBER_OF_CONNECTIONS = 9;
export const BTH_ERROR_MAX_NUMBER_OF_SCO_CONNECTIONS = 10;
export const BTH_ERROR_ACL_CONNECTION_ALREADY_EXISTS = 11;
export const BTH_ERROR_COMMAND_DISALLOWED = 12;
export const BTH_ERROR_HOST_REJECTED_LIMITED_RESOURCES = 13;
export const BTH_ERROR_HOST_REJECTED_SECURITY_REASONS = 14;
export const BTH_ERROR_HOST_REJECTED_PERSONAL_DEVICE = 15;
export const BTH_ERROR_HOST_TIMEOUT = 16;
export const BTH_ERROR_UNSUPPORTED_FEATURE_OR_PARAMETER = 17;
export const BTH_ERROR_INVALID_HCI_PARAMETER = 18;
export const BTH_ERROR_REMOTE_USER_ENDED_CONNECTION = 19;
export const BTH_ERROR_REMOTE_LOW_RESOURCES = 20;
export const BTH_ERROR_REMOTE_POWERING_OFF = 21;
export const BTH_ERROR_LOCAL_HOST_TERMINATED_CONNECTION = 22;
export const BTH_ERROR_REPEATED_ATTEMPTS = 23;
export const BTH_ERROR_PAIRING_NOT_ALLOWED = 24;
export const BTH_ERROR_UKNOWN_LMP_PDU = 25;
export const BTH_ERROR_UNSUPPORTED_REMOTE_FEATURE = 26;
export const BTH_ERROR_SCO_OFFSET_REJECTED = 27;
export const BTH_ERROR_SCO_INTERVAL_REJECTED = 28;
export const BTH_ERROR_SCO_AIRMODE_REJECTED = 29;
export const BTH_ERROR_INVALID_LMP_PARAMETERS = 30;
export const BTH_ERROR_UNSPECIFIED_ERROR = 31;
export const BTH_ERROR_UNSUPPORTED_LMP_PARM_VALUE = 32;
export const BTH_ERROR_ROLE_CHANGE_NOT_ALLOWED = 33;
export const BTH_ERROR_LMP_RESPONSE_TIMEOUT = 34;
export const BTH_ERROR_LMP_TRANSACTION_COLLISION = 35;
export const BTH_ERROR_LMP_PDU_NOT_ALLOWED = 36;
export const BTH_ERROR_ENCRYPTION_MODE_NOT_ACCEPTABLE = 37;
export const BTH_ERROR_UNIT_KEY_NOT_USED = 38;
export const BTH_ERROR_QOS_IS_NOT_SUPPORTED = 39;
export const BTH_ERROR_INSTANT_PASSED = 40;
export const BTH_ERROR_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED = 41;
export const BTH_ERROR_DIFFERENT_TRANSACTION_COLLISION = 42;
export const BTH_ERROR_QOS_UNACCEPTABLE_PARAMETER = 44;
export const BTH_ERROR_QOS_REJECTED = 45;
export const BTH_ERROR_CHANNEL_CLASSIFICATION_NOT_SUPPORTED = 46;
export const BTH_ERROR_INSUFFICIENT_SECURITY = 47;
export const BTH_ERROR_PARAMETER_OUT_OF_MANDATORY_RANGE = 48;
export const BTH_ERROR_ROLE_SWITCH_PENDING = 50;
export const BTH_ERROR_RESERVED_SLOT_VIOLATION = 52;
export const BTH_ERROR_ROLE_SWITCH_FAILED = 53;
export const BTH_ERROR_EXTENDED_INQUIRY_RESPONSE_TOO_LARGE = 54;
export const BTH_ERROR_SECURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST = 55;
export const BTH_ERROR_HOST_BUSY_PAIRING = 56;
export const BTH_ERROR_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND = 57;
export const BTH_ERROR_CONTROLLER_BUSY = 58;
export const BTH_ERROR_UNACCEPTABLE_CONNECTION_INTERVAL = 59;
export const BTH_ERROR_DIRECTED_ADVERTISING_TIMEOUT = 60;
export const BTH_ERROR_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE = 61;
export const BTH_ERROR_CONNECTION_FAILED_TO_BE_ESTABLISHED = 62;
export const BTH_ERROR_MAC_CONNECTION_FAILED = 63;
export const BTH_ERROR_COARSE_CLOCK_ADJUSTMENT_REJECTED = 64;
export const BTH_ERROR_TYPE_0_SUBMAP_NOT_DEFINED = 65;
export const BTH_ERROR_UNKNOWN_ADVERTISING_IDENTIFIER = 66;
export const BTH_ERROR_LIMIT_REACHED = 67;
export const BTH_ERROR_OPERATION_CANCELLED_BY_HOST = 68;
export const BTH_ERROR_PACKET_TOO_LONG = 69;
export const BTH_ERROR_UNSPECIFIED = 255;
export const L2CAP_MIN_MTU = 48;
export const L2CAP_MAX_MTU = 65535;
export const L2CAP_DEFAULT_MTU = 672;
export const MAX_L2CAP_PING_DATA_LENGTH = 44;
export const MAX_L2CAP_INFO_DATA_LENGTH = 44;
export const BDIF_ADDRESS = 1;
export const BDIF_COD = 2;
export const BDIF_NAME = 4;
export const BDIF_PAIRED = 8;
export const BDIF_PERSONAL = 16;
export const BDIF_CONNECTED = 32;
export const BDIF_SHORT_NAME = 64;
export const BDIF_VISIBLE = 128;
export const BDIF_SSP_SUPPORTED = 256;
export const BDIF_SSP_PAIRED = 512;
export const BDIF_SSP_MITM_PROTECTED = 1024;
export const BDIF_RSSI = 4096;
export const BDIF_EIR = 8192;
export const BDIF_BR = 16384;
export const BDIF_LE = 32768;
export const BDIF_LE_PAIRED = 65536;
export const BDIF_LE_PERSONAL = 131072;
export const BDIF_LE_MITM_PROTECTED = 262144;
export const BDIF_LE_PRIVACY_ENABLED = 524288;
export const BDIF_LE_RANDOM_ADDRESS_TYPE = 1048576;
export const BDIF_LE_DISCOVERABLE = 2097152;
export const BDIF_LE_NAME = 4194304;
export const BDIF_LE_VISIBLE = 8388608;
export const BDIF_LE_CONNECTED = 16777216;
export const BDIF_LE_CONNECTABLE = 33554432;
export const BDIF_CONNECTION_INBOUND = 67108864;
export const BDIF_BR_SECURE_CONNECTION_PAIRED = 134217728;
export const BDIF_LE_SECURE_CONNECTION_PAIRED = 268435456;
export const BDIF_DEBUGKEY = 536870912;
export const BDIF_LE_DEBUGKEY = 1073741824;
export const BDIF_TX_POWER = 2147483648;
export const HCI_CONNECTION_TYPE_ACL = 1;
export const HCI_CONNECTION_TYPE_SCO = 2;
export const HCI_CONNECTION_TYPE_LE = 3;
export const HCI_CONNNECTION_TYPE_ACL = 1;
export const HCI_CONNNECTION_TYPE_SCO = 2;
export const BTH_MAX_SERVICE_NAME_SIZE = 256;
export const MAX_UUIDS_IN_QUERY = 12;
export const BTH_VID_DEFAULT_VALUE = 65535;
export const SDP_ERROR_INVALID_SDP_VERSION = 1;
export const SDP_ERROR_INVALID_RECORD_HANDLE = 2;
export const SDP_ERROR_INVALID_REQUEST_SYNTAX = 3;
export const SDP_ERROR_INVALID_PDU_SIZE = 4;
export const SDP_ERROR_INVALID_CONTINUATION_STATE = 5;
export const SDP_ERROR_INSUFFICIENT_RESOURCES = 6;
export const SDP_ATTRIB_RECORD_HANDLE = 0;
export const SDP_ATTRIB_CLASS_ID_LIST = 1;
export const SDP_ATTRIB_RECORD_STATE = 2;
export const SDP_ATTRIB_SERVICE_ID = 3;
export const SDP_ATTRIB_PROTOCOL_DESCRIPTOR_LIST = 4;
export const SDP_ATTRIB_BROWSE_GROUP_LIST = 5;
export const SDP_ATTRIB_LANG_BASE_ATTRIB_ID_LIST = 6;
export const SDP_ATTRIB_INFO_TIME_TO_LIVE = 7;
export const SDP_ATTRIB_AVAILABILITY = 8;
export const SDP_ATTRIB_PROFILE_DESCRIPTOR_LIST = 9;
export const SDP_ATTRIB_DOCUMENTATION_URL = 10;
export const SDP_ATTRIB_CLIENT_EXECUTABLE_URL = 11;
export const SDP_ATTRIB_ICON_URL = 12;
export const SDP_ATTRIB_ADDITIONAL_PROTOCOL_DESCRIPTOR_LIST = 13;
export const SDP_ATTRIB_PROFILE_SPECIFIC = 512;
export const LANG_BASE_LANGUAGE_INDEX = 0;
export const LANG_BASE_ENCODING_INDEX = 1;
export const LANG_BASE_OFFSET_INDEX = 2;
export const LANG_DEFAULT_ID = 256;
export const LANGUAGE_EN_US = 25966;
export const ENCODING_UTF_8 = 106;
export const STRING_NAME_OFFSET = 0;
export const STRING_DESCRIPTION_OFFSET = 1;
export const STRING_PROVIDER_NAME_OFFSET = 2;
export const SDP_ATTRIB_SDP_VERSION_NUMBER_LIST = 512;
export const SDP_ATTRIB_SDP_DATABASE_STATE = 513;
export const SDP_ATTRIB_BROWSE_GROUP_ID = 512;
export const SDP_ATTRIB_CORDLESS_EXTERNAL_NETWORK = 769;
export const SDP_ATTRIB_FAX_CLASS_1_SUPPORT = 770;
export const SDP_ATTRIB_FAX_CLASS_2_0_SUPPORT = 771;
export const SDP_ATTRIB_FAX_CLASS_2_SUPPORT = 772;
export const SDP_ATTRIB_FAX_AUDIO_FEEDBACK_SUPPORT = 773;
export const SDP_ATTRIB_HEADSET_REMOTE_AUDIO_VOLUME_CONTROL = 770;
export const SDP_ATTRIB_LAN_LPSUBNET = 512;
export const SDP_ATTRIB_OBJECT_PUSH_SUPPORTED_FORMATS_LIST = 771;
export const SDP_ATTRIB_SYNCH_SUPPORTED_DATA_STORES_LIST = 769;
export const SDP_ATTRIB_SERVICE_VERSION = 768;
export const SDP_ATTRIB_PAN_NETWORK_ADDRESS = 774;
export const SDP_ATTRIB_PAN_WAP_GATEWAY = 775;
export const SDP_ATTRIB_PAN_HOME_PAGE_URL = 776;
export const SDP_ATTRIB_PAN_WAP_STACK_TYPE = 777;
export const SDP_ATTRIB_PAN_SECURITY_DESCRIPTION = 778;
export const SDP_ATTRIB_PAN_NET_ACCESS_TYPE = 779;
export const SDP_ATTRIB_PAN_MAX_NET_ACCESS_RATE = 780;
export const SDP_ATTRIB_IMAGING_SUPPORTED_CAPABILITIES = 784;
export const SDP_ATTRIB_IMAGING_SUPPORTED_FEATURES = 785;
export const SDP_ATTRIB_IMAGING_SUPPORTED_FUNCTIONS = 786;
export const SDP_ATTRIB_IMAGING_TOTAL_DATA_CAPACITY = 787;
export const SDP_ATTRIB_DI_SPECIFICATION_ID = 512;
export const SDP_ATTRIB_DI_VENDOR_ID = 513;
export const SDP_ATTRIB_DI_PRODUCT_ID = 514;
export const SDP_ATTRIB_DI_VERSION = 515;
export const SDP_ATTRIB_DI_PRIMARY_RECORD = 516;
export const SDP_ATTRIB_DI_VENDOR_ID_SOURCE = 517;
export const SDP_ATTRIB_HID_DEVICE_RELEASE_NUMBER = 512;
export const SDP_ATTRIB_HID_PARSER_VERSION = 513;
export const SDP_ATTRIB_HID_DEVICE_SUBCLASS = 514;
export const SDP_ATTRIB_HID_COUNTRY_CODE = 515;
export const SDP_ATTRIB_HID_VIRTUAL_CABLE = 516;
export const SDP_ATTRIB_HID_RECONNECT_INITIATE = 517;
export const SDP_ATTRIB_HID_DESCRIPTOR_LIST = 518;
export const SDP_ATTRIB_HID_LANG_ID_BASE_LIST = 519;
export const SDP_ATTRIB_HID_SDP_DISABLE = 520;
export const SDP_ATTRIB_HID_BATTERY_POWER = 521;
export const SDP_ATTRIB_HID_REMOTE_WAKE = 522;
export const SDP_ATTRIB_HID_PROFILE_VERSION = 523;
export const SDP_ATTRIB_HID_SUPERVISION_TIMEOUT = 524;
export const SDP_ATTRIB_HID_NORMALLY_CONNECTABLE = 525;
export const SDP_ATTRIB_HID_BOOT_DEVICE = 526;
export const SDP_ATTRIB_HID_SSR_HOST_MAX_LATENCY = 527;
export const SDP_ATTRIB_HID_SSR_HOST_MIN_TIMEOUT = 528;
export const SDP_ATTRIB_A2DP_SUPPORTED_FEATURES = 785;
export const SDP_ATTRIB_AVRCP_SUPPORTED_FEATURES = 785;
export const SDP_ATTRIB_HFP_SUPPORTED_FEATURES = 785;
export const AVRCP_SUPPORTED_FEATURES_CATEGORY_1 = 1;
export const AVRCP_SUPPORTED_FEATURES_CATEGORY_2 = 2;
export const AVRCP_SUPPORTED_FEATURES_CATEGORY_3 = 4;
export const AVRCP_SUPPORTED_FEATURES_CATEGORY_4 = 8;
export const AVRCP_SUPPORTED_FEATURES_CT_BROWSING = 64;
export const AVRCP_SUPPORTED_FEATURES_CT_COVER_ART_IMAGE_PROPERTIES = 128;
export const AVRCP_SUPPORTED_FEATURES_CT_COVER_ART_IMAGE = 256;
export const AVRCP_SUPPORTED_FEATURES_CT_COVER_ART_LINKED_THUMBNAIL = 512;
export const AVRCP_SUPPORTED_FEATURES_TG_PLAYER_APPLICATION_SETTINGS = 16;
export const AVRCP_SUPPORTED_FEATURES_TG_GROUP_NAVIGATION = 32;
export const AVRCP_SUPPORTED_FEATURES_TG_BROWSING = 64;
export const AVRCP_SUPPORTED_FEATURES_TG_MULTIPLE_PLAYER_APPLICATIONS = 128;
export const AVRCP_SUPPORTED_FEATURES_TG_COVER_ART = 256;
export const A2DP_SINK_SUPPORTED_FEATURES_HEADPHONE = 1;
export const A2DP_SINK_SUPPORTED_FEATURES_SPEAKER = 2;
export const A2DP_SINK_SUPPORTED_FEATURES_RECORDER = 4;
export const A2DP_SINK_SUPPORTED_FEATURES_AMPLIFIER = 8;
export const A2DP_SOURCE_SUPPORTED_FEATURES_PLAYER = 1;
export const A2DP_SOURCE_SUPPORTED_FEATURES_MICROPHONE = 2;
export const A2DP_SOURCE_SUPPORTED_FEATURES_TUNER = 4;
export const A2DP_SOURCE_SUPPORTED_FEATURES_MIXER = 8;
export const CORDLESS_EXTERNAL_NETWORK_PSTN = 1;
export const CORDLESS_EXTERNAL_NETWORK_ISDN = 2;
export const CORDLESS_EXTERNAL_NETWORK_GSM = 3;
export const CORDLESS_EXTERNAL_NETWORK_CDMA = 4;
export const CORDLESS_EXTERNAL_NETWORK_ANALOG_CELLULAR = 5;
export const CORDLESS_EXTERNAL_NETWORK_PACKET_SWITCHED = 6;
export const CORDLESS_EXTERNAL_NETWORK_OTHER = 7;
export const OBJECT_PUSH_FORMAT_VCARD_2_1 = 1;
export const OBJECT_PUSH_FORMAT_VCARD_3_0 = 2;
export const OBJECT_PUSH_FORMAT_VCAL_1_0 = 3;
export const OBJECT_PUSH_FORMAT_ICAL_2_0 = 4;
export const OBJECT_PUSH_FORMAT_VNOTE = 5;
export const OBJECT_PUSH_FORMAT_VMESSAGE = 6;
export const OBJECT_PUSH_FORMAT_ANY = 255;
export const SYNCH_DATA_STORE_PHONEBOOK = 1;
export const SYNCH_DATA_STORE_CALENDAR = 3;
export const SYNCH_DATA_STORE_NOTES = 5;
export const SYNCH_DATA_STORE_MESSAGES = 6;
export const DI_VENDOR_ID_SOURCE_BLUETOOTH_SIG = 1;
export const DI_VENDOR_ID_SOURCE_USB_IF = 2;
export const PSM_SDP = 1;
export const PSM_RFCOMM = 3;
export const PSM_TCS_BIN = 5;
export const PSM_TCS_BIN_CORDLESS = 7;
export const PSM_BNEP = 15;
export const PSM_HID_CONTROL = 17;
export const PSM_HID_INTERRUPT = 19;
export const PSM_UPNP = 21;
export const PSM_AVCTP = 23;
export const PSM_AVDTP = 25;
export const PSM_AVCTP_BROWSE = 27;
export const PSM_UDI_C_PLANE = 29;
export const PSM_ATT = 31;
export const PSM_3DSP = 33;
export const PSM_LE_IPSP = 35;
export const STR_ADDR_FMTA = `(%02x:%02x:%02x:%02x:%02x:%02x)`;
export const STR_ADDR_FMTW = `(%02x:%02x:%02x:%02x:%02x:%02x)`;
export const STR_ADDR_SHORT_FMTA = `%04x%08x`;
export const STR_ADDR_SHORT_FMTW = `%04x%08x`;
export const STR_USBHCI_CLASS_HARDWAREIDA = `USB\\Class_E0&SubClass_01&Prot_01`;
export const STR_USBHCI_CLASS_HARDWAREIDW = `USB\\Class_E0&SubClass_01&Prot_01`;
export const STR_ADDR_FMT = `(%02x:%02x:%02x:%02x:%02x:%02x)`;
export const STR_ADDR_SHORT_FMT = `%04x%08x`;
export const STR_USBHCI_CLASS_HARDWAREID = `USB\\Class_E0&SubClass_01&Prot_01`;
export const BTH_IOCTL_BASE = 0;
export const SDP_CONNECT_CACHE = 1;
export const SDP_CONNECT_ALLOW_PIN = 2;
export const SDP_REQUEST_TO_DEFAULT = 0;
export const SDP_REQUEST_TO_MIN = 10;
export const SDP_REQUEST_TO_MAX = 45;
export const SERVICE_OPTION_DO_NOT_PUBLISH = 2;
export const SERVICE_OPTION_NO_PUBLIC_BROWSE = 4;
export const SERVICE_OPTION_DO_NOT_PUBLISH_EIR = 8;
export const SERVICE_SECURITY_USE_DEFAULTS = 0;
export const SERVICE_SECURITY_NONE = 1;
export const SERVICE_SECURITY_AUTHORIZE = 2;
export const SERVICE_SECURITY_AUTHENTICATE = 4;
export const SERVICE_SECURITY_ENCRYPT_REQUIRED = 16;
export const SERVICE_SECURITY_ENCRYPT_OPTIONAL = 32;
export const SERVICE_SECURITY_DISABLED = 268435456;
export const SERVICE_SECURITY_NO_ASK = 536870912;
export const SDP_SEARCH_NO_PARSE_CHECK = 1;
export const SDP_SEARCH_NO_FORMAT_CHECK = 2;
export const BTH_HOST_FEATURE_ENHANCED_RETRANSMISSION_MODE = 1;
export const BTH_HOST_FEATURE_STREAMING_MODE = 2;
export const BTH_HOST_FEATURE_LOW_ENERGY = 4;
export const BTH_HOST_FEATURE_SCO_HCI = 8;
export const BTH_HOST_FEATURE_SCO_HCIBYPASS = 16;
export const BLUETOOTH_MAX_NAME_SIZE = 248;
export const BLUETOOTH_MAX_PASSKEY_SIZE = 16;
export const BLUETOOTH_MAX_PASSKEY_BUFFER_SIZE = 17;
export const BLUETOOTH_MAX_SERVICE_NAME_SIZE = 256;
export const BLUETOOTH_DEVICE_NAME_SIZE = 256;
export const BLUETOOTH_SERVICE_DISABLE = 0;
export const BLUETOOTH_SERVICE_ENABLE = 1;
export const BTH_LE_SERVICE_GAP = 6144;
export const BTH_LE_SERVICE_GATT = 6145;
export const BTH_LE_GATT_ATTRIBUTE_TYPE_PRIMARY_SERVICE = 10240;
export const BTH_LE_GATT_ATTRIBUTE_TYPE_SECONDARY_SERVICE = 10241;
export const BTH_LE_GATT_ATTRIBUTE_TYPE_INCLUDE = 10242;
export const BTH_LE_GATT_ATTRIBUTE_TYPE_CHARACTERISTIC = 10243;
export const BTH_LE_GATT_CHARACTERISTIC_DESCRIPTOR_EXTENDED_PROPERTIES = 10496;
export const BTH_LE_GATT_CHARACTERISTIC_DESCRIPTOR_USER_DESCRIPTION = 10497;
export const BTH_LE_GATT_CHARACTERISTIC_DESCRIPTOR_CLIENT_CONFIGURATION = 10498;
export const BTH_LE_GATT_CHARACTERISTIC_DESCRIPTOR_SERVER_CONFIGURATION = 10499;
export const BTH_LE_GATT_CHARACTERISTIC_DESCRIPTOR_FORMAT = 10500;
export const BTH_LE_GATT_CHARACTERISTIC_DESCRIPTOR_AGGREGATE_FORMAT = 10501;
export const BTH_LE_GATT_CHARACTERISTIC_TYPE_DEVICE_NAME = 10752;
export const BTH_LE_GATT_CHARACTERISTIC_TYPE_APPEARANCE = 10753;
export const BTH_LE_GATT_CHARACTERISTIC_TYPE_PERIPHERAL_PRIVACY_FLAG = 10754;
export const BTH_LE_GATT_CHARACTERISTIC_TYPE_RECONNECTION_ADDRESS = 10755;
export const BTH_LE_GATT_CHARACTERISTIC_TYPE_PERIPHERAL_PREFERED_CONNECTION_PARAMETER = 10756;
export const BTH_LE_GATT_CHARACTERISTIC_TYPE_SERVICE_CHANGED = 10757;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_OFFSET = 6;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_MASK = 1023;
export const BTH_LE_GAP_APPEARANCE_SUB_CATEGORY_MASK = 63;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_UNCATEGORIZED = 0;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_PHONE = 1;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_COMPUTER = 2;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_WATCH = 3;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_CLOCK = 4;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_DISPLAY = 5;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_REMOTE_CONTROL = 6;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_EYE_GLASSES = 7;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_TAG = 8;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_KEYRING = 9;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_MEDIA_PLAYER = 10;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_BARCODE_SCANNER = 11;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_THERMOMETER = 12;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_HEART_RATE = 13;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_BLOOD_PRESSURE = 14;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_HID = 15;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_GLUCOSE_METER = 16;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_RUNNING_WALKING_SENSOR = 17;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_CYCLING = 18;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_PLUSE_OXIMETER = 49;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_WEIGHT_SCALE = 50;
export const BTH_LE_GAP_APPEARANCE_CATEGORY_OUTDOOR_SPORTS_ACTIVITY = 81;
export const BTH_LE_GAP_APPEARANCE_SUBCATEGORY_GENERIC = 0;
export const BTH_LE_GAP_APPEARANCE_WATCH_SUBCATEGORY_SPORTS_WATCH = 1;
export const BTH_LE_GAP_APPEARANCE_THERMOMETER_SUBCATEGORY_EAR = 1;
export const BTH_LE_GAP_APPEARANCE_HEART_RATE_SUBCATEGORY_HEART_RATE_BELT = 1;
export const BTH_LE_GAP_APPEARANCE_BLOOD_PRESSURE_SUBCATEGORY_ARM = 1;
export const BTH_LE_GAP_APPEARANCE_BLOOD_PRESSURE_SUBCATEGORY_WRIST = 2;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_KEYBOARD = 1;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_MOUSE = 2;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_JOYSTICK = 3;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_GAMEPAD = 4;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_DIGITIZER_TABLET = 5;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_CARD_READER = 6;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_DIGITAL_PEN = 7;
export const BTH_LE_GAP_APPEARANCE_HID_SUBCATEGORY_BARCODE_SCANNER = 8;
export const BTH_LE_GAP_APPEARANCE_RUNNING_WALKING_SENSOR_SUBCATEGORY_IN_SHOE = 1;
export const BTH_LE_GAP_APPEARANCE_RUNNING_WALKING_SENSOR_SUBCATEGORY_ON_SHOE = 2;
export const BTH_LE_GAP_APPEARANCE_RUNNING_WALKING_SENSOR_SUBCATEGORY_ON_HIP = 3;
export const BTH_LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_CYCLING_COMPUTER = 1;
export const BTH_LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_SPEED_SENSOR = 2;
export const BTH_LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_CADENCE_SENSOR = 3;
export const BTH_LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_POWER_SENSOR = 4;
export const BTH_LE_GAP_APPEARANCE_CYCLING_SUBCATEGORY_SPEED_AND_CADENCE_SENSOR = 5;
export const BTH_LE_GAP_APPEARANCE_PULSE_OXIMETER_SUBCATEGORY_FINGERTIP = 1;
export const BTH_LE_GAP_APPEARANCE_PULSE_OXIMETER_SUBCATEGORY_WRIST_WORN = 2;
export const BTH_LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_DISPLAY_DEVICE = 1;
export const BTH_LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_NAVIGATION_DISPLAY_DEVICE = 2;
export const BTH_LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_POD = 3;
export const BTH_LE_GAP_APPEARANCE_OUTDOOR_SPORTS_ACTIVITY_SUBCATEGORY_LOCATION_NAVIGATION_POD = 4;
export const BTH_LE_GATT_DEFAULT_MAX_INCLUDED_SERVICES_DEPTH = 3;
export const BTH_LE_ATT_TRANSACTION_TIMEOUT = 30;
export const BTH_LE_ATT_MAX_VALUE_SIZE = 512;
export const BTH_LE_ATT_CID = 4;
export const BTHLEENUM_ATT_MTU_MIN = 23;
export const BTHLEENUM_ATT_MTU_MAX = 65535;
export const BTHLEENUM_ATT_MTU_DEFAULT = 23;
export const BTHLEENUM_ATT_MTU_INITIAL_NEGOTIATION = 525;
export const BTH_LE_ERROR_INVALID_HANDLE = 1;
export const BTH_LE_ERROR_READ_NOT_PERMITTED = 2;
export const BTH_LE_ERROR_WRITE_NOT_PERMITTED = 3;
export const BTH_LE_ERROR_INVALID_PDU = 4;
export const BTH_LE_ERROR_INSUFFICIENT_AUTHENTICATION = 5;
export const BTH_LE_ERROR_REQUEST_NOT_SUPPORTED = 6;
export const BTH_LE_ERROR_INVALID_OFFSET = 7;
export const BTH_LE_ERROR_INSUFFICIENT_AUTHORIZATION = 8;
export const BTH_LE_ERROR_PREPARE_QUEUE_FULL = 9;
export const BTH_LE_ERROR_ATTRIBUTE_NOT_FOUND = 10;
export const BTH_LE_ERROR_ATTRIBUTE_NOT_LONG = 11;
export const BTH_LE_ERROR_INSUFFICIENT_ENCRYPTION_KEY_SIZE = 12;
export const BTH_LE_ERROR_INVALID_ATTRIBUTE_VALUE_LENGTH = 13;
export const BTH_LE_ERROR_UNLIKELY = 14;
export const BTH_LE_ERROR_INSUFFICIENT_ENCRYPTION = 15;
export const BTH_LE_ERROR_UNSUPPORTED_GROUP_TYPE = 16;
export const BTH_LE_ERROR_INSUFFICIENT_RESOURCES = 17;
export const BTH_LE_ERROR_UNKNOWN = 4096;
export const BLUETOOTH_GATT_FLAG_NONE = 0;
export const BLUETOOTH_GATT_FLAG_CONNECTION_ENCRYPTED = 1;
export const BLUETOOTH_GATT_FLAG_CONNECTION_AUTHENTICATED = 2;
export const BLUETOOTH_GATT_FLAG_FORCE_READ_FROM_DEVICE = 4;
export const BLUETOOTH_GATT_FLAG_FORCE_READ_FROM_CACHE = 8;
export const BLUETOOTH_GATT_FLAG_SIGNED_WRITE = 16;
export const BLUETOOTH_GATT_FLAG_WRITE_WITHOUT_RESPONSE = 32;
export const BLUETOOTH_GATT_FLAG_RETURN_ALL = 64;
export const BT_PORT_MIN = 1;
export const BT_PORT_MAX = 65535;
export const BT_PORT_DYN_FIRST = 4097;
export const AF_BTH = 32;
export const PF_BTH = 32;
export const NS_BTH = 16;
export const BTH_ADDR_STRING_SIZE = 12;
export const BTHPROTO_RFCOMM = 3;
export const BTHPROTO_L2CAP = 256;
export const SOL_RFCOMM = 3;
export const SOL_L2CAP = 256;
export const SOL_SDP = 257;
export const SO_BTH_AUTHENTICATE = 2147483649;
export const SO_BTH_ENCRYPT = 2;
export const SO_BTH_MTU = 2147483655;
export const SO_BTH_MTU_MAX = 2147483656;
export const SO_BTH_MTU_MIN = 2147483658;
export const RFCOMM_MAX_MTU = 1011;
export const RFCOMM_MIN_MTU = 23;
export const BTH_SDP_VERSION = 1;
export const SDP_DEFAULT_INQUIRY_SECONDS = 6;
export const SDP_MAX_INQUIRY_SECONDS = 60;
export const SDP_DEFAULT_INQUIRY_MAX_RESPONSES = 255;
export const SDP_SERVICE_SEARCH_REQUEST = 1;
export const SDP_SERVICE_ATTRIBUTE_REQUEST = 2;
export const SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST = 3;
export const BTHNS_RESULT_DEVICE_CONNECTED = 65536;
export const BTHNS_RESULT_DEVICE_REMEMBERED = 131072;
export const BTHNS_RESULT_DEVICE_AUTHENTICATED = 262144;
export const RLS_ERROR = 1;
export const RLS_OVERRUN = 2;
export const RLS_PARITY = 4;
export const RLS_FRAMING = 8;
export const RPN_BAUD_2400 = 0;
export const RPN_BAUD_4800 = 1;
export const RPN_BAUD_7200 = 2;
export const RPN_BAUD_9600 = 3;
export const RPN_BAUD_19200 = 4;
export const RPN_BAUD_38400 = 5;
export const RPN_BAUD_57600 = 6;
export const RPN_BAUD_115200 = 7;
export const RPN_BAUD_230400 = 8;
export const RPN_DATA_5 = 0;
export const RPN_DATA_6 = 1;
export const RPN_DATA_7 = 2;
export const RPN_DATA_8 = 3;
export const RPN_STOP_1 = 0;
export const RPN_STOP_1_5 = 4;
export const RPN_PARITY_NONE = 0;
export const RPN_PARITY_ODD = 8;
export const RPN_PARITY_EVEN = 24;
export const RPN_PARITY_MARK = 40;
export const RPN_PARITY_SPACE = 56;
export const RPN_FLOW_X_IN = 1;
export const RPN_FLOW_X_OUT = 2;
export const RPN_FLOW_RTR_IN = 4;
export const RPN_FLOW_RTR_OUT = 8;
export const RPN_FLOW_RTC_IN = 16;
export const RPN_FLOW_RTC_OUT = 32;
export const RPN_PARAM_BAUD = 1;
export const RPN_PARAM_DATA = 2;
export const RPN_PARAM_STOP = 4;
export const RPN_PARAM_PARITY = 8;
export const RPN_PARAM_P_TYPE = 16;
export const RPN_PARAM_XON = 32;
export const RPN_PARAM_XOFF = 64;
export const RPN_PARAM_X_IN = 1;
export const RPN_PARAM_X_OUT = 2;
export const RPN_PARAM_RTR_IN = 4;
export const RPN_PARAM_RTR_OUT = 8;
export const RPN_PARAM_RTC_IN = 16;
export const RPN_PARAM_RTC_OUT = 32;
export const RFCOMM_CMD_NONE = 0;
export const RFCOMM_CMD_MSC = 1;
export const RFCOMM_CMD_RLS = 2;
export const RFCOMM_CMD_RPN = 3;
export const RFCOMM_CMD_RPN_REQUEST = 4;
export const RFCOMM_CMD_RPN_RESPONSE = 5;
export const NodeContainerTypeSequence = 0;
export const NodeContainerTypeAlternative = 1;
export const SDP_TYPE_NIL = 0;
export const SDP_TYPE_UINT = 1;
export const SDP_TYPE_INT = 2;
export const SDP_TYPE_UUID = 3;
export const SDP_TYPE_STRING = 4;
export const SDP_TYPE_BOOLEAN = 5;
export const SDP_TYPE_SEQUENCE = 6;
export const SDP_TYPE_ALTERNATIVE = 7;
export const SDP_TYPE_URL = 8;
export const SDP_TYPE_CONTAINER = 32;
export const SDP_ST_NONE = 0;
export const SDP_ST_UINT8 = 16;
export const SDP_ST_UINT16 = 272;
export const SDP_ST_UINT32 = 528;
export const SDP_ST_UINT64 = 784;
export const SDP_ST_UINT128 = 1040;
export const SDP_ST_INT8 = 32;
export const SDP_ST_INT16 = 288;
export const SDP_ST_INT32 = 544;
export const SDP_ST_INT64 = 800;
export const SDP_ST_INT128 = 1056;
export const SDP_ST_UUID16 = 304;
export const SDP_ST_UUID32 = 544;
export const SDP_ST_UUID128 = 1072;
export const IoCaps_DisplayOnly = 0;
export const IoCaps_DisplayYesNo = 1;
export const IoCaps_KeyboardOnly = 2;
export const IoCaps_NoInputNoOutput = 3;
export const IoCaps_Undefined = 255;
export const MITMProtectionNotRequired = 0;
export const MITMProtectionRequired = 1;
export const MITMProtectionNotRequiredBonding = 2;
export const MITMProtectionRequiredBonding = 3;
export const MITMProtectionNotRequiredGeneralBonding = 4;
export const MITMProtectionRequiredGeneralBonding = 5;
export const MITMProtectionNotDefined = 255;
export const BLUETOOTH_AUTHENTICATION_METHOD_LEGACY = 1;
export const BLUETOOTH_AUTHENTICATION_METHOD_OOB = 2;
export const BLUETOOTH_AUTHENTICATION_METHOD_NUMERIC_COMPARISON = 3;
export const BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY_NOTIFICATION = 4;
export const BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY = 5;
export const BLUETOOTH_IO_CAPABILITY_DISPLAYONLY = 0;
export const BLUETOOTH_IO_CAPABILITY_DISPLAYYESNO = 1;
export const BLUETOOTH_IO_CAPABILITY_KEYBOARDONLY = 2;
export const BLUETOOTH_IO_CAPABILITY_NOINPUTNOOUTPUT = 3;
export const BLUETOOTH_IO_CAPABILITY_UNDEFINED = 255;
export const BLUETOOTH_MITM_ProtectionNotRequired = 0;
export const BLUETOOTH_MITM_ProtectionRequired = 1;
export const BLUETOOTH_MITM_ProtectionNotRequiredBonding = 2;
export const BLUETOOTH_MITM_ProtectionRequiredBonding = 3;
export const BLUETOOTH_MITM_ProtectionNotRequiredGeneralBonding = 4;
export const BLUETOOTH_MITM_ProtectionRequiredGeneralBonding = 5;
export const BLUETOOTH_MITM_ProtectionNotDefined = 255;
export const CharacteristicExtendedProperties = 0;
export const CharacteristicUserDescription = 1;
export const ClientCharacteristicConfiguration = 2;
export const ServerCharacteristicConfiguration = 3;
export const CharacteristicFormat = 4;
export const CharacteristicAggregateFormat = 5;
export const CustomDescriptor = 6;
export const CharacteristicValueChangedEvent = 0;

// Structs

export type HANDLE_SDP_TYPE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Bluetooth.SDP_LARGE_INTEGER_16 (size: 16)
 */
export interface SDP_LARGE_INTEGER_16 {
  /** u64 */
  LowPart: Deno.PointerValue;
  /** i64 */
  HighPart: Deno.PointerValue;
}

export const sizeofSDP_LARGE_INTEGER_16 = 16;

export function allocSDP_LARGE_INTEGER_16(data?: Partial<SDP_LARGE_INTEGER_16>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_LARGE_INTEGER_16);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LowPart !== undefined) view.setBigUint64(0, BigInt(data.LowPart), true);
  // 0x08: i64
  if (data?.HighPart !== undefined) view.setBigInt64(8, BigInt(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SDP_ULARGE_INTEGER_16 (size: 16)
 */
export interface SDP_ULARGE_INTEGER_16 {
  /** u64 */
  LowPart: Deno.PointerValue;
  /** u64 */
  HighPart: Deno.PointerValue;
}

export const sizeofSDP_ULARGE_INTEGER_16 = 16;

export function allocSDP_ULARGE_INTEGER_16(data?: Partial<SDP_ULARGE_INTEGER_16>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_ULARGE_INTEGER_16);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LowPart !== undefined) view.setBigUint64(0, BigInt(data.LowPart), true);
  // 0x08: u64
  if (data?.HighPart !== undefined) view.setBigUint64(8, BigInt(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SdpAttributeRange (size: 8)
 */
export interface SdpAttributeRange {
  /** u16 */
  minAttribute: number;
  /** u16 */
  maxAttribute: number;
}

export const sizeofSdpAttributeRange = 8;

export function allocSdpAttributeRange(data?: Partial<SdpAttributeRange>): Uint8Array {
  const buf = new Uint8Array(sizeofSdpAttributeRange);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.minAttribute !== undefined) view.setUint16(0, Number(data.minAttribute), true);
  // 0x02: u16
  if (data?.maxAttribute !== undefined) view.setUint16(2, Number(data.maxAttribute), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SdpQueryUuidUnion (size: 16)
 */
export interface SdpQueryUuidUnion {
  /** System.Guid */
  uuid128: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uuid32: number;
  /** u16 */
  uuid16: number;
}

export const sizeofSdpQueryUuidUnion = 16;

export function allocSdpQueryUuidUnion(data?: Partial<SdpQueryUuidUnion>): Uint8Array {
  const buf = new Uint8Array(sizeofSdpQueryUuidUnion);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uuid128 !== undefined) view.setBigUint64(0, data.uuid128 === null ? 0n : BigInt(util.toPointer(data.uuid128)), true);
  // 0x08: u32
  if (data?.uuid32 !== undefined) view.setUint32(8, Number(data.uuid32), true);
  // 0x0c: u16
  if (data?.uuid16 !== undefined) view.setUint16(12, Number(data.uuid16), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SdpQueryUuid (size: 16)
 */
export interface SdpQueryUuid {
  /** Windows.Win32.Devices.Bluetooth.SdpQueryUuidUnion */
  u: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  uuidType: number;
}

export const sizeofSdpQueryUuid = 16;

export function allocSdpQueryUuid(data?: Partial<SdpQueryUuid>): Uint8Array {
  const buf = new Uint8Array(sizeofSdpQueryUuid);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x08: u16
  if (data?.uuidType !== undefined) view.setUint16(8, Number(data.uuidType), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_DEVICE_INFO (size: 32)
 */
export interface BTH_DEVICE_INFO {
  /** u32 */
  flags: number;
  /** u64 */
  address: Deno.PointerValue;
  /** u32 */
  classOfDevice: number;
  /** array */
  name: Deno.PointerValue | null;
}

export const sizeofBTH_DEVICE_INFO = 32;

export function allocBTH_DEVICE_INFO(data?: Partial<BTH_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.address !== undefined) view.setBigUint64(8, BigInt(data.address), true);
  // 0x10: u32
  if (data?.classOfDevice !== undefined) view.setUint32(16, Number(data.classOfDevice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.name !== undefined) view.setBigUint64(24, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_RADIO_IN_RANGE (size: 16)
 */
export interface BTH_RADIO_IN_RANGE {
  /** Windows.Win32.Devices.Bluetooth.BTH_DEVICE_INFO */
  deviceInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  previousDeviceFlags: number;
}

export const sizeofBTH_RADIO_IN_RANGE = 16;

export function allocBTH_RADIO_IN_RANGE(data?: Partial<BTH_RADIO_IN_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_RADIO_IN_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.deviceInfo !== undefined) view.setBigUint64(0, data.deviceInfo === null ? 0n : BigInt(util.toPointer(data.deviceInfo)), true);
  // 0x08: u32
  if (data?.previousDeviceFlags !== undefined) view.setUint32(8, Number(data.previousDeviceFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_L2CAP_EVENT_INFO (size: 16)
 */
export interface BTH_L2CAP_EVENT_INFO {
  /** u64 */
  bthAddress: Deno.PointerValue;
  /** u16 */
  psm: number;
  /** u8 */
  connected: number;
  /** u8 */
  initiated: number;
}

export const sizeofBTH_L2CAP_EVENT_INFO = 16;

export function allocBTH_L2CAP_EVENT_INFO(data?: Partial<BTH_L2CAP_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_L2CAP_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.bthAddress !== undefined) view.setBigUint64(0, BigInt(data.bthAddress), true);
  // 0x08: u16
  if (data?.psm !== undefined) view.setUint16(8, Number(data.psm), true);
  // 0x0a: u8
  if (data?.connected !== undefined) view.setUint8(10, Number(data.connected));
  // 0x0b: u8
  if (data?.initiated !== undefined) view.setUint8(11, Number(data.initiated));
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_HCI_EVENT_INFO (size: 16)
 */
export interface BTH_HCI_EVENT_INFO {
  /** u64 */
  bthAddress: Deno.PointerValue;
  /** u8 */
  connectionType: number;
  /** u8 */
  connected: number;
}

export const sizeofBTH_HCI_EVENT_INFO = 16;

export function allocBTH_HCI_EVENT_INFO(data?: Partial<BTH_HCI_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_HCI_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.bthAddress !== undefined) view.setBigUint64(0, BigInt(data.bthAddress), true);
  // 0x08: u8
  if (data?.connectionType !== undefined) view.setUint8(8, Number(data.connectionType));
  // 0x09: u8
  if (data?.connected !== undefined) view.setUint8(9, Number(data.connected));
  // 0x0a: pad6
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_ADDRESS_STRUCT (size: 8)
 */
export interface BLUETOOTH_ADDRESS_STRUCT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_ADDRESS_STRUCT = 8;

export function allocBLUETOOTH_ADDRESS_STRUCT(data?: Partial<BLUETOOTH_ADDRESS_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_ADDRESS_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT (size: 32)
 */
export interface BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT {
  /** Windows.Win32.Foundation.BOOL */
  Enabled: boolean;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_ADDRESS_STRUCT */
  btAddr: Uint8Array | Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szDeviceString: Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_LOCAL_SERVICE_INFO_STRUCT = 32;

export function allocBLUETOOTH_LOCAL_SERVICE_INFO_STRUCT(data?: Partial<BLUETOOTH_LOCAL_SERVICE_INFO_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_LOCAL_SERVICE_INFO_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enabled !== undefined) view.setInt32(0, Number(data.Enabled), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.btAddr !== undefined) view.setBigUint64(8, data.btAddr === null ? 0n : BigInt(util.toPointer(data.btAddr)), true);
  // 0x10: pointer
  if (data?.szName !== undefined) view.setBigUint64(16, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x18: pointer
  if (data?.szDeviceString !== undefined) view.setBigUint64(24, data.szDeviceString === null ? 0n : BigInt(util.toPointer(data.szDeviceString)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_FIND_RADIO_PARAMS (size: 8)
 */
export interface BLUETOOTH_FIND_RADIO_PARAMS {
  /** u32 */
  dwSize: number;
}

export const sizeofBLUETOOTH_FIND_RADIO_PARAMS = 8;

export function allocBLUETOOTH_FIND_RADIO_PARAMS(data?: Partial<BLUETOOTH_FIND_RADIO_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_FIND_RADIO_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_RADIO_INFO (size: 32)
 */
export interface BLUETOOTH_RADIO_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_ADDRESS_STRUCT */
  address: Uint8Array | Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** u32 */
  ulClassofDevice: number;
  /** u16 */
  lmpSubversion: number;
  /** u16 */
  manufacturer: number;
}

export const sizeofBLUETOOTH_RADIO_INFO = 32;

export function allocBLUETOOTH_RADIO_INFO(data?: Partial<BLUETOOTH_RADIO_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_RADIO_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.address !== undefined) view.setBigUint64(8, data.address === null ? 0n : BigInt(util.toPointer(data.address)), true);
  // 0x10: pointer
  if (data?.szName !== undefined) view.setBigUint64(16, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x18: u32
  if (data?.ulClassofDevice !== undefined) view.setUint32(24, Number(data.ulClassofDevice), true);
  // 0x1c: u16
  if (data?.lmpSubversion !== undefined) view.setUint16(28, Number(data.lmpSubversion), true);
  // 0x1e: u16
  if (data?.manufacturer !== undefined) view.setUint16(30, Number(data.manufacturer), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_DEVICE_INFO_STRUCT (size: 56)
 */
export interface BLUETOOTH_DEVICE_INFO_STRUCT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_ADDRESS_STRUCT */
  Address: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulClassofDevice: number;
  /** Windows.Win32.Foundation.BOOL */
  fConnected: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fRemembered: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAuthenticated: boolean;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stLastSeen: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stLastUsed: Uint8Array | Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_DEVICE_INFO_STRUCT = 56;

export function allocBLUETOOTH_DEVICE_INFO_STRUCT(data?: Partial<BLUETOOTH_DEVICE_INFO_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_DEVICE_INFO_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  // 0x10: u32
  if (data?.ulClassofDevice !== undefined) view.setUint32(16, Number(data.ulClassofDevice), true);
  // 0x14: i32
  if (data?.fConnected !== undefined) view.setInt32(20, Number(data.fConnected), true);
  // 0x18: i32
  if (data?.fRemembered !== undefined) view.setInt32(24, Number(data.fRemembered), true);
  // 0x1c: i32
  if (data?.fAuthenticated !== undefined) view.setInt32(28, Number(data.fAuthenticated), true);
  // 0x20: pointer
  if (data?.stLastSeen !== undefined) view.setBigUint64(32, data.stLastSeen === null ? 0n : BigInt(util.toPointer(data.stLastSeen)), true);
  // 0x28: pointer
  if (data?.stLastUsed !== undefined) view.setBigUint64(40, data.stLastUsed === null ? 0n : BigInt(util.toPointer(data.stLastUsed)), true);
  // 0x30: pointer
  if (data?.szName !== undefined) view.setBigUint64(48, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS (size: 32)
 */
export interface BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS {
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_DEVICE_INFO_STRUCT */
  deviceInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_AUTHENTICATION_METHOD */
  authenticationMethod: BLUETOOTH_AUTHENTICATION_METHOD;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_IO_CAPABILITY */
  ioCapability: BLUETOOTH_IO_CAPABILITY;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_AUTHENTICATION_REQUIREMENTS */
  authenticationRequirements: BLUETOOTH_AUTHENTICATION_REQUIREMENTS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS = 32;

export function allocBLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS(data?: Partial<BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.deviceInfo !== undefined) view.setBigUint64(0, data.deviceInfo === null ? 0n : BigInt(util.toPointer(data.deviceInfo)), true);
  // 0x08: i32
  if (data?.authenticationMethod !== undefined) view.setInt32(8, Number(data.authenticationMethod), true);
  // 0x0c: i32
  if (data?.ioCapability !== undefined) view.setInt32(12, Number(data.ioCapability), true);
  // 0x10: i32
  if (data?.authenticationRequirements !== undefined) view.setInt32(16, Number(data.authenticationRequirements), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_DEVICE_SEARCH_PARAMS (size: 40)
 */
export interface BLUETOOTH_DEVICE_SEARCH_PARAMS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fReturnAuthenticated: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fReturnRemembered: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fReturnUnknown: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fReturnConnected: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIssueInquiry: boolean;
  /** u8 */
  cTimeoutMultiplier: number;
  /** Windows.Win32.Foundation.HANDLE */
  hRadio: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_DEVICE_SEARCH_PARAMS = 40;

export function allocBLUETOOTH_DEVICE_SEARCH_PARAMS(data?: Partial<BLUETOOTH_DEVICE_SEARCH_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_DEVICE_SEARCH_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.fReturnAuthenticated !== undefined) view.setInt32(4, Number(data.fReturnAuthenticated), true);
  // 0x08: i32
  if (data?.fReturnRemembered !== undefined) view.setInt32(8, Number(data.fReturnRemembered), true);
  // 0x0c: i32
  if (data?.fReturnUnknown !== undefined) view.setInt32(12, Number(data.fReturnUnknown), true);
  // 0x10: i32
  if (data?.fReturnConnected !== undefined) view.setInt32(16, Number(data.fReturnConnected), true);
  // 0x14: i32
  if (data?.fIssueInquiry !== undefined) view.setInt32(20, Number(data.fIssueInquiry), true);
  // 0x18: u8
  if (data?.cTimeoutMultiplier !== undefined) view.setUint8(24, Number(data.cTimeoutMultiplier));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.hRadio !== undefined) view.setBigUint64(32, data.hRadio === null ? 0n : BigInt(util.toPointer(data.hRadio)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_COD_PAIRS (size: 16)
 */
export interface BLUETOOTH_COD_PAIRS {
  /** u32 */
  ulCODMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcszDescription: string | null | Uint8Array | Uint16Array;
}

export const sizeofBLUETOOTH_COD_PAIRS = 16;

export function allocBLUETOOTH_COD_PAIRS(data?: Partial<BLUETOOTH_COD_PAIRS>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_COD_PAIRS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulCODMask !== undefined) view.setUint32(0, Number(data.ulCODMask), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcszDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcszDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_SELECT_DEVICE_PARAMS (size: 88)
 */
export interface BLUETOOTH_SELECT_DEVICE_PARAMS {
  /** u32 */
  dwSize: number;
  /** u32 */
  cNumOfClasses: number;
  /** ptr */
  prgClassOfDevices: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInfo: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fForceAuthentication: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fShowAuthenticated: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fShowRemembered: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fShowUnknown: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fAddNewDeviceWizard: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fSkipServicesPage: boolean;
  /** Windows.Win32.Devices.Bluetooth.PFN_DEVICE_CALLBACK */
  pfnDeviceCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvParam: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cNumDevices: number;
  /** ptr */
  pDevices: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBLUETOOTH_SELECT_DEVICE_PARAMS = 88;

export function allocBLUETOOTH_SELECT_DEVICE_PARAMS(data?: Partial<BLUETOOTH_SELECT_DEVICE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_SELECT_DEVICE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cNumOfClasses !== undefined) view.setUint32(4, Number(data.cNumOfClasses), true);
  // 0x08: pointer
  if (data?.prgClassOfDevices !== undefined) view.setBigUint64(8, data.prgClassOfDevices === null ? 0n : BigInt(util.toPointer(data.prgClassOfDevices)), true);
  // 0x10: buffer
  if (data?.pszInfo !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(24, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x20: i32
  if (data?.fForceAuthentication !== undefined) view.setInt32(32, Number(data.fForceAuthentication), true);
  // 0x24: i32
  if (data?.fShowAuthenticated !== undefined) view.setInt32(36, Number(data.fShowAuthenticated), true);
  // 0x28: i32
  if (data?.fShowRemembered !== undefined) view.setInt32(40, Number(data.fShowRemembered), true);
  // 0x2c: i32
  if (data?.fShowUnknown !== undefined) view.setInt32(44, Number(data.fShowUnknown), true);
  // 0x30: i32
  if (data?.fAddNewDeviceWizard !== undefined) view.setInt32(48, Number(data.fAddNewDeviceWizard), true);
  // 0x34: i32
  if (data?.fSkipServicesPage !== undefined) view.setInt32(52, Number(data.fSkipServicesPage), true);
  // 0x38: pointer
  if (data?.pfnDeviceCallback !== undefined) view.setBigUint64(56, data.pfnDeviceCallback === null ? 0n : BigInt(util.toPointer(data.pfnDeviceCallback)), true);
  // 0x40: pointer
  if (data?.pvParam !== undefined) view.setBigUint64(64, data.pvParam === null ? 0n : BigInt(util.toPointer(data.pvParam)), true);
  // 0x48: u32
  if (data?.cNumDevices !== undefined) view.setUint32(72, Number(data.cNumDevices), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pDevices !== undefined) view.setBigUint64(80, data.pDevices === null ? 0n : BigInt(util.toPointer(data.pDevices)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_PIN_INFO (size: 16)
 */
export interface BLUETOOTH_PIN_INFO {
  /** array */
  pin: Deno.PointerValue | null;
  /** u8 */
  pinLength: number;
}

export const sizeofBLUETOOTH_PIN_INFO = 16;

export function allocBLUETOOTH_PIN_INFO(data?: Partial<BLUETOOTH_PIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_PIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pin !== undefined) view.setBigUint64(0, data.pin === null ? 0n : BigInt(util.toPointer(data.pin)), true);
  // 0x08: u8
  if (data?.pinLength !== undefined) view.setUint8(8, Number(data.pinLength));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_OOB_DATA_INFO (size: 16)
 */
export interface BLUETOOTH_OOB_DATA_INFO {
  /** array */
  C: Deno.PointerValue | null;
  /** array */
  R: Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_OOB_DATA_INFO = 16;

export function allocBLUETOOTH_OOB_DATA_INFO(data?: Partial<BLUETOOTH_OOB_DATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_OOB_DATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.C !== undefined) view.setBigUint64(0, data.C === null ? 0n : BigInt(util.toPointer(data.C)), true);
  // 0x08: pointer
  if (data?.R !== undefined) view.setBigUint64(8, data.R === null ? 0n : BigInt(util.toPointer(data.R)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_NUMERIC_COMPARISON_INFO (size: 8)
 */
export interface BLUETOOTH_NUMERIC_COMPARISON_INFO {
  /** u32 */
  NumericValue: number;
}

export const sizeofBLUETOOTH_NUMERIC_COMPARISON_INFO = 8;

export function allocBLUETOOTH_NUMERIC_COMPARISON_INFO(data?: Partial<BLUETOOTH_NUMERIC_COMPARISON_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_NUMERIC_COMPARISON_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumericValue !== undefined) view.setUint32(0, Number(data.NumericValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_PASSKEY_INFO (size: 8)
 */
export interface BLUETOOTH_PASSKEY_INFO {
  /** u32 */
  passkey: number;
}

export const sizeofBLUETOOTH_PASSKEY_INFO = 8;

export function allocBLUETOOTH_PASSKEY_INFO(data?: Partial<BLUETOOTH_PASSKEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_PASSKEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.passkey !== undefined) view.setUint32(0, Number(data.passkey), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_AUTHENTICATE_RESPONSE (size: 32)
 */
export interface BLUETOOTH_AUTHENTICATE_RESPONSE {
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_ADDRESS_STRUCT */
  bthAddressRemote: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.BLUETOOTH_AUTHENTICATION_METHOD */
  authMethod: BLUETOOTH_AUTHENTICATION_METHOD;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  negativeResponse: number;
}

export const sizeofBLUETOOTH_AUTHENTICATE_RESPONSE = 32;

export function allocBLUETOOTH_AUTHENTICATE_RESPONSE(data?: Partial<BLUETOOTH_AUTHENTICATE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_AUTHENTICATE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bthAddressRemote !== undefined) view.setBigUint64(0, data.bthAddressRemote === null ? 0n : BigInt(util.toPointer(data.bthAddressRemote)), true);
  // 0x08: i32
  if (data?.authMethod !== undefined) view.setInt32(8, Number(data.authMethod), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u8
  if (data?.negativeResponse !== undefined) view.setUint8(24, Number(data.negativeResponse));
  // 0x19: pad7
  return buf;
}

export type CHAR = number;

/**
 * _string_e__Struct (size: 16)
 */
export interface _string_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_string_e__Struct = 16;

export function alloc_string_e__Struct(data?: Partial<_string_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_string_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _url_e__Struct (size: 16)
 */
export interface _url_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_url_e__Struct = 16;

export function alloc_url_e__Struct(data?: Partial<_url_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_url_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _sequence_e__Struct (size: 16)
 */
export interface _sequence_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_sequence_e__Struct = 16;

export function alloc_sequence_e__Struct(data?: Partial<_sequence_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_sequence_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _alternative_e__Struct (size: 16)
 */
export interface _alternative_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_alternative_e__Struct = 16;

export function alloc_alternative_e__Struct(data?: Partial<_alternative_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_alternative_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _data_e__Union (size: 104)
 */
export interface _data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.SDP_LARGE_INTEGER_16 */
  int128: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: Deno.PointerValue;
  /** i32 */
  int32: number;
  /** i16 */
  int16: number;
  /** Windows.Win32.Foundation.CHAR */
  int8: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.SDP_ULARGE_INTEGER_16 */
  uint128: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  uint64: Deno.PointerValue;
  /** u32 */
  uint32: number;
  /** u16 */
  uint16: number;
  /** u8 */
  uint8: number;
  /** u8 */
  booleanVal: number;
  /** System.Guid */
  uuid128: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uuid32: number;
  /** u16 */
  uuid16: number;
  /** _string_e__Struct */
  string: Uint8Array | Deno.PointerValue | null;
  /** _url_e__Struct */
  url: Uint8Array | Deno.PointerValue | null;
  /** _sequence_e__Struct */
  sequence: Uint8Array | Deno.PointerValue | null;
  /** _alternative_e__Struct */
  alternative: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_data_e__Union = 104;

export function alloc_data_e__Union(data?: Partial<_data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.int128 !== undefined) view.setBigUint64(0, data.int128 === null ? 0n : BigInt(util.toPointer(data.int128)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, BigInt(data.int64), true);
  // 0x10: i32
  if (data?.int32 !== undefined) view.setInt32(16, Number(data.int32), true);
  // 0x14: i16
  if (data?.int16 !== undefined) view.setInt16(20, Number(data.int16), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.int8 !== undefined) view.setBigUint64(24, data.int8 === null ? 0n : BigInt(util.toPointer(data.int8)), true);
  // 0x20: pointer
  if (data?.uint128 !== undefined) view.setBigUint64(32, data.uint128 === null ? 0n : BigInt(util.toPointer(data.uint128)), true);
  // 0x28: u64
  if (data?.uint64 !== undefined) view.setBigUint64(40, BigInt(data.uint64), true);
  // 0x30: u32
  if (data?.uint32 !== undefined) view.setUint32(48, Number(data.uint32), true);
  // 0x34: u16
  if (data?.uint16 !== undefined) view.setUint16(52, Number(data.uint16), true);
  // 0x36: u8
  if (data?.uint8 !== undefined) view.setUint8(54, Number(data.uint8));
  // 0x37: u8
  if (data?.booleanVal !== undefined) view.setUint8(55, Number(data.booleanVal));
  // 0x38: pointer
  if (data?.uuid128 !== undefined) view.setBigUint64(56, data.uuid128 === null ? 0n : BigInt(util.toPointer(data.uuid128)), true);
  // 0x40: u32
  if (data?.uuid32 !== undefined) view.setUint32(64, Number(data.uuid32), true);
  // 0x44: u16
  if (data?.uuid16 !== undefined) view.setUint16(68, Number(data.uuid16), true);
  // 0x46: pad2
  // 0x48: pointer
  if (data?.string !== undefined) view.setBigUint64(72, data.string === null ? 0n : BigInt(util.toPointer(data.string)), true);
  // 0x50: pointer
  if (data?.url !== undefined) view.setBigUint64(80, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x58: pointer
  if (data?.sequence !== undefined) view.setBigUint64(88, data.sequence === null ? 0n : BigInt(util.toPointer(data.sequence)), true);
  // 0x60: pointer
  if (data?.alternative !== undefined) view.setBigUint64(96, data.alternative === null ? 0n : BigInt(util.toPointer(data.alternative)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SDP_ELEMENT_DATA (size: 16)
 */
export interface SDP_ELEMENT_DATA {
  /** Windows.Win32.Devices.Bluetooth.SDP_TYPE */
  type: SDP_TYPE;
  /** Windows.Win32.Devices.Bluetooth.SDP_SPECIFICTYPE */
  specificType: SDP_SPECIFICTYPE;
  /** _data_e__Union */
  data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSDP_ELEMENT_DATA = 16;

export function allocSDP_ELEMENT_DATA(data?: Partial<SDP_ELEMENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_ELEMENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: i32
  if (data?.specificType !== undefined) view.setInt32(4, Number(data.specificType), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SDP_STRING_TYPE_DATA (size: 8)
 */
export interface SDP_STRING_TYPE_DATA {
  /** u16 */
  encoding: number;
  /** u16 */
  mibeNum: number;
  /** u16 */
  attributeId: number;
}

export const sizeofSDP_STRING_TYPE_DATA = 8;

export function allocSDP_STRING_TYPE_DATA(data?: Partial<SDP_STRING_TYPE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_STRING_TYPE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.encoding !== undefined) view.setUint16(0, Number(data.encoding), true);
  // 0x02: u16
  if (data?.mibeNum !== undefined) view.setUint16(2, Number(data.mibeNum), true);
  // 0x04: u16
  if (data?.attributeId !== undefined) view.setUint16(4, Number(data.attributeId), true);
  // 0x06: pad2
  return buf;
}

export type BOOLEAN = number;

/**
 * _Value_e__Union (size: 16)
 */
export interface _Value_e__Union {
  /** u16 */
  ShortUuid: number;
  /** System.Guid */
  LongUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 16;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ShortUuid !== undefined) view.setUint16(0, Number(data.ShortUuid), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LongUuid !== undefined) view.setBigUint64(8, data.LongUuid === null ? 0n : BigInt(util.toPointer(data.LongUuid)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_LE_UUID (size: 16)
 */
export interface BTH_LE_UUID {
  /** Windows.Win32.Foundation.BOOLEAN */
  IsShortUuid: Uint8Array | Deno.PointerValue | null;
  /** _Value_e__Union */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBTH_LE_UUID = 16;

export function allocBTH_LE_UUID(data?: Partial<BTH_LE_UUID>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_LE_UUID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IsShortUuid !== undefined) view.setBigUint64(0, data.IsShortUuid === null ? 0n : BigInt(util.toPointer(data.IsShortUuid)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_SERVICE (size: 16)
 */
export interface BTH_LE_GATT_SERVICE {
  /** Windows.Win32.Devices.Bluetooth.BTH_LE_UUID */
  ServiceUuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AttributeHandle: number;
}

export const sizeofBTH_LE_GATT_SERVICE = 16;

export function allocBTH_LE_GATT_SERVICE(data?: Partial<BTH_LE_GATT_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_LE_GATT_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServiceUuid !== undefined) view.setBigUint64(0, data.ServiceUuid === null ? 0n : BigInt(util.toPointer(data.ServiceUuid)), true);
  // 0x08: u16
  if (data?.AttributeHandle !== undefined) view.setUint16(8, Number(data.AttributeHandle), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_CHARACTERISTIC (size: 88)
 */
export interface BTH_LE_GATT_CHARACTERISTIC {
  /** u16 */
  ServiceHandle: number;
  /** Windows.Win32.Devices.Bluetooth.BTH_LE_UUID */
  CharacteristicUuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AttributeHandle: number;
  /** u16 */
  CharacteristicValueHandle: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsBroadcastable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsReadable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsWritable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsWritableWithoutResponse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsSignedWritable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsNotifiable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsIndicatable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasExtendedProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBTH_LE_GATT_CHARACTERISTIC = 88;

export function allocBTH_LE_GATT_CHARACTERISTIC(data?: Partial<BTH_LE_GATT_CHARACTERISTIC>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_LE_GATT_CHARACTERISTIC);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ServiceHandle !== undefined) view.setUint16(0, Number(data.ServiceHandle), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.CharacteristicUuid !== undefined) view.setBigUint64(8, data.CharacteristicUuid === null ? 0n : BigInt(util.toPointer(data.CharacteristicUuid)), true);
  // 0x10: u16
  if (data?.AttributeHandle !== undefined) view.setUint16(16, Number(data.AttributeHandle), true);
  // 0x12: u16
  if (data?.CharacteristicValueHandle !== undefined) view.setUint16(18, Number(data.CharacteristicValueHandle), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.IsBroadcastable !== undefined) view.setBigUint64(24, data.IsBroadcastable === null ? 0n : BigInt(util.toPointer(data.IsBroadcastable)), true);
  // 0x20: pointer
  if (data?.IsReadable !== undefined) view.setBigUint64(32, data.IsReadable === null ? 0n : BigInt(util.toPointer(data.IsReadable)), true);
  // 0x28: pointer
  if (data?.IsWritable !== undefined) view.setBigUint64(40, data.IsWritable === null ? 0n : BigInt(util.toPointer(data.IsWritable)), true);
  // 0x30: pointer
  if (data?.IsWritableWithoutResponse !== undefined) view.setBigUint64(48, data.IsWritableWithoutResponse === null ? 0n : BigInt(util.toPointer(data.IsWritableWithoutResponse)), true);
  // 0x38: pointer
  if (data?.IsSignedWritable !== undefined) view.setBigUint64(56, data.IsSignedWritable === null ? 0n : BigInt(util.toPointer(data.IsSignedWritable)), true);
  // 0x40: pointer
  if (data?.IsNotifiable !== undefined) view.setBigUint64(64, data.IsNotifiable === null ? 0n : BigInt(util.toPointer(data.IsNotifiable)), true);
  // 0x48: pointer
  if (data?.IsIndicatable !== undefined) view.setBigUint64(72, data.IsIndicatable === null ? 0n : BigInt(util.toPointer(data.IsIndicatable)), true);
  // 0x50: pointer
  if (data?.HasExtendedProperties !== undefined) view.setBigUint64(80, data.HasExtendedProperties === null ? 0n : BigInt(util.toPointer(data.HasExtendedProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_CHARACTERISTIC_VALUE (size: 16)
 */
export interface BTH_LE_GATT_CHARACTERISTIC_VALUE {
  /** u32 */
  DataSize: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofBTH_LE_GATT_CHARACTERISTIC_VALUE = 16;

export function allocBTH_LE_GATT_CHARACTERISTIC_VALUE(data?: Partial<BTH_LE_GATT_CHARACTERISTIC_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_LE_GATT_CHARACTERISTIC_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DataSize !== undefined) view.setUint32(0, Number(data.DataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_DESCRIPTOR (size: 24)
 */
export interface BTH_LE_GATT_DESCRIPTOR {
  /** u16 */
  ServiceHandle: number;
  /** u16 */
  CharacteristicHandle: number;
  /** Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_DESCRIPTOR_TYPE */
  DescriptorType: BTH_LE_GATT_DESCRIPTOR_TYPE;
  /** Windows.Win32.Devices.Bluetooth.BTH_LE_UUID */
  DescriptorUuid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  AttributeHandle: number;
}

export const sizeofBTH_LE_GATT_DESCRIPTOR = 24;

export function allocBTH_LE_GATT_DESCRIPTOR(data?: Partial<BTH_LE_GATT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_LE_GATT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ServiceHandle !== undefined) view.setUint16(0, Number(data.ServiceHandle), true);
  // 0x02: u16
  if (data?.CharacteristicHandle !== undefined) view.setUint16(2, Number(data.CharacteristicHandle), true);
  // 0x04: i32
  if (data?.DescriptorType !== undefined) view.setInt32(4, Number(data.DescriptorType), true);
  // 0x08: pointer
  if (data?.DescriptorUuid !== undefined) view.setBigUint64(8, data.DescriptorUuid === null ? 0n : BigInt(util.toPointer(data.DescriptorUuid)), true);
  // 0x10: u16
  if (data?.AttributeHandle !== undefined) view.setUint16(16, Number(data.AttributeHandle), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_DESCRIPTOR_VALUE (size: 40)
 */
export interface BTH_LE_GATT_DESCRIPTOR_VALUE {
  /** Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_DESCRIPTOR_TYPE */
  DescriptorType: BTH_LE_GATT_DESCRIPTOR_TYPE;
  /** Windows.Win32.Devices.Bluetooth.BTH_LE_UUID */
  DescriptorUuid: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataSize: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofBTH_LE_GATT_DESCRIPTOR_VALUE = 40;

export function allocBTH_LE_GATT_DESCRIPTOR_VALUE(data?: Partial<BTH_LE_GATT_DESCRIPTOR_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_LE_GATT_DESCRIPTOR_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DescriptorType !== undefined) view.setInt32(0, Number(data.DescriptorType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DescriptorUuid !== undefined) view.setBigUint64(8, data.DescriptorUuid === null ? 0n : BigInt(util.toPointer(data.DescriptorUuid)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u32
  if (data?.DataSize !== undefined) view.setUint32(24, Number(data.DataSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Data !== undefined) view.setBigUint64(32, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION (size: 16)
 */
export interface BLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION {
  /** u16 */
  NumCharacteristics: number;
  /** array */
  Characteristics: Deno.PointerValue | null;
}

export const sizeofBLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION = 16;

export function allocBLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION(data?: Partial<BLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_GATT_VALUE_CHANGED_EVENT_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumCharacteristics !== undefined) view.setUint16(0, Number(data.NumCharacteristics), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Characteristics !== undefined) view.setBigUint64(8, data.Characteristics === null ? 0n : BigInt(util.toPointer(data.Characteristics)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BLUETOOTH_GATT_VALUE_CHANGED_EVENT (size: 24)
 */
export interface BLUETOOTH_GATT_VALUE_CHANGED_EVENT {
  /** u16 */
  ChangedAttributeHandle: number;
  /** usize */
  CharacteristicValueDataSize: Deno.PointerValue;
  /** ptr */
  CharacteristicValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBLUETOOTH_GATT_VALUE_CHANGED_EVENT = 24;

export function allocBLUETOOTH_GATT_VALUE_CHANGED_EVENT(data?: Partial<BLUETOOTH_GATT_VALUE_CHANGED_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofBLUETOOTH_GATT_VALUE_CHANGED_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ChangedAttributeHandle !== undefined) view.setUint16(0, Number(data.ChangedAttributeHandle), true);
  // 0x02: pad6
  // 0x08: usize
  if (data?.CharacteristicValueDataSize !== undefined) view.setBigUint64(8, BigInt(data.CharacteristicValueDataSize), true);
  // 0x10: pointer
  if (data?.CharacteristicValue !== undefined) view.setBigUint64(16, data.CharacteristicValue === null ? 0n : BigInt(util.toPointer(data.CharacteristicValue)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SOCKADDR_BTH (size: 32)
 */
export interface SOCKADDR_BTH {
  /** u16 */
  addressFamily: number;
  /** u64 */
  btAddr: Deno.PointerValue;
  /** System.Guid */
  serviceClassId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  port: number;
}

export const sizeofSOCKADDR_BTH = 32;

export function allocSOCKADDR_BTH(data?: Partial<SOCKADDR_BTH>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_BTH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.addressFamily !== undefined) view.setUint16(0, Number(data.addressFamily), true);
  // 0x02: pad6
  // 0x08: u64
  if (data?.btAddr !== undefined) view.setBigUint64(8, BigInt(data.btAddr), true);
  // 0x10: pointer
  if (data?.serviceClassId !== undefined) view.setBigUint64(16, data.serviceClassId === null ? 0n : BigInt(util.toPointer(data.serviceClassId)), true);
  // 0x18: u32
  if (data?.port !== undefined) view.setUint32(24, Number(data.port), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_SET_SERVICE (size: 48)
 */
export interface BTH_SET_SERVICE {
  /** ptr */
  pSdpVersion: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pRecordHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fCodService: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  ulRecordLength: number;
  /** array */
  pRecord: Deno.PointerValue | null;
}

export const sizeofBTH_SET_SERVICE = 48;

export function allocBTH_SET_SERVICE(data?: Partial<BTH_SET_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_SET_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSdpVersion !== undefined) view.setBigUint64(0, data.pSdpVersion === null ? 0n : BigInt(util.toPointer(data.pSdpVersion)), true);
  // 0x08: pointer
  if (data?.pRecordHandle !== undefined) view.setBigUint64(8, data.pRecordHandle === null ? 0n : BigInt(util.toPointer(data.pRecordHandle)), true);
  // 0x10: u32
  if (data?.fCodService !== undefined) view.setUint32(16, Number(data.fCodService), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x20: u32
  if (data?.ulRecordLength !== undefined) view.setUint32(32, Number(data.ulRecordLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pRecord !== undefined) view.setBigUint64(40, data.pRecord === null ? 0n : BigInt(util.toPointer(data.pRecord)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_QUERY_DEVICE (size: 8)
 */
export interface BTH_QUERY_DEVICE {
  /** u32 */
  LAP: number;
  /** u8 */
  length: number;
}

export const sizeofBTH_QUERY_DEVICE = 8;

export function allocBTH_QUERY_DEVICE(data?: Partial<BTH_QUERY_DEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_QUERY_DEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LAP !== undefined) view.setUint32(0, Number(data.LAP), true);
  // 0x04: u8
  if (data?.length !== undefined) view.setUint8(4, Number(data.length));
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_QUERY_SERVICE (size: 32)
 */
export interface BTH_QUERY_SERVICE {
  /** u32 */
  type: number;
  /** u32 */
  serviceHandle: number;
  /** array */
  uuids: Deno.PointerValue | null;
  /** u32 */
  numRange: number;
  /** array */
  pRange: Deno.PointerValue | null;
}

export const sizeofBTH_QUERY_SERVICE = 32;

export function allocBTH_QUERY_SERVICE(data?: Partial<BTH_QUERY_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_QUERY_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.type !== undefined) view.setUint32(0, Number(data.type), true);
  // 0x04: u32
  if (data?.serviceHandle !== undefined) view.setUint32(4, Number(data.serviceHandle), true);
  // 0x08: pointer
  if (data?.uuids !== undefined) view.setBigUint64(8, data.uuids === null ? 0n : BigInt(util.toPointer(data.uuids)), true);
  // 0x10: u32
  if (data?.numRange !== undefined) view.setUint32(16, Number(data.numRange), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pRange !== undefined) view.setBigUint64(24, data.pRange === null ? 0n : BigInt(util.toPointer(data.pRange)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA (size: 8)
 */
export interface RFCOMM_MSC_DATA {
  /** u8 */
  Signals: number;
  /** u8 */
  Break: number;
}

export const sizeofRFCOMM_MSC_DATA = 8;

export function allocRFCOMM_MSC_DATA(data?: Partial<RFCOMM_MSC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_MSC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Signals !== undefined) view.setUint8(0, Number(data.Signals));
  // 0x01: u8
  if (data?.Break !== undefined) view.setUint8(1, Number(data.Break));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA (size: 8)
 */
export interface RFCOMM_RLS_DATA {
  /** u8 */
  LineStatus: number;
}

export const sizeofRFCOMM_RLS_DATA = 8;

export function allocRFCOMM_RLS_DATA(data?: Partial<RFCOMM_RLS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RLS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.LineStatus !== undefined) view.setUint8(0, Number(data.LineStatus));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA (size: 8)
 */
export interface RFCOMM_RPN_DATA {
  /** u8 */
  Baud: number;
  /** u8 */
  Data: number;
  /** u8 */
  FlowControl: number;
  /** u8 */
  XonChar: number;
  /** u8 */
  XoffChar: number;
  /** u8 */
  ParameterMask1: number;
  /** u8 */
  ParameterMask2: number;
}

export const sizeofRFCOMM_RPN_DATA = 8;

export function allocRFCOMM_RPN_DATA(data?: Partial<RFCOMM_RPN_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_RPN_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Baud !== undefined) view.setUint8(0, Number(data.Baud));
  // 0x01: u8
  if (data?.Data !== undefined) view.setUint8(1, Number(data.Data));
  // 0x02: u8
  if (data?.FlowControl !== undefined) view.setUint8(2, Number(data.FlowControl));
  // 0x03: u8
  if (data?.XonChar !== undefined) view.setUint8(3, Number(data.XonChar));
  // 0x04: u8
  if (data?.XoffChar !== undefined) view.setUint8(4, Number(data.XoffChar));
  // 0x05: u8
  if (data?.ParameterMask1 !== undefined) view.setUint8(5, Number(data.ParameterMask1));
  // 0x06: u8
  if (data?.ParameterMask2 !== undefined) view.setUint8(6, Number(data.ParameterMask2));
  // 0x07: pad1
  return buf;
}

/**
 * _Data_e__Union (size: 24)
 */
export interface _Data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_MSC_DATA */
  MSC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RLS_DATA */
  RLS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.RFCOMM_RPN_DATA */
  RPN: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Data_e__Union = 24;

export function alloc_Data_e__Union(data?: Partial<_Data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MSC !== undefined) view.setBigUint64(0, data.MSC === null ? 0n : BigInt(util.toPointer(data.MSC)), true);
  // 0x08: pointer
  if (data?.RLS !== undefined) view.setBigUint64(8, data.RLS === null ? 0n : BigInt(util.toPointer(data.RLS)), true);
  // 0x10: pointer
  if (data?.RPN !== undefined) view.setBigUint64(16, data.RPN === null ? 0n : BigInt(util.toPointer(data.RPN)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.RFCOMM_COMMAND (size: 16)
 */
export interface RFCOMM_COMMAND {
  /** u32 */
  CmdType: number;
  /** _Data_e__Union */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRFCOMM_COMMAND = 16;

export function allocRFCOMM_COMMAND(data?: Partial<RFCOMM_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofRFCOMM_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CmdType !== undefined) view.setUint32(0, Number(data.CmdType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_PING_REQ (size: 24)
 */
export interface BTH_PING_REQ {
  /** u64 */
  btAddr: Deno.PointerValue;
  /** u8 */
  dataLen: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofBTH_PING_REQ = 24;

export function allocBTH_PING_REQ(data?: Partial<BTH_PING_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_PING_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.btAddr !== undefined) view.setBigUint64(0, BigInt(data.btAddr), true);
  // 0x08: u8
  if (data?.dataLen !== undefined) view.setUint8(8, Number(data.dataLen));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.data !== undefined) view.setBigUint64(16, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_PING_RSP (size: 16)
 */
export interface BTH_PING_RSP {
  /** u8 */
  dataLen: number;
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofBTH_PING_RSP = 16;

export function allocBTH_PING_RSP(data?: Partial<BTH_PING_RSP>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_PING_RSP);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.dataLen !== undefined) view.setUint8(0, Number(data.dataLen));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_INFO_REQ (size: 16)
 */
export interface BTH_INFO_REQ {
  /** u64 */
  btAddr: Deno.PointerValue;
  /** u16 */
  infoType: number;
}

export const sizeofBTH_INFO_REQ = 16;

export function allocBTH_INFO_REQ(data?: Partial<BTH_INFO_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_INFO_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.btAddr !== undefined) view.setBigUint64(0, BigInt(data.btAddr), true);
  // 0x08: u16
  if (data?.infoType !== undefined) view.setUint16(8, Number(data.infoType), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.BTH_INFO_RSP (size: 16)
 */
export interface BTH_INFO_RSP {
  /** u16 */
  result: number;
  /** u8 */
  dataLen: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofBTH_INFO_RSP = 16;

export function allocBTH_INFO_RSP(data?: Partial<BTH_INFO_RSP>): Uint8Array {
  const buf = new Uint8Array(sizeofBTH_INFO_RSP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.result !== undefined) view.setUint16(0, Number(data.result), true);
  // 0x02: u8
  if (data?.dataLen !== undefined) view.setUint8(2, Number(data.dataLen));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libBluetoothApis_dll = Deno.dlopen("BluetoothApis.dll", {
    BluetoothFindFirstRadio: {
      parameters: ["pointer", "pointer"],
      result: "isize",
    },
    BluetoothFindNextRadio: {
      parameters: ["isize", "pointer"],
      result: "i32",
    },
    BluetoothFindRadioClose: {
      parameters: ["isize"],
      result: "i32",
    },
    BluetoothGetRadioInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    BluetoothFindFirstDevice: {
      parameters: ["pointer", "pointer"],
      result: "isize",
    },
    BluetoothFindNextDevice: {
      parameters: ["isize", "pointer"],
      result: "i32",
    },
    BluetoothFindDeviceClose: {
      parameters: ["isize"],
      result: "i32",
    },
    BluetoothGetDeviceInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    BluetoothUpdateDeviceRecord: {
      parameters: ["pointer"],
      result: "u32",
    },
    BluetoothRemoveDevice: {
      parameters: ["pointer"],
      result: "u32",
    },
    BluetoothSetServiceState: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    BluetoothEnumerateInstalledServices: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    BluetoothEnableDiscovery: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    BluetoothIsDiscoverable: {
      parameters: ["pointer"],
      result: "i32",
    },
    BluetoothEnableIncomingConnections: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    BluetoothIsConnectable: {
      parameters: ["pointer"],
      result: "i32",
    },
    BluetoothRegisterForAuthentication: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    BluetoothRegisterForAuthenticationEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    BluetoothUnregisterAuthentication: {
      parameters: ["isize"],
      result: "i32",
    },
    BluetoothSendAuthenticationResponse: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "u32",
    },
    BluetoothSendAuthenticationResponseEx: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    BluetoothSdpGetElementData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    BluetoothSdpGetContainerElementData: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    BluetoothSdpGetAttributeValue: {
      parameters: ["pointer", "u32", "u16", "pointer"],
      result: "u32",
    },
    BluetoothSdpGetString: {
      parameters: ["pointer", "u32", "pointer", "u16", "buffer", "pointer"],
      result: "u32",
    },
    BluetoothSdpEnumAttributes: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    BluetoothSetLocalServiceInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    BluetoothIsVersionAvailable: {
      parameters: ["u8", "u8"],
      result: "i32",
    },
    BluetoothGATTGetServices: {
      parameters: ["pointer", "u16", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTGetIncludedServices: {
      parameters: ["pointer", "pointer", "u16", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTGetCharacteristics: {
      parameters: ["pointer", "pointer", "u16", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTGetDescriptors: {
      parameters: ["pointer", "pointer", "u16", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTGetCharacteristicValue: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTGetDescriptorValue: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTBeginReliableWrite: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTSetCharacteristicValue: {
      parameters: ["pointer", "pointer", "pointer", "u64", "u32"],
      result: "pointer",
    },
    BluetoothGATTEndReliableWrite: {
      parameters: ["pointer", "u64", "u32"],
      result: "pointer",
    },
    BluetoothGATTAbortReliableWrite: {
      parameters: ["pointer", "u64", "u32"],
      result: "pointer",
    },
    BluetoothGATTSetDescriptorValue: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTRegisterEvent: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    BluetoothGATTUnregisterEvent: {
      parameters: ["isize", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libbthprops_cpl = Deno.dlopen("bthprops.cpl", {
    BluetoothSelectDevices: {
      parameters: ["pointer"],
      result: "i32",
    },
    BluetoothSelectDevicesFree: {
      parameters: ["pointer"],
      result: "i32",
    },
    BluetoothDisplayDeviceProperties: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    BluetoothAuthenticateDevice: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    BluetoothAuthenticateDeviceEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
    BluetoothAuthenticateMultipleDevices: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function BluetoothFindFirstRadio(
  pbtfrp: Deno.PointerValue | Uint8Array | null /* ptr */,
  phRadio: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* isize */ {
  return libBluetoothApis_dll.BluetoothFindFirstRadio(util.toPointer(pbtfrp), util.toPointer(phRadio));
}

export function BluetoothFindNextRadio(
  hFind: Deno.PointerValue /* isize */,
  phRadio: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothFindNextRadio(hFind, util.toPointer(phRadio)));
}

export function BluetoothFindRadioClose(
  hFind: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothFindRadioClose(hFind));
}

export function BluetoothGetRadioInfo(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pRadioInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothGetRadioInfo(util.toPointer(hRadio), util.toPointer(pRadioInfo));
}

export function BluetoothFindFirstDevice(
  pbtsp: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* isize */ {
  return libBluetoothApis_dll.BluetoothFindFirstDevice(util.toPointer(pbtsp), util.toPointer(pbtdi));
}

export function BluetoothFindNextDevice(
  hFind: Deno.PointerValue /* isize */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothFindNextDevice(hFind, util.toPointer(pbtdi)));
}

export function BluetoothFindDeviceClose(
  hFind: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothFindDeviceClose(hFind));
}

export function BluetoothGetDeviceInfo(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothGetDeviceInfo(util.toPointer(hRadio), util.toPointer(pbtdi));
}

export function BluetoothUpdateDeviceRecord(
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothUpdateDeviceRecord(util.toPointer(pbtdi));
}

export function BluetoothRemoveDevice(
  pAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothRemoveDevice(util.toPointer(pAddress));
}

export function BluetoothSelectDevices(
  pbtsdp: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libbthprops_cpl.BluetoothSelectDevices(util.toPointer(pbtsdp)));
}

export function BluetoothSelectDevicesFree(
  pbtsdp: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libbthprops_cpl.BluetoothSelectDevicesFree(util.toPointer(pbtsdp)));
}

export function BluetoothDisplayDeviceProperties(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libbthprops_cpl.BluetoothDisplayDeviceProperties(util.hwndToFfi(hwndParent), util.toPointer(pbtdi)));
}

export function BluetoothAuthenticateDevice(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbtbi: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszPasskey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ulPasskeyLength: number /* u32 */,
): number /* u32 */ {
  return libbthprops_cpl.BluetoothAuthenticateDevice(util.hwndToFfi(hwndParent), util.toPointer(hRadio), util.toPointer(pbtbi), util.pwstrToFfi(pszPasskey), ulPasskeyLength);
}

export function BluetoothAuthenticateDeviceEx(
  hwndParentIn: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hRadioIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbtdiInout: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbtOobData: Deno.PointerValue | Uint8Array | null /* ptr */,
  authenticationRequirement: AUTHENTICATION_REQUIREMENTS /* Windows.Win32.Devices.Bluetooth.AUTHENTICATION_REQUIREMENTS */,
): number /* u32 */ {
  return libbthprops_cpl.BluetoothAuthenticateDeviceEx(util.hwndToFfi(hwndParentIn), util.toPointer(hRadioIn), util.toPointer(pbtdiInout), util.toPointer(pbtOobData), authenticationRequirement);
}

export function BluetoothAuthenticateMultipleDevices(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  cDevices: number /* u32 */,
  rgbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libbthprops_cpl.BluetoothAuthenticateMultipleDevices(util.hwndToFfi(hwndParent), util.toPointer(hRadio), cDevices, util.toPointer(rgbtdi));
}

export function BluetoothSetServiceState(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
  pGuidService: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwServiceFlags: number /* u32 */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSetServiceState(util.toPointer(hRadio), util.toPointer(pbtdi), util.toPointer(pGuidService), dwServiceFlags);
}

export function BluetoothEnumerateInstalledServices(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcServiceInout: Deno.PointerValue | Uint8Array | null /* ptr */,
  pGuidServices: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothEnumerateInstalledServices(util.toPointer(hRadio), util.toPointer(pbtdi), util.toPointer(pcServiceInout), util.toPointer(pGuidServices));
}

export function BluetoothEnableDiscovery(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  fEnabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothEnableDiscovery(util.toPointer(hRadio), util.boolToFfi(fEnabled)));
}

export function BluetoothIsDiscoverable(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothIsDiscoverable(util.toPointer(hRadio)));
}

export function BluetoothEnableIncomingConnections(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  fEnabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothEnableIncomingConnections(util.toPointer(hRadio), util.boolToFfi(fEnabled)));
}

export function BluetoothIsConnectable(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothIsConnectable(util.toPointer(hRadio)));
}

export function BluetoothRegisterForAuthentication(
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
  phRegHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Bluetooth.PFN_AUTHENTICATION_CALLBACK */,
  pvParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothRegisterForAuthentication(util.toPointer(pbtdi), util.toPointer(phRegHandle), util.toPointer(pfnCallback), util.toPointer(pvParam));
}

export function BluetoothRegisterForAuthenticationEx(
  pbtdiIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  phRegHandleOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnCallbackIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Bluetooth.PFN_AUTHENTICATION_CALLBACK_EX */,
  pvParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothRegisterForAuthenticationEx(util.toPointer(pbtdiIn), util.toPointer(phRegHandleOut), util.toPointer(pfnCallbackIn), util.toPointer(pvParam));
}

export function BluetoothUnregisterAuthentication(
  hRegHandle: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothUnregisterAuthentication(hRegHandle));
}

export function BluetoothSendAuthenticationResponse(
  hRadio: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pbtdi: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszPasskey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSendAuthenticationResponse(util.toPointer(hRadio), util.toPointer(pbtdi), util.pwstrToFfi(pszPasskey));
}

export function BluetoothSendAuthenticationResponseEx(
  hRadioIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pauthResponse: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSendAuthenticationResponseEx(util.toPointer(hRadioIn), util.toPointer(pauthResponse));
}

export function BluetoothSdpGetElementData(
  pSdpStream: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSdpStreamLength: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSdpGetElementData(util.toPointer(pSdpStream), cbSdpStreamLength, util.toPointer(pData));
}

export function BluetoothSdpGetContainerElementData(
  pContainerStream: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbContainerLength: number /* u32 */,
  pElement: Deno.PointerValue | Uint8Array | null /* ptr */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSdpGetContainerElementData(util.toPointer(pContainerStream), cbContainerLength, util.toPointer(pElement), util.toPointer(pData));
}

export function BluetoothSdpGetAttributeValue(
  pRecordStream: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbRecordLength: number /* u32 */,
  usAttributeId: number /* u16 */,
  pAttributeData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSdpGetAttributeValue(util.toPointer(pRecordStream), cbRecordLength, usAttributeId, util.toPointer(pAttributeData));
}

export function BluetoothSdpGetString(
  pRecordStream: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbRecordLength: number /* u32 */,
  pStringData: Deno.PointerValue | Uint8Array | null /* ptr */,
  usStringOffset: number /* u16 */,
  pszString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSdpGetString(util.toPointer(pRecordStream), cbRecordLength, util.toPointer(pStringData), usStringOffset, util.pwstrToFfi(pszString), util.toPointer(pcchStringLength));
}

export function BluetoothSdpEnumAttributes(
  pSDPStream: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbStreamSize: number /* u32 */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Bluetooth.PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK */,
  pvParam: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothSdpEnumAttributes(util.toPointer(pSDPStream), cbStreamSize, util.toPointer(pfnCallback), util.toPointer(pvParam)));
}

export function BluetoothSetLocalServiceInfo(
  hRadioIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulInstance: number /* u32 */,
  pServiceInfoIn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libBluetoothApis_dll.BluetoothSetLocalServiceInfo(util.toPointer(hRadioIn), util.toPointer(pClassGuid), ulInstance, util.toPointer(pServiceInfoIn));
}

export function BluetoothIsVersionAvailable(
  MajorVersion: number /* u8 */,
  MinorVersion: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libBluetoothApis_dll.BluetoothIsVersionAvailable(MajorVersion, MinorVersion));
}

export function BluetoothGATTGetServices(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ServicesBufferCount: number /* u16 */,
  ServicesBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ServicesBufferActual: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTGetServices(util.toPointer(hDevice), ServicesBufferCount, util.toPointer(ServicesBuffer), util.toPointer(ServicesBufferActual), Flags));
}

export function BluetoothGATTGetIncludedServices(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ParentService: Deno.PointerValue | Uint8Array | null /* ptr */,
  IncludedServicesBufferCount: number /* u16 */,
  IncludedServicesBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  IncludedServicesBufferActual: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTGetIncludedServices(util.toPointer(hDevice), util.toPointer(ParentService), IncludedServicesBufferCount, util.toPointer(IncludedServicesBuffer), util.toPointer(IncludedServicesBufferActual), Flags));
}

export function BluetoothGATTGetCharacteristics(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Service: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharacteristicsBufferCount: number /* u16 */,
  CharacteristicsBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharacteristicsBufferActual: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTGetCharacteristics(util.toPointer(hDevice), util.toPointer(Service), CharacteristicsBufferCount, util.toPointer(CharacteristicsBuffer), util.toPointer(CharacteristicsBufferActual), Flags));
}

export function BluetoothGATTGetDescriptors(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Characteristic: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorsBufferCount: number /* u16 */,
  DescriptorsBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorsBufferActual: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTGetDescriptors(util.toPointer(hDevice), util.toPointer(Characteristic), DescriptorsBufferCount, util.toPointer(DescriptorsBuffer), util.toPointer(DescriptorsBufferActual), Flags));
}

export function BluetoothGATTGetCharacteristicValue(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Characteristic: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharacteristicValueDataSize: number /* u32 */,
  CharacteristicValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharacteristicValueSizeRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTGetCharacteristicValue(util.toPointer(hDevice), util.toPointer(Characteristic), CharacteristicValueDataSize, util.toPointer(CharacteristicValue), util.toPointer(CharacteristicValueSizeRequired), Flags));
}

export function BluetoothGATTGetDescriptorValue(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Descriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorValueDataSize: number /* u32 */,
  DescriptorValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorValueSizeRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTGetDescriptorValue(util.toPointer(hDevice), util.toPointer(Descriptor), DescriptorValueDataSize, util.toPointer(DescriptorValue), util.toPointer(DescriptorValueSizeRequired), Flags));
}

export function BluetoothGATTBeginReliableWrite(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReliableWriteContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTBeginReliableWrite(util.toPointer(hDevice), util.toPointer(ReliableWriteContext), Flags));
}

export function BluetoothGATTSetCharacteristicValue(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Characteristic: Deno.PointerValue | Uint8Array | null /* ptr */,
  CharacteristicValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReliableWriteContext: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTSetCharacteristicValue(util.toPointer(hDevice), util.toPointer(Characteristic), util.toPointer(CharacteristicValue), ReliableWriteContext, Flags));
}

export function BluetoothGATTEndReliableWrite(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReliableWriteContext: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTEndReliableWrite(util.toPointer(hDevice), ReliableWriteContext, Flags));
}

export function BluetoothGATTAbortReliableWrite(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReliableWriteContext: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTAbortReliableWrite(util.toPointer(hDevice), ReliableWriteContext, Flags));
}

export function BluetoothGATTSetDescriptorValue(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Descriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTSetDescriptorValue(util.toPointer(hDevice), util.toPointer(Descriptor), util.toPointer(DescriptorValue), Flags));
}

export function BluetoothGATTRegisterEvent(
  hService: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  EventType: BTH_LE_GATT_EVENT_TYPE /* Windows.Win32.Devices.Bluetooth.BTH_LE_GATT_EVENT_TYPE */,
  EventParameterIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  Callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Bluetooth.PFNBLUETOOTH_GATT_EVENT_CALLBACK */,
  CallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEventHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTRegisterEvent(util.toPointer(hService), EventType, util.toPointer(EventParameterIn), util.toPointer(Callback), util.toPointer(CallbackContext), util.toPointer(pEventHandle), Flags));
}

export function BluetoothGATTUnregisterEvent(
  EventHandle: Deno.PointerValue /* isize */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libBluetoothApis_dll.BluetoothGATTUnregisterEvent(EventHandle, Flags));
}

