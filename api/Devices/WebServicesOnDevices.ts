/// Auto-generated by Deno Win32: Windows.Win32.Devices.WebServicesOnDevices.Apis

import * as util from "../../util.ts";

// Enums
export type WSD_CONFIG_PARAM_TYPE = number;
export type WSDUdpMessageType = number;
export type WSDXML_OP = number;
export type DeviceDiscoveryMechanism = number;
export type WSD_PROTOCOL_TYPE = number;
export type WSDEventType = number;

// Constants
export const WSD_DEFAULT_HOSTING_ADDRESS = `http://*:5357/`;
export const WSD_DEFAULT_SECURE_HOSTING_ADDRESS = `https://*:5358/`;
export const WSD_DEFAULT_EVENTING_ADDRESS = `http://*:5357/`;
export const WSDAPI_OPTION_MAX_INBOUND_MESSAGE_SIZE = 1;
export const WSDAPI_OPTION_TRACE_XML_TO_DEBUGGER = 2;
export const WSDAPI_OPTION_TRACE_XML_TO_FILE = 3;
export const WSDAPI_SSL_CERT_APPLY_DEFAULT_CHECKS = 0;
export const WSDAPI_SSL_CERT_IGNORE_REVOCATION = 1;
export const WSDAPI_SSL_CERT_IGNORE_EXPIRY = 2;
export const WSDAPI_SSL_CERT_IGNORE_WRONG_USAGE = 4;
export const WSDAPI_SSL_CERT_IGNORE_UNKNOWN_CA = 8;
export const WSDAPI_SSL_CERT_IGNORE_INVALID_CN = 16;
export const WSDAPI_COMPACTSIG_ACCEPT_ALL_MESSAGES = 1;
export const WSD_SECURITY_HTTP_AUTH_SCHEME_NEGOTIATE = 1;
export const WSD_SECURITY_HTTP_AUTH_SCHEME_NTLM = 2;
export const WSDAPI_ADDRESSFAMILY_IPV4 = 1;
export const WSDAPI_ADDRESSFAMILY_IPV6 = 2;
export const WSD_CONFIG_MAX_INBOUND_MESSAGE_SIZE = 1;
export const WSD_CONFIG_MAX_OUTBOUND_MESSAGE_SIZE = 2;
export const WSD_SECURITY_SSL_CERT_FOR_CLIENT_AUTH = 3;
export const WSD_SECURITY_SSL_SERVER_CERT_VALIDATION = 4;
export const WSD_SECURITY_SSL_CLIENT_CERT_VALIDATION = 5;
export const WSD_SECURITY_SSL_NEGOTIATE_CLIENT_CERT = 6;
export const WSD_SECURITY_COMPACTSIG_SIGNING_CERT = 7;
export const WSD_SECURITY_COMPACTSIG_VALIDATION = 8;
export const WSD_CONFIG_HOSTING_ADDRESSES = 9;
export const WSD_CONFIG_DEVICE_ADDRESSES = 10;
export const WSD_SECURITY_REQUIRE_HTTP_CLIENT_AUTH = 11;
export const WSD_SECURITY_REQUIRE_CLIENT_CERT_OR_HTTP_CLIENT_AUTH = 12;
export const WSD_SECURITY_USE_HTTP_CLIENT_AUTH = 13;
export const ONE_WAY = 0;
export const TWO_WAY = 1;
export const OpNone = 0;
export const OpEndOfTable = 1;
export const OpBeginElement_ = 2;
export const OpBeginAnyElement = 3;
export const OpEndElement = 4;
export const OpElement_ = 5;
export const OpAnyElement = 6;
export const OpAnyElements = 7;
export const OpAnyText = 8;
export const OpAttribute_ = 9;
export const OpBeginChoice = 10;
export const OpEndChoice = 11;
export const OpBeginSequence = 12;
export const OpEndSequence = 13;
export const OpBeginAll = 14;
export const OpEndAll = 15;
export const OpAnything = 16;
export const OpAnyNumber = 17;
export const OpOneOrMore = 18;
export const OpOptional = 19;
export const OpFormatBool_ = 20;
export const OpFormatInt8_ = 21;
export const OpFormatInt16_ = 22;
export const OpFormatInt32_ = 23;
export const OpFormatInt64_ = 24;
export const OpFormatUInt8_ = 25;
export const OpFormatUInt16_ = 26;
export const OpFormatUInt32_ = 27;
export const OpFormatUInt64_ = 28;
export const OpFormatUnicodeString_ = 29;
export const OpFormatDom_ = 30;
export const OpFormatStruct_ = 31;
export const OpFormatUri_ = 32;
export const OpFormatUuidUri_ = 33;
export const OpFormatName_ = 34;
export const OpFormatListInsertTail_ = 35;
export const OpFormatType_ = 36;
export const OpFormatDynamicType_ = 37;
export const OpFormatLookupType_ = 38;
export const OpFormatDuration_ = 39;
export const OpFormatDateTime_ = 40;
export const OpFormatFloat_ = 41;
export const OpFormatDouble_ = 42;
export const OpProcess_ = 43;
export const OpQualifiedAttribute_ = 44;
export const OpFormatXMLDeclaration_ = 45;
export const OpFormatMax = 46;
export const ElementType = 0;
export const TextType = 1;
export const MulticastDiscovery = 0;
export const DirectedDiscovery = 1;
export const SecureDirectedDiscovery = 2;
export const WSD_PT_NONE = 0;
export const WSD_PT_UDP = 1;
export const WSD_PT_HTTP = 2;
export const WSD_PT_HTTPS = 4;
export const WSD_PT_ALL = 255;
export const WSDET_NONE = 0;
export const WSDET_INCOMING_MESSAGE = 1;
export const WSDET_INCOMING_FAULT = 2;
export const WSDET_TRANSMISSION_FAILURE = 3;
export const WSDET_RESPONSE_TIMEOUT = 4;

// Structs

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_CONFIG_PARAM (size: 24)
 */
export interface WSD_CONFIG_PARAM {
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_CONFIG_PARAM_TYPE */
  configParamType: WSD_CONFIG_PARAM_TYPE;
  /** ptr */
  pConfigData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwConfigDataSize: number;
}

export const sizeofWSD_CONFIG_PARAM = 24;

export function allocWSD_CONFIG_PARAM(data?: Partial<WSD_CONFIG_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_CONFIG_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.configParamType !== undefined) view.setInt32(0, Number(data.configParamType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pConfigData !== undefined) view.setBigUint64(8, data.pConfigData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pConfigData))), true);
  // 0x10: u32
  if (data?.dwConfigDataSize !== undefined) view.setUint32(16, Number(data.dwConfigDataSize), true);
  // 0x14: pad4
  return buf;
}

export class WSD_CONFIG_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get configParamType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pConfigData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwConfigDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set configParamType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pConfigData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwConfigDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type HCERTSTORE = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SECURITY_CERT_VALIDATION_V1 (size: 40)
 */
export interface WSD_SECURITY_CERT_VALIDATION_V1 {
  /** ptr */
  certMatchArray: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwCertMatchArrayCount: number;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertMatchStore: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertIssuerStore: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwCertCheckOptions: number;
}

export const sizeofWSD_SECURITY_CERT_VALIDATION_V1 = 40;

export function allocWSD_SECURITY_CERT_VALIDATION_V1(data?: Partial<WSD_SECURITY_CERT_VALIDATION_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SECURITY_CERT_VALIDATION_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.certMatchArray !== undefined) view.setBigUint64(0, data.certMatchArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.certMatchArray))), true);
  // 0x08: u32
  if (data?.dwCertMatchArrayCount !== undefined) view.setUint32(8, Number(data.dwCertMatchArrayCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hCertMatchStore !== undefined) view.setBigUint64(16, data.hCertMatchStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hCertMatchStore))), true);
  // 0x18: pointer
  if (data?.hCertIssuerStore !== undefined) view.setBigUint64(24, data.hCertIssuerStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hCertIssuerStore))), true);
  // 0x20: u32
  if (data?.dwCertCheckOptions !== undefined) view.setUint32(32, Number(data.dwCertCheckOptions), true);
  // 0x24: pad4
  return buf;
}

export class WSD_SECURITY_CERT_VALIDATION_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get certMatchArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwCertMatchArrayCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hCertMatchStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hCertIssuerStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwCertCheckOptions(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set certMatchArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwCertMatchArrayCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hCertMatchStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hCertIssuerStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwCertCheckOptions(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SECURITY_CERT_VALIDATION (size: 64)
 */
export interface WSD_SECURITY_CERT_VALIDATION {
  /** ptr */
  certMatchArray: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwCertMatchArrayCount: number;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertMatchStore: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertIssuerStore: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwCertCheckOptions: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszCNGHashAlgId: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pbCertHash: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwCertHashSize: number;
}

export const sizeofWSD_SECURITY_CERT_VALIDATION = 64;

export function allocWSD_SECURITY_CERT_VALIDATION(data?: Partial<WSD_SECURITY_CERT_VALIDATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SECURITY_CERT_VALIDATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.certMatchArray !== undefined) view.setBigUint64(0, data.certMatchArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.certMatchArray))), true);
  // 0x08: u32
  if (data?.dwCertMatchArrayCount !== undefined) view.setUint32(8, Number(data.dwCertMatchArrayCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hCertMatchStore !== undefined) view.setBigUint64(16, data.hCertMatchStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hCertMatchStore))), true);
  // 0x18: pointer
  if (data?.hCertIssuerStore !== undefined) view.setBigUint64(24, data.hCertIssuerStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hCertIssuerStore))), true);
  // 0x20: u32
  if (data?.dwCertCheckOptions !== undefined) view.setUint32(32, Number(data.dwCertCheckOptions), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pszCNGHashAlgId !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszCNGHashAlgId);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.pbCertHash !== undefined) view.setBigUint64(48, data.pbCertHash === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbCertHash))), true);
  // 0x38: u32
  if (data?.dwCertHashSize !== undefined) view.setUint32(56, Number(data.dwCertHashSize), true);
  // 0x3c: pad4
  return buf;
}

export class WSD_SECURITY_CERT_VALIDATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get certMatchArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwCertMatchArrayCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hCertMatchStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hCertIssuerStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwCertCheckOptions(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pszCNGHashAlgId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pbCertHash(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwCertHashSize(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set certMatchArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwCertMatchArrayCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hCertMatchStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hCertIssuerStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwCertCheckOptions(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pszCNGHashAlgId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set pbCertHash(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwCertHashSize(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SECURITY_SIGNATURE_VALIDATION (size: 32)
 */
export interface WSD_SECURITY_SIGNATURE_VALIDATION {
  /** ptr */
  signingCertArray: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSigningCertArrayCount: number;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hSigningCertStore: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofWSD_SECURITY_SIGNATURE_VALIDATION = 32;

export function allocWSD_SECURITY_SIGNATURE_VALIDATION(data?: Partial<WSD_SECURITY_SIGNATURE_VALIDATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SECURITY_SIGNATURE_VALIDATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.signingCertArray !== undefined) view.setBigUint64(0, data.signingCertArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.signingCertArray))), true);
  // 0x08: u32
  if (data?.dwSigningCertArrayCount !== undefined) view.setUint32(8, Number(data.dwSigningCertArrayCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hSigningCertStore !== undefined) view.setBigUint64(16, data.hSigningCertStore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hSigningCertStore))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class WSD_SECURITY_SIGNATURE_VALIDATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get signingCertArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwSigningCertArrayCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hSigningCertStore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set signingCertArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwSigningCertArrayCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hSigningCertStore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_CONFIG_ADDRESSES (size: 16)
 */
export interface WSD_CONFIG_ADDRESSES {
  /** ptr */
  addresses: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwAddressCount: number;
}

export const sizeofWSD_CONFIG_ADDRESSES = 16;

export function allocWSD_CONFIG_ADDRESSES(data?: Partial<WSD_CONFIG_ADDRESSES>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_CONFIG_ADDRESSES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.addresses !== undefined) view.setBigUint64(0, data.addresses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.addresses))), true);
  // 0x08: u32
  if (data?.dwAddressCount !== undefined) view.setUint32(8, Number(data.dwAddressCount), true);
  // 0x0c: pad4
  return buf;
}

export class WSD_CONFIG_ADDRESSESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get addresses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwAddressCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set addresses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwAddressCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDUdpRetransmitParams (size: 24)
 */
export interface WSDUdpRetransmitParams {
  /** u32 */
  ulSendDelay: number;
  /** u32 */
  ulRepeat: number;
  /** u32 */
  ulRepeatMinDelay: number;
  /** u32 */
  ulRepeatMaxDelay: number;
  /** u32 */
  ulRepeatUpperDelay: number;
}

export const sizeofWSDUdpRetransmitParams = 24;

export function allocWSDUdpRetransmitParams(data?: Partial<WSDUdpRetransmitParams>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDUdpRetransmitParams);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulSendDelay !== undefined) view.setUint32(0, Number(data.ulSendDelay), true);
  // 0x04: u32
  if (data?.ulRepeat !== undefined) view.setUint32(4, Number(data.ulRepeat), true);
  // 0x08: u32
  if (data?.ulRepeatMinDelay !== undefined) view.setUint32(8, Number(data.ulRepeatMinDelay), true);
  // 0x0c: u32
  if (data?.ulRepeatMaxDelay !== undefined) view.setUint32(12, Number(data.ulRepeatMaxDelay), true);
  // 0x10: u32
  if (data?.ulRepeatUpperDelay !== undefined) view.setUint32(16, Number(data.ulRepeatUpperDelay), true);
  // 0x14: pad4
  return buf;
}

export class WSDUdpRetransmitParamsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulSendDelay(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulRepeat(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulRepeatMinDelay(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulRepeatMaxDelay(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ulRepeatUpperDelay(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set ulSendDelay(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulRepeat(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulRepeatMinDelay(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulRepeatMaxDelay(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ulRepeatUpperDelay(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_DATETIME (size: 32)
 */
export interface WSD_DATETIME {
  /** Windows.Win32.Foundation.BOOL */
  isPositive: boolean;
  /** u32 */
  year: number;
  /** u8 */
  month: number;
  /** u8 */
  day: number;
  /** u8 */
  hour: number;
  /** u8 */
  minute: number;
  /** u8 */
  second: number;
  /** u32 */
  millisecond: number;
  /** Windows.Win32.Foundation.BOOL */
  TZIsLocal: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TZIsPositive: boolean;
  /** u8 */
  TZHour: number;
  /** u8 */
  TZMinute: number;
}

export const sizeofWSD_DATETIME = 32;

export function allocWSD_DATETIME(data?: Partial<WSD_DATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_DATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isPositive !== undefined) view.setInt32(0, Number(data.isPositive), true);
  // 0x04: u32
  if (data?.year !== undefined) view.setUint32(4, Number(data.year), true);
  // 0x08: u8
  if (data?.month !== undefined) view.setUint8(8, Number(data.month));
  // 0x09: u8
  if (data?.day !== undefined) view.setUint8(9, Number(data.day));
  // 0x0a: u8
  if (data?.hour !== undefined) view.setUint8(10, Number(data.hour));
  // 0x0b: u8
  if (data?.minute !== undefined) view.setUint8(11, Number(data.minute));
  // 0x0c: u8
  if (data?.second !== undefined) view.setUint8(12, Number(data.second));
  // 0x0d: u32
  if (data?.millisecond !== undefined) view.setUint32(13, Number(data.millisecond), true);
  // 0x11: i32
  if (data?.TZIsLocal !== undefined) view.setInt32(17, Number(data.TZIsLocal), true);
  // 0x15: i32
  if (data?.TZIsPositive !== undefined) view.setInt32(21, Number(data.TZIsPositive), true);
  // 0x19: u8
  if (data?.TZHour !== undefined) view.setUint8(25, Number(data.TZHour));
  // 0x1a: u8
  if (data?.TZMinute !== undefined) view.setUint8(26, Number(data.TZMinute));
  // 0x1b: pad5
  return buf;
}

export class WSD_DATETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isPositive(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get year(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u8
  get month(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get day(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u8
  get hour(): number {
    return this.view.getUint8(10);
  }

  // 0x0b: u8
  get minute(): number {
    return this.view.getUint8(11);
  }

  // 0x0c: u8
  get second(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: u32
  get millisecond(): number {
    return this.view.getUint32(13, true);
  }

  // 0x11: i32
  get TZIsLocal(): number {
    return this.view.getInt32(17, true);
  }

  // 0x15: i32
  get TZIsPositive(): number {
    return this.view.getInt32(21, true);
  }

  // 0x19: u8
  get TZHour(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get TZMinute(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: pad5

  // 0x00: i32
  set isPositive(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set year(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u8
  set month(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set day(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u8
  set hour(value: number) {
    this.view.setUint8(10, value);
  }

  // 0x0b: u8
  set minute(value: number) {
    this.view.setUint8(11, value);
  }

  // 0x0c: u8
  set second(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: u32
  set millisecond(value: number) {
    this.view.setUint32(13, value, true);
  }

  // 0x11: i32
  set TZIsLocal(value: number) {
    this.view.setInt32(17, value, true);
  }

  // 0x15: i32
  set TZIsPositive(value: number) {
    this.view.setInt32(21, value, true);
  }

  // 0x19: u8
  set TZHour(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set TZMinute(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: pad5
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_DURATION (size: 32)
 */
export interface WSD_DURATION {
  /** Windows.Win32.Foundation.BOOL */
  isPositive: boolean;
  /** u32 */
  year: number;
  /** u32 */
  month: number;
  /** u32 */
  day: number;
  /** u32 */
  hour: number;
  /** u32 */
  minute: number;
  /** u32 */
  second: number;
  /** u32 */
  millisecond: number;
}

export const sizeofWSD_DURATION = 32;

export function allocWSD_DURATION(data?: Partial<WSD_DURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_DURATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isPositive !== undefined) view.setInt32(0, Number(data.isPositive), true);
  // 0x04: u32
  if (data?.year !== undefined) view.setUint32(4, Number(data.year), true);
  // 0x08: u32
  if (data?.month !== undefined) view.setUint32(8, Number(data.month), true);
  // 0x0c: u32
  if (data?.day !== undefined) view.setUint32(12, Number(data.day), true);
  // 0x10: u32
  if (data?.hour !== undefined) view.setUint32(16, Number(data.hour), true);
  // 0x14: u32
  if (data?.minute !== undefined) view.setUint32(20, Number(data.minute), true);
  // 0x18: u32
  if (data?.second !== undefined) view.setUint32(24, Number(data.second), true);
  // 0x1c: u32
  if (data?.millisecond !== undefined) view.setUint32(28, Number(data.millisecond), true);
  return buf;
}

export class WSD_DURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isPositive(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get year(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get month(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get day(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get hour(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get minute(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get second(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get millisecond(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: i32
  set isPositive(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set year(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set month(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set day(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set hour(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set minute(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set second(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set millisecond(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_NAMESPACE (size: 32)
 */
export interface WSDXML_NAMESPACE {
  /** Windows.Win32.Foundation.PWSTR */
  Uri: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PreferredPrefix: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Names: Deno.PointerValue | Uint8Array;
  /** u16 */
  NamesCount: number;
  /** u16 */
  Encoding: number;
}

export const sizeofWSDXML_NAMESPACE = 32;

export function allocWSDXML_NAMESPACE(data?: Partial<WSDXML_NAMESPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_NAMESPACE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Uri !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Uri);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.PreferredPrefix !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.PreferredPrefix);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Names !== undefined) view.setBigUint64(16, data.Names === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Names))), true);
  // 0x18: u16
  if (data?.NamesCount !== undefined) view.setUint16(24, Number(data.NamesCount), true);
  // 0x1a: u16
  if (data?.Encoding !== undefined) view.setUint16(26, Number(data.Encoding), true);
  // 0x1c: pad4
  return buf;
}

export class WSDXML_NAMESPACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Uri(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get PreferredPrefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Names(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get NamesCount(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get Encoding(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set Uri(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set PreferredPrefix(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Names(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set NamesCount(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set Encoding(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_NAME (size: 16)
 */
export interface WSDXML_NAME {
  /** ptr */
  Space: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  LocalName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSDXML_NAME = 16;

export function allocWSDXML_NAME(data?: Partial<WSDXML_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Space !== undefined) view.setBigUint64(0, data.Space === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Space))), true);
  // 0x08: buffer
  if (data?.LocalName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.LocalName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSDXML_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Space(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get LocalName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Space(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set LocalName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_TYPE (size: 16)
 */
export interface WSDXML_TYPE {
  /** Windows.Win32.Foundation.PWSTR */
  Uri: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Table: Deno.PointerValue | Uint8Array;
}

export const sizeofWSDXML_TYPE = 16;

export function allocWSDXML_TYPE(data?: Partial<WSDXML_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Uri !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Uri);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.Table !== undefined) view.setBigUint64(8, data.Table === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Table))), true);
  return buf;
}

export class WSDXML_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Uri(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Table(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Uri(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set Table(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_PREFIX_MAPPING (size: 32)
 */
export interface WSDXML_PREFIX_MAPPING {
  /** u32 */
  Refs: number;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Space: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Prefix: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSDXML_PREFIX_MAPPING = 32;

export function allocWSDXML_PREFIX_MAPPING(data?: Partial<WSDXML_PREFIX_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_PREFIX_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Refs !== undefined) view.setUint32(0, Number(data.Refs), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Space !== undefined) view.setBigUint64(16, data.Space === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Space))), true);
  // 0x18: buffer
  if (data?.Prefix !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Prefix);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class WSDXML_PREFIX_MAPPINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Refs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Space(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get Prefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Refs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Space(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set Prefix(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_ATTRIBUTE (size: 32)
 */
export interface WSDXML_ATTRIBUTE {
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Value: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSDXML_ATTRIBUTE = 32;

export function allocWSDXML_ATTRIBUTE(data?: Partial<WSDXML_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Element !== undefined) view.setBigUint64(0, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x18: buffer
  if (data?.Value !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Value);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class WSDXML_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set Value(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_NODE (size: 24)
 */
export interface WSDXML_NODE {
  /** i32 */
  Type: number;
  /** ptr */
  Parent: Deno.PointerValue | Uint8Array;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
}

export const sizeofWSDXML_NODE = 24;

export function allocWSDXML_NODE(data?: Partial<WSDXML_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Parent !== undefined) view.setBigUint64(8, data.Parent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Parent))), true);
  // 0x10: pointer
  if (data?.Next !== undefined) view.setBigUint64(16, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  return buf;
}

export class WSDXML_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Parent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Parent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_ELEMENT (size: 40)
 */
export interface WSDXML_ELEMENT {
  /** Windows.Win32.Devices.WebServicesOnDevices.WSDXML_NODE */
  Node: Uint8Array | Deno.PointerValue;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstAttribute: Deno.PointerValue | Uint8Array;
  /** ptr */
  FirstChild: Deno.PointerValue | Uint8Array;
  /** ptr */
  PrefixMappings: Deno.PointerValue | Uint8Array;
}

export const sizeofWSDXML_ELEMENT = 40;

export function allocWSDXML_ELEMENT(data?: Partial<WSDXML_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Node !== undefined) view.setBigUint64(0, data.Node === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Node))), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Name))), true);
  // 0x10: pointer
  if (data?.FirstAttribute !== undefined) view.setBigUint64(16, data.FirstAttribute === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstAttribute))), true);
  // 0x18: pointer
  if (data?.FirstChild !== undefined) view.setBigUint64(24, data.FirstChild === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FirstChild))), true);
  // 0x20: pointer
  if (data?.PrefixMappings !== undefined) view.setBigUint64(32, data.PrefixMappings === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PrefixMappings))), true);
  return buf;
}

export class WSDXML_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Node(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get FirstAttribute(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FirstChild(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get PrefixMappings(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Node(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set FirstAttribute(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FirstChild(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set PrefixMappings(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_TEXT (size: 16)
 */
export interface WSDXML_TEXT {
  /** Windows.Win32.Devices.WebServicesOnDevices.WSDXML_NODE */
  Node: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Text: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSDXML_TEXT = 16;

export function allocWSDXML_TEXT(data?: Partial<WSDXML_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Node !== undefined) view.setBigUint64(0, data.Node === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Node))), true);
  // 0x08: buffer
  if (data?.Text !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Text);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSDXML_TEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Node(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Text(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Node(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set Text(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSDXML_ELEMENT_LIST (size: 16)
 */
export interface WSDXML_ELEMENT_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSDXML_ELEMENT_LIST = 16;

export function allocWSDXML_ELEMENT_LIST(data?: Partial<WSDXML_ELEMENT_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSDXML_ELEMENT_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSDXML_ELEMENT_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_OPERATION (size: 24)
 */
export interface WSD_OPERATION {
  /** ptr */
  RequestType: Deno.PointerValue | Uint8Array;
  /** ptr */
  ResponseType: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_STUB_FUNCTION */
  RequestStubFunction: Uint8Array | Deno.PointerValue;
}

export const sizeofWSD_OPERATION = 24;

export function allocWSD_OPERATION(data?: Partial<WSD_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RequestType !== undefined) view.setBigUint64(0, data.RequestType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestType))), true);
  // 0x08: pointer
  if (data?.ResponseType !== undefined) view.setBigUint64(8, data.ResponseType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ResponseType))), true);
  // 0x10: pointer
  if (data?.RequestStubFunction !== undefined) view.setBigUint64(16, data.RequestStubFunction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RequestStubFunction))), true);
  return buf;
}

export class WSD_OPERATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RequestType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ResponseType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get RequestStubFunction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set RequestType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ResponseType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set RequestStubFunction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_HANDLER_CONTEXT (size: 24)
 */
export interface WSD_HANDLER_CONTEXT {
  /** Windows.Win32.Devices.WebServicesOnDevices.PWSD_SOAP_MESSAGE_HANDLER */
  Handler: Uint8Array | Deno.PointerValue;
  /** ptr */
  PVoid: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Com.IUnknown */
  Unknown: Uint8Array | Deno.PointerValue;
}

export const sizeofWSD_HANDLER_CONTEXT = 24;

export function allocWSD_HANDLER_CONTEXT(data?: Partial<WSD_HANDLER_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_HANDLER_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Handler !== undefined) view.setBigUint64(0, data.Handler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Handler))), true);
  // 0x08: pointer
  if (data?.PVoid !== undefined) view.setBigUint64(8, data.PVoid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PVoid))), true);
  // 0x10: pointer
  if (data?.Unknown !== undefined) view.setBigUint64(16, data.Unknown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unknown))), true);
  return buf;
}

export class WSD_HANDLER_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Handler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get PVoid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Unknown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Handler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set PVoid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Unknown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

export type HANDLE = bigint | number;

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SYNCHRONOUS_RESPONSE_CONTEXT (size: 32)
 */
export interface WSD_SYNCHRONOUS_RESPONSE_CONTEXT {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  eventHandle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Devices.WebServicesOnDevices.IWSDMessageParameters */
  messageParameters: Uint8Array | Deno.PointerValue;
  /** ptr */
  results: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SYNCHRONOUS_RESPONSE_CONTEXT = 32;

export function allocWSD_SYNCHRONOUS_RESPONSE_CONTEXT(data?: Partial<WSD_SYNCHRONOUS_RESPONSE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SYNCHRONOUS_RESPONSE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  // 0x08: pointer
  if (data?.eventHandle !== undefined) view.setBigUint64(8, data.eventHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.eventHandle))), true);
  // 0x10: pointer
  if (data?.messageParameters !== undefined) view.setBigUint64(16, data.messageParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.messageParameters))), true);
  // 0x18: pointer
  if (data?.results !== undefined) view.setBigUint64(24, data.results === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.results))), true);
  return buf;
}

export class WSD_SYNCHRONOUS_RESPONSE_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get eventHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get messageParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get results(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set eventHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set messageParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set results(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_PORT_TYPE (size: 24)
 */
export interface WSD_PORT_TYPE {
  /** u32 */
  EncodedName: number;
  /** u32 */
  OperationCount: number;
  /** ptr */
  Operations: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_PROTOCOL_TYPE */
  ProtocolType: WSD_PROTOCOL_TYPE;
}

export const sizeofWSD_PORT_TYPE = 24;

export function allocWSD_PORT_TYPE(data?: Partial<WSD_PORT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_PORT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncodedName !== undefined) view.setUint32(0, Number(data.EncodedName), true);
  // 0x04: u32
  if (data?.OperationCount !== undefined) view.setUint32(4, Number(data.OperationCount), true);
  // 0x08: pointer
  if (data?.Operations !== undefined) view.setBigUint64(8, data.Operations === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Operations))), true);
  // 0x10: i32
  if (data?.ProtocolType !== undefined) view.setInt32(16, Number(data.ProtocolType), true);
  // 0x14: pad4
  return buf;
}

export class WSD_PORT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EncodedName(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OperationCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Operations(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get ProtocolType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set EncodedName(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OperationCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Operations(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set ProtocolType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_RELATIONSHIP_METADATA (size: 24)
 */
export interface WSD_RELATIONSHIP_METADATA {
  /** Windows.Win32.Foundation.PWSTR */
  Type: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_RELATIONSHIP_METADATA = 24;

export function allocWSD_RELATIONSHIP_METADATA(data?: Partial<WSD_RELATIONSHIP_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_RELATIONSHIP_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Type !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Type);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x10: pointer
  if (data?.Any !== undefined) view.setBigUint64(16, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_RELATIONSHIP_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Type(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Type(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SERVICE_METADATA_LIST (size: 16)
 */
export interface WSD_SERVICE_METADATA_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SERVICE_METADATA_LIST = 16;

export function allocWSD_SERVICE_METADATA_LIST(data?: Partial<WSD_SERVICE_METADATA_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SERVICE_METADATA_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSD_SERVICE_METADATA_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_HOST_METADATA (size: 16)
 */
export interface WSD_HOST_METADATA {
  /** ptr */
  Host: Deno.PointerValue | Uint8Array;
  /** ptr */
  Hosted: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_HOST_METADATA = 16;

export function allocWSD_HOST_METADATA(data?: Partial<WSD_HOST_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_HOST_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Host !== undefined) view.setBigUint64(0, data.Host === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Host))), true);
  // 0x08: pointer
  if (data?.Hosted !== undefined) view.setBigUint64(8, data.Hosted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Hosted))), true);
  return buf;
}

export class WSD_HOST_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Host(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Hosted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Host(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Hosted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_ENDPOINT_REFERENCE_LIST (size: 16)
 */
export interface WSD_ENDPOINT_REFERENCE_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_ENDPOINT_REFERENCE_LIST = 16;

export function allocWSD_ENDPOINT_REFERENCE_LIST(data?: Partial<WSD_ENDPOINT_REFERENCE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_ENDPOINT_REFERENCE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSD_ENDPOINT_REFERENCE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SERVICE_METADATA (size: 32)
 */
export interface WSD_SERVICE_METADATA {
  /** ptr */
  EndpointReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  Types: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  ServiceId: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SERVICE_METADATA = 32;

export function allocWSD_SERVICE_METADATA(data?: Partial<WSD_SERVICE_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SERVICE_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndpointReference !== undefined) view.setBigUint64(0, data.EndpointReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndpointReference))), true);
  // 0x08: pointer
  if (data?.Types !== undefined) view.setBigUint64(8, data.Types === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Types))), true);
  // 0x10: buffer
  if (data?.ServiceId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ServiceId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.Any !== undefined) view.setBigUint64(24, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_SERVICE_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndpointReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Types(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get ServiceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndpointReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Types(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set ServiceId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_THIS_DEVICE_METADATA (size: 32)
 */
export interface WSD_THIS_DEVICE_METADATA {
  /** ptr */
  FriendlyName: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  FirmwareVersion: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SerialNumber: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_THIS_DEVICE_METADATA = 32;

export function allocWSD_THIS_DEVICE_METADATA(data?: Partial<WSD_THIS_DEVICE_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_THIS_DEVICE_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(0, data.FriendlyName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FriendlyName))), true);
  // 0x08: buffer
  if (data?.FirmwareVersion !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.FirmwareVersion);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SerialNumber !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SerialNumber);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.Any !== undefined) view.setBigUint64(24, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_THIS_DEVICE_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FriendlyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get FirmwareVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SerialNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set FriendlyName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set FirmwareVersion(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SerialNumber(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_THIS_MODEL_METADATA (size: 56)
 */
export interface WSD_THIS_MODEL_METADATA {
  /** ptr */
  Manufacturer: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  ManufacturerUrl: string | null | Uint8Array | Uint16Array;
  /** ptr */
  ModelName: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  ModelNumber: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ModelUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PresentationUrl: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_THIS_MODEL_METADATA = 56;

export function allocWSD_THIS_MODEL_METADATA(data?: Partial<WSD_THIS_MODEL_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_THIS_MODEL_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Manufacturer !== undefined) view.setBigUint64(0, data.Manufacturer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Manufacturer))), true);
  // 0x08: buffer
  if (data?.ManufacturerUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ManufacturerUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.ModelName !== undefined) view.setBigUint64(16, data.ModelName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ModelName))), true);
  // 0x18: buffer
  if (data?.ModelNumber !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ModelNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ModelUrl !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ModelUrl);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.PresentationUrl !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.PresentationUrl);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.Any !== undefined) view.setBigUint64(48, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_THIS_MODEL_METADATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Manufacturer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get ManufacturerUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ModelName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ModelNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ModelUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get PresentationUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Manufacturer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set ManufacturerUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set ModelName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set ModelNumber(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ModelUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set PresentationUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_LOCALIZED_STRING_LIST (size: 16)
 */
export interface WSD_LOCALIZED_STRING_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_LOCALIZED_STRING_LIST = 16;

export function allocWSD_LOCALIZED_STRING_LIST(data?: Partial<WSD_LOCALIZED_STRING_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_LOCALIZED_STRING_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSD_LOCALIZED_STRING_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_FAULT_REASON (size: 8)
 */
export interface WSD_SOAP_FAULT_REASON {
  /** ptr */
  Text: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SOAP_FAULT_REASON = 8;

export function allocWSD_SOAP_FAULT_REASON(data?: Partial<WSD_SOAP_FAULT_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SOAP_FAULT_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Text !== undefined) view.setBigUint64(0, data.Text === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Text))), true);
  return buf;
}

export class WSD_SOAP_FAULT_REASONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Text(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Text(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_FAULT_SUBCODE (size: 16)
 */
export interface WSD_SOAP_FAULT_SUBCODE {
  /** ptr */
  Value: Deno.PointerValue | Uint8Array;
  /** ptr */
  Subcode: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SOAP_FAULT_SUBCODE = 16;

export function allocWSD_SOAP_FAULT_SUBCODE(data?: Partial<WSD_SOAP_FAULT_SUBCODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SOAP_FAULT_SUBCODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Value !== undefined) view.setBigUint64(0, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  // 0x08: pointer
  if (data?.Subcode !== undefined) view.setBigUint64(8, data.Subcode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Subcode))), true);
  return buf;
}

export class WSD_SOAP_FAULT_SUBCODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Subcode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Subcode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_FAULT_CODE (size: 16)
 */
export interface WSD_SOAP_FAULT_CODE {
  /** ptr */
  Value: Deno.PointerValue | Uint8Array;
  /** ptr */
  Subcode: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SOAP_FAULT_CODE = 16;

export function allocWSD_SOAP_FAULT_CODE(data?: Partial<WSD_SOAP_FAULT_CODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SOAP_FAULT_CODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Value !== undefined) view.setBigUint64(0, data.Value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Value))), true);
  // 0x08: pointer
  if (data?.Subcode !== undefined) view.setBigUint64(8, data.Subcode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Subcode))), true);
  return buf;
}

export class WSD_SOAP_FAULT_CODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Subcode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Subcode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_FAULT (size: 40)
 */
export interface WSD_SOAP_FAULT {
  /** ptr */
  Code: Deno.PointerValue | Uint8Array;
  /** ptr */
  Reason: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Node: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Role: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Detail: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SOAP_FAULT = 40;

export function allocWSD_SOAP_FAULT(data?: Partial<WSD_SOAP_FAULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SOAP_FAULT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Code !== undefined) view.setBigUint64(0, data.Code === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Code))), true);
  // 0x08: pointer
  if (data?.Reason !== undefined) view.setBigUint64(8, data.Reason === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reason))), true);
  // 0x10: buffer
  if (data?.Node !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Node);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.Role !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Role);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.Detail !== undefined) view.setBigUint64(32, data.Detail === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Detail))), true);
  return buf;
}

export class WSD_SOAP_FAULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Code(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Reason(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get Node(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get Role(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Detail(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Code(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Reason(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set Node(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set Role(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set Detail(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_APP_SEQUENCE (size: 24)
 */
export interface WSD_APP_SEQUENCE {
  /** u64 */
  InstanceId: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  SequenceId: string | null | Uint8Array | Uint16Array;
  /** u64 */
  MessageNumber: bigint | number;
}

export const sizeofWSD_APP_SEQUENCE = 24;

export function allocWSD_APP_SEQUENCE(data?: Partial<WSD_APP_SEQUENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_APP_SEQUENCE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.InstanceId !== undefined) view.setBigUint64(0, BigInt(data.InstanceId), true);
  // 0x08: buffer
  if (data?.SequenceId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.SequenceId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u64
  if (data?.MessageNumber !== undefined) view.setBigUint64(16, BigInt(data.MessageNumber), true);
  return buf;
}

export class WSD_APP_SEQUENCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get InstanceId(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get SequenceId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get MessageNumber(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u64
  set InstanceId(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set SequenceId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u64
  set MessageNumber(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_HEADER_RELATESTO (size: 16)
 */
export interface WSD_HEADER_RELATESTO {
  /** ptr */
  RelationshipType: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  MessageID: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSD_HEADER_RELATESTO = 16;

export function allocWSD_HEADER_RELATESTO(data?: Partial<WSD_HEADER_RELATESTO>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_HEADER_RELATESTO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RelationshipType !== undefined) view.setBigUint64(0, data.RelationshipType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RelationshipType))), true);
  // 0x08: buffer
  if (data?.MessageID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.MessageID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSD_HEADER_RELATESTOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RelationshipType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get MessageID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set RelationshipType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set MessageID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_HEADER (size: 72)
 */
export interface WSD_SOAP_HEADER {
  /** Windows.Win32.Foundation.PWSTR */
  To: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Action: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  MessageID: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_HEADER_RELATESTO */
  RelatesTo: Uint8Array | Deno.PointerValue;
  /** ptr */
  ReplyTo: Deno.PointerValue | Uint8Array;
  /** ptr */
  From: Deno.PointerValue | Uint8Array;
  /** ptr */
  FaultTo: Deno.PointerValue | Uint8Array;
  /** ptr */
  AppSequence: Deno.PointerValue | Uint8Array;
  /** ptr */
  AnyHeaders: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SOAP_HEADER = 72;

export function allocWSD_SOAP_HEADER(data?: Partial<WSD_SOAP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SOAP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.To !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.To);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.Action !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Action);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.MessageID !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.MessageID);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.RelatesTo !== undefined) view.setBigUint64(24, data.RelatesTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RelatesTo))), true);
  // 0x20: pointer
  if (data?.ReplyTo !== undefined) view.setBigUint64(32, data.ReplyTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReplyTo))), true);
  // 0x28: pointer
  if (data?.From !== undefined) view.setBigUint64(40, data.From === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.From))), true);
  // 0x30: pointer
  if (data?.FaultTo !== undefined) view.setBigUint64(48, data.FaultTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FaultTo))), true);
  // 0x38: pointer
  if (data?.AppSequence !== undefined) view.setBigUint64(56, data.AppSequence === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AppSequence))), true);
  // 0x40: pointer
  if (data?.AnyHeaders !== undefined) view.setBigUint64(64, data.AnyHeaders === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AnyHeaders))), true);
  return buf;
}

export class WSD_SOAP_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get To(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Action(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get MessageID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get RelatesTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ReplyTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get From(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get FaultTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AppSequence(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get AnyHeaders(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set To(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set Action(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set MessageID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set RelatesTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ReplyTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set From(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set FaultTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AppSequence(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set AnyHeaders(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_MESSAGE (size: 24)
 */
export interface WSD_SOAP_MESSAGE {
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_SOAP_HEADER */
  Header: Uint8Array | Deno.PointerValue;
  /** ptr */
  Body: Deno.PointerValue | Uint8Array;
  /** ptr */
  BodyType: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SOAP_MESSAGE = 24;

export function allocWSD_SOAP_MESSAGE(data?: Partial<WSD_SOAP_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SOAP_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Header))), true);
  // 0x08: pointer
  if (data?.Body !== undefined) view.setBigUint64(8, data.Body === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Body))), true);
  // 0x10: pointer
  if (data?.BodyType !== undefined) view.setBigUint64(16, data.BodyType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BodyType))), true);
  return buf;
}

export class WSD_SOAP_MESSAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Body(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get BodyType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Body(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set BodyType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_RESOLVE_MATCHES (size: 16)
 */
export interface WSD_RESOLVE_MATCHES {
  /** ptr */
  ResolveMatch: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_RESOLVE_MATCHES = 16;

export function allocWSD_RESOLVE_MATCHES(data?: Partial<WSD_RESOLVE_MATCHES>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_RESOLVE_MATCHES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ResolveMatch !== undefined) view.setBigUint64(0, data.ResolveMatch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ResolveMatch))), true);
  // 0x08: pointer
  if (data?.Any !== undefined) view.setBigUint64(8, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_RESOLVE_MATCHESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ResolveMatch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ResolveMatch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_RESOLVE_MATCH (size: 48)
 */
export interface WSD_RESOLVE_MATCH {
  /** ptr */
  EndpointReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  Types: Deno.PointerValue | Uint8Array;
  /** ptr */
  Scopes: Deno.PointerValue | Uint8Array;
  /** ptr */
  XAddrs: Deno.PointerValue | Uint8Array;
  /** u64 */
  MetadataVersion: bigint | number;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_RESOLVE_MATCH = 48;

export function allocWSD_RESOLVE_MATCH(data?: Partial<WSD_RESOLVE_MATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_RESOLVE_MATCH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndpointReference !== undefined) view.setBigUint64(0, data.EndpointReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndpointReference))), true);
  // 0x08: pointer
  if (data?.Types !== undefined) view.setBigUint64(8, data.Types === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Types))), true);
  // 0x10: pointer
  if (data?.Scopes !== undefined) view.setBigUint64(16, data.Scopes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Scopes))), true);
  // 0x18: pointer
  if (data?.XAddrs !== undefined) view.setBigUint64(24, data.XAddrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.XAddrs))), true);
  // 0x20: u64
  if (data?.MetadataVersion !== undefined) view.setBigUint64(32, BigInt(data.MetadataVersion), true);
  // 0x28: pointer
  if (data?.Any !== undefined) view.setBigUint64(40, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_RESOLVE_MATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndpointReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Types(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Scopes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get XAddrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get MetadataVersion(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndpointReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Types(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Scopes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set XAddrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set MetadataVersion(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_RESOLVE (size: 16)
 */
export interface WSD_RESOLVE {
  /** ptr */
  EndpointReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_RESOLVE = 16;

export function allocWSD_RESOLVE(data?: Partial<WSD_RESOLVE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_RESOLVE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndpointReference !== undefined) view.setBigUint64(0, data.EndpointReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndpointReference))), true);
  // 0x08: pointer
  if (data?.Any !== undefined) view.setBigUint64(8, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_RESOLVEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndpointReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndpointReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_PROBE_MATCH (size: 48)
 */
export interface WSD_PROBE_MATCH {
  /** ptr */
  EndpointReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  Types: Deno.PointerValue | Uint8Array;
  /** ptr */
  Scopes: Deno.PointerValue | Uint8Array;
  /** ptr */
  XAddrs: Deno.PointerValue | Uint8Array;
  /** u64 */
  MetadataVersion: bigint | number;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_PROBE_MATCH = 48;

export function allocWSD_PROBE_MATCH(data?: Partial<WSD_PROBE_MATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_PROBE_MATCH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndpointReference !== undefined) view.setBigUint64(0, data.EndpointReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndpointReference))), true);
  // 0x08: pointer
  if (data?.Types !== undefined) view.setBigUint64(8, data.Types === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Types))), true);
  // 0x10: pointer
  if (data?.Scopes !== undefined) view.setBigUint64(16, data.Scopes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Scopes))), true);
  // 0x18: pointer
  if (data?.XAddrs !== undefined) view.setBigUint64(24, data.XAddrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.XAddrs))), true);
  // 0x20: u64
  if (data?.MetadataVersion !== undefined) view.setBigUint64(32, BigInt(data.MetadataVersion), true);
  // 0x28: pointer
  if (data?.Any !== undefined) view.setBigUint64(40, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_PROBE_MATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndpointReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Types(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Scopes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get XAddrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get MetadataVersion(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndpointReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Types(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Scopes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set XAddrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set MetadataVersion(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_PROBE_MATCH_LIST (size: 16)
 */
export interface WSD_PROBE_MATCH_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_PROBE_MATCH_LIST = 16;

export function allocWSD_PROBE_MATCH_LIST(data?: Partial<WSD_PROBE_MATCH_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_PROBE_MATCH_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSD_PROBE_MATCH_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_PROBE_MATCHES (size: 16)
 */
export interface WSD_PROBE_MATCHES {
  /** ptr */
  ProbeMatch: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_PROBE_MATCHES = 16;

export function allocWSD_PROBE_MATCHES(data?: Partial<WSD_PROBE_MATCHES>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_PROBE_MATCHES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProbeMatch !== undefined) view.setBigUint64(0, data.ProbeMatch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ProbeMatch))), true);
  // 0x08: pointer
  if (data?.Any !== undefined) view.setBigUint64(8, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_PROBE_MATCHESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProbeMatch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ProbeMatch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_PROBE (size: 24)
 */
export interface WSD_PROBE {
  /** ptr */
  Types: Deno.PointerValue | Uint8Array;
  /** ptr */
  Scopes: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_PROBE = 24;

export function allocWSD_PROBE(data?: Partial<WSD_PROBE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_PROBE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Types !== undefined) view.setBigUint64(0, data.Types === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Types))), true);
  // 0x08: pointer
  if (data?.Scopes !== undefined) view.setBigUint64(8, data.Scopes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Scopes))), true);
  // 0x10: pointer
  if (data?.Any !== undefined) view.setBigUint64(16, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_PROBEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Types(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Scopes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Types(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Scopes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_BYE (size: 16)
 */
export interface WSD_BYE {
  /** ptr */
  EndpointReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_BYE = 16;

export function allocWSD_BYE(data?: Partial<WSD_BYE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_BYE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndpointReference !== undefined) view.setBigUint64(0, data.EndpointReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndpointReference))), true);
  // 0x08: pointer
  if (data?.Any !== undefined) view.setBigUint64(8, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_BYEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndpointReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndpointReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_SCOPES (size: 16)
 */
export interface WSD_SCOPES {
  /** Windows.Win32.Foundation.PWSTR */
  MatchBy: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Scopes: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_SCOPES = 16;

export function allocWSD_SCOPES(data?: Partial<WSD_SCOPES>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_SCOPES);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.MatchBy !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.MatchBy);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.Scopes !== undefined) view.setBigUint64(8, data.Scopes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Scopes))), true);
  return buf;
}

export class WSD_SCOPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get MatchBy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Scopes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set MatchBy(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set Scopes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_NAME_LIST (size: 16)
 */
export interface WSD_NAME_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_NAME_LIST = 16;

export function allocWSD_NAME_LIST(data?: Partial<WSD_NAME_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_NAME_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSD_NAME_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_HELLO (size: 48)
 */
export interface WSD_HELLO {
  /** ptr */
  EndpointReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  Types: Deno.PointerValue | Uint8Array;
  /** ptr */
  Scopes: Deno.PointerValue | Uint8Array;
  /** ptr */
  XAddrs: Deno.PointerValue | Uint8Array;
  /** u64 */
  MetadataVersion: bigint | number;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_HELLO = 48;

export function allocWSD_HELLO(data?: Partial<WSD_HELLO>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_HELLO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndpointReference !== undefined) view.setBigUint64(0, data.EndpointReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndpointReference))), true);
  // 0x08: pointer
  if (data?.Types !== undefined) view.setBigUint64(8, data.Types === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Types))), true);
  // 0x10: pointer
  if (data?.Scopes !== undefined) view.setBigUint64(16, data.Scopes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Scopes))), true);
  // 0x18: pointer
  if (data?.XAddrs !== undefined) view.setBigUint64(24, data.XAddrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.XAddrs))), true);
  // 0x20: u64
  if (data?.MetadataVersion !== undefined) view.setBigUint64(32, BigInt(data.MetadataVersion), true);
  // 0x28: pointer
  if (data?.Any !== undefined) view.setBigUint64(40, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_HELLOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndpointReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Types(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Scopes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get XAddrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u64
  get MetadataVersion(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndpointReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Types(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Scopes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set XAddrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u64
  set MetadataVersion(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_REFERENCE_PARAMETERS (size: 8)
 */
export interface WSD_REFERENCE_PARAMETERS {
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_REFERENCE_PARAMETERS = 8;

export function allocWSD_REFERENCE_PARAMETERS(data?: Partial<WSD_REFERENCE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_REFERENCE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Any !== undefined) view.setBigUint64(0, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_REFERENCE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_REFERENCE_PROPERTIES (size: 8)
 */
export interface WSD_REFERENCE_PROPERTIES {
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_REFERENCE_PROPERTIES = 8;

export function allocWSD_REFERENCE_PROPERTIES(data?: Partial<WSD_REFERENCE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_REFERENCE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Any !== undefined) view.setBigUint64(0, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_REFERENCE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_ENDPOINT_REFERENCE (size: 48)
 */
export interface WSD_ENDPOINT_REFERENCE {
  /** Windows.Win32.Foundation.PWSTR */
  Address: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_REFERENCE_PROPERTIES */
  ReferenceProperties: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_REFERENCE_PARAMETERS */
  ReferenceParameters: Uint8Array | Deno.PointerValue;
  /** ptr */
  PortType: Deno.PointerValue | Uint8Array;
  /** ptr */
  ServiceName: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_ENDPOINT_REFERENCE = 48;

export function allocWSD_ENDPOINT_REFERENCE(data?: Partial<WSD_ENDPOINT_REFERENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_ENDPOINT_REFERENCE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Address !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Address);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.ReferenceProperties !== undefined) view.setBigUint64(8, data.ReferenceProperties === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceProperties))), true);
  // 0x10: pointer
  if (data?.ReferenceParameters !== undefined) view.setBigUint64(16, data.ReferenceParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReferenceParameters))), true);
  // 0x18: pointer
  if (data?.PortType !== undefined) view.setBigUint64(24, data.PortType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PortType))), true);
  // 0x20: pointer
  if (data?.ServiceName !== undefined) view.setBigUint64(32, data.ServiceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServiceName))), true);
  // 0x28: pointer
  if (data?.Any !== undefined) view.setBigUint64(40, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_ENDPOINT_REFERENCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ReferenceProperties(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ReferenceParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get PortType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ServiceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Address(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set ReferenceProperties(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ReferenceParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set PortType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ServiceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_METADATA_SECTION (size: 48)
 */
export interface WSD_METADATA_SECTION {
  /** Windows.Win32.Foundation.PWSTR */
  Dialect: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Identifier: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
  /** ptr */
  MetadataReference: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Location: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_METADATA_SECTION = 48;

export function allocWSD_METADATA_SECTION(data?: Partial<WSD_METADATA_SECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_METADATA_SECTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Dialect !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Dialect);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.Identifier !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Identifier);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x18: pointer
  if (data?.MetadataReference !== undefined) view.setBigUint64(24, data.MetadataReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MetadataReference))), true);
  // 0x20: buffer
  if (data?.Location !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Location);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.Any !== undefined) view.setBigUint64(40, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_METADATA_SECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Dialect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Identifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get MetadataReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get Location(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Dialect(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set Identifier(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set MetadataReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set Location(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_METADATA_SECTION_LIST (size: 16)
 */
export interface WSD_METADATA_SECTION_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** ptr */
  Element: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_METADATA_SECTION_LIST = 16;

export function allocWSD_METADATA_SECTION_LIST(data?: Partial<WSD_METADATA_SECTION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_METADATA_SECTION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: pointer
  if (data?.Element !== undefined) view.setBigUint64(8, data.Element === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Element))), true);
  return buf;
}

export class WSD_METADATA_SECTION_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Element(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_URI_LIST (size: 16)
 */
export interface WSD_URI_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Element: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSD_URI_LIST = 16;

export function allocWSD_URI_LIST(data?: Partial<WSD_URI_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_URI_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: buffer
  if (data?.Element !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Element);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSD_URI_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Element(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set Element(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_EVENTING_FILTER_ACTION (size: 8)
 */
export interface WSD_EVENTING_FILTER_ACTION {
  /** ptr */
  Actions: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_EVENTING_FILTER_ACTION = 8;

export function allocWSD_EVENTING_FILTER_ACTION(data?: Partial<WSD_EVENTING_FILTER_ACTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_EVENTING_FILTER_ACTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Actions !== undefined) view.setBigUint64(0, data.Actions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Actions))), true);
  return buf;
}

export class WSD_EVENTING_FILTER_ACTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Actions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Actions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_EVENTING_FILTER (size: 24)
 */
export interface WSD_EVENTING_FILTER {
  /** Windows.Win32.Foundation.PWSTR */
  Dialect: string | null | Uint8Array | Uint16Array;
  /** ptr */
  FilterAction: Deno.PointerValue | Uint8Array;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_EVENTING_FILTER = 24;

export function allocWSD_EVENTING_FILTER(data?: Partial<WSD_EVENTING_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_EVENTING_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Dialect !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Dialect);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.FilterAction !== undefined) view.setBigUint64(8, data.FilterAction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterAction))), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class WSD_EVENTING_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Dialect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get FilterAction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Dialect(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set FilterAction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_EVENTING_EXPIRES (size: 16)
 */
export interface WSD_EVENTING_EXPIRES {
  /** ptr */
  Duration: Deno.PointerValue | Uint8Array;
  /** ptr */
  DateTime: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_EVENTING_EXPIRES = 16;

export function allocWSD_EVENTING_EXPIRES(data?: Partial<WSD_EVENTING_EXPIRES>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_EVENTING_EXPIRES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Duration !== undefined) view.setBigUint64(0, data.Duration === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Duration))), true);
  // 0x08: pointer
  if (data?.DateTime !== undefined) view.setBigUint64(8, data.DateTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DateTime))), true);
  return buf;
}

export class WSD_EVENTING_EXPIRESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Duration(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DateTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Duration(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DateTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_EVENTING_DELIVERY_MODE_PUSH (size: 8)
 */
export interface WSD_EVENTING_DELIVERY_MODE_PUSH {
  /** ptr */
  NotifyTo: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_EVENTING_DELIVERY_MODE_PUSH = 8;

export function allocWSD_EVENTING_DELIVERY_MODE_PUSH(data?: Partial<WSD_EVENTING_DELIVERY_MODE_PUSH>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_EVENTING_DELIVERY_MODE_PUSH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NotifyTo !== undefined) view.setBigUint64(0, data.NotifyTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NotifyTo))), true);
  return buf;
}

export class WSD_EVENTING_DELIVERY_MODE_PUSHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NotifyTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set NotifyTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_EVENTING_DELIVERY_MODE (size: 24)
 */
export interface WSD_EVENTING_DELIVERY_MODE {
  /** Windows.Win32.Foundation.PWSTR */
  Mode: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Push: Deno.PointerValue | Uint8Array;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_EVENTING_DELIVERY_MODE = 24;

export function allocWSD_EVENTING_DELIVERY_MODE(data?: Partial<WSD_EVENTING_DELIVERY_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_EVENTING_DELIVERY_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Mode !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Mode);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.Push !== undefined) view.setBigUint64(8, data.Push === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Push))), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class WSD_EVENTING_DELIVERY_MODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Mode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Push(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set Mode(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set Push(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_LOCALIZED_STRING (size: 16)
 */
export interface WSD_LOCALIZED_STRING {
  /** Windows.Win32.Foundation.PWSTR */
  lang: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
}

export const sizeofWSD_LOCALIZED_STRING = 16;

export function allocWSD_LOCALIZED_STRING(data?: Partial<WSD_LOCALIZED_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_LOCALIZED_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lang !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lang);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WSD_LOCALIZED_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lang(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set lang(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.RESPONSEBODY_GetMetadata (size: 8)
 */
export interface RESPONSEBODY_GetMetadata {
  /** ptr */
  Metadata: Deno.PointerValue | Uint8Array;
}

export const sizeofRESPONSEBODY_GetMetadata = 8;

export function allocRESPONSEBODY_GetMetadata(data?: Partial<RESPONSEBODY_GetMetadata>): Uint8Array {
  const buf = new Uint8Array(sizeofRESPONSEBODY_GetMetadata);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Metadata !== undefined) view.setBigUint64(0, data.Metadata === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Metadata))), true);
  return buf;
}

export class RESPONSEBODY_GetMetadataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Metadata(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Metadata(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.REQUESTBODY_Subscribe (size: 40)
 */
export interface REQUESTBODY_Subscribe {
  /** ptr */
  EndTo: Deno.PointerValue | Uint8Array;
  /** ptr */
  Delivery: Deno.PointerValue | Uint8Array;
  /** ptr */
  Expires: Deno.PointerValue | Uint8Array;
  /** ptr */
  Filter: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofREQUESTBODY_Subscribe = 40;

export function allocREQUESTBODY_Subscribe(data?: Partial<REQUESTBODY_Subscribe>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUESTBODY_Subscribe);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EndTo !== undefined) view.setBigUint64(0, data.EndTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndTo))), true);
  // 0x08: pointer
  if (data?.Delivery !== undefined) view.setBigUint64(8, data.Delivery === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Delivery))), true);
  // 0x10: pointer
  if (data?.Expires !== undefined) view.setBigUint64(16, data.Expires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Expires))), true);
  // 0x18: pointer
  if (data?.Filter !== undefined) view.setBigUint64(24, data.Filter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Filter))), true);
  // 0x20: pointer
  if (data?.Any !== undefined) view.setBigUint64(32, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class REQUESTBODY_SubscribeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EndTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Delivery(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Expires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Filter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set EndTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Delivery(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Expires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Filter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.RESPONSEBODY_Subscribe (size: 24)
 */
export interface RESPONSEBODY_Subscribe {
  /** ptr */
  SubscriptionManager: Deno.PointerValue | Uint8Array;
  /** ptr */
  expires: Deno.PointerValue | Uint8Array;
  /** ptr */
  any: Deno.PointerValue | Uint8Array;
}

export const sizeofRESPONSEBODY_Subscribe = 24;

export function allocRESPONSEBODY_Subscribe(data?: Partial<RESPONSEBODY_Subscribe>): Uint8Array {
  const buf = new Uint8Array(sizeofRESPONSEBODY_Subscribe);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubscriptionManager !== undefined) view.setBigUint64(0, data.SubscriptionManager === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubscriptionManager))), true);
  // 0x08: pointer
  if (data?.expires !== undefined) view.setBigUint64(8, data.expires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.expires))), true);
  // 0x10: pointer
  if (data?.any !== undefined) view.setBigUint64(16, data.any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.any))), true);
  return buf;
}

export class RESPONSEBODY_SubscribeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubscriptionManager(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get expires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SubscriptionManager(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set expires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.REQUESTBODY_Renew (size: 16)
 */
export interface REQUESTBODY_Renew {
  /** ptr */
  Expires: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofREQUESTBODY_Renew = 16;

export function allocREQUESTBODY_Renew(data?: Partial<REQUESTBODY_Renew>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUESTBODY_Renew);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Expires !== undefined) view.setBigUint64(0, data.Expires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Expires))), true);
  // 0x08: pointer
  if (data?.Any !== undefined) view.setBigUint64(8, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class REQUESTBODY_RenewView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Expires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Expires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.RESPONSEBODY_Renew (size: 16)
 */
export interface RESPONSEBODY_Renew {
  /** ptr */
  expires: Deno.PointerValue | Uint8Array;
  /** ptr */
  any: Deno.PointerValue | Uint8Array;
}

export const sizeofRESPONSEBODY_Renew = 16;

export function allocRESPONSEBODY_Renew(data?: Partial<RESPONSEBODY_Renew>): Uint8Array {
  const buf = new Uint8Array(sizeofRESPONSEBODY_Renew);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.expires !== undefined) view.setBigUint64(0, data.expires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.expires))), true);
  // 0x08: pointer
  if (data?.any !== undefined) view.setBigUint64(8, data.any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.any))), true);
  return buf;
}

export class RESPONSEBODY_RenewView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get expires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set expires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.REQUESTBODY_GetStatus (size: 8)
 */
export interface REQUESTBODY_GetStatus {
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofREQUESTBODY_GetStatus = 8;

export function allocREQUESTBODY_GetStatus(data?: Partial<REQUESTBODY_GetStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUESTBODY_GetStatus);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Any !== undefined) view.setBigUint64(0, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class REQUESTBODY_GetStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.RESPONSEBODY_GetStatus (size: 16)
 */
export interface RESPONSEBODY_GetStatus {
  /** ptr */
  expires: Deno.PointerValue | Uint8Array;
  /** ptr */
  any: Deno.PointerValue | Uint8Array;
}

export const sizeofRESPONSEBODY_GetStatus = 16;

export function allocRESPONSEBODY_GetStatus(data?: Partial<RESPONSEBODY_GetStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofRESPONSEBODY_GetStatus);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.expires !== undefined) view.setBigUint64(0, data.expires === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.expires))), true);
  // 0x08: pointer
  if (data?.any !== undefined) view.setBigUint64(8, data.any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.any))), true);
  return buf;
}

export class RESPONSEBODY_GetStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get expires(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set expires(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.REQUESTBODY_Unsubscribe (size: 8)
 */
export interface REQUESTBODY_Unsubscribe {
  /** ptr */
  any: Deno.PointerValue | Uint8Array;
}

export const sizeofREQUESTBODY_Unsubscribe = 8;

export function allocREQUESTBODY_Unsubscribe(data?: Partial<REQUESTBODY_Unsubscribe>): Uint8Array {
  const buf = new Uint8Array(sizeofREQUESTBODY_Unsubscribe);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.any !== undefined) view.setBigUint64(0, data.any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.any))), true);
  return buf;
}

export class REQUESTBODY_UnsubscribeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.RESPONSEBODY_SubscriptionEnd (size: 32)
 */
export interface RESPONSEBODY_SubscriptionEnd {
  /** ptr */
  SubscriptionManager: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  Status: string | null | Uint8Array | Uint16Array;
  /** ptr */
  Reason: Deno.PointerValue | Uint8Array;
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofRESPONSEBODY_SubscriptionEnd = 32;

export function allocRESPONSEBODY_SubscriptionEnd(data?: Partial<RESPONSEBODY_SubscriptionEnd>): Uint8Array {
  const buf = new Uint8Array(sizeofRESPONSEBODY_SubscriptionEnd);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubscriptionManager !== undefined) view.setBigUint64(0, data.SubscriptionManager === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SubscriptionManager))), true);
  // 0x08: buffer
  if (data?.Status !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Status);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Reason !== undefined) view.setBigUint64(16, data.Reason === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reason))), true);
  // 0x18: pointer
  if (data?.Any !== undefined) view.setBigUint64(24, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class RESPONSEBODY_SubscriptionEndView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubscriptionManager(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get Status(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Reason(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set SubscriptionManager(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set Status(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Reason(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_UNKNOWN_LOOKUP (size: 8)
 */
export interface WSD_UNKNOWN_LOOKUP {
  /** ptr */
  Any: Deno.PointerValue | Uint8Array;
}

export const sizeofWSD_UNKNOWN_LOOKUP = 8;

export function allocWSD_UNKNOWN_LOOKUP(data?: Partial<WSD_UNKNOWN_LOOKUP>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_UNKNOWN_LOOKUP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Any !== undefined) view.setBigUint64(0, data.Any === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Any))), true);
  return buf;
}

export class WSD_UNKNOWN_LOOKUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Any(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Any(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Devices.WebServicesOnDevices.WSD_EVENT (size: 56)
 */
export interface WSD_EVENT {
  /** Windows.Win32.Foundation.HRESULT */
  Hr: Uint8Array | Deno.PointerValue;
  /** u32 */
  EventType: number;
  /** Windows.Win32.Foundation.PWSTR */
  DispatchTag: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Devices.WebServicesOnDevices.WSD_HANDLER_CONTEXT */
  HandlerContext: Uint8Array | Deno.PointerValue;
  /** ptr */
  Soap: Deno.PointerValue | Uint8Array;
  /** ptr */
  Operation: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Devices.WebServicesOnDevices.IWSDMessageParameters */
  MessageParameters: Uint8Array | Deno.PointerValue;
}

export const sizeofWSD_EVENT = 56;

export function allocWSD_EVENT(data?: Partial<WSD_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWSD_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hr !== undefined) view.setBigUint64(0, data.Hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Hr))), true);
  // 0x08: u32
  if (data?.EventType !== undefined) view.setUint32(8, Number(data.EventType), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.DispatchTag !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DispatchTag);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.HandlerContext !== undefined) view.setBigUint64(24, data.HandlerContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HandlerContext))), true);
  // 0x20: pointer
  if (data?.Soap !== undefined) view.setBigUint64(32, data.Soap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Soap))), true);
  // 0x28: pointer
  if (data?.Operation !== undefined) view.setBigUint64(40, data.Operation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Operation))), true);
  // 0x30: pointer
  if (data?.MessageParameters !== undefined) view.setBigUint64(48, data.MessageParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MessageParameters))), true);
  return buf;
}

export class WSD_EVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get EventType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get DispatchTag(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get HandlerContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Soap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Operation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get MessageParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set EventType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set DispatchTag(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set HandlerContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Soap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Operation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set MessageParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

try {
  var libwsdapi_dll = Deno.dlopen("wsdapi.dll", {
    WSDCreateUdpMessageParameters: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateUdpAddress: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateHttpMessageParameters: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateHttpAddress: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateOutboundAttachment: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDXMLGetNameFromBuiltinNamespace: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDXMLCreateContext: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDiscoveryProvider: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDiscoveryProvider2: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDiscoveryPublisher: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDiscoveryPublisher2: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDeviceProxy: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDeviceProxyAdvanced: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDeviceProxy2: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDeviceHost: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDeviceHostAdvanced: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDCreateDeviceHost2: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDSetConfigurationOption: {
      parameters: ["u32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    WSDGetConfigurationOption: {
      parameters: ["u32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    WSDAllocateLinkedMemory: {
      parameters: ["pointer", "usize"],
      result: "pointer",
      optional: true,
    },
    WSDFreeLinkedMemory: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    WSDAttachLinkedMemory: {
      parameters: ["pointer", "pointer"],
      result: "void",
      optional: true,
    },
    WSDDetachLinkedMemory: {
      parameters: ["pointer"],
      result: "void",
      optional: true,
    },
    WSDXMLBuildAnyForSingleElement: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDXMLGetValueFromAny: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDXMLAddSibling: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDXMLAddChild: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDXMLCleanupElement: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    WSDGenerateFault: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDGenerateFaultEx: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDUriEncode: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    WSDUriDecode: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WSDCreateUdpMessageParameters(
  ppTxParams: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateUdpMessageParameters!(util.toPointer(ppTxParams));
}

export function WSDCreateUdpAddress(
  ppAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateUdpAddress!(util.toPointer(ppAddress));
}

export function WSDCreateHttpMessageParameters(
  ppTxParams: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateHttpMessageParameters!(util.toPointer(ppTxParams));
}

export function WSDCreateHttpAddress(
  ppAddress: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateHttpAddress!(util.toPointer(ppAddress));
}

export function WSDCreateOutboundAttachment(
  ppAttachment: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateOutboundAttachment!(util.toPointer(ppAttachment));
}

export function WSDXMLGetNameFromBuiltinNamespace(
  pszNamespace: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLGetNameFromBuiltinNamespace!(util.pwstrToFfi(pszNamespace), util.pwstrToFfi(pszName), util.toPointer(ppName));
}

export function WSDXMLCreateContext(
  ppContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLCreateContext!(util.toPointer(ppContext));
}

export function WSDCreateDiscoveryProvider(
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppProvider: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDiscoveryProvider!(util.toPointer(pContext), util.toPointer(ppProvider));
}

export function WSDCreateDiscoveryProvider2(
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  pConfigParams: Deno.PointerValue | Uint8Array /* ptr */,
  dwConfigParamCount: number /* u32 */,
  ppProvider: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDiscoveryProvider2!(util.toPointer(pContext), util.toPointer(pConfigParams), dwConfigParamCount, util.toPointer(ppProvider));
}

export function WSDCreateDiscoveryPublisher(
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppPublisher: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDiscoveryPublisher!(util.toPointer(pContext), util.toPointer(ppPublisher));
}

export function WSDCreateDiscoveryPublisher2(
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  pConfigParams: Deno.PointerValue | Uint8Array /* ptr */,
  dwConfigParamCount: number /* u32 */,
  ppPublisher: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDiscoveryPublisher2!(util.toPointer(pContext), util.toPointer(pConfigParams), dwConfigParamCount, util.toPointer(ppPublisher));
}

export function WSDCreateDeviceProxy(
  pszDeviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszLocalId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppDeviceProxy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDeviceProxy!(util.pwstrToFfi(pszDeviceId), util.pwstrToFfi(pszLocalId), util.toPointer(pContext), util.toPointer(ppDeviceProxy));
}

export function WSDCreateDeviceProxyAdvanced(
  pszDeviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDeviceAddress: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDAddress */,
  pszLocalId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppDeviceProxy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDeviceProxyAdvanced!(util.pwstrToFfi(pszDeviceId), util.toPointer(pDeviceAddress), util.pwstrToFfi(pszLocalId), util.toPointer(pContext), util.toPointer(ppDeviceProxy));
}

export function WSDCreateDeviceProxy2(
  pszDeviceId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszLocalId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  pConfigParams: Deno.PointerValue | Uint8Array /* ptr */,
  dwConfigParamCount: number /* u32 */,
  ppDeviceProxy: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDeviceProxy2!(util.pwstrToFfi(pszDeviceId), util.pwstrToFfi(pszLocalId), util.toPointer(pContext), util.toPointer(pConfigParams), dwConfigParamCount, util.toPointer(ppDeviceProxy));
}

export function WSDCreateDeviceHost(
  pszLocalId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppDeviceHost: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDeviceHost!(util.pwstrToFfi(pszLocalId), util.toPointer(pContext), util.toPointer(ppDeviceHost));
}

export function WSDCreateDeviceHostAdvanced(
  pszLocalId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppHostAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  dwHostAddressCount: number /* u32 */,
  ppDeviceHost: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDeviceHostAdvanced!(util.pwstrToFfi(pszLocalId), util.toPointer(pContext), util.toPointer(ppHostAddresses), dwHostAddressCount, util.toPointer(ppDeviceHost));
}

export function WSDCreateDeviceHost2(
  pszLocalId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  pConfigParams: Deno.PointerValue | Uint8Array /* ptr */,
  dwConfigParamCount: number /* u32 */,
  ppDeviceHost: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDCreateDeviceHost2!(util.pwstrToFfi(pszLocalId), util.toPointer(pContext), util.toPointer(pConfigParams), dwConfigParamCount, util.toPointer(ppDeviceHost));
}

export function WSDSetConfigurationOption(
  dwOption: number /* u32 */,
  pVoid: Deno.PointerValue | Uint8Array /* ptr */,
  cbInBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDSetConfigurationOption!(dwOption, util.toPointer(pVoid), cbInBuffer);
}

export function WSDGetConfigurationOption(
  dwOption: number /* u32 */,
  pVoid: Deno.PointerValue | Uint8Array /* ptr */,
  cbOutBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDGetConfigurationOption!(dwOption, util.toPointer(pVoid), cbOutBuffer);
}

export function WSDAllocateLinkedMemory(
  pParent: Deno.PointerValue | Uint8Array /* ptr */,
  cbSize: bigint | number /* usize */,
): Deno.PointerValue /* ptr */ {
  return libwsdapi_dll.WSDAllocateLinkedMemory!(util.toPointer(pParent), cbSize);
}

export function WSDFreeLinkedMemory(
  pVoid: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libwsdapi_dll.WSDFreeLinkedMemory!(util.toPointer(pVoid));
}

export function WSDAttachLinkedMemory(
  pParent: Deno.PointerValue | Uint8Array /* ptr */,
  pChild: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libwsdapi_dll.WSDAttachLinkedMemory!(util.toPointer(pParent), util.toPointer(pChild));
}

export function WSDDetachLinkedMemory(
  pVoid: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libwsdapi_dll.WSDDetachLinkedMemory!(util.toPointer(pVoid));
}

export function WSDXMLBuildAnyForSingleElement(
  pElementName: Deno.PointerValue | Uint8Array /* ptr */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppAny: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLBuildAnyForSingleElement!(util.toPointer(pElementName), util.pwstrToFfi(pszText), util.toPointer(ppAny));
}

export function WSDXMLGetValueFromAny(
  pszNamespace: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAny: Deno.PointerValue | Uint8Array /* ptr */,
  ppszValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLGetValueFromAny!(util.pwstrToFfi(pszNamespace), util.pwstrToFfi(pszName), util.toPointer(pAny), util.toPointer(ppszValue));
}

export function WSDXMLAddSibling(
  pFirst: Deno.PointerValue | Uint8Array /* ptr */,
  pSecond: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLAddSibling!(util.toPointer(pFirst), util.toPointer(pSecond));
}

export function WSDXMLAddChild(
  pParent: Deno.PointerValue | Uint8Array /* ptr */,
  pChild: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLAddChild!(util.toPointer(pParent), util.toPointer(pChild));
}

export function WSDXMLCleanupElement(
  pAny: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDXMLCleanupElement!(util.toPointer(pAny));
}

export function WSDGenerateFault(
  pszCode: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszSubCode: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszReason: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszDetail: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pContext: Uint8Array | Deno.PointerValue /* Windows.Win32.Devices.WebServicesOnDevices.IWSDXMLContext */,
  ppFault: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDGenerateFault!(util.pwstrToFfi(pszCode), util.pwstrToFfi(pszSubCode), util.pwstrToFfi(pszReason), util.pwstrToFfi(pszDetail), util.toPointer(pContext), util.toPointer(ppFault));
}

export function WSDGenerateFaultEx(
  pCode: Deno.PointerValue | Uint8Array /* ptr */,
  pSubCode: Deno.PointerValue | Uint8Array /* ptr */,
  pReasons: Deno.PointerValue | Uint8Array /* ptr */,
  pszDetail: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppFault: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDGenerateFaultEx!(util.toPointer(pCode), util.toPointer(pSubCode), util.toPointer(pReasons), util.pwstrToFfi(pszDetail), util.toPointer(ppFault));
}

export function WSDUriEncode(
  source: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSource: number /* u32 */,
  destOut: Deno.PointerValue | Uint8Array /* ptr */,
  cchDestOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDUriEncode!(util.pwstrToFfi(source), cchSource, util.toPointer(destOut), util.toPointer(cchDestOut));
}

export function WSDUriDecode(
  source: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSource: number /* u32 */,
  destOut: Deno.PointerValue | Uint8Array /* ptr */,
  cchDestOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwsdapi_dll.WSDUriDecode!(util.pwstrToFfi(source), cchSource, util.toPointer(destOut), util.toPointer(cchDestOut));
}

