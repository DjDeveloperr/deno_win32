/// Auto-generated by Deno Win32: Windows.Win32.Devices.Sensors.Apis

import * as util from "../../util.ts";

// Enums
export type SensorState = number;
export type SensorConnectionType = number;
export type LOCATION_DESIRED_ACCURACY = number;
export type LOCATION_POSITION_SOURCE = number;
export type SimpleDeviceOrientation = number;
export type MagnetometerAccuracy = number;
export type ACTIVITY_STATE_COUNT = number;
export type ACTIVITY_STATE = number;
export type ELEVATION_CHANGE_MODE = number;
export type MAGNETOMETER_ACCURACY = number;
export type PEDOMETER_STEP_TYPE_COUNT = number;
export type PEDOMETER_STEP_TYPE = number;
export type PROXIMITY_TYPE = number;
export type HUMAN_PRESENCE_DETECTION_TYPE_COUNT = number;
export type HUMAN_PRESENCE_DETECTION_TYPE = number;
export type SIMPLE_DEVICE_ORIENTATION = number;
export type SENSOR_STATE = number;
export type SENSOR_CONNECTION_TYPES = number;
export type AXIS = number;

// Constants
export const GNSS_CLEAR_ALL_ASSISTANCE_DATA = 1;
export const SENSOR_PROPERTY_LIST_HEADER_SIZE = 8;
export const SENSOR_STATE_MIN = 0;
export const SENSOR_STATE_READY = 0;
export const SENSOR_STATE_NOT_AVAILABLE = 1;
export const SENSOR_STATE_NO_DATA = 2;
export const SENSOR_STATE_INITIALIZING = 3;
export const SENSOR_STATE_ACCESS_DENIED = 4;
export const SENSOR_STATE_ERROR = 5;
export const SENSOR_STATE_MAX = 5;
export const SENSOR_CONNECTION_TYPE_PC_INTEGRATED = 0;
export const SENSOR_CONNECTION_TYPE_PC_ATTACHED = 1;
export const SENSOR_CONNECTION_TYPE_PC_EXTERNAL = 2;
export const LOCATION_DESIRED_ACCURACY_DEFAULT = 0;
export const LOCATION_DESIRED_ACCURACY_HIGH = 1;
export const LOCATION_POSITION_SOURCE_CELLULAR = 0;
export const LOCATION_POSITION_SOURCE_SATELLITE = 1;
export const LOCATION_POSITION_SOURCE_WIFI = 2;
export const LOCATION_POSITION_SOURCE_IPADDRESS = 3;
export const LOCATION_POSITION_SOURCE_UNKNOWN = 4;
export const SIMPLE_DEVICE_ORIENTATION_NOT_ROTATED = 0;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_90 = 1;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_180 = 2;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_270 = 3;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_UP = 4;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_DOWN = 5;
export const MAGNETOMETER_ACCURACY_UNKNOWN = 0;
export const MAGNETOMETER_ACCURACY_UNRELIABLE = 1;
export const MAGNETOMETER_ACCURACY_APPROXIMATE = 2;
export const MAGNETOMETER_ACCURACY_HIGH = 3;
export const ActivityStateCount = 8;
export const ActivityState_Unknown = 1;
export const ActivityState_Stationary = 2;
export const ActivityState_Fidgeting = 4;
export const ActivityState_Walking = 8;
export const ActivityState_Running = 16;
export const ActivityState_InVehicle = 32;
export const ActivityState_Biking = 64;
export const ActivityState_Idle = 128;
export const ActivityState_Max = 256;
export const ActivityState_Force_Dword = `-1`;
export const ElevationChangeMode_Unknown = 0;
export const ElevationChangeMode_Elevator = 1;
export const ElevationChangeMode_Stepping = 2;
export const ElevationChangeMode_Max = 3;
export const ElevationChangeMode_Force_Dword = `-1`;
export const MagnetometerAccuracy_Unknown = 0;
export const MagnetometerAccuracy_Unreliable = 1;
export const MagnetometerAccuracy_Approximate = 2;
export const MagnetometerAccuracy_High = 3;
export const PedometerStepTypeCount = 3;
export const PedometerStepType_Unknown = 1;
export const PedometerStepType_Walking = 2;
export const PedometerStepType_Running = 4;
export const PedometerStepType_Max = 8;
export const PedometerStepType_Force_Dword = `-1`;
export const ProximityType_ObjectProximity = 0;
export const ProximityType_HumanProximity = 1;
export const ProximityType_Force_Dword = `-1`;
export const HumanPresenceDetectionTypeCount = 4;
export const HumanPresenceDetectionType_VendorDefinedNonBiometric = 1;
export const HumanPresenceDetectionType_VendorDefinedBiometric = 2;
export const HumanPresenceDetectionType_FacialBiometric = 4;
export const HumanPresenceDetectionType_AudioBiometric = 8;
export const HumanPresenceDetectionType_Force_Dword = `-1`;
export const SimpleDeviceOrientation_NotRotated = 0;
export const SimpleDeviceOrientation_Rotated90DegreesCounterclockwise = 1;
export const SimpleDeviceOrientation_Rotated180DegreesCounterclockwise = 2;
export const SimpleDeviceOrientation_Rotated270DegreesCounterclockwise = 3;
export const SimpleDeviceOrientation_Faceup = 4;
export const SimpleDeviceOrientation_Facedown = 5;
export const SensorState_Initializing = 0;
export const SensorState_Idle = 1;
export const SensorState_Active = 2;
export const SensorState_Error = 3;
export const SensorConnectionType_Integrated = 0;
export const SensorConnectionType_Attached = 1;
export const SensorConnectionType_External = 2;
export const AXIS_X = 0;
export const AXIS_Y = 1;
export const AXIS_Z = 2;
export const AXIS_MAX = 3;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : util.toBigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class PROPERTYKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class PROPVARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Sensors.SENSOR_VALUE_PAIR (size: 16)
 */
export interface SENSOR_VALUE_PAIR {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  Key: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSENSOR_VALUE_PAIR = 16;

export function allocSENSOR_VALUE_PAIR(data?: Partial<SENSOR_VALUE_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSOR_VALUE_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : util.toBigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : util.toBigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class SENSOR_VALUE_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Sensors.SENSOR_COLLECTION_LIST (size: 16)
 */
export interface SENSOR_COLLECTION_LIST {
  /** u32 */
  AllocatedSizeInBytes: number;
  /** u32 */
  Count: number;
  /** array */
  List: Deno.PointerValue | null;
}

export const sizeofSENSOR_COLLECTION_LIST = 16;

export function allocSENSOR_COLLECTION_LIST(data?: Partial<SENSOR_COLLECTION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSOR_COLLECTION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AllocatedSizeInBytes !== undefined) view.setUint32(0, Number(data.AllocatedSizeInBytes), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.List !== undefined) view.setBigUint64(8, data.List === null ? 0n : util.toBigInt(util.toPointer(data.List)), true);
  return buf;
}

export class SENSOR_COLLECTION_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AllocatedSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get List(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AllocatedSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set List(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Sensors.SENSOR_PROPERTY_LIST (size: 16)
 */
export interface SENSOR_PROPERTY_LIST {
  /** u32 */
  AllocatedSizeInBytes: number;
  /** u32 */
  Count: number;
  /** array */
  List: Deno.PointerValue | null;
}

export const sizeofSENSOR_PROPERTY_LIST = 16;

export function allocSENSOR_PROPERTY_LIST(data?: Partial<SENSOR_PROPERTY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSOR_PROPERTY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AllocatedSizeInBytes !== undefined) view.setUint32(0, Number(data.AllocatedSizeInBytes), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.List !== undefined) view.setBigUint64(8, data.List === null ? 0n : util.toBigInt(util.toPointer(data.List)), true);
  return buf;
}

export class SENSOR_PROPERTY_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AllocatedSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Count(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get List(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AllocatedSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Count(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set List(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Sensors.VEC3D (size: 16)
 */
export interface VEC3D {
  /** f32 */
  X: number;
  /** f32 */
  Y: number;
  /** f32 */
  Z: number;
}

export const sizeofVEC3D = 16;

export function allocVEC3D(data?: Partial<VEC3D>): Uint8Array {
  const buf = new Uint8Array(sizeofVEC3D);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.X !== undefined) view.setFloat32(0, Number(data.X), true);
  // 0x04: f32
  if (data?.Y !== undefined) view.setFloat32(4, Number(data.Y), true);
  // 0x08: f32
  if (data?.Z !== undefined) view.setFloat32(8, Number(data.Z), true);
  // 0x0c: pad4
  return buf;
}

export class VEC3DView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get X(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set X(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Sensors.MATRIX3X3 (size: 8)
 */
export interface MATRIX3X3 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMATRIX3X3 = 8;

export function allocMATRIX3X3(data?: Partial<MATRIX3X3>): Uint8Array {
  const buf = new Uint8Array(sizeofMATRIX3X3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class MATRIX3X3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Sensors.QUATERNION (size: 16)
 */
export interface QUATERNION {
  /** f32 */
  X: number;
  /** f32 */
  Y: number;
  /** f32 */
  Z: number;
  /** f32 */
  W: number;
}

export const sizeofQUATERNION = 16;

export function allocQUATERNION(data?: Partial<QUATERNION>): Uint8Array {
  const buf = new Uint8Array(sizeofQUATERNION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.X !== undefined) view.setFloat32(0, Number(data.X), true);
  // 0x04: f32
  if (data?.Y !== undefined) view.setFloat32(4, Number(data.Y), true);
  // 0x08: f32
  if (data?.Z !== undefined) view.setFloat32(8, Number(data.Z), true);
  // 0x0c: f32
  if (data?.W !== undefined) view.setFloat32(12, Number(data.W), true);
  return buf;
}

export class QUATERNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get X(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get W(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set X(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set W(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

export type NTSTATUS = number;

export type HRESULT = number;

export type BOOLEAN = number;

// Native Libraries

try {
  var libSensorsUtilsV2_dll = Deno.dlopen("SensorsUtilsV2.dll", {
    GetPerformanceTime: {
      parameters: ["pointer"],
      result: "pointer",
    },
    InitPropVariantFromFloat: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetPropVariant: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeySetPropVariant: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetFileTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetGuid: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetBool: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetUlong: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetUshort: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetFloat: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetDouble: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetInt32: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetInt64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetNthUlong: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetNthUshort: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetNthInt64: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    IsKeyPresentInPropertyList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsKeyPresentInCollectionList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsCollectionListSame: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantGetInformation: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropertiesListCopy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropertiesListGetFillableCount: {
      parameters: ["u32"],
      result: "u32",
    },
    CollectionsListGetMarshalledSize: {
      parameters: ["pointer"],
      result: "u32",
    },
    CollectionsListCopyAndMarshall: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListMarshall: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CollectionsListGetMarshalledSizeWithoutSerialization: {
      parameters: ["pointer"],
      result: "u32",
    },
    CollectionsListUpdateMarshalledPointer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SerializationBufferAllocate: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    SerializationBufferFree: {
      parameters: ["pointer"],
      result: "void",
    },
    CollectionsListGetSerializedSize: {
      parameters: ["pointer"],
      result: "u32",
    },
    CollectionsListSerializeToBuffer: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    CollectionsListAllocateBufferAndSerialize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListDeserializeFromBuffer: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    SensorCollectionGetAt: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListGetFillableCount: {
      parameters: ["u32"],
      result: "u32",
    },
    EvaluateActivityThresholds: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListSortSubscribedActivitiesByConfidence: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromCLSIDArray: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    IsSensorSubscribed: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsGUIDPresentInList: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetPerformanceTime(
  TimeMs: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.GetPerformanceTime(util.toPointer(TimeMs)));
}

export function InitPropVariantFromFloat(
  fltVal: number /* f32 */,
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.InitPropVariantFromFloat(fltVal, util.toPointer(ppropvar)));
}

export function PropKeyFindKeyGetPropVariant(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetPropVariant(util.toPointer(pList), util.toPointer(pKey), util.toPointer(TypeCheck), util.toPointer(pValue)));
}

export function PropKeyFindKeySetPropVariant(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeySetPropVariant(util.toPointer(pList), util.toPointer(pKey), util.toPointer(TypeCheck), util.toPointer(pValue)));
}

export function PropKeyFindKeyGetFileTime(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetFileTime(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetGuid(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetGuid(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetBool(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetBool(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetUlong(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetUlong(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetUshort(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetUshort(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetFloat(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetFloat(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetDouble(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetDouble(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetInt32(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetInt32(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetInt64(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetInt64(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetNthUlong(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  Occurrence: number /* u32 */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetNthUlong(util.toPointer(pList), util.toPointer(pKey), Occurrence, util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetNthUshort(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  Occurrence: number /* u32 */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetNthUshort(util.toPointer(pList), util.toPointer(pKey), Occurrence, util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetNthInt64(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  Occurrence: number /* u32 */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropKeyFindKeyGetNthInt64(util.toPointer(pList), util.toPointer(pKey), Occurrence, util.toPointer(pRetValue)));
}

export function IsKeyPresentInPropertyList(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.IsKeyPresentInPropertyList(util.toPointer(pList), util.toPointer(pKey)));
}

export function IsKeyPresentInCollectionList(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.IsKeyPresentInCollectionList(util.toPointer(pList), util.toPointer(pKey)));
}

export function IsCollectionListSame(
  ListA: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListB: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.IsCollectionListSame(util.toPointer(ListA), util.toPointer(ListB)));
}

export function PropVariantGetInformation(
  PropVariantValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropVariantOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropVariantSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropVariantPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemappedType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropVariantGetInformation(util.toPointer(PropVariantValue), util.toPointer(PropVariantOffset), util.toPointer(PropVariantSize), util.toPointer(PropVariantPointer), util.toPointer(RemappedType)));
}

export function PropertiesListCopy(
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.PropertiesListCopy(util.toPointer(Target), util.toPointer(Source)));
}

export function PropertiesListGetFillableCount(
  BufferSizeBytes: number /* u32 */,
): number /* u32 */ {
  return libSensorsUtilsV2_dll.PropertiesListGetFillableCount(BufferSizeBytes);
}

export function CollectionsListGetMarshalledSize(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSensorsUtilsV2_dll.CollectionsListGetMarshalledSize(util.toPointer(Collection));
}

export function CollectionsListCopyAndMarshall(
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListCopyAndMarshall(util.toPointer(Target), util.toPointer(Source)));
}

export function CollectionsListMarshall(
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListMarshall(util.toPointer(Target)));
}

export function CollectionsListGetMarshalledSizeWithoutSerialization(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSensorsUtilsV2_dll.CollectionsListGetMarshalledSizeWithoutSerialization(util.toPointer(Collection));
}

export function CollectionsListUpdateMarshalledPointer(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListUpdateMarshalledPointer(util.toPointer(Collection)));
}

export function SerializationBufferAllocate(
  SizeInBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.SerializationBufferAllocate(SizeInBytes, util.toPointer(pBuffer)));
}

export function SerializationBufferFree(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSensorsUtilsV2_dll.SerializationBufferFree(util.toPointer(Buffer));
}

export function CollectionsListGetSerializedSize(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSensorsUtilsV2_dll.CollectionsListGetSerializedSize(util.toPointer(Collection));
}

export function CollectionsListSerializeToBuffer(
  SourceCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetBufferSizeInBytes: number /* u32 */,
  TargetBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListSerializeToBuffer(util.toPointer(SourceCollection), TargetBufferSizeInBytes, util.toPointer(TargetBuffer)));
}

export function CollectionsListAllocateBufferAndSerialize(
  SourceCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTargetBufferSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTargetBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListAllocateBufferAndSerialize(util.toPointer(SourceCollection), util.toPointer(pTargetBufferSizeInBytes), util.toPointer(pTargetBuffer)));
}

export function CollectionsListDeserializeFromBuffer(
  SourceBufferSizeInBytes: number /* u32 */,
  SourceBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListDeserializeFromBuffer(SourceBufferSizeInBytes, util.toPointer(SourceBuffer), util.toPointer(TargetCollection)));
}

export function SensorCollectionGetAt(
  Index: number /* u32 */,
  pSensorsList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.SensorCollectionGetAt(Index, util.toPointer(pSensorsList), util.toPointer(pKey), util.toPointer(pValue)));
}

export function CollectionsListGetFillableCount(
  BufferSizeBytes: number /* u32 */,
): number /* u32 */ {
  return libSensorsUtilsV2_dll.CollectionsListGetFillableCount(BufferSizeBytes);
}

export function EvaluateActivityThresholds(
  newSample: Deno.PointerValue | Uint8Array | null /* ptr */,
  oldSample: Deno.PointerValue | Uint8Array | null /* ptr */,
  thresholds: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.EvaluateActivityThresholds(util.toPointer(newSample), util.toPointer(oldSample), util.toPointer(thresholds)));
}

export function CollectionsListSortSubscribedActivitiesByConfidence(
  thresholds: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.CollectionsListSortSubscribedActivitiesByConfidence(util.toPointer(thresholds), util.toPointer(pCollection)));
}

export function InitPropVariantFromCLSIDArray(
  members: Deno.PointerValue | Uint8Array | null /* ptr */,
  size: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.InitPropVariantFromCLSIDArray(util.toPointer(members), size, util.toPointer(ppropvar)));
}

export function IsSensorSubscribed(
  subscriptionList: Deno.PointerValue | Uint8Array | null /* ptr */,
  currentType: Uint8Array | Deno.PointerValue | null /* System.Guid */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.IsSensorSubscribed(util.toPointer(subscriptionList), util.toPointer(currentType)));
}

export function IsGUIDPresentInList(
  guidArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  arrayLength: number /* u32 */,
  guidElem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2_dll.IsGUIDPresentInList(util.toPointer(guidArray), arrayLength, util.toPointer(guidElem)));
}

