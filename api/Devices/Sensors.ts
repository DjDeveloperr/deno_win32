/// Auto-generated by Deno Win32: Windows.Win32.Devices.Sensors.Apis

import * as util from "../../util.ts";

// Enums
export type SensorState = number;
export type SensorConnectionType = number;
export type LOCATION_DESIRED_ACCURACY = number;
export type LOCATION_POSITION_SOURCE = number;
export type SimpleDeviceOrientation = number;
export type MagnetometerAccuracy = number;
export type ACTIVITY_STATE_COUNT = number;
export type ACTIVITY_STATE = number;
export type ELEVATION_CHANGE_MODE = number;
export type MAGNETOMETER_ACCURACY = number;
export type PEDOMETER_STEP_TYPE_COUNT = number;
export type PEDOMETER_STEP_TYPE = number;
export type PROXIMITY_TYPE = number;
export type HUMAN_PRESENCE_DETECTION_TYPE_COUNT = number;
export type HUMAN_PRESENCE_DETECTION_TYPE = number;
export type SIMPLE_DEVICE_ORIENTATION = number;
export type SENSOR_STATE = number;
export type SENSOR_CONNECTION_TYPES = number;
export type AXIS = number;

// Constants
export const GNSS_CLEAR_ALL_ASSISTANCE_DATA = 1;
export const SENSOR_PROPERTY_LIST_HEADER_SIZE = 8;
export const SENSOR_STATE_MIN = 0;
export const SENSOR_STATE_READY = 0;
export const SENSOR_STATE_NOT_AVAILABLE = 1;
export const SENSOR_STATE_NO_DATA = 2;
export const SENSOR_STATE_INITIALIZING = 3;
export const SENSOR_STATE_ACCESS_DENIED = 4;
export const SENSOR_STATE_ERROR = 5;
export const SENSOR_STATE_MAX = 5;
export const SENSOR_CONNECTION_TYPE_PC_INTEGRATED = 0;
export const SENSOR_CONNECTION_TYPE_PC_ATTACHED = 1;
export const SENSOR_CONNECTION_TYPE_PC_EXTERNAL = 2;
export const LOCATION_DESIRED_ACCURACY_DEFAULT = 0;
export const LOCATION_DESIRED_ACCURACY_HIGH = 1;
export const LOCATION_POSITION_SOURCE_CELLULAR = 0;
export const LOCATION_POSITION_SOURCE_SATELLITE = 1;
export const LOCATION_POSITION_SOURCE_WIFI = 2;
export const LOCATION_POSITION_SOURCE_IPADDRESS = 3;
export const LOCATION_POSITION_SOURCE_UNKNOWN = 4;
export const SIMPLE_DEVICE_ORIENTATION_NOT_ROTATED = 0;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_90 = 1;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_180 = 2;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_270 = 3;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_UP = 4;
export const SIMPLE_DEVICE_ORIENTATION_ROTATED_FACE_DOWN = 5;
export const MAGNETOMETER_ACCURACY_UNKNOWN = 0;
export const MAGNETOMETER_ACCURACY_UNRELIABLE = 1;
export const MAGNETOMETER_ACCURACY_APPROXIMATE = 2;
export const MAGNETOMETER_ACCURACY_HIGH = 3;
export const ActivityStateCount = 8;
export const ActivityState_Unknown = 1;
export const ActivityState_Stationary = 2;
export const ActivityState_Fidgeting = 4;
export const ActivityState_Walking = 8;
export const ActivityState_Running = 16;
export const ActivityState_InVehicle = 32;
export const ActivityState_Biking = 64;
export const ActivityState_Idle = 128;
export const ActivityState_Max = 256;
export const ActivityState_Force_Dword = "-1";
export const ElevationChangeMode_Unknown = 0;
export const ElevationChangeMode_Elevator = 1;
export const ElevationChangeMode_Stepping = 2;
export const ElevationChangeMode_Max = 3;
export const ElevationChangeMode_Force_Dword = "-1";
export const MagnetometerAccuracy_Unknown = 0;
export const MagnetometerAccuracy_Unreliable = 1;
export const MagnetometerAccuracy_Approximate = 2;
export const MagnetometerAccuracy_High = 3;
export const PedometerStepTypeCount = 3;
export const PedometerStepType_Unknown = 1;
export const PedometerStepType_Walking = 2;
export const PedometerStepType_Running = 4;
export const PedometerStepType_Max = 8;
export const PedometerStepType_Force_Dword = "-1";
export const ProximityType_ObjectProximity = 0;
export const ProximityType_HumanProximity = 1;
export const ProximityType_Force_Dword = "-1";
export const HumanPresenceDetectionTypeCount = 4;
export const HumanPresenceDetectionType_VendorDefinedNonBiometric = 1;
export const HumanPresenceDetectionType_VendorDefinedBiometric = 2;
export const HumanPresenceDetectionType_FacialBiometric = 4;
export const HumanPresenceDetectionType_AudioBiometric = 8;
export const HumanPresenceDetectionType_Force_Dword = "-1";
export const SimpleDeviceOrientation_NotRotated = 0;
export const SimpleDeviceOrientation_Rotated90DegreesCounterclockwise = 1;
export const SimpleDeviceOrientation_Rotated180DegreesCounterclockwise = 2;
export const SimpleDeviceOrientation_Rotated270DegreesCounterclockwise = 3;
export const SimpleDeviceOrientation_Faceup = 4;
export const SimpleDeviceOrientation_Facedown = 5;
export const SensorState_Initializing = 0;
export const SensorState_Idle = 1;
export const SensorState_Active = 2;
export const SensorState_Error = 3;
export const SensorConnectionType_Integrated = 0;
export const SensorConnectionType_Attached = 1;
export const SensorConnectionType_External = 2;
export const AXIS_X = 0;
export const AXIS_Y = 1;
export const AXIS_Z = 2;
export const AXIS_MAX = 3;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.Apis (size: 2208)
 */
export interface Apis {
  /** System.Guid */
  GUID_DEVINTERFACE_SENSOR: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_EVENT_STATE_CHANGED: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_EVENT_DATA_UPDATED: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_EVENT_PROPERTY_CHANGED: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_EVENT_ACCELEROMETER_SHAKE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_EVENT_PARAMETER_COMMON_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_EVENT_PARAMETER_EVENT_ID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_EVENT_PARAMETER_STATE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_ERROR_PARAMETER_COMMON_GUID: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_PROPERTY_COMMON_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_TYPE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_STATE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_PERSISTENT_UNIQUE_ID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_MANUFACTURER: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_MODEL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_SERIAL_NUMBER: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_FRIENDLY_NAME: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_DESCRIPTION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_CONNECTION_TYPE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_MIN_REPORT_INTERVAL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_CURRENT_REPORT_INTERVAL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_CHANGE_SENSITIVITY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_DEVICE_PATH: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_LIGHT_RESPONSE_CURVE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_ACCURACY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_RESOLUTION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_LOCATION_DESIRED_ACCURACY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_RANGE_MINIMUM: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_RANGE_MAXIMUM: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_HID_USAGE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_RADIO_STATE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_RADIO_STATE_PREVIOUS: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_ALL: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_LOCATION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_ENVIRONMENTAL: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_MOTION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_ORIENTATION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_MECHANICAL: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_ELECTRICAL: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_BIOMETRIC: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_LIGHT: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_SCANNER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_OTHER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_CATEGORY_UNSUPPORTED: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_GPS: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_STATIC: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_LOOKUP: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_TRIANGULATION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_OTHER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_BROADCAST: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_LOCATION_DEAD_RECKONING: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ENVIRONMENTAL_TEMPERATURE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ENVIRONMENTAL_ATMOSPHERIC_PRESSURE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ENVIRONMENTAL_HUMIDITY: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ENVIRONMENTAL_WIND_SPEED: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ENVIRONMENTAL_WIND_DIRECTION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ACCELEROMETER_1D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ACCELEROMETER_2D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ACCELEROMETER_3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_MOTION_DETECTOR: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_GYROMETER_1D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_GYROMETER_2D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_GYROMETER_3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_SPEEDOMETER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_COMPASS_1D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_COMPASS_2D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_COMPASS_3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_INCLINOMETER_1D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_INCLINOMETER_2D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_INCLINOMETER_3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_DISTANCE_1D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_DISTANCE_2D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_DISTANCE_3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_AGGREGATED_QUADRANT_ORIENTATION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_AGGREGATED_DEVICE_ORIENTATION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_AGGREGATED_SIMPLE_DEVICE_ORIENTATION: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_VOLTAGE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_CURRENT: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_CAPACITANCE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_RESISTANCE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_INDUCTANCE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_ELECTRICAL_POWER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_POTENTIOMETER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_FREQUENCY: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_BOOLEAN_SWITCH: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_MULTIVALUE_SWITCH: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_FORCE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_SCALE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_PRESSURE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_STRAIN: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_BOOLEAN_SWITCH_ARRAY: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_HUMAN_PRESENCE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_HUMAN_PROXIMITY: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_TOUCH: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_AMBIENT_LIGHT: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_RFID_SCANNER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_BARCODE_SCANNER: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_CUSTOM: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_TYPE_UNKNOWN: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_COMMON_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TIMESTAMP: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_LOCATION_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_LATITUDE_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_LONGITUDE_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SPEED_KNOTS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TRUE_HEADING_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_VARIATION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_FIX_QUALITY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_FIX_TYPE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_POSITION_DILUTION_OF_PRECISION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_HORIZONAL_DILUTION_OF_PRECISION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_VERTICAL_DILUTION_OF_PRECISION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_USED_COUNT: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_USED_PRNS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_IN_VIEW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_PRNS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ELEVATION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_AZIMUTH: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_STN_RATIO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ERROR_RADIUS_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ADDRESS1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ADDRESS2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CITY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_STATE_PROVINCE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_POSTALCODE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_COUNTRY_REGION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_ERROR_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_ERROR_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_GPS_SELECTION_MODE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_GPS_OPERATION_MODE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_GPS_STATUS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_GEOIDAL_SEPARATION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_DGPS_DATA_AGE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ALTITUDE_ANTENNA_SEALEVEL_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_DIFFERENTIAL_REFERENCE_STATION_ID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_NMEA_SENTENCE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_LOCATION_SOURCE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SATELLITES_USED_PRNS_AND_CONSTELLATIONS: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_ENVIRONMENTAL_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TEMPERATURE_CELSIUS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_RELATIVE_HUMIDITY_PERCENT: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ATMOSPHERIC_PRESSURE_BAR: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_WIND_DIRECTION_DEGREES_ANTICLOCKWISE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_WIND_SPEED_METERS_PER_SECOND: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_MOTION_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ACCELERATION_X_G: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ACCELERATION_Y_G: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ACCELERATION_Z_G: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_X_DEGREES_PER_SECOND_SQUARED: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Y_DEGREES_PER_SECOND_SQUARED: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Z_DEGREES_PER_SECOND_SQUARED: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SPEED_METERS_PER_SECOND: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MOTION_STATE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ANGULAR_VELOCITY_X_DEGREES_PER_SECOND: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Y_DEGREES_PER_SECOND: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Z_DEGREES_PER_SECOND: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_ORIENTATION_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TILT_X_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TILT_Y_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TILT_Z_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_X_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_Y_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_Z_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_DISTANCE_X_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_DISTANCE_Y_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_DISTANCE_Z_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_MAGNETIC_NORTH_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_TRUE_NORTH_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_MAGNETIC_NORTH_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_HEADING_TRUE_NORTH_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_QUADRANT_ANGLE_DEGREES: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ROTATION_MATRIX: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_QUATERNION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_SIMPLE_DEVICE_ORIENTATION: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_X_MILLIGAUSS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Y_MILLIGAUSS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Z_MILLIGAUSS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MAGNETOMETER_ACCURACY: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_GUID_MECHANICAL_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_BOOLEAN_SWITCH_STATE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_MULTIVALUE_SWITCH_STATE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_FORCE_NEWTONS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ABSOLUTE_PRESSURE_PASCAL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_GAUGE_PRESSURE_PASCAL: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_STRAIN: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_WEIGHT_KILOGRAMS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_BOOLEAN_SWITCH_ARRAY_STATES: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_BIOMETRIC_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_HUMAN_PRESENCE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_HUMAN_PROXIMITY_METERS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_TOUCH_STATE: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_LIGHT_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_LIGHT_LEVEL_LUX: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_LIGHT_TEMPERATURE_KELVIN: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_LIGHT_CHROMACITY: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_SCANNER_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_RFID_TAG_40_BIT: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_ELECTRICAL_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_VOLTAGE_VOLTS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CURRENT_AMPS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CAPACITANCE_FARAD: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_RESISTANCE_OHMS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_INDUCTANCE_HENRY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ELECTRICAL_POWER_WATTS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ELECTRICAL_PERCENT_OF_RANGE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_ELECTRICAL_FREQUENCY_HERTZ: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_DATA_TYPE_CUSTOM_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_USAGE: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_BOOLEAN_ARRAY: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE4: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE5: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE6: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE7: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE8: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE9: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE10: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE11: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE12: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE13: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE15: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE16: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE17: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE18: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE19: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE20: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE21: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE22: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE23: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE24: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE25: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE26: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE27: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_DATA_TYPE_CUSTOM_VALUE28: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SENSOR_PROPERTY_TEST_GUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_CLEAR_ASSISTANCE_DATA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  SENSOR_PROPERTY_TURN_ON_OFF_NMEA: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_All: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Biometric: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Electrical: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Environmental: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Light: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Location: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Mechanical: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Motion: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Orientation: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Other: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_PersonalActivity: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Scanner: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorCategory_Unsupported: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Accelerometer3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_ActivityDetection: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_AmbientLight: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Barometer: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Custom: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_FloorElevation: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_GeomagneticOrientation: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_GravityVector: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Gyrometer3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Humidity: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_LinearAccelerometer: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Magnetometer3D: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Orientation: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Pedometer: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Proximity: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_RelativeOrientation: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_SimpleDeviceOrientation: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_Temperature: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  GUID_SensorType_HingeAngle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 2208;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.GUID_DEVINTERFACE_SENSOR !== undefined) view.setBigUint64(0, data.GUID_DEVINTERFACE_SENSOR === null ? 0n : BigInt(util.toPointer(data.GUID_DEVINTERFACE_SENSOR)), true);
  // 0x08: pointer
  if (data?.SENSOR_EVENT_STATE_CHANGED !== undefined) view.setBigUint64(8, data.SENSOR_EVENT_STATE_CHANGED === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_STATE_CHANGED)), true);
  // 0x10: pointer
  if (data?.SENSOR_EVENT_DATA_UPDATED !== undefined) view.setBigUint64(16, data.SENSOR_EVENT_DATA_UPDATED === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_DATA_UPDATED)), true);
  // 0x18: pointer
  if (data?.SENSOR_EVENT_PROPERTY_CHANGED !== undefined) view.setBigUint64(24, data.SENSOR_EVENT_PROPERTY_CHANGED === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_PROPERTY_CHANGED)), true);
  // 0x20: pointer
  if (data?.SENSOR_EVENT_ACCELEROMETER_SHAKE !== undefined) view.setBigUint64(32, data.SENSOR_EVENT_ACCELEROMETER_SHAKE === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_ACCELEROMETER_SHAKE)), true);
  // 0x28: pointer
  if (data?.SENSOR_EVENT_PARAMETER_COMMON_GUID !== undefined) view.setBigUint64(40, data.SENSOR_EVENT_PARAMETER_COMMON_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_PARAMETER_COMMON_GUID)), true);
  // 0x30: pointer
  if (data?.SENSOR_EVENT_PARAMETER_EVENT_ID !== undefined) view.setBigUint64(48, data.SENSOR_EVENT_PARAMETER_EVENT_ID === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_PARAMETER_EVENT_ID)), true);
  // 0x38: pointer
  if (data?.SENSOR_EVENT_PARAMETER_STATE !== undefined) view.setBigUint64(56, data.SENSOR_EVENT_PARAMETER_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_EVENT_PARAMETER_STATE)), true);
  // 0x40: pointer
  if (data?.SENSOR_ERROR_PARAMETER_COMMON_GUID !== undefined) view.setBigUint64(64, data.SENSOR_ERROR_PARAMETER_COMMON_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_ERROR_PARAMETER_COMMON_GUID)), true);
  // 0x48: pointer
  if (data?.SENSOR_PROPERTY_COMMON_GUID !== undefined) view.setBigUint64(72, data.SENSOR_PROPERTY_COMMON_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_COMMON_GUID)), true);
  // 0x50: pointer
  if (data?.SENSOR_PROPERTY_TYPE !== undefined) view.setBigUint64(80, data.SENSOR_PROPERTY_TYPE === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_TYPE)), true);
  // 0x58: pointer
  if (data?.SENSOR_PROPERTY_STATE !== undefined) view.setBigUint64(88, data.SENSOR_PROPERTY_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_STATE)), true);
  // 0x60: pointer
  if (data?.SENSOR_PROPERTY_PERSISTENT_UNIQUE_ID !== undefined) view.setBigUint64(96, data.SENSOR_PROPERTY_PERSISTENT_UNIQUE_ID === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_PERSISTENT_UNIQUE_ID)), true);
  // 0x68: pointer
  if (data?.SENSOR_PROPERTY_MANUFACTURER !== undefined) view.setBigUint64(104, data.SENSOR_PROPERTY_MANUFACTURER === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_MANUFACTURER)), true);
  // 0x70: pointer
  if (data?.SENSOR_PROPERTY_MODEL !== undefined) view.setBigUint64(112, data.SENSOR_PROPERTY_MODEL === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_MODEL)), true);
  // 0x78: pointer
  if (data?.SENSOR_PROPERTY_SERIAL_NUMBER !== undefined) view.setBigUint64(120, data.SENSOR_PROPERTY_SERIAL_NUMBER === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_SERIAL_NUMBER)), true);
  // 0x80: pointer
  if (data?.SENSOR_PROPERTY_FRIENDLY_NAME !== undefined) view.setBigUint64(128, data.SENSOR_PROPERTY_FRIENDLY_NAME === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_FRIENDLY_NAME)), true);
  // 0x88: pointer
  if (data?.SENSOR_PROPERTY_DESCRIPTION !== undefined) view.setBigUint64(136, data.SENSOR_PROPERTY_DESCRIPTION === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_DESCRIPTION)), true);
  // 0x90: pointer
  if (data?.SENSOR_PROPERTY_CONNECTION_TYPE !== undefined) view.setBigUint64(144, data.SENSOR_PROPERTY_CONNECTION_TYPE === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_CONNECTION_TYPE)), true);
  // 0x98: pointer
  if (data?.SENSOR_PROPERTY_MIN_REPORT_INTERVAL !== undefined) view.setBigUint64(152, data.SENSOR_PROPERTY_MIN_REPORT_INTERVAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_MIN_REPORT_INTERVAL)), true);
  // 0xa0: pointer
  if (data?.SENSOR_PROPERTY_CURRENT_REPORT_INTERVAL !== undefined) view.setBigUint64(160, data.SENSOR_PROPERTY_CURRENT_REPORT_INTERVAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_CURRENT_REPORT_INTERVAL)), true);
  // 0xa8: pointer
  if (data?.SENSOR_PROPERTY_CHANGE_SENSITIVITY !== undefined) view.setBigUint64(168, data.SENSOR_PROPERTY_CHANGE_SENSITIVITY === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_CHANGE_SENSITIVITY)), true);
  // 0xb0: pointer
  if (data?.SENSOR_PROPERTY_DEVICE_PATH !== undefined) view.setBigUint64(176, data.SENSOR_PROPERTY_DEVICE_PATH === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_DEVICE_PATH)), true);
  // 0xb8: pointer
  if (data?.SENSOR_PROPERTY_LIGHT_RESPONSE_CURVE !== undefined) view.setBigUint64(184, data.SENSOR_PROPERTY_LIGHT_RESPONSE_CURVE === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_LIGHT_RESPONSE_CURVE)), true);
  // 0xc0: pointer
  if (data?.SENSOR_PROPERTY_ACCURACY !== undefined) view.setBigUint64(192, data.SENSOR_PROPERTY_ACCURACY === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_ACCURACY)), true);
  // 0xc8: pointer
  if (data?.SENSOR_PROPERTY_RESOLUTION !== undefined) view.setBigUint64(200, data.SENSOR_PROPERTY_RESOLUTION === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_RESOLUTION)), true);
  // 0xd0: pointer
  if (data?.SENSOR_PROPERTY_LOCATION_DESIRED_ACCURACY !== undefined) view.setBigUint64(208, data.SENSOR_PROPERTY_LOCATION_DESIRED_ACCURACY === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_LOCATION_DESIRED_ACCURACY)), true);
  // 0xd8: pointer
  if (data?.SENSOR_PROPERTY_RANGE_MINIMUM !== undefined) view.setBigUint64(216, data.SENSOR_PROPERTY_RANGE_MINIMUM === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_RANGE_MINIMUM)), true);
  // 0xe0: pointer
  if (data?.SENSOR_PROPERTY_RANGE_MAXIMUM !== undefined) view.setBigUint64(224, data.SENSOR_PROPERTY_RANGE_MAXIMUM === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_RANGE_MAXIMUM)), true);
  // 0xe8: pointer
  if (data?.SENSOR_PROPERTY_HID_USAGE !== undefined) view.setBigUint64(232, data.SENSOR_PROPERTY_HID_USAGE === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_HID_USAGE)), true);
  // 0xf0: pointer
  if (data?.SENSOR_PROPERTY_RADIO_STATE !== undefined) view.setBigUint64(240, data.SENSOR_PROPERTY_RADIO_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_RADIO_STATE)), true);
  // 0xf8: pointer
  if (data?.SENSOR_PROPERTY_RADIO_STATE_PREVIOUS !== undefined) view.setBigUint64(248, data.SENSOR_PROPERTY_RADIO_STATE_PREVIOUS === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_RADIO_STATE_PREVIOUS)), true);
  // 0x100: pointer
  if (data?.SENSOR_CATEGORY_ALL !== undefined) view.setBigUint64(256, data.SENSOR_CATEGORY_ALL === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_ALL)), true);
  // 0x108: pointer
  if (data?.SENSOR_CATEGORY_LOCATION !== undefined) view.setBigUint64(264, data.SENSOR_CATEGORY_LOCATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_LOCATION)), true);
  // 0x110: pointer
  if (data?.SENSOR_CATEGORY_ENVIRONMENTAL !== undefined) view.setBigUint64(272, data.SENSOR_CATEGORY_ENVIRONMENTAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_ENVIRONMENTAL)), true);
  // 0x118: pointer
  if (data?.SENSOR_CATEGORY_MOTION !== undefined) view.setBigUint64(280, data.SENSOR_CATEGORY_MOTION === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_MOTION)), true);
  // 0x120: pointer
  if (data?.SENSOR_CATEGORY_ORIENTATION !== undefined) view.setBigUint64(288, data.SENSOR_CATEGORY_ORIENTATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_ORIENTATION)), true);
  // 0x128: pointer
  if (data?.SENSOR_CATEGORY_MECHANICAL !== undefined) view.setBigUint64(296, data.SENSOR_CATEGORY_MECHANICAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_MECHANICAL)), true);
  // 0x130: pointer
  if (data?.SENSOR_CATEGORY_ELECTRICAL !== undefined) view.setBigUint64(304, data.SENSOR_CATEGORY_ELECTRICAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_ELECTRICAL)), true);
  // 0x138: pointer
  if (data?.SENSOR_CATEGORY_BIOMETRIC !== undefined) view.setBigUint64(312, data.SENSOR_CATEGORY_BIOMETRIC === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_BIOMETRIC)), true);
  // 0x140: pointer
  if (data?.SENSOR_CATEGORY_LIGHT !== undefined) view.setBigUint64(320, data.SENSOR_CATEGORY_LIGHT === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_LIGHT)), true);
  // 0x148: pointer
  if (data?.SENSOR_CATEGORY_SCANNER !== undefined) view.setBigUint64(328, data.SENSOR_CATEGORY_SCANNER === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_SCANNER)), true);
  // 0x150: pointer
  if (data?.SENSOR_CATEGORY_OTHER !== undefined) view.setBigUint64(336, data.SENSOR_CATEGORY_OTHER === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_OTHER)), true);
  // 0x158: pointer
  if (data?.SENSOR_CATEGORY_UNSUPPORTED !== undefined) view.setBigUint64(344, data.SENSOR_CATEGORY_UNSUPPORTED === null ? 0n : BigInt(util.toPointer(data.SENSOR_CATEGORY_UNSUPPORTED)), true);
  // 0x160: pointer
  if (data?.SENSOR_TYPE_LOCATION_GPS !== undefined) view.setBigUint64(352, data.SENSOR_TYPE_LOCATION_GPS === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_GPS)), true);
  // 0x168: pointer
  if (data?.SENSOR_TYPE_LOCATION_STATIC !== undefined) view.setBigUint64(360, data.SENSOR_TYPE_LOCATION_STATIC === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_STATIC)), true);
  // 0x170: pointer
  if (data?.SENSOR_TYPE_LOCATION_LOOKUP !== undefined) view.setBigUint64(368, data.SENSOR_TYPE_LOCATION_LOOKUP === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_LOOKUP)), true);
  // 0x178: pointer
  if (data?.SENSOR_TYPE_LOCATION_TRIANGULATION !== undefined) view.setBigUint64(376, data.SENSOR_TYPE_LOCATION_TRIANGULATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_TRIANGULATION)), true);
  // 0x180: pointer
  if (data?.SENSOR_TYPE_LOCATION_OTHER !== undefined) view.setBigUint64(384, data.SENSOR_TYPE_LOCATION_OTHER === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_OTHER)), true);
  // 0x188: pointer
  if (data?.SENSOR_TYPE_LOCATION_BROADCAST !== undefined) view.setBigUint64(392, data.SENSOR_TYPE_LOCATION_BROADCAST === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_BROADCAST)), true);
  // 0x190: pointer
  if (data?.SENSOR_TYPE_LOCATION_DEAD_RECKONING !== undefined) view.setBigUint64(400, data.SENSOR_TYPE_LOCATION_DEAD_RECKONING === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_LOCATION_DEAD_RECKONING)), true);
  // 0x198: pointer
  if (data?.SENSOR_TYPE_ENVIRONMENTAL_TEMPERATURE !== undefined) view.setBigUint64(408, data.SENSOR_TYPE_ENVIRONMENTAL_TEMPERATURE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ENVIRONMENTAL_TEMPERATURE)), true);
  // 0x1a0: pointer
  if (data?.SENSOR_TYPE_ENVIRONMENTAL_ATMOSPHERIC_PRESSURE !== undefined) view.setBigUint64(416, data.SENSOR_TYPE_ENVIRONMENTAL_ATMOSPHERIC_PRESSURE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ENVIRONMENTAL_ATMOSPHERIC_PRESSURE)), true);
  // 0x1a8: pointer
  if (data?.SENSOR_TYPE_ENVIRONMENTAL_HUMIDITY !== undefined) view.setBigUint64(424, data.SENSOR_TYPE_ENVIRONMENTAL_HUMIDITY === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ENVIRONMENTAL_HUMIDITY)), true);
  // 0x1b0: pointer
  if (data?.SENSOR_TYPE_ENVIRONMENTAL_WIND_SPEED !== undefined) view.setBigUint64(432, data.SENSOR_TYPE_ENVIRONMENTAL_WIND_SPEED === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ENVIRONMENTAL_WIND_SPEED)), true);
  // 0x1b8: pointer
  if (data?.SENSOR_TYPE_ENVIRONMENTAL_WIND_DIRECTION !== undefined) view.setBigUint64(440, data.SENSOR_TYPE_ENVIRONMENTAL_WIND_DIRECTION === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ENVIRONMENTAL_WIND_DIRECTION)), true);
  // 0x1c0: pointer
  if (data?.SENSOR_TYPE_ACCELEROMETER_1D !== undefined) view.setBigUint64(448, data.SENSOR_TYPE_ACCELEROMETER_1D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ACCELEROMETER_1D)), true);
  // 0x1c8: pointer
  if (data?.SENSOR_TYPE_ACCELEROMETER_2D !== undefined) view.setBigUint64(456, data.SENSOR_TYPE_ACCELEROMETER_2D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ACCELEROMETER_2D)), true);
  // 0x1d0: pointer
  if (data?.SENSOR_TYPE_ACCELEROMETER_3D !== undefined) view.setBigUint64(464, data.SENSOR_TYPE_ACCELEROMETER_3D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ACCELEROMETER_3D)), true);
  // 0x1d8: pointer
  if (data?.SENSOR_TYPE_MOTION_DETECTOR !== undefined) view.setBigUint64(472, data.SENSOR_TYPE_MOTION_DETECTOR === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_MOTION_DETECTOR)), true);
  // 0x1e0: pointer
  if (data?.SENSOR_TYPE_GYROMETER_1D !== undefined) view.setBigUint64(480, data.SENSOR_TYPE_GYROMETER_1D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_GYROMETER_1D)), true);
  // 0x1e8: pointer
  if (data?.SENSOR_TYPE_GYROMETER_2D !== undefined) view.setBigUint64(488, data.SENSOR_TYPE_GYROMETER_2D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_GYROMETER_2D)), true);
  // 0x1f0: pointer
  if (data?.SENSOR_TYPE_GYROMETER_3D !== undefined) view.setBigUint64(496, data.SENSOR_TYPE_GYROMETER_3D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_GYROMETER_3D)), true);
  // 0x1f8: pointer
  if (data?.SENSOR_TYPE_SPEEDOMETER !== undefined) view.setBigUint64(504, data.SENSOR_TYPE_SPEEDOMETER === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_SPEEDOMETER)), true);
  // 0x200: pointer
  if (data?.SENSOR_TYPE_COMPASS_1D !== undefined) view.setBigUint64(512, data.SENSOR_TYPE_COMPASS_1D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_COMPASS_1D)), true);
  // 0x208: pointer
  if (data?.SENSOR_TYPE_COMPASS_2D !== undefined) view.setBigUint64(520, data.SENSOR_TYPE_COMPASS_2D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_COMPASS_2D)), true);
  // 0x210: pointer
  if (data?.SENSOR_TYPE_COMPASS_3D !== undefined) view.setBigUint64(528, data.SENSOR_TYPE_COMPASS_3D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_COMPASS_3D)), true);
  // 0x218: pointer
  if (data?.SENSOR_TYPE_INCLINOMETER_1D !== undefined) view.setBigUint64(536, data.SENSOR_TYPE_INCLINOMETER_1D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_INCLINOMETER_1D)), true);
  // 0x220: pointer
  if (data?.SENSOR_TYPE_INCLINOMETER_2D !== undefined) view.setBigUint64(544, data.SENSOR_TYPE_INCLINOMETER_2D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_INCLINOMETER_2D)), true);
  // 0x228: pointer
  if (data?.SENSOR_TYPE_INCLINOMETER_3D !== undefined) view.setBigUint64(552, data.SENSOR_TYPE_INCLINOMETER_3D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_INCLINOMETER_3D)), true);
  // 0x230: pointer
  if (data?.SENSOR_TYPE_DISTANCE_1D !== undefined) view.setBigUint64(560, data.SENSOR_TYPE_DISTANCE_1D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_DISTANCE_1D)), true);
  // 0x238: pointer
  if (data?.SENSOR_TYPE_DISTANCE_2D !== undefined) view.setBigUint64(568, data.SENSOR_TYPE_DISTANCE_2D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_DISTANCE_2D)), true);
  // 0x240: pointer
  if (data?.SENSOR_TYPE_DISTANCE_3D !== undefined) view.setBigUint64(576, data.SENSOR_TYPE_DISTANCE_3D === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_DISTANCE_3D)), true);
  // 0x248: pointer
  if (data?.SENSOR_TYPE_AGGREGATED_QUADRANT_ORIENTATION !== undefined) view.setBigUint64(584, data.SENSOR_TYPE_AGGREGATED_QUADRANT_ORIENTATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_AGGREGATED_QUADRANT_ORIENTATION)), true);
  // 0x250: pointer
  if (data?.SENSOR_TYPE_AGGREGATED_DEVICE_ORIENTATION !== undefined) view.setBigUint64(592, data.SENSOR_TYPE_AGGREGATED_DEVICE_ORIENTATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_AGGREGATED_DEVICE_ORIENTATION)), true);
  // 0x258: pointer
  if (data?.SENSOR_TYPE_AGGREGATED_SIMPLE_DEVICE_ORIENTATION !== undefined) view.setBigUint64(600, data.SENSOR_TYPE_AGGREGATED_SIMPLE_DEVICE_ORIENTATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_AGGREGATED_SIMPLE_DEVICE_ORIENTATION)), true);
  // 0x260: pointer
  if (data?.SENSOR_TYPE_VOLTAGE !== undefined) view.setBigUint64(608, data.SENSOR_TYPE_VOLTAGE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_VOLTAGE)), true);
  // 0x268: pointer
  if (data?.SENSOR_TYPE_CURRENT !== undefined) view.setBigUint64(616, data.SENSOR_TYPE_CURRENT === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_CURRENT)), true);
  // 0x270: pointer
  if (data?.SENSOR_TYPE_CAPACITANCE !== undefined) view.setBigUint64(624, data.SENSOR_TYPE_CAPACITANCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_CAPACITANCE)), true);
  // 0x278: pointer
  if (data?.SENSOR_TYPE_RESISTANCE !== undefined) view.setBigUint64(632, data.SENSOR_TYPE_RESISTANCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_RESISTANCE)), true);
  // 0x280: pointer
  if (data?.SENSOR_TYPE_INDUCTANCE !== undefined) view.setBigUint64(640, data.SENSOR_TYPE_INDUCTANCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_INDUCTANCE)), true);
  // 0x288: pointer
  if (data?.SENSOR_TYPE_ELECTRICAL_POWER !== undefined) view.setBigUint64(648, data.SENSOR_TYPE_ELECTRICAL_POWER === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_ELECTRICAL_POWER)), true);
  // 0x290: pointer
  if (data?.SENSOR_TYPE_POTENTIOMETER !== undefined) view.setBigUint64(656, data.SENSOR_TYPE_POTENTIOMETER === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_POTENTIOMETER)), true);
  // 0x298: pointer
  if (data?.SENSOR_TYPE_FREQUENCY !== undefined) view.setBigUint64(664, data.SENSOR_TYPE_FREQUENCY === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_FREQUENCY)), true);
  // 0x2a0: pointer
  if (data?.SENSOR_TYPE_BOOLEAN_SWITCH !== undefined) view.setBigUint64(672, data.SENSOR_TYPE_BOOLEAN_SWITCH === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_BOOLEAN_SWITCH)), true);
  // 0x2a8: pointer
  if (data?.SENSOR_TYPE_MULTIVALUE_SWITCH !== undefined) view.setBigUint64(680, data.SENSOR_TYPE_MULTIVALUE_SWITCH === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_MULTIVALUE_SWITCH)), true);
  // 0x2b0: pointer
  if (data?.SENSOR_TYPE_FORCE !== undefined) view.setBigUint64(688, data.SENSOR_TYPE_FORCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_FORCE)), true);
  // 0x2b8: pointer
  if (data?.SENSOR_TYPE_SCALE !== undefined) view.setBigUint64(696, data.SENSOR_TYPE_SCALE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_SCALE)), true);
  // 0x2c0: pointer
  if (data?.SENSOR_TYPE_PRESSURE !== undefined) view.setBigUint64(704, data.SENSOR_TYPE_PRESSURE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_PRESSURE)), true);
  // 0x2c8: pointer
  if (data?.SENSOR_TYPE_STRAIN !== undefined) view.setBigUint64(712, data.SENSOR_TYPE_STRAIN === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_STRAIN)), true);
  // 0x2d0: pointer
  if (data?.SENSOR_TYPE_BOOLEAN_SWITCH_ARRAY !== undefined) view.setBigUint64(720, data.SENSOR_TYPE_BOOLEAN_SWITCH_ARRAY === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_BOOLEAN_SWITCH_ARRAY)), true);
  // 0x2d8: pointer
  if (data?.SENSOR_TYPE_HUMAN_PRESENCE !== undefined) view.setBigUint64(728, data.SENSOR_TYPE_HUMAN_PRESENCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_HUMAN_PRESENCE)), true);
  // 0x2e0: pointer
  if (data?.SENSOR_TYPE_HUMAN_PROXIMITY !== undefined) view.setBigUint64(736, data.SENSOR_TYPE_HUMAN_PROXIMITY === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_HUMAN_PROXIMITY)), true);
  // 0x2e8: pointer
  if (data?.SENSOR_TYPE_TOUCH !== undefined) view.setBigUint64(744, data.SENSOR_TYPE_TOUCH === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_TOUCH)), true);
  // 0x2f0: pointer
  if (data?.SENSOR_TYPE_AMBIENT_LIGHT !== undefined) view.setBigUint64(752, data.SENSOR_TYPE_AMBIENT_LIGHT === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_AMBIENT_LIGHT)), true);
  // 0x2f8: pointer
  if (data?.SENSOR_TYPE_RFID_SCANNER !== undefined) view.setBigUint64(760, data.SENSOR_TYPE_RFID_SCANNER === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_RFID_SCANNER)), true);
  // 0x300: pointer
  if (data?.SENSOR_TYPE_BARCODE_SCANNER !== undefined) view.setBigUint64(768, data.SENSOR_TYPE_BARCODE_SCANNER === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_BARCODE_SCANNER)), true);
  // 0x308: pointer
  if (data?.SENSOR_TYPE_CUSTOM !== undefined) view.setBigUint64(776, data.SENSOR_TYPE_CUSTOM === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_CUSTOM)), true);
  // 0x310: pointer
  if (data?.SENSOR_TYPE_UNKNOWN !== undefined) view.setBigUint64(784, data.SENSOR_TYPE_UNKNOWN === null ? 0n : BigInt(util.toPointer(data.SENSOR_TYPE_UNKNOWN)), true);
  // 0x318: pointer
  if (data?.SENSOR_DATA_TYPE_COMMON_GUID !== undefined) view.setBigUint64(792, data.SENSOR_DATA_TYPE_COMMON_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_COMMON_GUID)), true);
  // 0x320: pointer
  if (data?.SENSOR_DATA_TYPE_TIMESTAMP !== undefined) view.setBigUint64(800, data.SENSOR_DATA_TYPE_TIMESTAMP === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TIMESTAMP)), true);
  // 0x328: pointer
  if (data?.SENSOR_DATA_TYPE_LOCATION_GUID !== undefined) view.setBigUint64(808, data.SENSOR_DATA_TYPE_LOCATION_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LOCATION_GUID)), true);
  // 0x330: pointer
  if (data?.SENSOR_DATA_TYPE_LATITUDE_DEGREES !== undefined) view.setBigUint64(816, data.SENSOR_DATA_TYPE_LATITUDE_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LATITUDE_DEGREES)), true);
  // 0x338: pointer
  if (data?.SENSOR_DATA_TYPE_LONGITUDE_DEGREES !== undefined) view.setBigUint64(824, data.SENSOR_DATA_TYPE_LONGITUDE_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LONGITUDE_DEGREES)), true);
  // 0x340: pointer
  if (data?.SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_METERS !== undefined) view.setBigUint64(832, data.SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_METERS)), true);
  // 0x348: pointer
  if (data?.SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_METERS !== undefined) view.setBigUint64(840, data.SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_METERS)), true);
  // 0x350: pointer
  if (data?.SENSOR_DATA_TYPE_SPEED_KNOTS !== undefined) view.setBigUint64(848, data.SENSOR_DATA_TYPE_SPEED_KNOTS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SPEED_KNOTS)), true);
  // 0x358: pointer
  if (data?.SENSOR_DATA_TYPE_TRUE_HEADING_DEGREES !== undefined) view.setBigUint64(856, data.SENSOR_DATA_TYPE_TRUE_HEADING_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TRUE_HEADING_DEGREES)), true);
  // 0x360: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_DEGREES !== undefined) view.setBigUint64(864, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_DEGREES)), true);
  // 0x368: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_VARIATION !== undefined) view.setBigUint64(872, data.SENSOR_DATA_TYPE_MAGNETIC_VARIATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_VARIATION)), true);
  // 0x370: pointer
  if (data?.SENSOR_DATA_TYPE_FIX_QUALITY !== undefined) view.setBigUint64(880, data.SENSOR_DATA_TYPE_FIX_QUALITY === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_FIX_QUALITY)), true);
  // 0x378: pointer
  if (data?.SENSOR_DATA_TYPE_FIX_TYPE !== undefined) view.setBigUint64(888, data.SENSOR_DATA_TYPE_FIX_TYPE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_FIX_TYPE)), true);
  // 0x380: pointer
  if (data?.SENSOR_DATA_TYPE_POSITION_DILUTION_OF_PRECISION !== undefined) view.setBigUint64(896, data.SENSOR_DATA_TYPE_POSITION_DILUTION_OF_PRECISION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_POSITION_DILUTION_OF_PRECISION)), true);
  // 0x388: pointer
  if (data?.SENSOR_DATA_TYPE_HORIZONAL_DILUTION_OF_PRECISION !== undefined) view.setBigUint64(904, data.SENSOR_DATA_TYPE_HORIZONAL_DILUTION_OF_PRECISION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_HORIZONAL_DILUTION_OF_PRECISION)), true);
  // 0x390: pointer
  if (data?.SENSOR_DATA_TYPE_VERTICAL_DILUTION_OF_PRECISION !== undefined) view.setBigUint64(912, data.SENSOR_DATA_TYPE_VERTICAL_DILUTION_OF_PRECISION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_VERTICAL_DILUTION_OF_PRECISION)), true);
  // 0x398: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_USED_COUNT !== undefined) view.setBigUint64(920, data.SENSOR_DATA_TYPE_SATELLITES_USED_COUNT === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_USED_COUNT)), true);
  // 0x3a0: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_USED_PRNS !== undefined) view.setBigUint64(928, data.SENSOR_DATA_TYPE_SATELLITES_USED_PRNS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_USED_PRNS)), true);
  // 0x3a8: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW !== undefined) view.setBigUint64(936, data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW)), true);
  // 0x3b0: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_PRNS !== undefined) view.setBigUint64(944, data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_PRNS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_PRNS)), true);
  // 0x3b8: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ELEVATION !== undefined) view.setBigUint64(952, data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ELEVATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ELEVATION)), true);
  // 0x3c0: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_AZIMUTH !== undefined) view.setBigUint64(960, data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_AZIMUTH === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_AZIMUTH)), true);
  // 0x3c8: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_STN_RATIO !== undefined) view.setBigUint64(968, data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_STN_RATIO === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_STN_RATIO)), true);
  // 0x3d0: pointer
  if (data?.SENSOR_DATA_TYPE_ERROR_RADIUS_METERS !== undefined) view.setBigUint64(976, data.SENSOR_DATA_TYPE_ERROR_RADIUS_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ERROR_RADIUS_METERS)), true);
  // 0x3d8: pointer
  if (data?.SENSOR_DATA_TYPE_ADDRESS1 !== undefined) view.setBigUint64(984, data.SENSOR_DATA_TYPE_ADDRESS1 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ADDRESS1)), true);
  // 0x3e0: pointer
  if (data?.SENSOR_DATA_TYPE_ADDRESS2 !== undefined) view.setBigUint64(992, data.SENSOR_DATA_TYPE_ADDRESS2 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ADDRESS2)), true);
  // 0x3e8: pointer
  if (data?.SENSOR_DATA_TYPE_CITY !== undefined) view.setBigUint64(1000, data.SENSOR_DATA_TYPE_CITY === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CITY)), true);
  // 0x3f0: pointer
  if (data?.SENSOR_DATA_TYPE_STATE_PROVINCE !== undefined) view.setBigUint64(1008, data.SENSOR_DATA_TYPE_STATE_PROVINCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_STATE_PROVINCE)), true);
  // 0x3f8: pointer
  if (data?.SENSOR_DATA_TYPE_POSTALCODE !== undefined) view.setBigUint64(1016, data.SENSOR_DATA_TYPE_POSTALCODE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_POSTALCODE)), true);
  // 0x400: pointer
  if (data?.SENSOR_DATA_TYPE_COUNTRY_REGION !== undefined) view.setBigUint64(1024, data.SENSOR_DATA_TYPE_COUNTRY_REGION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_COUNTRY_REGION)), true);
  // 0x408: pointer
  if (data?.SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_ERROR_METERS !== undefined) view.setBigUint64(1032, data.SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_ERROR_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ALTITUDE_ELLIPSOID_ERROR_METERS)), true);
  // 0x410: pointer
  if (data?.SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_ERROR_METERS !== undefined) view.setBigUint64(1040, data.SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_ERROR_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ALTITUDE_SEALEVEL_ERROR_METERS)), true);
  // 0x418: pointer
  if (data?.SENSOR_DATA_TYPE_GPS_SELECTION_MODE !== undefined) view.setBigUint64(1048, data.SENSOR_DATA_TYPE_GPS_SELECTION_MODE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_GPS_SELECTION_MODE)), true);
  // 0x420: pointer
  if (data?.SENSOR_DATA_TYPE_GPS_OPERATION_MODE !== undefined) view.setBigUint64(1056, data.SENSOR_DATA_TYPE_GPS_OPERATION_MODE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_GPS_OPERATION_MODE)), true);
  // 0x428: pointer
  if (data?.SENSOR_DATA_TYPE_GPS_STATUS !== undefined) view.setBigUint64(1064, data.SENSOR_DATA_TYPE_GPS_STATUS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_GPS_STATUS)), true);
  // 0x430: pointer
  if (data?.SENSOR_DATA_TYPE_GEOIDAL_SEPARATION !== undefined) view.setBigUint64(1072, data.SENSOR_DATA_TYPE_GEOIDAL_SEPARATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_GEOIDAL_SEPARATION)), true);
  // 0x438: pointer
  if (data?.SENSOR_DATA_TYPE_DGPS_DATA_AGE !== undefined) view.setBigUint64(1080, data.SENSOR_DATA_TYPE_DGPS_DATA_AGE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_DGPS_DATA_AGE)), true);
  // 0x440: pointer
  if (data?.SENSOR_DATA_TYPE_ALTITUDE_ANTENNA_SEALEVEL_METERS !== undefined) view.setBigUint64(1088, data.SENSOR_DATA_TYPE_ALTITUDE_ANTENNA_SEALEVEL_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ALTITUDE_ANTENNA_SEALEVEL_METERS)), true);
  // 0x448: pointer
  if (data?.SENSOR_DATA_TYPE_DIFFERENTIAL_REFERENCE_STATION_ID !== undefined) view.setBigUint64(1096, data.SENSOR_DATA_TYPE_DIFFERENTIAL_REFERENCE_STATION_ID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_DIFFERENTIAL_REFERENCE_STATION_ID)), true);
  // 0x450: pointer
  if (data?.SENSOR_DATA_TYPE_NMEA_SENTENCE !== undefined) view.setBigUint64(1104, data.SENSOR_DATA_TYPE_NMEA_SENTENCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_NMEA_SENTENCE)), true);
  // 0x458: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ID !== undefined) view.setBigUint64(1112, data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_IN_VIEW_ID)), true);
  // 0x460: pointer
  if (data?.SENSOR_DATA_TYPE_LOCATION_SOURCE !== undefined) view.setBigUint64(1120, data.SENSOR_DATA_TYPE_LOCATION_SOURCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LOCATION_SOURCE)), true);
  // 0x468: pointer
  if (data?.SENSOR_DATA_TYPE_SATELLITES_USED_PRNS_AND_CONSTELLATIONS !== undefined) view.setBigUint64(1128, data.SENSOR_DATA_TYPE_SATELLITES_USED_PRNS_AND_CONSTELLATIONS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SATELLITES_USED_PRNS_AND_CONSTELLATIONS)), true);
  // 0x470: pointer
  if (data?.SENSOR_DATA_TYPE_ENVIRONMENTAL_GUID !== undefined) view.setBigUint64(1136, data.SENSOR_DATA_TYPE_ENVIRONMENTAL_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ENVIRONMENTAL_GUID)), true);
  // 0x478: pointer
  if (data?.SENSOR_DATA_TYPE_TEMPERATURE_CELSIUS !== undefined) view.setBigUint64(1144, data.SENSOR_DATA_TYPE_TEMPERATURE_CELSIUS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TEMPERATURE_CELSIUS)), true);
  // 0x480: pointer
  if (data?.SENSOR_DATA_TYPE_RELATIVE_HUMIDITY_PERCENT !== undefined) view.setBigUint64(1152, data.SENSOR_DATA_TYPE_RELATIVE_HUMIDITY_PERCENT === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_RELATIVE_HUMIDITY_PERCENT)), true);
  // 0x488: pointer
  if (data?.SENSOR_DATA_TYPE_ATMOSPHERIC_PRESSURE_BAR !== undefined) view.setBigUint64(1160, data.SENSOR_DATA_TYPE_ATMOSPHERIC_PRESSURE_BAR === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ATMOSPHERIC_PRESSURE_BAR)), true);
  // 0x490: pointer
  if (data?.SENSOR_DATA_TYPE_WIND_DIRECTION_DEGREES_ANTICLOCKWISE !== undefined) view.setBigUint64(1168, data.SENSOR_DATA_TYPE_WIND_DIRECTION_DEGREES_ANTICLOCKWISE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_WIND_DIRECTION_DEGREES_ANTICLOCKWISE)), true);
  // 0x498: pointer
  if (data?.SENSOR_DATA_TYPE_WIND_SPEED_METERS_PER_SECOND !== undefined) view.setBigUint64(1176, data.SENSOR_DATA_TYPE_WIND_SPEED_METERS_PER_SECOND === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_WIND_SPEED_METERS_PER_SECOND)), true);
  // 0x4a0: pointer
  if (data?.SENSOR_DATA_TYPE_MOTION_GUID !== undefined) view.setBigUint64(1184, data.SENSOR_DATA_TYPE_MOTION_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MOTION_GUID)), true);
  // 0x4a8: pointer
  if (data?.SENSOR_DATA_TYPE_ACCELERATION_X_G !== undefined) view.setBigUint64(1192, data.SENSOR_DATA_TYPE_ACCELERATION_X_G === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ACCELERATION_X_G)), true);
  // 0x4b0: pointer
  if (data?.SENSOR_DATA_TYPE_ACCELERATION_Y_G !== undefined) view.setBigUint64(1200, data.SENSOR_DATA_TYPE_ACCELERATION_Y_G === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ACCELERATION_Y_G)), true);
  // 0x4b8: pointer
  if (data?.SENSOR_DATA_TYPE_ACCELERATION_Z_G !== undefined) view.setBigUint64(1208, data.SENSOR_DATA_TYPE_ACCELERATION_Z_G === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ACCELERATION_Z_G)), true);
  // 0x4c0: pointer
  if (data?.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_X_DEGREES_PER_SECOND_SQUARED !== undefined) view.setBigUint64(1216, data.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_X_DEGREES_PER_SECOND_SQUARED === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_X_DEGREES_PER_SECOND_SQUARED)), true);
  // 0x4c8: pointer
  if (data?.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Y_DEGREES_PER_SECOND_SQUARED !== undefined) view.setBigUint64(1224, data.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Y_DEGREES_PER_SECOND_SQUARED === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Y_DEGREES_PER_SECOND_SQUARED)), true);
  // 0x4d0: pointer
  if (data?.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Z_DEGREES_PER_SECOND_SQUARED !== undefined) view.setBigUint64(1232, data.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Z_DEGREES_PER_SECOND_SQUARED === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ANGULAR_ACCELERATION_Z_DEGREES_PER_SECOND_SQUARED)), true);
  // 0x4d8: pointer
  if (data?.SENSOR_DATA_TYPE_SPEED_METERS_PER_SECOND !== undefined) view.setBigUint64(1240, data.SENSOR_DATA_TYPE_SPEED_METERS_PER_SECOND === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SPEED_METERS_PER_SECOND)), true);
  // 0x4e0: pointer
  if (data?.SENSOR_DATA_TYPE_MOTION_STATE !== undefined) view.setBigUint64(1248, data.SENSOR_DATA_TYPE_MOTION_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MOTION_STATE)), true);
  // 0x4e8: pointer
  if (data?.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_X_DEGREES_PER_SECOND !== undefined) view.setBigUint64(1256, data.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_X_DEGREES_PER_SECOND === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_X_DEGREES_PER_SECOND)), true);
  // 0x4f0: pointer
  if (data?.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Y_DEGREES_PER_SECOND !== undefined) view.setBigUint64(1264, data.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Y_DEGREES_PER_SECOND === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Y_DEGREES_PER_SECOND)), true);
  // 0x4f8: pointer
  if (data?.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Z_DEGREES_PER_SECOND !== undefined) view.setBigUint64(1272, data.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Z_DEGREES_PER_SECOND === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ANGULAR_VELOCITY_Z_DEGREES_PER_SECOND)), true);
  // 0x500: pointer
  if (data?.SENSOR_DATA_TYPE_ORIENTATION_GUID !== undefined) view.setBigUint64(1280, data.SENSOR_DATA_TYPE_ORIENTATION_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ORIENTATION_GUID)), true);
  // 0x508: pointer
  if (data?.SENSOR_DATA_TYPE_TILT_X_DEGREES !== undefined) view.setBigUint64(1288, data.SENSOR_DATA_TYPE_TILT_X_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TILT_X_DEGREES)), true);
  // 0x510: pointer
  if (data?.SENSOR_DATA_TYPE_TILT_Y_DEGREES !== undefined) view.setBigUint64(1296, data.SENSOR_DATA_TYPE_TILT_Y_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TILT_Y_DEGREES)), true);
  // 0x518: pointer
  if (data?.SENSOR_DATA_TYPE_TILT_Z_DEGREES !== undefined) view.setBigUint64(1304, data.SENSOR_DATA_TYPE_TILT_Z_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TILT_Z_DEGREES)), true);
  // 0x520: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_X_DEGREES !== undefined) view.setBigUint64(1312, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_X_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_X_DEGREES)), true);
  // 0x528: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_Y_DEGREES !== undefined) view.setBigUint64(1320, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_Y_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_Y_DEGREES)), true);
  // 0x530: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_Z_DEGREES !== undefined) view.setBigUint64(1328, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_Z_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_Z_DEGREES)), true);
  // 0x538: pointer
  if (data?.SENSOR_DATA_TYPE_DISTANCE_X_METERS !== undefined) view.setBigUint64(1336, data.SENSOR_DATA_TYPE_DISTANCE_X_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_DISTANCE_X_METERS)), true);
  // 0x540: pointer
  if (data?.SENSOR_DATA_TYPE_DISTANCE_Y_METERS !== undefined) view.setBigUint64(1344, data.SENSOR_DATA_TYPE_DISTANCE_Y_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_DISTANCE_Y_METERS)), true);
  // 0x548: pointer
  if (data?.SENSOR_DATA_TYPE_DISTANCE_Z_METERS !== undefined) view.setBigUint64(1352, data.SENSOR_DATA_TYPE_DISTANCE_Z_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_DISTANCE_Z_METERS)), true);
  // 0x550: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_MAGNETIC_NORTH_DEGREES !== undefined) view.setBigUint64(1360, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_MAGNETIC_NORTH_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_MAGNETIC_NORTH_DEGREES)), true);
  // 0x558: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_TRUE_NORTH_DEGREES !== undefined) view.setBigUint64(1368, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_TRUE_NORTH_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_COMPENSATED_TRUE_NORTH_DEGREES)), true);
  // 0x560: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_MAGNETIC_NORTH_DEGREES !== undefined) view.setBigUint64(1376, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_MAGNETIC_NORTH_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_MAGNETIC_NORTH_DEGREES)), true);
  // 0x568: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_HEADING_TRUE_NORTH_DEGREES !== undefined) view.setBigUint64(1384, data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_TRUE_NORTH_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_HEADING_TRUE_NORTH_DEGREES)), true);
  // 0x570: pointer
  if (data?.SENSOR_DATA_TYPE_QUADRANT_ANGLE_DEGREES !== undefined) view.setBigUint64(1392, data.SENSOR_DATA_TYPE_QUADRANT_ANGLE_DEGREES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_QUADRANT_ANGLE_DEGREES)), true);
  // 0x578: pointer
  if (data?.SENSOR_DATA_TYPE_ROTATION_MATRIX !== undefined) view.setBigUint64(1400, data.SENSOR_DATA_TYPE_ROTATION_MATRIX === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ROTATION_MATRIX)), true);
  // 0x580: pointer
  if (data?.SENSOR_DATA_TYPE_QUATERNION !== undefined) view.setBigUint64(1408, data.SENSOR_DATA_TYPE_QUATERNION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_QUATERNION)), true);
  // 0x588: pointer
  if (data?.SENSOR_DATA_TYPE_SIMPLE_DEVICE_ORIENTATION !== undefined) view.setBigUint64(1416, data.SENSOR_DATA_TYPE_SIMPLE_DEVICE_ORIENTATION === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SIMPLE_DEVICE_ORIENTATION)), true);
  // 0x590: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_X_MILLIGAUSS !== undefined) view.setBigUint64(1424, data.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_X_MILLIGAUSS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_X_MILLIGAUSS)), true);
  // 0x598: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Y_MILLIGAUSS !== undefined) view.setBigUint64(1432, data.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Y_MILLIGAUSS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Y_MILLIGAUSS)), true);
  // 0x5a0: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Z_MILLIGAUSS !== undefined) view.setBigUint64(1440, data.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Z_MILLIGAUSS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETIC_FIELD_STRENGTH_Z_MILLIGAUSS)), true);
  // 0x5a8: pointer
  if (data?.SENSOR_DATA_TYPE_MAGNETOMETER_ACCURACY !== undefined) view.setBigUint64(1448, data.SENSOR_DATA_TYPE_MAGNETOMETER_ACCURACY === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MAGNETOMETER_ACCURACY)), true);
  // 0x5b0: pointer
  if (data?.SENSOR_DATA_TYPE_GUID_MECHANICAL_GUID !== undefined) view.setBigUint64(1456, data.SENSOR_DATA_TYPE_GUID_MECHANICAL_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_GUID_MECHANICAL_GUID)), true);
  // 0x5b8: pointer
  if (data?.SENSOR_DATA_TYPE_BOOLEAN_SWITCH_STATE !== undefined) view.setBigUint64(1464, data.SENSOR_DATA_TYPE_BOOLEAN_SWITCH_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_BOOLEAN_SWITCH_STATE)), true);
  // 0x5c0: pointer
  if (data?.SENSOR_DATA_TYPE_MULTIVALUE_SWITCH_STATE !== undefined) view.setBigUint64(1472, data.SENSOR_DATA_TYPE_MULTIVALUE_SWITCH_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_MULTIVALUE_SWITCH_STATE)), true);
  // 0x5c8: pointer
  if (data?.SENSOR_DATA_TYPE_FORCE_NEWTONS !== undefined) view.setBigUint64(1480, data.SENSOR_DATA_TYPE_FORCE_NEWTONS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_FORCE_NEWTONS)), true);
  // 0x5d0: pointer
  if (data?.SENSOR_DATA_TYPE_ABSOLUTE_PRESSURE_PASCAL !== undefined) view.setBigUint64(1488, data.SENSOR_DATA_TYPE_ABSOLUTE_PRESSURE_PASCAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ABSOLUTE_PRESSURE_PASCAL)), true);
  // 0x5d8: pointer
  if (data?.SENSOR_DATA_TYPE_GAUGE_PRESSURE_PASCAL !== undefined) view.setBigUint64(1496, data.SENSOR_DATA_TYPE_GAUGE_PRESSURE_PASCAL === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_GAUGE_PRESSURE_PASCAL)), true);
  // 0x5e0: pointer
  if (data?.SENSOR_DATA_TYPE_STRAIN !== undefined) view.setBigUint64(1504, data.SENSOR_DATA_TYPE_STRAIN === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_STRAIN)), true);
  // 0x5e8: pointer
  if (data?.SENSOR_DATA_TYPE_WEIGHT_KILOGRAMS !== undefined) view.setBigUint64(1512, data.SENSOR_DATA_TYPE_WEIGHT_KILOGRAMS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_WEIGHT_KILOGRAMS)), true);
  // 0x5f0: pointer
  if (data?.SENSOR_DATA_TYPE_BOOLEAN_SWITCH_ARRAY_STATES !== undefined) view.setBigUint64(1520, data.SENSOR_DATA_TYPE_BOOLEAN_SWITCH_ARRAY_STATES === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_BOOLEAN_SWITCH_ARRAY_STATES)), true);
  // 0x5f8: pointer
  if (data?.SENSOR_DATA_TYPE_BIOMETRIC_GUID !== undefined) view.setBigUint64(1528, data.SENSOR_DATA_TYPE_BIOMETRIC_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_BIOMETRIC_GUID)), true);
  // 0x600: pointer
  if (data?.SENSOR_DATA_TYPE_HUMAN_PRESENCE !== undefined) view.setBigUint64(1536, data.SENSOR_DATA_TYPE_HUMAN_PRESENCE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_HUMAN_PRESENCE)), true);
  // 0x608: pointer
  if (data?.SENSOR_DATA_TYPE_HUMAN_PROXIMITY_METERS !== undefined) view.setBigUint64(1544, data.SENSOR_DATA_TYPE_HUMAN_PROXIMITY_METERS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_HUMAN_PROXIMITY_METERS)), true);
  // 0x610: pointer
  if (data?.SENSOR_DATA_TYPE_TOUCH_STATE !== undefined) view.setBigUint64(1552, data.SENSOR_DATA_TYPE_TOUCH_STATE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_TOUCH_STATE)), true);
  // 0x618: pointer
  if (data?.SENSOR_DATA_TYPE_LIGHT_GUID !== undefined) view.setBigUint64(1560, data.SENSOR_DATA_TYPE_LIGHT_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LIGHT_GUID)), true);
  // 0x620: pointer
  if (data?.SENSOR_DATA_TYPE_LIGHT_LEVEL_LUX !== undefined) view.setBigUint64(1568, data.SENSOR_DATA_TYPE_LIGHT_LEVEL_LUX === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LIGHT_LEVEL_LUX)), true);
  // 0x628: pointer
  if (data?.SENSOR_DATA_TYPE_LIGHT_TEMPERATURE_KELVIN !== undefined) view.setBigUint64(1576, data.SENSOR_DATA_TYPE_LIGHT_TEMPERATURE_KELVIN === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LIGHT_TEMPERATURE_KELVIN)), true);
  // 0x630: pointer
  if (data?.SENSOR_DATA_TYPE_LIGHT_CHROMACITY !== undefined) view.setBigUint64(1584, data.SENSOR_DATA_TYPE_LIGHT_CHROMACITY === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_LIGHT_CHROMACITY)), true);
  // 0x638: pointer
  if (data?.SENSOR_DATA_TYPE_SCANNER_GUID !== undefined) view.setBigUint64(1592, data.SENSOR_DATA_TYPE_SCANNER_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_SCANNER_GUID)), true);
  // 0x640: pointer
  if (data?.SENSOR_DATA_TYPE_RFID_TAG_40_BIT !== undefined) view.setBigUint64(1600, data.SENSOR_DATA_TYPE_RFID_TAG_40_BIT === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_RFID_TAG_40_BIT)), true);
  // 0x648: pointer
  if (data?.SENSOR_DATA_TYPE_ELECTRICAL_GUID !== undefined) view.setBigUint64(1608, data.SENSOR_DATA_TYPE_ELECTRICAL_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ELECTRICAL_GUID)), true);
  // 0x650: pointer
  if (data?.SENSOR_DATA_TYPE_VOLTAGE_VOLTS !== undefined) view.setBigUint64(1616, data.SENSOR_DATA_TYPE_VOLTAGE_VOLTS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_VOLTAGE_VOLTS)), true);
  // 0x658: pointer
  if (data?.SENSOR_DATA_TYPE_CURRENT_AMPS !== undefined) view.setBigUint64(1624, data.SENSOR_DATA_TYPE_CURRENT_AMPS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CURRENT_AMPS)), true);
  // 0x660: pointer
  if (data?.SENSOR_DATA_TYPE_CAPACITANCE_FARAD !== undefined) view.setBigUint64(1632, data.SENSOR_DATA_TYPE_CAPACITANCE_FARAD === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CAPACITANCE_FARAD)), true);
  // 0x668: pointer
  if (data?.SENSOR_DATA_TYPE_RESISTANCE_OHMS !== undefined) view.setBigUint64(1640, data.SENSOR_DATA_TYPE_RESISTANCE_OHMS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_RESISTANCE_OHMS)), true);
  // 0x670: pointer
  if (data?.SENSOR_DATA_TYPE_INDUCTANCE_HENRY !== undefined) view.setBigUint64(1648, data.SENSOR_DATA_TYPE_INDUCTANCE_HENRY === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_INDUCTANCE_HENRY)), true);
  // 0x678: pointer
  if (data?.SENSOR_DATA_TYPE_ELECTRICAL_POWER_WATTS !== undefined) view.setBigUint64(1656, data.SENSOR_DATA_TYPE_ELECTRICAL_POWER_WATTS === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ELECTRICAL_POWER_WATTS)), true);
  // 0x680: pointer
  if (data?.SENSOR_DATA_TYPE_ELECTRICAL_PERCENT_OF_RANGE !== undefined) view.setBigUint64(1664, data.SENSOR_DATA_TYPE_ELECTRICAL_PERCENT_OF_RANGE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ELECTRICAL_PERCENT_OF_RANGE)), true);
  // 0x688: pointer
  if (data?.SENSOR_DATA_TYPE_ELECTRICAL_FREQUENCY_HERTZ !== undefined) view.setBigUint64(1672, data.SENSOR_DATA_TYPE_ELECTRICAL_FREQUENCY_HERTZ === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_ELECTRICAL_FREQUENCY_HERTZ)), true);
  // 0x690: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_GUID !== undefined) view.setBigUint64(1680, data.SENSOR_DATA_TYPE_CUSTOM_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_GUID)), true);
  // 0x698: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_USAGE !== undefined) view.setBigUint64(1688, data.SENSOR_DATA_TYPE_CUSTOM_USAGE === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_USAGE)), true);
  // 0x6a0: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_BOOLEAN_ARRAY !== undefined) view.setBigUint64(1696, data.SENSOR_DATA_TYPE_CUSTOM_BOOLEAN_ARRAY === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_BOOLEAN_ARRAY)), true);
  // 0x6a8: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE1 !== undefined) view.setBigUint64(1704, data.SENSOR_DATA_TYPE_CUSTOM_VALUE1 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE1)), true);
  // 0x6b0: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE2 !== undefined) view.setBigUint64(1712, data.SENSOR_DATA_TYPE_CUSTOM_VALUE2 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE2)), true);
  // 0x6b8: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE3 !== undefined) view.setBigUint64(1720, data.SENSOR_DATA_TYPE_CUSTOM_VALUE3 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE3)), true);
  // 0x6c0: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE4 !== undefined) view.setBigUint64(1728, data.SENSOR_DATA_TYPE_CUSTOM_VALUE4 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE4)), true);
  // 0x6c8: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE5 !== undefined) view.setBigUint64(1736, data.SENSOR_DATA_TYPE_CUSTOM_VALUE5 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE5)), true);
  // 0x6d0: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE6 !== undefined) view.setBigUint64(1744, data.SENSOR_DATA_TYPE_CUSTOM_VALUE6 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE6)), true);
  // 0x6d8: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE7 !== undefined) view.setBigUint64(1752, data.SENSOR_DATA_TYPE_CUSTOM_VALUE7 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE7)), true);
  // 0x6e0: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE8 !== undefined) view.setBigUint64(1760, data.SENSOR_DATA_TYPE_CUSTOM_VALUE8 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE8)), true);
  // 0x6e8: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE9 !== undefined) view.setBigUint64(1768, data.SENSOR_DATA_TYPE_CUSTOM_VALUE9 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE9)), true);
  // 0x6f0: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE10 !== undefined) view.setBigUint64(1776, data.SENSOR_DATA_TYPE_CUSTOM_VALUE10 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE10)), true);
  // 0x6f8: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE11 !== undefined) view.setBigUint64(1784, data.SENSOR_DATA_TYPE_CUSTOM_VALUE11 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE11)), true);
  // 0x700: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE12 !== undefined) view.setBigUint64(1792, data.SENSOR_DATA_TYPE_CUSTOM_VALUE12 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE12)), true);
  // 0x708: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE13 !== undefined) view.setBigUint64(1800, data.SENSOR_DATA_TYPE_CUSTOM_VALUE13 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE13)), true);
  // 0x710: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE14 !== undefined) view.setBigUint64(1808, data.SENSOR_DATA_TYPE_CUSTOM_VALUE14 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE14)), true);
  // 0x718: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE15 !== undefined) view.setBigUint64(1816, data.SENSOR_DATA_TYPE_CUSTOM_VALUE15 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE15)), true);
  // 0x720: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE16 !== undefined) view.setBigUint64(1824, data.SENSOR_DATA_TYPE_CUSTOM_VALUE16 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE16)), true);
  // 0x728: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE17 !== undefined) view.setBigUint64(1832, data.SENSOR_DATA_TYPE_CUSTOM_VALUE17 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE17)), true);
  // 0x730: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE18 !== undefined) view.setBigUint64(1840, data.SENSOR_DATA_TYPE_CUSTOM_VALUE18 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE18)), true);
  // 0x738: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE19 !== undefined) view.setBigUint64(1848, data.SENSOR_DATA_TYPE_CUSTOM_VALUE19 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE19)), true);
  // 0x740: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE20 !== undefined) view.setBigUint64(1856, data.SENSOR_DATA_TYPE_CUSTOM_VALUE20 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE20)), true);
  // 0x748: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE21 !== undefined) view.setBigUint64(1864, data.SENSOR_DATA_TYPE_CUSTOM_VALUE21 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE21)), true);
  // 0x750: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE22 !== undefined) view.setBigUint64(1872, data.SENSOR_DATA_TYPE_CUSTOM_VALUE22 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE22)), true);
  // 0x758: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE23 !== undefined) view.setBigUint64(1880, data.SENSOR_DATA_TYPE_CUSTOM_VALUE23 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE23)), true);
  // 0x760: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE24 !== undefined) view.setBigUint64(1888, data.SENSOR_DATA_TYPE_CUSTOM_VALUE24 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE24)), true);
  // 0x768: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE25 !== undefined) view.setBigUint64(1896, data.SENSOR_DATA_TYPE_CUSTOM_VALUE25 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE25)), true);
  // 0x770: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE26 !== undefined) view.setBigUint64(1904, data.SENSOR_DATA_TYPE_CUSTOM_VALUE26 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE26)), true);
  // 0x778: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE27 !== undefined) view.setBigUint64(1912, data.SENSOR_DATA_TYPE_CUSTOM_VALUE27 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE27)), true);
  // 0x780: pointer
  if (data?.SENSOR_DATA_TYPE_CUSTOM_VALUE28 !== undefined) view.setBigUint64(1920, data.SENSOR_DATA_TYPE_CUSTOM_VALUE28 === null ? 0n : BigInt(util.toPointer(data.SENSOR_DATA_TYPE_CUSTOM_VALUE28)), true);
  // 0x788: pointer
  if (data?.SENSOR_PROPERTY_TEST_GUID !== undefined) view.setBigUint64(1928, data.SENSOR_PROPERTY_TEST_GUID === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_TEST_GUID)), true);
  // 0x790: pointer
  if (data?.SENSOR_PROPERTY_CLEAR_ASSISTANCE_DATA !== undefined) view.setBigUint64(1936, data.SENSOR_PROPERTY_CLEAR_ASSISTANCE_DATA === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_CLEAR_ASSISTANCE_DATA)), true);
  // 0x798: pointer
  if (data?.SENSOR_PROPERTY_TURN_ON_OFF_NMEA !== undefined) view.setBigUint64(1944, data.SENSOR_PROPERTY_TURN_ON_OFF_NMEA === null ? 0n : BigInt(util.toPointer(data.SENSOR_PROPERTY_TURN_ON_OFF_NMEA)), true);
  // 0x7a0: pointer
  if (data?.GUID_SensorCategory_All !== undefined) view.setBigUint64(1952, data.GUID_SensorCategory_All === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_All)), true);
  // 0x7a8: pointer
  if (data?.GUID_SensorCategory_Biometric !== undefined) view.setBigUint64(1960, data.GUID_SensorCategory_Biometric === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Biometric)), true);
  // 0x7b0: pointer
  if (data?.GUID_SensorCategory_Electrical !== undefined) view.setBigUint64(1968, data.GUID_SensorCategory_Electrical === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Electrical)), true);
  // 0x7b8: pointer
  if (data?.GUID_SensorCategory_Environmental !== undefined) view.setBigUint64(1976, data.GUID_SensorCategory_Environmental === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Environmental)), true);
  // 0x7c0: pointer
  if (data?.GUID_SensorCategory_Light !== undefined) view.setBigUint64(1984, data.GUID_SensorCategory_Light === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Light)), true);
  // 0x7c8: pointer
  if (data?.GUID_SensorCategory_Location !== undefined) view.setBigUint64(1992, data.GUID_SensorCategory_Location === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Location)), true);
  // 0x7d0: pointer
  if (data?.GUID_SensorCategory_Mechanical !== undefined) view.setBigUint64(2000, data.GUID_SensorCategory_Mechanical === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Mechanical)), true);
  // 0x7d8: pointer
  if (data?.GUID_SensorCategory_Motion !== undefined) view.setBigUint64(2008, data.GUID_SensorCategory_Motion === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Motion)), true);
  // 0x7e0: pointer
  if (data?.GUID_SensorCategory_Orientation !== undefined) view.setBigUint64(2016, data.GUID_SensorCategory_Orientation === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Orientation)), true);
  // 0x7e8: pointer
  if (data?.GUID_SensorCategory_Other !== undefined) view.setBigUint64(2024, data.GUID_SensorCategory_Other === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Other)), true);
  // 0x7f0: pointer
  if (data?.GUID_SensorCategory_PersonalActivity !== undefined) view.setBigUint64(2032, data.GUID_SensorCategory_PersonalActivity === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_PersonalActivity)), true);
  // 0x7f8: pointer
  if (data?.GUID_SensorCategory_Scanner !== undefined) view.setBigUint64(2040, data.GUID_SensorCategory_Scanner === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Scanner)), true);
  // 0x800: pointer
  if (data?.GUID_SensorCategory_Unsupported !== undefined) view.setBigUint64(2048, data.GUID_SensorCategory_Unsupported === null ? 0n : BigInt(util.toPointer(data.GUID_SensorCategory_Unsupported)), true);
  // 0x808: pointer
  if (data?.GUID_SensorType_Accelerometer3D !== undefined) view.setBigUint64(2056, data.GUID_SensorType_Accelerometer3D === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Accelerometer3D)), true);
  // 0x810: pointer
  if (data?.GUID_SensorType_ActivityDetection !== undefined) view.setBigUint64(2064, data.GUID_SensorType_ActivityDetection === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_ActivityDetection)), true);
  // 0x818: pointer
  if (data?.GUID_SensorType_AmbientLight !== undefined) view.setBigUint64(2072, data.GUID_SensorType_AmbientLight === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_AmbientLight)), true);
  // 0x820: pointer
  if (data?.GUID_SensorType_Barometer !== undefined) view.setBigUint64(2080, data.GUID_SensorType_Barometer === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Barometer)), true);
  // 0x828: pointer
  if (data?.GUID_SensorType_Custom !== undefined) view.setBigUint64(2088, data.GUID_SensorType_Custom === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Custom)), true);
  // 0x830: pointer
  if (data?.GUID_SensorType_FloorElevation !== undefined) view.setBigUint64(2096, data.GUID_SensorType_FloorElevation === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_FloorElevation)), true);
  // 0x838: pointer
  if (data?.GUID_SensorType_GeomagneticOrientation !== undefined) view.setBigUint64(2104, data.GUID_SensorType_GeomagneticOrientation === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_GeomagneticOrientation)), true);
  // 0x840: pointer
  if (data?.GUID_SensorType_GravityVector !== undefined) view.setBigUint64(2112, data.GUID_SensorType_GravityVector === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_GravityVector)), true);
  // 0x848: pointer
  if (data?.GUID_SensorType_Gyrometer3D !== undefined) view.setBigUint64(2120, data.GUID_SensorType_Gyrometer3D === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Gyrometer3D)), true);
  // 0x850: pointer
  if (data?.GUID_SensorType_Humidity !== undefined) view.setBigUint64(2128, data.GUID_SensorType_Humidity === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Humidity)), true);
  // 0x858: pointer
  if (data?.GUID_SensorType_LinearAccelerometer !== undefined) view.setBigUint64(2136, data.GUID_SensorType_LinearAccelerometer === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_LinearAccelerometer)), true);
  // 0x860: pointer
  if (data?.GUID_SensorType_Magnetometer3D !== undefined) view.setBigUint64(2144, data.GUID_SensorType_Magnetometer3D === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Magnetometer3D)), true);
  // 0x868: pointer
  if (data?.GUID_SensorType_Orientation !== undefined) view.setBigUint64(2152, data.GUID_SensorType_Orientation === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Orientation)), true);
  // 0x870: pointer
  if (data?.GUID_SensorType_Pedometer !== undefined) view.setBigUint64(2160, data.GUID_SensorType_Pedometer === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Pedometer)), true);
  // 0x878: pointer
  if (data?.GUID_SensorType_Proximity !== undefined) view.setBigUint64(2168, data.GUID_SensorType_Proximity === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Proximity)), true);
  // 0x880: pointer
  if (data?.GUID_SensorType_RelativeOrientation !== undefined) view.setBigUint64(2176, data.GUID_SensorType_RelativeOrientation === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_RelativeOrientation)), true);
  // 0x888: pointer
  if (data?.GUID_SensorType_SimpleDeviceOrientation !== undefined) view.setBigUint64(2184, data.GUID_SensorType_SimpleDeviceOrientation === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_SimpleDeviceOrientation)), true);
  // 0x890: pointer
  if (data?.GUID_SensorType_Temperature !== undefined) view.setBigUint64(2192, data.GUID_SensorType_Temperature === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_Temperature)), true);
  // 0x898: pointer
  if (data?.GUID_SensorType_HingeAngle !== undefined) view.setBigUint64(2200, data.GUID_SensorType_HingeAngle === null ? 0n : BigInt(util.toPointer(data.GUID_SensorType_HingeAngle)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.StructuredStorage.PROPVARIANT (size: 8)
 */
export interface PROPVARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROPVARIANT = 8;

export function allocPROPVARIANT(data?: Partial<PROPVARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.SENSOR_VALUE_PAIR (size: 16)
 */
export interface SENSOR_VALUE_PAIR {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  Key: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.PROPVARIANT */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSENSOR_VALUE_PAIR = 16;

export function allocSENSOR_VALUE_PAIR(data?: Partial<SENSOR_VALUE_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSOR_VALUE_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.SENSOR_COLLECTION_LIST (size: 16)
 */
export interface SENSOR_COLLECTION_LIST {
  /** u32 */
  AllocatedSizeInBytes: number;
  /** u32 */
  Count: number;
  /** array */
  List: Deno.PointerValue | null;
}

export const sizeofSENSOR_COLLECTION_LIST = 16;

export function allocSENSOR_COLLECTION_LIST(data?: Partial<SENSOR_COLLECTION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSOR_COLLECTION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AllocatedSizeInBytes !== undefined) view.setUint32(0, Number(data.AllocatedSizeInBytes), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.List !== undefined) view.setBigUint64(8, data.List === null ? 0n : BigInt(util.toPointer(data.List)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.SENSOR_PROPERTY_LIST (size: 16)
 */
export interface SENSOR_PROPERTY_LIST {
  /** u32 */
  AllocatedSizeInBytes: number;
  /** u32 */
  Count: number;
  /** array */
  List: Deno.PointerValue | null;
}

export const sizeofSENSOR_PROPERTY_LIST = 16;

export function allocSENSOR_PROPERTY_LIST(data?: Partial<SENSOR_PROPERTY_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSENSOR_PROPERTY_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AllocatedSizeInBytes !== undefined) view.setUint32(0, Number(data.AllocatedSizeInBytes), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.List !== undefined) view.setBigUint64(8, data.List === null ? 0n : BigInt(util.toPointer(data.List)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.VEC3D (size: 16)
 */
export interface VEC3D {
  /** f32 */
  X: number;
  /** f32 */
  Y: number;
  /** f32 */
  Z: number;
}

export const sizeofVEC3D = 16;

export function allocVEC3D(data?: Partial<VEC3D>): Uint8Array {
  const buf = new Uint8Array(sizeofVEC3D);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.X !== undefined) view.setFloat32(0, Number(data.X), true);
  // 0x04: f32
  if (data?.Y !== undefined) view.setFloat32(4, Number(data.Y), true);
  // 0x08: f32
  if (data?.Z !== undefined) view.setFloat32(8, Number(data.Z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.MATRIX3X3 (size: 8)
 */
export interface MATRIX3X3 {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMATRIX3X3 = 8;

export function allocMATRIX3X3(data?: Partial<MATRIX3X3>): Uint8Array {
  const buf = new Uint8Array(sizeofMATRIX3X3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Sensors.QUATERNION (size: 16)
 */
export interface QUATERNION {
  /** f32 */
  X: number;
  /** f32 */
  Y: number;
  /** f32 */
  Z: number;
  /** f32 */
  W: number;
}

export const sizeofQUATERNION = 16;

export function allocQUATERNION(data?: Partial<QUATERNION>): Uint8Array {
  const buf = new Uint8Array(sizeofQUATERNION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.X !== undefined) view.setFloat32(0, Number(data.X), true);
  // 0x04: f32
  if (data?.Y !== undefined) view.setFloat32(4, Number(data.Y), true);
  // 0x08: f32
  if (data?.Z !== undefined) view.setFloat32(8, Number(data.Z), true);
  // 0x0c: f32
  if (data?.W !== undefined) view.setFloat32(12, Number(data.W), true);
  return buf;
}

export type NTSTATUS = number;

export type HRESULT = number;

export type BOOLEAN = number;

// Native Libraries

try {
  var libSensorsUtilsV2 = Deno.dlopen("SensorsUtilsV2", {
    GetPerformanceTime: {
      parameters: ["pointer"],
      result: "pointer",
    },
    InitPropVariantFromFloat: {
      parameters: ["f32", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetPropVariant: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeySetPropVariant: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetFileTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetGuid: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetBool: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetUlong: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetUshort: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetFloat: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetDouble: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetInt32: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetInt64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetNthUlong: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetNthUshort: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropKeyFindKeyGetNthInt64: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    IsKeyPresentInPropertyList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsKeyPresentInCollectionList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsCollectionListSame: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantGetInformation: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropertiesListCopy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropertiesListGetFillableCount: {
      parameters: ["u32"],
      result: "u32",
    },
    CollectionsListGetMarshalledSize: {
      parameters: ["pointer"],
      result: "u32",
    },
    CollectionsListCopyAndMarshall: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListMarshall: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CollectionsListGetMarshalledSizeWithoutSerialization: {
      parameters: ["pointer"],
      result: "u32",
    },
    CollectionsListUpdateMarshalledPointer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SerializationBufferAllocate: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    SerializationBufferFree: {
      parameters: ["pointer"],
      result: "void",
    },
    CollectionsListGetSerializedSize: {
      parameters: ["pointer"],
      result: "u32",
    },
    CollectionsListSerializeToBuffer: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    CollectionsListAllocateBufferAndSerialize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListDeserializeFromBuffer: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    SensorCollectionGetAt: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListGetFillableCount: {
      parameters: ["u32"],
      result: "u32",
    },
    EvaluateActivityThresholds: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CollectionsListSortSubscribedActivitiesByConfidence: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromCLSIDArray: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    IsSensorSubscribed: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IsGUIDPresentInList: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetPerformanceTime(
  TimeMs: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.GetPerformanceTime(util.toPointer(TimeMs)));
}

export function InitPropVariantFromFloat(
  fltVal: number /* f32 */,
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSensorsUtilsV2.InitPropVariantFromFloat(fltVal, util.toPointer(ppropvar)));
}

export function PropKeyFindKeyGetPropVariant(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetPropVariant(util.toPointer(pList), util.toPointer(pKey), util.toPointer(TypeCheck), util.toPointer(pValue)));
}

export function PropKeyFindKeySetPropVariant(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  TypeCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeySetPropVariant(util.toPointer(pList), util.toPointer(pKey), util.toPointer(TypeCheck), util.toPointer(pValue)));
}

export function PropKeyFindKeyGetFileTime(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetFileTime(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetGuid(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetGuid(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetBool(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetBool(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetUlong(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetUlong(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetUshort(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetUshort(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetFloat(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetFloat(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetDouble(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetDouble(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetInt32(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetInt32(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetInt64(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetInt64(util.toPointer(pList), util.toPointer(pKey), util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetNthUlong(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  Occurrence: number /* u32 */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetNthUlong(util.toPointer(pList), util.toPointer(pKey), Occurrence, util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetNthUshort(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  Occurrence: number /* u32 */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetNthUshort(util.toPointer(pList), util.toPointer(pKey), Occurrence, util.toPointer(pRetValue)));
}

export function PropKeyFindKeyGetNthInt64(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  Occurrence: number /* u32 */,
  pRetValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropKeyFindKeyGetNthInt64(util.toPointer(pList), util.toPointer(pKey), Occurrence, util.toPointer(pRetValue)));
}

export function IsKeyPresentInPropertyList(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2.IsKeyPresentInPropertyList(util.toPointer(pList), util.toPointer(pKey)));
}

export function IsKeyPresentInCollectionList(
  pList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2.IsKeyPresentInCollectionList(util.toPointer(pList), util.toPointer(pKey)));
}

export function IsCollectionListSame(
  ListA: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListB: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2.IsCollectionListSame(util.toPointer(ListA), util.toPointer(ListB)));
}

export function PropVariantGetInformation(
  PropVariantValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropVariantOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropVariantSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropVariantPointer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemappedType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropVariantGetInformation(util.toPointer(PropVariantValue), util.toPointer(PropVariantOffset), util.toPointer(PropVariantSize), util.toPointer(PropVariantPointer), util.toPointer(RemappedType)));
}

export function PropertiesListCopy(
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.PropertiesListCopy(util.toPointer(Target), util.toPointer(Source)));
}

export function PropertiesListGetFillableCount(
  BufferSizeBytes: number /* u32 */,
): number /* u32 */ {
  return libSensorsUtilsV2.PropertiesListGetFillableCount(BufferSizeBytes);
}

export function CollectionsListGetMarshalledSize(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSensorsUtilsV2.CollectionsListGetMarshalledSize(util.toPointer(Collection));
}

export function CollectionsListCopyAndMarshall(
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListCopyAndMarshall(util.toPointer(Target), util.toPointer(Source)));
}

export function CollectionsListMarshall(
  Target: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListMarshall(util.toPointer(Target)));
}

export function CollectionsListGetMarshalledSizeWithoutSerialization(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSensorsUtilsV2.CollectionsListGetMarshalledSizeWithoutSerialization(util.toPointer(Collection));
}

export function CollectionsListUpdateMarshalledPointer(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListUpdateMarshalledPointer(util.toPointer(Collection)));
}

export function SerializationBufferAllocate(
  SizeInBytes: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.SerializationBufferAllocate(SizeInBytes, util.toPointer(pBuffer)));
}

export function SerializationBufferFree(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSensorsUtilsV2.SerializationBufferFree(util.toPointer(Buffer));
}

export function CollectionsListGetSerializedSize(
  Collection: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSensorsUtilsV2.CollectionsListGetSerializedSize(util.toPointer(Collection));
}

export function CollectionsListSerializeToBuffer(
  SourceCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetBufferSizeInBytes: number /* u32 */,
  TargetBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListSerializeToBuffer(util.toPointer(SourceCollection), TargetBufferSizeInBytes, util.toPointer(TargetBuffer)));
}

export function CollectionsListAllocateBufferAndSerialize(
  SourceCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTargetBufferSizeInBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTargetBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListAllocateBufferAndSerialize(util.toPointer(SourceCollection), util.toPointer(pTargetBufferSizeInBytes), util.toPointer(pTargetBuffer)));
}

export function CollectionsListDeserializeFromBuffer(
  SourceBufferSizeInBytes: number /* u32 */,
  SourceBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListDeserializeFromBuffer(SourceBufferSizeInBytes, util.toPointer(SourceBuffer), util.toPointer(TargetCollection)));
}

export function SensorCollectionGetAt(
  Index: number /* u32 */,
  pSensorsList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.SensorCollectionGetAt(Index, util.toPointer(pSensorsList), util.toPointer(pKey), util.toPointer(pValue)));
}

export function CollectionsListGetFillableCount(
  BufferSizeBytes: number /* u32 */,
): number /* u32 */ {
  return libSensorsUtilsV2.CollectionsListGetFillableCount(BufferSizeBytes);
}

export function EvaluateActivityThresholds(
  newSample: Deno.PointerValue | Uint8Array | null /* ptr */,
  oldSample: Deno.PointerValue | Uint8Array | null /* ptr */,
  thresholds: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2.EvaluateActivityThresholds(util.toPointer(newSample), util.toPointer(oldSample), util.toPointer(thresholds)));
}

export function CollectionsListSortSubscribedActivitiesByConfidence(
  thresholds: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCollection: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libSensorsUtilsV2.CollectionsListSortSubscribedActivitiesByConfidence(util.toPointer(thresholds), util.toPointer(pCollection)));
}

export function InitPropVariantFromCLSIDArray(
  members: Deno.PointerValue | Uint8Array | null /* ptr */,
  size: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSensorsUtilsV2.InitPropVariantFromCLSIDArray(util.toPointer(members), size, util.toPointer(ppropvar)));
}

export function IsSensorSubscribed(
  subscriptionList: Deno.PointerValue | Uint8Array | null /* ptr */,
  currentType: Uint8Array | Deno.PointerValue | null /* System.Guid */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2.IsSensorSubscribed(util.toPointer(subscriptionList), util.toPointer(currentType)));
}

export function IsGUIDPresentInList(
  guidArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  arrayLength: number /* u32 */,
  guidElem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libSensorsUtilsV2.IsGUIDPresentInList(util.toPointer(guidArray), arrayLength, util.toPointer(guidElem)));
}

