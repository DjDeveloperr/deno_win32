/// Auto-generated by Deno Win32: Windows.Win32.Devices.DeviceAndDriverInstallation.Apis

import * as util from "../../util.ts";

// Enums
export type SP_COPY_STYLE = number;
export type SETUP_FILE_OPERATION = number;
export type OEM_SOURCE_MEDIA_TYPE = number;
export type SETUP_DI_BUILD_DRIVER_DRIVER_TYPE = number;
export type SP_INF_STYLE = number;
export type CONFIGRET = number;
export type VER_PLATFORM = number;
export type SetupFileLogInfo = number;
export type PNP_VETO_TYPE = number;
export type CM_NOTIFY_FILTER_TYPE = number;
export type RIP_INFO_TYPE = number;
export type CM_NOTIFY_ACTION = number;
export type PRIORITY = number;

// Constants
export const SP_COPY_DELETESOURCE = 1;
export const SP_COPY_REPLACEONLY = 2;
export const SP_COPY_NEWER_OR_SAME = 4;
export const SP_COPY_NEWER_ONLY = 65536;
export const SP_COPY_NOOVERWRITE = 8;
export const SP_COPY_NODECOMP = 16;
export const SP_COPY_LANGUAGEAWARE = 32;
export const SP_COPY_SOURCE_ABSOLUTE = 64;
export const SP_COPY_SOURCEPATH_ABSOLUTE = 128;
export const SP_COPY_FORCE_IN_USE = 512;
export const SP_COPY_IN_USE_NEEDS_REBOOT = 256;
export const SP_COPY_NOSKIP = 1024;
export const SP_COPY_FORCE_NOOVERWRITE = 4096;
export const SP_COPY_FORCE_NEWER = 8192;
export const SP_COPY_WARNIFSKIP = 16384;
export const SP_COPY_NOBROWSE = 32768;
export const SP_COPY_NEWER = 4;
export const SP_COPY_RESERVED = 131072;
export const SP_COPY_OEMINF_CATALOG_ONLY = 262144;
export const SP_COPY_REPLACE_BOOT_FILE = 524288;
export const SP_COPY_NOPRUNE = 1048576;
export const SP_COPY_OEM_F6_INF = 2097152;
export const SP_COPY_ALREADYDECOMP = 4194304;
export const SP_COPY_WINDOWS_SIGNED = 16777216;
export const SP_COPY_PNPLOCKED = 33554432;
export const SP_COPY_IN_USE_TRY_RENAME = 67108864;
export const SP_COPY_INBOX_INF = 134217728;
export const SP_COPY_HARDLINK = 268435456;
export const FILEOP_DELETE = 2;
export const FILEOP_COPY = 0;
export const SPOST_NONE = 0;
export const SPOST_PATH = 1;
export const SPOST_URL = 2;
export const SPDIT_CLASSDRIVER = 1;
export const SPDIT_COMPATDRIVER = 2;
export const INF_STYLE_NONE = 0;
export const INF_STYLE_OLDNT = 1;
export const INF_STYLE_WIN4 = 2;
export const CR_SUCCESS = 0;
export const CR_DEFAULT = 1;
export const CR_OUT_OF_MEMORY = 2;
export const CR_INVALID_POINTER = 3;
export const CR_INVALID_FLAG = 4;
export const CR_INVALID_DEVNODE = 5;
export const CR_INVALID_DEVINST = 5;
export const CR_INVALID_RES_DES = 6;
export const CR_INVALID_LOG_CONF = 7;
export const CR_INVALID_ARBITRATOR = 8;
export const CR_INVALID_NODELIST = 9;
export const CR_DEVNODE_HAS_REQS = 10;
export const CR_DEVINST_HAS_REQS = 10;
export const CR_INVALID_RESOURCEID = 11;
export const CR_DLVXD_NOT_FOUND = 12;
export const CR_NO_SUCH_DEVNODE = 13;
export const CR_NO_SUCH_DEVINST = 13;
export const CR_NO_MORE_LOG_CONF = 14;
export const CR_NO_MORE_RES_DES = 15;
export const CR_ALREADY_SUCH_DEVNODE = 16;
export const CR_ALREADY_SUCH_DEVINST = 16;
export const CR_INVALID_RANGE_LIST = 17;
export const CR_INVALID_RANGE = 18;
export const CR_FAILURE = 19;
export const CR_NO_SUCH_LOGICAL_DEV = 20;
export const CR_CREATE_BLOCKED = 21;
export const CR_NOT_SYSTEM_VM = 22;
export const CR_REMOVE_VETOED = 23;
export const CR_APM_VETOED = 24;
export const CR_INVALID_LOAD_TYPE = 25;
export const CR_BUFFER_SMALL = 26;
export const CR_NO_ARBITRATOR = 27;
export const CR_NO_REGISTRY_HANDLE = 28;
export const CR_REGISTRY_ERROR = 29;
export const CR_INVALID_DEVICE_ID = 30;
export const CR_INVALID_DATA = 31;
export const CR_INVALID_API = 32;
export const CR_DEVLOADER_NOT_READY = 33;
export const CR_NEED_RESTART = 34;
export const CR_NO_MORE_HW_PROFILES = 35;
export const CR_DEVICE_NOT_THERE = 36;
export const CR_NO_SUCH_VALUE = 37;
export const CR_WRONG_TYPE = 38;
export const CR_INVALID_PRIORITY = 39;
export const CR_NOT_DISABLEABLE = 40;
export const CR_FREE_RESOURCES = 41;
export const CR_QUERY_VETOED = 42;
export const CR_CANT_SHARE_IRQ = 43;
export const CR_NO_DEPENDENT = 44;
export const CR_SAME_RESOURCES = 45;
export const CR_NO_SUCH_REGISTRY_KEY = 46;
export const CR_INVALID_MACHINENAME = 47;
export const CR_REMOTE_COMM_FAILURE = 48;
export const CR_MACHINE_UNAVAILABLE = 49;
export const CR_NO_CM_SERVICES = 50;
export const CR_ACCESS_DENIED = 51;
export const CR_CALL_NOT_IMPLEMENTED = 52;
export const CR_INVALID_PROPERTY = 53;
export const CR_DEVICE_INTERFACE_ACTIVE = 54;
export const CR_NO_SUCH_DEVICE_INTERFACE = 55;
export const CR_INVALID_REFERENCE_STRING = 56;
export const CR_INVALID_CONFLICT_LIST = 57;
export const CR_INVALID_INDEX = 58;
export const CR_INVALID_STRUCTURE_SIZE = 59;
export const NUM_CR_RESULTS = 60;
export const CM_PROB_NOT_CONFIGURED = 1;
export const CM_PROB_DEVLOADER_FAILED = 2;
export const CM_PROB_OUT_OF_MEMORY = 3;
export const CM_PROB_ENTRY_IS_WRONG_TYPE = 4;
export const CM_PROB_LACKED_ARBITRATOR = 5;
export const CM_PROB_BOOT_CONFIG_CONFLICT = 6;
export const CM_PROB_FAILED_FILTER = 7;
export const CM_PROB_DEVLOADER_NOT_FOUND = 8;
export const CM_PROB_INVALID_DATA = 9;
export const CM_PROB_FAILED_START = 10;
export const CM_PROB_LIAR = 11;
export const CM_PROB_NORMAL_CONFLICT = 12;
export const CM_PROB_NOT_VERIFIED = 13;
export const CM_PROB_NEED_RESTART = 14;
export const CM_PROB_REENUMERATION = 15;
export const CM_PROB_PARTIAL_LOG_CONF = 16;
export const CM_PROB_UNKNOWN_RESOURCE = 17;
export const CM_PROB_REINSTALL = 18;
export const CM_PROB_REGISTRY = 19;
export const CM_PROB_VXDLDR = 20;
export const CM_PROB_WILL_BE_REMOVED = 21;
export const CM_PROB_DISABLED = 22;
export const CM_PROB_DEVLOADER_NOT_READY = 23;
export const CM_PROB_DEVICE_NOT_THERE = 24;
export const CM_PROB_MOVED = 25;
export const CM_PROB_TOO_EARLY = 26;
export const CM_PROB_NO_VALID_LOG_CONF = 27;
export const CM_PROB_FAILED_INSTALL = 28;
export const CM_PROB_HARDWARE_DISABLED = 29;
export const CM_PROB_CANT_SHARE_IRQ = 30;
export const CM_PROB_FAILED_ADD = 31;
export const CM_PROB_DISABLED_SERVICE = 32;
export const CM_PROB_TRANSLATION_FAILED = 33;
export const CM_PROB_NO_SOFTCONFIG = 34;
export const CM_PROB_BIOS_TABLE = 35;
export const CM_PROB_IRQ_TRANSLATION_FAILED = 36;
export const CM_PROB_FAILED_DRIVER_ENTRY = 37;
export const CM_PROB_DRIVER_FAILED_PRIOR_UNLOAD = 38;
export const CM_PROB_DRIVER_FAILED_LOAD = 39;
export const CM_PROB_DRIVER_SERVICE_KEY_INVALID = 40;
export const CM_PROB_LEGACY_SERVICE_NO_DEVICES = 41;
export const CM_PROB_DUPLICATE_DEVICE = 42;
export const CM_PROB_FAILED_POST_START = 43;
export const CM_PROB_HALTED = 44;
export const CM_PROB_PHANTOM = 45;
export const CM_PROB_SYSTEM_SHUTDOWN = 46;
export const CM_PROB_HELD_FOR_EJECT = 47;
export const CM_PROB_DRIVER_BLOCKED = 48;
export const CM_PROB_REGISTRY_TOO_LARGE = 49;
export const CM_PROB_SETPROPERTIES_FAILED = 50;
export const CM_PROB_WAITING_ON_DEPENDENCY = 51;
export const CM_PROB_UNSIGNED_DRIVER = 52;
export const CM_PROB_USED_BY_DEBUGGER = 53;
export const CM_PROB_DEVICE_RESET = 54;
export const CM_PROB_CONSOLE_LOCKED = 55;
export const CM_PROB_NEED_CLASS_CONFIG = 56;
export const CM_PROB_GUEST_ASSIGNMENT_FAILED = 57;
export const NUM_CM_PROB_V1 = 37;
export const NUM_CM_PROB_V2 = 50;
export const NUM_CM_PROB_V3 = 51;
export const NUM_CM_PROB_V4 = 52;
export const NUM_CM_PROB_V5 = 53;
export const NUM_CM_PROB_V6 = 54;
export const NUM_CM_PROB_V7 = 55;
export const NUM_CM_PROB_V8 = 57;
export const NUM_CM_PROB_V9 = 58;
export const NUM_CM_PROB = 58;
export const DN_ROOT_ENUMERATED = 1;
export const DN_DRIVER_LOADED = 2;
export const DN_ENUM_LOADED = 4;
export const DN_STARTED = 8;
export const DN_MANUAL = 16;
export const DN_NEED_TO_ENUM = 32;
export const DN_NOT_FIRST_TIME = 64;
export const DN_HARDWARE_ENUM = 128;
export const DN_LIAR = 256;
export const DN_HAS_MARK = 512;
export const DN_HAS_PROBLEM = 1024;
export const DN_FILTERED = 2048;
export const DN_MOVED = 4096;
export const DN_DISABLEABLE = 8192;
export const DN_REMOVABLE = 16384;
export const DN_PRIVATE_PROBLEM = 32768;
export const DN_MF_PARENT = 65536;
export const DN_MF_CHILD = 131072;
export const DN_WILL_BE_REMOVED = 262144;
export const DN_NOT_FIRST_TIMEE = 524288;
export const DN_STOP_FREE_RES = 1048576;
export const DN_REBAL_CANDIDATE = 2097152;
export const DN_BAD_PARTIAL = 4194304;
export const DN_NT_ENUMERATOR = 8388608;
export const DN_NT_DRIVER = 16777216;
export const DN_NEEDS_LOCKING = 33554432;
export const DN_ARM_WAKEUP = 67108864;
export const DN_APM_ENUMERATOR = 134217728;
export const DN_APM_DRIVER = 268435456;
export const DN_SILENT_INSTALL = 536870912;
export const DN_NO_SHOW_IN_DM = 1073741824;
export const DN_BOOT_LOG_PROB = 2147483648;
export const DN_NEED_RESTART = 256;
export const DN_DRIVER_BLOCKED = 64;
export const DN_LEGACY_DRIVER = 4096;
export const DN_CHILD_WITH_INVALID_ID = 512;
export const DN_DEVICE_DISCONNECTED = 33554432;
export const DN_QUERY_REMOVE_PENDING = 65536;
export const DN_QUERY_REMOVE_ACTIVE = 131072;
export const LCPRI_FORCECONFIG = 0;
export const LCPRI_BOOTCONFIG = 1;
export const LCPRI_DESIRED = 8192;
export const LCPRI_NORMAL = 12288;
export const LCPRI_LASTBESTCONFIG = 16383;
export const LCPRI_SUBOPTIMAL = 20480;
export const LCPRI_LASTSOFTCONFIG = 32767;
export const LCPRI_RESTART = 32768;
export const LCPRI_REBOOT = 36864;
export const LCPRI_POWEROFF = 40960;
export const LCPRI_HARDRECONFIG = 49152;
export const LCPRI_HARDWIRED = 57344;
export const LCPRI_IMPOSSIBLE = 61440;
export const LCPRI_DISABLED = 65535;
export const MAX_LCPRI = 65535;
export const CM_DEVICE_PANEL_SIDE_UNKNOWN = 0;
export const CM_DEVICE_PANEL_SIDE_TOP = 1;
export const CM_DEVICE_PANEL_SIDE_BOTTOM = 2;
export const CM_DEVICE_PANEL_SIDE_LEFT = 3;
export const CM_DEVICE_PANEL_SIDE_RIGHT = 4;
export const CM_DEVICE_PANEL_SIDE_FRONT = 5;
export const CM_DEVICE_PANEL_SIDE_BACK = 6;
export const CM_DEVICE_PANEL_EDGE_UNKNOWN = 0;
export const CM_DEVICE_PANEL_EDGE_TOP = 1;
export const CM_DEVICE_PANEL_EDGE_BOTTOM = 2;
export const CM_DEVICE_PANEL_EDGE_LEFT = 3;
export const CM_DEVICE_PANEL_EDGE_RIGHT = 4;
export const CM_DEVICE_PANEL_SHAPE_UNKNOWN = 0;
export const CM_DEVICE_PANEL_SHAPE_RECTANGLE = 1;
export const CM_DEVICE_PANEL_SHAPE_OVAL = 2;
export const CM_DEVICE_PANEL_ORIENTATION_HORIZONTAL = 0;
export const CM_DEVICE_PANEL_ORIENTATION_VERTICAL = 1;
export const CM_DEVICE_PANEL_JOINT_TYPE_UNKNOWN = 0;
export const CM_DEVICE_PANEL_JOINT_TYPE_PLANAR = 1;
export const CM_DEVICE_PANEL_JOINT_TYPE_HINGE = 2;
export const CM_DEVICE_PANEL_JOINT_TYPE_PIVOT = 3;
export const CM_DEVICE_PANEL_JOINT_TYPE_SWIVEL = 4;
export const LINE_LEN = 256;
export const MAX_INF_STRING_LENGTH = 4096;
export const MAX_INF_SECTION_NAME_LENGTH = 255;
export const MAX_TITLE_LEN = 60;
export const MAX_INSTRUCTION_LEN = 256;
export const MAX_LABEL_LEN = 30;
export const MAX_SERVICE_NAME_LEN = 256;
export const MAX_SUBTITLE_LEN = 256;
export const SP_MAX_MACHINENAME_LENGTH = 263;
export const SP_ALTPLATFORM_FLAGS_VERSION_RANGE = 1;
export const SP_ALTPLATFORM_FLAGS_SUITE_MASK = 2;
export const INF_STYLE_CACHE_ENABLE = 16;
export const INF_STYLE_CACHE_DISABLE = 32;
export const INF_STYLE_CACHE_IGNORE = 64;
export const DIRID_ABSOLUTE = "-1";
export const DIRID_ABSOLUTE_16BIT = 65535;
export const DIRID_NULL = 0;
export const DIRID_SRCPATH = 1;
export const DIRID_WINDOWS = 10;
export const DIRID_SYSTEM = 11;
export const DIRID_DRIVERS = 12;
export const DIRID_IOSUBSYS = 12;
export const DIRID_DRIVER_STORE = 13;
export const DIRID_INF = 17;
export const DIRID_HELP = 18;
export const DIRID_FONTS = 20;
export const DIRID_VIEWERS = 21;
export const DIRID_COLOR = 23;
export const DIRID_APPS = 24;
export const DIRID_SHARED = 25;
export const DIRID_BOOT = 30;
export const DIRID_SYSTEM16 = 50;
export const DIRID_SPOOL = 51;
export const DIRID_SPOOLDRIVERS = 52;
export const DIRID_USERPROFILE = 53;
export const DIRID_LOADER = 54;
export const DIRID_PRINTPROCESSOR = 55;
export const DIRID_DEFAULT = 11;
export const DIRID_COMMON_STARTMENU = 16406;
export const DIRID_COMMON_PROGRAMS = 16407;
export const DIRID_COMMON_STARTUP = 16408;
export const DIRID_COMMON_DESKTOPDIRECTORY = 16409;
export const DIRID_COMMON_FAVORITES = 16415;
export const DIRID_COMMON_APPDATA = 16419;
export const DIRID_PROGRAM_FILES = 16422;
export const DIRID_SYSTEM_X86 = 16425;
export const DIRID_PROGRAM_FILES_X86 = 16426;
export const DIRID_PROGRAM_FILES_COMMON = 16427;
export const DIRID_PROGRAM_FILES_COMMONX86 = 16428;
export const DIRID_COMMON_TEMPLATES = 16429;
export const DIRID_COMMON_DOCUMENTS = 16430;
export const DIRID_USER = 32768;
export const SPFILENOTIFY_STARTQUEUE = 1;
export const SPFILENOTIFY_ENDQUEUE = 2;
export const SPFILENOTIFY_STARTSUBQUEUE = 3;
export const SPFILENOTIFY_ENDSUBQUEUE = 4;
export const SPFILENOTIFY_STARTDELETE = 5;
export const SPFILENOTIFY_ENDDELETE = 6;
export const SPFILENOTIFY_DELETEERROR = 7;
export const SPFILENOTIFY_STARTRENAME = 8;
export const SPFILENOTIFY_ENDRENAME = 9;
export const SPFILENOTIFY_RENAMEERROR = 10;
export const SPFILENOTIFY_STARTCOPY = 11;
export const SPFILENOTIFY_ENDCOPY = 12;
export const SPFILENOTIFY_COPYERROR = 13;
export const SPFILENOTIFY_NEEDMEDIA = 14;
export const SPFILENOTIFY_QUEUESCAN = 15;
export const SPFILENOTIFY_CABINETINFO = 16;
export const SPFILENOTIFY_FILEINCABINET = 17;
export const SPFILENOTIFY_NEEDNEWCABINET = 18;
export const SPFILENOTIFY_FILEEXTRACTED = 19;
export const SPFILENOTIFY_FILEOPDELAYED = 20;
export const SPFILENOTIFY_STARTBACKUP = 21;
export const SPFILENOTIFY_BACKUPERROR = 22;
export const SPFILENOTIFY_ENDBACKUP = 23;
export const SPFILENOTIFY_QUEUESCAN_EX = 24;
export const SPFILENOTIFY_STARTREGISTRATION = 25;
export const SPFILENOTIFY_ENDREGISTRATION = 32;
export const SPFILENOTIFY_QUEUESCAN_SIGNERINFO = 64;
export const SPFILENOTIFY_LANGMISMATCH = 65536;
export const SPFILENOTIFY_TARGETEXISTS = 131072;
export const SPFILENOTIFY_TARGETNEWER = 262144;
export const FILEOP_RENAME = 1;
export const FILEOP_BACKUP = 3;
export const FILEOP_ABORT = 0;
export const FILEOP_DOIT = 1;
export const FILEOP_SKIP = 2;
export const FILEOP_RETRY = 1;
export const FILEOP_NEWPATH = 4;
export const COPYFLG_WARN_IF_SKIP = 1;
export const COPYFLG_NOSKIP = 2;
export const COPYFLG_NOVERSIONCHECK = 4;
export const COPYFLG_FORCE_FILE_IN_USE = 8;
export const COPYFLG_NO_OVERWRITE = 16;
export const COPYFLG_NO_VERSION_DIALOG = 32;
export const COPYFLG_OVERWRITE_OLDER_ONLY = 64;
export const COPYFLG_PROTECTED_WINDOWS_DRIVER_FILE = 256;
export const COPYFLG_REPLACEONLY = 1024;
export const COPYFLG_NODECOMP = 2048;
export const COPYFLG_REPLACE_BOOT_FILE = 4096;
export const COPYFLG_NOPRUNE = 8192;
export const COPYFLG_IN_USE_TRY_RENAME = 16384;
export const DELFLG_IN_USE = 1;
export const DELFLG_IN_USE1 = 65536;
export const SPREG_SUCCESS = 0;
export const SPREG_LOADLIBRARY = 1;
export const SPREG_GETPROCADDR = 2;
export const SPREG_REGSVR = 3;
export const SPREG_DLLINSTALL = 4;
export const SPREG_TIMEOUT = 5;
export const SPREG_UNKNOWN = 4294967295;
export const SPINT_ACTIVE = 1;
export const SPINT_DEFAULT = 2;
export const SPINT_REMOVED = 4;
export const SPID_ACTIVE = 1;
export const SPID_DEFAULT = 2;
export const SPID_REMOVED = 4;
export const DIF_SELECTDEVICE = 1;
export const DIF_INSTALLDEVICE = 2;
export const DIF_ASSIGNRESOURCES = 3;
export const DIF_PROPERTIES = 4;
export const DIF_REMOVE = 5;
export const DIF_FIRSTTIMESETUP = 6;
export const DIF_FOUNDDEVICE = 7;
export const DIF_SELECTCLASSDRIVERS = 8;
export const DIF_VALIDATECLASSDRIVERS = 9;
export const DIF_INSTALLCLASSDRIVERS = 10;
export const DIF_CALCDISKSPACE = 11;
export const DIF_DESTROYPRIVATEDATA = 12;
export const DIF_VALIDATEDRIVER = 13;
export const DIF_DETECT = 15;
export const DIF_INSTALLWIZARD = 16;
export const DIF_DESTROYWIZARDDATA = 17;
export const DIF_PROPERTYCHANGE = 18;
export const DIF_ENABLECLASS = 19;
export const DIF_DETECTVERIFY = 20;
export const DIF_INSTALLDEVICEFILES = 21;
export const DIF_UNREMOVE = 22;
export const DIF_SELECTBESTCOMPATDRV = 23;
export const DIF_ALLOW_INSTALL = 24;
export const DIF_REGISTERDEVICE = 25;
export const DIF_NEWDEVICEWIZARD_PRESELECT = 26;
export const DIF_NEWDEVICEWIZARD_SELECT = 27;
export const DIF_NEWDEVICEWIZARD_PREANALYZE = 28;
export const DIF_NEWDEVICEWIZARD_POSTANALYZE = 29;
export const DIF_NEWDEVICEWIZARD_FINISHINSTALL = 30;
export const DIF_UNUSED1 = 31;
export const DIF_INSTALLINTERFACES = 32;
export const DIF_DETECTCANCEL = 33;
export const DIF_REGISTER_COINSTALLERS = 34;
export const DIF_ADDPROPERTYPAGE_ADVANCED = 35;
export const DIF_ADDPROPERTYPAGE_BASIC = 36;
export const DIF_RESERVED1 = 37;
export const DIF_TROUBLESHOOTER = 38;
export const DIF_POWERMESSAGEWAKE = 39;
export const DIF_ADDREMOTEPROPERTYPAGE_ADVANCED = 40;
export const DIF_UPDATEDRIVER_UI = 41;
export const DIF_FINISHINSTALL_ACTION = 42;
export const DIF_RESERVED2 = 48;
export const DIF_MOVEDEVICE = 14;
export const DI_SHOWOEM = 1;
export const DI_SHOWCOMPAT = 2;
export const DI_SHOWCLASS = 4;
export const DI_SHOWALL = 7;
export const DI_NOVCP = 8;
export const DI_DIDCOMPAT = 16;
export const DI_DIDCLASS = 32;
export const DI_AUTOASSIGNRES = 64;
export const DI_NEEDRESTART = 128;
export const DI_NEEDREBOOT = 256;
export const DI_NOBROWSE = 512;
export const DI_MULTMFGS = 1024;
export const DI_DISABLED = 2048;
export const DI_GENERALPAGE_ADDED = 4096;
export const DI_RESOURCEPAGE_ADDED = 8192;
export const DI_PROPERTIES_CHANGE = 16384;
export const DI_INF_IS_SORTED = 32768;
export const DI_ENUMSINGLEINF = 65536;
export const DI_DONOTCALLCONFIGMG = 131072;
export const DI_INSTALLDISABLED = 262144;
export const DI_COMPAT_FROM_CLASS = 524288;
export const DI_CLASSINSTALLPARAMS = 1048576;
export const DI_NODI_DEFAULTACTION = 2097152;
export const DI_QUIETINSTALL = 8388608;
export const DI_NOFILECOPY = 16777216;
export const DI_FORCECOPY = 33554432;
export const DI_DRIVERPAGE_ADDED = 67108864;
export const DI_USECI_SELECTSTRINGS = 134217728;
export const DI_OVERRIDE_INFFLAGS = 268435456;
export const DI_PROPS_NOCHANGEUSAGE = 536870912;
export const DI_NOSELECTICONS = 1073741824;
export const DI_NOWRITE_IDS = "-2147483648";
export const DI_FLAGSEX_RESERVED2 = 1;
export const DI_FLAGSEX_RESERVED3 = 2;
export const DI_FLAGSEX_CI_FAILED = 4;
export const DI_FLAGSEX_FINISHINSTALL_ACTION = 8;
export const DI_FLAGSEX_DIDINFOLIST = 16;
export const DI_FLAGSEX_DIDCOMPATINFO = 32;
export const DI_FLAGSEX_FILTERCLASSES = 64;
export const DI_FLAGSEX_SETFAILEDINSTALL = 128;
export const DI_FLAGSEX_DEVICECHANGE = 256;
export const DI_FLAGSEX_ALWAYSWRITEIDS = 512;
export const DI_FLAGSEX_PROPCHANGE_PENDING = 1024;
export const DI_FLAGSEX_ALLOWEXCLUDEDDRVS = 2048;
export const DI_FLAGSEX_NOUIONQUERYREMOVE = 4096;
export const DI_FLAGSEX_USECLASSFORCOMPAT = 8192;
export const DI_FLAGSEX_RESERVED4 = 16384;
export const DI_FLAGSEX_NO_DRVREG_MODIFY = 32768;
export const DI_FLAGSEX_IN_SYSTEM_SETUP = 65536;
export const DI_FLAGSEX_INET_DRIVER = 131072;
export const DI_FLAGSEX_APPENDDRIVERLIST = 262144;
export const DI_FLAGSEX_PREINSTALLBACKUP = 524288;
export const DI_FLAGSEX_BACKUPONREPLACE = 1048576;
export const DI_FLAGSEX_DRIVERLIST_FROM_URL = 2097152;
export const DI_FLAGSEX_RESERVED1 = 4194304;
export const DI_FLAGSEX_EXCLUDE_OLD_INET_DRIVERS = 8388608;
export const DI_FLAGSEX_POWERPAGE_ADDED = 16777216;
export const DI_FLAGSEX_FILTERSIMILARDRIVERS = 33554432;
export const DI_FLAGSEX_INSTALLEDDRIVER = 67108864;
export const DI_FLAGSEX_NO_CLASSLIST_NODE_MERGE = 134217728;
export const DI_FLAGSEX_ALTPLATFORM_DRVSEARCH = 268435456;
export const DI_FLAGSEX_RESTART_DEVICE_ONLY = 536870912;
export const DI_FLAGSEX_RECURSIVESEARCH = 1073741824;
export const DI_FLAGSEX_SEARCH_PUBLISHED_INFS = "-2147483648";
export const ENABLECLASS_QUERY = 0;
export const ENABLECLASS_SUCCESS = 1;
export const ENABLECLASS_FAILURE = 2;
export const DICS_ENABLE = 1;
export const DICS_DISABLE = 2;
export const DICS_PROPCHANGE = 3;
export const DICS_START = 4;
export const DICS_STOP = 5;
export const DICS_FLAG_GLOBAL = 1;
export const DICS_FLAG_CONFIGSPECIFIC = 2;
export const DICS_FLAG_CONFIGGENERAL = 4;
export const DI_REMOVEDEVICE_GLOBAL = 1;
export const DI_REMOVEDEVICE_CONFIGSPECIFIC = 2;
export const DI_UNREMOVEDEVICE_CONFIGSPECIFIC = 2;
export const MAX_INSTALLWIZARD_DYNAPAGES = 20;
export const NDW_INSTALLFLAG_DIDFACTDEFS = 1;
export const NDW_INSTALLFLAG_HARDWAREALLREADYIN = 2;
export const NDW_INSTALLFLAG_NEEDRESTART = 128;
export const NDW_INSTALLFLAG_NEEDREBOOT = 256;
export const NDW_INSTALLFLAG_NEEDSHUTDOWN = 512;
export const NDW_INSTALLFLAG_EXPRESSINTRO = 1024;
export const NDW_INSTALLFLAG_SKIPISDEVINSTALLED = 2048;
export const NDW_INSTALLFLAG_NODETECTEDDEVS = 4096;
export const NDW_INSTALLFLAG_INSTALLSPECIFIC = 8192;
export const NDW_INSTALLFLAG_SKIPCLASSLIST = 16384;
export const NDW_INSTALLFLAG_CI_PICKED_OEM = 32768;
export const NDW_INSTALLFLAG_PCMCIAMODE = 65536;
export const NDW_INSTALLFLAG_PCMCIADEVICE = 131072;
export const NDW_INSTALLFLAG_USERCANCEL = 262144;
export const NDW_INSTALLFLAG_KNOWNCLASS = 524288;
export const DYNAWIZ_FLAG_PAGESADDED = 1;
export const DYNAWIZ_FLAG_ANALYZE_HANDLECONFLICT = 8;
export const DYNAWIZ_FLAG_INSTALLDET_NEXT = 2;
export const DYNAWIZ_FLAG_INSTALLDET_PREV = 4;
export const MIN_IDD_DYNAWIZ_RESOURCE_ID = 10000;
export const MAX_IDD_DYNAWIZ_RESOURCE_ID = 11000;
export const IDD_DYNAWIZ_FIRSTPAGE = 10000;
export const IDD_DYNAWIZ_SELECT_PREVPAGE = 10001;
export const IDD_DYNAWIZ_SELECT_NEXTPAGE = 10002;
export const IDD_DYNAWIZ_ANALYZE_PREVPAGE = 10003;
export const IDD_DYNAWIZ_ANALYZE_NEXTPAGE = 10004;
export const IDD_DYNAWIZ_SELECTDEV_PAGE = 10009;
export const IDD_DYNAWIZ_ANALYZEDEV_PAGE = 10010;
export const IDD_DYNAWIZ_INSTALLDETECTEDDEVS_PAGE = 10011;
export const IDD_DYNAWIZ_SELECTCLASS_PAGE = 10012;
export const IDD_DYNAWIZ_INSTALLDETECTED_PREVPAGE = 10006;
export const IDD_DYNAWIZ_INSTALLDETECTED_NEXTPAGE = 10007;
export const IDD_DYNAWIZ_INSTALLDETECTED_NODEVS = 10008;
export const DNF_DUPDESC = 1;
export const DNF_OLDDRIVER = 2;
export const DNF_EXCLUDEFROMLIST = 4;
export const DNF_NODRIVER = 8;
export const DNF_LEGACYINF = 16;
export const DNF_CLASS_DRIVER = 32;
export const DNF_COMPATIBLE_DRIVER = 64;
export const DNF_INET_DRIVER = 128;
export const DNF_UNUSED1 = 256;
export const DNF_UNUSED2 = 512;
export const DNF_OLD_INET_DRIVER = 1024;
export const DNF_BAD_DRIVER = 2048;
export const DNF_DUPPROVIDER = 4096;
export const DNF_INF_IS_SIGNED = 8192;
export const DNF_OEM_F6_INF = 16384;
export const DNF_DUPDRIVERVER = 32768;
export const DNF_BASIC_DRIVER = 65536;
export const DNF_AUTHENTICODE_SIGNED = 131072;
export const DNF_INSTALLEDDRIVER = 262144;
export const DNF_ALWAYSEXCLUDEFROMLIST = 524288;
export const DNF_INBOX_DRIVER = 1048576;
export const DNF_REQUESTADDITIONALSOFTWARE = 2097152;
export const DNF_UNUSED_22 = 4194304;
export const DNF_UNUSED_23 = 8388608;
export const DNF_UNUSED_24 = 16777216;
export const DNF_UNUSED_25 = 33554432;
export const DNF_UNUSED_26 = 67108864;
export const DNF_UNUSED_27 = 134217728;
export const DNF_UNUSED_28 = 268435456;
export const DNF_UNUSED_29 = 536870912;
export const DNF_UNUSED_30 = 1073741824;
export const DNF_UNUSED_31 = 2147483648;
export const DRIVER_HARDWAREID_RANK = 4095;
export const DRIVER_HARDWAREID_MASK = 2147487743;
export const DRIVER_UNTRUSTED_RANK = 2147483648;
export const DRIVER_W9X_SUSPECT_RANK = 3221225472;
export const DRIVER_COMPATID_RANK = 16383;
export const DRIVER_UNTRUSTED_HARDWAREID_RANK = 36863;
export const DRIVER_UNTRUSTED_COMPATID_RANK = 49151;
export const DRIVER_W9X_SUSPECT_HARDWAREID_RANK = 53247;
export const DRIVER_W9X_SUSPECT_COMPATID_RANK = 65535;
export const SPPSR_SELECT_DEVICE_RESOURCES = 1;
export const SPPSR_ENUM_BASIC_DEVICE_PROPERTIES = 2;
export const SPPSR_ENUM_ADV_DEVICE_PROPERTIES = 3;
export const INFINFO_INF_SPEC_IS_HINF = 1;
export const INFINFO_INF_NAME_IS_ABSOLUTE = 2;
export const INFINFO_DEFAULT_SEARCH = 3;
export const INFINFO_REVERSE_DEFAULT_SEARCH = 4;
export const INFINFO_INF_PATH_LIST_SEARCH = 5;
export const FILE_COMPRESSION_NONE = 0;
export const FILE_COMPRESSION_WINLZA = 1;
export const FILE_COMPRESSION_MSZIP = 2;
export const FILE_COMPRESSION_NTCAB = 3;
export const SRCLIST_TEMPORARY = 1;
export const SRCLIST_NOBROWSE = 2;
export const SRCLIST_SYSTEM = 16;
export const SRCLIST_USER = 32;
export const SRCLIST_SYSIFADMIN = 64;
export const SRCLIST_SUBDIRS = 256;
export const SRCLIST_APPEND = 512;
export const SRCLIST_NOSTRIPPLATFORM = 1024;
export const IDF_NOBROWSE = 1;
export const IDF_NOSKIP = 2;
export const IDF_NODETAILS = 4;
export const IDF_NOCOMPRESSED = 8;
export const IDF_CHECKFIRST = 256;
export const IDF_NOBEEP = 512;
export const IDF_NOFOREGROUND = 1024;
export const IDF_WARNIFSKIP = 2048;
export const IDF_NOREMOVABLEMEDIAPROMPT = 4096;
export const IDF_USEDISKNAMEASPROMPT = 8192;
export const IDF_OEMDISK = 2147483648;
export const DPROMPT_SUCCESS = 0;
export const DPROMPT_CANCEL = 1;
export const DPROMPT_SKIPFILE = 2;
export const DPROMPT_BUFFERTOOSMALL = 3;
export const DPROMPT_OUTOFMEMORY = 4;
export const SETDIRID_NOT_FULL_PATH = 1;
export const SRCINFO_PATH = 1;
export const SRCINFO_TAGFILE = 2;
export const SRCINFO_DESCRIPTION = 3;
export const SRCINFO_FLAGS = 4;
export const SRCINFO_TAGFILE2 = 5;
export const SRC_FLAGS_CABFILE = 16;
export const SP_FLAG_CABINETCONTINUATION = 2048;
export const SP_BACKUP_BACKUPPASS = 1;
export const SP_BACKUP_DEMANDPASS = 2;
export const SP_BACKUP_SPECIAL = 4;
export const SP_BACKUP_BOOTFILE = 8;
export const SPQ_SCAN_FILE_PRESENCE = 1;
export const SPQ_SCAN_FILE_VALIDITY = 2;
export const SPQ_SCAN_USE_CALLBACK = 4;
export const SPQ_SCAN_USE_CALLBACKEX = 8;
export const SPQ_SCAN_INFORM_USER = 16;
export const SPQ_SCAN_PRUNE_COPY_QUEUE = 32;
export const SPQ_SCAN_USE_CALLBACK_SIGNERINFO = 64;
export const SPQ_SCAN_PRUNE_DELREN = 128;
export const SPQ_SCAN_FILE_PRESENCE_WITHOUT_SOURCE = 256;
export const SPQ_SCAN_FILE_COMPARISON = 512;
export const SPQ_SCAN_ACTIVATE_DRP = 1024;
export const SPQ_DELAYED_COPY = 1;
export const SPQ_FLAG_BACKUP_AWARE = 1;
export const SPQ_FLAG_ABORT_IF_UNSIGNED = 2;
export const SPQ_FLAG_FILES_MODIFIED = 4;
export const SPQ_FLAG_DO_SHUFFLEMOVE = 8;
export const SPQ_FLAG_VALID = 15;
export const SPOST_MAX = 3;
export const SUOI_FORCEDELETE = 1;
export const SUOI_INTERNAL1 = 2;
export const SPDSL_IGNORE_DISK = 1;
export const SPDSL_DISALLOW_NEGATIVE_ADJUST = 2;
export const SPFILEQ_FILE_IN_USE = 1;
export const SPFILEQ_REBOOT_RECOMMENDED = 2;
export const SPFILEQ_REBOOT_IN_PROGRESS = 4;
export const FLG_ADDREG_DELREG_BIT = 32768;
export const FLG_ADDREG_BINVALUETYPE = 1;
export const FLG_ADDREG_NOCLOBBER = 2;
export const FLG_ADDREG_DELVAL = 4;
export const FLG_ADDREG_APPEND = 8;
export const FLG_ADDREG_KEYONLY = 16;
export const FLG_ADDREG_OVERWRITEONLY = 32;
export const FLG_ADDREG_64BITKEY = 4096;
export const FLG_ADDREG_KEYONLY_COMMON = 8192;
export const FLG_ADDREG_32BITKEY = 16384;
export const FLG_ADDREG_TYPE_SZ = 0;
export const FLG_ADDREG_TYPE_MULTI_SZ = 65536;
export const FLG_ADDREG_TYPE_EXPAND_SZ = 131072;
export const FLG_DELREG_VALUE = 0;
export const FLG_DELREG_TYPE_SZ = 0;
export const FLG_DELREG_TYPE_MULTI_SZ = 65536;
export const FLG_DELREG_TYPE_EXPAND_SZ = 131072;
export const FLG_DELREG_64BITKEY = 4096;
export const FLG_DELREG_KEYONLY_COMMON = 8192;
export const FLG_DELREG_32BITKEY = 16384;
export const FLG_DELREG_OPERATION_MASK = 254;
export const FLG_BITREG_CLEARBITS = 0;
export const FLG_BITREG_SETBITS = 1;
export const FLG_BITREG_64BITKEY = 4096;
export const FLG_BITREG_32BITKEY = 16384;
export const FLG_INI2REG_64BITKEY = 4096;
export const FLG_INI2REG_32BITKEY = 16384;
export const FLG_REGSVR_DLLREGISTER = 1;
export const FLG_REGSVR_DLLINSTALL = 2;
export const FLG_PROFITEM_CURRENTUSER = 1;
export const FLG_PROFITEM_DELETE = 2;
export const FLG_PROFITEM_GROUP = 4;
export const FLG_PROFITEM_CSIDL = 8;
export const FLG_ADDPROPERTY_NOCLOBBER = 1;
export const FLG_ADDPROPERTY_OVERWRITEONLY = 2;
export const FLG_ADDPROPERTY_APPEND = 4;
export const FLG_ADDPROPERTY_OR = 8;
export const FLG_ADDPROPERTY_AND = 16;
export const FLG_DELPROPERTY_MULTI_SZ_DELSTRING = 1;
export const SPINST_LOGCONFIG = 1;
export const SPINST_INIFILES = 2;
export const SPINST_REGISTRY = 4;
export const SPINST_INI2REG = 8;
export const SPINST_FILES = 16;
export const SPINST_BITREG = 32;
export const SPINST_REGSVR = 64;
export const SPINST_UNREGSVR = 128;
export const SPINST_PROFILEITEMS = 256;
export const SPINST_COPYINF = 512;
export const SPINST_PROPERTIES = 1024;
export const SPINST_ALL = 2047;
export const SPINST_SINGLESECTION = 65536;
export const SPINST_LOGCONFIG_IS_FORCED = 131072;
export const SPINST_LOGCONFIGS_ARE_OVERRIDES = 262144;
export const SPINST_REGISTERCALLBACKAWARE = 524288;
export const SPINST_DEVICEINSTALL = 1048576;
export const SPSVCINST_TAGTOFRONT = 1;
export const SPSVCINST_ASSOCSERVICE = 2;
export const SPSVCINST_DELETEEVENTLOGENTRY = 4;
export const SPSVCINST_NOCLOBBER_DISPLAYNAME = 8;
export const SPSVCINST_NOCLOBBER_STARTTYPE = 16;
export const SPSVCINST_NOCLOBBER_ERRORCONTROL = 32;
export const SPSVCINST_NOCLOBBER_LOADORDERGROUP = 64;
export const SPSVCINST_NOCLOBBER_DEPENDENCIES = 128;
export const SPSVCINST_NOCLOBBER_DESCRIPTION = 256;
export const SPSVCINST_STOPSERVICE = 512;
export const SPSVCINST_CLOBBER_SECURITY = 1024;
export const SPSVCINST_STARTSERVICE = 2048;
export const SPSVCINST_NOCLOBBER_REQUIREDPRIVILEGES = 4096;
export const SPSVCINST_NOCLOBBER_TRIGGERS = 8192;
export const SPSVCINST_NOCLOBBER_SERVICESIDTYPE = 16384;
export const SPSVCINST_NOCLOBBER_DELAYEDAUTOSTART = 32768;
export const SPSVCINST_UNIQUE_NAME = 65536;
export const SPFILELOG_SYSTEMLOG = 1;
export const SPFILELOG_FORCENEW = 2;
export const SPFILELOG_QUERYONLY = 4;
export const SPFILELOG_OEMFILE = 1;
export const LogSevInformation = 0;
export const LogSevWarning = 1;
export const LogSevError = 2;
export const LogSevFatalError = 3;
export const LogSevMaximum = 4;
export const DICD_GENERATE_ID = 1;
export const DICD_INHERIT_CLASSDRVS = 2;
export const DIOD_INHERIT_CLASSDRVS = 2;
export const DIOD_CANCEL_REMOVE = 4;
export const DIODI_NO_ADD = 1;
export const SPRDI_FIND_DUPS = 1;
export const SPDIT_NODRIVER = 0;
export const DIGCF_DEFAULT = 1;
export const DIGCF_PRESENT = 2;
export const DIGCF_ALLCLASSES = 4;
export const DIGCF_PROFILE = 8;
export const DIGCF_DEVICEINTERFACE = 16;
export const DIGCF_INTERFACEDEVICE = 16;
export const DIBCI_NOINSTALLCLASS = 1;
export const DIBCI_NODISPLAYCLASS = 2;
export const DIOCR_INSTALLER = 1;
export const DIOCR_INTERFACE = 2;
export const DIREG_DEV = 1;
export const DIREG_DRV = 2;
export const DIREG_BOTH = 4;
export const DICLASSPROP_INSTALLER = 1;
export const DICLASSPROP_INTERFACE = 2;
export const SPDRP_DEVICEDESC = 0;
export const SPDRP_HARDWAREID = 1;
export const SPDRP_COMPATIBLEIDS = 2;
export const SPDRP_UNUSED0 = 3;
export const SPDRP_SERVICE = 4;
export const SPDRP_UNUSED1 = 5;
export const SPDRP_UNUSED2 = 6;
export const SPDRP_CLASS = 7;
export const SPDRP_CLASSGUID = 8;
export const SPDRP_DRIVER = 9;
export const SPDRP_CONFIGFLAGS = 10;
export const SPDRP_MFG = 11;
export const SPDRP_FRIENDLYNAME = 12;
export const SPDRP_LOCATION_INFORMATION = 13;
export const SPDRP_PHYSICAL_DEVICE_OBJECT_NAME = 14;
export const SPDRP_CAPABILITIES = 15;
export const SPDRP_UI_NUMBER = 16;
export const SPDRP_UPPERFILTERS = 17;
export const SPDRP_LOWERFILTERS = 18;
export const SPDRP_BUSTYPEGUID = 19;
export const SPDRP_LEGACYBUSTYPE = 20;
export const SPDRP_BUSNUMBER = 21;
export const SPDRP_ENUMERATOR_NAME = 22;
export const SPDRP_SECURITY = 23;
export const SPDRP_SECURITY_SDS = 24;
export const SPDRP_DEVTYPE = 25;
export const SPDRP_EXCLUSIVE = 26;
export const SPDRP_CHARACTERISTICS = 27;
export const SPDRP_ADDRESS = 28;
export const SPDRP_UI_NUMBER_DESC_FORMAT = 29;
export const SPDRP_DEVICE_POWER_DATA = 30;
export const SPDRP_REMOVAL_POLICY = 31;
export const SPDRP_REMOVAL_POLICY_HW_DEFAULT = 32;
export const SPDRP_REMOVAL_POLICY_OVERRIDE = 33;
export const SPDRP_INSTALL_STATE = 34;
export const SPDRP_LOCATION_PATHS = 35;
export const SPDRP_BASE_CONTAINERID = 36;
export const SPDRP_MAXIMUM_PROPERTY = 37;
export const SPCRP_UPPERFILTERS = 17;
export const SPCRP_LOWERFILTERS = 18;
export const SPCRP_SECURITY = 23;
export const SPCRP_SECURITY_SDS = 24;
export const SPCRP_DEVTYPE = 25;
export const SPCRP_EXCLUSIVE = 26;
export const SPCRP_CHARACTERISTICS = 27;
export const SPCRP_MAXIMUM_PROPERTY = 28;
export const DMI_MASK = 1;
export const DMI_BKCOLOR = 2;
export const DMI_USERECT = 4;
export const DIGCDP_FLAG_BASIC = 1;
export const DIGCDP_FLAG_ADVANCED = 2;
export const DIGCDP_FLAG_REMOTE_BASIC = 3;
export const DIGCDP_FLAG_REMOTE_ADVANCED = 4;
export const IDI_RESOURCEFIRST = 159;
export const IDI_RESOURCE = 159;
export const IDI_RESOURCELAST = 161;
export const IDI_RESOURCEOVERLAYFIRST = 161;
export const IDI_RESOURCEOVERLAYLAST = 161;
export const IDI_CONFLICT = 161;
export const IDI_CLASSICON_OVERLAYFIRST = 500;
export const IDI_CLASSICON_OVERLAYLAST = 502;
export const IDI_PROBLEM_OVL = 500;
export const IDI_DISABLED_OVL = 501;
export const IDI_FORCED_OVL = 502;
export const SPWPT_SELECTDEVICE = 1;
export const SPWP_USE_DEVINFO_DATA = 1;
export const SIGNERSCORE_UNKNOWN = 4278190080;
export const SIGNERSCORE_W9X_SUSPECT = 3221225472;
export const SIGNERSCORE_UNSIGNED = 2147483648;
export const SIGNERSCORE_AUTHENTICODE = 251658240;
export const SIGNERSCORE_WHQL = 218103813;
export const SIGNERSCORE_UNCLASSIFIED = 218103812;
export const SIGNERSCORE_INBOX = 218103811;
export const SIGNERSCORE_LOGO_STANDARD = 218103810;
export const SIGNERSCORE_LOGO_PREMIUM = 218103809;
export const SIGNERSCORE_MASK = 4278190080;
export const SIGNERSCORE_SIGNED_MASK = 4026531840;
export const DICUSTOMDEVPROP_MERGE_MULTISZ = 1;
export const SCWMI_CLOBBER_SECURITY = 1;
export const MAX_DEVICE_ID_LEN = 200;
export const MAX_DEVNODE_ID_LEN = 200;
export const MAX_GUID_STRING_LEN = 39;
export const MAX_CLASS_NAME_LEN = 32;
export const MAX_PROFILE_LEN = 80;
export const MAX_CONFIG_VALUE = 9999;
export const MAX_INSTANCE_VALUE = 9999;
export const MAX_MEM_REGISTERS = 9;
export const MAX_IO_PORTS = 20;
export const MAX_IRQS = 7;
export const MAX_DMA_CHANNELS = 7;
export const DWORD_MAX = 4294967295;
export const CONFIGMG_VERSION = 1024;
export const CM_CDMASK_DEVINST = 1;
export const CM_CDMASK_RESDES = 2;
export const CM_CDMASK_FLAGS = 4;
export const CM_CDMASK_DESCRIPTION = 8;
export const CM_CDMASK_VALID = 15;
export const CM_CDFLAGS_DRIVER = 1;
export const CM_CDFLAGS_ROOT_OWNED = 2;
export const CM_CDFLAGS_RESERVED = 4;
export const mMD_MemoryType = 1;
export const fMD_MemoryType = 1;
export const fMD_ROM = 0;
export const fMD_RAM = 1;
export const mMD_32_24 = 2;
export const fMD_32_24 = 2;
export const fMD_24 = 0;
export const fMD_32 = 2;
export const mMD_Prefetchable = 4;
export const fMD_Prefetchable = 4;
export const fMD_Pref = 4;
export const fMD_PrefetchDisallowed = 0;
export const fMD_PrefetchAllowed = 4;
export const mMD_Readable = 8;
export const fMD_Readable = 8;
export const fMD_ReadAllowed = 0;
export const fMD_ReadDisallowed = 8;
export const mMD_CombinedWrite = 16;
export const fMD_CombinedWrite = 16;
export const fMD_CombinedWriteDisallowed = 0;
export const fMD_CombinedWriteAllowed = 16;
export const mMD_Cacheable = 32;
export const fMD_NonCacheable = 0;
export const fMD_Cacheable = 32;
export const fMD_WINDOW_DECODE = 64;
export const fMD_MEMORY_BAR = 128;
export const fIOD_PortType = 1;
export const fIOD_Memory = 0;
export const fIOD_IO = 1;
export const fIOD_DECODE = 252;
export const fIOD_10_BIT_DECODE = 4;
export const fIOD_12_BIT_DECODE = 8;
export const fIOD_16_BIT_DECODE = 16;
export const fIOD_POSITIVE_DECODE = 32;
export const fIOD_PASSIVE_DECODE = 64;
export const fIOD_WINDOW_DECODE = 128;
export const fIOD_PORT_BAR = 256;
export const IO_ALIAS_10_BIT_DECODE = 4;
export const IO_ALIAS_12_BIT_DECODE = 16;
export const IO_ALIAS_16_BIT_DECODE = 0;
export const IO_ALIAS_POSITIVE_DECODE = 255;
export const IOA_Local = 255;
export const mDD_Width = 3;
export const fDD_BYTE = 0;
export const fDD_WORD = 1;
export const fDD_DWORD = 2;
export const fDD_BYTE_AND_WORD = 3;
export const mDD_BusMaster = 4;
export const fDD_NoBusMaster = 0;
export const fDD_BusMaster = 4;
export const mDD_Type = 24;
export const fDD_TypeStandard = 0;
export const fDD_TypeA = 8;
export const fDD_TypeB = 16;
export const fDD_TypeF = 24;
export const mIRQD_Share = 1;
export const fIRQD_Exclusive = 0;
export const fIRQD_Share = 1;
export const fIRQD_Share_Bit = 0;
export const fIRQD_Level_Bit = 1;
export const mIRQD_Edge_Level = 2;
export const fIRQD_Level = 0;
export const fIRQD_Edge = 2;
export const CM_RESDES_WIDTH_DEFAULT = 0;
export const CM_RESDES_WIDTH_32 = 1;
export const CM_RESDES_WIDTH_64 = 2;
export const CM_RESDES_WIDTH_BITS = 3;
export const mPCD_IO_8_16 = 1;
export const fPCD_IO_8 = 0;
export const fPCD_IO_16 = 1;
export const mPCD_MEM_8_16 = 2;
export const fPCD_MEM_8 = 0;
export const fPCD_MEM_16 = 2;
export const mPCD_MEM_A_C = 12;
export const fPCD_MEM1_A = 4;
export const fPCD_MEM2_A = 8;
export const fPCD_IO_ZW_8 = 16;
export const fPCD_IO_SRC_16 = 32;
export const fPCD_IO_WS_16 = 64;
export const mPCD_MEM_WS = 768;
export const fPCD_MEM_WS_ONE = 256;
export const fPCD_MEM_WS_TWO = 512;
export const fPCD_MEM_WS_THREE = 768;
export const fPCD_MEM_A = 4;
export const fPCD_ATTRIBUTES_PER_WINDOW = 32768;
export const fPCD_IO1_16 = 65536;
export const fPCD_IO1_ZW_8 = 131072;
export const fPCD_IO1_SRC_16 = 262144;
export const fPCD_IO1_WS_16 = 524288;
export const fPCD_IO2_16 = 1048576;
export const fPCD_IO2_ZW_8 = 2097152;
export const fPCD_IO2_SRC_16 = 4194304;
export const fPCD_IO2_WS_16 = 8388608;
export const mPCD_MEM1_WS = 50331648;
export const fPCD_MEM1_WS_ONE = 16777216;
export const fPCD_MEM1_WS_TWO = 33554432;
export const fPCD_MEM1_WS_THREE = 50331648;
export const fPCD_MEM1_16 = 67108864;
export const mPCD_MEM2_WS = 805306368;
export const fPCD_MEM2_WS_ONE = 268435456;
export const fPCD_MEM2_WS_TWO = 536870912;
export const fPCD_MEM2_WS_THREE = 805306368;
export const fPCD_MEM2_16 = 1073741824;
export const PCD_MAX_MEMORY = 2;
export const PCD_MAX_IO = 2;
export const mPMF_AUDIO_ENABLE = 8;
export const fPMF_AUDIO_ENABLE = 8;
export const CM_HWPI_NOT_DOCKABLE = 0;
export const CM_HWPI_UNDOCKED = 1;
export const CM_HWPI_DOCKED = 2;
export const ResType_All = 0;
export const ResType_None = 0;
export const ResType_Mem = 1;
export const ResType_IO = 2;
export const ResType_DMA = 3;
export const ResType_IRQ = 4;
export const ResType_DoNotUse = 5;
export const ResType_BusNumber = 6;
export const ResType_MemLarge = 7;
export const ResType_MAX = 7;
export const ResType_Ignored_Bit = 32768;
export const ResType_ClassSpecific = 65535;
export const ResType_Reserved = 32768;
export const ResType_DevicePrivate = 32769;
export const ResType_PcCardConfig = 32770;
export const ResType_MfCardConfig = 32771;
export const ResType_Connection = 32772;
export const CM_ADD_RANGE_ADDIFCONFLICT = 0;
export const CM_ADD_RANGE_DONOTADDIFCONFLICT = 1;
export const CM_ADD_RANGE_BITS = 1;
export const BASIC_LOG_CONF = 0;
export const FILTERED_LOG_CONF = 1;
export const ALLOC_LOG_CONF = 2;
export const BOOT_LOG_CONF = 3;
export const FORCED_LOG_CONF = 4;
export const OVERRIDE_LOG_CONF = 5;
export const NUM_LOG_CONF = 6;
export const LOG_CONF_BITS = 7;
export const PRIORITY_EQUAL_FIRST = 8;
export const PRIORITY_EQUAL_LAST = 0;
export const PRIORITY_BIT = 8;
export const RegDisposition_OpenAlways = 0;
export const RegDisposition_OpenExisting = 1;
export const RegDisposition_Bits = 1;
export const CM_ADD_ID_HARDWARE = 0;
export const CM_ADD_ID_COMPATIBLE = 1;
export const CM_ADD_ID_BITS = 1;
export const CM_CREATE_DEVNODE_NORMAL = 0;
export const CM_CREATE_DEVNODE_NO_WAIT_INSTALL = 1;
export const CM_CREATE_DEVNODE_PHANTOM = 2;
export const CM_CREATE_DEVNODE_GENERATE_ID = 4;
export const CM_CREATE_DEVNODE_DO_NOT_INSTALL = 8;
export const CM_CREATE_DEVNODE_BITS = 15;
export const CM_CREATE_DEVINST_NORMAL = 0;
export const CM_CREATE_DEVINST_NO_WAIT_INSTALL = 1;
export const CM_CREATE_DEVINST_PHANTOM = 2;
export const CM_CREATE_DEVINST_GENERATE_ID = 4;
export const CM_CREATE_DEVINST_DO_NOT_INSTALL = 8;
export const CM_CREATE_DEVINST_BITS = 15;
export const CM_DELETE_CLASS_ONLY = 0;
export const CM_DELETE_CLASS_SUBKEYS = 1;
export const CM_DELETE_CLASS_INTERFACE = 2;
export const CM_DELETE_CLASS_BITS = 3;
export const CM_ENUMERATE_CLASSES_INSTALLER = 0;
export const CM_ENUMERATE_CLASSES_INTERFACE = 1;
export const CM_ENUMERATE_CLASSES_BITS = 1;
export const CM_DETECT_NEW_PROFILE = 1;
export const CM_DETECT_CRASHED = 2;
export const CM_DETECT_HWPROF_FIRST_BOOT = 4;
export const CM_DETECT_RUN = 2147483648;
export const CM_DETECT_BITS = 2147483655;
export const CM_DISABLE_POLITE = 0;
export const CM_DISABLE_ABSOLUTE = 1;
export const CM_DISABLE_HARDWARE = 2;
export const CM_DISABLE_UI_NOT_OK = 4;
export const CM_DISABLE_PERSIST = 8;
export const CM_DISABLE_BITS = 15;
export const CM_GETIDLIST_FILTER_NONE = 0;
export const CM_GETIDLIST_FILTER_ENUMERATOR = 1;
export const CM_GETIDLIST_FILTER_SERVICE = 2;
export const CM_GETIDLIST_FILTER_EJECTRELATIONS = 4;
export const CM_GETIDLIST_FILTER_REMOVALRELATIONS = 8;
export const CM_GETIDLIST_FILTER_POWERRELATIONS = 16;
export const CM_GETIDLIST_FILTER_BUSRELATIONS = 32;
export const CM_GETIDLIST_DONOTGENERATE = 268435520;
export const CM_GETIDLIST_FILTER_BITS = 268435583;
export const CM_GETIDLIST_FILTER_TRANSPORTRELATIONS = 128;
export const CM_GETIDLIST_FILTER_PRESENT = 256;
export const CM_GETIDLIST_FILTER_CLASS = 512;
export const CM_GET_DEVICE_INTERFACE_LIST_PRESENT = 0;
export const CM_GET_DEVICE_INTERFACE_LIST_ALL_DEVICES = 1;
export const CM_GET_DEVICE_INTERFACE_LIST_BITS = 1;
export const CM_DRP_DEVICEDESC = 1;
export const CM_DRP_HARDWAREID = 2;
export const CM_DRP_COMPATIBLEIDS = 3;
export const CM_DRP_UNUSED0 = 4;
export const CM_DRP_SERVICE = 5;
export const CM_DRP_UNUSED1 = 6;
export const CM_DRP_UNUSED2 = 7;
export const CM_DRP_CLASS = 8;
export const CM_DRP_CLASSGUID = 9;
export const CM_DRP_DRIVER = 10;
export const CM_DRP_CONFIGFLAGS = 11;
export const CM_DRP_MFG = 12;
export const CM_DRP_FRIENDLYNAME = 13;
export const CM_DRP_LOCATION_INFORMATION = 14;
export const CM_DRP_PHYSICAL_DEVICE_OBJECT_NAME = 15;
export const CM_DRP_CAPABILITIES = 16;
export const CM_DRP_UI_NUMBER = 17;
export const CM_DRP_UPPERFILTERS = 18;
export const CM_CRP_UPPERFILTERS = 18;
export const CM_DRP_LOWERFILTERS = 19;
export const CM_CRP_LOWERFILTERS = 19;
export const CM_DRP_BUSTYPEGUID = 20;
export const CM_DRP_LEGACYBUSTYPE = 21;
export const CM_DRP_BUSNUMBER = 22;
export const CM_DRP_ENUMERATOR_NAME = 23;
export const CM_DRP_SECURITY = 24;
export const CM_CRP_SECURITY = 24;
export const CM_DRP_SECURITY_SDS = 25;
export const CM_CRP_SECURITY_SDS = 25;
export const CM_DRP_DEVTYPE = 26;
export const CM_CRP_DEVTYPE = 26;
export const CM_DRP_EXCLUSIVE = 27;
export const CM_CRP_EXCLUSIVE = 27;
export const CM_DRP_CHARACTERISTICS = 28;
export const CM_CRP_CHARACTERISTICS = 28;
export const CM_DRP_ADDRESS = 29;
export const CM_DRP_UI_NUMBER_DESC_FORMAT = 30;
export const CM_DRP_DEVICE_POWER_DATA = 31;
export const CM_DRP_REMOVAL_POLICY = 32;
export const CM_DRP_REMOVAL_POLICY_HW_DEFAULT = 33;
export const CM_DRP_REMOVAL_POLICY_OVERRIDE = 34;
export const CM_DRP_INSTALL_STATE = 35;
export const CM_DRP_LOCATION_PATHS = 36;
export const CM_DRP_BASE_CONTAINERID = 37;
export const CM_DRP_MIN = 1;
export const CM_CRP_MIN = 1;
export const CM_DRP_MAX = 37;
export const CM_CRP_MAX = 37;
export const CM_DEVCAP_LOCKSUPPORTED = 1;
export const CM_DEVCAP_EJECTSUPPORTED = 2;
export const CM_DEVCAP_REMOVABLE = 4;
export const CM_DEVCAP_DOCKDEVICE = 8;
export const CM_DEVCAP_UNIQUEID = 16;
export const CM_DEVCAP_SILENTINSTALL = 32;
export const CM_DEVCAP_RAWDEVICEOK = 64;
export const CM_DEVCAP_SURPRISEREMOVALOK = 128;
export const CM_DEVCAP_HARDWAREDISABLED = 256;
export const CM_DEVCAP_NONDYNAMIC = 512;
export const CM_DEVCAP_SECUREDEVICE = 1024;
export const CM_REMOVAL_POLICY_EXPECT_NO_REMOVAL = 1;
export const CM_REMOVAL_POLICY_EXPECT_ORDERLY_REMOVAL = 2;
export const CM_REMOVAL_POLICY_EXPECT_SURPRISE_REMOVAL = 3;
export const CM_INSTALL_STATE_INSTALLED = 0;
export const CM_INSTALL_STATE_NEEDS_REINSTALL = 1;
export const CM_INSTALL_STATE_FAILED_INSTALL = 2;
export const CM_INSTALL_STATE_FINISH_INSTALL = 3;
export const CM_LOCATE_DEVNODE_NORMAL = 0;
export const CM_LOCATE_DEVNODE_PHANTOM = 1;
export const CM_LOCATE_DEVNODE_CANCELREMOVE = 2;
export const CM_LOCATE_DEVNODE_NOVALIDATION = 4;
export const CM_LOCATE_DEVNODE_BITS = 7;
export const CM_LOCATE_DEVINST_NORMAL = 0;
export const CM_LOCATE_DEVINST_PHANTOM = 1;
export const CM_LOCATE_DEVINST_CANCELREMOVE = 2;
export const CM_LOCATE_DEVINST_NOVALIDATION = 4;
export const CM_LOCATE_DEVINST_BITS = 7;
export const CM_OPEN_CLASS_KEY_INSTALLER = 0;
export const CM_OPEN_CLASS_KEY_INTERFACE = 1;
export const CM_OPEN_CLASS_KEY_BITS = 1;
export const CM_REMOVE_UI_OK = 0;
export const CM_REMOVE_UI_NOT_OK = 1;
export const CM_REMOVE_NO_RESTART = 2;
export const CM_REMOVE_DISABLE = 4;
export const CM_REMOVE_BITS = 7;
export const CM_QUERY_REMOVE_UI_OK = 0;
export const CM_QUERY_REMOVE_UI_NOT_OK = 1;
export const CM_REENUMERATE_NORMAL = 0;
export const CM_REENUMERATE_SYNCHRONOUS = 1;
export const CM_REENUMERATE_RETRY_INSTALLATION = 2;
export const CM_REENUMERATE_ASYNCHRONOUS = 4;
export const CM_REENUMERATE_BITS = 7;
export const CM_REGISTER_DEVICE_DRIVER_STATIC = 0;
export const CM_REGISTER_DEVICE_DRIVER_DISABLEABLE = 1;
export const CM_REGISTER_DEVICE_DRIVER_REMOVABLE = 2;
export const CM_REGISTER_DEVICE_DRIVER_BITS = 3;
export const CM_REGISTRY_HARDWARE = 0;
export const CM_REGISTRY_SOFTWARE = 1;
export const CM_REGISTRY_USER = 256;
export const CM_REGISTRY_CONFIG = 512;
export const CM_REGISTRY_BITS = 769;
export const CM_SET_DEVNODE_PROBLEM_NORMAL = 0;
export const CM_SET_DEVNODE_PROBLEM_OVERRIDE = 1;
export const CM_SET_DEVNODE_PROBLEM_BITS = 1;
export const CM_SET_DEVINST_PROBLEM_NORMAL = 0;
export const CM_SET_DEVINST_PROBLEM_OVERRIDE = 1;
export const CM_SET_DEVINST_PROBLEM_BITS = 1;
export const CM_SET_HW_PROF_FLAGS_UI_NOT_OK = 1;
export const CM_SET_HW_PROF_FLAGS_BITS = 1;
export const CM_SETUP_DEVNODE_READY = 0;
export const CM_SETUP_DEVINST_READY = 0;
export const CM_SETUP_DOWNLOAD = 1;
export const CM_SETUP_WRITE_LOG_CONFS = 2;
export const CM_SETUP_PROP_CHANGE = 3;
export const CM_SETUP_DEVNODE_RESET = 4;
export const CM_SETUP_DEVINST_RESET = 4;
export const CM_SETUP_DEVNODE_CONFIG = 5;
export const CM_SETUP_DEVINST_CONFIG = 5;
export const CM_SETUP_DEVNODE_CONFIG_CLASS = 6;
export const CM_SETUP_DEVINST_CONFIG_CLASS = 6;
export const CM_SETUP_DEVNODE_CONFIG_EXTENSIONS = 7;
export const CM_SETUP_DEVINST_CONFIG_EXTENSIONS = 7;
export const CM_SETUP_DEVNODE_CONFIG_RESET = 8;
export const CM_SETUP_DEVINST_CONFIG_RESET = 8;
export const CM_SETUP_BITS = 15;
export const CM_QUERY_ARBITRATOR_RAW = 0;
export const CM_QUERY_ARBITRATOR_TRANSLATED = 1;
export const CM_QUERY_ARBITRATOR_BITS = 1;
export const CM_CUSTOMDEVPROP_MERGE_MULTISZ = 1;
export const CM_CUSTOMDEVPROP_BITS = 1;
export const CM_NAME_ATTRIBUTE_NAME_RETRIEVED_FROM_DEVICE = 1;
export const CM_NAME_ATTRIBUTE_USER_ASSIGNED_NAME = 2;
export const CM_CLASS_PROPERTY_INSTALLER = 0;
export const CM_CLASS_PROPERTY_INTERFACE = 1;
export const CM_CLASS_PROPERTY_BITS = 1;
export const CM_NOTIFY_FILTER_FLAG_ALL_INTERFACE_CLASSES = 1;
export const CM_NOTIFY_FILTER_FLAG_ALL_DEVICE_INSTANCES = 2;
export const CM_GLOBAL_STATE_CAN_DO_UI = 1;
export const CM_GLOBAL_STATE_ON_BIG_STACK = 2;
export const CM_GLOBAL_STATE_SERVICES_AVAILABLE = 4;
export const CM_GLOBAL_STATE_SHUTTING_DOWN = 8;
export const CM_GLOBAL_STATE_DETECTION_PENDING = 16;
export const CM_GLOBAL_STATE_REBOOT_REQUIRED = 32;
export const INSTALLFLAG_FORCE = 1;
export const INSTALLFLAG_READONLY = 2;
export const INSTALLFLAG_NONINTERACTIVE = 4;
export const INSTALLFLAG_BITS = 7;
export const DIIDFLAG_SHOWSEARCHUI = 1;
export const DIIDFLAG_NOFINISHINSTALLUI = 2;
export const DIIDFLAG_INSTALLNULLDRIVER = 4;
export const DIIDFLAG_INSTALLCOPYINFDRIVERS = 8;
export const DIIDFLAG_BITS = 15;
export const DIIRFLAG_INF_ALREADY_COPIED = 1;
export const DIIRFLAG_FORCE_INF = 2;
export const DIIRFLAG_HW_USING_THE_INF = 4;
export const DIIRFLAG_HOTPATCH = 8;
export const DIIRFLAG_NOBACKUP = 16;
export const DIIRFLAG_PRE_CONFIGURE_INF = 32;
export const DIIRFLAG_INSTALL_AS_SET = 64;
export const DIURFLAG_NO_REMOVE_INF = 1;
export const DIURFLAG_RESERVED = 2;
export const ROLLBACK_FLAG_NO_UI = 1;
export const ROLLBACK_BITS = 1;
export const MAX_KEY_LEN = 100;
export const SZ_KEY_OPTIONDESC = "OptionDesc";
export const SZ_KEY_LDIDOEM = "LdidOEM";
export const SZ_KEY_SRCDISKFILES = "SourceDisksFiles";
export const SZ_KEY_SRCDISKNAMES = "SourceDisksNames";
export const SZ_KEY_STRINGS = "Strings";
export const SZ_KEY_DESTDIRS = "DestinationDirs";
export const SZ_KEY_LAYOUT_FILE = "LayoutFile";
export const SZ_KEY_DEFDESTDIR = "DefaultDestDir";
export const SZ_KEY_LFN_SECTION = "VarLDID.LFN";
export const SZ_KEY_SFN_SECTION = "VarLDID.SFN";
export const SZ_KEY_UPDATEINIS = "UpdateInis";
export const SZ_KEY_UPDATEINIFIELDS = "UpdateIniFields";
export const SZ_KEY_INI2REG = "Ini2Reg";
export const SZ_KEY_COPYFILES = "CopyFiles";
export const SZ_KEY_RENFILES = "RenFiles";
export const SZ_KEY_DELFILES = "DelFiles";
export const SZ_KEY_ADDREG = "AddReg";
export const SZ_KEY_ADDREGNOCLOBBER = "AddRegNoClobber";
export const SZ_KEY_DELREG = "DelReg";
export const SZ_KEY_BITREG = "BitReg";
export const SZ_KEY_COPYINF = "CopyINF";
export const SZ_KEY_LOGCONFIG = "LogConfig";
export const SZ_KEY_ADDSERVICE = "AddService";
export const SZ_KEY_DELSERVICE = "DelService";
export const SZ_KEY_ADDTRIGGER = "AddTrigger";
export const SZ_KEY_ADDINTERFACE = "AddInterface";
export const SZ_KEY_ADDIME = "AddIme";
export const SZ_KEY_DELIME = "DelIme";
export const SZ_KEY_REGSVR = "RegisterDlls";
export const SZ_KEY_UNREGSVR = "UnregisterDlls";
export const SZ_KEY_PROFILEITEMS = "ProfileItems";
export const SZ_KEY_MODULES = "Modules";
export const SZ_KEY_DEFAULTOPTION = "DefaultOption";
export const SZ_KEY_LISTOPTIONS = "ListOptions";
export const SZ_KEY_CLEANONLY = "CleanOnly";
export const SZ_KEY_UPGRADEONLY = "UpgradeOnly";
export const SZ_KEY_EXCLUDEID = "ExcludeId";
export const SZ_KEY_ADDPOWERSETTING = "AddPowerSetting";
export const SZ_KEY_ADDPROP = "AddProperty";
export const SZ_KEY_DELPROP = "DelProperty";
export const SZ_KEY_FEATURESCORE = "FeatureScore";
export const SZ_KEY_ADDEVENTPROVIDER = "AddEventProvider";
export const SZ_KEY_ADDCHANNEL = "AddChannel";
export const SZ_KEY_IMPORTCHANNEL = "ImportChannel";
export const SZ_KEY_ADDAUTOLOGGER = "AddAutoLogger";
export const SZ_KEY_UPDATEAUTOLOGGER = "UpdateAutoLogger";
export const SZ_KEY_ADDAUTOLOGGERPROVIDER = "AddAutoLoggerProvider";
export const SZ_KEY_ADDFILTER = "AddFilter";
export const SZ_KEY_FILTERLEVEL = "FilterLevel";
export const SZ_KEY_FILTERPOSITION = "FilterPosition";
export const SZ_KEY_PHASE1 = "Phase1";
export const SZ_KEY_HARDWARE = "Hardware";
export const INFSTR_KEY_CONFIGPRIORITY = "ConfigPriority";
export const MAX_PRIORITYSTR_LEN = 16;
export const INFSTR_CFGPRI_HARDWIRED = "HARDWIRED";
export const INFSTR_CFGPRI_DESIRED = "DESIRED";
export const INFSTR_CFGPRI_NORMAL = "NORMAL";
export const INFSTR_CFGPRI_SUBOPTIMAL = "SUBOPTIMAL";
export const INFSTR_CFGPRI_DISABLED = "DISABLED";
export const INFSTR_CFGPRI_RESTART = "RESTART";
export const INFSTR_CFGPRI_REBOOT = "REBOOT";
export const INFSTR_CFGPRI_POWEROFF = "POWEROFF";
export const INFSTR_CFGPRI_HARDRECONFIG = "HARDRECONFIG";
export const INFSTR_CFGPRI_FORCECONFIG = "FORCECONFIG";
export const INFSTR_CFGTYPE_BASIC = "BASIC";
export const INFSTR_CFGTYPE_FORCED = "FORCED";
export const INFSTR_CFGTYPE_OVERRIDE = "OVERRIDE";
export const INFSTR_KEY_MEMCONFIG = "MemConfig";
export const INFSTR_KEY_MEMLARGECONFIG = "MemLargeConfig";
export const INFSTR_KEY_IOCONFIG = "IOConfig";
export const INFSTR_KEY_IRQCONFIG = "IRQConfig";
export const INFSTR_KEY_DMACONFIG = "DMAConfig";
export const INFSTR_KEY_PCCARDCONFIG = "PcCardConfig";
export const INFSTR_KEY_MFCARDCONFIG = "MfCardConfig";
export const INFSTR_SECT_CLASS_INSTALL = "ClassInstall";
export const INFSTR_SECT_CLASS_INSTALL_32 = "ClassInstall32";
export const INFSTR_SECT_DEFAULT_INSTALL = "DefaultInstall";
export const INFSTR_SECT_DEFAULT_UNINSTALL = "DefaultUninstall";
export const INFSTR_SECT_INTERFACE_INSTALL_32 = "InterfaceInstall32";
export const INFSTR_SECT_VERSION = "Version";
export const INFSTR_KEY_PROVIDER = "Provider";
export const INFSTR_KEY_SIGNATURE = "Signature";
export const INFSTR_KEY_DRIVERSET = "DriverSet";
export const MAX_INF_FLAG = 20;
export const INFSTR_KEY_HARDWARE_CLASS = "Class";
export const INFSTR_KEY_HARDWARE_CLASSGUID = "ClassGUID";
export const INFSTR_KEY_NOSETUPINF = "NoSetupInf";
export const INFSTR_KEY_FROMINET = "FromINet";
export const INFSTR_KEY_CATALOGFILE = "CatalogFile";
export const INFSTR_KEY_PNPLOCKDOWN = "PnpLockDown";
export const INFSTR_KEY_EXTENSIONID = "ExtensionId";
export const INFSTR_SECT_MFG = "Manufacturer";
export const INFSTR_SECT_TARGETCOMPUTERS = "TargetComputers";
export const INFSTR_SECT_EXTENSIONCONTRACTS = "ExtensionContracts";
export const INFSTR_KEY_CLASS = "Class";
export const INFSTR_KEY_CLASSGUID = "ClassGUID";
export const INFSTR_RESTART = "Restart";
export const INFSTR_REBOOT = "Reboot";
export const INFSTR_KEY_DISPLAYNAME = "DisplayName";
export const INFSTR_KEY_SERVICETYPE = "ServiceType";
export const INFSTR_KEY_STARTTYPE = "StartType";
export const INFSTR_KEY_ERRORCONTROL = "ErrorControl";
export const INFSTR_KEY_SERVICEBINARY = "ServiceBinary";
export const INFSTR_KEY_LOADORDERGROUP = "LoadOrderGroup";
export const INFSTR_KEY_DEPENDENCIES = "Dependencies";
export const INFSTR_KEY_REQUIREDPRIVILEGES = "RequiredPrivileges";
export const INFSTR_KEY_STARTNAME = "StartName";
export const INFSTR_KEY_SECURITY = "Security";
export const INFSTR_KEY_DESCRIPTION = "Description";
export const INFSTR_KEY_SERVICESIDTYPE = "ServiceSidType";
export const INFSTR_KEY_DELAYEDAUTOSTART = "DelayedAutoStart";
export const INFSTR_KEY_TRIGGER_TYPE = "TriggerType";
export const INFSTR_KEY_ACTION = "Action";
export const INFSTR_KEY_SUB_TYPE = "SubType";
export const INFSTR_KEY_DATA_ITEM = "DataItem";
export const INFSTR_KEY_PROVIDER_NAME = "ProviderName";
export const INFSTR_KEY_RESOURCE_FILE = "ResourceFile";
export const INFSTR_KEY_MESSAGE_FILE = "MessageFile";
export const INFSTR_KEY_PARAMETER_FILE = "ParameterFile";
export const INFSTR_KEY_CHANNEL_ACCESS = "Access";
export const INFSTR_KEY_CHANNEL_ISOLATION = "Isolation";
export const INFSTR_KEY_CHANNEL_ENABLED = "Enabled";
export const INFSTR_KEY_CHANNEL_VALUE = "Value";
export const INFSTR_KEY_LOGGING_MAXSIZE = "LoggingMaxSize";
export const INFSTR_KEY_LOGGING_RETENTION = "LoggingRetention";
export const INFSTR_KEY_LOGGING_AUTOBACKUP = "LoggingAutoBackup";
export const INFSTR_KEY_START = "Start";
export const INFSTR_KEY_BUFFER_SIZE = "BufferSize";
export const INFSTR_KEY_CLOCK_TYPE = "ClockType";
export const INFSTR_KEY_DISABLE_REALTIME_PERSISTENCE = "DisableRealtimePersistence";
export const INFSTR_KEY_FILE_NAME = "FileName";
export const INFSTR_KEY_FILE_MAX = "FileMax";
export const INFSTR_KEY_FLUSH_TIMER = "FlushTimer";
export const INFSTR_KEY_LOG_FILE_MODE = "LogFileMode";
export const INFSTR_KEY_MAX_FILE_SIZE = "MaxFileSize";
export const INFSTR_KEY_MAXIMUM_BUFFERS = "MaximumBuffers";
export const INFSTR_KEY_MINIMUM_BUFFERS = "MinimumBuffers";
export const INFSTR_KEY_ENABLED = "Enabled";
export const INFSTR_KEY_ENABLE_FLAGS = "EnableFlags";
export const INFSTR_KEY_ENABLE_LEVEL = "EnableLevel";
export const INFSTR_KEY_ENABLE_PROPERTY = "EnableProperty";
export const INFSTR_KEY_MATCH_ANY_KEYWORD = "MatchAnyKeyword";
export const INFSTR_KEY_MATCH_ALL_KEYWORD = "MatchAllKeyword";
export const INFSTR_SECT_DETMODULES = "Det.Modules";
export const INFSTR_SECT_DETCLASSINFO = "Det.ClassInfo";
export const INFSTR_SECT_MANUALDEV = "Det.ManualDev";
export const INFSTR_SECT_AVOIDCFGSYSDEV = "Det.AvoidCfgSysDev";
export const INFSTR_SECT_REGCFGSYSDEV = "Det.RegCfgSysDev";
export const INFSTR_SECT_DEVINFS = "Det.DevINFs";
export const INFSTR_SECT_AVOIDINIDEV = "Det.AvoidIniDev";
export const INFSTR_SECT_AVOIDENVDEV = "Det.AvoidEnvDev";
export const INFSTR_SECT_REGINIDEV = "Det.RegIniDev";
export const INFSTR_SECT_REGENVDEV = "Det.RegEnvDev";
export const INFSTR_SECT_HPOMNIBOOK = "Det.HPOmnibook";
export const INFSTR_SECT_FORCEHWVERIFY = "Det.ForceHWVerify";
export const INFSTR_SECT_DETOPTIONS = "Det.Options";
export const INFSTR_SECT_BADPNPBIOS = "BadPnpBios";
export const INFSTR_SECT_GOODACPIBIOS = "GoodACPIBios";
export const INFSTR_SECT_BADACPIBIOS = "BadACPIBios";
export const INFSTR_SECT_BADROUTINGTABLEBIOS = "BadPCIIRQRoutingTableBios";
export const INFSTR_SECT_BADPMCALLBIOS = "BadProtectedModeCallBios";
export const INFSTR_SECT_BADRMCALLBIOS = "BadRealModeCallBios";
export const INFSTR_SECT_MACHINEIDBIOS = "MachineIDBios";
export const INFSTR_SECT_BADDISKBIOS = "BadDiskBios";
export const INFSTR_SECT_BADDSBIOS = "BadDSBios";
export const INFSTR_KEY_DETPARAMS = "Params";
export const INFSTR_KEY_SKIPLIST = "SkipList";
export const INFSTR_KEY_DETECTLIST = "DetectList";
export const INFSTR_KEY_EXCLUDERES = "ExcludeRes";
export const INFSTR_SUBKEY_LOGCONFIG = "LogConfig";
export const INFSTR_SUBKEY_DET = "Det";
export const INFSTR_SUBKEY_FACTDEF = "FactDef";
export const INFSTR_SUBKEY_POSSIBLEDUPS = "PosDup";
export const INFSTR_SUBKEY_NORESOURCEDUPS = "NoResDup";
export const INFSTR_SUBKEY_HW = "Hw";
export const INFSTR_SUBKEY_CTL = "CTL";
export const INFSTR_SUBKEY_SERVICES = "Services";
export const INFSTR_SUBKEY_SOFTWARE = "Software";
export const INFSTR_SUBKEY_INTERFACES = "Interfaces";
export const INFSTR_SUBKEY_COINSTALLERS = "CoInstallers";
export const INFSTR_SUBKEY_LOGCONFIGOVERRIDE = "LogConfigOverride";
export const INFSTR_SUBKEY_WMI = "WMI";
export const INFSTR_SUBKEY_EVENTS = "Events";
export const INFSTR_SUBKEY_FILTERS = "Filters";
export const INFSTR_CONTROLFLAGS_SECTION = "ControlFlags";
export const INFSTR_KEY_COPYFILESONLY = "CopyFilesOnly";
export const INFSTR_KEY_EXCLUDEFROMSELECT = "ExcludeFromSelect";
export const INFSTR_KEY_ALWAYSEXCLUDEFROMSELECT = "AlwaysExcludeFromSelect";
export const INFSTR_KEY_INTERACTIVEINSTALL = "InteractiveInstall";
export const INFSTR_KEY_REQUESTADDITIONALSOFTWARE = "RequestAdditionalSoftware";
export const INFSTR_PLATFORM_WIN = "Win";
export const INFSTR_PLATFORM_NT = "NT";
export const INFSTR_PLATFORM_NTX86 = "NTx86";
export const INFSTR_PLATFORM_NTMIPS = "NTMIPS";
export const INFSTR_PLATFORM_NTALPHA = "NTAlpha";
export const INFSTR_PLATFORM_NTPPC = "NTPPC";
export const INFSTR_PLATFORM_NTIA64 = "NTIA64";
export const INFSTR_PLATFORM_NTAXP64 = "NTAXP64";
export const INFSTR_PLATFORM_NTAMD64 = "NTAMD64";
export const INFSTR_PLATFORM_NTARM = "NTARM";
export const INFSTR_PLATFORM_NTARM64 = "NTARM64";
export const MAX_INFSTR_STRKEY_LEN = 32;
export const INFSTR_STRKEY_DRVDESC = "DriverDesc";
export const INFSTR_DRIVERSELECT_SECTION = "DriverSelect";
export const INFSTR_DRIVERSELECT_FUNCTIONS = "DriverSelectFunctions";
export const INFSTR_DRIVERVERSION_SECTION = "DriverVer";
export const INFSTR_SOFTWAREVERSION_SECTION = "SoftwareVersion";
export const INFSTR_SECT_CFGSYS = "ConfigSysDrivers";
export const INFSTR_SECT_AUTOEXECBAT = "AutoexecBatDrivers";
export const INFSTR_SECT_SYSINI = "SystemIniDrivers";
export const INFSTR_SECT_SYSINIDRV = "SystemIniDriversLine";
export const INFSTR_SECT_WININIRUN = "WinIniRunLine";
export const INFSTR_KEY_PATH = "Path";
export const INFSTR_KEY_NAME = "Name";
export const INFSTR_KEY_IO = "IO";
export const INFSTR_KEY_MEM = "Mem";
export const INFSTR_KEY_IRQ = "IRQ";
export const INFSTR_KEY_DMA = "DMA";
export const INFSTR_BUS_ISA = "BUS_ISA";
export const INFSTR_BUS_EISA = "BUS_EISA";
export const INFSTR_BUS_MCA = "BUS_MCA";
export const INFSTR_BUS_ALL = "BUS_ALL";
export const INFSTR_RISK_NONE = "RISK_NONE";
export const INFSTR_RISK_VERYLOW = "RISK_VERYLOW";
export const INFSTR_RISK_BIOSROMRD = "RISK_BIOSROMRD";
export const INFSTR_RISK_QUERYDRV = "RISK_QUERYDRV";
export const INFSTR_RISK_SWINT = "RISK_SWINT";
export const INFSTR_RISK_LOW = "RISK_LOW";
export const INFSTR_RISK_DELICATE = "RISK_DELICATE";
export const INFSTR_RISK_MEMRD = "RISK_MEMRD";
export const INFSTR_RISK_IORD = "RISK_IORD";
export const INFSTR_RISK_MEMWR = "RISK_MEMWR";
export const INFSTR_RISK_IOWR = "RISK_IOWR";
export const INFSTR_RISK_UNRELIABLE = "RISK_UNRELIABLE";
export const INFSTR_RISK_VERYHIGH = "RISK_VERYHIGH";
export const INFSTR_CLASS_SAFEEXCL = "SAFE_EXCL";
export const INFSTR_SECT_DISPLAY_CLEANUP = "DisplayCleanup";
export const VER_PLATFORM_WIN32s = 0;
export const VER_PLATFORM_WIN32_WINDOWS = 1;
export const VER_PLATFORM_WIN32_NT = 2;
export const SetupFileLogSourceFilename = 0;
export const SetupFileLogChecksum = 1;
export const SetupFileLogDiskTagfile = 2;
export const SetupFileLogDiskDescription = 3;
export const SetupFileLogOtherInfo = 4;
export const SetupFileLogMax = 5;
export const PNP_VetoTypeUnknown = 0;
export const PNP_VetoLegacyDevice = 1;
export const PNP_VetoPendingClose = 2;
export const PNP_VetoWindowsApp = 3;
export const PNP_VetoWindowsService = 4;
export const PNP_VetoOutstandingOpen = 5;
export const PNP_VetoDevice = 6;
export const PNP_VetoDriver = 7;
export const PNP_VetoIllegalDeviceRequest = 8;
export const PNP_VetoInsufficientPower = 9;
export const PNP_VetoNonDisableable = 10;
export const PNP_VetoLegacyDriver = 11;
export const PNP_VetoInsufficientRights = 12;
export const PNP_VetoAlreadyRemoved = 13;
export const CM_NOTIFY_FILTER_TYPE_DEVICEINTERFACE = 0;
export const CM_NOTIFY_FILTER_TYPE_DEVICEHANDLE = 1;
export const CM_NOTIFY_FILTER_TYPE_DEVICEINSTANCE = 2;
export const CM_NOTIFY_FILTER_TYPE_MAX = 3;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const CM_NOTIFY_ACTION_DEVICEINTERFACEARRIVAL = 0;
export const CM_NOTIFY_ACTION_DEVICEINTERFACEREMOVAL = 1;
export const CM_NOTIFY_ACTION_DEVICEQUERYREMOVE = 2;
export const CM_NOTIFY_ACTION_DEVICEQUERYREMOVEFAILED = 3;
export const CM_NOTIFY_ACTION_DEVICEREMOVEPENDING = 4;
export const CM_NOTIFY_ACTION_DEVICEREMOVECOMPLETE = 5;
export const CM_NOTIFY_ACTION_DEVICECUSTOMEVENT = 6;
export const CM_NOTIFY_ACTION_DEVICEINSTANCEENUMERATED = 7;
export const CM_NOTIFY_ACTION_DEVICEINSTANCESTARTED = 8;
export const CM_NOTIFY_ACTION_DEVICEINSTANCEREMOVED = 9;
export const CM_NOTIFY_ACTION_MAX = 10;
export const PRIORITY_LOW = 0;
export const PRIORITY_NORMAL = 1;
export const PRIORITY_HIGH = 2;

// Structs

export type HCMNOTIFICATION = Deno.PointerValue;

export type HDEVINFO = Deno.PointerValue;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.INFCONTEXT (size: 24)
 */
export interface INFCONTEXT {
  /** ptr */
  Inf: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  CurrentInf: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Section: number;
  /** u32 */
  Line: number;
}

export const sizeofINFCONTEXT = 24;

export function allocINFCONTEXT(data?: Partial<INFCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofINFCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Inf !== undefined) view.setBigUint64(0, data.Inf === null ? 0n : BigInt(util.toPointer(data.Inf)), true);
  // 0x08: pointer
  if (data?.CurrentInf !== undefined) view.setBigUint64(8, data.CurrentInf === null ? 0n : BigInt(util.toPointer(data.CurrentInf)), true);
  // 0x10: u32
  if (data?.Section !== undefined) view.setUint32(16, Number(data.Section), true);
  // 0x14: u32
  if (data?.Line !== undefined) view.setUint32(20, Number(data.Line), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INF_INFORMATION (size: 16)
 */
export interface SP_INF_INFORMATION {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INF_STYLE */
  InfStyle: SP_INF_STYLE;
  /** u32 */
  InfCount: number;
  /** array */
  VersionData: Deno.PointerValue | null;
}

export const sizeofSP_INF_INFORMATION = 16;

export function allocSP_INF_INFORMATION(data?: Partial<SP_INF_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_INF_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InfStyle !== undefined) view.setUint32(0, Number(data.InfStyle), true);
  // 0x04: u32
  if (data?.InfCount !== undefined) view.setUint32(4, Number(data.InfCount), true);
  // 0x08: pointer
  if (data?.VersionData !== undefined) view.setBigUint64(8, data.VersionData === null ? 0n : BigInt(util.toPointer(data.VersionData)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V3 (size: 48)
 */
export interface SP_ALTPLATFORM_INFO_V3 {
  /** u32 */
  cbSize: number;
  /** u32 */
  Platform: number;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u16 */
  ProcessorArchitecture: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FirstValidatedMajorVersion: number;
  /** u32 */
  FirstValidatedMinorVersion: number;
  /** u8 */
  ProductType: number;
  /** u16 */
  SuiteMask: number;
  /** u32 */
  BuildNumber: number;
}

export const sizeofSP_ALTPLATFORM_INFO_V3 = 48;

export function allocSP_ALTPLATFORM_INFO_V3(data?: Partial<SP_ALTPLATFORM_INFO_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_ALTPLATFORM_INFO_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Platform !== undefined) view.setUint32(4, Number(data.Platform), true);
  // 0x08: u32
  if (data?.MajorVersion !== undefined) view.setUint32(8, Number(data.MajorVersion), true);
  // 0x0c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(12, Number(data.MinorVersion), true);
  // 0x10: u16
  if (data?.ProcessorArchitecture !== undefined) view.setUint16(16, Number(data.ProcessorArchitecture), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.FirstValidatedMajorVersion !== undefined) view.setUint32(32, Number(data.FirstValidatedMajorVersion), true);
  // 0x24: u32
  if (data?.FirstValidatedMinorVersion !== undefined) view.setUint32(36, Number(data.FirstValidatedMinorVersion), true);
  // 0x28: u8
  if (data?.ProductType !== undefined) view.setUint8(40, Number(data.ProductType));
  // 0x29: u16
  if (data?.SuiteMask !== undefined) view.setUint16(41, Number(data.SuiteMask), true);
  // 0x2b: u32
  if (data?.BuildNumber !== undefined) view.setUint32(43, Number(data.BuildNumber), true);
  // 0x2f: pad1
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V2 (size: 40)
 */
export interface SP_ALTPLATFORM_INFO_V2 {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.VER_PLATFORM */
  Platform: VER_PLATFORM;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u16 */
  ProcessorArchitecture: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FirstValidatedMajorVersion: number;
  /** u32 */
  FirstValidatedMinorVersion: number;
}

export const sizeofSP_ALTPLATFORM_INFO_V2 = 40;

export function allocSP_ALTPLATFORM_INFO_V2(data?: Partial<SP_ALTPLATFORM_INFO_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_ALTPLATFORM_INFO_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Platform !== undefined) view.setUint32(4, Number(data.Platform), true);
  // 0x08: u32
  if (data?.MajorVersion !== undefined) view.setUint32(8, Number(data.MajorVersion), true);
  // 0x0c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(12, Number(data.MinorVersion), true);
  // 0x10: u16
  if (data?.ProcessorArchitecture !== undefined) view.setUint16(16, Number(data.ProcessorArchitecture), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.FirstValidatedMajorVersion !== undefined) view.setUint32(32, Number(data.FirstValidatedMajorVersion), true);
  // 0x24: u32
  if (data?.FirstValidatedMinorVersion !== undefined) view.setUint32(36, Number(data.FirstValidatedMinorVersion), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_ALTPLATFORM_INFO_V1 (size: 24)
 */
export interface SP_ALTPLATFORM_INFO_V1 {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.System.Diagnostics.Debug.VER_PLATFORM */
  Platform: VER_PLATFORM;
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u16 */
  ProcessorArchitecture: number;
  /** u16 */
  Reserved: number;
}

export const sizeofSP_ALTPLATFORM_INFO_V1 = 24;

export function allocSP_ALTPLATFORM_INFO_V1(data?: Partial<SP_ALTPLATFORM_INFO_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_ALTPLATFORM_INFO_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Platform !== undefined) view.setUint32(4, Number(data.Platform), true);
  // 0x08: u32
  if (data?.MajorVersion !== undefined) view.setUint32(8, Number(data.MajorVersion), true);
  // 0x0c: u32
  if (data?.MinorVersion !== undefined) view.setUint32(12, Number(data.MinorVersion), true);
  // 0x10: u16
  if (data?.ProcessorArchitecture !== undefined) view.setUint16(16, Number(data.ProcessorArchitecture), true);
  // 0x12: u16
  if (data?.Reserved !== undefined) view.setUint16(18, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_A (size: 24)
 */
export interface SP_ORIGINAL_FILE_INFO_A {
  /** u32 */
  cbSize: number;
  /** array */
  OriginalInfName: Deno.PointerValue | null;
  /** array */
  OriginalCatalogName: Deno.PointerValue | null;
}

export const sizeofSP_ORIGINAL_FILE_INFO_A = 24;

export function allocSP_ORIGINAL_FILE_INFO_A(data?: Partial<SP_ORIGINAL_FILE_INFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_ORIGINAL_FILE_INFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OriginalInfName !== undefined) view.setBigUint64(8, data.OriginalInfName === null ? 0n : BigInt(util.toPointer(data.OriginalInfName)), true);
  // 0x10: pointer
  if (data?.OriginalCatalogName !== undefined) view.setBigUint64(16, data.OriginalCatalogName === null ? 0n : BigInt(util.toPointer(data.OriginalCatalogName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_ORIGINAL_FILE_INFO_W (size: 24)
 */
export interface SP_ORIGINAL_FILE_INFO_W {
  /** u32 */
  cbSize: number;
  /** array */
  OriginalInfName: Deno.PointerValue | null;
  /** array */
  OriginalCatalogName: Deno.PointerValue | null;
}

export const sizeofSP_ORIGINAL_FILE_INFO_W = 24;

export function allocSP_ORIGINAL_FILE_INFO_W(data?: Partial<SP_ORIGINAL_FILE_INFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_ORIGINAL_FILE_INFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OriginalInfName !== undefined) view.setBigUint64(8, data.OriginalInfName === null ? 0n : BigInt(util.toPointer(data.OriginalInfName)), true);
  // 0x10: pointer
  if (data?.OriginalCatalogName !== undefined) view.setBigUint64(16, data.OriginalCatalogName === null ? 0n : BigInt(util.toPointer(data.OriginalCatalogName)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.FILEPATHS_A (size: 24)
 */
export interface FILEPATHS_A {
  /** Windows.Win32.Foundation.PSTR */
  Target: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Source: string | null;
  /** u32 */
  Win32Error: number;
  /** u32 */
  Flags: number;
}

export const sizeofFILEPATHS_A = 24;

export function allocFILEPATHS_A(data?: Partial<FILEPATHS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEPATHS_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Target !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Target);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Source !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Source);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Win32Error !== undefined) view.setUint32(16, Number(data.Win32Error), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.FILEPATHS_W (size: 24)
 */
export interface FILEPATHS_W {
  /** Windows.Win32.Foundation.PWSTR */
  Target: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Source: string | null;
  /** u32 */
  Win32Error: number;
  /** u32 */
  Flags: number;
}

export const sizeofFILEPATHS_W = 24;

export function allocFILEPATHS_W(data?: Partial<FILEPATHS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEPATHS_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Target !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Target);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Source !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Source);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Win32Error !== undefined) view.setUint32(16, Number(data.Win32Error), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.FILEPATHS_SIGNERINFO_A (size: 48)
 */
export interface FILEPATHS_SIGNERINFO_A {
  /** Windows.Win32.Foundation.PSTR */
  Target: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Source: string | null;
  /** u32 */
  Win32Error: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PSTR */
  DigitalSigner: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Version: string | null;
  /** Windows.Win32.Foundation.PSTR */
  CatalogFile: string | null;
}

export const sizeofFILEPATHS_SIGNERINFO_A = 48;

export function allocFILEPATHS_SIGNERINFO_A(data?: Partial<FILEPATHS_SIGNERINFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEPATHS_SIGNERINFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Target !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Target);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Source !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Source);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Win32Error !== undefined) view.setUint32(16, Number(data.Win32Error), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: buffer
  if (data?.DigitalSigner !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.DigitalSigner);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Version !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Version);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.CatalogFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.CatalogFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.FILEPATHS_SIGNERINFO_W (size: 48)
 */
export interface FILEPATHS_SIGNERINFO_W {
  /** Windows.Win32.Foundation.PWSTR */
  Target: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Source: string | null;
  /** u32 */
  Win32Error: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  DigitalSigner: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Version: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  CatalogFile: string | null;
}

export const sizeofFILEPATHS_SIGNERINFO_W = 48;

export function allocFILEPATHS_SIGNERINFO_W(data?: Partial<FILEPATHS_SIGNERINFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEPATHS_SIGNERINFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Target !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Target);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Source !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Source);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Win32Error !== undefined) view.setUint32(16, Number(data.Win32Error), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: buffer
  if (data?.DigitalSigner !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.DigitalSigner);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Version !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Version);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.CatalogFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.CatalogFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SOURCE_MEDIA_A (size: 48)
 */
export interface SOURCE_MEDIA_A {
  /** Windows.Win32.Foundation.PSTR */
  Reserved: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Tagfile: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SourcePath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SourceFile: string | null;
  /** u32 */
  Flags: number;
}

export const sizeofSOURCE_MEDIA_A = 48;

export function allocSOURCE_MEDIA_A(data?: Partial<SOURCE_MEDIA_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSOURCE_MEDIA_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Reserved !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Reserved);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Tagfile !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Tagfile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.SourcePath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.SourcePath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SourceFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.SourceFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SOURCE_MEDIA_W (size: 48)
 */
export interface SOURCE_MEDIA_W {
  /** Windows.Win32.Foundation.PWSTR */
  Reserved: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Tagfile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourcePath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourceFile: string | null;
  /** u32 */
  Flags: number;
}

export const sizeofSOURCE_MEDIA_W = 48;

export function allocSOURCE_MEDIA_W(data?: Partial<SOURCE_MEDIA_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSOURCE_MEDIA_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Reserved !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Reserved);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Tagfile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Tagfile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.SourcePath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.SourcePath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SourceFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SourceFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CABINET_INFO_A (size: 32)
 */
export interface CABINET_INFO_A {
  /** Windows.Win32.Foundation.PSTR */
  CabinetPath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  CabinetFile: string | null;
  /** Windows.Win32.Foundation.PSTR */
  DiskName: string | null;
  /** u16 */
  SetId: number;
  /** u16 */
  CabinetNumber: number;
}

export const sizeofCABINET_INFO_A = 32;

export function allocCABINET_INFO_A(data?: Partial<CABINET_INFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINET_INFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.CabinetPath !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.CabinetPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.CabinetFile !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.CabinetFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.DiskName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.DiskName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u16
  if (data?.SetId !== undefined) view.setUint16(24, Number(data.SetId), true);
  // 0x1a: u16
  if (data?.CabinetNumber !== undefined) view.setUint16(26, Number(data.CabinetNumber), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CABINET_INFO_W (size: 32)
 */
export interface CABINET_INFO_W {
  /** Windows.Win32.Foundation.PWSTR */
  CabinetPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  CabinetFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DiskName: string | null;
  /** u16 */
  SetId: number;
  /** u16 */
  CabinetNumber: number;
}

export const sizeofCABINET_INFO_W = 32;

export function allocCABINET_INFO_W(data?: Partial<CABINET_INFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINET_INFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.CabinetPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.CabinetPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.CabinetFile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.CabinetFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.DiskName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DiskName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u16
  if (data?.SetId !== undefined) view.setUint16(24, Number(data.SetId), true);
  // 0x1a: u16
  if (data?.CabinetNumber !== undefined) view.setUint16(26, Number(data.CabinetNumber), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.FILE_IN_CABINET_INFO_A (size: 32)
 */
export interface FILE_IN_CABINET_INFO_A {
  /** Windows.Win32.Foundation.PSTR */
  NameInCabinet: string | null;
  /** u32 */
  FileSize: number;
  /** u32 */
  Win32Error: number;
  /** u16 */
  DosDate: number;
  /** u16 */
  DosTime: number;
  /** u16 */
  DosAttribs: number;
  /** array */
  FullTargetName: Deno.PointerValue | null;
}

export const sizeofFILE_IN_CABINET_INFO_A = 32;

export function allocFILE_IN_CABINET_INFO_A(data?: Partial<FILE_IN_CABINET_INFO_A>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_IN_CABINET_INFO_A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NameInCabinet !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.NameInCabinet);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.FileSize !== undefined) view.setUint32(8, Number(data.FileSize), true);
  // 0x0c: u32
  if (data?.Win32Error !== undefined) view.setUint32(12, Number(data.Win32Error), true);
  // 0x10: u16
  if (data?.DosDate !== undefined) view.setUint16(16, Number(data.DosDate), true);
  // 0x12: u16
  if (data?.DosTime !== undefined) view.setUint16(18, Number(data.DosTime), true);
  // 0x14: u16
  if (data?.DosAttribs !== undefined) view.setUint16(20, Number(data.DosAttribs), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.FullTargetName !== undefined) view.setBigUint64(24, data.FullTargetName === null ? 0n : BigInt(util.toPointer(data.FullTargetName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.FILE_IN_CABINET_INFO_W (size: 32)
 */
export interface FILE_IN_CABINET_INFO_W {
  /** Windows.Win32.Foundation.PWSTR */
  NameInCabinet: string | null;
  /** u32 */
  FileSize: number;
  /** u32 */
  Win32Error: number;
  /** u16 */
  DosDate: number;
  /** u16 */
  DosTime: number;
  /** u16 */
  DosAttribs: number;
  /** array */
  FullTargetName: Deno.PointerValue | null;
}

export const sizeofFILE_IN_CABINET_INFO_W = 32;

export function allocFILE_IN_CABINET_INFO_W(data?: Partial<FILE_IN_CABINET_INFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_IN_CABINET_INFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NameInCabinet !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.NameInCabinet);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.FileSize !== undefined) view.setUint32(8, Number(data.FileSize), true);
  // 0x0c: u32
  if (data?.Win32Error !== undefined) view.setUint32(12, Number(data.Win32Error), true);
  // 0x10: u16
  if (data?.DosDate !== undefined) view.setUint16(16, Number(data.DosDate), true);
  // 0x12: u16
  if (data?.DosTime !== undefined) view.setUint16(18, Number(data.DosTime), true);
  // 0x14: u16
  if (data?.DosAttribs !== undefined) view.setUint16(20, Number(data.DosAttribs), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.FullTargetName !== undefined) view.setBigUint64(24, data.FullTargetName === null ? 0n : BigInt(util.toPointer(data.FullTargetName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_REGISTER_CONTROL_STATUSA (size: 24)
 */
export interface SP_REGISTER_CONTROL_STATUSA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  FileName: string | null;
  /** u32 */
  Win32Error: number;
  /** u32 */
  FailureCode: number;
}

export const sizeofSP_REGISTER_CONTROL_STATUSA = 24;

export function allocSP_REGISTER_CONTROL_STATUSA(data?: Partial<SP_REGISTER_CONTROL_STATUSA>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_REGISTER_CONTROL_STATUSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.FileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Win32Error !== undefined) view.setUint32(16, Number(data.Win32Error), true);
  // 0x14: u32
  if (data?.FailureCode !== undefined) view.setUint32(20, Number(data.FailureCode), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_REGISTER_CONTROL_STATUSW (size: 24)
 */
export interface SP_REGISTER_CONTROL_STATUSW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  FileName: string | null;
  /** u32 */
  Win32Error: number;
  /** u32 */
  FailureCode: number;
}

export const sizeofSP_REGISTER_CONTROL_STATUSW = 24;

export function allocSP_REGISTER_CONTROL_STATUSW(data?: Partial<SP_REGISTER_CONTROL_STATUSW>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_REGISTER_CONTROL_STATUSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.FileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Win32Error !== undefined) view.setUint32(16, Number(data.Win32Error), true);
  // 0x14: u32
  if (data?.FailureCode !== undefined) view.setUint32(20, Number(data.FailureCode), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_A (size: 96)
 */
export interface SP_FILE_COPY_PARAMS_A {
  /** u32 */
  cbSize: number;
  /** ptr */
  QueueHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  SourceRootPath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SourcePath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SourceFilename: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SourceDescription: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SourceTagfile: string | null;
  /** Windows.Win32.Foundation.PSTR */
  TargetDirectory: string | null;
  /** Windows.Win32.Foundation.PSTR */
  TargetFilename: string | null;
  /** u32 */
  CopyStyle: number;
  /** ptr */
  LayoutInf: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  SecurityDescriptor: string | null;
}

export const sizeofSP_FILE_COPY_PARAMS_A = 96;

export function allocSP_FILE_COPY_PARAMS_A(data?: Partial<SP_FILE_COPY_PARAMS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_FILE_COPY_PARAMS_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.QueueHandle !== undefined) view.setBigUint64(8, data.QueueHandle === null ? 0n : BigInt(util.toPointer(data.QueueHandle)), true);
  // 0x10: buffer
  if (data?.SourceRootPath !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.SourceRootPath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.SourcePath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.SourcePath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SourceFilename !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.SourceFilename);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.SourceDescription !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.SourceDescription);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.SourceTagfile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.SourceTagfile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.TargetDirectory !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.TargetDirectory);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.TargetFilename !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.TargetFilename);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.CopyStyle !== undefined) view.setUint32(72, Number(data.CopyStyle), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.LayoutInf !== undefined) view.setBigUint64(80, data.LayoutInf === null ? 0n : BigInt(util.toPointer(data.LayoutInf)), true);
  // 0x58: buffer
  if (data?.SecurityDescriptor !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.SecurityDescriptor);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_FILE_COPY_PARAMS_W (size: 96)
 */
export interface SP_FILE_COPY_PARAMS_W {
  /** u32 */
  cbSize: number;
  /** ptr */
  QueueHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourceRootPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourcePath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourceFilename: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourceDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SourceTagfile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  TargetDirectory: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  TargetFilename: string | null;
  /** u32 */
  CopyStyle: number;
  /** ptr */
  LayoutInf: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  SecurityDescriptor: string | null;
}

export const sizeofSP_FILE_COPY_PARAMS_W = 96;

export function allocSP_FILE_COPY_PARAMS_W(data?: Partial<SP_FILE_COPY_PARAMS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_FILE_COPY_PARAMS_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.QueueHandle !== undefined) view.setBigUint64(8, data.QueueHandle === null ? 0n : BigInt(util.toPointer(data.QueueHandle)), true);
  // 0x10: buffer
  if (data?.SourceRootPath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SourceRootPath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.SourcePath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.SourcePath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SourceFilename !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SourceFilename);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.SourceDescription !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.SourceDescription);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.SourceTagfile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.SourceTagfile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.TargetDirectory !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.TargetDirectory);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.TargetFilename !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.TargetFilename);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.CopyStyle !== undefined) view.setUint32(72, Number(data.CopyStyle), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.LayoutInf !== undefined) view.setBigUint64(80, data.LayoutInf === null ? 0n : BigInt(util.toPointer(data.LayoutInf)), true);
  // 0x58: buffer
  if (data?.SecurityDescriptor !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.SecurityDescriptor);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVINFO_DATA (size: 32)
 */
export interface SP_DEVINFO_DATA {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  ClassGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DevInst: number;
  /** usize */
  Reserved: Deno.PointerValue;
}

export const sizeofSP_DEVINFO_DATA = 32;

export function allocSP_DEVINFO_DATA(data?: Partial<SP_DEVINFO_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVINFO_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClassGuid !== undefined) view.setBigUint64(8, data.ClassGuid === null ? 0n : BigInt(util.toPointer(data.ClassGuid)), true);
  // 0x10: u32
  if (data?.DevInst !== undefined) view.setUint32(16, Number(data.DevInst), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.Reserved !== undefined) view.setBigUint64(24, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DATA (size: 32)
 */
export interface SP_DEVICE_INTERFACE_DATA {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  InterfaceClassGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** usize */
  Reserved: Deno.PointerValue;
}

export const sizeofSP_DEVICE_INTERFACE_DATA = 32;

export function allocSP_DEVICE_INTERFACE_DATA(data?: Partial<SP_DEVICE_INTERFACE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVICE_INTERFACE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InterfaceClassGuid !== undefined) view.setBigUint64(8, data.InterfaceClassGuid === null ? 0n : BigInt(util.toPointer(data.InterfaceClassGuid)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.Reserved !== undefined) view.setBigUint64(24, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_A (size: 16)
 */
export interface SP_DEVICE_INTERFACE_DETAIL_DATA_A {
  /** u32 */
  cbSize: number;
  /** array */
  DevicePath: Deno.PointerValue | null;
}

export const sizeofSP_DEVICE_INTERFACE_DETAIL_DATA_A = 16;

export function allocSP_DEVICE_INTERFACE_DETAIL_DATA_A(data?: Partial<SP_DEVICE_INTERFACE_DETAIL_DATA_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVICE_INTERFACE_DETAIL_DATA_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DevicePath !== undefined) view.setBigUint64(8, data.DevicePath === null ? 0n : BigInt(util.toPointer(data.DevicePath)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVICE_INTERFACE_DETAIL_DATA_W (size: 16)
 */
export interface SP_DEVICE_INTERFACE_DETAIL_DATA_W {
  /** u32 */
  cbSize: number;
  /** array */
  DevicePath: Deno.PointerValue | null;
}

export const sizeofSP_DEVICE_INTERFACE_DETAIL_DATA_W = 16;

export function allocSP_DEVICE_INTERFACE_DETAIL_DATA_W(data?: Partial<SP_DEVICE_INTERFACE_DETAIL_DATA_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVICE_INTERFACE_DETAIL_DATA_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DevicePath !== undefined) view.setBigUint64(8, data.DevicePath === null ? 0n : BigInt(util.toPointer(data.DevicePath)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_A (size: 32)
 */
export interface SP_DEVINFO_LIST_DETAIL_DATA_A {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  ClassGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  RemoteMachineHandle: Uint8Array | Deno.PointerValue | null;
  /** array */
  RemoteMachineName: Deno.PointerValue | null;
}

export const sizeofSP_DEVINFO_LIST_DETAIL_DATA_A = 32;

export function allocSP_DEVINFO_LIST_DETAIL_DATA_A(data?: Partial<SP_DEVINFO_LIST_DETAIL_DATA_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVINFO_LIST_DETAIL_DATA_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClassGuid !== undefined) view.setBigUint64(8, data.ClassGuid === null ? 0n : BigInt(util.toPointer(data.ClassGuid)), true);
  // 0x10: pointer
  if (data?.RemoteMachineHandle !== undefined) view.setBigUint64(16, data.RemoteMachineHandle === null ? 0n : BigInt(util.toPointer(data.RemoteMachineHandle)), true);
  // 0x18: pointer
  if (data?.RemoteMachineName !== undefined) view.setBigUint64(24, data.RemoteMachineName === null ? 0n : BigInt(util.toPointer(data.RemoteMachineName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVINFO_LIST_DETAIL_DATA_W (size: 32)
 */
export interface SP_DEVINFO_LIST_DETAIL_DATA_W {
  /** u32 */
  cbSize: number;
  /** System.Guid */
  ClassGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  RemoteMachineHandle: Uint8Array | Deno.PointerValue | null;
  /** array */
  RemoteMachineName: Deno.PointerValue | null;
}

export const sizeofSP_DEVINFO_LIST_DETAIL_DATA_W = 32;

export function allocSP_DEVINFO_LIST_DETAIL_DATA_W(data?: Partial<SP_DEVINFO_LIST_DETAIL_DATA_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVINFO_LIST_DETAIL_DATA_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClassGuid !== undefined) view.setBigUint64(8, data.ClassGuid === null ? 0n : BigInt(util.toPointer(data.ClassGuid)), true);
  // 0x10: pointer
  if (data?.RemoteMachineHandle !== undefined) view.setBigUint64(16, data.RemoteMachineHandle === null ? 0n : BigInt(util.toPointer(data.RemoteMachineHandle)), true);
  // 0x18: pointer
  if (data?.RemoteMachineName !== undefined) view.setBigUint64(24, data.RemoteMachineName === null ? 0n : BigInt(util.toPointer(data.RemoteMachineName)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_A (size: 72)
 */
export interface SP_DEVINSTALL_PARAMS_A {
  /** u32 */
  cbSize: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FlagsEx: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */
  InstallMsgHandler: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  InstallMsgHandlerContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FileQueue: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ClassInstallReserved: Deno.PointerValue;
  /** u32 */
  Reserved: number;
  /** array */
  DriverPath: Deno.PointerValue | null;
}

export const sizeofSP_DEVINSTALL_PARAMS_A = 72;

export function allocSP_DEVINSTALL_PARAMS_A(data?: Partial<SP_DEVINSTALL_PARAMS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVINSTALL_PARAMS_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.FlagsEx !== undefined) view.setUint32(8, Number(data.FlagsEx), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(16, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x18: pointer
  if (data?.InstallMsgHandler !== undefined) view.setBigUint64(24, data.InstallMsgHandler === null ? 0n : BigInt(util.toPointer(data.InstallMsgHandler)), true);
  // 0x20: pointer
  if (data?.InstallMsgHandlerContext !== undefined) view.setBigUint64(32, data.InstallMsgHandlerContext === null ? 0n : BigInt(util.toPointer(data.InstallMsgHandlerContext)), true);
  // 0x28: pointer
  if (data?.FileQueue !== undefined) view.setBigUint64(40, data.FileQueue === null ? 0n : BigInt(util.toPointer(data.FileQueue)), true);
  // 0x30: usize
  if (data?.ClassInstallReserved !== undefined) view.setBigUint64(48, BigInt(data.ClassInstallReserved), true);
  // 0x38: u32
  if (data?.Reserved !== undefined) view.setUint32(56, Number(data.Reserved), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.DriverPath !== undefined) view.setBigUint64(64, data.DriverPath === null ? 0n : BigInt(util.toPointer(data.DriverPath)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DEVINSTALL_PARAMS_W (size: 72)
 */
export interface SP_DEVINSTALL_PARAMS_W {
  /** u32 */
  cbSize: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FlagsEx: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */
  InstallMsgHandler: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  InstallMsgHandlerContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FileQueue: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ClassInstallReserved: Deno.PointerValue;
  /** u32 */
  Reserved: number;
  /** array */
  DriverPath: Deno.PointerValue | null;
}

export const sizeofSP_DEVINSTALL_PARAMS_W = 72;

export function allocSP_DEVINSTALL_PARAMS_W(data?: Partial<SP_DEVINSTALL_PARAMS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DEVINSTALL_PARAMS_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.FlagsEx !== undefined) view.setUint32(8, Number(data.FlagsEx), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(16, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x18: pointer
  if (data?.InstallMsgHandler !== undefined) view.setBigUint64(24, data.InstallMsgHandler === null ? 0n : BigInt(util.toPointer(data.InstallMsgHandler)), true);
  // 0x20: pointer
  if (data?.InstallMsgHandlerContext !== undefined) view.setBigUint64(32, data.InstallMsgHandlerContext === null ? 0n : BigInt(util.toPointer(data.InstallMsgHandlerContext)), true);
  // 0x28: pointer
  if (data?.FileQueue !== undefined) view.setBigUint64(40, data.FileQueue === null ? 0n : BigInt(util.toPointer(data.FileQueue)), true);
  // 0x30: usize
  if (data?.ClassInstallReserved !== undefined) view.setBigUint64(48, BigInt(data.ClassInstallReserved), true);
  // 0x38: u32
  if (data?.Reserved !== undefined) view.setUint32(56, Number(data.Reserved), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.DriverPath !== undefined) view.setBigUint64(64, data.DriverPath === null ? 0n : BigInt(util.toPointer(data.DriverPath)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER (size: 8)
 */
export interface SP_CLASSINSTALL_HEADER {
  /** u32 */
  cbSize: number;
  /** u32 */
  InstallFunction: number;
}

export const sizeofSP_CLASSINSTALL_HEADER = 8;

export function allocSP_CLASSINSTALL_HEADER(data?: Partial<SP_CLASSINSTALL_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_CLASSINSTALL_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.InstallFunction !== undefined) view.setUint32(4, Number(data.InstallFunction), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_ENABLECLASS_PARAMS (size: 24)
 */
export interface SP_ENABLECLASS_PARAMS {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ClassGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EnableMessage: number;
}

export const sizeofSP_ENABLECLASS_PARAMS = 24;

export function allocSP_ENABLECLASS_PARAMS(data?: Partial<SP_ENABLECLASS_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_ENABLECLASS_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.ClassGuid !== undefined) view.setBigUint64(8, data.ClassGuid === null ? 0n : BigInt(util.toPointer(data.ClassGuid)), true);
  // 0x10: u32
  if (data?.EnableMessage !== undefined) view.setUint32(16, Number(data.EnableMessage), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_PROPCHANGE_PARAMS (size: 24)
 */
export interface SP_PROPCHANGE_PARAMS {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StateChange: number;
  /** u32 */
  Scope: number;
  /** u32 */
  HwProfile: number;
}

export const sizeofSP_PROPCHANGE_PARAMS = 24;

export function allocSP_PROPCHANGE_PARAMS(data?: Partial<SP_PROPCHANGE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_PROPCHANGE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: u32
  if (data?.StateChange !== undefined) view.setUint32(8, Number(data.StateChange), true);
  // 0x0c: u32
  if (data?.Scope !== undefined) view.setUint32(12, Number(data.Scope), true);
  // 0x10: u32
  if (data?.HwProfile !== undefined) view.setUint32(16, Number(data.HwProfile), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_REMOVEDEVICE_PARAMS (size: 16)
 */
export interface SP_REMOVEDEVICE_PARAMS {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Scope: number;
  /** u32 */
  HwProfile: number;
}

export const sizeofSP_REMOVEDEVICE_PARAMS = 16;

export function allocSP_REMOVEDEVICE_PARAMS(data?: Partial<SP_REMOVEDEVICE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_REMOVEDEVICE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: u32
  if (data?.Scope !== undefined) view.setUint32(8, Number(data.Scope), true);
  // 0x0c: u32
  if (data?.HwProfile !== undefined) view.setUint32(12, Number(data.HwProfile), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_UNREMOVEDEVICE_PARAMS (size: 16)
 */
export interface SP_UNREMOVEDEVICE_PARAMS {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Scope: number;
  /** u32 */
  HwProfile: number;
}

export const sizeofSP_UNREMOVEDEVICE_PARAMS = 16;

export function allocSP_UNREMOVEDEVICE_PARAMS(data?: Partial<SP_UNREMOVEDEVICE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_UNREMOVEDEVICE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: u32
  if (data?.Scope !== undefined) view.setUint32(8, Number(data.Scope), true);
  // 0x0c: u32
  if (data?.HwProfile !== undefined) view.setUint32(12, Number(data.HwProfile), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_SELECTDEVICE_PARAMS_W (size: 40)
 */
export interface SP_SELECTDEVICE_PARAMS_W {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** array */
  Title: Deno.PointerValue | null;
  /** array */
  Instructions: Deno.PointerValue | null;
  /** array */
  ListLabel: Deno.PointerValue | null;
  /** array */
  SubTitle: Deno.PointerValue | null;
}

export const sizeofSP_SELECTDEVICE_PARAMS_W = 40;

export function allocSP_SELECTDEVICE_PARAMS_W(data?: Partial<SP_SELECTDEVICE_PARAMS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_SELECTDEVICE_PARAMS_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.Title !== undefined) view.setBigUint64(8, data.Title === null ? 0n : BigInt(util.toPointer(data.Title)), true);
  // 0x10: pointer
  if (data?.Instructions !== undefined) view.setBigUint64(16, data.Instructions === null ? 0n : BigInt(util.toPointer(data.Instructions)), true);
  // 0x18: pointer
  if (data?.ListLabel !== undefined) view.setBigUint64(24, data.ListLabel === null ? 0n : BigInt(util.toPointer(data.ListLabel)), true);
  // 0x20: pointer
  if (data?.SubTitle !== undefined) view.setBigUint64(32, data.SubTitle === null ? 0n : BigInt(util.toPointer(data.SubTitle)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DETECTDEVICE_PARAMS (size: 24)
 */
export interface SP_DETECTDEVICE_PARAMS {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.PDETECT_PROGRESS_NOTIFY */
  DetectProgressNotify: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ProgressNotifyParam: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSP_DETECTDEVICE_PARAMS = 24;

export function allocSP_DETECTDEVICE_PARAMS(data?: Partial<SP_DETECTDEVICE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DETECTDEVICE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.DetectProgressNotify !== undefined) view.setBigUint64(8, data.DetectProgressNotify === null ? 0n : BigInt(util.toPointer(data.DetectProgressNotify)), true);
  // 0x10: pointer
  if (data?.ProgressNotifyParam !== undefined) view.setBigUint64(16, data.ProgressNotifyParam === null ? 0n : BigInt(util.toPointer(data.ProgressNotifyParam)), true);
  return buf;
}

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INSTALLWIZARD_DATA (size: 56)
 */
export interface SP_INSTALLWIZARD_DATA {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** array */
  DynamicPages: Deno.PointerValue | null;
  /** u32 */
  NumDynamicPages: number;
  /** u32 */
  DynamicPageFlags: number;
  /** u32 */
  PrivateFlags: number;
  /** Windows.Win32.Foundation.LPARAM */
  PrivateData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndWizardDlg: Deno.PointerValue | null;
}

export const sizeofSP_INSTALLWIZARD_DATA = 56;

export function allocSP_INSTALLWIZARD_DATA(data?: Partial<SP_INSTALLWIZARD_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_INSTALLWIZARD_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DynamicPages !== undefined) view.setBigUint64(16, data.DynamicPages === null ? 0n : BigInt(util.toPointer(data.DynamicPages)), true);
  // 0x18: u32
  if (data?.NumDynamicPages !== undefined) view.setUint32(24, Number(data.NumDynamicPages), true);
  // 0x1c: u32
  if (data?.DynamicPageFlags !== undefined) view.setUint32(28, Number(data.DynamicPageFlags), true);
  // 0x20: u32
  if (data?.PrivateFlags !== undefined) view.setUint32(32, Number(data.PrivateFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.PrivateData !== undefined) view.setBigUint64(40, data.PrivateData === null ? 0n : BigInt(util.toPointer(data.PrivateData)), true);
  // 0x30: pointer
  if (data?.hwndWizardDlg !== undefined) view.setBigUint64(48, data.hwndWizardDlg === null ? 0n : BigInt(util.toPointer(data.hwndWizardDlg)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_NEWDEVICEWIZARD_DATA (size: 40)
 */
export interface SP_NEWDEVICEWIZARD_DATA {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** array */
  DynamicPages: Deno.PointerValue | null;
  /** u32 */
  NumDynamicPages: number;
  /** Windows.Win32.Foundation.HWND */
  hwndWizardDlg: Deno.PointerValue | null;
}

export const sizeofSP_NEWDEVICEWIZARD_DATA = 40;

export function allocSP_NEWDEVICEWIZARD_DATA(data?: Partial<SP_NEWDEVICEWIZARD_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_NEWDEVICEWIZARD_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DynamicPages !== undefined) view.setBigUint64(16, data.DynamicPages === null ? 0n : BigInt(util.toPointer(data.DynamicPages)), true);
  // 0x18: u32
  if (data?.NumDynamicPages !== undefined) view.setUint32(24, Number(data.NumDynamicPages), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hwndWizardDlg !== undefined) view.setBigUint64(32, data.hwndWizardDlg === null ? 0n : BigInt(util.toPointer(data.hwndWizardDlg)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_TROUBLESHOOTER_PARAMS_W (size: 24)
 */
export interface SP_TROUBLESHOOTER_PARAMS_W {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** array */
  ChmFile: Deno.PointerValue | null;
  /** array */
  HtmlTroubleShooter: Deno.PointerValue | null;
}

export const sizeofSP_TROUBLESHOOTER_PARAMS_W = 24;

export function allocSP_TROUBLESHOOTER_PARAMS_W(data?: Partial<SP_TROUBLESHOOTER_PARAMS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_TROUBLESHOOTER_PARAMS_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.ChmFile !== undefined) view.setBigUint64(8, data.ChmFile === null ? 0n : BigInt(util.toPointer(data.ChmFile)), true);
  // 0x10: pointer
  if (data?.HtmlTroubleShooter !== undefined) view.setBigUint64(16, data.HtmlTroubleShooter === null ? 0n : BigInt(util.toPointer(data.HtmlTroubleShooter)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_POWERMESSAGEWAKE_PARAMS_W (size: 16)
 */
export interface SP_POWERMESSAGEWAKE_PARAMS_W {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** array */
  PowerMessageWake: Deno.PointerValue | null;
}

export const sizeofSP_POWERMESSAGEWAKE_PARAMS_W = 16;

export function allocSP_POWERMESSAGEWAKE_PARAMS_W(data?: Partial<SP_POWERMESSAGEWAKE_PARAMS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_POWERMESSAGEWAKE_PARAMS_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.PowerMessageWake !== undefined) view.setBigUint64(8, data.PowerMessageWake === null ? 0n : BigInt(util.toPointer(data.PowerMessageWake)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_A (size: 56)
 */
export interface SP_DRVINFO_DATA_V2_A {
  /** u32 */
  cbSize: number;
  /** u32 */
  DriverType: number;
  /** usize */
  Reserved: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  MfgName: Deno.PointerValue | null;
  /** array */
  ProviderName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  DriverDate: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  DriverVersion: Deno.PointerValue;
}

export const sizeofSP_DRVINFO_DATA_V2_A = 56;

export function allocSP_DRVINFO_DATA_V2_A(data?: Partial<SP_DRVINFO_DATA_V2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINFO_DATA_V2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.DriverType !== undefined) view.setUint32(4, Number(data.DriverType), true);
  // 0x08: usize
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x18: pointer
  if (data?.MfgName !== undefined) view.setBigUint64(24, data.MfgName === null ? 0n : BigInt(util.toPointer(data.MfgName)), true);
  // 0x20: pointer
  if (data?.ProviderName !== undefined) view.setBigUint64(32, data.ProviderName === null ? 0n : BigInt(util.toPointer(data.ProviderName)), true);
  // 0x28: pointer
  if (data?.DriverDate !== undefined) view.setBigUint64(40, data.DriverDate === null ? 0n : BigInt(util.toPointer(data.DriverDate)), true);
  // 0x30: u64
  if (data?.DriverVersion !== undefined) view.setBigUint64(48, BigInt(data.DriverVersion), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V2_W (size: 56)
 */
export interface SP_DRVINFO_DATA_V2_W {
  /** u32 */
  cbSize: number;
  /** u32 */
  DriverType: number;
  /** usize */
  Reserved: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  MfgName: Deno.PointerValue | null;
  /** array */
  ProviderName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  DriverDate: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  DriverVersion: Deno.PointerValue;
}

export const sizeofSP_DRVINFO_DATA_V2_W = 56;

export function allocSP_DRVINFO_DATA_V2_W(data?: Partial<SP_DRVINFO_DATA_V2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINFO_DATA_V2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.DriverType !== undefined) view.setUint32(4, Number(data.DriverType), true);
  // 0x08: usize
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x18: pointer
  if (data?.MfgName !== undefined) view.setBigUint64(24, data.MfgName === null ? 0n : BigInt(util.toPointer(data.MfgName)), true);
  // 0x20: pointer
  if (data?.ProviderName !== undefined) view.setBigUint64(32, data.ProviderName === null ? 0n : BigInt(util.toPointer(data.ProviderName)), true);
  // 0x28: pointer
  if (data?.DriverDate !== undefined) view.setBigUint64(40, data.DriverDate === null ? 0n : BigInt(util.toPointer(data.DriverDate)), true);
  // 0x30: u64
  if (data?.DriverVersion !== undefined) view.setBigUint64(48, BigInt(data.DriverVersion), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V1_A (size: 40)
 */
export interface SP_DRVINFO_DATA_V1_A {
  /** u32 */
  cbSize: number;
  /** u32 */
  DriverType: number;
  /** usize */
  Reserved: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  MfgName: Deno.PointerValue | null;
  /** array */
  ProviderName: Deno.PointerValue | null;
}

export const sizeofSP_DRVINFO_DATA_V1_A = 40;

export function allocSP_DRVINFO_DATA_V1_A(data?: Partial<SP_DRVINFO_DATA_V1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINFO_DATA_V1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.DriverType !== undefined) view.setUint32(4, Number(data.DriverType), true);
  // 0x08: usize
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x18: pointer
  if (data?.MfgName !== undefined) view.setBigUint64(24, data.MfgName === null ? 0n : BigInt(util.toPointer(data.MfgName)), true);
  // 0x20: pointer
  if (data?.ProviderName !== undefined) view.setBigUint64(32, data.ProviderName === null ? 0n : BigInt(util.toPointer(data.ProviderName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DATA_V1_W (size: 40)
 */
export interface SP_DRVINFO_DATA_V1_W {
  /** u32 */
  cbSize: number;
  /** u32 */
  DriverType: number;
  /** usize */
  Reserved: Deno.PointerValue;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  MfgName: Deno.PointerValue | null;
  /** array */
  ProviderName: Deno.PointerValue | null;
}

export const sizeofSP_DRVINFO_DATA_V1_W = 40;

export function allocSP_DRVINFO_DATA_V1_W(data?: Partial<SP_DRVINFO_DATA_V1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINFO_DATA_V1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.DriverType !== undefined) view.setUint32(4, Number(data.DriverType), true);
  // 0x08: usize
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x18: pointer
  if (data?.MfgName !== undefined) view.setBigUint64(24, data.MfgName === null ? 0n : BigInt(util.toPointer(data.MfgName)), true);
  // 0x20: pointer
  if (data?.ProviderName !== undefined) view.setBigUint64(32, data.ProviderName === null ? 0n : BigInt(util.toPointer(data.ProviderName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_A (size: 64)
 */
export interface SP_DRVINFO_DETAIL_DATA_A {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.FILETIME */
  InfDate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CompatIDsOffset: number;
  /** u32 */
  CompatIDsLength: number;
  /** usize */
  Reserved: Deno.PointerValue;
  /** array */
  SectionName: Deno.PointerValue | null;
  /** array */
  InfFileName: Deno.PointerValue | null;
  /** array */
  DrvDescription: Deno.PointerValue | null;
  /** array */
  HardwareID: Deno.PointerValue | null;
}

export const sizeofSP_DRVINFO_DETAIL_DATA_A = 64;

export function allocSP_DRVINFO_DETAIL_DATA_A(data?: Partial<SP_DRVINFO_DETAIL_DATA_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINFO_DETAIL_DATA_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InfDate !== undefined) view.setBigUint64(8, data.InfDate === null ? 0n : BigInt(util.toPointer(data.InfDate)), true);
  // 0x10: u32
  if (data?.CompatIDsOffset !== undefined) view.setUint32(16, Number(data.CompatIDsOffset), true);
  // 0x14: u32
  if (data?.CompatIDsLength !== undefined) view.setUint32(20, Number(data.CompatIDsLength), true);
  // 0x18: usize
  if (data?.Reserved !== undefined) view.setBigUint64(24, BigInt(data.Reserved), true);
  // 0x20: pointer
  if (data?.SectionName !== undefined) view.setBigUint64(32, data.SectionName === null ? 0n : BigInt(util.toPointer(data.SectionName)), true);
  // 0x28: pointer
  if (data?.InfFileName !== undefined) view.setBigUint64(40, data.InfFileName === null ? 0n : BigInt(util.toPointer(data.InfFileName)), true);
  // 0x30: pointer
  if (data?.DrvDescription !== undefined) view.setBigUint64(48, data.DrvDescription === null ? 0n : BigInt(util.toPointer(data.DrvDescription)), true);
  // 0x38: pointer
  if (data?.HardwareID !== undefined) view.setBigUint64(56, data.HardwareID === null ? 0n : BigInt(util.toPointer(data.HardwareID)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINFO_DETAIL_DATA_W (size: 64)
 */
export interface SP_DRVINFO_DETAIL_DATA_W {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.FILETIME */
  InfDate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CompatIDsOffset: number;
  /** u32 */
  CompatIDsLength: number;
  /** usize */
  Reserved: Deno.PointerValue;
  /** array */
  SectionName: Deno.PointerValue | null;
  /** array */
  InfFileName: Deno.PointerValue | null;
  /** array */
  DrvDescription: Deno.PointerValue | null;
  /** array */
  HardwareID: Deno.PointerValue | null;
}

export const sizeofSP_DRVINFO_DETAIL_DATA_W = 64;

export function allocSP_DRVINFO_DETAIL_DATA_W(data?: Partial<SP_DRVINFO_DETAIL_DATA_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINFO_DETAIL_DATA_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.InfDate !== undefined) view.setBigUint64(8, data.InfDate === null ? 0n : BigInt(util.toPointer(data.InfDate)), true);
  // 0x10: u32
  if (data?.CompatIDsOffset !== undefined) view.setUint32(16, Number(data.CompatIDsOffset), true);
  // 0x14: u32
  if (data?.CompatIDsLength !== undefined) view.setUint32(20, Number(data.CompatIDsLength), true);
  // 0x18: usize
  if (data?.Reserved !== undefined) view.setBigUint64(24, BigInt(data.Reserved), true);
  // 0x20: pointer
  if (data?.SectionName !== undefined) view.setBigUint64(32, data.SectionName === null ? 0n : BigInt(util.toPointer(data.SectionName)), true);
  // 0x28: pointer
  if (data?.InfFileName !== undefined) view.setBigUint64(40, data.InfFileName === null ? 0n : BigInt(util.toPointer(data.InfFileName)), true);
  // 0x30: pointer
  if (data?.DrvDescription !== undefined) view.setBigUint64(48, data.DrvDescription === null ? 0n : BigInt(util.toPointer(data.DrvDescription)), true);
  // 0x38: pointer
  if (data?.HardwareID !== undefined) view.setBigUint64(56, data.HardwareID === null ? 0n : BigInt(util.toPointer(data.HardwareID)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_DRVINSTALL_PARAMS (size: 32)
 */
export interface SP_DRVINSTALL_PARAMS {
  /** u32 */
  cbSize: number;
  /** u32 */
  Rank: number;
  /** u32 */
  Flags: number;
  /** usize */
  PrivateData: Deno.PointerValue;
  /** u32 */
  Reserved: number;
}

export const sizeofSP_DRVINSTALL_PARAMS = 32;

export function allocSP_DRVINSTALL_PARAMS(data?: Partial<SP_DRVINSTALL_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_DRVINSTALL_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Rank !== undefined) view.setUint32(4, Number(data.Rank), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.PrivateData !== undefined) view.setBigUint64(16, BigInt(data.PrivateData), true);
  // 0x18: u32
  if (data?.Reserved !== undefined) view.setUint32(24, Number(data.Reserved), true);
  // 0x1c: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.COINSTALLER_CONTEXT_DATA (size: 16)
 */
export interface COINSTALLER_CONTEXT_DATA {
  /** Windows.Win32.Foundation.BOOL */
  PostProcessing: boolean;
  /** u32 */
  InstallResult: number;
  /** ptr */
  PrivateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCOINSTALLER_CONTEXT_DATA = 16;

export function allocCOINSTALLER_CONTEXT_DATA(data?: Partial<COINSTALLER_CONTEXT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCOINSTALLER_CONTEXT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PostProcessing !== undefined) view.setInt32(0, Number(data.PostProcessing), true);
  // 0x04: u32
  if (data?.InstallResult !== undefined) view.setUint32(4, Number(data.InstallResult), true);
  // 0x08: pointer
  if (data?.PrivateData !== undefined) view.setBigUint64(8, data.PrivateData === null ? 0n : BigInt(util.toPointer(data.PrivateData)), true);
  return buf;
}

export type HIMAGELIST = Deno.PointerValue;

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSIMAGELIST_DATA (size: 24)
 */
export interface SP_CLASSIMAGELIST_DATA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.HIMAGELIST */
  ImageList: Uint8Array | Deno.PointerValue | null;
  /** usize */
  Reserved: Deno.PointerValue;
}

export const sizeofSP_CLASSIMAGELIST_DATA = 24;

export function allocSP_CLASSIMAGELIST_DATA(data?: Partial<SP_CLASSIMAGELIST_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_CLASSIMAGELIST_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ImageList !== undefined) view.setBigUint64(8, data.ImageList === null ? 0n : BigInt(util.toPointer(data.ImageList)), true);
  // 0x10: usize
  if (data?.Reserved !== undefined) view.setBigUint64(16, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_PROPSHEETPAGE_REQUEST (size: 24)
 */
export interface SP_PROPSHEETPAGE_REQUEST {
  /** u32 */
  cbSize: number;
  /** u32 */
  PageRequested: number;
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DeviceInfoData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSP_PROPSHEETPAGE_REQUEST = 24;

export function allocSP_PROPSHEETPAGE_REQUEST(data?: Partial<SP_PROPSHEETPAGE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_PROPSHEETPAGE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.PageRequested !== undefined) view.setUint32(4, Number(data.PageRequested), true);
  // 0x08: pointer
  if (data?.DeviceInfoSet !== undefined) view.setBigUint64(8, data.DeviceInfoSet === null ? 0n : BigInt(util.toPointer(data.DeviceInfoSet)), true);
  // 0x10: pointer
  if (data?.DeviceInfoData !== undefined) view.setBigUint64(16, data.DeviceInfoData === null ? 0n : BigInt(util.toPointer(data.DeviceInfoData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_A (size: 32)
 */
export interface SP_BACKUP_QUEUE_PARAMS_V2_A {
  /** u32 */
  cbSize: number;
  /** array */
  FullInfPath: Deno.PointerValue | null;
  /** i32 */
  FilenameOffset: number;
  /** array */
  ReinstallInstance: Deno.PointerValue | null;
}

export const sizeofSP_BACKUP_QUEUE_PARAMS_V2_A = 32;

export function allocSP_BACKUP_QUEUE_PARAMS_V2_A(data?: Partial<SP_BACKUP_QUEUE_PARAMS_V2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_BACKUP_QUEUE_PARAMS_V2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FullInfPath !== undefined) view.setBigUint64(8, data.FullInfPath === null ? 0n : BigInt(util.toPointer(data.FullInfPath)), true);
  // 0x10: i32
  if (data?.FilenameOffset !== undefined) view.setInt32(16, Number(data.FilenameOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ReinstallInstance !== undefined) view.setBigUint64(24, data.ReinstallInstance === null ? 0n : BigInt(util.toPointer(data.ReinstallInstance)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V2_W (size: 32)
 */
export interface SP_BACKUP_QUEUE_PARAMS_V2_W {
  /** u32 */
  cbSize: number;
  /** array */
  FullInfPath: Deno.PointerValue | null;
  /** i32 */
  FilenameOffset: number;
  /** array */
  ReinstallInstance: Deno.PointerValue | null;
}

export const sizeofSP_BACKUP_QUEUE_PARAMS_V2_W = 32;

export function allocSP_BACKUP_QUEUE_PARAMS_V2_W(data?: Partial<SP_BACKUP_QUEUE_PARAMS_V2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_BACKUP_QUEUE_PARAMS_V2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FullInfPath !== undefined) view.setBigUint64(8, data.FullInfPath === null ? 0n : BigInt(util.toPointer(data.FullInfPath)), true);
  // 0x10: i32
  if (data?.FilenameOffset !== undefined) view.setInt32(16, Number(data.FilenameOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ReinstallInstance !== undefined) view.setBigUint64(24, data.ReinstallInstance === null ? 0n : BigInt(util.toPointer(data.ReinstallInstance)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V1_A (size: 24)
 */
export interface SP_BACKUP_QUEUE_PARAMS_V1_A {
  /** u32 */
  cbSize: number;
  /** array */
  FullInfPath: Deno.PointerValue | null;
  /** i32 */
  FilenameOffset: number;
}

export const sizeofSP_BACKUP_QUEUE_PARAMS_V1_A = 24;

export function allocSP_BACKUP_QUEUE_PARAMS_V1_A(data?: Partial<SP_BACKUP_QUEUE_PARAMS_V1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_BACKUP_QUEUE_PARAMS_V1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FullInfPath !== undefined) view.setBigUint64(8, data.FullInfPath === null ? 0n : BigInt(util.toPointer(data.FullInfPath)), true);
  // 0x10: i32
  if (data?.FilenameOffset !== undefined) view.setInt32(16, Number(data.FilenameOffset), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_BACKUP_QUEUE_PARAMS_V1_W (size: 24)
 */
export interface SP_BACKUP_QUEUE_PARAMS_V1_W {
  /** u32 */
  cbSize: number;
  /** array */
  FullInfPath: Deno.PointerValue | null;
  /** i32 */
  FilenameOffset: number;
}

export const sizeofSP_BACKUP_QUEUE_PARAMS_V1_W = 24;

export function allocSP_BACKUP_QUEUE_PARAMS_V1_W(data?: Partial<SP_BACKUP_QUEUE_PARAMS_V1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_BACKUP_QUEUE_PARAMS_V1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FullInfPath !== undefined) view.setBigUint64(8, data.FullInfPath === null ? 0n : BigInt(util.toPointer(data.FullInfPath)), true);
  // 0x10: i32
  if (data?.FilenameOffset !== undefined) view.setInt32(16, Number(data.FilenameOffset), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V1_A (size: 32)
 */
export interface SP_INF_SIGNER_INFO_V1_A {
  /** u32 */
  cbSize: number;
  /** array */
  CatalogFile: Deno.PointerValue | null;
  /** array */
  DigitalSigner: Deno.PointerValue | null;
  /** array */
  DigitalSignerVersion: Deno.PointerValue | null;
}

export const sizeofSP_INF_SIGNER_INFO_V1_A = 32;

export function allocSP_INF_SIGNER_INFO_V1_A(data?: Partial<SP_INF_SIGNER_INFO_V1_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_INF_SIGNER_INFO_V1_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CatalogFile !== undefined) view.setBigUint64(8, data.CatalogFile === null ? 0n : BigInt(util.toPointer(data.CatalogFile)), true);
  // 0x10: pointer
  if (data?.DigitalSigner !== undefined) view.setBigUint64(16, data.DigitalSigner === null ? 0n : BigInt(util.toPointer(data.DigitalSigner)), true);
  // 0x18: pointer
  if (data?.DigitalSignerVersion !== undefined) view.setBigUint64(24, data.DigitalSignerVersion === null ? 0n : BigInt(util.toPointer(data.DigitalSignerVersion)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V1_W (size: 32)
 */
export interface SP_INF_SIGNER_INFO_V1_W {
  /** u32 */
  cbSize: number;
  /** array */
  CatalogFile: Deno.PointerValue | null;
  /** array */
  DigitalSigner: Deno.PointerValue | null;
  /** array */
  DigitalSignerVersion: Deno.PointerValue | null;
}

export const sizeofSP_INF_SIGNER_INFO_V1_W = 32;

export function allocSP_INF_SIGNER_INFO_V1_W(data?: Partial<SP_INF_SIGNER_INFO_V1_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_INF_SIGNER_INFO_V1_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CatalogFile !== undefined) view.setBigUint64(8, data.CatalogFile === null ? 0n : BigInt(util.toPointer(data.CatalogFile)), true);
  // 0x10: pointer
  if (data?.DigitalSigner !== undefined) view.setBigUint64(16, data.DigitalSigner === null ? 0n : BigInt(util.toPointer(data.DigitalSigner)), true);
  // 0x18: pointer
  if (data?.DigitalSignerVersion !== undefined) view.setBigUint64(24, data.DigitalSignerVersion === null ? 0n : BigInt(util.toPointer(data.DigitalSignerVersion)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_A (size: 40)
 */
export interface SP_INF_SIGNER_INFO_V2_A {
  /** u32 */
  cbSize: number;
  /** array */
  CatalogFile: Deno.PointerValue | null;
  /** array */
  DigitalSigner: Deno.PointerValue | null;
  /** array */
  DigitalSignerVersion: Deno.PointerValue | null;
  /** u32 */
  SignerScore: number;
}

export const sizeofSP_INF_SIGNER_INFO_V2_A = 40;

export function allocSP_INF_SIGNER_INFO_V2_A(data?: Partial<SP_INF_SIGNER_INFO_V2_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_INF_SIGNER_INFO_V2_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CatalogFile !== undefined) view.setBigUint64(8, data.CatalogFile === null ? 0n : BigInt(util.toPointer(data.CatalogFile)), true);
  // 0x10: pointer
  if (data?.DigitalSigner !== undefined) view.setBigUint64(16, data.DigitalSigner === null ? 0n : BigInt(util.toPointer(data.DigitalSigner)), true);
  // 0x18: pointer
  if (data?.DigitalSignerVersion !== undefined) view.setBigUint64(24, data.DigitalSignerVersion === null ? 0n : BigInt(util.toPointer(data.DigitalSignerVersion)), true);
  // 0x20: u32
  if (data?.SignerScore !== undefined) view.setUint32(32, Number(data.SignerScore), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_INF_SIGNER_INFO_V2_W (size: 40)
 */
export interface SP_INF_SIGNER_INFO_V2_W {
  /** u32 */
  cbSize: number;
  /** array */
  CatalogFile: Deno.PointerValue | null;
  /** array */
  DigitalSigner: Deno.PointerValue | null;
  /** array */
  DigitalSignerVersion: Deno.PointerValue | null;
  /** u32 */
  SignerScore: number;
}

export const sizeofSP_INF_SIGNER_INFO_V2_W = 40;

export function allocSP_INF_SIGNER_INFO_V2_W(data?: Partial<SP_INF_SIGNER_INFO_V2_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_INF_SIGNER_INFO_V2_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CatalogFile !== undefined) view.setBigUint64(8, data.CatalogFile === null ? 0n : BigInt(util.toPointer(data.CatalogFile)), true);
  // 0x10: pointer
  if (data?.DigitalSigner !== undefined) view.setBigUint64(16, data.DigitalSigner === null ? 0n : BigInt(util.toPointer(data.DigitalSigner)), true);
  // 0x18: pointer
  if (data?.DigitalSignerVersion !== undefined) view.setBigUint64(24, data.DigitalSignerVersion === null ? 0n : BigInt(util.toPointer(data.DigitalSignerVersion)), true);
  // 0x20: u32
  if (data?.SignerScore !== undefined) view.setUint32(32, Number(data.SignerScore), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_SELECTDEVICE_PARAMS_A (size: 48)
 */
export interface SP_SELECTDEVICE_PARAMS_A {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** array */
  Title: Deno.PointerValue | null;
  /** array */
  Instructions: Deno.PointerValue | null;
  /** array */
  ListLabel: Deno.PointerValue | null;
  /** array */
  SubTitle: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofSP_SELECTDEVICE_PARAMS_A = 48;

export function allocSP_SELECTDEVICE_PARAMS_A(data?: Partial<SP_SELECTDEVICE_PARAMS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_SELECTDEVICE_PARAMS_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.Title !== undefined) view.setBigUint64(8, data.Title === null ? 0n : BigInt(util.toPointer(data.Title)), true);
  // 0x10: pointer
  if (data?.Instructions !== undefined) view.setBigUint64(16, data.Instructions === null ? 0n : BigInt(util.toPointer(data.Instructions)), true);
  // 0x18: pointer
  if (data?.ListLabel !== undefined) view.setBigUint64(24, data.ListLabel === null ? 0n : BigInt(util.toPointer(data.ListLabel)), true);
  // 0x20: pointer
  if (data?.SubTitle !== undefined) view.setBigUint64(32, data.SubTitle === null ? 0n : BigInt(util.toPointer(data.SubTitle)), true);
  // 0x28: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(40, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_TROUBLESHOOTER_PARAMS_A (size: 24)
 */
export interface SP_TROUBLESHOOTER_PARAMS_A {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** array */
  ChmFile: Deno.PointerValue | null;
  /** array */
  HtmlTroubleShooter: Deno.PointerValue | null;
}

export const sizeofSP_TROUBLESHOOTER_PARAMS_A = 24;

export function allocSP_TROUBLESHOOTER_PARAMS_A(data?: Partial<SP_TROUBLESHOOTER_PARAMS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_TROUBLESHOOTER_PARAMS_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.ChmFile !== undefined) view.setBigUint64(8, data.ChmFile === null ? 0n : BigInt(util.toPointer(data.ChmFile)), true);
  // 0x10: pointer
  if (data?.HtmlTroubleShooter !== undefined) view.setBigUint64(16, data.HtmlTroubleShooter === null ? 0n : BigInt(util.toPointer(data.HtmlTroubleShooter)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.SP_POWERMESSAGEWAKE_PARAMS_A (size: 16)
 */
export interface SP_POWERMESSAGEWAKE_PARAMS_A {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.SP_CLASSINSTALL_HEADER */
  ClassInstallHeader: Uint8Array | Deno.PointerValue | null;
  /** array */
  PowerMessageWake: Deno.PointerValue | null;
}

export const sizeofSP_POWERMESSAGEWAKE_PARAMS_A = 16;

export function allocSP_POWERMESSAGEWAKE_PARAMS_A(data?: Partial<SP_POWERMESSAGEWAKE_PARAMS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSP_POWERMESSAGEWAKE_PARAMS_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassInstallHeader !== undefined) view.setBigUint64(0, data.ClassInstallHeader === null ? 0n : BigInt(util.toPointer(data.ClassInstallHeader)), true);
  // 0x08: pointer
  if (data?.PowerMessageWake !== undefined) view.setBigUint64(8, data.PowerMessageWake === null ? 0n : BigInt(util.toPointer(data.PowerMessageWake)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_A (size: 40)
 */
export interface CONFLICT_DETAILS_A {
  /** u32 */
  CD_ulSize: number;
  /** u32 */
  CD_ulMask: number;
  /** u32 */
  CD_dnDevInst: number;
  /** usize */
  CD_rdResDes: Deno.PointerValue;
  /** u32 */
  CD_ulFlags: number;
  /** array */
  CD_szDescription: Deno.PointerValue | null;
}

export const sizeofCONFLICT_DETAILS_A = 40;

export function allocCONFLICT_DETAILS_A(data?: Partial<CONFLICT_DETAILS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFLICT_DETAILS_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CD_ulSize !== undefined) view.setUint32(0, Number(data.CD_ulSize), true);
  // 0x04: u32
  if (data?.CD_ulMask !== undefined) view.setUint32(4, Number(data.CD_ulMask), true);
  // 0x08: u32
  if (data?.CD_dnDevInst !== undefined) view.setUint32(8, Number(data.CD_dnDevInst), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.CD_rdResDes !== undefined) view.setBigUint64(16, BigInt(data.CD_rdResDes), true);
  // 0x18: u32
  if (data?.CD_ulFlags !== undefined) view.setUint32(24, Number(data.CD_ulFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CD_szDescription !== undefined) view.setBigUint64(32, data.CD_szDescription === null ? 0n : BigInt(util.toPointer(data.CD_szDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CONFLICT_DETAILS_W (size: 40)
 */
export interface CONFLICT_DETAILS_W {
  /** u32 */
  CD_ulSize: number;
  /** u32 */
  CD_ulMask: number;
  /** u32 */
  CD_dnDevInst: number;
  /** usize */
  CD_rdResDes: Deno.PointerValue;
  /** u32 */
  CD_ulFlags: number;
  /** array */
  CD_szDescription: Deno.PointerValue | null;
}

export const sizeofCONFLICT_DETAILS_W = 40;

export function allocCONFLICT_DETAILS_W(data?: Partial<CONFLICT_DETAILS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFLICT_DETAILS_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CD_ulSize !== undefined) view.setUint32(0, Number(data.CD_ulSize), true);
  // 0x04: u32
  if (data?.CD_ulMask !== undefined) view.setUint32(4, Number(data.CD_ulMask), true);
  // 0x08: u32
  if (data?.CD_dnDevInst !== undefined) view.setUint32(8, Number(data.CD_dnDevInst), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.CD_rdResDes !== undefined) view.setBigUint64(16, BigInt(data.CD_rdResDes), true);
  // 0x18: u32
  if (data?.CD_ulFlags !== undefined) view.setUint32(24, Number(data.CD_ulFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.CD_szDescription !== undefined) view.setBigUint64(32, data.CD_szDescription === null ? 0n : BigInt(util.toPointer(data.CD_szDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_RANGE (size: 40)
 */
export interface MEM_RANGE {
  /** u64 */
  MR_Align: Deno.PointerValue;
  /** u32 */
  MR_nBytes: number;
  /** u64 */
  MR_Min: Deno.PointerValue;
  /** u64 */
  MR_Max: Deno.PointerValue;
  /** u32 */
  MR_Flags: number;
  /** u32 */
  MR_Reserved: number;
}

export const sizeofMEM_RANGE = 40;

export function allocMEM_RANGE(data?: Partial<MEM_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MR_Align !== undefined) view.setBigUint64(0, BigInt(data.MR_Align), true);
  // 0x08: u32
  if (data?.MR_nBytes !== undefined) view.setUint32(8, Number(data.MR_nBytes), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.MR_Min !== undefined) view.setBigUint64(16, BigInt(data.MR_Min), true);
  // 0x18: u64
  if (data?.MR_Max !== undefined) view.setBigUint64(24, BigInt(data.MR_Max), true);
  // 0x20: u32
  if (data?.MR_Flags !== undefined) view.setUint32(32, Number(data.MR_Flags), true);
  // 0x24: u32
  if (data?.MR_Reserved !== undefined) view.setUint32(36, Number(data.MR_Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_DES (size: 32)
 */
export interface MEM_DES {
  /** u32 */
  MD_Count: number;
  /** u32 */
  MD_Type: number;
  /** u64 */
  MD_Alloc_Base: Deno.PointerValue;
  /** u64 */
  MD_Alloc_End: Deno.PointerValue;
  /** u32 */
  MD_Flags: number;
  /** u32 */
  MD_Reserved: number;
}

export const sizeofMEM_DES = 32;

export function allocMEM_DES(data?: Partial<MEM_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MD_Count !== undefined) view.setUint32(0, Number(data.MD_Count), true);
  // 0x04: u32
  if (data?.MD_Type !== undefined) view.setUint32(4, Number(data.MD_Type), true);
  // 0x08: u64
  if (data?.MD_Alloc_Base !== undefined) view.setBigUint64(8, BigInt(data.MD_Alloc_Base), true);
  // 0x10: u64
  if (data?.MD_Alloc_End !== undefined) view.setBigUint64(16, BigInt(data.MD_Alloc_End), true);
  // 0x18: u32
  if (data?.MD_Flags !== undefined) view.setUint32(24, Number(data.MD_Flags), true);
  // 0x1c: u32
  if (data?.MD_Reserved !== undefined) view.setUint32(28, Number(data.MD_Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_RESOURCE (size: 16)
 */
export interface MEM_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_DES */
  MEM_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  MEM_Data: Deno.PointerValue | null;
}

export const sizeofMEM_RESOURCE = 16;

export function allocMEM_RESOURCE(data?: Partial<MEM_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MEM_Header !== undefined) view.setBigUint64(0, data.MEM_Header === null ? 0n : BigInt(util.toPointer(data.MEM_Header)), true);
  // 0x08: pointer
  if (data?.MEM_Data !== undefined) view.setBigUint64(8, data.MEM_Data === null ? 0n : BigInt(util.toPointer(data.MEM_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_LARGE_RANGE (size: 40)
 */
export interface MEM_LARGE_RANGE {
  /** u64 */
  MLR_Align: Deno.PointerValue;
  /** u64 */
  MLR_nBytes: Deno.PointerValue;
  /** u64 */
  MLR_Min: Deno.PointerValue;
  /** u64 */
  MLR_Max: Deno.PointerValue;
  /** u32 */
  MLR_Flags: number;
  /** u32 */
  MLR_Reserved: number;
}

export const sizeofMEM_LARGE_RANGE = 40;

export function allocMEM_LARGE_RANGE(data?: Partial<MEM_LARGE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_LARGE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.MLR_Align !== undefined) view.setBigUint64(0, BigInt(data.MLR_Align), true);
  // 0x08: u64
  if (data?.MLR_nBytes !== undefined) view.setBigUint64(8, BigInt(data.MLR_nBytes), true);
  // 0x10: u64
  if (data?.MLR_Min !== undefined) view.setBigUint64(16, BigInt(data.MLR_Min), true);
  // 0x18: u64
  if (data?.MLR_Max !== undefined) view.setBigUint64(24, BigInt(data.MLR_Max), true);
  // 0x20: u32
  if (data?.MLR_Flags !== undefined) view.setUint32(32, Number(data.MLR_Flags), true);
  // 0x24: u32
  if (data?.MLR_Reserved !== undefined) view.setUint32(36, Number(data.MLR_Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_LARGE_DES (size: 32)
 */
export interface MEM_LARGE_DES {
  /** u32 */
  MLD_Count: number;
  /** u32 */
  MLD_Type: number;
  /** u64 */
  MLD_Alloc_Base: Deno.PointerValue;
  /** u64 */
  MLD_Alloc_End: Deno.PointerValue;
  /** u32 */
  MLD_Flags: number;
  /** u32 */
  MLD_Reserved: number;
}

export const sizeofMEM_LARGE_DES = 32;

export function allocMEM_LARGE_DES(data?: Partial<MEM_LARGE_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_LARGE_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MLD_Count !== undefined) view.setUint32(0, Number(data.MLD_Count), true);
  // 0x04: u32
  if (data?.MLD_Type !== undefined) view.setUint32(4, Number(data.MLD_Type), true);
  // 0x08: u64
  if (data?.MLD_Alloc_Base !== undefined) view.setBigUint64(8, BigInt(data.MLD_Alloc_Base), true);
  // 0x10: u64
  if (data?.MLD_Alloc_End !== undefined) view.setBigUint64(16, BigInt(data.MLD_Alloc_End), true);
  // 0x18: u32
  if (data?.MLD_Flags !== undefined) view.setUint32(24, Number(data.MLD_Flags), true);
  // 0x1c: u32
  if (data?.MLD_Reserved !== undefined) view.setUint32(28, Number(data.MLD_Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_LARGE_RESOURCE (size: 16)
 */
export interface MEM_LARGE_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.MEM_LARGE_DES */
  MEM_LARGE_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  MEM_LARGE_Data: Deno.PointerValue | null;
}

export const sizeofMEM_LARGE_RESOURCE = 16;

export function allocMEM_LARGE_RESOURCE(data?: Partial<MEM_LARGE_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofMEM_LARGE_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MEM_LARGE_Header !== undefined) view.setBigUint64(0, data.MEM_LARGE_Header === null ? 0n : BigInt(util.toPointer(data.MEM_LARGE_Header)), true);
  // 0x08: pointer
  if (data?.MEM_LARGE_Data !== undefined) view.setBigUint64(8, data.MEM_LARGE_Data === null ? 0n : BigInt(util.toPointer(data.MEM_LARGE_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IO_RANGE (size: 48)
 */
export interface IO_RANGE {
  /** u64 */
  IOR_Align: Deno.PointerValue;
  /** u32 */
  IOR_nPorts: number;
  /** u64 */
  IOR_Min: Deno.PointerValue;
  /** u64 */
  IOR_Max: Deno.PointerValue;
  /** u32 */
  IOR_RangeFlags: number;
  /** u64 */
  IOR_Alias: Deno.PointerValue;
}

export const sizeofIO_RANGE = 48;

export function allocIO_RANGE(data?: Partial<IO_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IOR_Align !== undefined) view.setBigUint64(0, BigInt(data.IOR_Align), true);
  // 0x08: u32
  if (data?.IOR_nPorts !== undefined) view.setUint32(8, Number(data.IOR_nPorts), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.IOR_Min !== undefined) view.setBigUint64(16, BigInt(data.IOR_Min), true);
  // 0x18: u64
  if (data?.IOR_Max !== undefined) view.setBigUint64(24, BigInt(data.IOR_Max), true);
  // 0x20: u32
  if (data?.IOR_RangeFlags !== undefined) view.setUint32(32, Number(data.IOR_RangeFlags), true);
  // 0x24: pad4
  // 0x28: u64
  if (data?.IOR_Alias !== undefined) view.setBigUint64(40, BigInt(data.IOR_Alias), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IO_DES (size: 32)
 */
export interface IO_DES {
  /** u32 */
  IOD_Count: number;
  /** u32 */
  IOD_Type: number;
  /** u64 */
  IOD_Alloc_Base: Deno.PointerValue;
  /** u64 */
  IOD_Alloc_End: Deno.PointerValue;
  /** u32 */
  IOD_DesFlags: number;
}

export const sizeofIO_DES = 32;

export function allocIO_DES(data?: Partial<IO_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IOD_Count !== undefined) view.setUint32(0, Number(data.IOD_Count), true);
  // 0x04: u32
  if (data?.IOD_Type !== undefined) view.setUint32(4, Number(data.IOD_Type), true);
  // 0x08: u64
  if (data?.IOD_Alloc_Base !== undefined) view.setBigUint64(8, BigInt(data.IOD_Alloc_Base), true);
  // 0x10: u64
  if (data?.IOD_Alloc_End !== undefined) view.setBigUint64(16, BigInt(data.IOD_Alloc_End), true);
  // 0x18: u32
  if (data?.IOD_DesFlags !== undefined) view.setUint32(24, Number(data.IOD_DesFlags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IO_RESOURCE (size: 16)
 */
export interface IO_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.IO_DES */
  IO_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  IO_Data: Deno.PointerValue | null;
}

export const sizeofIO_RESOURCE = 16;

export function allocIO_RESOURCE(data?: Partial<IO_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IO_Header !== undefined) view.setBigUint64(0, data.IO_Header === null ? 0n : BigInt(util.toPointer(data.IO_Header)), true);
  // 0x08: pointer
  if (data?.IO_Data !== undefined) view.setBigUint64(8, data.IO_Data === null ? 0n : BigInt(util.toPointer(data.IO_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.DMA_RANGE (size: 16)
 */
export interface DMA_RANGE {
  /** u32 */
  DR_Min: number;
  /** u32 */
  DR_Max: number;
  /** u32 */
  DR_Flags: number;
}

export const sizeofDMA_RANGE = 16;

export function allocDMA_RANGE(data?: Partial<DMA_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMA_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DR_Min !== undefined) view.setUint32(0, Number(data.DR_Min), true);
  // 0x04: u32
  if (data?.DR_Max !== undefined) view.setUint32(4, Number(data.DR_Max), true);
  // 0x08: u32
  if (data?.DR_Flags !== undefined) view.setUint32(8, Number(data.DR_Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.DMA_DES (size: 16)
 */
export interface DMA_DES {
  /** u32 */
  DD_Count: number;
  /** u32 */
  DD_Type: number;
  /** u32 */
  DD_Flags: number;
  /** u32 */
  DD_Alloc_Chan: number;
}

export const sizeofDMA_DES = 16;

export function allocDMA_DES(data?: Partial<DMA_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofDMA_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DD_Count !== undefined) view.setUint32(0, Number(data.DD_Count), true);
  // 0x04: u32
  if (data?.DD_Type !== undefined) view.setUint32(4, Number(data.DD_Type), true);
  // 0x08: u32
  if (data?.DD_Flags !== undefined) view.setUint32(8, Number(data.DD_Flags), true);
  // 0x0c: u32
  if (data?.DD_Alloc_Chan !== undefined) view.setUint32(12, Number(data.DD_Alloc_Chan), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.DMA_RESOURCE (size: 16)
 */
export interface DMA_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.DMA_DES */
  DMA_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  DMA_Data: Deno.PointerValue | null;
}

export const sizeofDMA_RESOURCE = 16;

export function allocDMA_RESOURCE(data?: Partial<DMA_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDMA_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DMA_Header !== undefined) view.setBigUint64(0, data.DMA_Header === null ? 0n : BigInt(util.toPointer(data.DMA_Header)), true);
  // 0x08: pointer
  if (data?.DMA_Data !== undefined) view.setBigUint64(8, data.DMA_Data === null ? 0n : BigInt(util.toPointer(data.DMA_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_RANGE (size: 16)
 */
export interface IRQ_RANGE {
  /** u32 */
  IRQR_Min: number;
  /** u32 */
  IRQR_Max: number;
  /** u32 */
  IRQR_Flags: number;
}

export const sizeofIRQ_RANGE = 16;

export function allocIRQ_RANGE(data?: Partial<IRQ_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofIRQ_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IRQR_Min !== undefined) view.setUint32(0, Number(data.IRQR_Min), true);
  // 0x04: u32
  if (data?.IRQR_Max !== undefined) view.setUint32(4, Number(data.IRQR_Max), true);
  // 0x08: u32
  if (data?.IRQR_Flags !== undefined) view.setUint32(8, Number(data.IRQR_Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_DES_32 (size: 24)
 */
export interface IRQ_DES_32 {
  /** u32 */
  IRQD_Count: number;
  /** u32 */
  IRQD_Type: number;
  /** u32 */
  IRQD_Flags: number;
  /** u32 */
  IRQD_Alloc_Num: number;
  /** u32 */
  IRQD_Affinity: number;
}

export const sizeofIRQ_DES_32 = 24;

export function allocIRQ_DES_32(data?: Partial<IRQ_DES_32>): Uint8Array {
  const buf = new Uint8Array(sizeofIRQ_DES_32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IRQD_Count !== undefined) view.setUint32(0, Number(data.IRQD_Count), true);
  // 0x04: u32
  if (data?.IRQD_Type !== undefined) view.setUint32(4, Number(data.IRQD_Type), true);
  // 0x08: u32
  if (data?.IRQD_Flags !== undefined) view.setUint32(8, Number(data.IRQD_Flags), true);
  // 0x0c: u32
  if (data?.IRQD_Alloc_Num !== undefined) view.setUint32(12, Number(data.IRQD_Alloc_Num), true);
  // 0x10: u32
  if (data?.IRQD_Affinity !== undefined) view.setUint32(16, Number(data.IRQD_Affinity), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_DES_64 (size: 24)
 */
export interface IRQ_DES_64 {
  /** u32 */
  IRQD_Count: number;
  /** u32 */
  IRQD_Type: number;
  /** u32 */
  IRQD_Flags: number;
  /** u32 */
  IRQD_Alloc_Num: number;
  /** u64 */
  IRQD_Affinity: Deno.PointerValue;
}

export const sizeofIRQ_DES_64 = 24;

export function allocIRQ_DES_64(data?: Partial<IRQ_DES_64>): Uint8Array {
  const buf = new Uint8Array(sizeofIRQ_DES_64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IRQD_Count !== undefined) view.setUint32(0, Number(data.IRQD_Count), true);
  // 0x04: u32
  if (data?.IRQD_Type !== undefined) view.setUint32(4, Number(data.IRQD_Type), true);
  // 0x08: u32
  if (data?.IRQD_Flags !== undefined) view.setUint32(8, Number(data.IRQD_Flags), true);
  // 0x0c: u32
  if (data?.IRQD_Alloc_Num !== undefined) view.setUint32(12, Number(data.IRQD_Alloc_Num), true);
  // 0x10: u64
  if (data?.IRQD_Affinity !== undefined) view.setBigUint64(16, BigInt(data.IRQD_Affinity), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_RESOURCE_32 (size: 16)
 */
export interface IRQ_RESOURCE_32 {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_DES_32 */
  IRQ_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  IRQ_Data: Deno.PointerValue | null;
}

export const sizeofIRQ_RESOURCE_32 = 16;

export function allocIRQ_RESOURCE_32(data?: Partial<IRQ_RESOURCE_32>): Uint8Array {
  const buf = new Uint8Array(sizeofIRQ_RESOURCE_32);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IRQ_Header !== undefined) view.setBigUint64(0, data.IRQ_Header === null ? 0n : BigInt(util.toPointer(data.IRQ_Header)), true);
  // 0x08: pointer
  if (data?.IRQ_Data !== undefined) view.setBigUint64(8, data.IRQ_Data === null ? 0n : BigInt(util.toPointer(data.IRQ_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_RESOURCE_64 (size: 16)
 */
export interface IRQ_RESOURCE_64 {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.IRQ_DES_64 */
  IRQ_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  IRQ_Data: Deno.PointerValue | null;
}

export const sizeofIRQ_RESOURCE_64 = 16;

export function allocIRQ_RESOURCE_64(data?: Partial<IRQ_RESOURCE_64>): Uint8Array {
  const buf = new Uint8Array(sizeofIRQ_RESOURCE_64);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IRQ_Header !== undefined) view.setBigUint64(0, data.IRQ_Header === null ? 0n : BigInt(util.toPointer(data.IRQ_Header)), true);
  // 0x08: pointer
  if (data?.IRQ_Data !== undefined) view.setBigUint64(8, data.IRQ_Data === null ? 0n : BigInt(util.toPointer(data.IRQ_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.DEVPRIVATE_RANGE (size: 16)
 */
export interface DEVPRIVATE_RANGE {
  /** u32 */
  PR_Data1: number;
  /** u32 */
  PR_Data2: number;
  /** u32 */
  PR_Data3: number;
}

export const sizeofDEVPRIVATE_RANGE = 16;

export function allocDEVPRIVATE_RANGE(data?: Partial<DEVPRIVATE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPRIVATE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PR_Data1 !== undefined) view.setUint32(0, Number(data.PR_Data1), true);
  // 0x04: u32
  if (data?.PR_Data2 !== undefined) view.setUint32(4, Number(data.PR_Data2), true);
  // 0x08: u32
  if (data?.PR_Data3 !== undefined) view.setUint32(8, Number(data.PR_Data3), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.DEVPRIVATE_DES (size: 24)
 */
export interface DEVPRIVATE_DES {
  /** u32 */
  PD_Count: number;
  /** u32 */
  PD_Type: number;
  /** u32 */
  PD_Data1: number;
  /** u32 */
  PD_Data2: number;
  /** u32 */
  PD_Data3: number;
  /** u32 */
  PD_Flags: number;
}

export const sizeofDEVPRIVATE_DES = 24;

export function allocDEVPRIVATE_DES(data?: Partial<DEVPRIVATE_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPRIVATE_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PD_Count !== undefined) view.setUint32(0, Number(data.PD_Count), true);
  // 0x04: u32
  if (data?.PD_Type !== undefined) view.setUint32(4, Number(data.PD_Type), true);
  // 0x08: u32
  if (data?.PD_Data1 !== undefined) view.setUint32(8, Number(data.PD_Data1), true);
  // 0x0c: u32
  if (data?.PD_Data2 !== undefined) view.setUint32(12, Number(data.PD_Data2), true);
  // 0x10: u32
  if (data?.PD_Data3 !== undefined) view.setUint32(16, Number(data.PD_Data3), true);
  // 0x14: u32
  if (data?.PD_Flags !== undefined) view.setUint32(20, Number(data.PD_Flags), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.DEVPRIVATE_RESOURCE (size: 16)
 */
export interface DEVPRIVATE_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.DEVPRIVATE_DES */
  PRV_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  PRV_Data: Deno.PointerValue | null;
}

export const sizeofDEVPRIVATE_RESOURCE = 16;

export function allocDEVPRIVATE_RESOURCE(data?: Partial<DEVPRIVATE_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPRIVATE_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PRV_Header !== undefined) view.setBigUint64(0, data.PRV_Header === null ? 0n : BigInt(util.toPointer(data.PRV_Header)), true);
  // 0x08: pointer
  if (data?.PRV_Data !== undefined) view.setBigUint64(8, data.PRV_Data === null ? 0n : BigInt(util.toPointer(data.PRV_Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CS_DES (size: 32)
 */
export interface CS_DES {
  /** u32 */
  CSD_SignatureLength: number;
  /** u32 */
  CSD_LegacyDataOffset: number;
  /** u32 */
  CSD_LegacyDataSize: number;
  /** u32 */
  CSD_Flags: number;
  /** System.Guid */
  CSD_ClassGuid: Uint8Array | Deno.PointerValue | null;
  /** array */
  CSD_Signature: Deno.PointerValue | null;
}

export const sizeofCS_DES = 32;

export function allocCS_DES(data?: Partial<CS_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofCS_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CSD_SignatureLength !== undefined) view.setUint32(0, Number(data.CSD_SignatureLength), true);
  // 0x04: u32
  if (data?.CSD_LegacyDataOffset !== undefined) view.setUint32(4, Number(data.CSD_LegacyDataOffset), true);
  // 0x08: u32
  if (data?.CSD_LegacyDataSize !== undefined) view.setUint32(8, Number(data.CSD_LegacyDataSize), true);
  // 0x0c: u32
  if (data?.CSD_Flags !== undefined) view.setUint32(12, Number(data.CSD_Flags), true);
  // 0x10: pointer
  if (data?.CSD_ClassGuid !== undefined) view.setBigUint64(16, data.CSD_ClassGuid === null ? 0n : BigInt(util.toPointer(data.CSD_ClassGuid)), true);
  // 0x18: pointer
  if (data?.CSD_Signature !== undefined) view.setBigUint64(24, data.CSD_Signature === null ? 0n : BigInt(util.toPointer(data.CSD_Signature)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CS_RESOURCE (size: 8)
 */
export interface CS_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.CS_DES */
  CS_Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCS_RESOURCE = 8;

export function allocCS_RESOURCE(data?: Partial<CS_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofCS_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CS_Header !== undefined) view.setBigUint64(0, data.CS_Header === null ? 0n : BigInt(util.toPointer(data.CS_Header)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.PCCARD_DES (size: 56)
 */
export interface PCCARD_DES {
  /** u32 */
  PCD_Count: number;
  /** u32 */
  PCD_Type: number;
  /** u32 */
  PCD_Flags: number;
  /** u8 */
  PCD_ConfigIndex: number;
  /** array */
  PCD_Reserved: Deno.PointerValue | null;
  /** u32 */
  PCD_MemoryCardBase1: number;
  /** u32 */
  PCD_MemoryCardBase2: number;
  /** array */
  PCD_MemoryCardBase: Deno.PointerValue | null;
  /** array */
  PCD_MemoryFlags: Deno.PointerValue | null;
  /** array */
  PCD_IoFlags: Deno.PointerValue | null;
}

export const sizeofPCCARD_DES = 56;

export function allocPCCARD_DES(data?: Partial<PCCARD_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofPCCARD_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PCD_Count !== undefined) view.setUint32(0, Number(data.PCD_Count), true);
  // 0x04: u32
  if (data?.PCD_Type !== undefined) view.setUint32(4, Number(data.PCD_Type), true);
  // 0x08: u32
  if (data?.PCD_Flags !== undefined) view.setUint32(8, Number(data.PCD_Flags), true);
  // 0x0c: u8
  if (data?.PCD_ConfigIndex !== undefined) view.setUint8(12, Number(data.PCD_ConfigIndex));
  // 0x0d: pad3
  // 0x10: pointer
  if (data?.PCD_Reserved !== undefined) view.setBigUint64(16, data.PCD_Reserved === null ? 0n : BigInt(util.toPointer(data.PCD_Reserved)), true);
  // 0x18: u32
  if (data?.PCD_MemoryCardBase1 !== undefined) view.setUint32(24, Number(data.PCD_MemoryCardBase1), true);
  // 0x1c: u32
  if (data?.PCD_MemoryCardBase2 !== undefined) view.setUint32(28, Number(data.PCD_MemoryCardBase2), true);
  // 0x20: pointer
  if (data?.PCD_MemoryCardBase !== undefined) view.setBigUint64(32, data.PCD_MemoryCardBase === null ? 0n : BigInt(util.toPointer(data.PCD_MemoryCardBase)), true);
  // 0x28: pointer
  if (data?.PCD_MemoryFlags !== undefined) view.setBigUint64(40, data.PCD_MemoryFlags === null ? 0n : BigInt(util.toPointer(data.PCD_MemoryFlags)), true);
  // 0x30: pointer
  if (data?.PCD_IoFlags !== undefined) view.setBigUint64(48, data.PCD_IoFlags === null ? 0n : BigInt(util.toPointer(data.PCD_IoFlags)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.PCCARD_RESOURCE (size: 8)
 */
export interface PCCARD_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.PCCARD_DES */
  PcCard_Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPCCARD_RESOURCE = 8;

export function allocPCCARD_RESOURCE(data?: Partial<PCCARD_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofPCCARD_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PcCard_Header !== undefined) view.setBigUint64(0, data.PcCard_Header === null ? 0n : BigInt(util.toPointer(data.PcCard_Header)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MFCARD_DES (size: 32)
 */
export interface MFCARD_DES {
  /** u32 */
  PMF_Count: number;
  /** u32 */
  PMF_Type: number;
  /** u32 */
  PMF_Flags: number;
  /** u8 */
  PMF_ConfigOptions: number;
  /** u8 */
  PMF_IoResourceIndex: number;
  /** array */
  PMF_Reserved: Deno.PointerValue | null;
  /** u32 */
  PMF_ConfigRegisterBase: number;
}

export const sizeofMFCARD_DES = 32;

export function allocMFCARD_DES(data?: Partial<MFCARD_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCARD_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PMF_Count !== undefined) view.setUint32(0, Number(data.PMF_Count), true);
  // 0x04: u32
  if (data?.PMF_Type !== undefined) view.setUint32(4, Number(data.PMF_Type), true);
  // 0x08: u32
  if (data?.PMF_Flags !== undefined) view.setUint32(8, Number(data.PMF_Flags), true);
  // 0x0c: u8
  if (data?.PMF_ConfigOptions !== undefined) view.setUint8(12, Number(data.PMF_ConfigOptions));
  // 0x0d: u8
  if (data?.PMF_IoResourceIndex !== undefined) view.setUint8(13, Number(data.PMF_IoResourceIndex));
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.PMF_Reserved !== undefined) view.setBigUint64(16, data.PMF_Reserved === null ? 0n : BigInt(util.toPointer(data.PMF_Reserved)), true);
  // 0x18: u32
  if (data?.PMF_ConfigRegisterBase !== undefined) view.setUint32(24, Number(data.PMF_ConfigRegisterBase), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.MFCARD_RESOURCE (size: 8)
 */
export interface MFCARD_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.MFCARD_DES */
  MfCard_Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMFCARD_RESOURCE = 8;

export function allocMFCARD_RESOURCE(data?: Partial<MFCARD_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofMFCARD_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MfCard_Header !== undefined) view.setBigUint64(0, data.MfCard_Header === null ? 0n : BigInt(util.toPointer(data.MfCard_Header)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.BUSNUMBER_RANGE (size: 16)
 */
export interface BUSNUMBER_RANGE {
  /** u32 */
  BUSR_Min: number;
  /** u32 */
  BUSR_Max: number;
  /** u32 */
  BUSR_nBusNumbers: number;
  /** u32 */
  BUSR_Flags: number;
}

export const sizeofBUSNUMBER_RANGE = 16;

export function allocBUSNUMBER_RANGE(data?: Partial<BUSNUMBER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofBUSNUMBER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BUSR_Min !== undefined) view.setUint32(0, Number(data.BUSR_Min), true);
  // 0x04: u32
  if (data?.BUSR_Max !== undefined) view.setUint32(4, Number(data.BUSR_Max), true);
  // 0x08: u32
  if (data?.BUSR_nBusNumbers !== undefined) view.setUint32(8, Number(data.BUSR_nBusNumbers), true);
  // 0x0c: u32
  if (data?.BUSR_Flags !== undefined) view.setUint32(12, Number(data.BUSR_Flags), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.BUSNUMBER_DES (size: 24)
 */
export interface BUSNUMBER_DES {
  /** u32 */
  BUSD_Count: number;
  /** u32 */
  BUSD_Type: number;
  /** u32 */
  BUSD_Flags: number;
  /** u32 */
  BUSD_Alloc_Base: number;
  /** u32 */
  BUSD_Alloc_End: number;
}

export const sizeofBUSNUMBER_DES = 24;

export function allocBUSNUMBER_DES(data?: Partial<BUSNUMBER_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofBUSNUMBER_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BUSD_Count !== undefined) view.setUint32(0, Number(data.BUSD_Count), true);
  // 0x04: u32
  if (data?.BUSD_Type !== undefined) view.setUint32(4, Number(data.BUSD_Type), true);
  // 0x08: u32
  if (data?.BUSD_Flags !== undefined) view.setUint32(8, Number(data.BUSD_Flags), true);
  // 0x0c: u32
  if (data?.BUSD_Alloc_Base !== undefined) view.setUint32(12, Number(data.BUSD_Alloc_Base), true);
  // 0x10: u32
  if (data?.BUSD_Alloc_End !== undefined) view.setUint32(16, Number(data.BUSD_Alloc_End), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.BUSNUMBER_RESOURCE (size: 16)
 */
export interface BUSNUMBER_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.BUSNUMBER_DES */
  BusNumber_Header: Uint8Array | Deno.PointerValue | null;
  /** array */
  BusNumber_Data: Deno.PointerValue | null;
}

export const sizeofBUSNUMBER_RESOURCE = 16;

export function allocBUSNUMBER_RESOURCE(data?: Partial<BUSNUMBER_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofBUSNUMBER_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BusNumber_Header !== undefined) view.setBigUint64(0, data.BusNumber_Header === null ? 0n : BigInt(util.toPointer(data.BusNumber_Header)), true);
  // 0x08: pointer
  if (data?.BusNumber_Data !== undefined) view.setBigUint64(8, data.BusNumber_Data === null ? 0n : BigInt(util.toPointer(data.BusNumber_Data)), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CONNECTION_DES (size: 24)
 */
export interface CONNECTION_DES {
  /** u32 */
  COND_Type: number;
  /** u32 */
  COND_Flags: number;
  /** u8 */
  COND_Class: number;
  /** u8 */
  COND_ClassType: number;
  /** u8 */
  COND_Reserved1: number;
  /** u8 */
  COND_Reserved2: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  COND_Id: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONNECTION_DES = 24;

export function allocCONNECTION_DES(data?: Partial<CONNECTION_DES>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTION_DES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.COND_Type !== undefined) view.setUint32(0, Number(data.COND_Type), true);
  // 0x04: u32
  if (data?.COND_Flags !== undefined) view.setUint32(4, Number(data.COND_Flags), true);
  // 0x08: u8
  if (data?.COND_Class !== undefined) view.setUint8(8, Number(data.COND_Class));
  // 0x09: u8
  if (data?.COND_ClassType !== undefined) view.setUint8(9, Number(data.COND_ClassType));
  // 0x0a: u8
  if (data?.COND_Reserved1 !== undefined) view.setUint8(10, Number(data.COND_Reserved1));
  // 0x0b: u8
  if (data?.COND_Reserved2 !== undefined) view.setUint8(11, Number(data.COND_Reserved2));
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.COND_Id !== undefined) view.setBigUint64(16, data.COND_Id === null ? 0n : BigInt(util.toPointer(data.COND_Id)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CONNECTION_RESOURCE (size: 8)
 */
export interface CONNECTION_RESOURCE {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.CONNECTION_DES */
  Connection_Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONNECTION_RESOURCE = 8;

export function allocCONNECTION_RESOURCE(data?: Partial<CONNECTION_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofCONNECTION_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Connection_Header !== undefined) view.setBigUint64(0, data.Connection_Header === null ? 0n : BigInt(util.toPointer(data.Connection_Header)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.HWProfileInfo_sA (size: 24)
 */
export interface HWProfileInfo_sA {
  /** u32 */
  HWPI_ulHWProfile: number;
  /** array */
  HWPI_szFriendlyName: Deno.PointerValue | null;
  /** u32 */
  HWPI_dwFlags: number;
}

export const sizeofHWProfileInfo_sA = 24;

export function allocHWProfileInfo_sA(data?: Partial<HWProfileInfo_sA>): Uint8Array {
  const buf = new Uint8Array(sizeofHWProfileInfo_sA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HWPI_ulHWProfile !== undefined) view.setUint32(0, Number(data.HWPI_ulHWProfile), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HWPI_szFriendlyName !== undefined) view.setBigUint64(8, data.HWPI_szFriendlyName === null ? 0n : BigInt(util.toPointer(data.HWPI_szFriendlyName)), true);
  // 0x10: u32
  if (data?.HWPI_dwFlags !== undefined) view.setUint32(16, Number(data.HWPI_dwFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.HWPROFILEINFO_W (size: 24)
 */
export interface HWPROFILEINFO_W {
  /** u32 */
  HWPI_ulHWProfile: number;
  /** array */
  HWPI_szFriendlyName: Deno.PointerValue | null;
  /** u32 */
  HWPI_dwFlags: number;
}

export const sizeofHWPROFILEINFO_W = 24;

export function allocHWPROFILEINFO_W(data?: Partial<HWPROFILEINFO_W>): Uint8Array {
  const buf = new Uint8Array(sizeofHWPROFILEINFO_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HWPI_ulHWProfile !== undefined) view.setUint32(0, Number(data.HWPI_ulHWProfile), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HWPI_szFriendlyName !== undefined) view.setBigUint64(8, data.HWPI_szFriendlyName === null ? 0n : BigInt(util.toPointer(data.HWPI_szFriendlyName)), true);
  // 0x10: u32
  if (data?.HWPI_dwFlags !== undefined) view.setUint32(16, Number(data.HWPI_dwFlags), true);
  // 0x14: pad4
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER (size: 24)
 */
export interface CM_NOTIFY_FILTER {
  /** u32 */
  cbSize: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_TYPE */
  FilterType: CM_NOTIFY_FILTER_TYPE;
  /** u32 */
  Reserved: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCM_NOTIFY_FILTER = 24;

export function allocCM_NOTIFY_FILTER(data?: Partial<CM_NOTIFY_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofCM_NOTIFY_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.FilterType !== undefined) view.setInt32(8, Number(data.FilterType), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.u !== undefined) view.setBigUint64(16, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.DeviceAndDriverInstallation.CM_NOTIFY_EVENT_DATA (size: 16)
 */
export interface CM_NOTIFY_EVENT_DATA {
  /** Windows.Win32.Devices.DeviceAndDriverInstallation.CM_NOTIFY_FILTER_TYPE */
  FilterType: CM_NOTIFY_FILTER_TYPE;
  /** u32 */
  Reserved: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCM_NOTIFY_EVENT_DATA = 16;

export function allocCM_NOTIFY_EVENT_DATA(data?: Partial<CM_NOTIFY_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCM_NOTIFY_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FilterType !== undefined) view.setInt32(0, Number(data.FilterType), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

export type HKEY = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export type HPROPSHEETPAGE = Deno.PointerValue;

// Native Libraries

try {
  var libSETUPAPI_dll = Deno.dlopen("SETUPAPI.dll", {
    SetupGetInfInformationA: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfInformationW: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupQueryInfFileInformationA: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupQueryInfFileInformationW: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupQueryInfOriginalFileInformationA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupQueryInfOriginalFileInformationW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupQueryInfVersionInformationA: {
      parameters: ["pointer", "u32", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupQueryInfVersionInformationW: {
      parameters: ["pointer", "u32", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfDriverStoreLocationA: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfDriverStoreLocationW: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfPublishedNameA: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfPublishedNameW: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfFileListA: {
      parameters: ["buffer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetInfFileListW: {
      parameters: ["buffer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupOpenInfFileW: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    SetupOpenInfFileA: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    SetupOpenMasterInf: {
      parameters: [],
      result: "pointer",
    },
    SetupOpenAppendInfFileW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetupOpenAppendInfFileA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetupCloseInfFile: {
      parameters: ["pointer"],
      result: "void",
    },
    SetupFindFirstLineA: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    SetupFindFirstLineW: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    SetupFindNextLine: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupFindNextMatchLineA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupFindNextMatchLineW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupGetLineByIndexA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetLineByIndexW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetLineCountA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SetupGetLineCountW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SetupGetLineTextA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetLineTextW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetFieldCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetupGetStringFieldA: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetStringFieldW: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetIntField: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetMultiSzFieldA: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetMultiSzFieldW: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetBinaryField: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetFileCompressionInfoA: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetupGetFileCompressionInfoW: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SetupGetFileCompressionInfoExA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupGetFileCompressionInfoExW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDecompressOrCopyFileA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    SetupDecompressOrCopyFileW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    SetupGetSourceFileLocationA: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetSourceFileLocationW: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetSourceFileSizeA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetupGetSourceFileSizeW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetupGetTargetPathA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetTargetPathW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupSetSourceListA: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    SetupSetSourceListW: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    SetupCancelTemporarySourceList: {
      parameters: [],
      result: "i32",
    },
    SetupAddToSourceListA: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    SetupAddToSourceListW: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    SetupRemoveFromSourceListA: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    SetupRemoveFromSourceListW: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    SetupQuerySourceListA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupQuerySourceListW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupFreeSourceListA: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetupFreeSourceListW: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetupPromptForDiskA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    SetupPromptForDiskW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    SetupCopyErrorA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    SetupCopyErrorW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    SetupRenameErrorA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SetupRenameErrorW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SetupDeleteErrorA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SetupDeleteErrorW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SetupBackupErrorA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SetupBackupErrorW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    SetupSetDirectoryIdA: {
      parameters: ["pointer", "u32", "buffer"],
      result: "i32",
    },
    SetupSetDirectoryIdW: {
      parameters: ["pointer", "u32", "buffer"],
      result: "i32",
    },
    SetupSetDirectoryIdExA: {
      parameters: ["pointer", "u32", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    SetupSetDirectoryIdExW: {
      parameters: ["pointer", "u32", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    SetupGetSourceInfoA: {
      parameters: ["pointer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetSourceInfoW: {
      parameters: ["pointer", "u32", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupInstallFileA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupInstallFileW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupInstallFileExA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupInstallFileExW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupOpenFileQueue: {
      parameters: [],
      result: "pointer",
    },
    SetupCloseFileQueue: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupSetFileQueueAlternatePlatformA: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    SetupSetFileQueueAlternatePlatformW: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
    },
    SetupSetPlatformPathOverrideA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetupSetPlatformPathOverrideW: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetupQueueCopyA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupQueueCopyW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupQueueCopyIndirectA: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupQueueCopyIndirectW: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupQueueDefaultCopyA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupQueueDefaultCopyW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupQueueCopySectionA: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupQueueCopySectionW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupQueueDeleteA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    SetupQueueDeleteW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    SetupQueueDeleteSectionA: {
      parameters: ["pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    SetupQueueDeleteSectionW: {
      parameters: ["pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    SetupQueueRenameA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    SetupQueueRenameW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    SetupQueueRenameSectionA: {
      parameters: ["pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    SetupQueueRenameSectionW: {
      parameters: ["pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    SetupCommitFileQueueA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupCommitFileQueueW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupScanFileQueueA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupScanFileQueueW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupGetFileQueueCount: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupGetFileQueueFlags: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupSetFileQueueFlags: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    SetupCopyOEMInfA: {
      parameters: ["buffer", "buffer", "u32", "u32", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupCopyOEMInfW: {
      parameters: ["buffer", "buffer", "u32", "u32", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupUninstallOEMInfA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupUninstallOEMInfW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupUninstallNewlyCopiedInfs: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupCreateDiskSpaceListA: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    SetupCreateDiskSpaceListW: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    SetupDuplicateDiskSpaceListA: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    SetupDuplicateDiskSpaceListW: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    SetupDestroyDiskSpaceList: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupQueryDrivesInDiskSpaceListA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupQueryDrivesInDiskSpaceListW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupQuerySpaceRequiredOnDriveA: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupQuerySpaceRequiredOnDriveW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupAdjustDiskSpaceListA: {
      parameters: ["pointer", "buffer", "i64", "pointer", "u32"],
      result: "i32",
    },
    SetupAdjustDiskSpaceListW: {
      parameters: ["pointer", "buffer", "i64", "pointer", "u32"],
      result: "i32",
    },
    SetupAddToDiskSpaceListA: {
      parameters: ["pointer", "buffer", "i64", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupAddToDiskSpaceListW: {
      parameters: ["pointer", "buffer", "i64", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupAddSectionToDiskSpaceListA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupAddSectionToDiskSpaceListW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupAddInstallSectionToDiskSpaceListA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetupAddInstallSectionToDiskSpaceListW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetupRemoveFromDiskSpaceListA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupRemoveFromDiskSpaceListW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupRemoveSectionFromDiskSpaceListA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupRemoveSectionFromDiskSpaceListW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupRemoveInstallSectionFromDiskSpaceListA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetupRemoveInstallSectionFromDiskSpaceListW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SetupIterateCabinetA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupIterateCabinetW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupPromptReboot: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    SetupInitDefaultQueueCallback: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetupInitDefaultQueueCallbackEx: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    SetupTermDefaultQueueCallback: {
      parameters: ["pointer"],
      result: "void",
    },
    SetupDefaultQueueCallbackA: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    SetupDefaultQueueCallbackW: {
      parameters: ["pointer", "u32", "usize", "usize"],
      result: "u32",
    },
    SetupInstallFromInfSectionA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupInstallFromInfSectionW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupInstallFilesFromInfSectionA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupInstallFilesFromInfSectionW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupInstallServicesFromInfSectionA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupInstallServicesFromInfSectionW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupInstallServicesFromInfSectionExA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupInstallServicesFromInfSectionExW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    InstallHinfSectionA: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "void",
    },
    InstallHinfSectionW: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "void",
    },
    SetupInitializeFileLogA: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    SetupInitializeFileLogW: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    SetupTerminateFileLog: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupLogFileA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupLogFileW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "buffer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    SetupRemoveFileLogEntryA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    SetupRemoveFileLogEntryW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    SetupQueryFileLogA: {
      parameters: ["pointer", "buffer", "buffer", "i32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupQueryFileLogW: {
      parameters: ["pointer", "buffer", "buffer", "i32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupOpenLog: {
      parameters: ["i32"],
      result: "i32",
    },
    SetupLogErrorA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    SetupLogErrorW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    SetupCloseLog: {
      parameters: [],
      result: "void",
    },
    SetupGetThreadLogToken: {
      parameters: [],
      result: "u64",
    },
    SetupSetThreadLogToken: {
      parameters: ["u64"],
      result: "void",
    },
    SetupWriteTextLog: {
      parameters: ["u64", "u32", "u32", "buffer"],
      result: "void",
    },
    SetupWriteTextLogError: {
      parameters: ["u64", "u32", "u32", "u32", "buffer"],
      result: "void",
    },
    SetupWriteTextLogInfLine: {
      parameters: ["u64", "u32", "pointer", "pointer"],
      result: "void",
    },
    SetupGetBackupInformationA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupGetBackupInformationW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupPrepareQueueForRestoreA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupPrepareQueueForRestoreW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupSetNonInteractiveMode: {
      parameters: ["i32"],
      result: "i32",
    },
    SetupGetNonInteractiveMode: {
      parameters: [],
      result: "i32",
    },
    SetupDiCreateDeviceInfoList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetupDiCreateDeviceInfoListExA: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SetupDiCreateDeviceInfoListExW: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SetupDiGetDeviceInfoListClass: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInfoListDetailA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInfoListDetailW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiCreateDeviceInfoA: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiCreateDeviceInfoW: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiOpenDeviceInfoA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiOpenDeviceInfoW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInstanceIdA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInstanceIdW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiDeleteDeviceInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiEnumDeviceInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiDestroyDeviceInfoList: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupDiEnumDeviceInterfaces: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiCreateDeviceInterfaceA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiCreateDeviceInterfaceW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiOpenDeviceInterfaceA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiOpenDeviceInterfaceW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInterfaceAlias: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiDeleteDeviceInterfaceData: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiRemoveDeviceInterface: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInterfaceDetailA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInterfaceDetailW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiInstallDeviceInterfaces: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetDeviceInterfaceDefault: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiRegisterDeviceInfo: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiBuildDriverInfoList: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupDiCancelDriverInfoSearch: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupDiEnumDriverInfoA: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    SetupDiEnumDriverInfoW: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetSelectedDriverA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetSelectedDriverW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetSelectedDriverA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetSelectedDriverW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDriverInfoDetailA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetDriverInfoDetailW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiDestroyDriverInfoList: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetClassDevsA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    SetupDiGetClassDevsW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    SetupDiGetClassDevsExA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SetupDiGetClassDevsExW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    SetupDiGetINFClassA: {
      parameters: ["buffer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetINFClassW: {
      parameters: ["buffer", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiBuildClassInfoList: {
      parameters: ["u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiBuildClassInfoListExA: {
      parameters: ["u32", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiBuildClassInfoListExW: {
      parameters: ["u32", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassDescriptionA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetClassDescriptionW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetClassDescriptionExA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassDescriptionExW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiCallClassInstaller: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSelectDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiSelectBestCompatDrv: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiInstallDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiInstallDriverFiles: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiRegisterCoDeviceInstallers: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiRemoveDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiUnremoveDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiRestartDevices: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiChangeState: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiInstallClassA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiInstallClassW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiInstallClassExA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiInstallClassExW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiOpenClassRegKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SetupDiOpenClassRegKeyExA: {
      parameters: ["pointer", "u32", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    SetupDiOpenClassRegKeyExW: {
      parameters: ["pointer", "u32", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    SetupDiCreateDeviceInterfaceRegKeyA: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "buffer"],
      result: "pointer",
    },
    SetupDiCreateDeviceInterfaceRegKeyW: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "buffer"],
      result: "pointer",
    },
    SetupDiOpenDeviceInterfaceRegKey: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    SetupDiDeleteDeviceInterfaceRegKey: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupDiCreateDevRegKeyA: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "buffer"],
      result: "pointer",
    },
    SetupDiCreateDevRegKeyW: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "buffer"],
      result: "pointer",
    },
    SetupDiOpenDevRegKey: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "u32"],
      result: "pointer",
    },
    SetupDiDeleteDevRegKey: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    SetupDiGetHwProfileList: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetHwProfileListExA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetHwProfileListExW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetDevicePropertyKeys: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetDevicePropertyW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiSetDevicePropertyW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetupDiGetDeviceInterfacePropertyKeys: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetDeviceInterfacePropertyW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiSetDeviceInterfacePropertyW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetupDiGetClassPropertyKeys: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetClassPropertyKeysExW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassPropertyW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetClassPropertyExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiSetClassPropertyW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetupDiSetClassPropertyExW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceRegistryPropertyA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceRegistryPropertyW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetClassRegistryPropertyA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassRegistryPropertyW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiSetDeviceRegistryPropertyA: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiSetDeviceRegistryPropertyW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiSetClassRegistryPropertyA: {
      parameters: ["pointer", "u32", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiSetClassRegistryPropertyW: {
      parameters: ["pointer", "u32", "pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInstallParamsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDeviceInstallParamsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassInstallParamsA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetClassInstallParamsW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiSetDeviceInstallParamsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetDeviceInstallParamsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetClassInstallParamsA: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupDiSetClassInstallParamsW: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetDriverInstallParamsA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetDriverInstallParamsW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetDriverInstallParamsA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetDriverInstallParamsW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiLoadClassIcon: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiLoadDeviceIcon: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    SetupDiDrawMiniIcon: {
      parameters: ["pointer", "pointer", "i32", "u32"],
      result: "i32",
    },
    SetupDiGetClassBitmapIndex: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassImageList: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupDiGetClassImageListExA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassImageListExW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetClassImageIndex: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiDestroyClassImageList: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetupDiGetClassDevPropertySheetsA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiGetClassDevPropertySheetsW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetupDiAskForOEMDisk: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiSelectOEMDrv: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiClassNameFromGuidA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiClassNameFromGuidW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiClassNameFromGuidExA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiClassNameFromGuidExW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiClassGuidsFromNameA: {
      parameters: ["buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiClassGuidsFromNameW: {
      parameters: ["buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiClassGuidsFromNameExA: {
      parameters: ["buffer", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiClassGuidsFromNameExW: {
      parameters: ["buffer", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetHwProfileFriendlyNameA: {
      parameters: ["u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetHwProfileFriendlyNameW: {
      parameters: ["u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetHwProfileFriendlyNameExA: {
      parameters: ["u32", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetHwProfileFriendlyNameExW: {
      parameters: ["u32", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetupDiGetWizardPage: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    SetupDiGetSelectedDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiSetSelectedDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetActualModelsSectionA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetActualModelsSectionW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetActualSectionToInstallA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetActualSectionToInstallW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetActualSectionToInstallExA: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetActualSectionToInstallExW: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetupEnumInfSectionsA: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupEnumInfSectionsW: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetupVerifyInfFileA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetupVerifyInfFileW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetupDiGetCustomDevicePropertyA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupDiGetCustomDevicePropertyW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetupConfigureWmiFromInfSectionA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SetupConfigureWmiFromInfSectionW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libCFGMGR32_dll = Deno.dlopen("CFGMGR32.dll", {
    CM_Add_Empty_Log_Conf: {
      parameters: ["pointer", "u32", "i32", "u32"],
      result: "u32",
    },
    CM_Add_Empty_Log_Conf_Ex: {
      parameters: ["pointer", "u32", "i32", "u32", "isize"],
      result: "u32",
    },
    CM_Add_IDA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    CM_Add_IDW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    CM_Add_ID_ExA: {
      parameters: ["u32", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Add_ID_ExW: {
      parameters: ["u32", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Add_Range: {
      parameters: ["u64", "u64", "usize", "u32"],
      result: "u32",
    },
    CM_Add_Res_Des: {
      parameters: ["pointer", "usize", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Add_Res_Des_Ex: {
      parameters: ["pointer", "usize", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Connect_MachineA: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    CM_Connect_MachineW: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    CM_Create_DevNodeA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Create_DevNodeW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Create_DevNode_ExA: {
      parameters: ["pointer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Create_DevNode_ExW: {
      parameters: ["pointer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Create_Range_List: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    CM_Delete_Class_Key: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    CM_Delete_Class_Key_Ex: {
      parameters: ["pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Delete_DevNode_Key: {
      parameters: ["u32", "u32", "u32"],
      result: "u32",
    },
    CM_Delete_DevNode_Key_Ex: {
      parameters: ["u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Delete_Range: {
      parameters: ["u64", "u64", "usize", "u32"],
      result: "u32",
    },
    CM_Detect_Resource_Conflict: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Detect_Resource_Conflict_Ex: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Disable_DevNode: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Disable_DevNode_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Disconnect_Machine: {
      parameters: ["isize"],
      result: "u32",
    },
    CM_Dup_Range_List: {
      parameters: ["usize", "usize", "u32"],
      result: "u32",
    },
    CM_Enable_DevNode: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Enable_DevNode_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Enumerate_Classes: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Enumerate_Classes_Ex: {
      parameters: ["u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Enumerate_EnumeratorsA: {
      parameters: ["u32", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Enumerate_EnumeratorsW: {
      parameters: ["u32", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Enumerate_Enumerators_ExA: {
      parameters: ["u32", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Enumerate_Enumerators_ExW: {
      parameters: ["u32", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Find_Range: {
      parameters: ["pointer", "u64", "u32", "u64", "u64", "usize", "u32"],
      result: "u32",
    },
    CM_First_Range: {
      parameters: ["usize", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Free_Log_Conf: {
      parameters: ["usize", "u32"],
      result: "u32",
    },
    CM_Free_Log_Conf_Ex: {
      parameters: ["usize", "u32", "isize"],
      result: "u32",
    },
    CM_Free_Log_Conf_Handle: {
      parameters: ["usize"],
      result: "u32",
    },
    CM_Free_Range_List: {
      parameters: ["usize", "u32"],
      result: "u32",
    },
    CM_Free_Res_Des: {
      parameters: ["pointer", "usize", "u32"],
      result: "u32",
    },
    CM_Free_Res_Des_Ex: {
      parameters: ["pointer", "usize", "u32", "isize"],
      result: "u32",
    },
    CM_Free_Res_Des_Handle: {
      parameters: ["usize"],
      result: "u32",
    },
    CM_Get_Child: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Child_Ex: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_NameA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Class_NameW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Class_Name_ExA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_Name_ExW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_Key_NameA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Class_Key_NameW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Class_Key_Name_ExA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_Key_Name_ExW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Depth: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Depth_Ex: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_IDA: {
      parameters: ["u32", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_IDW: {
      parameters: ["u32", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_ID_ExA: {
      parameters: ["u32", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_ID_ExW: {
      parameters: ["u32", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_ID_ListA: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_ID_ListW: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_ID_List_ExA: {
      parameters: ["buffer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_ID_List_ExW: {
      parameters: ["buffer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_ID_List_SizeA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    CM_Get_Device_ID_List_SizeW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    CM_Get_Device_ID_List_Size_ExA: {
      parameters: ["pointer", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_ID_List_Size_ExW: {
      parameters: ["pointer", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_ID_Size: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_ID_Size_Ex: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_PropertyW: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Property_ExW: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_Property_Keys: {
      parameters: ["u32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Property_Keys_Ex: {
      parameters: ["u32", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_Registry_PropertyA: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Registry_PropertyW: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Registry_Property_ExA: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_Registry_Property_ExW: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_Custom_PropertyA: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Custom_PropertyW: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Custom_Property_ExA: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_Custom_Property_ExW: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_DevNode_Status: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_DevNode_Status_Ex: {
      parameters: ["pointer", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_First_Log_Conf: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_First_Log_Conf_Ex: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Global_State: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    CM_Get_Global_State_Ex: {
      parameters: ["pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Hardware_Profile_InfoA: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Hardware_Profile_Info_ExA: {
      parameters: ["u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Hardware_Profile_InfoW: {
      parameters: ["u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Hardware_Profile_Info_ExW: {
      parameters: ["u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_HW_Prof_FlagsA: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_HW_Prof_FlagsW: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_HW_Prof_Flags_ExA: {
      parameters: ["buffer", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_HW_Prof_Flags_ExW: {
      parameters: ["buffer", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_AliasA: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_AliasW: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_Alias_ExA: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_Alias_ExW: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_ListA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_ListW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_List_ExA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_List_ExW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_List_SizeA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_List_SizeW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_List_Size_ExA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_List_Size_ExW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_PropertyW: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_Property_ExW: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Device_Interface_Property_KeysW: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Device_Interface_Property_Keys_ExW: {
      parameters: ["buffer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Log_Conf_Priority: {
      parameters: ["usize", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Log_Conf_Priority_Ex: {
      parameters: ["usize", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Next_Log_Conf: {
      parameters: ["pointer", "usize", "u32"],
      result: "u32",
    },
    CM_Get_Next_Log_Conf_Ex: {
      parameters: ["pointer", "usize", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Parent: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Parent_Ex: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Res_Des_Data: {
      parameters: ["usize", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Res_Des_Data_Ex: {
      parameters: ["usize", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Res_Des_Data_Size: {
      parameters: ["pointer", "usize", "u32"],
      result: "u32",
    },
    CM_Get_Res_Des_Data_Size_Ex: {
      parameters: ["pointer", "usize", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Sibling: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Get_Sibling_Ex: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Version: {
      parameters: [],
      result: "u16",
    },
    CM_Get_Version_Ex: {
      parameters: ["isize"],
      result: "u16",
    },
    CM_Is_Version_Available: {
      parameters: ["u16"],
      result: "i32",
    },
    CM_Is_Version_Available_Ex: {
      parameters: ["u16", "isize"],
      result: "i32",
    },
    CM_Intersect_Range_List: {
      parameters: ["usize", "usize", "usize", "u32"],
      result: "u32",
    },
    CM_Invert_Range_List: {
      parameters: ["usize", "usize", "u64", "u32"],
      result: "u32",
    },
    CM_Locate_DevNodeA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    CM_Locate_DevNodeW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    CM_Locate_DevNode_ExA: {
      parameters: ["pointer", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Locate_DevNode_ExW: {
      parameters: ["pointer", "buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Merge_Range_List: {
      parameters: ["usize", "usize", "usize", "u32"],
      result: "u32",
    },
    CM_Modify_Res_Des: {
      parameters: ["pointer", "usize", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Modify_Res_Des_Ex: {
      parameters: ["pointer", "usize", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Move_DevNode: {
      parameters: ["u32", "u32", "u32"],
      result: "u32",
    },
    CM_Move_DevNode_Ex: {
      parameters: ["u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Next_Range: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Next_Res_Des: {
      parameters: ["pointer", "usize", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Next_Res_Des_Ex: {
      parameters: ["pointer", "usize", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Open_Class_KeyA: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Open_Class_KeyW: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Open_Class_Key_ExA: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Open_Class_Key_ExW: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Open_DevNode_Key: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Open_DevNode_Key_Ex: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Open_Device_Interface_KeyA: {
      parameters: ["buffer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Open_Device_Interface_KeyW: {
      parameters: ["buffer", "u32", "u32", "pointer", "u32"],
      result: "u32",
    },
    CM_Open_Device_Interface_Key_ExA: {
      parameters: ["buffer", "u32", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Open_Device_Interface_Key_ExW: {
      parameters: ["buffer", "u32", "u32", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Delete_Device_Interface_KeyA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    CM_Delete_Device_Interface_KeyW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    CM_Delete_Device_Interface_Key_ExA: {
      parameters: ["buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Delete_Device_Interface_Key_ExW: {
      parameters: ["buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Query_Arbitrator_Free_Data: {
      parameters: ["pointer", "u32", "u32", "u32", "u32"],
      result: "u32",
    },
    CM_Query_Arbitrator_Free_Data_Ex: {
      parameters: ["pointer", "u32", "u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Query_Arbitrator_Free_Size: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "u32",
    },
    CM_Query_Arbitrator_Free_Size_Ex: {
      parameters: ["pointer", "u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Query_Remove_SubTree: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Query_Remove_SubTree_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Query_And_Remove_SubTreeA: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Query_And_Remove_SubTreeW: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Query_And_Remove_SubTree_ExA: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Query_And_Remove_SubTree_ExW: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Request_Device_EjectA: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Request_Device_Eject_ExA: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Request_Device_EjectW: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CM_Request_Device_Eject_ExW: {
      parameters: ["u32", "pointer", "buffer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Reenumerate_DevNode: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Reenumerate_DevNode_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Register_Device_InterfaceA: {
      parameters: ["u32", "pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Register_Device_InterfaceW: {
      parameters: ["u32", "pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CM_Register_Device_Interface_ExA: {
      parameters: ["u32", "pointer", "buffer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Register_Device_Interface_ExW: {
      parameters: ["u32", "pointer", "buffer", "buffer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Set_DevNode_Problem_Ex: {
      parameters: ["u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_DevNode_Problem: {
      parameters: ["u32", "u32", "u32"],
      result: "u32",
    },
    CM_Unregister_Device_InterfaceA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    CM_Unregister_Device_InterfaceW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    CM_Unregister_Device_Interface_ExA: {
      parameters: ["buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Unregister_Device_Interface_ExW: {
      parameters: ["buffer", "u32", "isize"],
      result: "u32",
    },
    CM_Register_Device_Driver: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Register_Device_Driver_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Remove_SubTree: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Remove_SubTree_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_DevNode_PropertyW: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Set_DevNode_Property_ExW: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_DevNode_Registry_PropertyA: {
      parameters: ["u32", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Set_DevNode_Registry_PropertyW: {
      parameters: ["u32", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Set_DevNode_Registry_Property_ExA: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_DevNode_Registry_Property_ExW: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_Device_Interface_PropertyW: {
      parameters: ["buffer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Set_Device_Interface_Property_ExW: {
      parameters: ["buffer", "pointer", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Is_Dock_Station_Present: {
      parameters: ["pointer"],
      result: "u32",
    },
    CM_Is_Dock_Station_Present_Ex: {
      parameters: ["pointer", "isize"],
      result: "u32",
    },
    CM_Request_Eject_PC: {
      parameters: [],
      result: "u32",
    },
    CM_Request_Eject_PC_Ex: {
      parameters: ["isize"],
      result: "u32",
    },
    CM_Set_HW_Prof_FlagsA: {
      parameters: ["buffer", "u32", "u32", "u32"],
      result: "u32",
    },
    CM_Set_HW_Prof_FlagsW: {
      parameters: ["buffer", "u32", "u32", "u32"],
      result: "u32",
    },
    CM_Set_HW_Prof_Flags_ExA: {
      parameters: ["buffer", "u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_HW_Prof_Flags_ExW: {
      parameters: ["buffer", "u32", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Setup_DevNode: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Setup_DevNode_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Test_Range_Available: {
      parameters: ["u64", "u64", "usize", "u32"],
      result: "u32",
    },
    CM_Uninstall_DevNode: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Uninstall_DevNode_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Run_Detection: {
      parameters: ["u32"],
      result: "u32",
    },
    CM_Run_Detection_Ex: {
      parameters: ["u32", "isize"],
      result: "u32",
    },
    CM_Set_HW_Prof: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    CM_Set_HW_Prof_Ex: {
      parameters: ["u32", "u32", "isize"],
      result: "u32",
    },
    CM_Query_Resource_Conflict_List: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Free_Resource_Conflict_Handle: {
      parameters: ["usize"],
      result: "u32",
    },
    CM_Get_Resource_Conflict_Count: {
      parameters: ["usize", "pointer"],
      result: "u32",
    },
    CM_Get_Resource_Conflict_DetailsA: {
      parameters: ["usize", "u32", "pointer"],
      result: "u32",
    },
    CM_Get_Resource_Conflict_DetailsW: {
      parameters: ["usize", "u32", "pointer"],
      result: "u32",
    },
    CM_Get_Class_PropertyW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Class_Property_ExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_Property_Keys: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CM_Get_Class_Property_Keys_Ex: {
      parameters: ["pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Set_Class_PropertyW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    CM_Set_Class_Property_ExW: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_Registry_PropertyA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Get_Class_Registry_PropertyW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "u32", "isize"],
      result: "u32",
    },
    CM_Set_Class_Registry_PropertyA: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CM_Set_Class_Registry_PropertyW: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "isize"],
      result: "u32",
    },
    CMP_WaitNoPendingInstallEvents: {
      parameters: ["u32"],
      result: "u32",
    },
    CM_Register_Notification: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    CM_Unregister_Notification: {
      parameters: ["pointer"],
      result: "u32",
    },
    CM_MapCrToWin32Err: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libnewdev_dll = Deno.dlopen("newdev.dll", {
    UpdateDriverForPlugAndPlayDevicesA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    UpdateDriverForPlugAndPlayDevicesW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    DiInstallDevice: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    DiInstallDriverW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    DiInstallDriverA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    DiUninstallDevice: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    DiUninstallDriverW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    DiUninstallDriverA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    DiShowUpdateDevice: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    DiRollbackDriver: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    DiShowUpdateDriver: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SetupGetInfInformationA(
  InfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SearchControl: number /* u32 */,
  ReturnBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfInformationA(util.toPointer(InfSpec), SearchControl, util.toPointer(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfInformationW(
  InfSpec: Deno.PointerValue | Uint8Array | null /* ptr */,
  SearchControl: number /* u32 */,
  ReturnBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfInformationW(util.toPointer(InfSpec), SearchControl, util.toPointer(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQueryInfFileInformationA(
  InfInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfIndex: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryInfFileInformationA(util.toPointer(InfInformation), InfIndex, util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQueryInfFileInformationW(
  InfInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfIndex: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryInfFileInformationW(util.toPointer(InfInformation), InfIndex, util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQueryInfOriginalFileInformationA(
  InfInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfIndex: number /* u32 */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  OriginalFileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryInfOriginalFileInformationA(util.toPointer(InfInformation), InfIndex, util.toPointer(AlternatePlatformInfo), util.toPointer(OriginalFileInfo)));
}

export function SetupQueryInfOriginalFileInformationW(
  InfInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfIndex: number /* u32 */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  OriginalFileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryInfOriginalFileInformationW(util.toPointer(InfInformation), InfIndex, util.toPointer(AlternatePlatformInfo), util.toPointer(OriginalFileInfo)));
}

export function SetupQueryInfVersionInformationA(
  InfInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfIndex: number /* u32 */,
  Key: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryInfVersionInformationA(util.toPointer(InfInformation), InfIndex, util.pstrToFfi(Key), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQueryInfVersionInformationW(
  InfInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfIndex: number /* u32 */,
  Key: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryInfVersionInformationW(util.toPointer(InfInformation), InfIndex, util.pwstrToFfi(Key), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfDriverStoreLocationA(
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocaleName: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfDriverStoreLocationA(util.pstrToFfi(FileName), util.toPointer(AlternatePlatformInfo), util.pstrToFfi(LocaleName), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfDriverStoreLocationW(
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocaleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfDriverStoreLocationW(util.pwstrToFfi(FileName), util.toPointer(AlternatePlatformInfo), util.pwstrToFfi(LocaleName), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfPublishedNameA(
  DriverStoreLocation: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfPublishedNameA(util.pstrToFfi(DriverStoreLocation), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfPublishedNameW(
  DriverStoreLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfPublishedNameW(util.pwstrToFfi(DriverStoreLocation), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfFileListA(
  DirectoryPath: string | null /* Windows.Win32.Foundation.PSTR */,
  InfStyle: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfFileListA(util.pstrToFfi(DirectoryPath), InfStyle, util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetInfFileListW(
  DirectoryPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfStyle: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetInfFileListW(util.pwstrToFfi(DirectoryPath), InfStyle, util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupOpenInfFileW(
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfClass: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfStyle: number /* u32 */,
  ErrorLine: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupOpenInfFileW(util.pwstrToFfi(FileName), util.pwstrToFfi(InfClass), InfStyle, util.toPointer(ErrorLine)));
}

export function SetupOpenInfFileA(
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  InfClass: string | null /* Windows.Win32.Foundation.PSTR */,
  InfStyle: number /* u32 */,
  ErrorLine: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupOpenInfFileA(util.pstrToFfi(FileName), util.pstrToFfi(InfClass), InfStyle, util.toPointer(ErrorLine)));
}

export function SetupOpenMasterInf(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupOpenMasterInf());
}

export function SetupOpenAppendInfFileW(
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ErrorLine: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupOpenAppendInfFileW(util.pwstrToFfi(FileName), util.toPointer(InfHandle), util.toPointer(ErrorLine)));
}

export function SetupOpenAppendInfFileA(
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ErrorLine: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupOpenAppendInfFileA(util.pstrToFfi(FileName), util.toPointer(InfHandle), util.toPointer(ErrorLine)));
}

export function SetupCloseInfFile(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSETUPAPI_dll.SetupCloseInfFile(util.toPointer(InfHandle));
}

export function SetupFindFirstLineA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
  Key: string | null /* Windows.Win32.Foundation.PSTR */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFindFirstLineA(util.toPointer(InfHandle), util.pstrToFfi(Section), util.pstrToFfi(Key), util.toPointer(Context)));
}

export function SetupFindFirstLineW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
  Key: string | null /* Windows.Win32.Foundation.PWSTR */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFindFirstLineW(util.toPointer(InfHandle), util.pwstrToFfi(Section), util.pwstrToFfi(Key), util.toPointer(Context)));
}

export function SetupFindNextLine(
  ContextIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  ContextOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFindNextLine(util.toPointer(ContextIn), util.toPointer(ContextOut)));
}

export function SetupFindNextMatchLineA(
  ContextIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  Key: string | null /* Windows.Win32.Foundation.PSTR */,
  ContextOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFindNextMatchLineA(util.toPointer(ContextIn), util.pstrToFfi(Key), util.toPointer(ContextOut)));
}

export function SetupFindNextMatchLineW(
  ContextIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  Key: string | null /* Windows.Win32.Foundation.PWSTR */,
  ContextOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFindNextMatchLineW(util.toPointer(ContextIn), util.pwstrToFfi(Key), util.toPointer(ContextOut)));
}

export function SetupGetLineByIndexA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
  Index: number /* u32 */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetLineByIndexA(util.toPointer(InfHandle), util.pstrToFfi(Section), Index, util.toPointer(Context)));
}

export function SetupGetLineByIndexW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
  Index: number /* u32 */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetLineByIndexW(util.toPointer(InfHandle), util.pwstrToFfi(Section), Index, util.toPointer(Context)));
}

export function SetupGetLineCountA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSETUPAPI_dll.SetupGetLineCountA(util.toPointer(InfHandle), util.pstrToFfi(Section));
}

export function SetupGetLineCountW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSETUPAPI_dll.SetupGetLineCountW(util.toPointer(InfHandle), util.pwstrToFfi(Section));
}

export function SetupGetLineTextA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
  Key: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetLineTextA(util.toPointer(Context), util.toPointer(InfHandle), util.pstrToFfi(Section), util.pstrToFfi(Key), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetLineTextW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
  Key: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetLineTextW(util.toPointer(Context), util.toPointer(InfHandle), util.pwstrToFfi(Section), util.pwstrToFfi(Key), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetFieldCount(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupGetFieldCount(util.toPointer(Context));
}

export function SetupGetStringFieldA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FieldIndex: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetStringFieldA(util.toPointer(Context), FieldIndex, util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetStringFieldW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FieldIndex: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetStringFieldW(util.toPointer(Context), FieldIndex, util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetIntField(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FieldIndex: number /* u32 */,
  IntegerValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetIntField(util.toPointer(Context), FieldIndex, util.toPointer(IntegerValue)));
}

export function SetupGetMultiSzFieldA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FieldIndex: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetMultiSzFieldA(util.toPointer(Context), FieldIndex, util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetMultiSzFieldW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FieldIndex: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetMultiSzFieldW(util.toPointer(Context), FieldIndex, util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetBinaryField(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FieldIndex: number /* u32 */,
  ReturnBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetBinaryField(util.toPointer(Context), FieldIndex, util.toPointer(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetFileCompressionInfoA(
  SourceFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  ActualSourceFileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompressionType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupGetFileCompressionInfoA(util.pstrToFfi(SourceFileName), util.toPointer(ActualSourceFileName), util.toPointer(SourceFileSize), util.toPointer(TargetFileSize), util.toPointer(CompressionType));
}

export function SetupGetFileCompressionInfoW(
  SourceFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ActualSourceFileName: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompressionType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupGetFileCompressionInfoW(util.pwstrToFfi(SourceFileName), util.toPointer(ActualSourceFileName), util.toPointer(SourceFileSize), util.toPointer(TargetFileSize), util.toPointer(CompressionType));
}

export function SetupGetFileCompressionInfoExA(
  SourceFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  ActualSourceFileNameBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ActualSourceFileNameBufferLen: number /* u32 */,
  RequiredBufferLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompressionType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetFileCompressionInfoExA(util.pstrToFfi(SourceFileName), util.pstrToFfi(ActualSourceFileNameBuffer), ActualSourceFileNameBufferLen, util.toPointer(RequiredBufferLen), util.toPointer(SourceFileSize), util.toPointer(TargetFileSize), util.toPointer(CompressionType)));
}

export function SetupGetFileCompressionInfoExW(
  SourceFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ActualSourceFileNameBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ActualSourceFileNameBufferLen: number /* u32 */,
  RequiredBufferLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompressionType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetFileCompressionInfoExW(util.pwstrToFfi(SourceFileName), util.pwstrToFfi(ActualSourceFileNameBuffer), ActualSourceFileNameBufferLen, util.toPointer(RequiredBufferLen), util.toPointer(SourceFileSize), util.toPointer(TargetFileSize), util.toPointer(CompressionType)));
}

export function SetupDecompressOrCopyFileA(
  SourceFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  CompressionType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupDecompressOrCopyFileA(util.pstrToFfi(SourceFileName), util.pstrToFfi(TargetFileName), util.toPointer(CompressionType));
}

export function SetupDecompressOrCopyFileW(
  SourceFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  CompressionType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupDecompressOrCopyFileW(util.pwstrToFfi(SourceFileName), util.pwstrToFfi(TargetFileName), util.toPointer(CompressionType));
}

export function SetupGetSourceFileLocationA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetSourceFileLocationA(util.toPointer(InfHandle), util.toPointer(InfContext), util.pstrToFfi(FileName), util.toPointer(SourceId), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetSourceFileLocationW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetSourceFileLocationW(util.toPointer(InfHandle), util.toPointer(InfContext), util.pwstrToFfi(FileName), util.toPointer(SourceId), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetSourceFileSizeA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
  FileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  RoundingFactor: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetSourceFileSizeA(util.toPointer(InfHandle), util.toPointer(InfContext), util.pstrToFfi(FileName), util.pstrToFfi(Section), util.toPointer(FileSize), RoundingFactor));
}

export function SetupGetSourceFileSizeW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
  FileSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  RoundingFactor: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetSourceFileSizeW(util.toPointer(InfHandle), util.toPointer(InfContext), util.pwstrToFfi(FileName), util.pwstrToFfi(Section), util.toPointer(FileSize), RoundingFactor));
}

export function SetupGetTargetPathA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetTargetPathA(util.toPointer(InfHandle), util.toPointer(InfContext), util.pstrToFfi(Section), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetTargetPathW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetTargetPathW(util.toPointer(InfHandle), util.toPointer(InfContext), util.pwstrToFfi(Section), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupSetSourceListA(
  Flags: number /* u32 */,
  SourceList: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetSourceListA(Flags, util.toPointer(SourceList), SourceCount));
}

export function SetupSetSourceListW(
  Flags: number /* u32 */,
  SourceList: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetSourceListW(Flags, util.toPointer(SourceList), SourceCount));
}

export function SetupCancelTemporarySourceList(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupCancelTemporarySourceList());
}

export function SetupAddToSourceListA(
  Flags: number /* u32 */,
  Source: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddToSourceListA(Flags, util.pstrToFfi(Source)));
}

export function SetupAddToSourceListW(
  Flags: number /* u32 */,
  Source: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddToSourceListW(Flags, util.pwstrToFfi(Source)));
}

export function SetupRemoveFromSourceListA(
  Flags: number /* u32 */,
  Source: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveFromSourceListA(Flags, util.pstrToFfi(Source)));
}

export function SetupRemoveFromSourceListW(
  Flags: number /* u32 */,
  Source: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveFromSourceListW(Flags, util.pwstrToFfi(Source)));
}

export function SetupQuerySourceListA(
  Flags: number /* u32 */,
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQuerySourceListA(Flags, util.toPointer(List), util.toPointer(Count)));
}

export function SetupQuerySourceListW(
  Flags: number /* u32 */,
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQuerySourceListW(Flags, util.toPointer(List), util.toPointer(Count)));
}

export function SetupFreeSourceListA(
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFreeSourceListA(util.toPointer(List), Count));
}

export function SetupFreeSourceListW(
  List: Deno.PointerValue | Uint8Array | null /* ptr */,
  Count: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupFreeSourceListW(util.toPointer(List), Count));
}

export function SetupPromptForDiskA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  DiskName: string | null /* Windows.Win32.Foundation.PSTR */,
  PathToSource: string | null /* Windows.Win32.Foundation.PSTR */,
  FileSought: string | null /* Windows.Win32.Foundation.PSTR */,
  TagFile: string | null /* Windows.Win32.Foundation.PSTR */,
  DiskPromptStyle: number /* u32 */,
  PathBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  PathBufferSize: number /* u32 */,
  PathRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupPromptForDiskA(util.hwndToFfi(hwndParent), util.pstrToFfi(DialogTitle), util.pstrToFfi(DiskName), util.pstrToFfi(PathToSource), util.pstrToFfi(FileSought), util.pstrToFfi(TagFile), DiskPromptStyle, util.pstrToFfi(PathBuffer), PathBufferSize, util.toPointer(PathRequiredSize));
}

export function SetupPromptForDiskW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  DiskName: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathToSource: string | null /* Windows.Win32.Foundation.PWSTR */,
  FileSought: string | null /* Windows.Win32.Foundation.PWSTR */,
  TagFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  DiskPromptStyle: number /* u32 */,
  PathBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathBufferSize: number /* u32 */,
  PathRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupPromptForDiskW(util.hwndToFfi(hwndParent), util.pwstrToFfi(DialogTitle), util.pwstrToFfi(DiskName), util.pwstrToFfi(PathToSource), util.pwstrToFfi(FileSought), util.pwstrToFfi(TagFile), DiskPromptStyle, util.pwstrToFfi(PathBuffer), PathBufferSize, util.toPointer(PathRequiredSize));
}

export function SetupCopyErrorA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  DiskName: string | null /* Windows.Win32.Foundation.PSTR */,
  PathToSource: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFile: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetPathFile: string | null /* Windows.Win32.Foundation.PSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
  PathBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  PathBufferSize: number /* u32 */,
  PathRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupCopyErrorA(util.hwndToFfi(hwndParent), util.pstrToFfi(DialogTitle), util.pstrToFfi(DiskName), util.pstrToFfi(PathToSource), util.pstrToFfi(SourceFile), util.pstrToFfi(TargetPathFile), Win32ErrorCode, Style, util.pstrToFfi(PathBuffer), PathBufferSize, util.toPointer(PathRequiredSize));
}

export function SetupCopyErrorW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  DiskName: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathToSource: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetPathFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
  PathBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathBufferSize: number /* u32 */,
  PathRequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupCopyErrorW(util.hwndToFfi(hwndParent), util.pwstrToFfi(DialogTitle), util.pwstrToFfi(DiskName), util.pwstrToFfi(PathToSource), util.pwstrToFfi(SourceFile), util.pwstrToFfi(TargetPathFile), Win32ErrorCode, Style, util.pwstrToFfi(PathBuffer), PathBufferSize, util.toPointer(PathRequiredSize));
}

export function SetupRenameErrorA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFile: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFile: string | null /* Windows.Win32.Foundation.PSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupRenameErrorA(util.hwndToFfi(hwndParent), util.pstrToFfi(DialogTitle), util.pstrToFfi(SourceFile), util.pstrToFfi(TargetFile), Win32ErrorCode, Style);
}

export function SetupRenameErrorW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupRenameErrorW(util.hwndToFfi(hwndParent), util.pwstrToFfi(DialogTitle), util.pwstrToFfi(SourceFile), util.pwstrToFfi(TargetFile), Win32ErrorCode, Style);
}

export function SetupDeleteErrorA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  File: string | null /* Windows.Win32.Foundation.PSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupDeleteErrorA(util.hwndToFfi(hwndParent), util.pstrToFfi(DialogTitle), util.pstrToFfi(File), Win32ErrorCode, Style);
}

export function SetupDeleteErrorW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  File: string | null /* Windows.Win32.Foundation.PWSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupDeleteErrorW(util.hwndToFfi(hwndParent), util.pwstrToFfi(DialogTitle), util.pwstrToFfi(File), Win32ErrorCode, Style);
}

export function SetupBackupErrorA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFile: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFile: string | null /* Windows.Win32.Foundation.PSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupBackupErrorA(util.hwndToFfi(hwndParent), util.pstrToFfi(DialogTitle), util.pstrToFfi(SourceFile), util.pstrToFfi(TargetFile), Win32ErrorCode, Style);
}

export function SetupBackupErrorW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DialogTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  Win32ErrorCode: number /* u32 */,
  Style: number /* u32 */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupBackupErrorW(util.hwndToFfi(hwndParent), util.pwstrToFfi(DialogTitle), util.pwstrToFfi(SourceFile), util.pwstrToFfi(TargetFile), Win32ErrorCode, Style);
}

export function SetupSetDirectoryIdA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Id: number /* u32 */,
  Directory: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetDirectoryIdA(util.toPointer(InfHandle), Id, util.pstrToFfi(Directory)));
}

export function SetupSetDirectoryIdW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Id: number /* u32 */,
  Directory: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetDirectoryIdW(util.toPointer(InfHandle), Id, util.pwstrToFfi(Directory)));
}

export function SetupSetDirectoryIdExA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Id: number /* u32 */,
  Directory: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  Reserved1: number /* u32 */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetDirectoryIdExA(util.toPointer(InfHandle), Id, util.pstrToFfi(Directory), Flags, Reserved1, util.toPointer(Reserved2)));
}

export function SetupSetDirectoryIdExW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Id: number /* u32 */,
  Directory: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  Reserved1: number /* u32 */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetDirectoryIdExW(util.toPointer(InfHandle), Id, util.pwstrToFfi(Directory), Flags, Reserved1, util.toPointer(Reserved2)));
}

export function SetupGetSourceInfoA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceId: number /* u32 */,
  InfoDesired: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetSourceInfoA(util.toPointer(InfHandle), SourceId, InfoDesired, util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupGetSourceInfoW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceId: number /* u32 */,
  InfoDesired: number /* u32 */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetSourceInfoW(util.toPointer(InfHandle), SourceId, InfoDesired, util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupInstallFileA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFile: string | null /* Windows.Win32.Foundation.PSTR */,
  SourcePathRoot: string | null /* Windows.Win32.Foundation.PSTR */,
  DestinationName: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyStyle: SP_COPY_STYLE /* Windows.Win32.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE */,
  CopyMsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFileA(util.toPointer(InfHandle), util.toPointer(InfContext), util.pstrToFfi(SourceFile), util.pstrToFfi(SourcePathRoot), util.pstrToFfi(DestinationName), CopyStyle, util.toPointer(CopyMsgHandler), util.toPointer(Context)));
}

export function SetupInstallFileW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourcePathRoot: string | null /* Windows.Win32.Foundation.PWSTR */,
  DestinationName: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyStyle: SP_COPY_STYLE /* Windows.Win32.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE */,
  CopyMsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFileW(util.toPointer(InfHandle), util.toPointer(InfContext), util.pwstrToFfi(SourceFile), util.pwstrToFfi(SourcePathRoot), util.pwstrToFfi(DestinationName), CopyStyle, util.toPointer(CopyMsgHandler), util.toPointer(Context)));
}

export function SetupInstallFileExA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFile: string | null /* Windows.Win32.Foundation.PSTR */,
  SourcePathRoot: string | null /* Windows.Win32.Foundation.PSTR */,
  DestinationName: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyStyle: SP_COPY_STYLE /* Windows.Win32.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE */,
  CopyMsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileWasInUse: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFileExA(util.toPointer(InfHandle), util.toPointer(InfContext), util.pstrToFfi(SourceFile), util.pstrToFfi(SourcePathRoot), util.pstrToFfi(DestinationName), CopyStyle, util.toPointer(CopyMsgHandler), util.toPointer(Context), util.toPointer(FileWasInUse)));
}

export function SetupInstallFileExW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourcePathRoot: string | null /* Windows.Win32.Foundation.PWSTR */,
  DestinationName: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyStyle: SP_COPY_STYLE /* Windows.Win32.Devices.DeviceAndDriverInstallation.SP_COPY_STYLE */,
  CopyMsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileWasInUse: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFileExW(util.toPointer(InfHandle), util.toPointer(InfContext), util.pwstrToFfi(SourceFile), util.pwstrToFfi(SourcePathRoot), util.pwstrToFfi(DestinationName), CopyStyle, util.toPointer(CopyMsgHandler), util.toPointer(Context), util.toPointer(FileWasInUse)));
}

export function SetupOpenFileQueue(): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupOpenFileQueue());
}

export function SetupCloseFileQueue(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupCloseFileQueue(util.toPointer(QueueHandle)));
}

export function SetupSetFileQueueAlternatePlatformA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternateDefaultCatalogFile: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetFileQueueAlternatePlatformA(util.toPointer(QueueHandle), util.toPointer(AlternatePlatformInfo), util.pstrToFfi(AlternateDefaultCatalogFile)));
}

export function SetupSetFileQueueAlternatePlatformW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternateDefaultCatalogFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetFileQueueAlternatePlatformW(util.toPointer(QueueHandle), util.toPointer(AlternatePlatformInfo), util.pwstrToFfi(AlternateDefaultCatalogFile)));
}

export function SetupSetPlatformPathOverrideA(
  Override: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetPlatformPathOverrideA(util.pstrToFfi(Override)));
}

export function SetupSetPlatformPathOverrideW(
  Override: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetPlatformPathOverrideW(util.pwstrToFfi(Override)));
}

export function SetupQueueCopyA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  SourcePath: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceDescription: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceTagfile: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetDirectory: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyStyle: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueCopyA(util.toPointer(QueueHandle), util.pstrToFfi(SourceRootPath), util.pstrToFfi(SourcePath), util.pstrToFfi(SourceFilename), util.pstrToFfi(SourceDescription), util.pstrToFfi(SourceTagfile), util.pstrToFfi(TargetDirectory), util.pstrToFfi(TargetFilename), CopyStyle));
}

export function SetupQueueCopyW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourcePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceTagfile: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyStyle: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueCopyW(util.toPointer(QueueHandle), util.pwstrToFfi(SourceRootPath), util.pwstrToFfi(SourcePath), util.pwstrToFfi(SourceFilename), util.pwstrToFfi(SourceDescription), util.pwstrToFfi(SourceTagfile), util.pwstrToFfi(TargetDirectory), util.pwstrToFfi(TargetFilename), CopyStyle));
}

export function SetupQueueCopyIndirectA(
  CopyParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueCopyIndirectA(util.toPointer(CopyParams)));
}

export function SetupQueueCopyIndirectW(
  CopyParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueCopyIndirectW(util.toPointer(CopyParams)));
}

export function SetupQueueDefaultCopyA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyStyle: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueDefaultCopyA(util.toPointer(QueueHandle), util.toPointer(InfHandle), util.pstrToFfi(SourceRootPath), util.pstrToFfi(SourceFilename), util.pstrToFfi(TargetFilename), CopyStyle));
}

export function SetupQueueDefaultCopyW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyStyle: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueDefaultCopyW(util.toPointer(QueueHandle), util.toPointer(InfHandle), util.pwstrToFfi(SourceRootPath), util.pwstrToFfi(SourceFilename), util.pwstrToFfi(TargetFilename), CopyStyle));
}

export function SetupQueueCopySectionA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyStyle: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueCopySectionA(util.toPointer(QueueHandle), util.pstrToFfi(SourceRootPath), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pstrToFfi(Section), CopyStyle));
}

export function SetupQueueCopySectionW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyStyle: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueCopySectionW(util.toPointer(QueueHandle), util.pwstrToFfi(SourceRootPath), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pwstrToFfi(Section), CopyStyle));
}

export function SetupQueueDeleteA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PathPart1: string | null /* Windows.Win32.Foundation.PSTR */,
  PathPart2: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueDeleteA(util.toPointer(QueueHandle), util.pstrToFfi(PathPart1), util.pstrToFfi(PathPart2)));
}

export function SetupQueueDeleteW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PathPart1: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathPart2: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueDeleteW(util.toPointer(QueueHandle), util.pwstrToFfi(PathPart1), util.pwstrToFfi(PathPart2)));
}

export function SetupQueueDeleteSectionA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueDeleteSectionA(util.toPointer(QueueHandle), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pstrToFfi(Section)));
}

export function SetupQueueDeleteSectionW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueDeleteSectionW(util.toPointer(QueueHandle), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pwstrToFfi(Section)));
}

export function SetupQueueRenameA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourcePath: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetPath: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueRenameA(util.toPointer(QueueHandle), util.pstrToFfi(SourcePath), util.pstrToFfi(SourceFilename), util.pstrToFfi(TargetPath), util.pstrToFfi(TargetFilename)));
}

export function SetupQueueRenameW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourcePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueRenameW(util.toPointer(QueueHandle), util.pwstrToFfi(SourcePath), util.pwstrToFfi(SourceFilename), util.pwstrToFfi(TargetPath), util.pwstrToFfi(TargetFilename)));
}

export function SetupQueueRenameSectionA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueRenameSectionA(util.toPointer(QueueHandle), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pstrToFfi(Section)));
}

export function SetupQueueRenameSectionW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Section: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueueRenameSectionW(util.toPointer(QueueHandle), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pwstrToFfi(Section)));
}

export function SetupCommitFileQueueA(
  Owner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  MsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupCommitFileQueueA(util.hwndToFfi(Owner), util.toPointer(QueueHandle), util.toPointer(MsgHandler), util.toPointer(Context)));
}

export function SetupCommitFileQueueW(
  Owner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  MsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupCommitFileQueueW(util.hwndToFfi(Owner), util.toPointer(QueueHandle), util.toPointer(MsgHandler), util.toPointer(Context)));
}

export function SetupScanFileQueueA(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  Window: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  CallbackRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */,
  CallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Result: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupScanFileQueueA(util.toPointer(FileQueue), Flags, util.hwndToFfi(Window), util.toPointer(CallbackRoutine), util.toPointer(CallbackContext), util.toPointer(Result)));
}

export function SetupScanFileQueueW(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  Window: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  CallbackRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W */,
  CallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  Result: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupScanFileQueueW(util.toPointer(FileQueue), Flags, util.hwndToFfi(Window), util.toPointer(CallbackRoutine), util.toPointer(CallbackContext), util.toPointer(Result)));
}

export function SetupGetFileQueueCount(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubQueueFileOp: number /* u32 */,
  NumOperations: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetFileQueueCount(util.toPointer(FileQueue), SubQueueFileOp, util.toPointer(NumOperations)));
}

export function SetupGetFileQueueFlags(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetFileQueueFlags(util.toPointer(FileQueue), util.toPointer(Flags)));
}

export function SetupSetFileQueueFlags(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  FlagMask: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetFileQueueFlags(util.toPointer(FileQueue), FlagMask, Flags));
}

export function SetupCopyOEMInfA(
  SourceInfFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  OEMSourceMediaLocation: string | null /* Windows.Win32.Foundation.PSTR */,
  OEMSourceMediaType: OEM_SOURCE_MEDIA_TYPE /* Windows.Win32.Devices.DeviceAndDriverInstallation.OEM_SOURCE_MEDIA_TYPE */,
  CopyStyle: number /* u32 */,
  DestinationInfFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  DestinationInfFileNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestinationInfFileNameComponent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupCopyOEMInfA(util.pstrToFfi(SourceInfFileName), util.pstrToFfi(OEMSourceMediaLocation), OEMSourceMediaType, CopyStyle, util.pstrToFfi(DestinationInfFileName), DestinationInfFileNameSize, util.toPointer(RequiredSize), util.toPointer(DestinationInfFileNameComponent)));
}

export function SetupCopyOEMInfW(
  SourceInfFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  OEMSourceMediaLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  OEMSourceMediaType: OEM_SOURCE_MEDIA_TYPE /* Windows.Win32.Devices.DeviceAndDriverInstallation.OEM_SOURCE_MEDIA_TYPE */,
  CopyStyle: number /* u32 */,
  DestinationInfFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DestinationInfFileNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  DestinationInfFileNameComponent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupCopyOEMInfW(util.pwstrToFfi(SourceInfFileName), util.pwstrToFfi(OEMSourceMediaLocation), OEMSourceMediaType, CopyStyle, util.pwstrToFfi(DestinationInfFileName), DestinationInfFileNameSize, util.toPointer(RequiredSize), util.toPointer(DestinationInfFileNameComponent)));
}

export function SetupUninstallOEMInfA(
  InfFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupUninstallOEMInfA(util.pstrToFfi(InfFileName), Flags, util.toPointer(Reserved)));
}

export function SetupUninstallOEMInfW(
  InfFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupUninstallOEMInfW(util.pwstrToFfi(InfFileName), Flags, util.toPointer(Reserved)));
}

export function SetupUninstallNewlyCopiedInfs(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupUninstallNewlyCopiedInfs(util.toPointer(FileQueue), Flags, util.toPointer(Reserved)));
}

export function SetupCreateDiskSpaceListA(
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupCreateDiskSpaceListA(util.toPointer(Reserved1), Reserved2, Flags));
}

export function SetupCreateDiskSpaceListW(
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupCreateDiskSpaceListW(util.toPointer(Reserved1), Reserved2, Flags));
}

export function SetupDuplicateDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDuplicateDiskSpaceListA(util.toPointer(DiskSpace), util.toPointer(Reserved1), Reserved2, Flags));
}

export function SetupDuplicateDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDuplicateDiskSpaceListW(util.toPointer(DiskSpace), util.toPointer(Reserved1), Reserved2, Flags));
}

export function SetupDestroyDiskSpaceList(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDestroyDiskSpaceList(util.toPointer(DiskSpace)));
}

export function SetupQueryDrivesInDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryDrivesInDiskSpaceListA(util.toPointer(DiskSpace), util.pstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQueryDrivesInDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryDrivesInDiskSpaceListW(util.toPointer(DiskSpace), util.pwstrToFfi(ReturnBuffer), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQuerySpaceRequiredOnDriveA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriveSpec: string | null /* Windows.Win32.Foundation.PSTR */,
  SpaceRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQuerySpaceRequiredOnDriveA(util.toPointer(DiskSpace), util.pstrToFfi(DriveSpec), util.toPointer(SpaceRequired), util.toPointer(Reserved1), Reserved2));
}

export function SetupQuerySpaceRequiredOnDriveW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriveSpec: string | null /* Windows.Win32.Foundation.PWSTR */,
  SpaceRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQuerySpaceRequiredOnDriveW(util.toPointer(DiskSpace), util.pwstrToFfi(DriveSpec), util.toPointer(SpaceRequired), util.toPointer(Reserved1), Reserved2));
}

export function SetupAdjustDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriveRoot: string | null /* Windows.Win32.Foundation.PSTR */,
  Amount: Deno.PointerValue /* i64 */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAdjustDiskSpaceListA(util.toPointer(DiskSpace), util.pstrToFfi(DriveRoot), Amount, util.toPointer(Reserved1), Reserved2));
}

export function SetupAdjustDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriveRoot: string | null /* Windows.Win32.Foundation.PWSTR */,
  Amount: Deno.PointerValue /* i64 */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAdjustDiskSpaceListW(util.toPointer(DiskSpace), util.pwstrToFfi(DriveRoot), Amount, util.toPointer(Reserved1), Reserved2));
}

export function SetupAddToDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFilespec: string | null /* Windows.Win32.Foundation.PSTR */,
  FileSize: Deno.PointerValue /* i64 */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddToDiskSpaceListA(util.toPointer(DiskSpace), util.pstrToFfi(TargetFilespec), FileSize, Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupAddToDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFilespec: string | null /* Windows.Win32.Foundation.PWSTR */,
  FileSize: Deno.PointerValue /* i64 */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddToDiskSpaceListW(util.toPointer(DiskSpace), util.pwstrToFfi(TargetFilespec), FileSize, Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupAddSectionToDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddSectionToDiskSpaceListA(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pstrToFfi(SectionName), Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupAddSectionToDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddSectionToDiskSpaceListW(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pwstrToFfi(SectionName), Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupAddInstallSectionToDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LayoutInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddInstallSectionToDiskSpaceListA(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(LayoutInfHandle), util.pstrToFfi(SectionName), util.toPointer(Reserved1), Reserved2));
}

export function SetupAddInstallSectionToDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LayoutInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupAddInstallSectionToDiskSpaceListW(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(LayoutInfHandle), util.pwstrToFfi(SectionName), util.toPointer(Reserved1), Reserved2));
}

export function SetupRemoveFromDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFilespec: string | null /* Windows.Win32.Foundation.PSTR */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveFromDiskSpaceListA(util.toPointer(DiskSpace), util.pstrToFfi(TargetFilespec), Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupRemoveFromDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  TargetFilespec: string | null /* Windows.Win32.Foundation.PWSTR */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveFromDiskSpaceListW(util.toPointer(DiskSpace), util.pwstrToFfi(TargetFilespec), Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupRemoveSectionFromDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveSectionFromDiskSpaceListA(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pstrToFfi(SectionName), Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupRemoveSectionFromDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  ListInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Operation: SETUP_FILE_OPERATION /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_FILE_OPERATION */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveSectionFromDiskSpaceListW(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(ListInfHandle), util.pwstrToFfi(SectionName), Operation, util.toPointer(Reserved1), Reserved2));
}

export function SetupRemoveInstallSectionFromDiskSpaceListA(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LayoutInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveInstallSectionFromDiskSpaceListA(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(LayoutInfHandle), util.pstrToFfi(SectionName), util.toPointer(Reserved1), Reserved2));
}

export function SetupRemoveInstallSectionFromDiskSpaceListW(
  DiskSpace: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LayoutInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveInstallSectionFromDiskSpaceListW(util.toPointer(DiskSpace), util.toPointer(InfHandle), util.toPointer(LayoutInfHandle), util.pwstrToFfi(SectionName), util.toPointer(Reserved1), Reserved2));
}

export function SetupIterateCabinetA(
  CabinetFile: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: number /* u32 */,
  MsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupIterateCabinetA(util.pstrToFfi(CabinetFile), Reserved, util.toPointer(MsgHandler), util.toPointer(Context)));
}

export function SetupIterateCabinetW(
  CabinetFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: number /* u32 */,
  MsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupIterateCabinetW(util.pwstrToFfi(CabinetFile), Reserved, util.toPointer(MsgHandler), util.toPointer(Context)));
}

export function SetupPromptReboot(
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  Owner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ScanOnly: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libSETUPAPI_dll.SetupPromptReboot(util.toPointer(FileQueue), util.hwndToFfi(Owner), util.boolToFfi(ScanOnly));
}

export function SetupInitDefaultQueueCallback(
  OwnerWindow: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupInitDefaultQueueCallback(util.hwndToFfi(OwnerWindow)));
}

export function SetupInitDefaultQueueCallbackEx(
  OwnerWindow: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  AlternateProgressWindow: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ProgressMessage: number /* u32 */,
  Reserved1: number /* u32 */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupInitDefaultQueueCallbackEx(util.hwndToFfi(OwnerWindow), util.hwndToFfi(AlternateProgressWindow), ProgressMessage, Reserved1, util.toPointer(Reserved2)));
}

export function SetupTermDefaultQueueCallback(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSETUPAPI_dll.SetupTermDefaultQueueCallback(util.toPointer(Context));
}

export function SetupDefaultQueueCallbackA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Notification: number /* u32 */,
  Param1: Deno.PointerValue /* usize */,
  Param2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupDefaultQueueCallbackA(util.toPointer(Context), Notification, Param1, Param2);
}

export function SetupDefaultQueueCallbackW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Notification: number /* u32 */,
  Param1: Deno.PointerValue /* usize */,
  Param2: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libSETUPAPI_dll.SetupDefaultQueueCallbackW(util.toPointer(Context), Notification, Param1, Param2);
}

export function SetupInstallFromInfSectionA(
  Owner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  RelativeKeyRoot: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyFlags: number /* u32 */,
  MsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_A */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFromInfSectionA(util.hwndToFfi(Owner), util.toPointer(InfHandle), util.pstrToFfi(SectionName), Flags, util.toPointer(RelativeKeyRoot), util.pstrToFfi(SourceRootPath), CopyFlags, util.toPointer(MsgHandler), util.toPointer(Context), util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupInstallFromInfSectionW(
  Owner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  RelativeKeyRoot: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyFlags: number /* u32 */,
  MsgHandler: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_FILE_CALLBACK_W */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFromInfSectionW(util.hwndToFfi(Owner), util.toPointer(InfHandle), util.pwstrToFfi(SectionName), Flags, util.toPointer(RelativeKeyRoot), util.pwstrToFfi(SourceRootPath), CopyFlags, util.toPointer(MsgHandler), util.toPointer(Context), util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupInstallFilesFromInfSectionA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LayoutInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  CopyFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFilesFromInfSectionA(util.toPointer(InfHandle), util.toPointer(LayoutInfHandle), util.toPointer(FileQueue), util.pstrToFfi(SectionName), util.pstrToFfi(SourceRootPath), CopyFlags));
}

export function SetupInstallFilesFromInfSectionW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LayoutInfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  CopyFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallFilesFromInfSectionW(util.toPointer(InfHandle), util.toPointer(LayoutInfHandle), util.toPointer(FileQueue), util.pwstrToFfi(SectionName), util.pwstrToFfi(SourceRootPath), CopyFlags));
}

export function SetupInstallServicesFromInfSectionA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallServicesFromInfSectionA(util.toPointer(InfHandle), util.pstrToFfi(SectionName), Flags));
}

export function SetupInstallServicesFromInfSectionW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallServicesFromInfSectionW(util.toPointer(InfHandle), util.pwstrToFfi(SectionName), Flags));
}

export function SetupInstallServicesFromInfSectionExA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallServicesFromInfSectionExA(util.toPointer(InfHandle), util.pstrToFfi(SectionName), Flags, util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(Reserved1), util.toPointer(Reserved2)));
}

export function SetupInstallServicesFromInfSectionExW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupInstallServicesFromInfSectionExW(util.toPointer(InfHandle), util.pwstrToFfi(SectionName), Flags, util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(Reserved1), util.toPointer(Reserved2)));
}

export function InstallHinfSectionA(
  Window: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ModuleHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  CommandLine: string | null /* Windows.Win32.Foundation.PSTR */,
  ShowCommand: number /* i32 */,
): void /* void */ {
  return libSETUPAPI_dll.InstallHinfSectionA(util.hwndToFfi(Window), util.toPointer(ModuleHandle), util.pstrToFfi(CommandLine), ShowCommand);
}

export function InstallHinfSectionW(
  Window: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ModuleHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  CommandLine: string | null /* Windows.Win32.Foundation.PWSTR */,
  ShowCommand: number /* i32 */,
): void /* void */ {
  return libSETUPAPI_dll.InstallHinfSectionW(util.hwndToFfi(Window), util.toPointer(ModuleHandle), util.pwstrToFfi(CommandLine), ShowCommand);
}

export function SetupInitializeFileLogA(
  LogFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupInitializeFileLogA(util.pstrToFfi(LogFileName), Flags));
}

export function SetupInitializeFileLogW(
  LogFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupInitializeFileLogW(util.pwstrToFfi(LogFileName), Flags));
}

export function SetupTerminateFileLog(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupTerminateFileLog(util.toPointer(FileLogHandle)));
}

export function SetupLogFileA(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  Checksum: number /* u32 */,
  DiskTagfile: string | null /* Windows.Win32.Foundation.PSTR */,
  DiskDescription: string | null /* Windows.Win32.Foundation.PSTR */,
  OtherInfo: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupLogFileA(util.toPointer(FileLogHandle), util.pstrToFfi(LogSectionName), util.pstrToFfi(SourceFilename), util.pstrToFfi(TargetFilename), Checksum, util.pstrToFfi(DiskTagfile), util.pstrToFfi(DiskDescription), util.pstrToFfi(OtherInfo), Flags));
}

export function SetupLogFileW(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  SourceFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  Checksum: number /* u32 */,
  DiskTagfile: string | null /* Windows.Win32.Foundation.PWSTR */,
  DiskDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
  OtherInfo: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupLogFileW(util.toPointer(FileLogHandle), util.pwstrToFfi(LogSectionName), util.pwstrToFfi(SourceFilename), util.pwstrToFfi(TargetFilename), Checksum, util.pwstrToFfi(DiskTagfile), util.pwstrToFfi(DiskDescription), util.pwstrToFfi(OtherInfo), Flags));
}

export function SetupRemoveFileLogEntryA(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveFileLogEntryA(util.toPointer(FileLogHandle), util.pstrToFfi(LogSectionName), util.pstrToFfi(TargetFilename)));
}

export function SetupRemoveFileLogEntryW(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupRemoveFileLogEntryW(util.toPointer(FileLogHandle), util.pwstrToFfi(LogSectionName), util.pwstrToFfi(TargetFilename)));
}

export function SetupQueryFileLogA(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  DesiredInfo: SetupFileLogInfo /* Windows.Win32.Devices.DeviceAndDriverInstallation.SetupFileLogInfo */,
  DataOut: string | null /* Windows.Win32.Foundation.PSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryFileLogA(util.toPointer(FileLogHandle), util.pstrToFfi(LogSectionName), util.pstrToFfi(TargetFilename), DesiredInfo, util.pstrToFfi(DataOut), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupQueryFileLogW(
  FileLogHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  TargetFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  DesiredInfo: SetupFileLogInfo /* Windows.Win32.Devices.DeviceAndDriverInstallation.SetupFileLogInfo */,
  DataOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  ReturnBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupQueryFileLogW(util.toPointer(FileLogHandle), util.pwstrToFfi(LogSectionName), util.pwstrToFfi(TargetFilename), DesiredInfo, util.pwstrToFfi(DataOut), ReturnBufferSize, util.toPointer(RequiredSize)));
}

export function SetupOpenLog(
  Erase: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupOpenLog(util.boolToFfi(Erase)));
}

export function SetupLogErrorA(
  MessageString: string | null /* Windows.Win32.Foundation.PSTR */,
  Severity: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupLogErrorA(util.pstrToFfi(MessageString), Severity));
}

export function SetupLogErrorW(
  MessageString: string | null /* Windows.Win32.Foundation.PWSTR */,
  Severity: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupLogErrorW(util.pwstrToFfi(MessageString), Severity));
}

export function SetupCloseLog(): void /* void */ {
  return libSETUPAPI_dll.SetupCloseLog();
}

export function SetupGetThreadLogToken(): Deno.PointerValue /* u64 */ {
  return libSETUPAPI_dll.SetupGetThreadLogToken();
}

export function SetupSetThreadLogToken(
  LogToken: Deno.PointerValue /* u64 */,
): void /* void */ {
  return libSETUPAPI_dll.SetupSetThreadLogToken(LogToken);
}

export function SetupWriteTextLog(
  LogToken: Deno.PointerValue /* u64 */,
  Category: number /* u32 */,
  Flags: number /* u32 */,
  MessageStr: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSETUPAPI_dll.SetupWriteTextLog(LogToken, Category, Flags, util.pstrToFfi(MessageStr));
}

export function SetupWriteTextLogError(
  LogToken: Deno.PointerValue /* u64 */,
  Category: number /* u32 */,
  LogFlags: number /* u32 */,
  Error: number /* u32 */,
  MessageStr: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSETUPAPI_dll.SetupWriteTextLogError(LogToken, Category, LogFlags, Error, util.pstrToFfi(MessageStr));
}

export function SetupWriteTextLogInfLine(
  LogToken: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSETUPAPI_dll.SetupWriteTextLogInfLine(LogToken, Flags, util.toPointer(InfHandle), util.toPointer(Context));
}

export function SetupGetBackupInformationA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  BackupParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetBackupInformationA(util.toPointer(QueueHandle), util.toPointer(BackupParams)));
}

export function SetupGetBackupInformationW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  BackupParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetBackupInformationW(util.toPointer(QueueHandle), util.toPointer(BackupParams)));
}

export function SetupPrepareQueueForRestoreA(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  BackupPath: string | null /* Windows.Win32.Foundation.PSTR */,
  RestoreFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupPrepareQueueForRestoreA(util.toPointer(QueueHandle), util.pstrToFfi(BackupPath), RestoreFlags));
}

export function SetupPrepareQueueForRestoreW(
  QueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  BackupPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  RestoreFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupPrepareQueueForRestoreW(util.toPointer(QueueHandle), util.pwstrToFfi(BackupPath), RestoreFlags));
}

export function SetupSetNonInteractiveMode(
  NonInteractiveFlag: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupSetNonInteractiveMode(util.boolToFfi(NonInteractiveFlag)));
}

export function SetupGetNonInteractiveMode(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupGetNonInteractiveMode());
}

export function SetupDiCreateDeviceInfoList(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInfoList(util.toPointer(ClassGuid), util.hwndToFfi(hwndParent)));
}

export function SetupDiCreateDeviceInfoListExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInfoListExA(util.toPointer(ClassGuid), util.hwndToFfi(hwndParent), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiCreateDeviceInfoListExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInfoListExW(util.toPointer(ClassGuid), util.hwndToFfi(hwndParent), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetDeviceInfoListClass(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInfoListClass(util.toPointer(DeviceInfoSet), util.toPointer(ClassGuid)));
}

export function SetupDiGetDeviceInfoListDetailA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoSetDetailData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInfoListDetailA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoSetDetailData)));
}

export function SetupDiGetDeviceInfoListDetailW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoSetDetailData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInfoListDetailW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoSetDetailData)));
}

export function SetupDiCreateDeviceInfoA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceDescription: string | null /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  CreationFlags: number /* u32 */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInfoA(util.toPointer(DeviceInfoSet), util.pstrToFfi(DeviceName), util.toPointer(ClassGuid), util.pstrToFfi(DeviceDescription), util.hwndToFfi(hwndParent), CreationFlags, util.toPointer(DeviceInfoData)));
}

export function SetupDiCreateDeviceInfoW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  CreationFlags: number /* u32 */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInfoW(util.toPointer(DeviceInfoSet), util.pwstrToFfi(DeviceName), util.toPointer(ClassGuid), util.pwstrToFfi(DeviceDescription), util.hwndToFfi(hwndParent), CreationFlags, util.toPointer(DeviceInfoData)));
}

export function SetupDiOpenDeviceInfoA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInstanceId: string | null /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  OpenFlags: number /* u32 */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiOpenDeviceInfoA(util.toPointer(DeviceInfoSet), util.pstrToFfi(DeviceInstanceId), util.hwndToFfi(hwndParent), OpenFlags, util.toPointer(DeviceInfoData)));
}

export function SetupDiOpenDeviceInfoW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInstanceId: string | null /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  OpenFlags: number /* u32 */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiOpenDeviceInfoW(util.toPointer(DeviceInfoSet), util.pwstrToFfi(DeviceInstanceId), util.hwndToFfi(hwndParent), OpenFlags, util.toPointer(DeviceInfoData)));
}

export function SetupDiGetDeviceInstanceIdA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInstanceId: string | null /* Windows.Win32.Foundation.PSTR */,
  DeviceInstanceIdSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInstanceIdA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.pstrToFfi(DeviceInstanceId), DeviceInstanceIdSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetDeviceInstanceIdW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInstanceId: string | null /* Windows.Win32.Foundation.PWSTR */,
  DeviceInstanceIdSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInstanceIdW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.pwstrToFfi(DeviceInstanceId), DeviceInstanceIdSize, util.toPointer(RequiredSize)));
}

export function SetupDiDeleteDeviceInfo(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDeleteDeviceInfo(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiEnumDeviceInfo(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  MemberIndex: number /* u32 */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiEnumDeviceInfo(util.toPointer(DeviceInfoSet), MemberIndex, util.toPointer(DeviceInfoData)));
}

export function SetupDiDestroyDeviceInfoList(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDestroyDeviceInfoList(util.toPointer(DeviceInfoSet)));
}

export function SetupDiEnumDeviceInterfaces(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MemberIndex: number /* u32 */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiEnumDeviceInterfaces(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(InterfaceClassGuid), MemberIndex, util.toPointer(DeviceInterfaceData)));
}

export function SetupDiCreateDeviceInterfaceA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReferenceString: string | null /* Windows.Win32.Foundation.PSTR */,
  CreationFlags: number /* u32 */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInterfaceA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(InterfaceClassGuid), util.pstrToFfi(ReferenceString), CreationFlags, util.toPointer(DeviceInterfaceData)));
}

export function SetupDiCreateDeviceInterfaceW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReferenceString: string | null /* Windows.Win32.Foundation.PWSTR */,
  CreationFlags: number /* u32 */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInterfaceW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(InterfaceClassGuid), util.pwstrToFfi(ReferenceString), CreationFlags, util.toPointer(DeviceInterfaceData)));
}

export function SetupDiOpenDeviceInterfaceA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DevicePath: string | null /* Windows.Win32.Foundation.PSTR */,
  OpenFlags: number /* u32 */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiOpenDeviceInterfaceA(util.toPointer(DeviceInfoSet), util.pstrToFfi(DevicePath), OpenFlags, util.toPointer(DeviceInterfaceData)));
}

export function SetupDiOpenDeviceInterfaceW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DevicePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  OpenFlags: number /* u32 */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiOpenDeviceInterfaceW(util.toPointer(DeviceInfoSet), util.pwstrToFfi(DevicePath), OpenFlags, util.toPointer(DeviceInterfaceData)));
}

export function SetupDiGetDeviceInterfaceAlias(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  AliasInterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  AliasDeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInterfaceAlias(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), util.toPointer(AliasInterfaceClassGuid), util.toPointer(AliasDeviceInterfaceData)));
}

export function SetupDiDeleteDeviceInterfaceData(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDeleteDeviceInterfaceData(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData)));
}

export function SetupDiRemoveDeviceInterface(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiRemoveDeviceInterface(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData)));
}

export function SetupDiGetDeviceInterfaceDetailA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInterfaceDetailData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInterfaceDetailDataSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInterfaceDetailA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), util.toPointer(DeviceInterfaceDetailData), DeviceInterfaceDetailDataSize, util.toPointer(RequiredSize), util.toPointer(DeviceInfoData)));
}

export function SetupDiGetDeviceInterfaceDetailW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInterfaceDetailData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInterfaceDetailDataSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInterfaceDetailW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), util.toPointer(DeviceInterfaceDetailData), DeviceInterfaceDetailDataSize, util.toPointer(RequiredSize), util.toPointer(DeviceInfoData)));
}

export function SetupDiInstallDeviceInterfaces(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallDeviceInterfaces(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiSetDeviceInterfaceDefault(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDeviceInterfaceDefault(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), Flags, util.toPointer(Reserved)));
}

export function SetupDiRegisterDeviceInfo(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  CompareProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PSP_DETSIG_CMPPROC */,
  CompareContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  DupDeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiRegisterDeviceInfo(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Flags, util.toPointer(CompareProc), util.toPointer(CompareContext), util.toPointer(DupDeviceInfoData)));
}

export function SetupDiBuildDriverInfoList(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverType: SETUP_DI_BUILD_DRIVER_DRIVER_TYPE /* Windows.Win32.Devices.DeviceAndDriverInstallation.SETUP_DI_BUILD_DRIVER_DRIVER_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiBuildDriverInfoList(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), DriverType));
}

export function SetupDiCancelDriverInfoSearch(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiCancelDriverInfoSearch(util.toPointer(DeviceInfoSet)));
}

export function SetupDiEnumDriverInfoA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverType: number /* u32 */,
  MemberIndex: number /* u32 */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiEnumDriverInfoA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), DriverType, MemberIndex, util.toPointer(DriverInfoData)));
}

export function SetupDiEnumDriverInfoW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverType: number /* u32 */,
  MemberIndex: number /* u32 */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiEnumDriverInfoW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), DriverType, MemberIndex, util.toPointer(DriverInfoData)));
}

export function SetupDiGetSelectedDriverA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetSelectedDriverA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData)));
}

export function SetupDiGetSelectedDriverW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetSelectedDriverW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData)));
}

export function SetupDiSetSelectedDriverA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetSelectedDriverA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData)));
}

export function SetupDiSetSelectedDriverW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetSelectedDriverW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData)));
}

export function SetupDiGetDriverInfoDetailA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoDetailData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoDetailDataSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDriverInfoDetailA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), util.toPointer(DriverInfoDetailData), DriverInfoDetailDataSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetDriverInfoDetailW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoDetailData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoDetailDataSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDriverInfoDetailW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), util.toPointer(DriverInfoDetailData), DriverInfoDetailDataSize, util.toPointer(RequiredSize)));
}

export function SetupDiDestroyDriverInfoList(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDestroyDriverInfoList(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), DriverType));
}

export function SetupDiGetClassDevsA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Enumerator: string | null /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiGetClassDevsA(util.toPointer(ClassGuid), util.pstrToFfi(Enumerator), util.hwndToFfi(hwndParent), Flags));
}

export function SetupDiGetClassDevsW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Enumerator: string | null /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiGetClassDevsW(util.toPointer(ClassGuid), util.pwstrToFfi(Enumerator), util.hwndToFfi(hwndParent), Flags));
}

export function SetupDiGetClassDevsExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Enumerator: string | null /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  Flags: number /* u32 */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiGetClassDevsExA(util.toPointer(ClassGuid), util.pstrToFfi(Enumerator), util.hwndToFfi(hwndParent), Flags, util.toPointer(DeviceInfoSet), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassDevsExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Enumerator: string | null /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  Flags: number /* u32 */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiGetClassDevsExW(util.toPointer(ClassGuid), util.pwstrToFfi(Enumerator), util.hwndToFfi(hwndParent), Flags, util.toPointer(DeviceInfoSet), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetINFClassA(
  InfName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetINFClassA(util.pstrToFfi(InfName), util.toPointer(ClassGuid), util.pstrToFfi(ClassName), ClassNameSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetINFClassW(
  InfName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetINFClassW(util.pwstrToFfi(InfName), util.toPointer(ClassGuid), util.pwstrToFfi(ClassName), ClassNameSize, util.toPointer(RequiredSize)));
}

export function SetupDiBuildClassInfoList(
  Flags: number /* u32 */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiBuildClassInfoList(Flags, util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize)));
}

export function SetupDiBuildClassInfoListExA(
  Flags: number /* u32 */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiBuildClassInfoListExA(Flags, util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiBuildClassInfoListExW(
  Flags: number /* u32 */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiBuildClassInfoListExW(Flags, util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassDescriptionA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassDescription: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassDescriptionSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassDescriptionA(util.toPointer(ClassGuid), util.pstrToFfi(ClassDescription), ClassDescriptionSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetClassDescriptionW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassDescriptionSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassDescriptionW(util.toPointer(ClassGuid), util.pwstrToFfi(ClassDescription), ClassDescriptionSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetClassDescriptionExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassDescription: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassDescriptionSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassDescriptionExA(util.toPointer(ClassGuid), util.pstrToFfi(ClassDescription), ClassDescriptionSize, util.toPointer(RequiredSize), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassDescriptionExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassDescriptionSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassDescriptionExW(util.toPointer(ClassGuid), util.pwstrToFfi(ClassDescription), ClassDescriptionSize, util.toPointer(RequiredSize), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiCallClassInstaller(
  InstallFunction: number /* u32 */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiCallClassInstaller(InstallFunction, util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiSelectDevice(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSelectDevice(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiSelectBestCompatDrv(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSelectBestCompatDrv(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiInstallDevice(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallDevice(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiInstallDriverFiles(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallDriverFiles(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiRegisterCoDeviceInstallers(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiRegisterCoDeviceInstallers(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiRemoveDevice(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiRemoveDevice(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiUnremoveDevice(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiUnremoveDevice(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiRestartDevices(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiRestartDevices(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiChangeState(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiChangeState(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiInstallClassA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallClassA(util.hwndToFfi(hwndParent), util.pstrToFfi(InfFileName), Flags, util.toPointer(FileQueue)));
}

export function SetupDiInstallClassW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallClassW(util.hwndToFfi(hwndParent), util.pwstrToFfi(InfFileName), Flags, util.toPointer(FileQueue)));
}

export function SetupDiInstallClassExA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallClassExA(util.hwndToFfi(hwndParent), util.pstrToFfi(InfFileName), Flags, util.toPointer(FileQueue), util.toPointer(InterfaceClassGuid), util.toPointer(Reserved1), util.toPointer(Reserved2)));
}

export function SetupDiInstallClassExW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  FileQueue: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiInstallClassExW(util.hwndToFfi(hwndParent), util.pwstrToFfi(InfFileName), Flags, util.toPointer(FileQueue), util.toPointer(InterfaceClassGuid), util.toPointer(Reserved1), util.toPointer(Reserved2)));
}

export function SetupDiOpenClassRegKey(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiOpenClassRegKey(util.toPointer(ClassGuid), samDesired));
}

export function SetupDiOpenClassRegKeyExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
  Flags: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiOpenClassRegKeyExA(util.toPointer(ClassGuid), samDesired, Flags, util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiOpenClassRegKeyExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
  Flags: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiOpenClassRegKeyExW(util.toPointer(ClassGuid), samDesired, Flags, util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiCreateDeviceInterfaceRegKeyA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
  samDesired: number /* u32 */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInterfaceRegKeyA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), Reserved, samDesired, util.toPointer(InfHandle), util.pstrToFfi(InfSectionName)));
}

export function SetupDiCreateDeviceInterfaceRegKeyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
  samDesired: number /* u32 */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDeviceInterfaceRegKeyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), Reserved, samDesired, util.toPointer(InfHandle), util.pwstrToFfi(InfSectionName)));
}

export function SetupDiOpenDeviceInterfaceRegKey(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiOpenDeviceInterfaceRegKey(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), Reserved, samDesired));
}

export function SetupDiDeleteDeviceInterfaceRegKey(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDeleteDeviceInterfaceRegKey(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), Reserved));
}

export function SetupDiCreateDevRegKeyA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Scope: number /* u32 */,
  HwProfile: number /* u32 */,
  KeyType: number /* u32 */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDevRegKeyA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Scope, HwProfile, KeyType, util.toPointer(InfHandle), util.pstrToFfi(InfSectionName)));
}

export function SetupDiCreateDevRegKeyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Scope: number /* u32 */,
  HwProfile: number /* u32 */,
  KeyType: number /* u32 */,
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiCreateDevRegKeyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Scope, HwProfile, KeyType, util.toPointer(InfHandle), util.pwstrToFfi(InfSectionName)));
}

export function SetupDiOpenDevRegKey(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Scope: number /* u32 */,
  HwProfile: number /* u32 */,
  KeyType: number /* u32 */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiOpenDevRegKey(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Scope, HwProfile, KeyType, samDesired));
}

export function SetupDiDeleteDevRegKey(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Scope: number /* u32 */,
  HwProfile: number /* u32 */,
  KeyType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDeleteDevRegKey(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Scope, HwProfile, KeyType));
}

export function SetupDiGetHwProfileList(
  HwProfileList: Deno.PointerValue | Uint8Array | null /* ptr */,
  HwProfileListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurrentlyActiveIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileList(util.toPointer(HwProfileList), HwProfileListSize, util.toPointer(RequiredSize), util.toPointer(CurrentlyActiveIndex)));
}

export function SetupDiGetHwProfileListExA(
  HwProfileList: Deno.PointerValue | Uint8Array | null /* ptr */,
  HwProfileListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurrentlyActiveIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileListExA(util.toPointer(HwProfileList), HwProfileListSize, util.toPointer(RequiredSize), util.toPointer(CurrentlyActiveIndex), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetHwProfileListExW(
  HwProfileList: Deno.PointerValue | Uint8Array | null /* ptr */,
  HwProfileListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurrentlyActiveIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileListExW(util.toPointer(HwProfileList), HwProfileListSize, util.toPointer(RequiredSize), util.toPointer(CurrentlyActiveIndex), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetDevicePropertyKeys(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: number /* u32 */,
  RequiredPropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDevicePropertyKeys(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(PropertyKeyArray), PropertyKeyCount, util.toPointer(RequiredPropertyKeyCount), Flags));
}

export function SetupDiGetDevicePropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDevicePropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize), Flags));
}

export function SetupDiSetDevicePropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDevicePropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, Flags));
}

export function SetupDiGetDeviceInterfacePropertyKeys(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: number /* u32 */,
  RequiredPropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInterfacePropertyKeys(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), util.toPointer(PropertyKeyArray), PropertyKeyCount, util.toPointer(RequiredPropertyKeyCount), Flags));
}

export function SetupDiGetDeviceInterfacePropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInterfacePropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize), Flags));
}

export function SetupDiSetDeviceInterfacePropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInterfaceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDeviceInterfacePropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInterfaceData), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, Flags));
}

export function SetupDiGetClassPropertyKeys(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: number /* u32 */,
  RequiredPropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassPropertyKeys(util.toPointer(ClassGuid), util.toPointer(PropertyKeyArray), PropertyKeyCount, util.toPointer(RequiredPropertyKeyCount), Flags));
}

export function SetupDiGetClassPropertyKeysExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: number /* u32 */,
  RequiredPropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassPropertyKeysExW(util.toPointer(ClassGuid), util.toPointer(PropertyKeyArray), PropertyKeyCount, util.toPointer(RequiredPropertyKeyCount), Flags, util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassPropertyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassPropertyW(util.toPointer(ClassGuid), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize), Flags));
}

export function SetupDiGetClassPropertyExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassPropertyExW(util.toPointer(ClassGuid), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize), Flags, util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiSetClassPropertyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetClassPropertyW(util.toPointer(ClassGuid), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, Flags));
}

export function SetupDiSetClassPropertyExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  Flags: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetClassPropertyExW(util.toPointer(ClassGuid), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, Flags, util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetDeviceRegistryPropertyA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceRegistryPropertyA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Property, util.toPointer(PropertyRegDataType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetDeviceRegistryPropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceRegistryPropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Property, util.toPointer(PropertyRegDataType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetClassRegistryPropertyA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassRegistryPropertyA(util.toPointer(ClassGuid), Property, util.toPointer(PropertyRegDataType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassRegistryPropertyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassRegistryPropertyW(util.toPointer(ClassGuid), Property, util.toPointer(PropertyRegDataType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiSetDeviceRegistryPropertyA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDeviceRegistryPropertyA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Property, util.toPointer(PropertyBuffer), PropertyBufferSize));
}

export function SetupDiSetDeviceRegistryPropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDeviceRegistryPropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Property, util.toPointer(PropertyBuffer), PropertyBufferSize));
}

export function SetupDiSetClassRegistryPropertyA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetClassRegistryPropertyA(util.toPointer(ClassGuid), Property, util.toPointer(PropertyBuffer), PropertyBufferSize, util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiSetClassRegistryPropertyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Property: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetClassRegistryPropertyW(util.toPointer(ClassGuid), Property, util.toPointer(PropertyBuffer), PropertyBufferSize, util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetDeviceInstallParamsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInstallParamsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DeviceInstallParams)));
}

export function SetupDiGetDeviceInstallParamsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDeviceInstallParamsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DeviceInstallParams)));
}

export function SetupDiGetClassInstallParamsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParamsSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassInstallParamsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(ClassInstallParams), ClassInstallParamsSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetClassInstallParamsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParamsSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassInstallParamsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(ClassInstallParams), ClassInstallParamsSize, util.toPointer(RequiredSize)));
}

export function SetupDiSetDeviceInstallParamsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDeviceInstallParamsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DeviceInstallParams)));
}

export function SetupDiSetDeviceInstallParamsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeviceInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDeviceInstallParamsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DeviceInstallParams)));
}

export function SetupDiSetClassInstallParamsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParamsSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetClassInstallParamsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(ClassInstallParams), ClassInstallParamsSize));
}

export function SetupDiSetClassInstallParamsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassInstallParamsSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetClassInstallParamsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(ClassInstallParams), ClassInstallParamsSize));
}

export function SetupDiGetDriverInstallParamsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDriverInstallParamsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), util.toPointer(DriverInstallParams)));
}

export function SetupDiGetDriverInstallParamsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetDriverInstallParamsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), util.toPointer(DriverInstallParams)));
}

export function SetupDiSetDriverInstallParamsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDriverInstallParamsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), util.toPointer(DriverInstallParams)));
}

export function SetupDiSetDriverInstallParamsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInstallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetDriverInstallParamsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), util.toPointer(DriverInstallParams)));
}

export function SetupDiLoadClassIcon(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  LargeIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
  MiniIconIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiLoadClassIcon(util.toPointer(ClassGuid), util.toPointer(LargeIcon), util.toPointer(MiniIconIndex)));
}

export function SetupDiLoadDeviceIcon(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cxIcon: number /* u32 */,
  cyIcon: number /* u32 */,
  Flags: number /* u32 */,
  hIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiLoadDeviceIcon(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), cxIcon, cyIcon, Flags, util.toPointer(hIcon)));
}

export function SetupDiDrawMiniIcon(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  rc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.RECT */,
  MiniIconIndex: number /* i32 */,
  Flags: number /* u32 */,
): number /* i32 */ {
  return libSETUPAPI_dll.SetupDiDrawMiniIcon(util.toPointer(hdc), util.toPointer(rc), MiniIconIndex, Flags);
}

export function SetupDiGetClassBitmapIndex(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  MiniIconIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassBitmapIndex(util.toPointer(ClassGuid), util.toPointer(MiniIconIndex)));
}

export function SetupDiGetClassImageList(
  ClassImageListData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassImageList(util.toPointer(ClassImageListData)));
}

export function SetupDiGetClassImageListExA(
  ClassImageListData: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassImageListExA(util.toPointer(ClassImageListData), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassImageListExW(
  ClassImageListData: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassImageListExW(util.toPointer(ClassImageListData), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetClassImageIndex(
  ClassImageListData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImageIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassImageIndex(util.toPointer(ClassImageListData), util.toPointer(ClassGuid), util.toPointer(ImageIndex)));
}

export function SetupDiDestroyClassImageList(
  ClassImageListData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiDestroyClassImageList(util.toPointer(ClassImageListData)));
}

export function SetupDiGetClassDevPropertySheetsA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertySheetHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertySheetHeaderPageListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertySheetType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassDevPropertySheetsA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(PropertySheetHeader), PropertySheetHeaderPageListSize, util.toPointer(RequiredSize), PropertySheetType));
}

export function SetupDiGetClassDevPropertySheetsW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertySheetHeader: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertySheetHeaderPageListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertySheetType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetClassDevPropertySheetsW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(PropertySheetHeader), PropertySheetHeaderPageListSize, util.toPointer(RequiredSize), PropertySheetType));
}

export function SetupDiAskForOEMDisk(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiAskForOEMDisk(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiSelectOEMDrv(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSelectOEMDrv(util.hwndToFfi(hwndParent), util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiClassNameFromGuidA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassNameFromGuidA(util.toPointer(ClassGuid), util.pstrToFfi(ClassName), ClassNameSize, util.toPointer(RequiredSize)));
}

export function SetupDiClassNameFromGuidW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassNameFromGuidW(util.toPointer(ClassGuid), util.pwstrToFfi(ClassName), ClassNameSize, util.toPointer(RequiredSize)));
}

export function SetupDiClassNameFromGuidExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassNameFromGuidExA(util.toPointer(ClassGuid), util.pstrToFfi(ClassName), ClassNameSize, util.toPointer(RequiredSize), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiClassNameFromGuidExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassNameFromGuidExW(util.toPointer(ClassGuid), util.pwstrToFfi(ClassName), ClassNameSize, util.toPointer(RequiredSize), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiClassGuidsFromNameA(
  ClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassGuidsFromNameA(util.pstrToFfi(ClassName), util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize)));
}

export function SetupDiClassGuidsFromNameW(
  ClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassGuidsFromNameW(util.pwstrToFfi(ClassName), util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize)));
}

export function SetupDiClassGuidsFromNameExA(
  ClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassGuidsFromNameExA(util.pstrToFfi(ClassName), util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiClassGuidsFromNameExW(
  ClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ClassGuidList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClassGuidListSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiClassGuidsFromNameExW(util.pwstrToFfi(ClassName), util.toPointer(ClassGuidList), ClassGuidListSize, util.toPointer(RequiredSize), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetHwProfileFriendlyNameA(
  HwProfile: number /* u32 */,
  FriendlyName: string | null /* Windows.Win32.Foundation.PSTR */,
  FriendlyNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileFriendlyNameA(HwProfile, util.pstrToFfi(FriendlyName), FriendlyNameSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetHwProfileFriendlyNameW(
  HwProfile: number /* u32 */,
  FriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  FriendlyNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileFriendlyNameW(HwProfile, util.pwstrToFfi(FriendlyName), FriendlyNameSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetHwProfileFriendlyNameExA(
  HwProfile: number /* u32 */,
  FriendlyName: string | null /* Windows.Win32.Foundation.PSTR */,
  FriendlyNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileFriendlyNameExA(HwProfile, util.pstrToFfi(FriendlyName), FriendlyNameSize, util.toPointer(RequiredSize), util.pstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetHwProfileFriendlyNameExW(
  HwProfile: number /* u32 */,
  FriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  FriendlyNameSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetHwProfileFriendlyNameExW(HwProfile, util.pwstrToFfi(FriendlyName), FriendlyNameSize, util.toPointer(RequiredSize), util.pwstrToFfi(MachineName), util.toPointer(Reserved)));
}

export function SetupDiGetWizardPage(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstallWizardData: Deno.PointerValue | Uint8Array | null /* ptr */,
  PageType: number /* u32 */,
  Flags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.UI.Controls.HPROPSHEETPAGE */ {
  return util.pointerFromFfi(libSETUPAPI_dll.SetupDiGetWizardPage(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(InstallWizardData), PageType, Flags));
}

export function SetupDiGetSelectedDevice(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetSelectedDevice(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiSetSelectedDevice(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiSetSelectedDevice(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData)));
}

export function SetupDiGetActualModelsSectionA(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionWithExt: string | null /* Windows.Win32.Foundation.PSTR */,
  InfSectionWithExtSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetActualModelsSectionA(util.toPointer(Context), util.toPointer(AlternatePlatformInfo), util.pstrToFfi(InfSectionWithExt), InfSectionWithExtSize, util.toPointer(RequiredSize), util.toPointer(Reserved)));
}

export function SetupDiGetActualModelsSectionW(
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionWithExt: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfSectionWithExtSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetActualModelsSectionW(util.toPointer(Context), util.toPointer(AlternatePlatformInfo), util.pwstrToFfi(InfSectionWithExt), InfSectionWithExtSize, util.toPointer(RequiredSize), util.toPointer(Reserved)));
}

export function SetupDiGetActualSectionToInstallA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  InfSectionWithExt: string | null /* Windows.Win32.Foundation.PSTR */,
  InfSectionWithExtSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Extension: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetActualSectionToInstallA(util.toPointer(InfHandle), util.pstrToFfi(InfSectionName), util.pstrToFfi(InfSectionWithExt), InfSectionWithExtSize, util.toPointer(RequiredSize), util.toPointer(Extension)));
}

export function SetupDiGetActualSectionToInstallW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfSectionWithExt: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfSectionWithExtSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Extension: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetActualSectionToInstallW(util.toPointer(InfHandle), util.pwstrToFfi(InfSectionName), util.pwstrToFfi(InfSectionWithExt), InfSectionWithExtSize, util.toPointer(RequiredSize), util.toPointer(Extension)));
}

export function SetupDiGetActualSectionToInstallExA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionWithExt: string | null /* Windows.Win32.Foundation.PSTR */,
  InfSectionWithExtSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Extension: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetActualSectionToInstallExA(util.toPointer(InfHandle), util.pstrToFfi(InfSectionName), util.toPointer(AlternatePlatformInfo), util.pstrToFfi(InfSectionWithExt), InfSectionWithExtSize, util.toPointer(RequiredSize), util.toPointer(Extension), util.toPointer(Reserved)));
}

export function SetupDiGetActualSectionToInstallExW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AlternatePlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSectionWithExt: string | null /* Windows.Win32.Foundation.PWSTR */,
  InfSectionWithExtSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Extension: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetActualSectionToInstallExW(util.toPointer(InfHandle), util.pwstrToFfi(InfSectionName), util.toPointer(AlternatePlatformInfo), util.pwstrToFfi(InfSectionWithExt), InfSectionWithExtSize, util.toPointer(RequiredSize), util.toPointer(Extension), util.toPointer(Reserved)));
}

export function SetupEnumInfSectionsA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Index: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  Size: number /* u32 */,
  SizeNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupEnumInfSectionsA(util.toPointer(InfHandle), Index, util.pstrToFfi(Buffer), Size, util.toPointer(SizeNeeded)));
}

export function SetupEnumInfSectionsW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Index: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  Size: number /* u32 */,
  SizeNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupEnumInfSectionsW(util.toPointer(InfHandle), Index, util.pwstrToFfi(Buffer), Size, util.toPointer(SizeNeeded)));
}

export function SetupVerifyInfFileA(
  InfName: string | null /* Windows.Win32.Foundation.PSTR */,
  AltPlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSignerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupVerifyInfFileA(util.pstrToFfi(InfName), util.toPointer(AltPlatformInfo), util.toPointer(InfSignerInfo)));
}

export function SetupVerifyInfFileW(
  InfName: string | null /* Windows.Win32.Foundation.PWSTR */,
  AltPlatformInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfSignerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupVerifyInfFileW(util.pwstrToFfi(InfName), util.toPointer(AltPlatformInfo), util.toPointer(InfSignerInfo)));
}

export function SetupDiGetCustomDevicePropertyA(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  CustomPropertyName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  PropertyRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetCustomDevicePropertyA(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.pstrToFfi(CustomPropertyName), Flags, util.toPointer(PropertyRegDataType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize)));
}

export function SetupDiGetCustomDevicePropertyW(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  CustomPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  PropertyRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  RequiredSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupDiGetCustomDevicePropertyW(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.pwstrToFfi(CustomPropertyName), Flags, util.toPointer(PropertyRegDataType), util.toPointer(PropertyBuffer), PropertyBufferSize, util.toPointer(RequiredSize)));
}

export function SetupConfigureWmiFromInfSectionA(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupConfigureWmiFromInfSectionA(util.toPointer(InfHandle), util.pstrToFfi(SectionName), Flags));
}

export function SetupConfigureWmiFromInfSectionW(
  InfHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SectionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSETUPAPI_dll.SetupConfigureWmiFromInfSectionW(util.toPointer(InfHandle), util.pwstrToFfi(SectionName), Flags));
}

export function CM_Add_Empty_Log_Conf(
  plcLogConf: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  Priority: PRIORITY /* Windows.Win32.Data.HtmlHelp.PRIORITY */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_Empty_Log_Conf(util.toPointer(plcLogConf), dnDevInst, Priority, ulFlags);
}

export function CM_Add_Empty_Log_Conf_Ex(
  plcLogConf: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  Priority: PRIORITY /* Windows.Win32.Data.HtmlHelp.PRIORITY */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_Empty_Log_Conf_Ex(util.toPointer(plcLogConf), dnDevInst, Priority, ulFlags, hMachine);
}

export function CM_Add_IDA(
  dnDevInst: number /* u32 */,
  pszID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_IDA(dnDevInst, util.pstrToFfi(pszID), ulFlags);
}

export function CM_Add_IDW(
  dnDevInst: number /* u32 */,
  pszID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_IDW(dnDevInst, util.pwstrToFfi(pszID), ulFlags);
}

export function CM_Add_ID_ExA(
  dnDevInst: number /* u32 */,
  pszID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_ID_ExA(dnDevInst, util.pstrToFfi(pszID), ulFlags, hMachine);
}

export function CM_Add_ID_ExW(
  dnDevInst: number /* u32 */,
  pszID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_ID_ExW(dnDevInst, util.pwstrToFfi(pszID), ulFlags, hMachine);
}

export function CM_Add_Range(
  ullStartValue: Deno.PointerValue /* u64 */,
  ullEndValue: Deno.PointerValue /* u64 */,
  rlh: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_Range(ullStartValue, ullEndValue, rlh, ulFlags);
}

export function CM_Add_Res_Des(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcLogConf: Deno.PointerValue /* usize */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_Res_Des(util.toPointer(prdResDes), lcLogConf, ResourceID, util.toPointer(ResourceData), ResourceLen, ulFlags);
}

export function CM_Add_Res_Des_Ex(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcLogConf: Deno.PointerValue /* usize */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Add_Res_Des_Ex(util.toPointer(prdResDes), lcLogConf, ResourceID, util.toPointer(ResourceData), ResourceLen, ulFlags, hMachine);
}

export function CM_Connect_MachineA(
  UNCServerName: string | null /* Windows.Win32.Foundation.PSTR */,
  phMachine: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Connect_MachineA(util.pstrToFfi(UNCServerName), util.toPointer(phMachine));
}

export function CM_Connect_MachineW(
  UNCServerName: string | null /* Windows.Win32.Foundation.PWSTR */,
  phMachine: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Connect_MachineW(util.pwstrToFfi(UNCServerName), util.toPointer(phMachine));
}

export function CM_Create_DevNodeA(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  dnParent: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Create_DevNodeA(util.toPointer(pdnDevInst), util.pstrToFfi(pDeviceID), dnParent, ulFlags);
}

export function CM_Create_DevNodeW(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  dnParent: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Create_DevNodeW(util.toPointer(pdnDevInst), util.pwstrToFfi(pDeviceID), dnParent, ulFlags);
}

export function CM_Create_DevNode_ExA(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  dnParent: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Create_DevNode_ExA(util.toPointer(pdnDevInst), util.pstrToFfi(pDeviceID), dnParent, ulFlags, hMachine);
}

export function CM_Create_DevNode_ExW(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  dnParent: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Create_DevNode_ExW(util.toPointer(pdnDevInst), util.pwstrToFfi(pDeviceID), dnParent, ulFlags, hMachine);
}

export function CM_Create_Range_List(
  prlh: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Create_Range_List(util.toPointer(prlh), ulFlags);
}

export function CM_Delete_Class_Key(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Class_Key(util.toPointer(ClassGuid), ulFlags);
}

export function CM_Delete_Class_Key_Ex(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Class_Key_Ex(util.toPointer(ClassGuid), ulFlags, hMachine);
}

export function CM_Delete_DevNode_Key(
  dnDevNode: number /* u32 */,
  ulHardwareProfile: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_DevNode_Key(dnDevNode, ulHardwareProfile, ulFlags);
}

export function CM_Delete_DevNode_Key_Ex(
  dnDevNode: number /* u32 */,
  ulHardwareProfile: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_DevNode_Key_Ex(dnDevNode, ulHardwareProfile, ulFlags, hMachine);
}

export function CM_Delete_Range(
  ullStartValue: Deno.PointerValue /* u64 */,
  ullEndValue: Deno.PointerValue /* u64 */,
  rlh: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Range(ullStartValue, ullEndValue, rlh, ulFlags);
}

export function CM_Detect_Resource_Conflict(
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  pbConflictDetected: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Detect_Resource_Conflict(dnDevInst, ResourceID, util.toPointer(ResourceData), ResourceLen, util.toPointer(pbConflictDetected), ulFlags);
}

export function CM_Detect_Resource_Conflict_Ex(
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  pbConflictDetected: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Detect_Resource_Conflict_Ex(dnDevInst, ResourceID, util.toPointer(ResourceData), ResourceLen, util.toPointer(pbConflictDetected), ulFlags, hMachine);
}

export function CM_Disable_DevNode(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Disable_DevNode(dnDevInst, ulFlags);
}

export function CM_Disable_DevNode_Ex(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Disable_DevNode_Ex(dnDevInst, ulFlags, hMachine);
}

export function CM_Disconnect_Machine(
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Disconnect_Machine(hMachine);
}

export function CM_Dup_Range_List(
  rlhOld: Deno.PointerValue /* usize */,
  rlhNew: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Dup_Range_List(rlhOld, rlhNew, ulFlags);
}

export function CM_Enable_DevNode(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enable_DevNode(dnDevInst, ulFlags);
}

export function CM_Enable_DevNode_Ex(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enable_DevNode_Ex(dnDevInst, ulFlags, hMachine);
}

export function CM_Enumerate_Classes(
  ulClassIndex: number /* u32 */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enumerate_Classes(ulClassIndex, util.toPointer(ClassGuid), ulFlags);
}

export function CM_Enumerate_Classes_Ex(
  ulClassIndex: number /* u32 */,
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enumerate_Classes_Ex(ulClassIndex, util.toPointer(ClassGuid), ulFlags, hMachine);
}

export function CM_Enumerate_EnumeratorsA(
  ulEnumIndex: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enumerate_EnumeratorsA(ulEnumIndex, util.pstrToFfi(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Enumerate_EnumeratorsW(
  ulEnumIndex: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enumerate_EnumeratorsW(ulEnumIndex, util.pwstrToFfi(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Enumerate_Enumerators_ExA(
  ulEnumIndex: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enumerate_Enumerators_ExA(ulEnumIndex, util.pstrToFfi(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Enumerate_Enumerators_ExW(
  ulEnumIndex: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Enumerate_Enumerators_ExW(ulEnumIndex, util.pwstrToFfi(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Find_Range(
  pullStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  ullStart: Deno.PointerValue /* u64 */,
  ulLength: number /* u32 */,
  ullAlignment: Deno.PointerValue /* u64 */,
  ullEnd: Deno.PointerValue /* u64 */,
  rlh: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Find_Range(util.toPointer(pullStart), ullStart, ulLength, ullAlignment, ullEnd, rlh, ulFlags);
}

export function CM_First_Range(
  rlh: Deno.PointerValue /* usize */,
  pullStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  pullEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  preElement: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_First_Range(rlh, util.toPointer(pullStart), util.toPointer(pullEnd), util.toPointer(preElement), ulFlags);
}

export function CM_Free_Log_Conf(
  lcLogConfToBeFreed: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Log_Conf(lcLogConfToBeFreed, ulFlags);
}

export function CM_Free_Log_Conf_Ex(
  lcLogConfToBeFreed: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Log_Conf_Ex(lcLogConfToBeFreed, ulFlags, hMachine);
}

export function CM_Free_Log_Conf_Handle(
  lcLogConf: Deno.PointerValue /* usize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Log_Conf_Handle(lcLogConf);
}

export function CM_Free_Range_List(
  rlh: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Range_List(rlh, ulFlags);
}

export function CM_Free_Res_Des(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Res_Des(util.toPointer(prdResDes), rdResDes, ulFlags);
}

export function CM_Free_Res_Des_Ex(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Res_Des_Ex(util.toPointer(prdResDes), rdResDes, ulFlags, hMachine);
}

export function CM_Free_Res_Des_Handle(
  rdResDes: Deno.PointerValue /* usize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Res_Des_Handle(rdResDes);
}

export function CM_Get_Child(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Child(util.toPointer(pdnDevInst), dnDevInst, ulFlags);
}

export function CM_Get_Child_Ex(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Child_Ex(util.toPointer(pdnDevInst), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_Class_NameA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_NameA(util.toPointer(ClassGuid), util.pstrToFfi(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_Class_NameW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_NameW(util.toPointer(ClassGuid), util.pwstrToFfi(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_Class_Name_ExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Name_ExA(util.toPointer(ClassGuid), util.pstrToFfi(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Class_Name_ExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Name_ExW(util.toPointer(ClassGuid), util.pwstrToFfi(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Class_Key_NameA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Key_NameA(util.toPointer(ClassGuid), util.pstrToFfi(pszKeyName), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_Class_Key_NameW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Key_NameW(util.toPointer(ClassGuid), util.pwstrToFfi(pszKeyName), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_Class_Key_Name_ExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszKeyName: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Key_Name_ExA(util.toPointer(ClassGuid), util.pstrToFfi(pszKeyName), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Class_Key_Name_ExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszKeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Key_Name_ExW(util.toPointer(ClassGuid), util.pwstrToFfi(pszKeyName), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Depth(
  pulDepth: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Depth(util.toPointer(pulDepth), dnDevInst, ulFlags);
}

export function CM_Get_Depth_Ex(
  pulDepth: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Depth_Ex(util.toPointer(pulDepth), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_Device_IDA(
  dnDevInst: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_IDA(dnDevInst, util.pstrToFfi(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Device_IDW(
  dnDevInst: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_IDW(dnDevInst, util.pwstrToFfi(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Device_ID_ExA(
  dnDevInst: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_ExA(dnDevInst, util.pstrToFfi(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Device_ID_ExW(
  dnDevInst: number /* u32 */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_ExW(dnDevInst, util.pwstrToFfi(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Device_ID_ListA(
  pszFilter: string | null /* Windows.Win32.Foundation.PSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_ListA(util.pstrToFfi(pszFilter), util.pstrToFfi(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Device_ID_ListW(
  pszFilter: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_ListW(util.pwstrToFfi(pszFilter), util.pwstrToFfi(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Device_ID_List_ExA(
  pszFilter: string | null /* Windows.Win32.Foundation.PSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_List_ExA(util.pstrToFfi(pszFilter), util.pstrToFfi(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Device_ID_List_ExW(
  pszFilter: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_List_ExW(util.pwstrToFfi(pszFilter), util.pwstrToFfi(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Device_ID_List_SizeA(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszFilter: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_List_SizeA(util.toPointer(pulLen), util.pstrToFfi(pszFilter), ulFlags);
}

export function CM_Get_Device_ID_List_SizeW(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszFilter: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_List_SizeW(util.toPointer(pulLen), util.pwstrToFfi(pszFilter), ulFlags);
}

export function CM_Get_Device_ID_List_Size_ExA(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszFilter: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_List_Size_ExA(util.toPointer(pulLen), util.pstrToFfi(pszFilter), ulFlags, hMachine);
}

export function CM_Get_Device_ID_List_Size_ExW(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszFilter: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_List_Size_ExW(util.toPointer(pulLen), util.pwstrToFfi(pszFilter), ulFlags, hMachine);
}

export function CM_Get_Device_ID_Size(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_Size(util.toPointer(pulLen), dnDevInst, ulFlags);
}

export function CM_Get_Device_ID_Size_Ex(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_ID_Size_Ex(util.toPointer(pulLen), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_DevNode_PropertyW(
  dnDevInst: number /* u32 */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_PropertyW(dnDevInst, util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize), ulFlags);
}

export function CM_Get_DevNode_Property_ExW(
  dnDevInst: number /* u32 */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Property_ExW(dnDevInst, util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize), ulFlags, hMachine);
}

export function CM_Get_DevNode_Property_Keys(
  dnDevInst: number /* u32 */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Property_Keys(dnDevInst, util.toPointer(PropertyKeyArray), util.toPointer(PropertyKeyCount), ulFlags);
}

export function CM_Get_DevNode_Property_Keys_Ex(
  dnDevInst: number /* u32 */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Property_Keys_Ex(dnDevInst, util.toPointer(PropertyKeyArray), util.toPointer(PropertyKeyCount), ulFlags, hMachine);
}

export function CM_Get_DevNode_Registry_PropertyA(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Registry_PropertyA(dnDevInst, ulProperty, util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_DevNode_Registry_PropertyW(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Registry_PropertyW(dnDevInst, ulProperty, util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_DevNode_Registry_Property_ExA(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Registry_Property_ExA(dnDevInst, ulProperty, util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_DevNode_Registry_Property_ExW(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Registry_Property_ExW(dnDevInst, ulProperty, util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_DevNode_Custom_PropertyA(
  dnDevInst: number /* u32 */,
  pszCustomPropertyName: string | null /* Windows.Win32.Foundation.PSTR */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Custom_PropertyA(dnDevInst, util.pstrToFfi(pszCustomPropertyName), util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_DevNode_Custom_PropertyW(
  dnDevInst: number /* u32 */,
  pszCustomPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Custom_PropertyW(dnDevInst, util.pwstrToFfi(pszCustomPropertyName), util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_DevNode_Custom_Property_ExA(
  dnDevInst: number /* u32 */,
  pszCustomPropertyName: string | null /* Windows.Win32.Foundation.PSTR */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Custom_Property_ExA(dnDevInst, util.pstrToFfi(pszCustomPropertyName), util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_DevNode_Custom_Property_ExW(
  dnDevInst: number /* u32 */,
  pszCustomPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Custom_Property_ExW(dnDevInst, util.pwstrToFfi(pszCustomPropertyName), util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_DevNode_Status(
  pulStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulProblemNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Status(util.toPointer(pulStatus), util.toPointer(pulProblemNumber), dnDevInst, ulFlags);
}

export function CM_Get_DevNode_Status_Ex(
  pulStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulProblemNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_DevNode_Status_Ex(util.toPointer(pulStatus), util.toPointer(pulProblemNumber), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_First_Log_Conf(
  plcLogConf: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_First_Log_Conf(util.toPointer(plcLogConf), dnDevInst, ulFlags);
}

export function CM_Get_First_Log_Conf_Ex(
  plcLogConf: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_First_Log_Conf_Ex(util.toPointer(plcLogConf), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_Global_State(
  pulState: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Global_State(util.toPointer(pulState), ulFlags);
}

export function CM_Get_Global_State_Ex(
  pulState: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Global_State_Ex(util.toPointer(pulState), ulFlags, hMachine);
}

export function CM_Get_Hardware_Profile_InfoA(
  ulIndex: number /* u32 */,
  pHWProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Hardware_Profile_InfoA(ulIndex, util.toPointer(pHWProfileInfo), ulFlags);
}

export function CM_Get_Hardware_Profile_Info_ExA(
  ulIndex: number /* u32 */,
  pHWProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Hardware_Profile_Info_ExA(ulIndex, util.toPointer(pHWProfileInfo), ulFlags, hMachine);
}

export function CM_Get_Hardware_Profile_InfoW(
  ulIndex: number /* u32 */,
  pHWProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Hardware_Profile_InfoW(ulIndex, util.toPointer(pHWProfileInfo), ulFlags);
}

export function CM_Get_Hardware_Profile_Info_ExW(
  ulIndex: number /* u32 */,
  pHWProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Hardware_Profile_Info_ExW(ulIndex, util.toPointer(pHWProfileInfo), ulFlags, hMachine);
}

export function CM_Get_HW_Prof_FlagsA(
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulHardwareProfile: number /* u32 */,
  pulValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_HW_Prof_FlagsA(util.pstrToFfi(pDeviceID), ulHardwareProfile, util.toPointer(pulValue), ulFlags);
}

export function CM_Get_HW_Prof_FlagsW(
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulHardwareProfile: number /* u32 */,
  pulValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_HW_Prof_FlagsW(util.pwstrToFfi(pDeviceID), ulHardwareProfile, util.toPointer(pulValue), ulFlags);
}

export function CM_Get_HW_Prof_Flags_ExA(
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulHardwareProfile: number /* u32 */,
  pulValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_HW_Prof_Flags_ExA(util.pstrToFfi(pDeviceID), ulHardwareProfile, util.toPointer(pulValue), ulFlags, hMachine);
}

export function CM_Get_HW_Prof_Flags_ExW(
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulHardwareProfile: number /* u32 */,
  pulValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_HW_Prof_Flags_ExW(util.pwstrToFfi(pDeviceID), ulHardwareProfile, util.toPointer(pulValue), ulFlags, hMachine);
}

export function CM_Get_Device_Interface_AliasA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  AliasInterfaceGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszAliasDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_AliasA(util.pstrToFfi(pszDeviceInterface), util.toPointer(AliasInterfaceGuid), util.pstrToFfi(pszAliasDeviceInterface), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_Device_Interface_AliasW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  AliasInterfaceGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszAliasDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_AliasW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(AliasInterfaceGuid), util.pwstrToFfi(pszAliasDeviceInterface), util.toPointer(pulLength), ulFlags);
}

export function CM_Get_Device_Interface_Alias_ExA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  AliasInterfaceGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszAliasDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_Alias_ExA(util.pstrToFfi(pszDeviceInterface), util.toPointer(AliasInterfaceGuid), util.pstrToFfi(pszAliasDeviceInterface), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Device_Interface_Alias_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  AliasInterfaceGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszAliasDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_Alias_ExW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(AliasInterfaceGuid), util.pwstrToFfi(pszAliasDeviceInterface), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Device_Interface_ListA(
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_ListA(util.toPointer(InterfaceClassGuid), util.pstrToFfi(pDeviceID), util.pstrToFfi(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Device_Interface_ListW(
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_ListW(util.toPointer(InterfaceClassGuid), util.pwstrToFfi(pDeviceID), util.pwstrToFfi(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Device_Interface_List_ExA(
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_List_ExA(util.toPointer(InterfaceClassGuid), util.pstrToFfi(pDeviceID), util.pstrToFfi(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Device_Interface_List_ExW(
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  Buffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_List_ExW(util.toPointer(InterfaceClassGuid), util.pwstrToFfi(pDeviceID), util.pwstrToFfi(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Device_Interface_List_SizeA(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_List_SizeA(util.toPointer(pulLen), util.toPointer(InterfaceClassGuid), util.pstrToFfi(pDeviceID), ulFlags);
}

export function CM_Get_Device_Interface_List_SizeW(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_List_SizeW(util.toPointer(pulLen), util.toPointer(InterfaceClassGuid), util.pwstrToFfi(pDeviceID), ulFlags);
}

export function CM_Get_Device_Interface_List_Size_ExA(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_List_Size_ExA(util.toPointer(pulLen), util.toPointer(InterfaceClassGuid), util.pstrToFfi(pDeviceID), ulFlags, hMachine);
}

export function CM_Get_Device_Interface_List_Size_ExW(
  pulLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_List_Size_ExW(util.toPointer(pulLen), util.toPointer(InterfaceClassGuid), util.pwstrToFfi(pDeviceID), ulFlags, hMachine);
}

export function CM_Get_Device_Interface_PropertyW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_PropertyW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize), ulFlags);
}

export function CM_Get_Device_Interface_Property_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_Property_ExW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize), ulFlags, hMachine);
}

export function CM_Get_Device_Interface_Property_KeysW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_Property_KeysW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(PropertyKeyArray), util.toPointer(PropertyKeyCount), ulFlags);
}

export function CM_Get_Device_Interface_Property_Keys_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Device_Interface_Property_Keys_ExW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(PropertyKeyArray), util.toPointer(PropertyKeyCount), ulFlags, hMachine);
}

export function CM_Get_Log_Conf_Priority(
  lcLogConf: Deno.PointerValue /* usize */,
  pPriority: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Log_Conf_Priority(lcLogConf, util.toPointer(pPriority), ulFlags);
}

export function CM_Get_Log_Conf_Priority_Ex(
  lcLogConf: Deno.PointerValue /* usize */,
  pPriority: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Log_Conf_Priority_Ex(lcLogConf, util.toPointer(pPriority), ulFlags, hMachine);
}

export function CM_Get_Next_Log_Conf(
  plcLogConf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcLogConf: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Next_Log_Conf(util.toPointer(plcLogConf), lcLogConf, ulFlags);
}

export function CM_Get_Next_Log_Conf_Ex(
  plcLogConf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lcLogConf: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Next_Log_Conf_Ex(util.toPointer(plcLogConf), lcLogConf, ulFlags, hMachine);
}

export function CM_Get_Parent(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Parent(util.toPointer(pdnDevInst), dnDevInst, ulFlags);
}

export function CM_Get_Parent_Ex(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Parent_Ex(util.toPointer(pdnDevInst), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_Res_Des_Data(
  rdResDes: Deno.PointerValue /* usize */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Res_Des_Data(rdResDes, util.toPointer(Buffer), BufferLen, ulFlags);
}

export function CM_Get_Res_Des_Data_Ex(
  rdResDes: Deno.PointerValue /* usize */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Res_Des_Data_Ex(rdResDes, util.toPointer(Buffer), BufferLen, ulFlags, hMachine);
}

export function CM_Get_Res_Des_Data_Size(
  pulSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Res_Des_Data_Size(util.toPointer(pulSize), rdResDes, ulFlags);
}

export function CM_Get_Res_Des_Data_Size_Ex(
  pulSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Res_Des_Data_Size_Ex(util.toPointer(pulSize), rdResDes, ulFlags, hMachine);
}

export function CM_Get_Sibling(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Sibling(util.toPointer(pdnDevInst), dnDevInst, ulFlags);
}

export function CM_Get_Sibling_Ex(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Sibling_Ex(util.toPointer(pdnDevInst), dnDevInst, ulFlags, hMachine);
}

export function CM_Get_Version(): number /* u16 */ {
  return libCFGMGR32_dll.CM_Get_Version();
}

export function CM_Get_Version_Ex(
  hMachine: Deno.PointerValue /* isize */,
): number /* u16 */ {
  return libCFGMGR32_dll.CM_Get_Version_Ex(hMachine);
}

export function CM_Is_Version_Available(
  wVersion: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCFGMGR32_dll.CM_Is_Version_Available(wVersion));
}

export function CM_Is_Version_Available_Ex(
  wVersion: number /* u16 */,
  hMachine: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCFGMGR32_dll.CM_Is_Version_Available_Ex(wVersion, hMachine));
}

export function CM_Intersect_Range_List(
  rlhOld1: Deno.PointerValue /* usize */,
  rlhOld2: Deno.PointerValue /* usize */,
  rlhNew: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Intersect_Range_List(rlhOld1, rlhOld2, rlhNew, ulFlags);
}

export function CM_Invert_Range_List(
  rlhOld: Deno.PointerValue /* usize */,
  rlhNew: Deno.PointerValue /* usize */,
  ullMaxValue: Deno.PointerValue /* u64 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Invert_Range_List(rlhOld, rlhNew, ullMaxValue, ulFlags);
}

export function CM_Locate_DevNodeA(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Locate_DevNodeA(util.toPointer(pdnDevInst), util.pstrToFfi(pDeviceID), ulFlags);
}

export function CM_Locate_DevNodeW(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Locate_DevNodeW(util.toPointer(pdnDevInst), util.pwstrToFfi(pDeviceID), ulFlags);
}

export function CM_Locate_DevNode_ExA(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Locate_DevNode_ExA(util.toPointer(pdnDevInst), util.pstrToFfi(pDeviceID), ulFlags, hMachine);
}

export function CM_Locate_DevNode_ExW(
  pdnDevInst: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Locate_DevNode_ExW(util.toPointer(pdnDevInst), util.pwstrToFfi(pDeviceID), ulFlags, hMachine);
}

export function CM_Merge_Range_List(
  rlhOld1: Deno.PointerValue /* usize */,
  rlhOld2: Deno.PointerValue /* usize */,
  rlhNew: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Merge_Range_List(rlhOld1, rlhOld2, rlhNew, ulFlags);
}

export function CM_Modify_Res_Des(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Modify_Res_Des(util.toPointer(prdResDes), rdResDes, ResourceID, util.toPointer(ResourceData), ResourceLen, ulFlags);
}

export function CM_Modify_Res_Des_Ex(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Modify_Res_Des_Ex(util.toPointer(prdResDes), rdResDes, ResourceID, util.toPointer(ResourceData), ResourceLen, ulFlags, hMachine);
}

export function CM_Move_DevNode(
  dnFromDevInst: number /* u32 */,
  dnToDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Move_DevNode(dnFromDevInst, dnToDevInst, ulFlags);
}

export function CM_Move_DevNode_Ex(
  dnFromDevInst: number /* u32 */,
  dnToDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Move_DevNode_Ex(dnFromDevInst, dnToDevInst, ulFlags, hMachine);
}

export function CM_Next_Range(
  preElement: Deno.PointerValue | Uint8Array | null /* ptr */,
  pullStart: Deno.PointerValue | Uint8Array | null /* ptr */,
  pullEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Next_Range(util.toPointer(preElement), util.toPointer(pullStart), util.toPointer(pullEnd), ulFlags);
}

export function CM_Get_Next_Res_Des(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ForResource: number /* u32 */,
  pResourceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Next_Res_Des(util.toPointer(prdResDes), rdResDes, ForResource, util.toPointer(pResourceID), ulFlags);
}

export function CM_Get_Next_Res_Des_Ex(
  prdResDes: Deno.PointerValue | Uint8Array | null /* ptr */,
  rdResDes: Deno.PointerValue /* usize */,
  ForResource: number /* u32 */,
  pResourceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Next_Res_Des_Ex(util.toPointer(prdResDes), rdResDes, ForResource, util.toPointer(pResourceID), ulFlags, hMachine);
}

export function CM_Open_Class_KeyA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkClass: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Class_KeyA(util.toPointer(ClassGuid), util.pstrToFfi(pszClassName), samDesired, Disposition, util.toPointer(phkClass), ulFlags);
}

export function CM_Open_Class_KeyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkClass: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Class_KeyW(util.toPointer(ClassGuid), util.pwstrToFfi(pszClassName), samDesired, Disposition, util.toPointer(phkClass), ulFlags);
}

export function CM_Open_Class_Key_ExA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkClass: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Class_Key_ExA(util.toPointer(ClassGuid), util.pstrToFfi(pszClassName), samDesired, Disposition, util.toPointer(phkClass), ulFlags, hMachine);
}

export function CM_Open_Class_Key_ExW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkClass: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Class_Key_ExW(util.toPointer(ClassGuid), util.pwstrToFfi(pszClassName), samDesired, Disposition, util.toPointer(phkClass), ulFlags, hMachine);
}

export function CM_Open_DevNode_Key(
  dnDevNode: number /* u32 */,
  samDesired: number /* u32 */,
  ulHardwareProfile: number /* u32 */,
  Disposition: number /* u32 */,
  phkDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_DevNode_Key(dnDevNode, samDesired, ulHardwareProfile, Disposition, util.toPointer(phkDevice), ulFlags);
}

export function CM_Open_DevNode_Key_Ex(
  dnDevNode: number /* u32 */,
  samDesired: number /* u32 */,
  ulHardwareProfile: number /* u32 */,
  Disposition: number /* u32 */,
  phkDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_DevNode_Key_Ex(dnDevNode, samDesired, ulHardwareProfile, Disposition, util.toPointer(phkDevice), ulFlags, hMachine);
}

export function CM_Open_Device_Interface_KeyA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkDeviceInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Device_Interface_KeyA(util.pstrToFfi(pszDeviceInterface), samDesired, Disposition, util.toPointer(phkDeviceInterface), ulFlags);
}

export function CM_Open_Device_Interface_KeyW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkDeviceInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Device_Interface_KeyW(util.pwstrToFfi(pszDeviceInterface), samDesired, Disposition, util.toPointer(phkDeviceInterface), ulFlags);
}

export function CM_Open_Device_Interface_Key_ExA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkDeviceInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Device_Interface_Key_ExA(util.pstrToFfi(pszDeviceInterface), samDesired, Disposition, util.toPointer(phkDeviceInterface), ulFlags, hMachine);
}

export function CM_Open_Device_Interface_Key_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  Disposition: number /* u32 */,
  phkDeviceInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Open_Device_Interface_Key_ExW(util.pwstrToFfi(pszDeviceInterface), samDesired, Disposition, util.toPointer(phkDeviceInterface), ulFlags, hMachine);
}

export function CM_Delete_Device_Interface_KeyA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Device_Interface_KeyA(util.pstrToFfi(pszDeviceInterface), ulFlags);
}

export function CM_Delete_Device_Interface_KeyW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Device_Interface_KeyW(util.pwstrToFfi(pszDeviceInterface), ulFlags);
}

export function CM_Delete_Device_Interface_Key_ExA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Device_Interface_Key_ExA(util.pstrToFfi(pszDeviceInterface), ulFlags, hMachine);
}

export function CM_Delete_Device_Interface_Key_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Delete_Device_Interface_Key_ExW(util.pwstrToFfi(pszDeviceInterface), ulFlags, hMachine);
}

export function CM_Query_Arbitrator_Free_Data(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLen: number /* u32 */,
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Arbitrator_Free_Data(util.toPointer(pData), DataLen, dnDevInst, ResourceID, ulFlags);
}

export function CM_Query_Arbitrator_Free_Data_Ex(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLen: number /* u32 */,
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Arbitrator_Free_Data_Ex(util.toPointer(pData), DataLen, dnDevInst, ResourceID, ulFlags, hMachine);
}

export function CM_Query_Arbitrator_Free_Size(
  pulSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Arbitrator_Free_Size(util.toPointer(pulSize), dnDevInst, ResourceID, ulFlags);
}

export function CM_Query_Arbitrator_Free_Size_Ex(
  pulSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Arbitrator_Free_Size_Ex(util.toPointer(pulSize), dnDevInst, ResourceID, ulFlags, hMachine);
}

export function CM_Query_Remove_SubTree(
  dnAncestor: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Remove_SubTree(dnAncestor, ulFlags);
}

export function CM_Query_Remove_SubTree_Ex(
  dnAncestor: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Remove_SubTree_Ex(dnAncestor, ulFlags, hMachine);
}

export function CM_Query_And_Remove_SubTreeA(
  dnAncestor: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_And_Remove_SubTreeA(dnAncestor, util.toPointer(pVetoType), util.pstrToFfi(pszVetoName), ulNameLength, ulFlags);
}

export function CM_Query_And_Remove_SubTreeW(
  dnAncestor: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_And_Remove_SubTreeW(dnAncestor, util.toPointer(pVetoType), util.pwstrToFfi(pszVetoName), ulNameLength, ulFlags);
}

export function CM_Query_And_Remove_SubTree_ExA(
  dnAncestor: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_And_Remove_SubTree_ExA(dnAncestor, util.toPointer(pVetoType), util.pstrToFfi(pszVetoName), ulNameLength, ulFlags, hMachine);
}

export function CM_Query_And_Remove_SubTree_ExW(
  dnAncestor: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_And_Remove_SubTree_ExW(dnAncestor, util.toPointer(pVetoType), util.pwstrToFfi(pszVetoName), ulNameLength, ulFlags, hMachine);
}

export function CM_Request_Device_EjectA(
  dnDevInst: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Request_Device_EjectA(dnDevInst, util.toPointer(pVetoType), util.pstrToFfi(pszVetoName), ulNameLength, ulFlags);
}

export function CM_Request_Device_Eject_ExA(
  dnDevInst: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Request_Device_Eject_ExA(dnDevInst, util.toPointer(pVetoType), util.pstrToFfi(pszVetoName), ulNameLength, ulFlags, hMachine);
}

export function CM_Request_Device_EjectW(
  dnDevInst: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Request_Device_EjectW(dnDevInst, util.toPointer(pVetoType), util.pwstrToFfi(pszVetoName), ulNameLength, ulFlags);
}

export function CM_Request_Device_Eject_ExW(
  dnDevInst: number /* u32 */,
  pVetoType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszVetoName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulNameLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Request_Device_Eject_ExW(dnDevInst, util.toPointer(pVetoType), util.pwstrToFfi(pszVetoName), ulNameLength, ulFlags, hMachine);
}

export function CM_Reenumerate_DevNode(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Reenumerate_DevNode(dnDevInst, ulFlags);
}

export function CM_Reenumerate_DevNode_Ex(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Reenumerate_DevNode_Ex(dnDevInst, ulFlags, hMachine);
}

export function CM_Register_Device_InterfaceA(
  dnDevInst: number /* u32 */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszReference: string | null /* Windows.Win32.Foundation.PSTR */,
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Device_InterfaceA(dnDevInst, util.toPointer(InterfaceClassGuid), util.pstrToFfi(pszReference), util.pstrToFfi(pszDeviceInterface), util.toPointer(pulLength), ulFlags);
}

export function CM_Register_Device_InterfaceW(
  dnDevInst: number /* u32 */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszReference: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Device_InterfaceW(dnDevInst, util.toPointer(InterfaceClassGuid), util.pwstrToFfi(pszReference), util.pwstrToFfi(pszDeviceInterface), util.toPointer(pulLength), ulFlags);
}

export function CM_Register_Device_Interface_ExA(
  dnDevInst: number /* u32 */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszReference: string | null /* Windows.Win32.Foundation.PSTR */,
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Device_Interface_ExA(dnDevInst, util.toPointer(InterfaceClassGuid), util.pstrToFfi(pszReference), util.pstrToFfi(pszDeviceInterface), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Register_Device_Interface_ExW(
  dnDevInst: number /* u32 */,
  InterfaceClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszReference: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Device_Interface_ExW(dnDevInst, util.toPointer(InterfaceClassGuid), util.pwstrToFfi(pszReference), util.pwstrToFfi(pszDeviceInterface), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Set_DevNode_Problem_Ex(
  dnDevInst: number /* u32 */,
  ulProblem: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Problem_Ex(dnDevInst, ulProblem, ulFlags, hMachine);
}

export function CM_Set_DevNode_Problem(
  dnDevInst: number /* u32 */,
  ulProblem: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Problem(dnDevInst, ulProblem, ulFlags);
}

export function CM_Unregister_Device_InterfaceA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Unregister_Device_InterfaceA(util.pstrToFfi(pszDeviceInterface), ulFlags);
}

export function CM_Unregister_Device_InterfaceW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Unregister_Device_InterfaceW(util.pwstrToFfi(pszDeviceInterface), ulFlags);
}

export function CM_Unregister_Device_Interface_ExA(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Unregister_Device_Interface_ExA(util.pstrToFfi(pszDeviceInterface), ulFlags, hMachine);
}

export function CM_Unregister_Device_Interface_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Unregister_Device_Interface_ExW(util.pwstrToFfi(pszDeviceInterface), ulFlags, hMachine);
}

export function CM_Register_Device_Driver(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Device_Driver(dnDevInst, ulFlags);
}

export function CM_Register_Device_Driver_Ex(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Device_Driver_Ex(dnDevInst, ulFlags, hMachine);
}

export function CM_Remove_SubTree(
  dnAncestor: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Remove_SubTree(dnAncestor, ulFlags);
}

export function CM_Remove_SubTree_Ex(
  dnAncestor: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Remove_SubTree_Ex(dnAncestor, ulFlags, hMachine);
}

export function CM_Set_DevNode_PropertyW(
  dnDevInst: number /* u32 */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_PropertyW(dnDevInst, util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, ulFlags);
}

export function CM_Set_DevNode_Property_ExW(
  dnDevInst: number /* u32 */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Property_ExW(dnDevInst, util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, ulFlags, hMachine);
}

export function CM_Set_DevNode_Registry_PropertyA(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulLength: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Registry_PropertyA(dnDevInst, ulProperty, util.toPointer(Buffer), ulLength, ulFlags);
}

export function CM_Set_DevNode_Registry_PropertyW(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulLength: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Registry_PropertyW(dnDevInst, ulProperty, util.toPointer(Buffer), ulLength, ulFlags);
}

export function CM_Set_DevNode_Registry_Property_ExA(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Registry_Property_ExA(dnDevInst, ulProperty, util.toPointer(Buffer), ulLength, ulFlags, hMachine);
}

export function CM_Set_DevNode_Registry_Property_ExW(
  dnDevInst: number /* u32 */,
  ulProperty: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_DevNode_Registry_Property_ExW(dnDevInst, ulProperty, util.toPointer(Buffer), ulLength, ulFlags, hMachine);
}

export function CM_Set_Device_Interface_PropertyW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_Device_Interface_PropertyW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, ulFlags);
}

export function CM_Set_Device_Interface_Property_ExW(
  pszDeviceInterface: string | null /* Windows.Win32.Foundation.PWSTR */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_Device_Interface_Property_ExW(util.pwstrToFfi(pszDeviceInterface), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, ulFlags, hMachine);
}

export function CM_Is_Dock_Station_Present(
  pbPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Is_Dock_Station_Present(util.toPointer(pbPresent));
}

export function CM_Is_Dock_Station_Present_Ex(
  pbPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Is_Dock_Station_Present_Ex(util.toPointer(pbPresent), hMachine);
}

export function CM_Request_Eject_PC(): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Request_Eject_PC();
}

export function CM_Request_Eject_PC_Ex(
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Request_Eject_PC_Ex(hMachine);
}

export function CM_Set_HW_Prof_FlagsA(
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulConfig: number /* u32 */,
  ulValue: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_HW_Prof_FlagsA(util.pstrToFfi(pDeviceID), ulConfig, ulValue, ulFlags);
}

export function CM_Set_HW_Prof_FlagsW(
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulConfig: number /* u32 */,
  ulValue: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_HW_Prof_FlagsW(util.pwstrToFfi(pDeviceID), ulConfig, ulValue, ulFlags);
}

export function CM_Set_HW_Prof_Flags_ExA(
  pDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  ulConfig: number /* u32 */,
  ulValue: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_HW_Prof_Flags_ExA(util.pstrToFfi(pDeviceID), ulConfig, ulValue, ulFlags, hMachine);
}

export function CM_Set_HW_Prof_Flags_ExW(
  pDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  ulConfig: number /* u32 */,
  ulValue: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_HW_Prof_Flags_ExW(util.pwstrToFfi(pDeviceID), ulConfig, ulValue, ulFlags, hMachine);
}

export function CM_Setup_DevNode(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Setup_DevNode(dnDevInst, ulFlags);
}

export function CM_Setup_DevNode_Ex(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Setup_DevNode_Ex(dnDevInst, ulFlags, hMachine);
}

export function CM_Test_Range_Available(
  ullStartValue: Deno.PointerValue /* u64 */,
  ullEndValue: Deno.PointerValue /* u64 */,
  rlh: Deno.PointerValue /* usize */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Test_Range_Available(ullStartValue, ullEndValue, rlh, ulFlags);
}

export function CM_Uninstall_DevNode(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Uninstall_DevNode(dnDevInst, ulFlags);
}

export function CM_Uninstall_DevNode_Ex(
  dnDevInst: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Uninstall_DevNode_Ex(dnDevInst, ulFlags, hMachine);
}

export function CM_Run_Detection(
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Run_Detection(ulFlags);
}

export function CM_Run_Detection_Ex(
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Run_Detection_Ex(ulFlags, hMachine);
}

export function CM_Set_HW_Prof(
  ulHardwareProfile: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_HW_Prof(ulHardwareProfile, ulFlags);
}

export function CM_Set_HW_Prof_Ex(
  ulHardwareProfile: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_HW_Prof_Ex(ulHardwareProfile, ulFlags, hMachine);
}

export function CM_Query_Resource_Conflict_List(
  pclConflictList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dnDevInst: number /* u32 */,
  ResourceID: number /* u32 */,
  ResourceData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ResourceLen: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Query_Resource_Conflict_List(util.toPointer(pclConflictList), dnDevInst, ResourceID, util.toPointer(ResourceData), ResourceLen, ulFlags, hMachine);
}

export function CM_Free_Resource_Conflict_Handle(
  clConflictList: Deno.PointerValue /* usize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Free_Resource_Conflict_Handle(clConflictList);
}

export function CM_Get_Resource_Conflict_Count(
  clConflictList: Deno.PointerValue /* usize */,
  pulCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Resource_Conflict_Count(clConflictList, util.toPointer(pulCount));
}

export function CM_Get_Resource_Conflict_DetailsA(
  clConflictList: Deno.PointerValue /* usize */,
  ulIndex: number /* u32 */,
  pConflictDetails: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Resource_Conflict_DetailsA(clConflictList, ulIndex, util.toPointer(pConflictDetails));
}

export function CM_Get_Resource_Conflict_DetailsW(
  clConflictList: Deno.PointerValue /* usize */,
  ulIndex: number /* u32 */,
  pConflictDetails: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Resource_Conflict_DetailsW(clConflictList, ulIndex, util.toPointer(pConflictDetails));
}

export function CM_Get_Class_PropertyW(
  ClassGUID: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_PropertyW(util.toPointer(ClassGUID), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize), ulFlags);
}

export function CM_Get_Class_Property_ExW(
  ClassGUID: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Property_ExW(util.toPointer(ClassGUID), util.toPointer(PropertyKey), util.toPointer(PropertyType), util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize), ulFlags, hMachine);
}

export function CM_Get_Class_Property_Keys(
  ClassGUID: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Property_Keys(util.toPointer(ClassGUID), util.toPointer(PropertyKeyArray), util.toPointer(PropertyKeyCount), ulFlags);
}

export function CM_Get_Class_Property_Keys_Ex(
  ClassGUID: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKeyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Property_Keys_Ex(util.toPointer(ClassGUID), util.toPointer(PropertyKeyArray), util.toPointer(PropertyKeyCount), ulFlags, hMachine);
}

export function CM_Set_Class_PropertyW(
  ClassGUID: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  ulFlags: number /* u32 */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_Class_PropertyW(util.toPointer(ClassGUID), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, ulFlags);
}

export function CM_Set_Class_Property_ExW(
  ClassGUID: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyType: number /* u32 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_Class_Property_ExW(util.toPointer(ClassGUID), util.toPointer(PropertyKey), PropertyType, util.toPointer(PropertyBuffer), PropertyBufferSize, ulFlags, hMachine);
}

export function CM_Get_Class_Registry_PropertyA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulProperty: number /* u32 */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Registry_PropertyA(util.toPointer(ClassGuid), ulProperty, util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Get_Class_Registry_PropertyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulProperty: number /* u32 */,
  pulRegDataType: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Get_Class_Registry_PropertyW(util.toPointer(ClassGuid), ulProperty, util.toPointer(pulRegDataType), util.toPointer(Buffer), util.toPointer(pulLength), ulFlags, hMachine);
}

export function CM_Set_Class_Registry_PropertyA(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulProperty: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_Class_Registry_PropertyA(util.toPointer(ClassGuid), ulProperty, util.toPointer(Buffer), ulLength, ulFlags, hMachine);
}

export function CM_Set_Class_Registry_PropertyW(
  ClassGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulProperty: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulLength: number /* u32 */,
  ulFlags: number /* u32 */,
  hMachine: Deno.PointerValue /* isize */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Set_Class_Registry_PropertyW(util.toPointer(ClassGuid), ulProperty, util.toPointer(Buffer), ulLength, ulFlags, hMachine);
}

export function CMP_WaitNoPendingInstallEvents(
  dwTimeout: number /* u32 */,
): number /* u32 */ {
  return libCFGMGR32_dll.CMP_WaitNoPendingInstallEvents(dwTimeout);
}

export function CM_Register_Notification(
  pFilter: Deno.PointerValue | Uint8Array | null /* ptr */,
  pContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.PCM_NOTIFY_CALLBACK */,
  pNotifyContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Register_Notification(util.toPointer(pFilter), util.toPointer(pContext), util.toPointer(pCallback), util.toPointer(pNotifyContext));
}

export function CM_Unregister_Notification(
  NotifyContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HCMNOTIFICATION */,
): CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */ {
  return libCFGMGR32_dll.CM_Unregister_Notification(util.toPointer(NotifyContext));
}

export function CM_MapCrToWin32Err(
  CmReturnCode: CONFIGRET /* Windows.Win32.Devices.DeviceAndDriverInstallation.CONFIGRET */,
  DefaultErr: number /* u32 */,
): number /* u32 */ {
  return libCFGMGR32_dll.CM_MapCrToWin32Err(CmReturnCode, DefaultErr);
}

export function UpdateDriverForPlugAndPlayDevicesA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  HardwareId: string | null /* Windows.Win32.Foundation.PSTR */,
  FullInfPath: string | null /* Windows.Win32.Foundation.PSTR */,
  InstallFlags: number /* u32 */,
  bRebootRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.UpdateDriverForPlugAndPlayDevicesA(util.hwndToFfi(hwndParent), util.pstrToFfi(HardwareId), util.pstrToFfi(FullInfPath), InstallFlags, util.toPointer(bRebootRequired)));
}

export function UpdateDriverForPlugAndPlayDevicesW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  HardwareId: string | null /* Windows.Win32.Foundation.PWSTR */,
  FullInfPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  InstallFlags: number /* u32 */,
  bRebootRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.UpdateDriverForPlugAndPlayDevicesW(util.hwndToFfi(hwndParent), util.pwstrToFfi(HardwareId), util.pwstrToFfi(FullInfPath), InstallFlags, util.toPointer(bRebootRequired)));
}

export function DiInstallDevice(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  DriverInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiInstallDevice(util.hwndToFfi(hwndParent), util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.toPointer(DriverInfoData), Flags, util.toPointer(NeedReboot)));
}

export function DiInstallDriverW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiInstallDriverW(util.hwndToFfi(hwndParent), util.pwstrToFfi(InfPath), Flags, util.toPointer(NeedReboot)));
}

export function DiInstallDriverA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfPath: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiInstallDriverA(util.hwndToFfi(hwndParent), util.pstrToFfi(InfPath), Flags, util.toPointer(NeedReboot)));
}

export function DiUninstallDevice(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiUninstallDevice(util.hwndToFfi(hwndParent), util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Flags, util.toPointer(NeedReboot)));
}

export function DiUninstallDriverW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiUninstallDriverW(util.hwndToFfi(hwndParent), util.pwstrToFfi(InfPath), Flags, util.toPointer(NeedReboot)));
}

export function DiUninstallDriverA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  InfPath: string | null /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiUninstallDriverA(util.hwndToFfi(hwndParent), util.pstrToFfi(InfPath), Flags, util.toPointer(NeedReboot)));
}

export function DiShowUpdateDevice(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiShowUpdateDevice(util.hwndToFfi(hwndParent), util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), Flags, util.toPointer(NeedReboot)));
}

export function DiRollbackDriver(
  DeviceInfoSet: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.DeviceAndDriverInstallation.HDEVINFO */,
  DeviceInfoData: Deno.PointerValue | Uint8Array | null /* ptr */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiRollbackDriver(util.toPointer(DeviceInfoSet), util.toPointer(DeviceInfoData), util.hwndToFfi(hwndParent), Flags, util.toPointer(NeedReboot)));
}

export function DiShowUpdateDriver(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  FilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  NeedReboot: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libnewdev_dll.DiShowUpdateDriver(util.hwndToFfi(hwndParent), util.pwstrToFfi(FilePath), Flags, util.toPointer(NeedReboot)));
}

