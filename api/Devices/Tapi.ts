/// Auto-generated by Deno Win32: Windows.Win32.Devices.Tapi.Apis

import * as util from "../../util.ts";

// Enums
export type TAPI_TONEMODE = number;
export type TAPI_GATHERTERM = number;
export type ADDRESS_EVENT = number;
export type ADDRESS_STATE = number;
export type CALL_STATE = number;
export type CALL_STATE_EVENT_CAUSE = number;
export type CALL_MEDIA_EVENT = number;
export type CALL_MEDIA_EVENT_CAUSE = number;
export type DISCONNECT_CODE = number;
export type TERMINAL_STATE = number;
export type TERMINAL_DIRECTION = number;
export type TERMINAL_TYPE = number;
export type CALL_PRIVILEGE = number;
export type TAPI_EVENT = number;
export type CALL_NOTIFICATION_EVENT = number;
export type CALLHUB_EVENT = number;
export type CALLHUB_STATE = number;
export type TAPIOBJECT_EVENT = number;
export type TAPI_OBJECT_TYPE = number;
export type QOS_SERVICE_LEVEL = number;
export type QOS_EVENT = number;
export type CALLINFOCHANGE_CAUSE = number;
export type CALLINFO_LONG = number;
export type CALLINFO_STRING = number;
export type CALLINFO_BUFFER = number;
export type ADDRESS_CAPABILITY = number;
export type ADDRESS_CAPABILITY_STRING = number;
export type FULLDUPLEX_SUPPORT = number;
export type FINISH_MODE = number;
export type PHONE_PRIVILEGE = number;
export type PHONE_HOOK_SWITCH_DEVICE = number;
export type PHONE_HOOK_SWITCH_STATE = number;
export type PHONE_LAMP_MODE = number;
export type PHONECAPS_LONG = number;
export type PHONECAPS_STRING = number;
export type PHONECAPS_BUFFER = number;
export type PHONE_BUTTON_STATE = number;
export type PHONE_BUTTON_MODE = number;
export type PHONE_BUTTON_FUNCTION = number;
export type PHONE_TONE = number;
export type PHONE_EVENT = number;
export type TERMINAL_MEDIA_STATE = number;
export type FT_STATE_EVENT_CAUSE = number;
export type AGENT_EVENT = number;
export type AGENT_STATE = number;
export type AGENT_SESSION_EVENT = number;
export type AGENT_SESSION_STATE = number;
export type AGENTHANDLER_EVENT = number;
export type ACDGROUP_EVENT = number;
export type ACDQUEUE_EVENT = number;
export type MSP_ADDRESS_EVENT = number;
export type MSP_CALL_EVENT = number;
export type MSP_CALL_EVENT_CAUSE = number;
export type MSP_EVENT = number;
export type DIRECTORY_TYPE = number;
export type DIRECTORY_OBJECT_TYPE = number;
export type RND_ADVERTISING_SCOPE = number;

// Constants
export const TAPI_CURRENT_VERSION = 131074;
export const LINE_ADDRESSSTATE = 0;
export const LINE_CALLINFO = 1;
export const LINE_CALLSTATE = 2;
export const LINE_CLOSE = 3;
export const LINE_DEVSPECIFIC = 4;
export const LINE_DEVSPECIFICFEATURE = 5;
export const LINE_GATHERDIGITS = 6;
export const LINE_GENERATE = 7;
export const LINE_LINEDEVSTATE = 8;
export const LINE_MONITORDIGITS = 9;
export const LINE_MONITORMEDIA = 10;
export const LINE_MONITORTONE = 11;
export const LINE_REPLY = 12;
export const LINE_REQUEST = 13;
export const PHONE_BUTTON = 14;
export const PHONE_CLOSE = 15;
export const PHONE_DEVSPECIFIC = 16;
export const PHONE_REPLY = 17;
export const PHONE_STATE = 18;
export const LINE_CREATE = 19;
export const PHONE_CREATE = 20;
export const LINE_AGENTSPECIFIC = 21;
export const LINE_AGENTSTATUS = 22;
export const LINE_APPNEWCALL = 23;
export const LINE_PROXYREQUEST = 24;
export const LINE_REMOVE = 25;
export const PHONE_REMOVE = 26;
export const LINE_AGENTSESSIONSTATUS = 27;
export const LINE_QUEUESTATUS = 28;
export const LINE_AGENTSTATUSEX = 29;
export const LINE_GROUPSTATUS = 30;
export const LINE_PROXYSTATUS = 31;
export const LINE_APPNEWCALLHUB = 32;
export const LINE_CALLHUBCLOSE = 33;
export const LINE_DEVSPECIFICEX = 34;
export const INITIALIZE_NEGOTIATION = 4294967295;
export const LINEADDRCAPFLAGS_FWDNUMRINGS = 1;
export const LINEADDRCAPFLAGS_PICKUPGROUPID = 2;
export const LINEADDRCAPFLAGS_SECURE = 4;
export const LINEADDRCAPFLAGS_BLOCKIDDEFAULT = 8;
export const LINEADDRCAPFLAGS_BLOCKIDOVERRIDE = 16;
export const LINEADDRCAPFLAGS_DIALED = 32;
export const LINEADDRCAPFLAGS_ORIGOFFHOOK = 64;
export const LINEADDRCAPFLAGS_DESTOFFHOOK = 128;
export const LINEADDRCAPFLAGS_FWDCONSULT = 256;
export const LINEADDRCAPFLAGS_SETUPCONFNULL = 512;
export const LINEADDRCAPFLAGS_AUTORECONNECT = 1024;
export const LINEADDRCAPFLAGS_COMPLETIONID = 2048;
export const LINEADDRCAPFLAGS_TRANSFERHELD = 4096;
export const LINEADDRCAPFLAGS_TRANSFERMAKE = 8192;
export const LINEADDRCAPFLAGS_CONFERENCEHELD = 16384;
export const LINEADDRCAPFLAGS_CONFERENCEMAKE = 32768;
export const LINEADDRCAPFLAGS_PARTIALDIAL = 65536;
export const LINEADDRCAPFLAGS_FWDSTATUSVALID = 131072;
export const LINEADDRCAPFLAGS_FWDINTEXTADDR = 262144;
export const LINEADDRCAPFLAGS_FWDBUSYNAADDR = 524288;
export const LINEADDRCAPFLAGS_ACCEPTTOALERT = 1048576;
export const LINEADDRCAPFLAGS_CONFDROP = 2097152;
export const LINEADDRCAPFLAGS_PICKUPCALLWAIT = 4194304;
export const LINEADDRCAPFLAGS_PREDICTIVEDIALER = 8388608;
export const LINEADDRCAPFLAGS_QUEUE = 16777216;
export const LINEADDRCAPFLAGS_ROUTEPOINT = 33554432;
export const LINEADDRCAPFLAGS_HOLDMAKESNEW = 67108864;
export const LINEADDRCAPFLAGS_NOINTERNALCALLS = 134217728;
export const LINEADDRCAPFLAGS_NOEXTERNALCALLS = 268435456;
export const LINEADDRCAPFLAGS_SETCALLINGID = 536870912;
export const LINEADDRCAPFLAGS_ACDGROUP = 1073741824;
export const LINEADDRCAPFLAGS_NOPSTNADDRESSTRANSLATION = 2147483648;
export const LINEADDRESSMODE_ADDRESSID = 1;
export const LINEADDRESSMODE_DIALABLEADDR = 2;
export const LINEADDRESSSHARING_PRIVATE = 1;
export const LINEADDRESSSHARING_BRIDGEDEXCL = 2;
export const LINEADDRESSSHARING_BRIDGEDNEW = 4;
export const LINEADDRESSSHARING_BRIDGEDSHARED = 8;
export const LINEADDRESSSHARING_MONITORED = 16;
export const LINEADDRESSSTATE_OTHER = 1;
export const LINEADDRESSSTATE_DEVSPECIFIC = 2;
export const LINEADDRESSSTATE_INUSEZERO = 4;
export const LINEADDRESSSTATE_INUSEONE = 8;
export const LINEADDRESSSTATE_INUSEMANY = 16;
export const LINEADDRESSSTATE_NUMCALLS = 32;
export const LINEADDRESSSTATE_FORWARD = 64;
export const LINEADDRESSSTATE_TERMINALS = 128;
export const LINEADDRESSSTATE_CAPSCHANGE = 256;
export const LINEADDRESSTYPE_PHONENUMBER = 1;
export const LINEADDRESSTYPE_SDP = 2;
export const LINEADDRESSTYPE_EMAILNAME = 4;
export const LINEADDRESSTYPE_DOMAINNAME = 8;
export const LINEADDRESSTYPE_IPADDRESS = 16;
export const LINEADDRFEATURE_FORWARD = 1;
export const LINEADDRFEATURE_MAKECALL = 2;
export const LINEADDRFEATURE_PICKUP = 4;
export const LINEADDRFEATURE_SETMEDIACONTROL = 8;
export const LINEADDRFEATURE_SETTERMINAL = 16;
export const LINEADDRFEATURE_SETUPCONF = 32;
export const LINEADDRFEATURE_UNCOMPLETECALL = 64;
export const LINEADDRFEATURE_UNPARK = 128;
export const LINEADDRFEATURE_PICKUPHELD = 256;
export const LINEADDRFEATURE_PICKUPGROUP = 512;
export const LINEADDRFEATURE_PICKUPDIRECT = 1024;
export const LINEADDRFEATURE_PICKUPWAITING = 2048;
export const LINEADDRFEATURE_FORWARDFWD = 4096;
export const LINEADDRFEATURE_FORWARDDND = 8192;
export const LINEAGENTFEATURE_SETAGENTGROUP = 1;
export const LINEAGENTFEATURE_SETAGENTSTATE = 2;
export const LINEAGENTFEATURE_SETAGENTACTIVITY = 4;
export const LINEAGENTFEATURE_AGENTSPECIFIC = 8;
export const LINEAGENTFEATURE_GETAGENTACTIVITYLIST = 16;
export const LINEAGENTFEATURE_GETAGENTGROUP = 32;
export const LINEAGENTSTATE_LOGGEDOFF = 1;
export const LINEAGENTSTATE_NOTREADY = 2;
export const LINEAGENTSTATE_READY = 4;
export const LINEAGENTSTATE_BUSYACD = 8;
export const LINEAGENTSTATE_BUSYINCOMING = 16;
export const LINEAGENTSTATE_BUSYOUTBOUND = 32;
export const LINEAGENTSTATE_BUSYOTHER = 64;
export const LINEAGENTSTATE_WORKINGAFTERCALL = 128;
export const LINEAGENTSTATE_UNKNOWN = 256;
export const LINEAGENTSTATE_UNAVAIL = 512;
export const LINEAGENTSTATUS_GROUP = 1;
export const LINEAGENTSTATUS_STATE = 2;
export const LINEAGENTSTATUS_NEXTSTATE = 4;
export const LINEAGENTSTATUS_ACTIVITY = 8;
export const LINEAGENTSTATUS_ACTIVITYLIST = 16;
export const LINEAGENTSTATUS_GROUPLIST = 32;
export const LINEAGENTSTATUS_CAPSCHANGE = 64;
export const LINEAGENTSTATUS_VALIDSTATES = 128;
export const LINEAGENTSTATUS_VALIDNEXTSTATES = 256;
export const LINEAGENTSTATEEX_NOTREADY = 1;
export const LINEAGENTSTATEEX_READY = 2;
export const LINEAGENTSTATEEX_BUSYACD = 4;
export const LINEAGENTSTATEEX_BUSYINCOMING = 8;
export const LINEAGENTSTATEEX_BUSYOUTGOING = 16;
export const LINEAGENTSTATEEX_UNKNOWN = 32;
export const LINEAGENTSTATEEX_RELEASED = 64;
export const LINEAGENTSTATUSEX_NEWAGENT = 1;
export const LINEAGENTSTATUSEX_STATE = 2;
export const LINEAGENTSTATUSEX_UPDATEINFO = 4;
export const LINEAGENTSESSIONSTATE_NOTREADY = 1;
export const LINEAGENTSESSIONSTATE_READY = 2;
export const LINEAGENTSESSIONSTATE_BUSYONCALL = 4;
export const LINEAGENTSESSIONSTATE_BUSYWRAPUP = 8;
export const LINEAGENTSESSIONSTATE_ENDED = 16;
export const LINEAGENTSESSIONSTATE_RELEASED = 32;
export const LINEAGENTSESSIONSTATUS_NEWSESSION = 1;
export const LINEAGENTSESSIONSTATUS_STATE = 2;
export const LINEAGENTSESSIONSTATUS_UPDATEINFO = 4;
export const LINEQUEUESTATUS_UPDATEINFO = 1;
export const LINEQUEUESTATUS_NEWQUEUE = 2;
export const LINEQUEUESTATUS_QUEUEREMOVED = 4;
export const LINEGROUPSTATUS_NEWGROUP = 1;
export const LINEGROUPSTATUS_GROUPREMOVED = 2;
export const LINEPROXYSTATUS_OPEN = 1;
export const LINEPROXYSTATUS_CLOSE = 2;
export const LINEPROXYSTATUS_ALLOPENFORACD = 4;
export const LINEANSWERMODE_NONE = 1;
export const LINEANSWERMODE_DROP = 2;
export const LINEANSWERMODE_HOLD = 4;
export const LINEBEARERMODE_VOICE = 1;
export const LINEBEARERMODE_SPEECH = 2;
export const LINEBEARERMODE_MULTIUSE = 4;
export const LINEBEARERMODE_DATA = 8;
export const LINEBEARERMODE_ALTSPEECHDATA = 16;
export const LINEBEARERMODE_NONCALLSIGNALING = 32;
export const LINEBEARERMODE_PASSTHROUGH = 64;
export const LINEBEARERMODE_RESTRICTEDDATA = 128;
export const LINEBUSYMODE_STATION = 1;
export const LINEBUSYMODE_TRUNK = 2;
export const LINEBUSYMODE_UNKNOWN = 4;
export const LINEBUSYMODE_UNAVAIL = 8;
export const LINECALLCOMPLCOND_BUSY = 1;
export const LINECALLCOMPLCOND_NOANSWER = 2;
export const LINECALLCOMPLMODE_CAMPON = 1;
export const LINECALLCOMPLMODE_CALLBACK = 2;
export const LINECALLCOMPLMODE_INTRUDE = 4;
export const LINECALLCOMPLMODE_MESSAGE = 8;
export const LINECALLFEATURE_ACCEPT = 1;
export const LINECALLFEATURE_ADDTOCONF = 2;
export const LINECALLFEATURE_ANSWER = 4;
export const LINECALLFEATURE_BLINDTRANSFER = 8;
export const LINECALLFEATURE_COMPLETECALL = 16;
export const LINECALLFEATURE_COMPLETETRANSF = 32;
export const LINECALLFEATURE_DIAL = 64;
export const LINECALLFEATURE_DROP = 128;
export const LINECALLFEATURE_GATHERDIGITS = 256;
export const LINECALLFEATURE_GENERATEDIGITS = 512;
export const LINECALLFEATURE_GENERATETONE = 1024;
export const LINECALLFEATURE_HOLD = 2048;
export const LINECALLFEATURE_MONITORDIGITS = 4096;
export const LINECALLFEATURE_MONITORMEDIA = 8192;
export const LINECALLFEATURE_MONITORTONES = 16384;
export const LINECALLFEATURE_PARK = 32768;
export const LINECALLFEATURE_PREPAREADDCONF = 65536;
export const LINECALLFEATURE_REDIRECT = 131072;
export const LINECALLFEATURE_REMOVEFROMCONF = 262144;
export const LINECALLFEATURE_SECURECALL = 524288;
export const LINECALLFEATURE_SENDUSERUSER = 1048576;
export const LINECALLFEATURE_SETCALLPARAMS = 2097152;
export const LINECALLFEATURE_SETMEDIACONTROL = 4194304;
export const LINECALLFEATURE_SETTERMINAL = 8388608;
export const LINECALLFEATURE_SETUPCONF = 16777216;
export const LINECALLFEATURE_SETUPTRANSFER = 33554432;
export const LINECALLFEATURE_SWAPHOLD = 67108864;
export const LINECALLFEATURE_UNHOLD = 134217728;
export const LINECALLFEATURE_RELEASEUSERUSERINFO = 268435456;
export const LINECALLFEATURE_SETTREATMENT = 536870912;
export const LINECALLFEATURE_SETQOS = 1073741824;
export const LINECALLFEATURE_SETCALLDATA = 2147483648;
export const LINECALLFEATURE2_NOHOLDCONFERENCE = 1;
export const LINECALLFEATURE2_ONESTEPTRANSFER = 2;
export const LINECALLFEATURE2_COMPLCAMPON = 4;
export const LINECALLFEATURE2_COMPLCALLBACK = 8;
export const LINECALLFEATURE2_COMPLINTRUDE = 16;
export const LINECALLFEATURE2_COMPLMESSAGE = 32;
export const LINECALLFEATURE2_TRANSFERNORM = 64;
export const LINECALLFEATURE2_TRANSFERCONF = 128;
export const LINECALLFEATURE2_PARKDIRECT = 256;
export const LINECALLFEATURE2_PARKNONDIRECT = 512;
export const LINECALLHUBTRACKING_NONE = 0;
export const LINECALLHUBTRACKING_PROVIDERLEVEL = 1;
export const LINECALLHUBTRACKING_ALLCALLS = 2;
export const LINECALLINFOSTATE_OTHER = 1;
export const LINECALLINFOSTATE_DEVSPECIFIC = 2;
export const LINECALLINFOSTATE_BEARERMODE = 4;
export const LINECALLINFOSTATE_RATE = 8;
export const LINECALLINFOSTATE_MEDIAMODE = 16;
export const LINECALLINFOSTATE_APPSPECIFIC = 32;
export const LINECALLINFOSTATE_CALLID = 64;
export const LINECALLINFOSTATE_RELATEDCALLID = 128;
export const LINECALLINFOSTATE_ORIGIN = 256;
export const LINECALLINFOSTATE_REASON = 512;
export const LINECALLINFOSTATE_COMPLETIONID = 1024;
export const LINECALLINFOSTATE_NUMOWNERINCR = 2048;
export const LINECALLINFOSTATE_NUMOWNERDECR = 4096;
export const LINECALLINFOSTATE_NUMMONITORS = 8192;
export const LINECALLINFOSTATE_TRUNK = 16384;
export const LINECALLINFOSTATE_CALLERID = 32768;
export const LINECALLINFOSTATE_CALLEDID = 65536;
export const LINECALLINFOSTATE_CONNECTEDID = 131072;
export const LINECALLINFOSTATE_REDIRECTIONID = 262144;
export const LINECALLINFOSTATE_REDIRECTINGID = 524288;
export const LINECALLINFOSTATE_DISPLAY = 1048576;
export const LINECALLINFOSTATE_USERUSERINFO = 2097152;
export const LINECALLINFOSTATE_HIGHLEVELCOMP = 4194304;
export const LINECALLINFOSTATE_LOWLEVELCOMP = 8388608;
export const LINECALLINFOSTATE_CHARGINGINFO = 16777216;
export const LINECALLINFOSTATE_TERMINAL = 33554432;
export const LINECALLINFOSTATE_DIALPARAMS = 67108864;
export const LINECALLINFOSTATE_MONITORMODES = 134217728;
export const LINECALLINFOSTATE_TREATMENT = 268435456;
export const LINECALLINFOSTATE_QOS = 536870912;
export const LINECALLINFOSTATE_CALLDATA = 1073741824;
export const LINECALLORIGIN_OUTBOUND = 1;
export const LINECALLORIGIN_INTERNAL = 2;
export const LINECALLORIGIN_EXTERNAL = 4;
export const LINECALLORIGIN_UNKNOWN = 16;
export const LINECALLORIGIN_UNAVAIL = 32;
export const LINECALLORIGIN_CONFERENCE = 64;
export const LINECALLORIGIN_INBOUND = 128;
export const LINECALLPARAMFLAGS_SECURE = 1;
export const LINECALLPARAMFLAGS_IDLE = 2;
export const LINECALLPARAMFLAGS_BLOCKID = 4;
export const LINECALLPARAMFLAGS_ORIGOFFHOOK = 8;
export const LINECALLPARAMFLAGS_DESTOFFHOOK = 16;
export const LINECALLPARAMFLAGS_NOHOLDCONFERENCE = 32;
export const LINECALLPARAMFLAGS_PREDICTIVEDIAL = 64;
export const LINECALLPARAMFLAGS_ONESTEPTRANSFER = 128;
export const LINECALLPARTYID_BLOCKED = 1;
export const LINECALLPARTYID_OUTOFAREA = 2;
export const LINECALLPARTYID_NAME = 4;
export const LINECALLPARTYID_ADDRESS = 8;
export const LINECALLPARTYID_PARTIAL = 16;
export const LINECALLPARTYID_UNKNOWN = 32;
export const LINECALLPARTYID_UNAVAIL = 64;
export const LINECALLPRIVILEGE_NONE = 1;
export const LINECALLPRIVILEGE_MONITOR = 2;
export const LINECALLPRIVILEGE_OWNER = 4;
export const LINECALLREASON_DIRECT = 1;
export const LINECALLREASON_FWDBUSY = 2;
export const LINECALLREASON_FWDNOANSWER = 4;
export const LINECALLREASON_FWDUNCOND = 8;
export const LINECALLREASON_PICKUP = 16;
export const LINECALLREASON_UNPARK = 32;
export const LINECALLREASON_REDIRECT = 64;
export const LINECALLREASON_CALLCOMPLETION = 128;
export const LINECALLREASON_TRANSFER = 256;
export const LINECALLREASON_REMINDER = 512;
export const LINECALLREASON_UNKNOWN = 1024;
export const LINECALLREASON_UNAVAIL = 2048;
export const LINECALLREASON_INTRUDE = 4096;
export const LINECALLREASON_PARKED = 8192;
export const LINECALLREASON_CAMPEDON = 16384;
export const LINECALLREASON_ROUTEREQUEST = 32768;
export const LINECALLSELECT_LINE = 1;
export const LINECALLSELECT_ADDRESS = 2;
export const LINECALLSELECT_CALL = 4;
export const LINECALLSELECT_DEVICEID = 8;
export const LINECALLSELECT_CALLID = 16;
export const LINECALLSTATE_IDLE = 1;
export const LINECALLSTATE_OFFERING = 2;
export const LINECALLSTATE_ACCEPTED = 4;
export const LINECALLSTATE_DIALTONE = 8;
export const LINECALLSTATE_DIALING = 16;
export const LINECALLSTATE_RINGBACK = 32;
export const LINECALLSTATE_BUSY = 64;
export const LINECALLSTATE_SPECIALINFO = 128;
export const LINECALLSTATE_CONNECTED = 256;
export const LINECALLSTATE_PROCEEDING = 512;
export const LINECALLSTATE_ONHOLD = 1024;
export const LINECALLSTATE_CONFERENCED = 2048;
export const LINECALLSTATE_ONHOLDPENDCONF = 4096;
export const LINECALLSTATE_ONHOLDPENDTRANSFER = 8192;
export const LINECALLSTATE_DISCONNECTED = 16384;
export const LINECALLSTATE_UNKNOWN = 32768;
export const LINECALLTREATMENT_SILENCE = 1;
export const LINECALLTREATMENT_RINGBACK = 2;
export const LINECALLTREATMENT_BUSY = 3;
export const LINECALLTREATMENT_MUSIC = 4;
export const LINECARDOPTION_PREDEFINED = 1;
export const LINECARDOPTION_HIDDEN = 2;
export const LINECONNECTEDMODE_ACTIVE = 1;
export const LINECONNECTEDMODE_INACTIVE = 2;
export const LINECONNECTEDMODE_ACTIVEHELD = 4;
export const LINECONNECTEDMODE_INACTIVEHELD = 8;
export const LINECONNECTEDMODE_CONFIRMED = 16;
export const LINEDEVCAPFLAGS_CROSSADDRCONF = 1;
export const LINEDEVCAPFLAGS_HIGHLEVCOMP = 2;
export const LINEDEVCAPFLAGS_LOWLEVCOMP = 4;
export const LINEDEVCAPFLAGS_MEDIACONTROL = 8;
export const LINEDEVCAPFLAGS_MULTIPLEADDR = 16;
export const LINEDEVCAPFLAGS_CLOSEDROP = 32;
export const LINEDEVCAPFLAGS_DIALBILLING = 64;
export const LINEDEVCAPFLAGS_DIALQUIET = 128;
export const LINEDEVCAPFLAGS_DIALDIALTONE = 256;
export const LINEDEVCAPFLAGS_MSP = 512;
export const LINEDEVCAPFLAGS_CALLHUB = 1024;
export const LINEDEVCAPFLAGS_CALLHUBTRACKING = 2048;
export const LINEDEVCAPFLAGS_PRIVATEOBJECTS = 4096;
export const LINEDEVCAPFLAGS_LOCAL = 8192;
export const LINEDEVSTATE_OTHER = 1;
export const LINEDEVSTATE_RINGING = 2;
export const LINEDEVSTATE_CONNECTED = 4;
export const LINEDEVSTATE_DISCONNECTED = 8;
export const LINEDEVSTATE_MSGWAITON = 16;
export const LINEDEVSTATE_MSGWAITOFF = 32;
export const LINEDEVSTATE_INSERVICE = 64;
export const LINEDEVSTATE_OUTOFSERVICE = 128;
export const LINEDEVSTATE_MAINTENANCE = 256;
export const LINEDEVSTATE_OPEN = 512;
export const LINEDEVSTATE_CLOSE = 1024;
export const LINEDEVSTATE_NUMCALLS = 2048;
export const LINEDEVSTATE_NUMCOMPLETIONS = 4096;
export const LINEDEVSTATE_TERMINALS = 8192;
export const LINEDEVSTATE_ROAMMODE = 16384;
export const LINEDEVSTATE_BATTERY = 32768;
export const LINEDEVSTATE_SIGNAL = 65536;
export const LINEDEVSTATE_DEVSPECIFIC = 131072;
export const LINEDEVSTATE_REINIT = 262144;
export const LINEDEVSTATE_LOCK = 524288;
export const LINEDEVSTATE_CAPSCHANGE = 1048576;
export const LINEDEVSTATE_CONFIGCHANGE = 2097152;
export const LINEDEVSTATE_TRANSLATECHANGE = 4194304;
export const LINEDEVSTATE_COMPLCANCEL = 8388608;
export const LINEDEVSTATE_REMOVED = 16777216;
export const LINEDEVSTATUSFLAGS_CONNECTED = 1;
export const LINEDEVSTATUSFLAGS_MSGWAIT = 2;
export const LINEDEVSTATUSFLAGS_INSERVICE = 4;
export const LINEDEVSTATUSFLAGS_LOCKED = 8;
export const LINEDIALTONEMODE_NORMAL = 1;
export const LINEDIALTONEMODE_SPECIAL = 2;
export const LINEDIALTONEMODE_INTERNAL = 4;
export const LINEDIALTONEMODE_EXTERNAL = 8;
export const LINEDIALTONEMODE_UNKNOWN = 16;
export const LINEDIALTONEMODE_UNAVAIL = 32;
export const LINEDIGITMODE_PULSE = 1;
export const LINEDIGITMODE_DTMF = 2;
export const LINEDIGITMODE_DTMFEND = 4;
export const LINEDISCONNECTMODE_NORMAL = 1;
export const LINEDISCONNECTMODE_UNKNOWN = 2;
export const LINEDISCONNECTMODE_REJECT = 4;
export const LINEDISCONNECTMODE_PICKUP = 8;
export const LINEDISCONNECTMODE_FORWARDED = 16;
export const LINEDISCONNECTMODE_BUSY = 32;
export const LINEDISCONNECTMODE_NOANSWER = 64;
export const LINEDISCONNECTMODE_BADADDRESS = 128;
export const LINEDISCONNECTMODE_UNREACHABLE = 256;
export const LINEDISCONNECTMODE_CONGESTION = 512;
export const LINEDISCONNECTMODE_INCOMPATIBLE = 1024;
export const LINEDISCONNECTMODE_UNAVAIL = 2048;
export const LINEDISCONNECTMODE_NODIALTONE = 4096;
export const LINEDISCONNECTMODE_NUMBERCHANGED = 8192;
export const LINEDISCONNECTMODE_OUTOFORDER = 16384;
export const LINEDISCONNECTMODE_TEMPFAILURE = 32768;
export const LINEDISCONNECTMODE_QOSUNAVAIL = 65536;
export const LINEDISCONNECTMODE_BLOCKED = 131072;
export const LINEDISCONNECTMODE_DONOTDISTURB = 262144;
export const LINEDISCONNECTMODE_CANCELLED = 524288;
export const LINEDISCONNECTMODE_DESTINATIONBARRED = 1048576;
export const LINEDISCONNECTMODE_FDNRESTRICT = 2097152;
export const LINEERR_ALLOCATED = 2147483649;
export const LINEERR_BADDEVICEID = 2147483650;
export const LINEERR_BEARERMODEUNAVAIL = 2147483651;
export const LINEERR_CALLUNAVAIL = 2147483653;
export const LINEERR_COMPLETIONOVERRUN = 2147483654;
export const LINEERR_CONFERENCEFULL = 2147483655;
export const LINEERR_DIALBILLING = 2147483656;
export const LINEERR_DIALDIALTONE = 2147483657;
export const LINEERR_DIALPROMPT = 2147483658;
export const LINEERR_DIALQUIET = 2147483659;
export const LINEERR_INCOMPATIBLEAPIVERSION = 2147483660;
export const LINEERR_INCOMPATIBLEEXTVERSION = 2147483661;
export const LINEERR_INIFILECORRUPT = 2147483662;
export const LINEERR_INUSE = 2147483663;
export const LINEERR_INVALADDRESS = 2147483664;
export const LINEERR_INVALADDRESSID = 2147483665;
export const LINEERR_INVALADDRESSMODE = 2147483666;
export const LINEERR_INVALADDRESSSTATE = 2147483667;
export const LINEERR_INVALAPPHANDLE = 2147483668;
export const LINEERR_INVALAPPNAME = 2147483669;
export const LINEERR_INVALBEARERMODE = 2147483670;
export const LINEERR_INVALCALLCOMPLMODE = 2147483671;
export const LINEERR_INVALCALLHANDLE = 2147483672;
export const LINEERR_INVALCALLPARAMS = 2147483673;
export const LINEERR_INVALCALLPRIVILEGE = 2147483674;
export const LINEERR_INVALCALLSELECT = 2147483675;
export const LINEERR_INVALCALLSTATE = 2147483676;
export const LINEERR_INVALCALLSTATELIST = 2147483677;
export const LINEERR_INVALCARD = 2147483678;
export const LINEERR_INVALCOMPLETIONID = 2147483679;
export const LINEERR_INVALCONFCALLHANDLE = 2147483680;
export const LINEERR_INVALCONSULTCALLHANDLE = 2147483681;
export const LINEERR_INVALCOUNTRYCODE = 2147483682;
export const LINEERR_INVALDEVICECLASS = 2147483683;
export const LINEERR_INVALDEVICEHANDLE = 2147483684;
export const LINEERR_INVALDIALPARAMS = 2147483685;
export const LINEERR_INVALDIGITLIST = 2147483686;
export const LINEERR_INVALDIGITMODE = 2147483687;
export const LINEERR_INVALDIGITS = 2147483688;
export const LINEERR_INVALEXTVERSION = 2147483689;
export const LINEERR_INVALGROUPID = 2147483690;
export const LINEERR_INVALLINEHANDLE = 2147483691;
export const LINEERR_INVALLINESTATE = 2147483692;
export const LINEERR_INVALLOCATION = 2147483693;
export const LINEERR_INVALMEDIALIST = 2147483694;
export const LINEERR_INVALMEDIAMODE = 2147483695;
export const LINEERR_INVALMESSAGEID = 2147483696;
export const LINEERR_INVALPARAM = 2147483698;
export const LINEERR_INVALPARKID = 2147483699;
export const LINEERR_INVALPARKMODE = 2147483700;
export const LINEERR_INVALPOINTER = 2147483701;
export const LINEERR_INVALPRIVSELECT = 2147483702;
export const LINEERR_INVALRATE = 2147483703;
export const LINEERR_INVALREQUESTMODE = 2147483704;
export const LINEERR_INVALTERMINALID = 2147483705;
export const LINEERR_INVALTERMINALMODE = 2147483706;
export const LINEERR_INVALTIMEOUT = 2147483707;
export const LINEERR_INVALTONE = 2147483708;
export const LINEERR_INVALTONELIST = 2147483709;
export const LINEERR_INVALTONEMODE = 2147483710;
export const LINEERR_INVALTRANSFERMODE = 2147483711;
export const LINEERR_LINEMAPPERFAILED = 2147483712;
export const LINEERR_NOCONFERENCE = 2147483713;
export const LINEERR_NODEVICE = 2147483714;
export const LINEERR_NODRIVER = 2147483715;
export const LINEERR_NOMEM = 2147483716;
export const LINEERR_NOREQUEST = 2147483717;
export const LINEERR_NOTOWNER = 2147483718;
export const LINEERR_NOTREGISTERED = 2147483719;
export const LINEERR_OPERATIONFAILED = 2147483720;
export const LINEERR_OPERATIONUNAVAIL = 2147483721;
export const LINEERR_RATEUNAVAIL = 2147483722;
export const LINEERR_RESOURCEUNAVAIL = 2147483723;
export const LINEERR_REQUESTOVERRUN = 2147483724;
export const LINEERR_STRUCTURETOOSMALL = 2147483725;
export const LINEERR_TARGETNOTFOUND = 2147483726;
export const LINEERR_TARGETSELF = 2147483727;
export const LINEERR_UNINITIALIZED = 2147483728;
export const LINEERR_USERUSERINFOTOOBIG = 2147483729;
export const LINEERR_REINIT = 2147483730;
export const LINEERR_ADDRESSBLOCKED = 2147483731;
export const LINEERR_BILLINGREJECTED = 2147483732;
export const LINEERR_INVALFEATURE = 2147483733;
export const LINEERR_NOMULTIPLEINSTANCE = 2147483734;
export const LINEERR_INVALAGENTID = 2147483735;
export const LINEERR_INVALAGENTGROUP = 2147483736;
export const LINEERR_INVALPASSWORD = 2147483737;
export const LINEERR_INVALAGENTSTATE = 2147483738;
export const LINEERR_INVALAGENTACTIVITY = 2147483739;
export const LINEERR_DIALVOICEDETECT = 2147483740;
export const LINEERR_USERCANCELLED = 2147483741;
export const LINEERR_INVALADDRESSTYPE = 2147483742;
export const LINEERR_INVALAGENTSESSIONSTATE = 2147483743;
export const LINEERR_DISCONNECTED = 2147483744;
export const LINEERR_SERVICE_NOT_RUNNING = 2147483745;
export const LINEFEATURE_DEVSPECIFIC = 1;
export const LINEFEATURE_DEVSPECIFICFEAT = 2;
export const LINEFEATURE_FORWARD = 4;
export const LINEFEATURE_MAKECALL = 8;
export const LINEFEATURE_SETMEDIACONTROL = 16;
export const LINEFEATURE_SETTERMINAL = 32;
export const LINEFEATURE_SETDEVSTATUS = 64;
export const LINEFEATURE_FORWARDFWD = 128;
export const LINEFEATURE_FORWARDDND = 256;
export const LINEFORWARDMODE_UNCOND = 1;
export const LINEFORWARDMODE_UNCONDINTERNAL = 2;
export const LINEFORWARDMODE_UNCONDEXTERNAL = 4;
export const LINEFORWARDMODE_UNCONDSPECIFIC = 8;
export const LINEFORWARDMODE_BUSY = 16;
export const LINEFORWARDMODE_BUSYINTERNAL = 32;
export const LINEFORWARDMODE_BUSYEXTERNAL = 64;
export const LINEFORWARDMODE_BUSYSPECIFIC = 128;
export const LINEFORWARDMODE_NOANSW = 256;
export const LINEFORWARDMODE_NOANSWINTERNAL = 512;
export const LINEFORWARDMODE_NOANSWEXTERNAL = 1024;
export const LINEFORWARDMODE_NOANSWSPECIFIC = 2048;
export const LINEFORWARDMODE_BUSYNA = 4096;
export const LINEFORWARDMODE_BUSYNAINTERNAL = 8192;
export const LINEFORWARDMODE_BUSYNAEXTERNAL = 16384;
export const LINEFORWARDMODE_BUSYNASPECIFIC = 32768;
export const LINEFORWARDMODE_UNKNOWN = 65536;
export const LINEFORWARDMODE_UNAVAIL = 131072;
export const LINEGATHERTERM_BUFFERFULL = 1;
export const LINEGATHERTERM_TERMDIGIT = 2;
export const LINEGATHERTERM_FIRSTTIMEOUT = 4;
export const LINEGATHERTERM_INTERTIMEOUT = 8;
export const LINEGATHERTERM_CANCEL = 16;
export const LINEGENERATETERM_DONE = 1;
export const LINEGENERATETERM_CANCEL = 2;
export const LINEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1;
export const LINEINITIALIZEEXOPTION_USEEVENT = 2;
export const LINEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3;
export const LINEINITIALIZEEXOPTION_CALLHUBTRACKING = 2147483648;
export const LINELOCATIONOPTION_PULSEDIAL = 1;
export const LINEMAPPER = 4294967295;
export const LINEMEDIACONTROL_NONE = 1;
export const LINEMEDIACONTROL_START = 2;
export const LINEMEDIACONTROL_RESET = 4;
export const LINEMEDIACONTROL_PAUSE = 8;
export const LINEMEDIACONTROL_RESUME = 16;
export const LINEMEDIACONTROL_RATEUP = 32;
export const LINEMEDIACONTROL_RATEDOWN = 64;
export const LINEMEDIACONTROL_RATENORMAL = 128;
export const LINEMEDIACONTROL_VOLUMEUP = 256;
export const LINEMEDIACONTROL_VOLUMEDOWN = 512;
export const LINEMEDIACONTROL_VOLUMENORMAL = 1024;
export const LINEMEDIAMODE_UNKNOWN = 2;
export const LINEMEDIAMODE_INTERACTIVEVOICE = 4;
export const LINEMEDIAMODE_AUTOMATEDVOICE = 8;
export const LINEMEDIAMODE_DATAMODEM = 16;
export const LINEMEDIAMODE_G3FAX = 32;
export const LINEMEDIAMODE_TDD = 64;
export const LINEMEDIAMODE_G4FAX = 128;
export const LINEMEDIAMODE_DIGITALDATA = 256;
export const LINEMEDIAMODE_TELETEX = 512;
export const LINEMEDIAMODE_VIDEOTEX = 1024;
export const LINEMEDIAMODE_TELEX = 2048;
export const LINEMEDIAMODE_MIXED = 4096;
export const LINEMEDIAMODE_ADSI = 8192;
export const LINEMEDIAMODE_VOICEVIEW = 16384;
export const LINEMEDIAMODE_VIDEO = 32768;
export const LAST_LINEMEDIAMODE = 32768;
export const LINEOFFERINGMODE_ACTIVE = 1;
export const LINEOFFERINGMODE_INACTIVE = 2;
export const LINEOPENOPTION_SINGLEADDRESS = 2147483648;
export const LINEOPENOPTION_PROXY = 1073741824;
export const LINEPARKMODE_DIRECTED = 1;
export const LINEPARKMODE_NONDIRECTED = 2;
export const LINEPROXYREQUEST_SETAGENTGROUP = 1;
export const LINEPROXYREQUEST_SETAGENTSTATE = 2;
export const LINEPROXYREQUEST_SETAGENTACTIVITY = 3;
export const LINEPROXYREQUEST_GETAGENTCAPS = 4;
export const LINEPROXYREQUEST_GETAGENTSTATUS = 5;
export const LINEPROXYREQUEST_AGENTSPECIFIC = 6;
export const LINEPROXYREQUEST_GETAGENTACTIVITYLIST = 7;
export const LINEPROXYREQUEST_GETAGENTGROUPLIST = 8;
export const LINEPROXYREQUEST_CREATEAGENT = 9;
export const LINEPROXYREQUEST_SETAGENTMEASUREMENTPERIOD = 10;
export const LINEPROXYREQUEST_GETAGENTINFO = 11;
export const LINEPROXYREQUEST_CREATEAGENTSESSION = 12;
export const LINEPROXYREQUEST_GETAGENTSESSIONLIST = 13;
export const LINEPROXYREQUEST_SETAGENTSESSIONSTATE = 14;
export const LINEPROXYREQUEST_GETAGENTSESSIONINFO = 15;
export const LINEPROXYREQUEST_GETQUEUELIST = 16;
export const LINEPROXYREQUEST_SETQUEUEMEASUREMENTPERIOD = 17;
export const LINEPROXYREQUEST_GETQUEUEINFO = 18;
export const LINEPROXYREQUEST_GETGROUPLIST = 19;
export const LINEPROXYREQUEST_SETAGENTSTATEEX = 20;
export const LINEREMOVEFROMCONF_NONE = 1;
export const LINEREMOVEFROMCONF_LAST = 2;
export const LINEREMOVEFROMCONF_ANY = 3;
export const LINEREQUESTMODE_MAKECALL = 1;
export const LINEREQUESTMODE_MEDIACALL = 2;
export const LINEREQUESTMODE_DROP = 4;
export const LAST_LINEREQUESTMODE = 2;
export const LINEROAMMODE_UNKNOWN = 1;
export const LINEROAMMODE_UNAVAIL = 2;
export const LINEROAMMODE_HOME = 4;
export const LINEROAMMODE_ROAMA = 8;
export const LINEROAMMODE_ROAMB = 16;
export const LINESPECIALINFO_NOCIRCUIT = 1;
export const LINESPECIALINFO_CUSTIRREG = 2;
export const LINESPECIALINFO_REORDER = 4;
export const LINESPECIALINFO_UNKNOWN = 8;
export const LINESPECIALINFO_UNAVAIL = 16;
export const LINETERMDEV_PHONE = 1;
export const LINETERMDEV_HEADSET = 2;
export const LINETERMDEV_SPEAKER = 4;
export const LINETERMMODE_BUTTONS = 1;
export const LINETERMMODE_LAMPS = 2;
export const LINETERMMODE_DISPLAY = 4;
export const LINETERMMODE_RINGER = 8;
export const LINETERMMODE_HOOKSWITCH = 16;
export const LINETERMMODE_MEDIATOLINE = 32;
export const LINETERMMODE_MEDIAFROMLINE = 64;
export const LINETERMMODE_MEDIABIDIRECT = 128;
export const LINETERMSHARING_PRIVATE = 1;
export const LINETERMSHARING_SHAREDEXCL = 2;
export const LINETERMSHARING_SHAREDCONF = 4;
export const LINETOLLLISTOPTION_ADD = 1;
export const LINETOLLLISTOPTION_REMOVE = 2;
export const LINETONEMODE_CUSTOM = 1;
export const LINETONEMODE_RINGBACK = 2;
export const LINETONEMODE_BUSY = 4;
export const LINETONEMODE_BEEP = 8;
export const LINETONEMODE_BILLING = 16;
export const LINETRANSFERMODE_TRANSFER = 1;
export const LINETRANSFERMODE_CONFERENCE = 2;
export const LINETRANSLATEOPTION_CARDOVERRIDE = 1;
export const LINETRANSLATEOPTION_CANCELCALLWAITING = 2;
export const LINETRANSLATEOPTION_FORCELOCAL = 4;
export const LINETRANSLATEOPTION_FORCELD = 8;
export const LINETRANSLATERESULT_CANONICAL = 1;
export const LINETRANSLATERESULT_INTERNATIONAL = 2;
export const LINETRANSLATERESULT_LONGDISTANCE = 4;
export const LINETRANSLATERESULT_LOCAL = 8;
export const LINETRANSLATERESULT_INTOLLLIST = 16;
export const LINETRANSLATERESULT_NOTINTOLLLIST = 32;
export const LINETRANSLATERESULT_DIALBILLING = 64;
export const LINETRANSLATERESULT_DIALQUIET = 128;
export const LINETRANSLATERESULT_DIALDIALTONE = 256;
export const LINETRANSLATERESULT_DIALPROMPT = 512;
export const LINETRANSLATERESULT_VOICEDETECT = 1024;
export const LINETRANSLATERESULT_NOTRANSLATION = 2048;
export const PHONEBUTTONFUNCTION_UNKNOWN = 0;
export const PHONEBUTTONFUNCTION_CONFERENCE = 1;
export const PHONEBUTTONFUNCTION_TRANSFER = 2;
export const PHONEBUTTONFUNCTION_DROP = 3;
export const PHONEBUTTONFUNCTION_HOLD = 4;
export const PHONEBUTTONFUNCTION_RECALL = 5;
export const PHONEBUTTONFUNCTION_DISCONNECT = 6;
export const PHONEBUTTONFUNCTION_CONNECT = 7;
export const PHONEBUTTONFUNCTION_MSGWAITON = 8;
export const PHONEBUTTONFUNCTION_MSGWAITOFF = 9;
export const PHONEBUTTONFUNCTION_SELECTRING = 10;
export const PHONEBUTTONFUNCTION_ABBREVDIAL = 11;
export const PHONEBUTTONFUNCTION_FORWARD = 12;
export const PHONEBUTTONFUNCTION_PICKUP = 13;
export const PHONEBUTTONFUNCTION_RINGAGAIN = 14;
export const PHONEBUTTONFUNCTION_PARK = 15;
export const PHONEBUTTONFUNCTION_REJECT = 16;
export const PHONEBUTTONFUNCTION_REDIRECT = 17;
export const PHONEBUTTONFUNCTION_MUTE = 18;
export const PHONEBUTTONFUNCTION_VOLUMEUP = 19;
export const PHONEBUTTONFUNCTION_VOLUMEDOWN = 20;
export const PHONEBUTTONFUNCTION_SPEAKERON = 21;
export const PHONEBUTTONFUNCTION_SPEAKEROFF = 22;
export const PHONEBUTTONFUNCTION_FLASH = 23;
export const PHONEBUTTONFUNCTION_DATAON = 24;
export const PHONEBUTTONFUNCTION_DATAOFF = 25;
export const PHONEBUTTONFUNCTION_DONOTDISTURB = 26;
export const PHONEBUTTONFUNCTION_INTERCOM = 27;
export const PHONEBUTTONFUNCTION_BRIDGEDAPP = 28;
export const PHONEBUTTONFUNCTION_BUSY = 29;
export const PHONEBUTTONFUNCTION_CALLAPP = 30;
export const PHONEBUTTONFUNCTION_DATETIME = 31;
export const PHONEBUTTONFUNCTION_DIRECTORY = 32;
export const PHONEBUTTONFUNCTION_COVER = 33;
export const PHONEBUTTONFUNCTION_CALLID = 34;
export const PHONEBUTTONFUNCTION_LASTNUM = 35;
export const PHONEBUTTONFUNCTION_NIGHTSRV = 36;
export const PHONEBUTTONFUNCTION_SENDCALLS = 37;
export const PHONEBUTTONFUNCTION_MSGINDICATOR = 38;
export const PHONEBUTTONFUNCTION_REPDIAL = 39;
export const PHONEBUTTONFUNCTION_SETREPDIAL = 40;
export const PHONEBUTTONFUNCTION_SYSTEMSPEED = 41;
export const PHONEBUTTONFUNCTION_STATIONSPEED = 42;
export const PHONEBUTTONFUNCTION_CAMPON = 43;
export const PHONEBUTTONFUNCTION_SAVEREPEAT = 44;
export const PHONEBUTTONFUNCTION_QUEUECALL = 45;
export const PHONEBUTTONFUNCTION_NONE = 46;
export const PHONEBUTTONFUNCTION_SEND = 47;
export const PHONEBUTTONMODE_DUMMY = 1;
export const PHONEBUTTONMODE_CALL = 2;
export const PHONEBUTTONMODE_FEATURE = 4;
export const PHONEBUTTONMODE_KEYPAD = 8;
export const PHONEBUTTONMODE_LOCAL = 16;
export const PHONEBUTTONMODE_DISPLAY = 32;
export const PHONEBUTTONSTATE_UP = 1;
export const PHONEBUTTONSTATE_DOWN = 2;
export const PHONEBUTTONSTATE_UNKNOWN = 4;
export const PHONEBUTTONSTATE_UNAVAIL = 8;
export const PHONEERR_ALLOCATED = 2415919105;
export const PHONEERR_BADDEVICEID = 2415919106;
export const PHONEERR_INCOMPATIBLEAPIVERSION = 2415919107;
export const PHONEERR_INCOMPATIBLEEXTVERSION = 2415919108;
export const PHONEERR_INIFILECORRUPT = 2415919109;
export const PHONEERR_INUSE = 2415919110;
export const PHONEERR_INVALAPPHANDLE = 2415919111;
export const PHONEERR_INVALAPPNAME = 2415919112;
export const PHONEERR_INVALBUTTONLAMPID = 2415919113;
export const PHONEERR_INVALBUTTONMODE = 2415919114;
export const PHONEERR_INVALBUTTONSTATE = 2415919115;
export const PHONEERR_INVALDATAID = 2415919116;
export const PHONEERR_INVALDEVICECLASS = 2415919117;
export const PHONEERR_INVALEXTVERSION = 2415919118;
export const PHONEERR_INVALHOOKSWITCHDEV = 2415919119;
export const PHONEERR_INVALHOOKSWITCHMODE = 2415919120;
export const PHONEERR_INVALLAMPMODE = 2415919121;
export const PHONEERR_INVALPARAM = 2415919122;
export const PHONEERR_INVALPHONEHANDLE = 2415919123;
export const PHONEERR_INVALPHONESTATE = 2415919124;
export const PHONEERR_INVALPOINTER = 2415919125;
export const PHONEERR_INVALPRIVILEGE = 2415919126;
export const PHONEERR_INVALRINGMODE = 2415919127;
export const PHONEERR_NODEVICE = 2415919128;
export const PHONEERR_NODRIVER = 2415919129;
export const PHONEERR_NOMEM = 2415919130;
export const PHONEERR_NOTOWNER = 2415919131;
export const PHONEERR_OPERATIONFAILED = 2415919132;
export const PHONEERR_OPERATIONUNAVAIL = 2415919133;
export const PHONEERR_RESOURCEUNAVAIL = 2415919135;
export const PHONEERR_REQUESTOVERRUN = 2415919136;
export const PHONEERR_STRUCTURETOOSMALL = 2415919137;
export const PHONEERR_UNINITIALIZED = 2415919138;
export const PHONEERR_REINIT = 2415919139;
export const PHONEERR_DISCONNECTED = 2415919140;
export const PHONEERR_SERVICE_NOT_RUNNING = 2415919141;
export const PHONEFEATURE_GETBUTTONINFO = 1;
export const PHONEFEATURE_GETDATA = 2;
export const PHONEFEATURE_GETDISPLAY = 4;
export const PHONEFEATURE_GETGAINHANDSET = 8;
export const PHONEFEATURE_GETGAINSPEAKER = 16;
export const PHONEFEATURE_GETGAINHEADSET = 32;
export const PHONEFEATURE_GETHOOKSWITCHHANDSET = 64;
export const PHONEFEATURE_GETHOOKSWITCHSPEAKER = 128;
export const PHONEFEATURE_GETHOOKSWITCHHEADSET = 256;
export const PHONEFEATURE_GETLAMP = 512;
export const PHONEFEATURE_GETRING = 1024;
export const PHONEFEATURE_GETVOLUMEHANDSET = 2048;
export const PHONEFEATURE_GETVOLUMESPEAKER = 4096;
export const PHONEFEATURE_GETVOLUMEHEADSET = 8192;
export const PHONEFEATURE_SETBUTTONINFO = 16384;
export const PHONEFEATURE_SETDATA = 32768;
export const PHONEFEATURE_SETDISPLAY = 65536;
export const PHONEFEATURE_SETGAINHANDSET = 131072;
export const PHONEFEATURE_SETGAINSPEAKER = 262144;
export const PHONEFEATURE_SETGAINHEADSET = 524288;
export const PHONEFEATURE_SETHOOKSWITCHHANDSET = 1048576;
export const PHONEFEATURE_SETHOOKSWITCHSPEAKER = 2097152;
export const PHONEFEATURE_SETHOOKSWITCHHEADSET = 4194304;
export const PHONEFEATURE_SETLAMP = 8388608;
export const PHONEFEATURE_SETRING = 16777216;
export const PHONEFEATURE_SETVOLUMEHANDSET = 33554432;
export const PHONEFEATURE_SETVOLUMESPEAKER = 67108864;
export const PHONEFEATURE_SETVOLUMEHEADSET = 134217728;
export const PHONEFEATURE_GENERICPHONE = 268435456;
export const PHONEHOOKSWITCHDEV_HANDSET = 1;
export const PHONEHOOKSWITCHDEV_SPEAKER = 2;
export const PHONEHOOKSWITCHDEV_HEADSET = 4;
export const PHONEHOOKSWITCHMODE_ONHOOK = 1;
export const PHONEHOOKSWITCHMODE_MIC = 2;
export const PHONEHOOKSWITCHMODE_SPEAKER = 4;
export const PHONEHOOKSWITCHMODE_MICSPEAKER = 8;
export const PHONEHOOKSWITCHMODE_UNKNOWN = 16;
export const PHONEINITIALIZEEXOPTION_USEHIDDENWINDOW = 1;
export const PHONEINITIALIZEEXOPTION_USEEVENT = 2;
export const PHONEINITIALIZEEXOPTION_USECOMPLETIONPORT = 3;
export const PHONELAMPMODE_DUMMY = 1;
export const PHONELAMPMODE_OFF = 2;
export const PHONELAMPMODE_STEADY = 4;
export const PHONELAMPMODE_WINK = 8;
export const PHONELAMPMODE_FLASH = 16;
export const PHONELAMPMODE_FLUTTER = 32;
export const PHONELAMPMODE_BROKENFLUTTER = 64;
export const PHONELAMPMODE_UNKNOWN = 128;
export const PHONEPRIVILEGE_MONITOR = 1;
export const PHONEPRIVILEGE_OWNER = 2;
export const PHONESTATE_OTHER = 1;
export const PHONESTATE_CONNECTED = 2;
export const PHONESTATE_DISCONNECTED = 4;
export const PHONESTATE_OWNER = 8;
export const PHONESTATE_MONITORS = 16;
export const PHONESTATE_DISPLAY = 32;
export const PHONESTATE_LAMP = 64;
export const PHONESTATE_RINGMODE = 128;
export const PHONESTATE_RINGVOLUME = 256;
export const PHONESTATE_HANDSETHOOKSWITCH = 512;
export const PHONESTATE_HANDSETVOLUME = 1024;
export const PHONESTATE_HANDSETGAIN = 2048;
export const PHONESTATE_SPEAKERHOOKSWITCH = 4096;
export const PHONESTATE_SPEAKERVOLUME = 8192;
export const PHONESTATE_SPEAKERGAIN = 16384;
export const PHONESTATE_HEADSETHOOKSWITCH = 32768;
export const PHONESTATE_HEADSETVOLUME = 65536;
export const PHONESTATE_HEADSETGAIN = 131072;
export const PHONESTATE_SUSPEND = 262144;
export const PHONESTATE_RESUME = 524288;
export const PHONESTATE_DEVSPECIFIC = 1048576;
export const PHONESTATE_REINIT = 2097152;
export const PHONESTATE_CAPSCHANGE = 4194304;
export const PHONESTATE_REMOVED = 8388608;
export const PHONESTATUSFLAGS_CONNECTED = 1;
export const PHONESTATUSFLAGS_SUSPENDED = 2;
export const STRINGFORMAT_ASCII = 1;
export const STRINGFORMAT_DBCS = 2;
export const STRINGFORMAT_UNICODE = 3;
export const STRINGFORMAT_BINARY = 4;
export const TAPI_REPLY = 1123;
export const TAPIERR_CONNECTED = 0;
export const TAPIERR_DROPPED = "-1";
export const TAPIERR_NOREQUESTRECIPIENT = "-2";
export const TAPIERR_REQUESTQUEUEFULL = "-3";
export const TAPIERR_INVALDESTADDRESS = "-4";
export const TAPIERR_INVALWINDOWHANDLE = "-5";
export const TAPIERR_INVALDEVICECLASS = "-6";
export const TAPIERR_INVALDEVICEID = "-7";
export const TAPIERR_DEVICECLASSUNAVAIL = "-8";
export const TAPIERR_DEVICEIDUNAVAIL = "-9";
export const TAPIERR_DEVICEINUSE = "-10";
export const TAPIERR_DESTBUSY = "-11";
export const TAPIERR_DESTNOANSWER = "-12";
export const TAPIERR_DESTUNAVAIL = "-13";
export const TAPIERR_UNKNOWNWINHANDLE = "-14";
export const TAPIERR_UNKNOWNREQUESTID = "-15";
export const TAPIERR_REQUESTFAILED = "-16";
export const TAPIERR_REQUESTCANCELLED = "-17";
export const TAPIERR_INVALPOINTER = "-18";
export const TAPIERR_NOTADMIN = "-19";
export const TAPIERR_MMCWRITELOCKED = "-20";
export const TAPIERR_PROVIDERALREADYINSTALLED = "-21";
export const TAPIERR_SCP_ALREADY_EXISTS = "-22";
export const TAPIERR_SCP_DOES_NOT_EXIST = "-23";
export const TAPIMAXDESTADDRESSSIZE = 80;
export const TAPIMAXAPPNAMESIZE = 40;
export const TAPIMAXCALLEDPARTYSIZE = 40;
export const TAPIMAXCOMMENTSIZE = 80;
export const TAPIMAXDEVICECLASSSIZE = 40;
export const TAPIMAXDEVICEIDSIZE = 40;
export const INTERFACEMASK = 16711680;
export const DISPIDMASK = 65535;
export const IDISPTAPI = 65536;
export const IDISPTAPICALLCENTER = 131072;
export const IDISPCALLINFO = 65536;
export const IDISPBASICCALLCONTROL = 131072;
export const IDISPLEGACYCALLMEDIACONTROL = 196608;
export const IDISPAGGREGATEDMSPCALLOBJ = 262144;
export const IDISPADDRESS = 65536;
export const IDISPADDRESSCAPABILITIES = 131072;
export const IDISPMEDIASUPPORT = 196608;
export const IDISPADDRESSTRANSLATION = 262144;
export const IDISPLEGACYADDRESSMEDIACONTROL = 327680;
export const IDISPAGGREGATEDMSPADDRESSOBJ = 393216;
export const IDISPPHONE = 65536;
export const IDISPAPC = 131072;
export const IDISPMULTITRACK = 65536;
export const IDISPMEDIACONTROL = 131072;
export const IDISPMEDIARECORD = 196608;
export const IDISPMEDIAPLAYBACK = 262144;
export const IDISPFILETRACK = 65536;
export const TAPIMEDIATYPE_AUDIO = 8;
export const TAPIMEDIATYPE_VIDEO = 32768;
export const TAPIMEDIATYPE_DATAMODEM = 16;
export const TAPIMEDIATYPE_G3FAX = 32;
export const TAPIMEDIATYPE_MULTITRACK = 65536;
export const TSPI_MESSAGE_BASE = 500;
export const LINETSPIOPTION_NONREENTRANT = 1;
export const TUISPIDLL_OBJECT_LINEID = 1;
export const TUISPIDLL_OBJECT_PHONEID = 2;
export const TUISPIDLL_OBJECT_PROVIDERID = 3;
export const TUISPIDLL_OBJECT_DIALOGINSTANCE = 4;
export const PRIVATEOBJECT_NONE = 1;
export const PRIVATEOBJECT_CALLID = 2;
export const PRIVATEOBJECT_LINE = 3;
export const PRIVATEOBJECT_CALL = 4;
export const PRIVATEOBJECT_PHONE = 5;
export const PRIVATEOBJECT_ADDRESS = 6;
export const LINEQOSREQUESTTYPE_SERVICELEVEL = 1;
export const LINEQOSSERVICELEVEL_NEEDED = 1;
export const LINEQOSSERVICELEVEL_IFAVAILABLE = 2;
export const LINEQOSSERVICELEVEL_BESTEFFORT = 3;
export const LINEEQOSINFO_NOQOS = 1;
export const LINEEQOSINFO_ADMISSIONFAILURE = 2;
export const LINEEQOSINFO_POLICYFAILURE = 3;
export const LINEEQOSINFO_GENERICERROR = 4;
export const TSPI_PROC_BASE = 500;
export const TSPI_LINEACCEPT = 500;
export const TSPI_LINEADDTOCONFERENCE = 501;
export const TSPI_LINEANSWER = 502;
export const TSPI_LINEBLINDTRANSFER = 503;
export const TSPI_LINECLOSE = 504;
export const TSPI_LINECLOSECALL = 505;
export const TSPI_LINECOMPLETECALL = 506;
export const TSPI_LINECOMPLETETRANSFER = 507;
export const TSPI_LINECONDITIONALMEDIADETECTION = 508;
export const TSPI_LINECONFIGDIALOG = 509;
export const TSPI_LINEDEVSPECIFIC = 510;
export const TSPI_LINEDEVSPECIFICFEATURE = 511;
export const TSPI_LINEDIAL = 512;
export const TSPI_LINEDROP = 513;
export const TSPI_LINEFORWARD = 514;
export const TSPI_LINEGATHERDIGITS = 515;
export const TSPI_LINEGENERATEDIGITS = 516;
export const TSPI_LINEGENERATETONE = 517;
export const TSPI_LINEGETADDRESSCAPS = 518;
export const TSPI_LINEGETADDRESSID = 519;
export const TSPI_LINEGETADDRESSSTATUS = 520;
export const TSPI_LINEGETCALLADDRESSID = 521;
export const TSPI_LINEGETCALLINFO = 522;
export const TSPI_LINEGETCALLSTATUS = 523;
export const TSPI_LINEGETDEVCAPS = 524;
export const TSPI_LINEGETDEVCONFIG = 525;
export const TSPI_LINEGETEXTENSIONID = 526;
export const TSPI_LINEGETICON = 527;
export const TSPI_LINEGETID = 528;
export const TSPI_LINEGETLINEDEVSTATUS = 529;
export const TSPI_LINEGETNUMADDRESSIDS = 530;
export const TSPI_LINEHOLD = 531;
export const TSPI_LINEMAKECALL = 532;
export const TSPI_LINEMONITORDIGITS = 533;
export const TSPI_LINEMONITORMEDIA = 534;
export const TSPI_LINEMONITORTONES = 535;
export const TSPI_LINENEGOTIATEEXTVERSION = 536;
export const TSPI_LINENEGOTIATETSPIVERSION = 537;
export const TSPI_LINEOPEN = 538;
export const TSPI_LINEPARK = 539;
export const TSPI_LINEPICKUP = 540;
export const TSPI_LINEPREPAREADDTOCONFERENCE = 541;
export const TSPI_LINEREDIRECT = 542;
export const TSPI_LINEREMOVEFROMCONFERENCE = 543;
export const TSPI_LINESECURECALL = 544;
export const TSPI_LINESELECTEXTVERSION = 545;
export const TSPI_LINESENDUSERUSERINFO = 546;
export const TSPI_LINESETAPPSPECIFIC = 547;
export const TSPI_LINESETCALLPARAMS = 548;
export const TSPI_LINESETDEFAULTMEDIADETECTION = 549;
export const TSPI_LINESETDEVCONFIG = 550;
export const TSPI_LINESETMEDIACONTROL = 551;
export const TSPI_LINESETMEDIAMODE = 552;
export const TSPI_LINESETSTATUSMESSAGES = 553;
export const TSPI_LINESETTERMINAL = 554;
export const TSPI_LINESETUPCONFERENCE = 555;
export const TSPI_LINESETUPTRANSFER = 556;
export const TSPI_LINESWAPHOLD = 557;
export const TSPI_LINEUNCOMPLETECALL = 558;
export const TSPI_LINEUNHOLD = 559;
export const TSPI_LINEUNPARK = 560;
export const TSPI_PHONECLOSE = 561;
export const TSPI_PHONECONFIGDIALOG = 562;
export const TSPI_PHONEDEVSPECIFIC = 563;
export const TSPI_PHONEGETBUTTONINFO = 564;
export const TSPI_PHONEGETDATA = 565;
export const TSPI_PHONEGETDEVCAPS = 566;
export const TSPI_PHONEGETDISPLAY = 567;
export const TSPI_PHONEGETEXTENSIONID = 568;
export const TSPI_PHONEGETGAIN = 569;
export const TSPI_PHONEGETHOOKSWITCH = 570;
export const TSPI_PHONEGETICON = 571;
export const TSPI_PHONEGETID = 572;
export const TSPI_PHONEGETLAMP = 573;
export const TSPI_PHONEGETRING = 574;
export const TSPI_PHONEGETSTATUS = 575;
export const TSPI_PHONEGETVOLUME = 576;
export const TSPI_PHONENEGOTIATEEXTVERSION = 577;
export const TSPI_PHONENEGOTIATETSPIVERSION = 578;
export const TSPI_PHONEOPEN = 579;
export const TSPI_PHONESELECTEXTVERSION = 580;
export const TSPI_PHONESETBUTTONINFO = 581;
export const TSPI_PHONESETDATA = 582;
export const TSPI_PHONESETDISPLAY = 583;
export const TSPI_PHONESETGAIN = 584;
export const TSPI_PHONESETHOOKSWITCH = 585;
export const TSPI_PHONESETLAMP = 586;
export const TSPI_PHONESETRING = 587;
export const TSPI_PHONESETSTATUSMESSAGES = 588;
export const TSPI_PHONESETVOLUME = 589;
export const TSPI_PROVIDERCONFIG = 590;
export const TSPI_PROVIDERINIT = 591;
export const TSPI_PROVIDERINSTALL = 592;
export const TSPI_PROVIDERREMOVE = 593;
export const TSPI_PROVIDERSHUTDOWN = 594;
export const TSPI_PROVIDERENUMDEVICES = 595;
export const TSPI_LINEDROPONCLOSE = 596;
export const TSPI_LINEDROPNOOWNER = 597;
export const TSPI_PROVIDERCREATELINEDEVICE = 598;
export const TSPI_PROVIDERCREATEPHONEDEVICE = 599;
export const TSPI_LINESETCURRENTLOCATION = 600;
export const TSPI_LINECONFIGDIALOGEDIT = 601;
export const TSPI_LINERELEASEUSERUSERINFO = 602;
export const TSPI_LINEGETCALLID = 603;
export const TSPI_LINEGETCALLHUBTRACKING = 604;
export const TSPI_LINESETCALLHUBTRACKING = 605;
export const TSPI_LINERECEIVEMSPDATA = 606;
export const TSPI_LINEMSPIDENTIFY = 607;
export const TSPI_LINECREATEMSPINSTANCE = 608;
export const TSPI_LINECLOSEMSPINSTANCE = 609;
export const IDISPDIROBJECT = 65536;
export const IDISPDIROBJCONFERENCE = 131072;
export const IDISPDIROBJUSER = 196608;
export const IDISPDIRECTORY = 65536;
export const IDISPILSCONFIG = 131072;
export const RENDBIND_AUTHENTICATE = 1;
export const RENDBIND_DEFAULTDOMAINNAME = 2;
export const RENDBIND_DEFAULTUSERNAME = 4;
export const RENDBIND_DEFAULTPASSWORD = 8;
export const RENDBIND_DEFAULTCREDENTIALS = 14;
export const STRM_INITIAL = 0;
export const STRM_TERMINALSELECTED = 1;
export const STRM_CONFIGURED = 2;
export const STRM_RUNNING = 4;
export const STRM_PAUSED = 8;
export const STRM_STOPPED = 16;
export const TAPI_E_NOTENOUGHMEMORY = 288232594502582273n;
export const TAPI_E_NOITEMS = 288233694014210050n;
export const TAPI_E_NOTSUPPORTED = 288234793525837827n;
export const TAPI_E_INVALIDMEDIATYPE = 288235893037465604n;
export const TAPI_E_OPERATIONFAILED = 288236992549093381n;
export const TAPI_E_ALLOCATED = 288238092060721158n;
export const TAPI_E_CALLUNAVAIL = 288239191572348935n;
export const TAPI_E_COMPLETIONOVERRUN = 288240291083976712n;
export const TAPI_E_CONFERENCEFULL = 288241390595604489n;
export const TAPI_E_DIALMODIFIERNOTSUPPORTED = 288242490107232266n;
export const TAPI_E_INUSE = 288243589618860043n;
export const TAPI_E_INVALADDRESS = 288244689130487820n;
export const TAPI_E_INVALADDRESSSTATE = 288245788642115597n;
export const TAPI_E_INVALCALLPARAMS = 288246888153743374n;
export const TAPI_E_INVALCALLPRIVILEGE = 288247987665371151n;
export const TAPI_E_INVALCALLSTATE = 288249087176998928n;
export const TAPI_E_INVALCARD = 288250186688626705n;
export const TAPI_E_INVALCOMPLETIONID = 288340346642104338n;
export const TAPI_E_INVALCOUNTRYCODE = 288252385711882259n;
export const TAPI_E_INVALDEVICECLASS = 288253485223510036n;
export const TAPI_E_INVALDIALPARAMS = 288254584735137813n;
export const TAPI_E_INVALDIGITS = 288255684246765590n;
export const TAPI_E_INVALGROUPID = 288256783758393367n;
export const TAPI_E_INVALLOCATION = 288257883270021144n;
export const TAPI_E_INVALMESSAGEID = 288260082293276697n;
export const TAPI_E_INVALPARKID = 288265579851415578n;
export const TAPI_E_INVALRATE = 288261181804904475n;
export const TAPI_E_INVALTIMEOUT = 288262281316532252n;
export const TAPI_E_INVALTONE = 288263380828160029n;
export const TAPI_E_INVALLIST = 288264480339787806n;
export const TAPI_E_INVALMODE = 288268878386298911n;
export const TAPI_E_NOCONFERENCE = 288266679363043360n;
export const TAPI_E_NODEVICE = 288267778874671137n;
export const TAPI_E_NOREQUEST = 288286470572343330n;
export const TAPI_E_NOTOWNER = 288269977897926691n;
export const TAPI_E_NOTREGISTERED = 288271077409554468n;
export const TAPI_E_REQUESTOVERRUN = 288272176921182245n;
export const TAPI_E_TARGETNOTFOUND = 288273276432810022n;
export const TAPI_E_TARGETSELF = 288275475456065575n;
export const TAPI_E_USERUSERINFOTOOBIG = 288285371060715560n;
export const TAPI_E_REINIT = 288276574967693353n;
export const TAPI_E_ADDRESSBLOCKED = 288277674479321130n;
export const TAPI_E_BILLINGREJECTED = 288278773990948907n;
export const TAPI_E_INVALFEATURE = 288279873502576684n;
export const TAPI_E_INVALBUTTONLAMPID = 288280973014204461n;
export const TAPI_E_INVALBUTTONSTATE = 288282072525832238n;
export const TAPI_E_INVALDATAID = 288283172037460015n;
export const TAPI_E_INVALHOOKSWITCHDEV = 288284271549087792n;
export const TAPI_E_DROPPED = 288290868618854449n;
export const TAPI_E_NOREQUESTRECIPIENT = 288288669595598898n;
export const TAPI_E_REQUESTQUEUEFULL = 288287570083971123n;
export const TAPI_E_DESTBUSY = 288291968130482228n;
export const TAPI_E_DESTNOANSWER = 288289769107226677n;
export const TAPI_E_DESTUNAVAIL = 288293067642110006n;
export const TAPI_E_REQUESTFAILED = 288296366176993335n;
export const TAPI_E_REQUESTCANCELLED = 288294167153737784n;
export const TAPI_E_INVALPRIVILEGE = 288360137851404345n;
export const TAPI_E_INVALIDDIRECTION = 288295266665365562n;
export const TAPI_E_INVALIDTERMINAL = 288375531014193211n;
export const TAPI_E_INVALIDTERMINALCLASS = 288297465688621116n;
export const TAPI_E_NODRIVER = 288298565200248893n;
export const TAPI_E_MAXSTREAMS = 288299664711876670n;
export const TAPI_E_NOTERMINALSELECTED = 288300764223504447n;
export const TAPI_E_TERMINALINUSE = 288301863735132224n;
export const TAPI_E_NOTSTOPPED = 288302963246760001n;
export const TAPI_E_MAXTERMINALS = 288304062758387778n;
export const TAPI_E_INVALIDSTREAM = 288305162270015555n;
export const TAPI_E_TIMEOUT = 288306261781643332n;
export const TAPI_E_CALLCENTER_GROUP_REMOVED = 288307361293271109n;
export const TAPI_E_CALLCENTER_QUEUE_REMOVED = 288308460804898886n;
export const TAPI_E_CALLCENTER_NO_AGENT_ID = 288309560316526663n;
export const TAPI_E_CALLCENTER_INVALAGENTID = 288310659828154440n;
export const TAPI_E_CALLCENTER_INVALAGENTGROUP = 288311759339782217n;
export const TAPI_E_CALLCENTER_INVALPASSWORD = 288312858851409994n;
export const TAPI_E_CALLCENTER_INVALAGENTSTATE = 288313958363037771n;
export const TAPI_E_CALLCENTER_INVALAGENTACTIVITY = 288315057874665548n;
export const TAPI_E_REGISTRY_SETTING_CORRUPT = 288316157386293325n;
export const TAPI_E_TERMINAL_PEER = 288317256897921102n;
export const TAPI_E_PEER_NOT_SET = 288318356409548879n;
export const TAPI_E_NOEVENT = 288319455921176656n;
export const TAPI_E_INVALADDRESSTYPE = 288320555432804433n;
export const TAPI_E_RESOURCEUNAVAIL = 288321654944432210n;
export const TAPI_E_PHONENOTOPEN = 288322754456059987n;
export const TAPI_E_CALLNOTSELECTED = 288323853967687764n;
export const TAPI_E_WRONGEVENT = 288324953479315541n;
export const TAPI_E_NOFORMAT = 288326052990943318n;
export const TAPI_E_INVALIDSTREAMSTATE = 288327152502571095n;
export const TAPI_E_WRONG_STATE = 288328252014198872n;
export const TAPI_E_NOT_INITIALIZED = 288329351525826649n;
export const TAPI_E_SERVICE_NOT_RUNNING = 8070537516073353306n;
export const OPENTNEFSTREAM = "OpenTnefStream";
export const OPENTNEFSTREAMEX = "OpenTnefStreamEx";
export const GETTNEFSTREAMCODEPAGE = "GetTnefStreamCodePage";
export const cbDisplayName = 41;
export const cbEmailName = 11;
export const cbSeverName = 12;
export const cbTYPE = 16;
export const cbMaxIdData = 200;
export const prioLow = 3;
export const prioNorm = 2;
export const prioHigh = 1;
export const atypNull = 0;
export const atypFile = 1;
export const atypOle = 2;
export const atypPicture = 3;
export const atypMax = 4;
export const TTM_RINGBACK = 2;
export const TTM_BUSY = 4;
export const TTM_BEEP = 8;
export const TTM_BILLING = 16;
export const TGT_BUFFERFULL = 1;
export const TGT_TERMDIGIT = 2;
export const TGT_FIRSTTIMEOUT = 4;
export const TGT_INTERTIMEOUT = 8;
export const TGT_CANCEL = 16;
export const AE_STATE = 0;
export const AE_CAPSCHANGE = 1;
export const AE_RINGING = 2;
export const AE_CONFIGCHANGE = 3;
export const AE_FORWARD = 4;
export const AE_NEWTERMINAL = 5;
export const AE_REMOVETERMINAL = 6;
export const AE_MSGWAITON = 7;
export const AE_MSGWAITOFF = 8;
export const AE_LASTITEM = 8;
export const AS_INSERVICE = 0;
export const AS_OUTOFSERVICE = 1;
export const CS_IDLE = 0;
export const CS_INPROGRESS = 1;
export const CS_CONNECTED = 2;
export const CS_DISCONNECTED = 3;
export const CS_OFFERING = 4;
export const CS_HOLD = 5;
export const CS_QUEUED = 6;
export const CS_LASTITEM = 6;
export const CEC_NONE = 0;
export const CEC_DISCONNECT_NORMAL = 1;
export const CEC_DISCONNECT_BUSY = 2;
export const CEC_DISCONNECT_BADADDRESS = 3;
export const CEC_DISCONNECT_NOANSWER = 4;
export const CEC_DISCONNECT_CANCELLED = 5;
export const CEC_DISCONNECT_REJECTED = 6;
export const CEC_DISCONNECT_FAILED = 7;
export const CEC_DISCONNECT_BLOCKED = 8;
export const CME_NEW_STREAM = 0;
export const CME_STREAM_FAIL = 1;
export const CME_TERMINAL_FAIL = 2;
export const CME_STREAM_NOT_USED = 3;
export const CME_STREAM_ACTIVE = 4;
export const CME_STREAM_INACTIVE = 5;
export const CME_LASTITEM = 5;
export const CMC_UNKNOWN = 0;
export const CMC_BAD_DEVICE = 1;
export const CMC_CONNECT_FAIL = 2;
export const CMC_LOCAL_REQUEST = 3;
export const CMC_REMOTE_REQUEST = 4;
export const CMC_MEDIA_TIMEOUT = 5;
export const CMC_MEDIA_RECOVERED = 6;
export const CMC_QUALITY_OF_SERVICE = 7;
export const DC_NORMAL = 0;
export const DC_NOANSWER = 1;
export const DC_REJECTED = 2;
export const TS_INUSE = 0;
export const TS_NOTINUSE = 1;
export const TD_CAPTURE = 0;
export const TD_RENDER = 1;
export const TD_BIDIRECTIONAL = 2;
export const TD_MULTITRACK_MIXED = 3;
export const TD_NONE = 4;
export const TT_STATIC = 0;
export const TT_DYNAMIC = 1;
export const CP_OWNER = 0;
export const CP_MONITOR = 1;
export const TE_TAPIOBJECT = 1;
export const TE_ADDRESS = 2;
export const TE_CALLNOTIFICATION = 4;
export const TE_CALLSTATE = 8;
export const TE_CALLMEDIA = 16;
export const TE_CALLHUB = 32;
export const TE_CALLINFOCHANGE = 64;
export const TE_PRIVATE = 128;
export const TE_REQUEST = 256;
export const TE_AGENT = 512;
export const TE_AGENTSESSION = 1024;
export const TE_QOSEVENT = 2048;
export const TE_AGENTHANDLER = 4096;
export const TE_ACDGROUP = 8192;
export const TE_QUEUE = 16384;
export const TE_DIGITEVENT = 32768;
export const TE_GENERATEEVENT = 65536;
export const TE_ASRTERMINAL = 131072;
export const TE_TTSTERMINAL = 262144;
export const TE_FILETERMINAL = 524288;
export const TE_TONETERMINAL = 1048576;
export const TE_PHONEEVENT = 2097152;
export const TE_TONEEVENT = 4194304;
export const TE_GATHERDIGITS = 8388608;
export const TE_ADDRESSDEVSPECIFIC = 16777216;
export const TE_PHONEDEVSPECIFIC = 33554432;
export const CNE_OWNER = 0;
export const CNE_MONITOR = 1;
export const CNE_LASTITEM = 1;
export const CHE_CALLJOIN = 0;
export const CHE_CALLLEAVE = 1;
export const CHE_CALLHUBNEW = 2;
export const CHE_CALLHUBIDLE = 3;
export const CHE_LASTITEM = 3;
export const CHS_ACTIVE = 0;
export const CHS_IDLE = 1;
export const TE_ADDRESSCREATE = 0;
export const TE_ADDRESSREMOVE = 1;
export const TE_REINIT = 2;
export const TE_TRANSLATECHANGE = 3;
export const TE_ADDRESSCLOSE = 4;
export const TE_PHONECREATE = 5;
export const TE_PHONEREMOVE = 6;
export const TOT_NONE = 0;
export const TOT_TAPI = 1;
export const TOT_ADDRESS = 2;
export const TOT_TERMINAL = 3;
export const TOT_CALL = 4;
export const TOT_CALLHUB = 5;
export const TOT_PHONE = 6;
export const QSL_NEEDED = 1;
export const QSL_IF_AVAILABLE = 2;
export const QSL_BEST_EFFORT = 3;
export const QE_NOQOS = 1;
export const QE_ADMISSIONFAILURE = 2;
export const QE_POLICYFAILURE = 3;
export const QE_GENERICERROR = 4;
export const QE_LASTITEM = 4;
export const CIC_OTHER = 0;
export const CIC_DEVSPECIFIC = 1;
export const CIC_BEARERMODE = 2;
export const CIC_RATE = 3;
export const CIC_APPSPECIFIC = 4;
export const CIC_CALLID = 5;
export const CIC_RELATEDCALLID = 6;
export const CIC_ORIGIN = 7;
export const CIC_REASON = 8;
export const CIC_COMPLETIONID = 9;
export const CIC_NUMOWNERINCR = 10;
export const CIC_NUMOWNERDECR = 11;
export const CIC_NUMMONITORS = 12;
export const CIC_TRUNK = 13;
export const CIC_CALLERID = 14;
export const CIC_CALLEDID = 15;
export const CIC_CONNECTEDID = 16;
export const CIC_REDIRECTIONID = 17;
export const CIC_REDIRECTINGID = 18;
export const CIC_USERUSERINFO = 19;
export const CIC_HIGHLEVELCOMP = 20;
export const CIC_LOWLEVELCOMP = 21;
export const CIC_CHARGINGINFO = 22;
export const CIC_TREATMENT = 23;
export const CIC_CALLDATA = 24;
export const CIC_PRIVILEGE = 25;
export const CIC_MEDIATYPE = 26;
export const CIC_LASTITEM = 26;
export const CIL_MEDIATYPESAVAILABLE = 0;
export const CIL_BEARERMODE = 1;
export const CIL_CALLERIDADDRESSTYPE = 2;
export const CIL_CALLEDIDADDRESSTYPE = 3;
export const CIL_CONNECTEDIDADDRESSTYPE = 4;
export const CIL_REDIRECTIONIDADDRESSTYPE = 5;
export const CIL_REDIRECTINGIDADDRESSTYPE = 6;
export const CIL_ORIGIN = 7;
export const CIL_REASON = 8;
export const CIL_APPSPECIFIC = 9;
export const CIL_CALLPARAMSFLAGS = 10;
export const CIL_CALLTREATMENT = 11;
export const CIL_MINRATE = 12;
export const CIL_MAXRATE = 13;
export const CIL_COUNTRYCODE = 14;
export const CIL_CALLID = 15;
export const CIL_RELATEDCALLID = 16;
export const CIL_COMPLETIONID = 17;
export const CIL_NUMBEROFOWNERS = 18;
export const CIL_NUMBEROFMONITORS = 19;
export const CIL_TRUNK = 20;
export const CIL_RATE = 21;
export const CIL_GENERATEDIGITDURATION = 22;
export const CIL_MONITORDIGITMODES = 23;
export const CIL_MONITORMEDIAMODES = 24;
export const CIS_CALLERIDNAME = 0;
export const CIS_CALLERIDNUMBER = 1;
export const CIS_CALLEDIDNAME = 2;
export const CIS_CALLEDIDNUMBER = 3;
export const CIS_CONNECTEDIDNAME = 4;
export const CIS_CONNECTEDIDNUMBER = 5;
export const CIS_REDIRECTIONIDNAME = 6;
export const CIS_REDIRECTIONIDNUMBER = 7;
export const CIS_REDIRECTINGIDNAME = 8;
export const CIS_REDIRECTINGIDNUMBER = 9;
export const CIS_CALLEDPARTYFRIENDLYNAME = 10;
export const CIS_COMMENT = 11;
export const CIS_DISPLAYABLEADDRESS = 12;
export const CIS_CALLINGPARTYID = 13;
export const CIB_USERUSERINFO = 0;
export const CIB_DEVSPECIFICBUFFER = 1;
export const CIB_CALLDATABUFFER = 2;
export const CIB_CHARGINGINFOBUFFER = 3;
export const CIB_HIGHLEVELCOMPATIBILITYBUFFER = 4;
export const CIB_LOWLEVELCOMPATIBILITYBUFFER = 5;
export const AC_ADDRESSTYPES = 0;
export const AC_BEARERMODES = 1;
export const AC_MAXACTIVECALLS = 2;
export const AC_MAXONHOLDCALLS = 3;
export const AC_MAXONHOLDPENDINGCALLS = 4;
export const AC_MAXNUMCONFERENCE = 5;
export const AC_MAXNUMTRANSCONF = 6;
export const AC_MONITORDIGITSUPPORT = 7;
export const AC_GENERATEDIGITSUPPORT = 8;
export const AC_GENERATETONEMODES = 9;
export const AC_GENERATETONEMAXNUMFREQ = 10;
export const AC_MONITORTONEMAXNUMFREQ = 11;
export const AC_MONITORTONEMAXNUMENTRIES = 12;
export const AC_DEVCAPFLAGS = 13;
export const AC_ANSWERMODES = 14;
export const AC_LINEFEATURES = 15;
export const AC_SETTABLEDEVSTATUS = 16;
export const AC_PARKSUPPORT = 17;
export const AC_CALLERIDSUPPORT = 18;
export const AC_CALLEDIDSUPPORT = 19;
export const AC_CONNECTEDIDSUPPORT = 20;
export const AC_REDIRECTIONIDSUPPORT = 21;
export const AC_REDIRECTINGIDSUPPORT = 22;
export const AC_ADDRESSCAPFLAGS = 23;
export const AC_CALLFEATURES1 = 24;
export const AC_CALLFEATURES2 = 25;
export const AC_REMOVEFROMCONFCAPS = 26;
export const AC_REMOVEFROMCONFSTATE = 27;
export const AC_TRANSFERMODES = 28;
export const AC_ADDRESSFEATURES = 29;
export const AC_PREDICTIVEAUTOTRANSFERSTATES = 30;
export const AC_MAXCALLDATASIZE = 31;
export const AC_LINEID = 32;
export const AC_ADDRESSID = 33;
export const AC_FORWARDMODES = 34;
export const AC_MAXFORWARDENTRIES = 35;
export const AC_MAXSPECIFICENTRIES = 36;
export const AC_MINFWDNUMRINGS = 37;
export const AC_MAXFWDNUMRINGS = 38;
export const AC_MAXCALLCOMPLETIONS = 39;
export const AC_CALLCOMPLETIONCONDITIONS = 40;
export const AC_CALLCOMPLETIONMODES = 41;
export const AC_PERMANENTDEVICEID = 42;
export const AC_GATHERDIGITSMINTIMEOUT = 43;
export const AC_GATHERDIGITSMAXTIMEOUT = 44;
export const AC_GENERATEDIGITMINDURATION = 45;
export const AC_GENERATEDIGITMAXDURATION = 46;
export const AC_GENERATEDIGITDEFAULTDURATION = 47;
export const ACS_PROTOCOL = 0;
export const ACS_ADDRESSDEVICESPECIFIC = 1;
export const ACS_LINEDEVICESPECIFIC = 2;
export const ACS_PROVIDERSPECIFIC = 3;
export const ACS_SWITCHSPECIFIC = 4;
export const ACS_PERMANENTDEVICEGUID = 5;
export const FDS_SUPPORTED = 0;
export const FDS_NOTSUPPORTED = 1;
export const FDS_UNKNOWN = 2;
export const FM_ASTRANSFER = 0;
export const FM_ASCONFERENCE = 1;
export const PP_OWNER = 0;
export const PP_MONITOR = 1;
export const PHSD_HANDSET = 1;
export const PHSD_SPEAKERPHONE = 2;
export const PHSD_HEADSET = 4;
export const PHSS_ONHOOK = 1;
export const PHSS_OFFHOOK_MIC_ONLY = 2;
export const PHSS_OFFHOOK_SPEAKER_ONLY = 4;
export const PHSS_OFFHOOK = 8;
export const LM_DUMMY = 1;
export const LM_OFF = 2;
export const LM_STEADY = 4;
export const LM_WINK = 8;
export const LM_FLASH = 16;
export const LM_FLUTTER = 32;
export const LM_BROKENFLUTTER = 64;
export const LM_UNKNOWN = 128;
export const PCL_HOOKSWITCHES = 0;
export const PCL_HANDSETHOOKSWITCHMODES = 1;
export const PCL_HEADSETHOOKSWITCHMODES = 2;
export const PCL_SPEAKERPHONEHOOKSWITCHMODES = 3;
export const PCL_DISPLAYNUMROWS = 4;
export const PCL_DISPLAYNUMCOLUMNS = 5;
export const PCL_NUMRINGMODES = 6;
export const PCL_NUMBUTTONLAMPS = 7;
export const PCL_GENERICPHONE = 8;
export const PCS_PHONENAME = 0;
export const PCS_PHONEINFO = 1;
export const PCS_PROVIDERINFO = 2;
export const PCB_DEVSPECIFICBUFFER = 0;
export const PBS_UP = 1;
export const PBS_DOWN = 2;
export const PBS_UNKNOWN = 4;
export const PBS_UNAVAIL = 8;
export const PBM_DUMMY = 0;
export const PBM_CALL = 1;
export const PBM_FEATURE = 2;
export const PBM_KEYPAD = 3;
export const PBM_LOCAL = 4;
export const PBM_DISPLAY = 5;
export const PBF_UNKNOWN = 0;
export const PBF_CONFERENCE = 1;
export const PBF_TRANSFER = 2;
export const PBF_DROP = 3;
export const PBF_HOLD = 4;
export const PBF_RECALL = 5;
export const PBF_DISCONNECT = 6;
export const PBF_CONNECT = 7;
export const PBF_MSGWAITON = 8;
export const PBF_MSGWAITOFF = 9;
export const PBF_SELECTRING = 10;
export const PBF_ABBREVDIAL = 11;
export const PBF_FORWARD = 12;
export const PBF_PICKUP = 13;
export const PBF_RINGAGAIN = 14;
export const PBF_PARK = 15;
export const PBF_REJECT = 16;
export const PBF_REDIRECT = 17;
export const PBF_MUTE = 18;
export const PBF_VOLUMEUP = 19;
export const PBF_VOLUMEDOWN = 20;
export const PBF_SPEAKERON = 21;
export const PBF_SPEAKEROFF = 22;
export const PBF_FLASH = 23;
export const PBF_DATAON = 24;
export const PBF_DATAOFF = 25;
export const PBF_DONOTDISTURB = 26;
export const PBF_INTERCOM = 27;
export const PBF_BRIDGEDAPP = 28;
export const PBF_BUSY = 29;
export const PBF_CALLAPP = 30;
export const PBF_DATETIME = 31;
export const PBF_DIRECTORY = 32;
export const PBF_COVER = 33;
export const PBF_CALLID = 34;
export const PBF_LASTNUM = 35;
export const PBF_NIGHTSRV = 36;
export const PBF_SENDCALLS = 37;
export const PBF_MSGINDICATOR = 38;
export const PBF_REPDIAL = 39;
export const PBF_SETREPDIAL = 40;
export const PBF_SYSTEMSPEED = 41;
export const PBF_STATIONSPEED = 42;
export const PBF_CAMPON = 43;
export const PBF_SAVEREPEAT = 44;
export const PBF_QUEUECALL = 45;
export const PBF_NONE = 46;
export const PBF_SEND = 47;
export const PT_KEYPADZERO = 0;
export const PT_KEYPADONE = 1;
export const PT_KEYPADTWO = 2;
export const PT_KEYPADTHREE = 3;
export const PT_KEYPADFOUR = 4;
export const PT_KEYPADFIVE = 5;
export const PT_KEYPADSIX = 6;
export const PT_KEYPADSEVEN = 7;
export const PT_KEYPADEIGHT = 8;
export const PT_KEYPADNINE = 9;
export const PT_KEYPADSTAR = 10;
export const PT_KEYPADPOUND = 11;
export const PT_KEYPADA = 12;
export const PT_KEYPADB = 13;
export const PT_KEYPADC = 14;
export const PT_KEYPADD = 15;
export const PT_NORMALDIALTONE = 16;
export const PT_EXTERNALDIALTONE = 17;
export const PT_BUSY = 18;
export const PT_RINGBACK = 19;
export const PT_ERRORTONE = 20;
export const PT_SILENCE = 21;
export const PE_DISPLAY = 0;
export const PE_LAMPMODE = 1;
export const PE_RINGMODE = 2;
export const PE_RINGVOLUME = 3;
export const PE_HOOKSWITCH = 4;
export const PE_CAPSCHANGE = 5;
export const PE_BUTTON = 6;
export const PE_CLOSE = 7;
export const PE_NUMBERGATHERED = 8;
export const PE_DIALING = 9;
export const PE_ANSWER = 10;
export const PE_DISCONNECT = 11;
export const PE_LASTITEM = 11;
export const TMS_IDLE = 0;
export const TMS_ACTIVE = 1;
export const TMS_PAUSED = 2;
export const TMS_LASTITEM = 2;
export const FTEC_NORMAL = 0;
export const FTEC_END_OF_FILE = 1;
export const FTEC_READ_ERROR = 2;
export const FTEC_WRITE_ERROR = 3;
export const AE_NOT_READY = 0;
export const AE_READY = 1;
export const AE_BUSY_ACD = 2;
export const AE_BUSY_INCOMING = 3;
export const AE_BUSY_OUTGOING = 4;
export const AE_UNKNOWN = 5;
export const AS_NOT_READY = 0;
export const AS_READY = 1;
export const AS_BUSY_ACD = 2;
export const AS_BUSY_INCOMING = 3;
export const AS_BUSY_OUTGOING = 4;
export const AS_UNKNOWN = 5;
export const ASE_NEW_SESSION = 0;
export const ASE_NOT_READY = 1;
export const ASE_READY = 2;
export const ASE_BUSY = 3;
export const ASE_WRAPUP = 4;
export const ASE_END = 5;
export const ASST_NOT_READY = 0;
export const ASST_READY = 1;
export const ASST_BUSY_ON_CALL = 2;
export const ASST_BUSY_WRAPUP = 3;
export const ASST_SESSION_ENDED = 4;
export const AHE_NEW_AGENTHANDLER = 0;
export const AHE_AGENTHANDLER_REMOVED = 1;
export const ACDGE_NEW_GROUP = 0;
export const ACDGE_GROUP_REMOVED = 1;
export const ACDQE_NEW_QUEUE = 0;
export const ACDQE_QUEUE_REMOVED = 1;
export const ADDRESS_TERMINAL_AVAILABLE = 0;
export const ADDRESS_TERMINAL_UNAVAILABLE = 1;
export const CALL_NEW_STREAM = 0;
export const CALL_STREAM_FAIL = 1;
export const CALL_TERMINAL_FAIL = 2;
export const CALL_STREAM_NOT_USED = 3;
export const CALL_STREAM_ACTIVE = 4;
export const CALL_STREAM_INACTIVE = 5;
export const CALL_CAUSE_UNKNOWN = 0;
export const CALL_CAUSE_BAD_DEVICE = 1;
export const CALL_CAUSE_CONNECT_FAIL = 2;
export const CALL_CAUSE_LOCAL_REQUEST = 3;
export const CALL_CAUSE_REMOTE_REQUEST = 4;
export const CALL_CAUSE_MEDIA_TIMEOUT = 5;
export const CALL_CAUSE_MEDIA_RECOVERED = 6;
export const CALL_CAUSE_QUALITY_OF_SERVICE = 7;
export const ME_ADDRESS_EVENT = 0;
export const ME_CALL_EVENT = 1;
export const ME_TSP_DATA = 2;
export const ME_PRIVATE_EVENT = 3;
export const ME_ASR_TERMINAL_EVENT = 4;
export const ME_TTS_TERMINAL_EVENT = 5;
export const ME_FILE_TERMINAL_EVENT = 6;
export const ME_TONE_TERMINAL_EVENT = 7;
export const DT_NTDS = 1;
export const DT_ILS = 2;
export const OT_CONFERENCE = 1;
export const OT_USER = 2;
export const RAS_LOCAL = 1;
export const RAS_SITE = 2;
export const RAS_REGION = 3;
export const RAS_WORLD = 4;

// Structs

/**
 * Windows.Win32.Devices.Tapi.LINEADDRESSCAPS (size: 232)
 */
export interface LINEADDRESSCAPS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwLineDeviceID: number;
  /** u32 */
  dwAddressSize: number;
  /** u32 */
  dwAddressOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwAddressSharing: number;
  /** u32 */
  dwAddressStates: number;
  /** u32 */
  dwCallInfoStates: number;
  /** u32 */
  dwCallerIDFlags: number;
  /** u32 */
  dwCalledIDFlags: number;
  /** u32 */
  dwConnectedIDFlags: number;
  /** u32 */
  dwRedirectionIDFlags: number;
  /** u32 */
  dwRedirectingIDFlags: number;
  /** u32 */
  dwCallStates: number;
  /** u32 */
  dwDialToneModes: number;
  /** u32 */
  dwBusyModes: number;
  /** u32 */
  dwSpecialInfo: number;
  /** u32 */
  dwDisconnectModes: number;
  /** u32 */
  dwMaxNumActiveCalls: number;
  /** u32 */
  dwMaxNumOnHoldCalls: number;
  /** u32 */
  dwMaxNumOnHoldPendingCalls: number;
  /** u32 */
  dwMaxNumConference: number;
  /** u32 */
  dwMaxNumTransConf: number;
  /** u32 */
  dwAddrCapFlags: number;
  /** u32 */
  dwCallFeatures: number;
  /** u32 */
  dwRemoveFromConfCaps: number;
  /** u32 */
  dwRemoveFromConfState: number;
  /** u32 */
  dwTransferModes: number;
  /** u32 */
  dwParkModes: number;
  /** u32 */
  dwForwardModes: number;
  /** u32 */
  dwMaxForwardEntries: number;
  /** u32 */
  dwMaxSpecificEntries: number;
  /** u32 */
  dwMinFwdNumRings: number;
  /** u32 */
  dwMaxFwdNumRings: number;
  /** u32 */
  dwMaxCallCompletions: number;
  /** u32 */
  dwCallCompletionConds: number;
  /** u32 */
  dwCallCompletionModes: number;
  /** u32 */
  dwNumCompletionMessages: number;
  /** u32 */
  dwCompletionMsgTextEntrySize: number;
  /** u32 */
  dwCompletionMsgTextSize: number;
  /** u32 */
  dwCompletionMsgTextOffset: number;
  /** u32 */
  dwAddressFeatures: number;
  /** u32 */
  dwPredictiveAutoTransferStates: number;
  /** u32 */
  dwNumCallTreatments: number;
  /** u32 */
  dwCallTreatmentListSize: number;
  /** u32 */
  dwCallTreatmentListOffset: number;
  /** u32 */
  dwDeviceClassesSize: number;
  /** u32 */
  dwDeviceClassesOffset: number;
  /** u32 */
  dwMaxCallDataSize: number;
  /** u32 */
  dwCallFeatures2: number;
  /** u32 */
  dwMaxNoAnswerTimeout: number;
  /** u32 */
  dwConnectedModes: number;
  /** u32 */
  dwOfferingModes: number;
  /** u32 */
  dwAvailableMediaModes: number;
}

export const sizeofLINEADDRESSCAPS = 232;

export function allocLINEADDRESSCAPS(data?: Partial<LINEADDRESSCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEADDRESSCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwLineDeviceID !== undefined) view.setUint32(12, Number(data.dwLineDeviceID), true);
  // 0x10: u32
  if (data?.dwAddressSize !== undefined) view.setUint32(16, Number(data.dwAddressSize), true);
  // 0x14: u32
  if (data?.dwAddressOffset !== undefined) view.setUint32(20, Number(data.dwAddressOffset), true);
  // 0x18: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(24, Number(data.dwDevSpecificSize), true);
  // 0x1c: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(28, Number(data.dwDevSpecificOffset), true);
  // 0x20: u32
  if (data?.dwAddressSharing !== undefined) view.setUint32(32, Number(data.dwAddressSharing), true);
  // 0x24: u32
  if (data?.dwAddressStates !== undefined) view.setUint32(36, Number(data.dwAddressStates), true);
  // 0x28: u32
  if (data?.dwCallInfoStates !== undefined) view.setUint32(40, Number(data.dwCallInfoStates), true);
  // 0x2c: u32
  if (data?.dwCallerIDFlags !== undefined) view.setUint32(44, Number(data.dwCallerIDFlags), true);
  // 0x30: u32
  if (data?.dwCalledIDFlags !== undefined) view.setUint32(48, Number(data.dwCalledIDFlags), true);
  // 0x34: u32
  if (data?.dwConnectedIDFlags !== undefined) view.setUint32(52, Number(data.dwConnectedIDFlags), true);
  // 0x38: u32
  if (data?.dwRedirectionIDFlags !== undefined) view.setUint32(56, Number(data.dwRedirectionIDFlags), true);
  // 0x3c: u32
  if (data?.dwRedirectingIDFlags !== undefined) view.setUint32(60, Number(data.dwRedirectingIDFlags), true);
  // 0x40: u32
  if (data?.dwCallStates !== undefined) view.setUint32(64, Number(data.dwCallStates), true);
  // 0x44: u32
  if (data?.dwDialToneModes !== undefined) view.setUint32(68, Number(data.dwDialToneModes), true);
  // 0x48: u32
  if (data?.dwBusyModes !== undefined) view.setUint32(72, Number(data.dwBusyModes), true);
  // 0x4c: u32
  if (data?.dwSpecialInfo !== undefined) view.setUint32(76, Number(data.dwSpecialInfo), true);
  // 0x50: u32
  if (data?.dwDisconnectModes !== undefined) view.setUint32(80, Number(data.dwDisconnectModes), true);
  // 0x54: u32
  if (data?.dwMaxNumActiveCalls !== undefined) view.setUint32(84, Number(data.dwMaxNumActiveCalls), true);
  // 0x58: u32
  if (data?.dwMaxNumOnHoldCalls !== undefined) view.setUint32(88, Number(data.dwMaxNumOnHoldCalls), true);
  // 0x5c: u32
  if (data?.dwMaxNumOnHoldPendingCalls !== undefined) view.setUint32(92, Number(data.dwMaxNumOnHoldPendingCalls), true);
  // 0x60: u32
  if (data?.dwMaxNumConference !== undefined) view.setUint32(96, Number(data.dwMaxNumConference), true);
  // 0x64: u32
  if (data?.dwMaxNumTransConf !== undefined) view.setUint32(100, Number(data.dwMaxNumTransConf), true);
  // 0x68: u32
  if (data?.dwAddrCapFlags !== undefined) view.setUint32(104, Number(data.dwAddrCapFlags), true);
  // 0x6c: u32
  if (data?.dwCallFeatures !== undefined) view.setUint32(108, Number(data.dwCallFeatures), true);
  // 0x70: u32
  if (data?.dwRemoveFromConfCaps !== undefined) view.setUint32(112, Number(data.dwRemoveFromConfCaps), true);
  // 0x74: u32
  if (data?.dwRemoveFromConfState !== undefined) view.setUint32(116, Number(data.dwRemoveFromConfState), true);
  // 0x78: u32
  if (data?.dwTransferModes !== undefined) view.setUint32(120, Number(data.dwTransferModes), true);
  // 0x7c: u32
  if (data?.dwParkModes !== undefined) view.setUint32(124, Number(data.dwParkModes), true);
  // 0x80: u32
  if (data?.dwForwardModes !== undefined) view.setUint32(128, Number(data.dwForwardModes), true);
  // 0x84: u32
  if (data?.dwMaxForwardEntries !== undefined) view.setUint32(132, Number(data.dwMaxForwardEntries), true);
  // 0x88: u32
  if (data?.dwMaxSpecificEntries !== undefined) view.setUint32(136, Number(data.dwMaxSpecificEntries), true);
  // 0x8c: u32
  if (data?.dwMinFwdNumRings !== undefined) view.setUint32(140, Number(data.dwMinFwdNumRings), true);
  // 0x90: u32
  if (data?.dwMaxFwdNumRings !== undefined) view.setUint32(144, Number(data.dwMaxFwdNumRings), true);
  // 0x94: u32
  if (data?.dwMaxCallCompletions !== undefined) view.setUint32(148, Number(data.dwMaxCallCompletions), true);
  // 0x98: u32
  if (data?.dwCallCompletionConds !== undefined) view.setUint32(152, Number(data.dwCallCompletionConds), true);
  // 0x9c: u32
  if (data?.dwCallCompletionModes !== undefined) view.setUint32(156, Number(data.dwCallCompletionModes), true);
  // 0xa0: u32
  if (data?.dwNumCompletionMessages !== undefined) view.setUint32(160, Number(data.dwNumCompletionMessages), true);
  // 0xa4: u32
  if (data?.dwCompletionMsgTextEntrySize !== undefined) view.setUint32(164, Number(data.dwCompletionMsgTextEntrySize), true);
  // 0xa8: u32
  if (data?.dwCompletionMsgTextSize !== undefined) view.setUint32(168, Number(data.dwCompletionMsgTextSize), true);
  // 0xac: u32
  if (data?.dwCompletionMsgTextOffset !== undefined) view.setUint32(172, Number(data.dwCompletionMsgTextOffset), true);
  // 0xb0: u32
  if (data?.dwAddressFeatures !== undefined) view.setUint32(176, Number(data.dwAddressFeatures), true);
  // 0xb4: u32
  if (data?.dwPredictiveAutoTransferStates !== undefined) view.setUint32(180, Number(data.dwPredictiveAutoTransferStates), true);
  // 0xb8: u32
  if (data?.dwNumCallTreatments !== undefined) view.setUint32(184, Number(data.dwNumCallTreatments), true);
  // 0xbc: u32
  if (data?.dwCallTreatmentListSize !== undefined) view.setUint32(188, Number(data.dwCallTreatmentListSize), true);
  // 0xc0: u32
  if (data?.dwCallTreatmentListOffset !== undefined) view.setUint32(192, Number(data.dwCallTreatmentListOffset), true);
  // 0xc4: u32
  if (data?.dwDeviceClassesSize !== undefined) view.setUint32(196, Number(data.dwDeviceClassesSize), true);
  // 0xc8: u32
  if (data?.dwDeviceClassesOffset !== undefined) view.setUint32(200, Number(data.dwDeviceClassesOffset), true);
  // 0xcc: u32
  if (data?.dwMaxCallDataSize !== undefined) view.setUint32(204, Number(data.dwMaxCallDataSize), true);
  // 0xd0: u32
  if (data?.dwCallFeatures2 !== undefined) view.setUint32(208, Number(data.dwCallFeatures2), true);
  // 0xd4: u32
  if (data?.dwMaxNoAnswerTimeout !== undefined) view.setUint32(212, Number(data.dwMaxNoAnswerTimeout), true);
  // 0xd8: u32
  if (data?.dwConnectedModes !== undefined) view.setUint32(216, Number(data.dwConnectedModes), true);
  // 0xdc: u32
  if (data?.dwOfferingModes !== undefined) view.setUint32(220, Number(data.dwOfferingModes), true);
  // 0xe0: u32
  if (data?.dwAvailableMediaModes !== undefined) view.setUint32(224, Number(data.dwAvailableMediaModes), true);
  // 0xe4: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEADDRESSSTATUS (size: 64)
 */
export interface LINEADDRESSSTATUS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumInUse: number;
  /** u32 */
  dwNumActiveCalls: number;
  /** u32 */
  dwNumOnHoldCalls: number;
  /** u32 */
  dwNumOnHoldPendCalls: number;
  /** u32 */
  dwAddressFeatures: number;
  /** u32 */
  dwNumRingsNoAnswer: number;
  /** u32 */
  dwForwardNumEntries: number;
  /** u32 */
  dwForwardSize: number;
  /** u32 */
  dwForwardOffset: number;
  /** u32 */
  dwTerminalModesSize: number;
  /** u32 */
  dwTerminalModesOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
}

export const sizeofLINEADDRESSSTATUS = 64;

export function allocLINEADDRESSSTATUS(data?: Partial<LINEADDRESSSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEADDRESSSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumInUse !== undefined) view.setUint32(12, Number(data.dwNumInUse), true);
  // 0x10: u32
  if (data?.dwNumActiveCalls !== undefined) view.setUint32(16, Number(data.dwNumActiveCalls), true);
  // 0x14: u32
  if (data?.dwNumOnHoldCalls !== undefined) view.setUint32(20, Number(data.dwNumOnHoldCalls), true);
  // 0x18: u32
  if (data?.dwNumOnHoldPendCalls !== undefined) view.setUint32(24, Number(data.dwNumOnHoldPendCalls), true);
  // 0x1c: u32
  if (data?.dwAddressFeatures !== undefined) view.setUint32(28, Number(data.dwAddressFeatures), true);
  // 0x20: u32
  if (data?.dwNumRingsNoAnswer !== undefined) view.setUint32(32, Number(data.dwNumRingsNoAnswer), true);
  // 0x24: u32
  if (data?.dwForwardNumEntries !== undefined) view.setUint32(36, Number(data.dwForwardNumEntries), true);
  // 0x28: u32
  if (data?.dwForwardSize !== undefined) view.setUint32(40, Number(data.dwForwardSize), true);
  // 0x2c: u32
  if (data?.dwForwardOffset !== undefined) view.setUint32(44, Number(data.dwForwardOffset), true);
  // 0x30: u32
  if (data?.dwTerminalModesSize !== undefined) view.setUint32(48, Number(data.dwTerminalModesSize), true);
  // 0x34: u32
  if (data?.dwTerminalModesOffset !== undefined) view.setUint32(52, Number(data.dwTerminalModesOffset), true);
  // 0x38: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(56, Number(data.dwDevSpecificSize), true);
  // 0x3c: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(60, Number(data.dwDevSpecificOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTACTIVITYENTRY (size: 16)
 */
export interface LINEAGENTACTIVITYENTRY {
  /** u32 */
  dwID: number;
  /** u32 */
  dwNameSize: number;
  /** u32 */
  dwNameOffset: number;
}

export const sizeofLINEAGENTACTIVITYENTRY = 16;

export function allocLINEAGENTACTIVITYENTRY(data?: Partial<LINEAGENTACTIVITYENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTACTIVITYENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwID !== undefined) view.setUint32(0, Number(data.dwID), true);
  // 0x04: u32
  if (data?.dwNameSize !== undefined) view.setUint32(4, Number(data.dwNameSize), true);
  // 0x08: u32
  if (data?.dwNameOffset !== undefined) view.setUint32(8, Number(data.dwNameOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTACTIVITYLIST (size: 24)
 */
export interface LINEAGENTACTIVITYLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwListSize: number;
  /** u32 */
  dwListOffset: number;
}

export const sizeofLINEAGENTACTIVITYLIST = 24;

export function allocLINEAGENTACTIVITYLIST(data?: Partial<LINEAGENTACTIVITYLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTACTIVITYLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwListSize !== undefined) view.setUint32(16, Number(data.dwListSize), true);
  // 0x14: u32
  if (data?.dwListOffset !== undefined) view.setUint32(20, Number(data.dwListOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTCAPS (size: 64)
 */
export interface LINEAGENTCAPS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwAgentHandlerInfoSize: number;
  /** u32 */
  dwAgentHandlerInfoOffset: number;
  /** u32 */
  dwCapsVersion: number;
  /** u32 */
  dwFeatures: number;
  /** u32 */
  dwStates: number;
  /** u32 */
  dwNextStates: number;
  /** u32 */
  dwMaxNumGroupEntries: number;
  /** u32 */
  dwAgentStatusMessages: number;
  /** u32 */
  dwNumAgentExtensionIDs: number;
  /** u32 */
  dwAgentExtensionIDListSize: number;
  /** u32 */
  dwAgentExtensionIDListOffset: number;
  /** System.Guid */
  ProxyGUID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLINEAGENTCAPS = 64;

export function allocLINEAGENTCAPS(data?: Partial<LINEAGENTCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwAgentHandlerInfoSize !== undefined) view.setUint32(12, Number(data.dwAgentHandlerInfoSize), true);
  // 0x10: u32
  if (data?.dwAgentHandlerInfoOffset !== undefined) view.setUint32(16, Number(data.dwAgentHandlerInfoOffset), true);
  // 0x14: u32
  if (data?.dwCapsVersion !== undefined) view.setUint32(20, Number(data.dwCapsVersion), true);
  // 0x18: u32
  if (data?.dwFeatures !== undefined) view.setUint32(24, Number(data.dwFeatures), true);
  // 0x1c: u32
  if (data?.dwStates !== undefined) view.setUint32(28, Number(data.dwStates), true);
  // 0x20: u32
  if (data?.dwNextStates !== undefined) view.setUint32(32, Number(data.dwNextStates), true);
  // 0x24: u32
  if (data?.dwMaxNumGroupEntries !== undefined) view.setUint32(36, Number(data.dwMaxNumGroupEntries), true);
  // 0x28: u32
  if (data?.dwAgentStatusMessages !== undefined) view.setUint32(40, Number(data.dwAgentStatusMessages), true);
  // 0x2c: u32
  if (data?.dwNumAgentExtensionIDs !== undefined) view.setUint32(44, Number(data.dwNumAgentExtensionIDs), true);
  // 0x30: u32
  if (data?.dwAgentExtensionIDListSize !== undefined) view.setUint32(48, Number(data.dwAgentExtensionIDListSize), true);
  // 0x34: u32
  if (data?.dwAgentExtensionIDListOffset !== undefined) view.setUint32(52, Number(data.dwAgentExtensionIDListOffset), true);
  // 0x38: pointer
  if (data?.ProxyGUID !== undefined) view.setBigUint64(56, data.ProxyGUID === null ? 0n : BigInt(util.toPointer(data.ProxyGUID)), true);
  return buf;
}

/**
 * _GroupID_e__Struct (size: 16)
 */
export interface _GroupID_e__Struct {
  /** u32 */
  dwGroupID1: number;
  /** u32 */
  dwGroupID2: number;
  /** u32 */
  dwGroupID3: number;
  /** u32 */
  dwGroupID4: number;
}

export const sizeof_GroupID_e__Struct = 16;

export function alloc_GroupID_e__Struct(data?: Partial<_GroupID_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_GroupID_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroupID1 !== undefined) view.setUint32(0, Number(data.dwGroupID1), true);
  // 0x04: u32
  if (data?.dwGroupID2 !== undefined) view.setUint32(4, Number(data.dwGroupID2), true);
  // 0x08: u32
  if (data?.dwGroupID3 !== undefined) view.setUint32(8, Number(data.dwGroupID3), true);
  // 0x0c: u32
  if (data?.dwGroupID4 !== undefined) view.setUint32(12, Number(data.dwGroupID4), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTGROUPENTRY (size: 16)
 */
export interface LINEAGENTGROUPENTRY {
  /** _GroupID_e__Struct */
  GroupID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNameSize: number;
  /** u32 */
  dwNameOffset: number;
}

export const sizeofLINEAGENTGROUPENTRY = 16;

export function allocLINEAGENTGROUPENTRY(data?: Partial<LINEAGENTGROUPENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTGROUPENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(0, data.GroupID === null ? 0n : BigInt(util.toPointer(data.GroupID)), true);
  // 0x08: u32
  if (data?.dwNameSize !== undefined) view.setUint32(8, Number(data.dwNameSize), true);
  // 0x0c: u32
  if (data?.dwNameOffset !== undefined) view.setUint32(12, Number(data.dwNameOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTGROUPLIST (size: 24)
 */
export interface LINEAGENTGROUPLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwListSize: number;
  /** u32 */
  dwListOffset: number;
}

export const sizeofLINEAGENTGROUPLIST = 24;

export function allocLINEAGENTGROUPLIST(data?: Partial<LINEAGENTGROUPLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTGROUPLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwListSize !== undefined) view.setUint32(16, Number(data.dwListSize), true);
  // 0x14: u32
  if (data?.dwListOffset !== undefined) view.setUint32(20, Number(data.dwListOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTSTATUS (size: 56)
 */
export interface LINEAGENTSTATUS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwGroupListSize: number;
  /** u32 */
  dwGroupListOffset: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwNextState: number;
  /** u32 */
  dwActivityID: number;
  /** u32 */
  dwActivitySize: number;
  /** u32 */
  dwActivityOffset: number;
  /** u32 */
  dwAgentFeatures: number;
  /** u32 */
  dwValidStates: number;
  /** u32 */
  dwValidNextStates: number;
}

export const sizeofLINEAGENTSTATUS = 56;

export function allocLINEAGENTSTATUS(data?: Partial<LINEAGENTSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwGroupListSize !== undefined) view.setUint32(16, Number(data.dwGroupListSize), true);
  // 0x14: u32
  if (data?.dwGroupListOffset !== undefined) view.setUint32(20, Number(data.dwGroupListOffset), true);
  // 0x18: u32
  if (data?.dwState !== undefined) view.setUint32(24, Number(data.dwState), true);
  // 0x1c: u32
  if (data?.dwNextState !== undefined) view.setUint32(28, Number(data.dwNextState), true);
  // 0x20: u32
  if (data?.dwActivityID !== undefined) view.setUint32(32, Number(data.dwActivityID), true);
  // 0x24: u32
  if (data?.dwActivitySize !== undefined) view.setUint32(36, Number(data.dwActivitySize), true);
  // 0x28: u32
  if (data?.dwActivityOffset !== undefined) view.setUint32(40, Number(data.dwActivityOffset), true);
  // 0x2c: u32
  if (data?.dwAgentFeatures !== undefined) view.setUint32(44, Number(data.dwAgentFeatures), true);
  // 0x30: u32
  if (data?.dwValidStates !== undefined) view.setUint32(48, Number(data.dwValidStates), true);
  // 0x34: u32
  if (data?.dwValidNextStates !== undefined) view.setUint32(52, Number(data.dwValidNextStates), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAPPINFO (size: 40)
 */
export interface LINEAPPINFO {
  /** u32 */
  dwMachineNameSize: number;
  /** u32 */
  dwMachineNameOffset: number;
  /** u32 */
  dwUserNameSize: number;
  /** u32 */
  dwUserNameOffset: number;
  /** u32 */
  dwModuleFilenameSize: number;
  /** u32 */
  dwModuleFilenameOffset: number;
  /** u32 */
  dwFriendlyNameSize: number;
  /** u32 */
  dwFriendlyNameOffset: number;
  /** u32 */
  dwMediaModes: number;
  /** u32 */
  dwAddressID: number;
}

export const sizeofLINEAPPINFO = 40;

export function allocLINEAPPINFO(data?: Partial<LINEAPPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAPPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMachineNameSize !== undefined) view.setUint32(0, Number(data.dwMachineNameSize), true);
  // 0x04: u32
  if (data?.dwMachineNameOffset !== undefined) view.setUint32(4, Number(data.dwMachineNameOffset), true);
  // 0x08: u32
  if (data?.dwUserNameSize !== undefined) view.setUint32(8, Number(data.dwUserNameSize), true);
  // 0x0c: u32
  if (data?.dwUserNameOffset !== undefined) view.setUint32(12, Number(data.dwUserNameOffset), true);
  // 0x10: u32
  if (data?.dwModuleFilenameSize !== undefined) view.setUint32(16, Number(data.dwModuleFilenameSize), true);
  // 0x14: u32
  if (data?.dwModuleFilenameOffset !== undefined) view.setUint32(20, Number(data.dwModuleFilenameOffset), true);
  // 0x18: u32
  if (data?.dwFriendlyNameSize !== undefined) view.setUint32(24, Number(data.dwFriendlyNameSize), true);
  // 0x1c: u32
  if (data?.dwFriendlyNameOffset !== undefined) view.setUint32(28, Number(data.dwFriendlyNameOffset), true);
  // 0x20: u32
  if (data?.dwMediaModes !== undefined) view.setUint32(32, Number(data.dwMediaModes), true);
  // 0x24: u32
  if (data?.dwAddressID !== undefined) view.setUint32(36, Number(data.dwAddressID), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTENTRY (size: 32)
 */
export interface LINEAGENTENTRY {
  /** u32 */
  hAgent: number;
  /** u32 */
  dwNameSize: number;
  /** u32 */
  dwNameOffset: number;
  /** u32 */
  dwIDSize: number;
  /** u32 */
  dwIDOffset: number;
  /** u32 */
  dwPINSize: number;
  /** u32 */
  dwPINOffset: number;
}

export const sizeofLINEAGENTENTRY = 32;

export function allocLINEAGENTENTRY(data?: Partial<LINEAGENTENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hAgent !== undefined) view.setUint32(0, Number(data.hAgent), true);
  // 0x04: u32
  if (data?.dwNameSize !== undefined) view.setUint32(4, Number(data.dwNameSize), true);
  // 0x08: u32
  if (data?.dwNameOffset !== undefined) view.setUint32(8, Number(data.dwNameOffset), true);
  // 0x0c: u32
  if (data?.dwIDSize !== undefined) view.setUint32(12, Number(data.dwIDSize), true);
  // 0x10: u32
  if (data?.dwIDOffset !== undefined) view.setUint32(16, Number(data.dwIDOffset), true);
  // 0x14: u32
  if (data?.dwPINSize !== undefined) view.setUint32(20, Number(data.dwPINSize), true);
  // 0x18: u32
  if (data?.dwPINOffset !== undefined) view.setUint32(24, Number(data.dwPINOffset), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTLIST (size: 24)
 */
export interface LINEAGENTLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwListSize: number;
  /** u32 */
  dwListOffset: number;
}

export const sizeofLINEAGENTLIST = 24;

export function allocLINEAGENTLIST(data?: Partial<LINEAGENTLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwListSize !== undefined) view.setUint32(16, Number(data.dwListSize), true);
  // 0x14: u32
  if (data?.dwListOffset !== undefined) view.setUint32(20, Number(data.dwListOffset), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.CY (size: 16)
 */
export interface CY {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: Deno.PointerValue;
}

export const sizeofCY = 16;

export function allocCY(data?: Partial<CY>): Uint8Array {
  const buf = new Uint8Array(sizeofCY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, BigInt(data.int64), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTINFO (size: 56)
 */
export interface LINEAGENTINFO {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwAgentState: number;
  /** u32 */
  dwNextAgentState: number;
  /** u32 */
  dwMeasurementPeriod: number;
  /** Windows.Win32.System.Com.CY */
  cyOverallCallRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumberOfACDCalls: number;
  /** u32 */
  dwNumberOfIncomingCalls: number;
  /** u32 */
  dwNumberOfOutgoingCalls: number;
  /** u32 */
  dwTotalACDTalkTime: number;
  /** u32 */
  dwTotalACDCallTime: number;
  /** u32 */
  dwTotalACDWrapUpTime: number;
}

export const sizeofLINEAGENTINFO = 56;

export function allocLINEAGENTINFO(data?: Partial<LINEAGENTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwAgentState !== undefined) view.setUint32(12, Number(data.dwAgentState), true);
  // 0x10: u32
  if (data?.dwNextAgentState !== undefined) view.setUint32(16, Number(data.dwNextAgentState), true);
  // 0x14: u32
  if (data?.dwMeasurementPeriod !== undefined) view.setUint32(20, Number(data.dwMeasurementPeriod), true);
  // 0x18: pointer
  if (data?.cyOverallCallRate !== undefined) view.setBigUint64(24, data.cyOverallCallRate === null ? 0n : BigInt(util.toPointer(data.cyOverallCallRate)), true);
  // 0x20: u32
  if (data?.dwNumberOfACDCalls !== undefined) view.setUint32(32, Number(data.dwNumberOfACDCalls), true);
  // 0x24: u32
  if (data?.dwNumberOfIncomingCalls !== undefined) view.setUint32(36, Number(data.dwNumberOfIncomingCalls), true);
  // 0x28: u32
  if (data?.dwNumberOfOutgoingCalls !== undefined) view.setUint32(40, Number(data.dwNumberOfOutgoingCalls), true);
  // 0x2c: u32
  if (data?.dwTotalACDTalkTime !== undefined) view.setUint32(44, Number(data.dwTotalACDTalkTime), true);
  // 0x30: u32
  if (data?.dwTotalACDCallTime !== undefined) view.setUint32(48, Number(data.dwTotalACDCallTime), true);
  // 0x34: u32
  if (data?.dwTotalACDWrapUpTime !== undefined) view.setUint32(52, Number(data.dwTotalACDWrapUpTime), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTSESSIONENTRY (size: 24)
 */
export interface LINEAGENTSESSIONENTRY {
  /** u32 */
  hAgentSession: number;
  /** u32 */
  hAgent: number;
  /** System.Guid */
  GroupID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwWorkingAddressID: number;
}

export const sizeofLINEAGENTSESSIONENTRY = 24;

export function allocLINEAGENTSESSIONENTRY(data?: Partial<LINEAGENTSESSIONENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTSESSIONENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hAgentSession !== undefined) view.setUint32(0, Number(data.hAgentSession), true);
  // 0x04: u32
  if (data?.hAgent !== undefined) view.setUint32(4, Number(data.hAgent), true);
  // 0x08: pointer
  if (data?.GroupID !== undefined) view.setBigUint64(8, data.GroupID === null ? 0n : BigInt(util.toPointer(data.GroupID)), true);
  // 0x10: u32
  if (data?.dwWorkingAddressID !== undefined) view.setUint32(16, Number(data.dwWorkingAddressID), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTSESSIONLIST (size: 24)
 */
export interface LINEAGENTSESSIONLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwListSize: number;
  /** u32 */
  dwListOffset: number;
}

export const sizeofLINEAGENTSESSIONLIST = 24;

export function allocLINEAGENTSESSIONLIST(data?: Partial<LINEAGENTSESSIONLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTSESSIONLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwListSize !== undefined) view.setUint32(16, Number(data.dwListSize), true);
  // 0x14: u32
  if (data?.dwListOffset !== undefined) view.setUint32(20, Number(data.dwListOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEAGENTSESSIONINFO (size: 80)
 */
export interface LINEAGENTSESSIONINFO {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwAgentSessionState: number;
  /** u32 */
  dwNextAgentSessionState: number;
  /** f64 */
  dateSessionStartTime: number;
  /** u32 */
  dwSessionDuration: number;
  /** u32 */
  dwNumberOfCalls: number;
  /** u32 */
  dwTotalTalkTime: number;
  /** u32 */
  dwAverageTalkTime: number;
  /** u32 */
  dwTotalCallTime: number;
  /** u32 */
  dwAverageCallTime: number;
  /** u32 */
  dwTotalWrapUpTime: number;
  /** u32 */
  dwAverageWrapUpTime: number;
  /** Windows.Win32.System.Com.CY */
  cyACDCallRate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwLongestTimeToAnswer: number;
  /** u32 */
  dwAverageTimeToAnswer: number;
}

export const sizeofLINEAGENTSESSIONINFO = 80;

export function allocLINEAGENTSESSIONINFO(data?: Partial<LINEAGENTSESSIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEAGENTSESSIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwAgentSessionState !== undefined) view.setUint32(12, Number(data.dwAgentSessionState), true);
  // 0x10: u32
  if (data?.dwNextAgentSessionState !== undefined) view.setUint32(16, Number(data.dwNextAgentSessionState), true);
  // 0x14: pad4
  // 0x18: f64
  if (data?.dateSessionStartTime !== undefined) view.setFloat64(24, Number(data.dateSessionStartTime), true);
  // 0x20: u32
  if (data?.dwSessionDuration !== undefined) view.setUint32(32, Number(data.dwSessionDuration), true);
  // 0x24: u32
  if (data?.dwNumberOfCalls !== undefined) view.setUint32(36, Number(data.dwNumberOfCalls), true);
  // 0x28: u32
  if (data?.dwTotalTalkTime !== undefined) view.setUint32(40, Number(data.dwTotalTalkTime), true);
  // 0x2c: u32
  if (data?.dwAverageTalkTime !== undefined) view.setUint32(44, Number(data.dwAverageTalkTime), true);
  // 0x30: u32
  if (data?.dwTotalCallTime !== undefined) view.setUint32(48, Number(data.dwTotalCallTime), true);
  // 0x34: u32
  if (data?.dwAverageCallTime !== undefined) view.setUint32(52, Number(data.dwAverageCallTime), true);
  // 0x38: u32
  if (data?.dwTotalWrapUpTime !== undefined) view.setUint32(56, Number(data.dwTotalWrapUpTime), true);
  // 0x3c: u32
  if (data?.dwAverageWrapUpTime !== undefined) view.setUint32(60, Number(data.dwAverageWrapUpTime), true);
  // 0x40: pointer
  if (data?.cyACDCallRate !== undefined) view.setBigUint64(64, data.cyACDCallRate === null ? 0n : BigInt(util.toPointer(data.cyACDCallRate)), true);
  // 0x48: u32
  if (data?.dwLongestTimeToAnswer !== undefined) view.setUint32(72, Number(data.dwLongestTimeToAnswer), true);
  // 0x4c: u32
  if (data?.dwAverageTimeToAnswer !== undefined) view.setUint32(76, Number(data.dwAverageTimeToAnswer), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEQUEUEENTRY (size: 16)
 */
export interface LINEQUEUEENTRY {
  /** u32 */
  dwQueueID: number;
  /** u32 */
  dwNameSize: number;
  /** u32 */
  dwNameOffset: number;
}

export const sizeofLINEQUEUEENTRY = 16;

export function allocLINEQUEUEENTRY(data?: Partial<LINEQUEUEENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEQUEUEENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwQueueID !== undefined) view.setUint32(0, Number(data.dwQueueID), true);
  // 0x04: u32
  if (data?.dwNameSize !== undefined) view.setUint32(4, Number(data.dwNameSize), true);
  // 0x08: u32
  if (data?.dwNameOffset !== undefined) view.setUint32(8, Number(data.dwNameOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEQUEUELIST (size: 24)
 */
export interface LINEQUEUELIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwListSize: number;
  /** u32 */
  dwListOffset: number;
}

export const sizeofLINEQUEUELIST = 24;

export function allocLINEQUEUELIST(data?: Partial<LINEQUEUELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEQUEUELIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwListSize !== undefined) view.setUint32(16, Number(data.dwListSize), true);
  // 0x14: u32
  if (data?.dwListOffset !== undefined) view.setUint32(20, Number(data.dwListOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEQUEUEINFO (size: 56)
 */
export interface LINEQUEUEINFO {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwMeasurementPeriod: number;
  /** u32 */
  dwTotalCallsQueued: number;
  /** u32 */
  dwCurrentCallsQueued: number;
  /** u32 */
  dwTotalCallsAbandoned: number;
  /** u32 */
  dwTotalCallsFlowedIn: number;
  /** u32 */
  dwTotalCallsFlowedOut: number;
  /** u32 */
  dwLongestEverWaitTime: number;
  /** u32 */
  dwCurrentLongestWaitTime: number;
  /** u32 */
  dwAverageWaitTime: number;
  /** u32 */
  dwFinalDisposition: number;
}

export const sizeofLINEQUEUEINFO = 56;

export function allocLINEQUEUEINFO(data?: Partial<LINEQUEUEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEQUEUEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwMeasurementPeriod !== undefined) view.setUint32(12, Number(data.dwMeasurementPeriod), true);
  // 0x10: u32
  if (data?.dwTotalCallsQueued !== undefined) view.setUint32(16, Number(data.dwTotalCallsQueued), true);
  // 0x14: u32
  if (data?.dwCurrentCallsQueued !== undefined) view.setUint32(20, Number(data.dwCurrentCallsQueued), true);
  // 0x18: u32
  if (data?.dwTotalCallsAbandoned !== undefined) view.setUint32(24, Number(data.dwTotalCallsAbandoned), true);
  // 0x1c: u32
  if (data?.dwTotalCallsFlowedIn !== undefined) view.setUint32(28, Number(data.dwTotalCallsFlowedIn), true);
  // 0x20: u32
  if (data?.dwTotalCallsFlowedOut !== undefined) view.setUint32(32, Number(data.dwTotalCallsFlowedOut), true);
  // 0x24: u32
  if (data?.dwLongestEverWaitTime !== undefined) view.setUint32(36, Number(data.dwLongestEverWaitTime), true);
  // 0x28: u32
  if (data?.dwCurrentLongestWaitTime !== undefined) view.setUint32(40, Number(data.dwCurrentLongestWaitTime), true);
  // 0x2c: u32
  if (data?.dwAverageWaitTime !== undefined) view.setUint32(44, Number(data.dwAverageWaitTime), true);
  // 0x30: u32
  if (data?.dwFinalDisposition !== undefined) view.setUint32(48, Number(data.dwFinalDisposition), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEPROXYREQUESTLIST (size: 24)
 */
export interface LINEPROXYREQUESTLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumEntries: number;
  /** u32 */
  dwListSize: number;
  /** u32 */
  dwListOffset: number;
}

export const sizeofLINEPROXYREQUESTLIST = 24;

export function allocLINEPROXYREQUESTLIST(data?: Partial<LINEPROXYREQUESTLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEPROXYREQUESTLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(12, Number(data.dwNumEntries), true);
  // 0x10: u32
  if (data?.dwListSize !== undefined) view.setUint32(16, Number(data.dwListSize), true);
  // 0x14: u32
  if (data?.dwListOffset !== undefined) view.setUint32(20, Number(data.dwListOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEDIALPARAMS (size: 16)
 */
export interface LINEDIALPARAMS {
  /** u32 */
  dwDialPause: number;
  /** u32 */
  dwDialSpeed: number;
  /** u32 */
  dwDigitDuration: number;
  /** u32 */
  dwWaitForDialtone: number;
}

export const sizeofLINEDIALPARAMS = 16;

export function allocLINEDIALPARAMS(data?: Partial<LINEDIALPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEDIALPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDialPause !== undefined) view.setUint32(0, Number(data.dwDialPause), true);
  // 0x04: u32
  if (data?.dwDialSpeed !== undefined) view.setUint32(4, Number(data.dwDialSpeed), true);
  // 0x08: u32
  if (data?.dwDigitDuration !== undefined) view.setUint32(8, Number(data.dwDigitDuration), true);
  // 0x0c: u32
  if (data?.dwWaitForDialtone !== undefined) view.setUint32(12, Number(data.dwWaitForDialtone), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECALLINFO (size: 320)
 */
export interface LINECALLINFO {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  hLine: number;
  /** u32 */
  dwLineDeviceID: number;
  /** u32 */
  dwAddressID: number;
  /** u32 */
  dwBearerMode: number;
  /** u32 */
  dwRate: number;
  /** u32 */
  dwMediaMode: number;
  /** u32 */
  dwAppSpecific: number;
  /** u32 */
  dwCallID: number;
  /** u32 */
  dwRelatedCallID: number;
  /** u32 */
  dwCallParamFlags: number;
  /** u32 */
  dwCallStates: number;
  /** u32 */
  dwMonitorDigitModes: number;
  /** u32 */
  dwMonitorMediaModes: number;
  /** Windows.Win32.Devices.Tapi.LINEDIALPARAMS */
  DialParams: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOrigin: number;
  /** u32 */
  dwReason: number;
  /** u32 */
  dwCompletionID: number;
  /** u32 */
  dwNumOwners: number;
  /** u32 */
  dwNumMonitors: number;
  /** u32 */
  dwCountryCode: number;
  /** u32 */
  dwTrunk: number;
  /** u32 */
  dwCallerIDFlags: number;
  /** u32 */
  dwCallerIDSize: number;
  /** u32 */
  dwCallerIDOffset: number;
  /** u32 */
  dwCallerIDNameSize: number;
  /** u32 */
  dwCallerIDNameOffset: number;
  /** u32 */
  dwCalledIDFlags: number;
  /** u32 */
  dwCalledIDSize: number;
  /** u32 */
  dwCalledIDOffset: number;
  /** u32 */
  dwCalledIDNameSize: number;
  /** u32 */
  dwCalledIDNameOffset: number;
  /** u32 */
  dwConnectedIDFlags: number;
  /** u32 */
  dwConnectedIDSize: number;
  /** u32 */
  dwConnectedIDOffset: number;
  /** u32 */
  dwConnectedIDNameSize: number;
  /** u32 */
  dwConnectedIDNameOffset: number;
  /** u32 */
  dwRedirectionIDFlags: number;
  /** u32 */
  dwRedirectionIDSize: number;
  /** u32 */
  dwRedirectionIDOffset: number;
  /** u32 */
  dwRedirectionIDNameSize: number;
  /** u32 */
  dwRedirectionIDNameOffset: number;
  /** u32 */
  dwRedirectingIDFlags: number;
  /** u32 */
  dwRedirectingIDSize: number;
  /** u32 */
  dwRedirectingIDOffset: number;
  /** u32 */
  dwRedirectingIDNameSize: number;
  /** u32 */
  dwRedirectingIDNameOffset: number;
  /** u32 */
  dwAppNameSize: number;
  /** u32 */
  dwAppNameOffset: number;
  /** u32 */
  dwDisplayableAddressSize: number;
  /** u32 */
  dwDisplayableAddressOffset: number;
  /** u32 */
  dwCalledPartySize: number;
  /** u32 */
  dwCalledPartyOffset: number;
  /** u32 */
  dwCommentSize: number;
  /** u32 */
  dwCommentOffset: number;
  /** u32 */
  dwDisplaySize: number;
  /** u32 */
  dwDisplayOffset: number;
  /** u32 */
  dwUserUserInfoSize: number;
  /** u32 */
  dwUserUserInfoOffset: number;
  /** u32 */
  dwHighLevelCompSize: number;
  /** u32 */
  dwHighLevelCompOffset: number;
  /** u32 */
  dwLowLevelCompSize: number;
  /** u32 */
  dwLowLevelCompOffset: number;
  /** u32 */
  dwChargingInfoSize: number;
  /** u32 */
  dwChargingInfoOffset: number;
  /** u32 */
  dwTerminalModesSize: number;
  /** u32 */
  dwTerminalModesOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwCallTreatment: number;
  /** u32 */
  dwCallDataSize: number;
  /** u32 */
  dwCallDataOffset: number;
  /** u32 */
  dwSendingFlowspecSize: number;
  /** u32 */
  dwSendingFlowspecOffset: number;
  /** u32 */
  dwReceivingFlowspecSize: number;
  /** u32 */
  dwReceivingFlowspecOffset: number;
}

export const sizeofLINECALLINFO = 320;

export function allocLINECALLINFO(data?: Partial<LINECALLINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECALLINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.hLine !== undefined) view.setUint32(12, Number(data.hLine), true);
  // 0x10: u32
  if (data?.dwLineDeviceID !== undefined) view.setUint32(16, Number(data.dwLineDeviceID), true);
  // 0x14: u32
  if (data?.dwAddressID !== undefined) view.setUint32(20, Number(data.dwAddressID), true);
  // 0x18: u32
  if (data?.dwBearerMode !== undefined) view.setUint32(24, Number(data.dwBearerMode), true);
  // 0x1c: u32
  if (data?.dwRate !== undefined) view.setUint32(28, Number(data.dwRate), true);
  // 0x20: u32
  if (data?.dwMediaMode !== undefined) view.setUint32(32, Number(data.dwMediaMode), true);
  // 0x24: u32
  if (data?.dwAppSpecific !== undefined) view.setUint32(36, Number(data.dwAppSpecific), true);
  // 0x28: u32
  if (data?.dwCallID !== undefined) view.setUint32(40, Number(data.dwCallID), true);
  // 0x2c: u32
  if (data?.dwRelatedCallID !== undefined) view.setUint32(44, Number(data.dwRelatedCallID), true);
  // 0x30: u32
  if (data?.dwCallParamFlags !== undefined) view.setUint32(48, Number(data.dwCallParamFlags), true);
  // 0x34: u32
  if (data?.dwCallStates !== undefined) view.setUint32(52, Number(data.dwCallStates), true);
  // 0x38: u32
  if (data?.dwMonitorDigitModes !== undefined) view.setUint32(56, Number(data.dwMonitorDigitModes), true);
  // 0x3c: u32
  if (data?.dwMonitorMediaModes !== undefined) view.setUint32(60, Number(data.dwMonitorMediaModes), true);
  // 0x40: pointer
  if (data?.DialParams !== undefined) view.setBigUint64(64, data.DialParams === null ? 0n : BigInt(util.toPointer(data.DialParams)), true);
  // 0x48: u32
  if (data?.dwOrigin !== undefined) view.setUint32(72, Number(data.dwOrigin), true);
  // 0x4c: u32
  if (data?.dwReason !== undefined) view.setUint32(76, Number(data.dwReason), true);
  // 0x50: u32
  if (data?.dwCompletionID !== undefined) view.setUint32(80, Number(data.dwCompletionID), true);
  // 0x54: u32
  if (data?.dwNumOwners !== undefined) view.setUint32(84, Number(data.dwNumOwners), true);
  // 0x58: u32
  if (data?.dwNumMonitors !== undefined) view.setUint32(88, Number(data.dwNumMonitors), true);
  // 0x5c: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(92, Number(data.dwCountryCode), true);
  // 0x60: u32
  if (data?.dwTrunk !== undefined) view.setUint32(96, Number(data.dwTrunk), true);
  // 0x64: u32
  if (data?.dwCallerIDFlags !== undefined) view.setUint32(100, Number(data.dwCallerIDFlags), true);
  // 0x68: u32
  if (data?.dwCallerIDSize !== undefined) view.setUint32(104, Number(data.dwCallerIDSize), true);
  // 0x6c: u32
  if (data?.dwCallerIDOffset !== undefined) view.setUint32(108, Number(data.dwCallerIDOffset), true);
  // 0x70: u32
  if (data?.dwCallerIDNameSize !== undefined) view.setUint32(112, Number(data.dwCallerIDNameSize), true);
  // 0x74: u32
  if (data?.dwCallerIDNameOffset !== undefined) view.setUint32(116, Number(data.dwCallerIDNameOffset), true);
  // 0x78: u32
  if (data?.dwCalledIDFlags !== undefined) view.setUint32(120, Number(data.dwCalledIDFlags), true);
  // 0x7c: u32
  if (data?.dwCalledIDSize !== undefined) view.setUint32(124, Number(data.dwCalledIDSize), true);
  // 0x80: u32
  if (data?.dwCalledIDOffset !== undefined) view.setUint32(128, Number(data.dwCalledIDOffset), true);
  // 0x84: u32
  if (data?.dwCalledIDNameSize !== undefined) view.setUint32(132, Number(data.dwCalledIDNameSize), true);
  // 0x88: u32
  if (data?.dwCalledIDNameOffset !== undefined) view.setUint32(136, Number(data.dwCalledIDNameOffset), true);
  // 0x8c: u32
  if (data?.dwConnectedIDFlags !== undefined) view.setUint32(140, Number(data.dwConnectedIDFlags), true);
  // 0x90: u32
  if (data?.dwConnectedIDSize !== undefined) view.setUint32(144, Number(data.dwConnectedIDSize), true);
  // 0x94: u32
  if (data?.dwConnectedIDOffset !== undefined) view.setUint32(148, Number(data.dwConnectedIDOffset), true);
  // 0x98: u32
  if (data?.dwConnectedIDNameSize !== undefined) view.setUint32(152, Number(data.dwConnectedIDNameSize), true);
  // 0x9c: u32
  if (data?.dwConnectedIDNameOffset !== undefined) view.setUint32(156, Number(data.dwConnectedIDNameOffset), true);
  // 0xa0: u32
  if (data?.dwRedirectionIDFlags !== undefined) view.setUint32(160, Number(data.dwRedirectionIDFlags), true);
  // 0xa4: u32
  if (data?.dwRedirectionIDSize !== undefined) view.setUint32(164, Number(data.dwRedirectionIDSize), true);
  // 0xa8: u32
  if (data?.dwRedirectionIDOffset !== undefined) view.setUint32(168, Number(data.dwRedirectionIDOffset), true);
  // 0xac: u32
  if (data?.dwRedirectionIDNameSize !== undefined) view.setUint32(172, Number(data.dwRedirectionIDNameSize), true);
  // 0xb0: u32
  if (data?.dwRedirectionIDNameOffset !== undefined) view.setUint32(176, Number(data.dwRedirectionIDNameOffset), true);
  // 0xb4: u32
  if (data?.dwRedirectingIDFlags !== undefined) view.setUint32(180, Number(data.dwRedirectingIDFlags), true);
  // 0xb8: u32
  if (data?.dwRedirectingIDSize !== undefined) view.setUint32(184, Number(data.dwRedirectingIDSize), true);
  // 0xbc: u32
  if (data?.dwRedirectingIDOffset !== undefined) view.setUint32(188, Number(data.dwRedirectingIDOffset), true);
  // 0xc0: u32
  if (data?.dwRedirectingIDNameSize !== undefined) view.setUint32(192, Number(data.dwRedirectingIDNameSize), true);
  // 0xc4: u32
  if (data?.dwRedirectingIDNameOffset !== undefined) view.setUint32(196, Number(data.dwRedirectingIDNameOffset), true);
  // 0xc8: u32
  if (data?.dwAppNameSize !== undefined) view.setUint32(200, Number(data.dwAppNameSize), true);
  // 0xcc: u32
  if (data?.dwAppNameOffset !== undefined) view.setUint32(204, Number(data.dwAppNameOffset), true);
  // 0xd0: u32
  if (data?.dwDisplayableAddressSize !== undefined) view.setUint32(208, Number(data.dwDisplayableAddressSize), true);
  // 0xd4: u32
  if (data?.dwDisplayableAddressOffset !== undefined) view.setUint32(212, Number(data.dwDisplayableAddressOffset), true);
  // 0xd8: u32
  if (data?.dwCalledPartySize !== undefined) view.setUint32(216, Number(data.dwCalledPartySize), true);
  // 0xdc: u32
  if (data?.dwCalledPartyOffset !== undefined) view.setUint32(220, Number(data.dwCalledPartyOffset), true);
  // 0xe0: u32
  if (data?.dwCommentSize !== undefined) view.setUint32(224, Number(data.dwCommentSize), true);
  // 0xe4: u32
  if (data?.dwCommentOffset !== undefined) view.setUint32(228, Number(data.dwCommentOffset), true);
  // 0xe8: u32
  if (data?.dwDisplaySize !== undefined) view.setUint32(232, Number(data.dwDisplaySize), true);
  // 0xec: u32
  if (data?.dwDisplayOffset !== undefined) view.setUint32(236, Number(data.dwDisplayOffset), true);
  // 0xf0: u32
  if (data?.dwUserUserInfoSize !== undefined) view.setUint32(240, Number(data.dwUserUserInfoSize), true);
  // 0xf4: u32
  if (data?.dwUserUserInfoOffset !== undefined) view.setUint32(244, Number(data.dwUserUserInfoOffset), true);
  // 0xf8: u32
  if (data?.dwHighLevelCompSize !== undefined) view.setUint32(248, Number(data.dwHighLevelCompSize), true);
  // 0xfc: u32
  if (data?.dwHighLevelCompOffset !== undefined) view.setUint32(252, Number(data.dwHighLevelCompOffset), true);
  // 0x100: u32
  if (data?.dwLowLevelCompSize !== undefined) view.setUint32(256, Number(data.dwLowLevelCompSize), true);
  // 0x104: u32
  if (data?.dwLowLevelCompOffset !== undefined) view.setUint32(260, Number(data.dwLowLevelCompOffset), true);
  // 0x108: u32
  if (data?.dwChargingInfoSize !== undefined) view.setUint32(264, Number(data.dwChargingInfoSize), true);
  // 0x10c: u32
  if (data?.dwChargingInfoOffset !== undefined) view.setUint32(268, Number(data.dwChargingInfoOffset), true);
  // 0x110: u32
  if (data?.dwTerminalModesSize !== undefined) view.setUint32(272, Number(data.dwTerminalModesSize), true);
  // 0x114: u32
  if (data?.dwTerminalModesOffset !== undefined) view.setUint32(276, Number(data.dwTerminalModesOffset), true);
  // 0x118: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(280, Number(data.dwDevSpecificSize), true);
  // 0x11c: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(284, Number(data.dwDevSpecificOffset), true);
  // 0x120: u32
  if (data?.dwCallTreatment !== undefined) view.setUint32(288, Number(data.dwCallTreatment), true);
  // 0x124: u32
  if (data?.dwCallDataSize !== undefined) view.setUint32(292, Number(data.dwCallDataSize), true);
  // 0x128: u32
  if (data?.dwCallDataOffset !== undefined) view.setUint32(296, Number(data.dwCallDataOffset), true);
  // 0x12c: u32
  if (data?.dwSendingFlowspecSize !== undefined) view.setUint32(300, Number(data.dwSendingFlowspecSize), true);
  // 0x130: u32
  if (data?.dwSendingFlowspecOffset !== undefined) view.setUint32(304, Number(data.dwSendingFlowspecOffset), true);
  // 0x134: u32
  if (data?.dwReceivingFlowspecSize !== undefined) view.setUint32(308, Number(data.dwReceivingFlowspecSize), true);
  // 0x138: u32
  if (data?.dwReceivingFlowspecOffset !== undefined) view.setUint32(312, Number(data.dwReceivingFlowspecOffset), true);
  // 0x13c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECALLLIST (size: 24)
 */
export interface LINECALLLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwCallsNumEntries: number;
  /** u32 */
  dwCallsSize: number;
  /** u32 */
  dwCallsOffset: number;
}

export const sizeofLINECALLLIST = 24;

export function allocLINECALLLIST(data?: Partial<LINECALLLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECALLLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwCallsNumEntries !== undefined) view.setUint32(12, Number(data.dwCallsNumEntries), true);
  // 0x10: u32
  if (data?.dwCallsSize !== undefined) view.setUint32(16, Number(data.dwCallsSize), true);
  // 0x14: u32
  if (data?.dwCallsOffset !== undefined) view.setUint32(20, Number(data.dwCallsOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECALLPARAMS (size: 168)
 */
export interface LINECALLPARAMS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwBearerMode: number;
  /** u32 */
  dwMinRate: number;
  /** u32 */
  dwMaxRate: number;
  /** u32 */
  dwMediaMode: number;
  /** u32 */
  dwCallParamFlags: number;
  /** u32 */
  dwAddressMode: number;
  /** u32 */
  dwAddressID: number;
  /** Windows.Win32.Devices.Tapi.LINEDIALPARAMS */
  DialParams: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOrigAddressSize: number;
  /** u32 */
  dwOrigAddressOffset: number;
  /** u32 */
  dwDisplayableAddressSize: number;
  /** u32 */
  dwDisplayableAddressOffset: number;
  /** u32 */
  dwCalledPartySize: number;
  /** u32 */
  dwCalledPartyOffset: number;
  /** u32 */
  dwCommentSize: number;
  /** u32 */
  dwCommentOffset: number;
  /** u32 */
  dwUserUserInfoSize: number;
  /** u32 */
  dwUserUserInfoOffset: number;
  /** u32 */
  dwHighLevelCompSize: number;
  /** u32 */
  dwHighLevelCompOffset: number;
  /** u32 */
  dwLowLevelCompSize: number;
  /** u32 */
  dwLowLevelCompOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwPredictiveAutoTransferStates: number;
  /** u32 */
  dwTargetAddressSize: number;
  /** u32 */
  dwTargetAddressOffset: number;
  /** u32 */
  dwSendingFlowspecSize: number;
  /** u32 */
  dwSendingFlowspecOffset: number;
  /** u32 */
  dwReceivingFlowspecSize: number;
  /** u32 */
  dwReceivingFlowspecOffset: number;
  /** u32 */
  dwDeviceClassSize: number;
  /** u32 */
  dwDeviceClassOffset: number;
  /** u32 */
  dwDeviceConfigSize: number;
  /** u32 */
  dwDeviceConfigOffset: number;
  /** u32 */
  dwCallDataSize: number;
  /** u32 */
  dwCallDataOffset: number;
  /** u32 */
  dwNoAnswerTimeout: number;
  /** u32 */
  dwCallingPartyIDSize: number;
  /** u32 */
  dwCallingPartyIDOffset: number;
}

export const sizeofLINECALLPARAMS = 168;

export function allocLINECALLPARAMS(data?: Partial<LINECALLPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECALLPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwBearerMode !== undefined) view.setUint32(4, Number(data.dwBearerMode), true);
  // 0x08: u32
  if (data?.dwMinRate !== undefined) view.setUint32(8, Number(data.dwMinRate), true);
  // 0x0c: u32
  if (data?.dwMaxRate !== undefined) view.setUint32(12, Number(data.dwMaxRate), true);
  // 0x10: u32
  if (data?.dwMediaMode !== undefined) view.setUint32(16, Number(data.dwMediaMode), true);
  // 0x14: u32
  if (data?.dwCallParamFlags !== undefined) view.setUint32(20, Number(data.dwCallParamFlags), true);
  // 0x18: u32
  if (data?.dwAddressMode !== undefined) view.setUint32(24, Number(data.dwAddressMode), true);
  // 0x1c: u32
  if (data?.dwAddressID !== undefined) view.setUint32(28, Number(data.dwAddressID), true);
  // 0x20: pointer
  if (data?.DialParams !== undefined) view.setBigUint64(32, data.DialParams === null ? 0n : BigInt(util.toPointer(data.DialParams)), true);
  // 0x28: u32
  if (data?.dwOrigAddressSize !== undefined) view.setUint32(40, Number(data.dwOrigAddressSize), true);
  // 0x2c: u32
  if (data?.dwOrigAddressOffset !== undefined) view.setUint32(44, Number(data.dwOrigAddressOffset), true);
  // 0x30: u32
  if (data?.dwDisplayableAddressSize !== undefined) view.setUint32(48, Number(data.dwDisplayableAddressSize), true);
  // 0x34: u32
  if (data?.dwDisplayableAddressOffset !== undefined) view.setUint32(52, Number(data.dwDisplayableAddressOffset), true);
  // 0x38: u32
  if (data?.dwCalledPartySize !== undefined) view.setUint32(56, Number(data.dwCalledPartySize), true);
  // 0x3c: u32
  if (data?.dwCalledPartyOffset !== undefined) view.setUint32(60, Number(data.dwCalledPartyOffset), true);
  // 0x40: u32
  if (data?.dwCommentSize !== undefined) view.setUint32(64, Number(data.dwCommentSize), true);
  // 0x44: u32
  if (data?.dwCommentOffset !== undefined) view.setUint32(68, Number(data.dwCommentOffset), true);
  // 0x48: u32
  if (data?.dwUserUserInfoSize !== undefined) view.setUint32(72, Number(data.dwUserUserInfoSize), true);
  // 0x4c: u32
  if (data?.dwUserUserInfoOffset !== undefined) view.setUint32(76, Number(data.dwUserUserInfoOffset), true);
  // 0x50: u32
  if (data?.dwHighLevelCompSize !== undefined) view.setUint32(80, Number(data.dwHighLevelCompSize), true);
  // 0x54: u32
  if (data?.dwHighLevelCompOffset !== undefined) view.setUint32(84, Number(data.dwHighLevelCompOffset), true);
  // 0x58: u32
  if (data?.dwLowLevelCompSize !== undefined) view.setUint32(88, Number(data.dwLowLevelCompSize), true);
  // 0x5c: u32
  if (data?.dwLowLevelCompOffset !== undefined) view.setUint32(92, Number(data.dwLowLevelCompOffset), true);
  // 0x60: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(96, Number(data.dwDevSpecificSize), true);
  // 0x64: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(100, Number(data.dwDevSpecificOffset), true);
  // 0x68: u32
  if (data?.dwPredictiveAutoTransferStates !== undefined) view.setUint32(104, Number(data.dwPredictiveAutoTransferStates), true);
  // 0x6c: u32
  if (data?.dwTargetAddressSize !== undefined) view.setUint32(108, Number(data.dwTargetAddressSize), true);
  // 0x70: u32
  if (data?.dwTargetAddressOffset !== undefined) view.setUint32(112, Number(data.dwTargetAddressOffset), true);
  // 0x74: u32
  if (data?.dwSendingFlowspecSize !== undefined) view.setUint32(116, Number(data.dwSendingFlowspecSize), true);
  // 0x78: u32
  if (data?.dwSendingFlowspecOffset !== undefined) view.setUint32(120, Number(data.dwSendingFlowspecOffset), true);
  // 0x7c: u32
  if (data?.dwReceivingFlowspecSize !== undefined) view.setUint32(124, Number(data.dwReceivingFlowspecSize), true);
  // 0x80: u32
  if (data?.dwReceivingFlowspecOffset !== undefined) view.setUint32(128, Number(data.dwReceivingFlowspecOffset), true);
  // 0x84: u32
  if (data?.dwDeviceClassSize !== undefined) view.setUint32(132, Number(data.dwDeviceClassSize), true);
  // 0x88: u32
  if (data?.dwDeviceClassOffset !== undefined) view.setUint32(136, Number(data.dwDeviceClassOffset), true);
  // 0x8c: u32
  if (data?.dwDeviceConfigSize !== undefined) view.setUint32(140, Number(data.dwDeviceConfigSize), true);
  // 0x90: u32
  if (data?.dwDeviceConfigOffset !== undefined) view.setUint32(144, Number(data.dwDeviceConfigOffset), true);
  // 0x94: u32
  if (data?.dwCallDataSize !== undefined) view.setUint32(148, Number(data.dwCallDataSize), true);
  // 0x98: u32
  if (data?.dwCallDataOffset !== undefined) view.setUint32(152, Number(data.dwCallDataOffset), true);
  // 0x9c: u32
  if (data?.dwNoAnswerTimeout !== undefined) view.setUint32(156, Number(data.dwNoAnswerTimeout), true);
  // 0xa0: u32
  if (data?.dwCallingPartyIDSize !== undefined) view.setUint32(160, Number(data.dwCallingPartyIDSize), true);
  // 0xa4: u32
  if (data?.dwCallingPartyIDOffset !== undefined) view.setUint32(164, Number(data.dwCallingPartyIDOffset), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECALLSTATUS (size: 48)
 */
export interface LINECALLSTATUS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwCallState: number;
  /** u32 */
  dwCallStateMode: number;
  /** u32 */
  dwCallPrivilege: number;
  /** u32 */
  dwCallFeatures: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwCallFeatures2: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  tStateEntryTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLINECALLSTATUS = 48;

export function allocLINECALLSTATUS(data?: Partial<LINECALLSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECALLSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwCallState !== undefined) view.setUint32(12, Number(data.dwCallState), true);
  // 0x10: u32
  if (data?.dwCallStateMode !== undefined) view.setUint32(16, Number(data.dwCallStateMode), true);
  // 0x14: u32
  if (data?.dwCallPrivilege !== undefined) view.setUint32(20, Number(data.dwCallPrivilege), true);
  // 0x18: u32
  if (data?.dwCallFeatures !== undefined) view.setUint32(24, Number(data.dwCallFeatures), true);
  // 0x1c: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(28, Number(data.dwDevSpecificSize), true);
  // 0x20: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(32, Number(data.dwDevSpecificOffset), true);
  // 0x24: u32
  if (data?.dwCallFeatures2 !== undefined) view.setUint32(36, Number(data.dwCallFeatures2), true);
  // 0x28: pointer
  if (data?.tStateEntryTime !== undefined) view.setBigUint64(40, data.tStateEntryTime === null ? 0n : BigInt(util.toPointer(data.tStateEntryTime)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECALLTREATMENTENTRY (size: 16)
 */
export interface LINECALLTREATMENTENTRY {
  /** u32 */
  dwCallTreatmentID: number;
  /** u32 */
  dwCallTreatmentNameSize: number;
  /** u32 */
  dwCallTreatmentNameOffset: number;
}

export const sizeofLINECALLTREATMENTENTRY = 16;

export function allocLINECALLTREATMENTENTRY(data?: Partial<LINECALLTREATMENTENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECALLTREATMENTENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCallTreatmentID !== undefined) view.setUint32(0, Number(data.dwCallTreatmentID), true);
  // 0x04: u32
  if (data?.dwCallTreatmentNameSize !== undefined) view.setUint32(4, Number(data.dwCallTreatmentNameSize), true);
  // 0x08: u32
  if (data?.dwCallTreatmentNameOffset !== undefined) view.setUint32(8, Number(data.dwCallTreatmentNameOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECARDENTRY (size: 48)
 */
export interface LINECARDENTRY {
  /** u32 */
  dwPermanentCardID: number;
  /** u32 */
  dwCardNameSize: number;
  /** u32 */
  dwCardNameOffset: number;
  /** u32 */
  dwCardNumberDigits: number;
  /** u32 */
  dwSameAreaRuleSize: number;
  /** u32 */
  dwSameAreaRuleOffset: number;
  /** u32 */
  dwLongDistanceRuleSize: number;
  /** u32 */
  dwLongDistanceRuleOffset: number;
  /** u32 */
  dwInternationalRuleSize: number;
  /** u32 */
  dwInternationalRuleOffset: number;
  /** u32 */
  dwOptions: number;
}

export const sizeofLINECARDENTRY = 48;

export function allocLINECARDENTRY(data?: Partial<LINECARDENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECARDENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPermanentCardID !== undefined) view.setUint32(0, Number(data.dwPermanentCardID), true);
  // 0x04: u32
  if (data?.dwCardNameSize !== undefined) view.setUint32(4, Number(data.dwCardNameSize), true);
  // 0x08: u32
  if (data?.dwCardNameOffset !== undefined) view.setUint32(8, Number(data.dwCardNameOffset), true);
  // 0x0c: u32
  if (data?.dwCardNumberDigits !== undefined) view.setUint32(12, Number(data.dwCardNumberDigits), true);
  // 0x10: u32
  if (data?.dwSameAreaRuleSize !== undefined) view.setUint32(16, Number(data.dwSameAreaRuleSize), true);
  // 0x14: u32
  if (data?.dwSameAreaRuleOffset !== undefined) view.setUint32(20, Number(data.dwSameAreaRuleOffset), true);
  // 0x18: u32
  if (data?.dwLongDistanceRuleSize !== undefined) view.setUint32(24, Number(data.dwLongDistanceRuleSize), true);
  // 0x1c: u32
  if (data?.dwLongDistanceRuleOffset !== undefined) view.setUint32(28, Number(data.dwLongDistanceRuleOffset), true);
  // 0x20: u32
  if (data?.dwInternationalRuleSize !== undefined) view.setUint32(32, Number(data.dwInternationalRuleSize), true);
  // 0x24: u32
  if (data?.dwInternationalRuleOffset !== undefined) view.setUint32(36, Number(data.dwInternationalRuleOffset), true);
  // 0x28: u32
  if (data?.dwOptions !== undefined) view.setUint32(40, Number(data.dwOptions), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECOUNTRYENTRY (size: 48)
 */
export interface LINECOUNTRYENTRY {
  /** u32 */
  dwCountryID: number;
  /** u32 */
  dwCountryCode: number;
  /** u32 */
  dwNextCountryID: number;
  /** u32 */
  dwCountryNameSize: number;
  /** u32 */
  dwCountryNameOffset: number;
  /** u32 */
  dwSameAreaRuleSize: number;
  /** u32 */
  dwSameAreaRuleOffset: number;
  /** u32 */
  dwLongDistanceRuleSize: number;
  /** u32 */
  dwLongDistanceRuleOffset: number;
  /** u32 */
  dwInternationalRuleSize: number;
  /** u32 */
  dwInternationalRuleOffset: number;
}

export const sizeofLINECOUNTRYENTRY = 48;

export function allocLINECOUNTRYENTRY(data?: Partial<LINECOUNTRYENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECOUNTRYENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCountryID !== undefined) view.setUint32(0, Number(data.dwCountryID), true);
  // 0x04: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(4, Number(data.dwCountryCode), true);
  // 0x08: u32
  if (data?.dwNextCountryID !== undefined) view.setUint32(8, Number(data.dwNextCountryID), true);
  // 0x0c: u32
  if (data?.dwCountryNameSize !== undefined) view.setUint32(12, Number(data.dwCountryNameSize), true);
  // 0x10: u32
  if (data?.dwCountryNameOffset !== undefined) view.setUint32(16, Number(data.dwCountryNameOffset), true);
  // 0x14: u32
  if (data?.dwSameAreaRuleSize !== undefined) view.setUint32(20, Number(data.dwSameAreaRuleSize), true);
  // 0x18: u32
  if (data?.dwSameAreaRuleOffset !== undefined) view.setUint32(24, Number(data.dwSameAreaRuleOffset), true);
  // 0x1c: u32
  if (data?.dwLongDistanceRuleSize !== undefined) view.setUint32(28, Number(data.dwLongDistanceRuleSize), true);
  // 0x20: u32
  if (data?.dwLongDistanceRuleOffset !== undefined) view.setUint32(32, Number(data.dwLongDistanceRuleOffset), true);
  // 0x24: u32
  if (data?.dwInternationalRuleSize !== undefined) view.setUint32(36, Number(data.dwInternationalRuleSize), true);
  // 0x28: u32
  if (data?.dwInternationalRuleOffset !== undefined) view.setUint32(40, Number(data.dwInternationalRuleOffset), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINECOUNTRYLIST (size: 24)
 */
export interface LINECOUNTRYLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumCountries: number;
  /** u32 */
  dwCountryListSize: number;
  /** u32 */
  dwCountryListOffset: number;
}

export const sizeofLINECOUNTRYLIST = 24;

export function allocLINECOUNTRYLIST(data?: Partial<LINECOUNTRYLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINECOUNTRYLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumCountries !== undefined) view.setUint32(12, Number(data.dwNumCountries), true);
  // 0x10: u32
  if (data?.dwCountryListSize !== undefined) view.setUint32(16, Number(data.dwCountryListSize), true);
  // 0x14: u32
  if (data?.dwCountryListOffset !== undefined) view.setUint32(20, Number(data.dwCountryListOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEDEVCAPS (size: 240)
 */
export interface LINEDEVCAPS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwProviderInfoSize: number;
  /** u32 */
  dwProviderInfoOffset: number;
  /** u32 */
  dwSwitchInfoSize: number;
  /** u32 */
  dwSwitchInfoOffset: number;
  /** u32 */
  dwPermanentLineID: number;
  /** u32 */
  dwLineNameSize: number;
  /** u32 */
  dwLineNameOffset: number;
  /** u32 */
  dwStringFormat: number;
  /** u32 */
  dwAddressModes: number;
  /** u32 */
  dwNumAddresses: number;
  /** u32 */
  dwBearerModes: number;
  /** u32 */
  dwMaxRate: number;
  /** u32 */
  dwMediaModes: number;
  /** u32 */
  dwGenerateToneModes: number;
  /** u32 */
  dwGenerateToneMaxNumFreq: number;
  /** u32 */
  dwGenerateDigitModes: number;
  /** u32 */
  dwMonitorToneMaxNumFreq: number;
  /** u32 */
  dwMonitorToneMaxNumEntries: number;
  /** u32 */
  dwMonitorDigitModes: number;
  /** u32 */
  dwGatherDigitsMinTimeout: number;
  /** u32 */
  dwGatherDigitsMaxTimeout: number;
  /** u32 */
  dwMedCtlDigitMaxListSize: number;
  /** u32 */
  dwMedCtlMediaMaxListSize: number;
  /** u32 */
  dwMedCtlToneMaxListSize: number;
  /** u32 */
  dwMedCtlCallStateMaxListSize: number;
  /** u32 */
  dwDevCapFlags: number;
  /** u32 */
  dwMaxNumActiveCalls: number;
  /** u32 */
  dwAnswerMode: number;
  /** u32 */
  dwRingModes: number;
  /** u32 */
  dwLineStates: number;
  /** u32 */
  dwUUIAcceptSize: number;
  /** u32 */
  dwUUIAnswerSize: number;
  /** u32 */
  dwUUIMakeCallSize: number;
  /** u32 */
  dwUUIDropSize: number;
  /** u32 */
  dwUUISendUserUserInfoSize: number;
  /** u32 */
  dwUUICallInfoSize: number;
  /** Windows.Win32.Devices.Tapi.LINEDIALPARAMS */
  MinDialParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Tapi.LINEDIALPARAMS */
  MaxDialParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Tapi.LINEDIALPARAMS */
  DefaultDialParams: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumTerminals: number;
  /** u32 */
  dwTerminalCapsSize: number;
  /** u32 */
  dwTerminalCapsOffset: number;
  /** u32 */
  dwTerminalTextEntrySize: number;
  /** u32 */
  dwTerminalTextSize: number;
  /** u32 */
  dwTerminalTextOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwLineFeatures: number;
  /** u32 */
  dwSettableDevStatus: number;
  /** u32 */
  dwDeviceClassesSize: number;
  /** u32 */
  dwDeviceClassesOffset: number;
  /** System.Guid */
  PermanentLineGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLINEDEVCAPS = 240;

export function allocLINEDEVCAPS(data?: Partial<LINEDEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwProviderInfoSize !== undefined) view.setUint32(12, Number(data.dwProviderInfoSize), true);
  // 0x10: u32
  if (data?.dwProviderInfoOffset !== undefined) view.setUint32(16, Number(data.dwProviderInfoOffset), true);
  // 0x14: u32
  if (data?.dwSwitchInfoSize !== undefined) view.setUint32(20, Number(data.dwSwitchInfoSize), true);
  // 0x18: u32
  if (data?.dwSwitchInfoOffset !== undefined) view.setUint32(24, Number(data.dwSwitchInfoOffset), true);
  // 0x1c: u32
  if (data?.dwPermanentLineID !== undefined) view.setUint32(28, Number(data.dwPermanentLineID), true);
  // 0x20: u32
  if (data?.dwLineNameSize !== undefined) view.setUint32(32, Number(data.dwLineNameSize), true);
  // 0x24: u32
  if (data?.dwLineNameOffset !== undefined) view.setUint32(36, Number(data.dwLineNameOffset), true);
  // 0x28: u32
  if (data?.dwStringFormat !== undefined) view.setUint32(40, Number(data.dwStringFormat), true);
  // 0x2c: u32
  if (data?.dwAddressModes !== undefined) view.setUint32(44, Number(data.dwAddressModes), true);
  // 0x30: u32
  if (data?.dwNumAddresses !== undefined) view.setUint32(48, Number(data.dwNumAddresses), true);
  // 0x34: u32
  if (data?.dwBearerModes !== undefined) view.setUint32(52, Number(data.dwBearerModes), true);
  // 0x38: u32
  if (data?.dwMaxRate !== undefined) view.setUint32(56, Number(data.dwMaxRate), true);
  // 0x3c: u32
  if (data?.dwMediaModes !== undefined) view.setUint32(60, Number(data.dwMediaModes), true);
  // 0x40: u32
  if (data?.dwGenerateToneModes !== undefined) view.setUint32(64, Number(data.dwGenerateToneModes), true);
  // 0x44: u32
  if (data?.dwGenerateToneMaxNumFreq !== undefined) view.setUint32(68, Number(data.dwGenerateToneMaxNumFreq), true);
  // 0x48: u32
  if (data?.dwGenerateDigitModes !== undefined) view.setUint32(72, Number(data.dwGenerateDigitModes), true);
  // 0x4c: u32
  if (data?.dwMonitorToneMaxNumFreq !== undefined) view.setUint32(76, Number(data.dwMonitorToneMaxNumFreq), true);
  // 0x50: u32
  if (data?.dwMonitorToneMaxNumEntries !== undefined) view.setUint32(80, Number(data.dwMonitorToneMaxNumEntries), true);
  // 0x54: u32
  if (data?.dwMonitorDigitModes !== undefined) view.setUint32(84, Number(data.dwMonitorDigitModes), true);
  // 0x58: u32
  if (data?.dwGatherDigitsMinTimeout !== undefined) view.setUint32(88, Number(data.dwGatherDigitsMinTimeout), true);
  // 0x5c: u32
  if (data?.dwGatherDigitsMaxTimeout !== undefined) view.setUint32(92, Number(data.dwGatherDigitsMaxTimeout), true);
  // 0x60: u32
  if (data?.dwMedCtlDigitMaxListSize !== undefined) view.setUint32(96, Number(data.dwMedCtlDigitMaxListSize), true);
  // 0x64: u32
  if (data?.dwMedCtlMediaMaxListSize !== undefined) view.setUint32(100, Number(data.dwMedCtlMediaMaxListSize), true);
  // 0x68: u32
  if (data?.dwMedCtlToneMaxListSize !== undefined) view.setUint32(104, Number(data.dwMedCtlToneMaxListSize), true);
  // 0x6c: u32
  if (data?.dwMedCtlCallStateMaxListSize !== undefined) view.setUint32(108, Number(data.dwMedCtlCallStateMaxListSize), true);
  // 0x70: u32
  if (data?.dwDevCapFlags !== undefined) view.setUint32(112, Number(data.dwDevCapFlags), true);
  // 0x74: u32
  if (data?.dwMaxNumActiveCalls !== undefined) view.setUint32(116, Number(data.dwMaxNumActiveCalls), true);
  // 0x78: u32
  if (data?.dwAnswerMode !== undefined) view.setUint32(120, Number(data.dwAnswerMode), true);
  // 0x7c: u32
  if (data?.dwRingModes !== undefined) view.setUint32(124, Number(data.dwRingModes), true);
  // 0x80: u32
  if (data?.dwLineStates !== undefined) view.setUint32(128, Number(data.dwLineStates), true);
  // 0x84: u32
  if (data?.dwUUIAcceptSize !== undefined) view.setUint32(132, Number(data.dwUUIAcceptSize), true);
  // 0x88: u32
  if (data?.dwUUIAnswerSize !== undefined) view.setUint32(136, Number(data.dwUUIAnswerSize), true);
  // 0x8c: u32
  if (data?.dwUUIMakeCallSize !== undefined) view.setUint32(140, Number(data.dwUUIMakeCallSize), true);
  // 0x90: u32
  if (data?.dwUUIDropSize !== undefined) view.setUint32(144, Number(data.dwUUIDropSize), true);
  // 0x94: u32
  if (data?.dwUUISendUserUserInfoSize !== undefined) view.setUint32(148, Number(data.dwUUISendUserUserInfoSize), true);
  // 0x98: u32
  if (data?.dwUUICallInfoSize !== undefined) view.setUint32(152, Number(data.dwUUICallInfoSize), true);
  // 0x9c: pad4
  // 0xa0: pointer
  if (data?.MinDialParams !== undefined) view.setBigUint64(160, data.MinDialParams === null ? 0n : BigInt(util.toPointer(data.MinDialParams)), true);
  // 0xa8: pointer
  if (data?.MaxDialParams !== undefined) view.setBigUint64(168, data.MaxDialParams === null ? 0n : BigInt(util.toPointer(data.MaxDialParams)), true);
  // 0xb0: pointer
  if (data?.DefaultDialParams !== undefined) view.setBigUint64(176, data.DefaultDialParams === null ? 0n : BigInt(util.toPointer(data.DefaultDialParams)), true);
  // 0xb8: u32
  if (data?.dwNumTerminals !== undefined) view.setUint32(184, Number(data.dwNumTerminals), true);
  // 0xbc: u32
  if (data?.dwTerminalCapsSize !== undefined) view.setUint32(188, Number(data.dwTerminalCapsSize), true);
  // 0xc0: u32
  if (data?.dwTerminalCapsOffset !== undefined) view.setUint32(192, Number(data.dwTerminalCapsOffset), true);
  // 0xc4: u32
  if (data?.dwTerminalTextEntrySize !== undefined) view.setUint32(196, Number(data.dwTerminalTextEntrySize), true);
  // 0xc8: u32
  if (data?.dwTerminalTextSize !== undefined) view.setUint32(200, Number(data.dwTerminalTextSize), true);
  // 0xcc: u32
  if (data?.dwTerminalTextOffset !== undefined) view.setUint32(204, Number(data.dwTerminalTextOffset), true);
  // 0xd0: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(208, Number(data.dwDevSpecificSize), true);
  // 0xd4: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(212, Number(data.dwDevSpecificOffset), true);
  // 0xd8: u32
  if (data?.dwLineFeatures !== undefined) view.setUint32(216, Number(data.dwLineFeatures), true);
  // 0xdc: u32
  if (data?.dwSettableDevStatus !== undefined) view.setUint32(220, Number(data.dwSettableDevStatus), true);
  // 0xe0: u32
  if (data?.dwDeviceClassesSize !== undefined) view.setUint32(224, Number(data.dwDeviceClassesSize), true);
  // 0xe4: u32
  if (data?.dwDeviceClassesOffset !== undefined) view.setUint32(228, Number(data.dwDeviceClassesOffset), true);
  // 0xe8: pointer
  if (data?.PermanentLineGuid !== undefined) view.setBigUint64(232, data.PermanentLineGuid === null ? 0n : BigInt(util.toPointer(data.PermanentLineGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEDEVSTATUS (size: 88)
 */
export interface LINEDEVSTATUS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumOpens: number;
  /** u32 */
  dwOpenMediaModes: number;
  /** u32 */
  dwNumActiveCalls: number;
  /** u32 */
  dwNumOnHoldCalls: number;
  /** u32 */
  dwNumOnHoldPendCalls: number;
  /** u32 */
  dwLineFeatures: number;
  /** u32 */
  dwNumCallCompletions: number;
  /** u32 */
  dwRingMode: number;
  /** u32 */
  dwSignalLevel: number;
  /** u32 */
  dwBatteryLevel: number;
  /** u32 */
  dwRoamMode: number;
  /** u32 */
  dwDevStatusFlags: number;
  /** u32 */
  dwTerminalModesSize: number;
  /** u32 */
  dwTerminalModesOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwAvailableMediaModes: number;
  /** u32 */
  dwAppInfoSize: number;
  /** u32 */
  dwAppInfoOffset: number;
}

export const sizeofLINEDEVSTATUS = 88;

export function allocLINEDEVSTATUS(data?: Partial<LINEDEVSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEDEVSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumOpens !== undefined) view.setUint32(12, Number(data.dwNumOpens), true);
  // 0x10: u32
  if (data?.dwOpenMediaModes !== undefined) view.setUint32(16, Number(data.dwOpenMediaModes), true);
  // 0x14: u32
  if (data?.dwNumActiveCalls !== undefined) view.setUint32(20, Number(data.dwNumActiveCalls), true);
  // 0x18: u32
  if (data?.dwNumOnHoldCalls !== undefined) view.setUint32(24, Number(data.dwNumOnHoldCalls), true);
  // 0x1c: u32
  if (data?.dwNumOnHoldPendCalls !== undefined) view.setUint32(28, Number(data.dwNumOnHoldPendCalls), true);
  // 0x20: u32
  if (data?.dwLineFeatures !== undefined) view.setUint32(32, Number(data.dwLineFeatures), true);
  // 0x24: u32
  if (data?.dwNumCallCompletions !== undefined) view.setUint32(36, Number(data.dwNumCallCompletions), true);
  // 0x28: u32
  if (data?.dwRingMode !== undefined) view.setUint32(40, Number(data.dwRingMode), true);
  // 0x2c: u32
  if (data?.dwSignalLevel !== undefined) view.setUint32(44, Number(data.dwSignalLevel), true);
  // 0x30: u32
  if (data?.dwBatteryLevel !== undefined) view.setUint32(48, Number(data.dwBatteryLevel), true);
  // 0x34: u32
  if (data?.dwRoamMode !== undefined) view.setUint32(52, Number(data.dwRoamMode), true);
  // 0x38: u32
  if (data?.dwDevStatusFlags !== undefined) view.setUint32(56, Number(data.dwDevStatusFlags), true);
  // 0x3c: u32
  if (data?.dwTerminalModesSize !== undefined) view.setUint32(60, Number(data.dwTerminalModesSize), true);
  // 0x40: u32
  if (data?.dwTerminalModesOffset !== undefined) view.setUint32(64, Number(data.dwTerminalModesOffset), true);
  // 0x44: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(68, Number(data.dwDevSpecificSize), true);
  // 0x48: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(72, Number(data.dwDevSpecificOffset), true);
  // 0x4c: u32
  if (data?.dwAvailableMediaModes !== undefined) view.setUint32(76, Number(data.dwAvailableMediaModes), true);
  // 0x50: u32
  if (data?.dwAppInfoSize !== undefined) view.setUint32(80, Number(data.dwAppInfoSize), true);
  // 0x54: u32
  if (data?.dwAppInfoOffset !== undefined) view.setUint32(84, Number(data.dwAppInfoOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEEXTENSIONID (size: 16)
 */
export interface LINEEXTENSIONID {
  /** u32 */
  dwExtensionID0: number;
  /** u32 */
  dwExtensionID1: number;
  /** u32 */
  dwExtensionID2: number;
  /** u32 */
  dwExtensionID3: number;
}

export const sizeofLINEEXTENSIONID = 16;

export function allocLINEEXTENSIONID(data?: Partial<LINEEXTENSIONID>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEEXTENSIONID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExtensionID0 !== undefined) view.setUint32(0, Number(data.dwExtensionID0), true);
  // 0x04: u32
  if (data?.dwExtensionID1 !== undefined) view.setUint32(4, Number(data.dwExtensionID1), true);
  // 0x08: u32
  if (data?.dwExtensionID2 !== undefined) view.setUint32(8, Number(data.dwExtensionID2), true);
  // 0x0c: u32
  if (data?.dwExtensionID3 !== undefined) view.setUint32(12, Number(data.dwExtensionID3), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEFORWARD (size: 24)
 */
export interface LINEFORWARD {
  /** u32 */
  dwForwardMode: number;
  /** u32 */
  dwCallerAddressSize: number;
  /** u32 */
  dwCallerAddressOffset: number;
  /** u32 */
  dwDestCountryCode: number;
  /** u32 */
  dwDestAddressSize: number;
  /** u32 */
  dwDestAddressOffset: number;
}

export const sizeofLINEFORWARD = 24;

export function allocLINEFORWARD(data?: Partial<LINEFORWARD>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEFORWARD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwForwardMode !== undefined) view.setUint32(0, Number(data.dwForwardMode), true);
  // 0x04: u32
  if (data?.dwCallerAddressSize !== undefined) view.setUint32(4, Number(data.dwCallerAddressSize), true);
  // 0x08: u32
  if (data?.dwCallerAddressOffset !== undefined) view.setUint32(8, Number(data.dwCallerAddressOffset), true);
  // 0x0c: u32
  if (data?.dwDestCountryCode !== undefined) view.setUint32(12, Number(data.dwDestCountryCode), true);
  // 0x10: u32
  if (data?.dwDestAddressSize !== undefined) view.setUint32(16, Number(data.dwDestAddressSize), true);
  // 0x14: u32
  if (data?.dwDestAddressOffset !== undefined) view.setUint32(20, Number(data.dwDestAddressOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEFORWARDLIST (size: 16)
 */
export interface LINEFORWARDLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNumEntries: number;
  /** array */
  ForwardList: Deno.PointerValue | null;
}

export const sizeofLINEFORWARDLIST = 16;

export function allocLINEFORWARDLIST(data?: Partial<LINEFORWARDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEFORWARDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(4, Number(data.dwNumEntries), true);
  // 0x08: pointer
  if (data?.ForwardList !== undefined) view.setBigUint64(8, data.ForwardList === null ? 0n : BigInt(util.toPointer(data.ForwardList)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEGENERATETONE (size: 16)
 */
export interface LINEGENERATETONE {
  /** u32 */
  dwFrequency: number;
  /** u32 */
  dwCadenceOn: number;
  /** u32 */
  dwCadenceOff: number;
  /** u32 */
  dwVolume: number;
}

export const sizeofLINEGENERATETONE = 16;

export function allocLINEGENERATETONE(data?: Partial<LINEGENERATETONE>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEGENERATETONE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFrequency !== undefined) view.setUint32(0, Number(data.dwFrequency), true);
  // 0x04: u32
  if (data?.dwCadenceOn !== undefined) view.setUint32(4, Number(data.dwCadenceOn), true);
  // 0x08: u32
  if (data?.dwCadenceOff !== undefined) view.setUint32(8, Number(data.dwCadenceOff), true);
  // 0x0c: u32
  if (data?.dwVolume !== undefined) view.setUint32(12, Number(data.dwVolume), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * _Handles_e__Union (size: 16)
 */
export interface _Handles_e__Union {
  /** Windows.Win32.Foundation.HANDLE */
  hEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hCompletionPort: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Handles_e__Union = 16;

export function alloc_Handles_e__Union(data?: Partial<_Handles_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Handles_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hEvent !== undefined) view.setBigUint64(0, data.hEvent === null ? 0n : BigInt(util.toPointer(data.hEvent)), true);
  // 0x08: pointer
  if (data?.hCompletionPort !== undefined) view.setBigUint64(8, data.hCompletionPort === null ? 0n : BigInt(util.toPointer(data.hCompletionPort)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEINITIALIZEEXPARAMS (size: 32)
 */
export interface LINEINITIALIZEEXPARAMS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwOptions: number;
  /** _Handles_e__Union */
  Handles: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCompletionKey: number;
}

export const sizeofLINEINITIALIZEEXPARAMS = 32;

export function allocLINEINITIALIZEEXPARAMS(data?: Partial<LINEINITIALIZEEXPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEINITIALIZEEXPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwOptions !== undefined) view.setUint32(12, Number(data.dwOptions), true);
  // 0x10: pointer
  if (data?.Handles !== undefined) view.setBigUint64(16, data.Handles === null ? 0n : BigInt(util.toPointer(data.Handles)), true);
  // 0x18: u32
  if (data?.dwCompletionKey !== undefined) view.setUint32(24, Number(data.dwCompletionKey), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINELOCATIONENTRY (size: 72)
 */
export interface LINELOCATIONENTRY {
  /** u32 */
  dwPermanentLocationID: number;
  /** u32 */
  dwLocationNameSize: number;
  /** u32 */
  dwLocationNameOffset: number;
  /** u32 */
  dwCountryCode: number;
  /** u32 */
  dwCityCodeSize: number;
  /** u32 */
  dwCityCodeOffset: number;
  /** u32 */
  dwPreferredCardID: number;
  /** u32 */
  dwLocalAccessCodeSize: number;
  /** u32 */
  dwLocalAccessCodeOffset: number;
  /** u32 */
  dwLongDistanceAccessCodeSize: number;
  /** u32 */
  dwLongDistanceAccessCodeOffset: number;
  /** u32 */
  dwTollPrefixListSize: number;
  /** u32 */
  dwTollPrefixListOffset: number;
  /** u32 */
  dwCountryID: number;
  /** u32 */
  dwOptions: number;
  /** u32 */
  dwCancelCallWaitingSize: number;
  /** u32 */
  dwCancelCallWaitingOffset: number;
}

export const sizeofLINELOCATIONENTRY = 72;

export function allocLINELOCATIONENTRY(data?: Partial<LINELOCATIONENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINELOCATIONENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPermanentLocationID !== undefined) view.setUint32(0, Number(data.dwPermanentLocationID), true);
  // 0x04: u32
  if (data?.dwLocationNameSize !== undefined) view.setUint32(4, Number(data.dwLocationNameSize), true);
  // 0x08: u32
  if (data?.dwLocationNameOffset !== undefined) view.setUint32(8, Number(data.dwLocationNameOffset), true);
  // 0x0c: u32
  if (data?.dwCountryCode !== undefined) view.setUint32(12, Number(data.dwCountryCode), true);
  // 0x10: u32
  if (data?.dwCityCodeSize !== undefined) view.setUint32(16, Number(data.dwCityCodeSize), true);
  // 0x14: u32
  if (data?.dwCityCodeOffset !== undefined) view.setUint32(20, Number(data.dwCityCodeOffset), true);
  // 0x18: u32
  if (data?.dwPreferredCardID !== undefined) view.setUint32(24, Number(data.dwPreferredCardID), true);
  // 0x1c: u32
  if (data?.dwLocalAccessCodeSize !== undefined) view.setUint32(28, Number(data.dwLocalAccessCodeSize), true);
  // 0x20: u32
  if (data?.dwLocalAccessCodeOffset !== undefined) view.setUint32(32, Number(data.dwLocalAccessCodeOffset), true);
  // 0x24: u32
  if (data?.dwLongDistanceAccessCodeSize !== undefined) view.setUint32(36, Number(data.dwLongDistanceAccessCodeSize), true);
  // 0x28: u32
  if (data?.dwLongDistanceAccessCodeOffset !== undefined) view.setUint32(40, Number(data.dwLongDistanceAccessCodeOffset), true);
  // 0x2c: u32
  if (data?.dwTollPrefixListSize !== undefined) view.setUint32(44, Number(data.dwTollPrefixListSize), true);
  // 0x30: u32
  if (data?.dwTollPrefixListOffset !== undefined) view.setUint32(48, Number(data.dwTollPrefixListOffset), true);
  // 0x34: u32
  if (data?.dwCountryID !== undefined) view.setUint32(52, Number(data.dwCountryID), true);
  // 0x38: u32
  if (data?.dwOptions !== undefined) view.setUint32(56, Number(data.dwOptions), true);
  // 0x3c: u32
  if (data?.dwCancelCallWaitingSize !== undefined) view.setUint32(60, Number(data.dwCancelCallWaitingSize), true);
  // 0x40: u32
  if (data?.dwCancelCallWaitingOffset !== undefined) view.setUint32(64, Number(data.dwCancelCallWaitingOffset), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEMEDIACONTROLCALLSTATE (size: 8)
 */
export interface LINEMEDIACONTROLCALLSTATE {
  /** u32 */
  dwCallStates: number;
  /** u32 */
  dwMediaControl: number;
}

export const sizeofLINEMEDIACONTROLCALLSTATE = 8;

export function allocLINEMEDIACONTROLCALLSTATE(data?: Partial<LINEMEDIACONTROLCALLSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEMEDIACONTROLCALLSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCallStates !== undefined) view.setUint32(0, Number(data.dwCallStates), true);
  // 0x04: u32
  if (data?.dwMediaControl !== undefined) view.setUint32(4, Number(data.dwMediaControl), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEMEDIACONTROLDIGIT (size: 16)
 */
export interface LINEMEDIACONTROLDIGIT {
  /** u32 */
  dwDigit: number;
  /** u32 */
  dwDigitModes: number;
  /** u32 */
  dwMediaControl: number;
}

export const sizeofLINEMEDIACONTROLDIGIT = 16;

export function allocLINEMEDIACONTROLDIGIT(data?: Partial<LINEMEDIACONTROLDIGIT>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEMEDIACONTROLDIGIT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDigit !== undefined) view.setUint32(0, Number(data.dwDigit), true);
  // 0x04: u32
  if (data?.dwDigitModes !== undefined) view.setUint32(4, Number(data.dwDigitModes), true);
  // 0x08: u32
  if (data?.dwMediaControl !== undefined) view.setUint32(8, Number(data.dwMediaControl), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEMEDIACONTROLMEDIA (size: 16)
 */
export interface LINEMEDIACONTROLMEDIA {
  /** u32 */
  dwMediaModes: number;
  /** u32 */
  dwDuration: number;
  /** u32 */
  dwMediaControl: number;
}

export const sizeofLINEMEDIACONTROLMEDIA = 16;

export function allocLINEMEDIACONTROLMEDIA(data?: Partial<LINEMEDIACONTROLMEDIA>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEMEDIACONTROLMEDIA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMediaModes !== undefined) view.setUint32(0, Number(data.dwMediaModes), true);
  // 0x04: u32
  if (data?.dwDuration !== undefined) view.setUint32(4, Number(data.dwDuration), true);
  // 0x08: u32
  if (data?.dwMediaControl !== undefined) view.setUint32(8, Number(data.dwMediaControl), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEMEDIACONTROLTONE (size: 24)
 */
export interface LINEMEDIACONTROLTONE {
  /** u32 */
  dwAppSpecific: number;
  /** u32 */
  dwDuration: number;
  /** u32 */
  dwFrequency1: number;
  /** u32 */
  dwFrequency2: number;
  /** u32 */
  dwFrequency3: number;
  /** u32 */
  dwMediaControl: number;
}

export const sizeofLINEMEDIACONTROLTONE = 24;

export function allocLINEMEDIACONTROLTONE(data?: Partial<LINEMEDIACONTROLTONE>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEMEDIACONTROLTONE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAppSpecific !== undefined) view.setUint32(0, Number(data.dwAppSpecific), true);
  // 0x04: u32
  if (data?.dwDuration !== undefined) view.setUint32(4, Number(data.dwDuration), true);
  // 0x08: u32
  if (data?.dwFrequency1 !== undefined) view.setUint32(8, Number(data.dwFrequency1), true);
  // 0x0c: u32
  if (data?.dwFrequency2 !== undefined) view.setUint32(12, Number(data.dwFrequency2), true);
  // 0x10: u32
  if (data?.dwFrequency3 !== undefined) view.setUint32(16, Number(data.dwFrequency3), true);
  // 0x14: u32
  if (data?.dwMediaControl !== undefined) view.setUint32(20, Number(data.dwMediaControl), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEMESSAGE (size: 40)
 */
export interface LINEMESSAGE {
  /** u32 */
  hDevice: number;
  /** u32 */
  dwMessageID: number;
  /** usize */
  dwCallbackInstance: Deno.PointerValue;
  /** usize */
  dwParam1: Deno.PointerValue;
  /** usize */
  dwParam2: Deno.PointerValue;
  /** usize */
  dwParam3: Deno.PointerValue;
}

export const sizeofLINEMESSAGE = 40;

export function allocLINEMESSAGE(data?: Partial<LINEMESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEMESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hDevice !== undefined) view.setUint32(0, Number(data.hDevice), true);
  // 0x04: u32
  if (data?.dwMessageID !== undefined) view.setUint32(4, Number(data.dwMessageID), true);
  // 0x08: usize
  if (data?.dwCallbackInstance !== undefined) view.setBigUint64(8, BigInt(data.dwCallbackInstance), true);
  // 0x10: usize
  if (data?.dwParam1 !== undefined) view.setBigUint64(16, BigInt(data.dwParam1), true);
  // 0x18: usize
  if (data?.dwParam2 !== undefined) view.setBigUint64(24, BigInt(data.dwParam2), true);
  // 0x20: usize
  if (data?.dwParam3 !== undefined) view.setBigUint64(32, BigInt(data.dwParam3), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEMONITORTONE (size: 24)
 */
export interface LINEMONITORTONE {
  /** u32 */
  dwAppSpecific: number;
  /** u32 */
  dwDuration: number;
  /** u32 */
  dwFrequency1: number;
  /** u32 */
  dwFrequency2: number;
  /** u32 */
  dwFrequency3: number;
}

export const sizeofLINEMONITORTONE = 24;

export function allocLINEMONITORTONE(data?: Partial<LINEMONITORTONE>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEMONITORTONE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAppSpecific !== undefined) view.setUint32(0, Number(data.dwAppSpecific), true);
  // 0x04: u32
  if (data?.dwDuration !== undefined) view.setUint32(4, Number(data.dwDuration), true);
  // 0x08: u32
  if (data?.dwFrequency1 !== undefined) view.setUint32(8, Number(data.dwFrequency1), true);
  // 0x0c: u32
  if (data?.dwFrequency2 !== undefined) view.setUint32(12, Number(data.dwFrequency2), true);
  // 0x10: u32
  if (data?.dwFrequency3 !== undefined) view.setUint32(16, Number(data.dwFrequency3), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEPROVIDERENTRY (size: 16)
 */
export interface LINEPROVIDERENTRY {
  /** u32 */
  dwPermanentProviderID: number;
  /** u32 */
  dwProviderFilenameSize: number;
  /** u32 */
  dwProviderFilenameOffset: number;
}

export const sizeofLINEPROVIDERENTRY = 16;

export function allocLINEPROVIDERENTRY(data?: Partial<LINEPROVIDERENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEPROVIDERENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPermanentProviderID !== undefined) view.setUint32(0, Number(data.dwPermanentProviderID), true);
  // 0x04: u32
  if (data?.dwProviderFilenameSize !== undefined) view.setUint32(4, Number(data.dwProviderFilenameSize), true);
  // 0x08: u32
  if (data?.dwProviderFilenameOffset !== undefined) view.setUint32(8, Number(data.dwProviderFilenameOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEPROVIDERLIST (size: 24)
 */
export interface LINEPROVIDERLIST {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumProviders: number;
  /** u32 */
  dwProviderListSize: number;
  /** u32 */
  dwProviderListOffset: number;
}

export const sizeofLINEPROVIDERLIST = 24;

export function allocLINEPROVIDERLIST(data?: Partial<LINEPROVIDERLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEPROVIDERLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumProviders !== undefined) view.setUint32(12, Number(data.dwNumProviders), true);
  // 0x10: u32
  if (data?.dwProviderListSize !== undefined) view.setUint32(16, Number(data.dwProviderListSize), true);
  // 0x14: u32
  if (data?.dwProviderListOffset !== undefined) view.setUint32(20, Number(data.dwProviderListOffset), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEPROXYREQUEST (size: 40)
 */
export interface LINEPROXYREQUEST {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwClientMachineNameSize: number;
  /** u32 */
  dwClientMachineNameOffset: number;
  /** u32 */
  dwClientUserNameSize: number;
  /** u32 */
  dwClientUserNameOffset: number;
  /** u32 */
  dwClientAppAPIVersion: number;
  /** u32 */
  dwRequestType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLINEPROXYREQUEST = 40;

export function allocLINEPROXYREQUEST(data?: Partial<LINEPROXYREQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEPROXYREQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwClientMachineNameSize !== undefined) view.setUint32(4, Number(data.dwClientMachineNameSize), true);
  // 0x08: u32
  if (data?.dwClientMachineNameOffset !== undefined) view.setUint32(8, Number(data.dwClientMachineNameOffset), true);
  // 0x0c: u32
  if (data?.dwClientUserNameSize !== undefined) view.setUint32(12, Number(data.dwClientUserNameSize), true);
  // 0x10: u32
  if (data?.dwClientUserNameOffset !== undefined) view.setUint32(16, Number(data.dwClientUserNameOffset), true);
  // 0x14: u32
  if (data?.dwClientAppAPIVersion !== undefined) view.setUint32(20, Number(data.dwClientAppAPIVersion), true);
  // 0x18: u32
  if (data?.dwRequestType !== undefined) view.setUint32(24, Number(data.dwRequestType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEREQMAKECALL (size: 32)
 */
export interface LINEREQMAKECALL {
  /** array */
  szDestAddress: Deno.PointerValue | null;
  /** array */
  szAppName: Deno.PointerValue | null;
  /** array */
  szCalledParty: Deno.PointerValue | null;
  /** array */
  szComment: Deno.PointerValue | null;
}

export const sizeofLINEREQMAKECALL = 32;

export function allocLINEREQMAKECALL(data?: Partial<LINEREQMAKECALL>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEREQMAKECALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szDestAddress !== undefined) view.setBigUint64(0, data.szDestAddress === null ? 0n : BigInt(util.toPointer(data.szDestAddress)), true);
  // 0x08: pointer
  if (data?.szAppName !== undefined) view.setBigUint64(8, data.szAppName === null ? 0n : BigInt(util.toPointer(data.szAppName)), true);
  // 0x10: pointer
  if (data?.szCalledParty !== undefined) view.setBigUint64(16, data.szCalledParty === null ? 0n : BigInt(util.toPointer(data.szCalledParty)), true);
  // 0x18: pointer
  if (data?.szComment !== undefined) view.setBigUint64(24, data.szComment === null ? 0n : BigInt(util.toPointer(data.szComment)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEREQMAKECALLW (size: 32)
 */
export interface LINEREQMAKECALLW {
  /** array */
  szDestAddress: Deno.PointerValue | null;
  /** array */
  szAppName: Deno.PointerValue | null;
  /** array */
  szCalledParty: Deno.PointerValue | null;
  /** array */
  szComment: Deno.PointerValue | null;
}

export const sizeofLINEREQMAKECALLW = 32;

export function allocLINEREQMAKECALLW(data?: Partial<LINEREQMAKECALLW>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEREQMAKECALLW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szDestAddress !== undefined) view.setBigUint64(0, data.szDestAddress === null ? 0n : BigInt(util.toPointer(data.szDestAddress)), true);
  // 0x08: pointer
  if (data?.szAppName !== undefined) view.setBigUint64(8, data.szAppName === null ? 0n : BigInt(util.toPointer(data.szAppName)), true);
  // 0x10: pointer
  if (data?.szCalledParty !== undefined) view.setBigUint64(16, data.szCalledParty === null ? 0n : BigInt(util.toPointer(data.szCalledParty)), true);
  // 0x18: pointer
  if (data?.szComment !== undefined) view.setBigUint64(24, data.szComment === null ? 0n : BigInt(util.toPointer(data.szComment)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

export type WPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Tapi.LINEREQMEDIACALL (size: 72)
 */
export interface LINEREQMEDIACALL {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.WPARAM */
  wRequestID: Uint8Array | Deno.PointerValue | null;
  /** array */
  szDeviceClass: Deno.PointerValue | null;
  /** array */
  ucDeviceID: Deno.PointerValue | null;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSecure: number;
  /** array */
  szDestAddress: Deno.PointerValue | null;
  /** array */
  szAppName: Deno.PointerValue | null;
  /** array */
  szCalledParty: Deno.PointerValue | null;
  /** array */
  szComment: Deno.PointerValue | null;
}

export const sizeofLINEREQMEDIACALL = 72;

export function allocLINEREQMEDIACALL(data?: Partial<LINEREQMEDIACALL>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEREQMEDIACALL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x08: pointer
  if (data?.wRequestID !== undefined) view.setBigUint64(8, data.wRequestID === null ? 0n : BigInt(util.toPointer(data.wRequestID)), true);
  // 0x10: pointer
  if (data?.szDeviceClass !== undefined) view.setBigUint64(16, data.szDeviceClass === null ? 0n : BigInt(util.toPointer(data.szDeviceClass)), true);
  // 0x18: pointer
  if (data?.ucDeviceID !== undefined) view.setBigUint64(24, data.ucDeviceID === null ? 0n : BigInt(util.toPointer(data.ucDeviceID)), true);
  // 0x20: u32
  if (data?.dwSize !== undefined) view.setUint32(32, Number(data.dwSize), true);
  // 0x24: u32
  if (data?.dwSecure !== undefined) view.setUint32(36, Number(data.dwSecure), true);
  // 0x28: pointer
  if (data?.szDestAddress !== undefined) view.setBigUint64(40, data.szDestAddress === null ? 0n : BigInt(util.toPointer(data.szDestAddress)), true);
  // 0x30: pointer
  if (data?.szAppName !== undefined) view.setBigUint64(48, data.szAppName === null ? 0n : BigInt(util.toPointer(data.szAppName)), true);
  // 0x38: pointer
  if (data?.szCalledParty !== undefined) view.setBigUint64(56, data.szCalledParty === null ? 0n : BigInt(util.toPointer(data.szCalledParty)), true);
  // 0x40: pointer
  if (data?.szComment !== undefined) view.setBigUint64(64, data.szComment === null ? 0n : BigInt(util.toPointer(data.szComment)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINEREQMEDIACALLW (size: 72)
 */
export interface LINEREQMEDIACALLW {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.WPARAM */
  wRequestID: Uint8Array | Deno.PointerValue | null;
  /** array */
  szDeviceClass: Deno.PointerValue | null;
  /** array */
  ucDeviceID: Deno.PointerValue | null;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSecure: number;
  /** array */
  szDestAddress: Deno.PointerValue | null;
  /** array */
  szAppName: Deno.PointerValue | null;
  /** array */
  szCalledParty: Deno.PointerValue | null;
  /** array */
  szComment: Deno.PointerValue | null;
}

export const sizeofLINEREQMEDIACALLW = 72;

export function allocLINEREQMEDIACALLW(data?: Partial<LINEREQMEDIACALLW>): Uint8Array {
  const buf = new Uint8Array(sizeofLINEREQMEDIACALLW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x08: pointer
  if (data?.wRequestID !== undefined) view.setBigUint64(8, data.wRequestID === null ? 0n : BigInt(util.toPointer(data.wRequestID)), true);
  // 0x10: pointer
  if (data?.szDeviceClass !== undefined) view.setBigUint64(16, data.szDeviceClass === null ? 0n : BigInt(util.toPointer(data.szDeviceClass)), true);
  // 0x18: pointer
  if (data?.ucDeviceID !== undefined) view.setBigUint64(24, data.ucDeviceID === null ? 0n : BigInt(util.toPointer(data.ucDeviceID)), true);
  // 0x20: u32
  if (data?.dwSize !== undefined) view.setUint32(32, Number(data.dwSize), true);
  // 0x24: u32
  if (data?.dwSecure !== undefined) view.setUint32(36, Number(data.dwSecure), true);
  // 0x28: pointer
  if (data?.szDestAddress !== undefined) view.setBigUint64(40, data.szDestAddress === null ? 0n : BigInt(util.toPointer(data.szDestAddress)), true);
  // 0x30: pointer
  if (data?.szAppName !== undefined) view.setBigUint64(48, data.szAppName === null ? 0n : BigInt(util.toPointer(data.szAppName)), true);
  // 0x38: pointer
  if (data?.szCalledParty !== undefined) view.setBigUint64(56, data.szCalledParty === null ? 0n : BigInt(util.toPointer(data.szCalledParty)), true);
  // 0x40: pointer
  if (data?.szComment !== undefined) view.setBigUint64(64, data.szComment === null ? 0n : BigInt(util.toPointer(data.szComment)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINETERMCAPS (size: 16)
 */
export interface LINETERMCAPS {
  /** u32 */
  dwTermDev: number;
  /** u32 */
  dwTermModes: number;
  /** u32 */
  dwTermSharing: number;
}

export const sizeofLINETERMCAPS = 16;

export function allocLINETERMCAPS(data?: Partial<LINETERMCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINETERMCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTermDev !== undefined) view.setUint32(0, Number(data.dwTermDev), true);
  // 0x04: u32
  if (data?.dwTermModes !== undefined) view.setUint32(4, Number(data.dwTermModes), true);
  // 0x08: u32
  if (data?.dwTermSharing !== undefined) view.setUint32(8, Number(data.dwTermSharing), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINETRANSLATECAPS (size: 48)
 */
export interface LINETRANSLATECAPS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwNumLocations: number;
  /** u32 */
  dwLocationListSize: number;
  /** u32 */
  dwLocationListOffset: number;
  /** u32 */
  dwCurrentLocationID: number;
  /** u32 */
  dwNumCards: number;
  /** u32 */
  dwCardListSize: number;
  /** u32 */
  dwCardListOffset: number;
  /** u32 */
  dwCurrentPreferredCardID: number;
}

export const sizeofLINETRANSLATECAPS = 48;

export function allocLINETRANSLATECAPS(data?: Partial<LINETRANSLATECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofLINETRANSLATECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwNumLocations !== undefined) view.setUint32(12, Number(data.dwNumLocations), true);
  // 0x10: u32
  if (data?.dwLocationListSize !== undefined) view.setUint32(16, Number(data.dwLocationListSize), true);
  // 0x14: u32
  if (data?.dwLocationListOffset !== undefined) view.setUint32(20, Number(data.dwLocationListOffset), true);
  // 0x18: u32
  if (data?.dwCurrentLocationID !== undefined) view.setUint32(24, Number(data.dwCurrentLocationID), true);
  // 0x1c: u32
  if (data?.dwNumCards !== undefined) view.setUint32(28, Number(data.dwNumCards), true);
  // 0x20: u32
  if (data?.dwCardListSize !== undefined) view.setUint32(32, Number(data.dwCardListSize), true);
  // 0x24: u32
  if (data?.dwCardListOffset !== undefined) view.setUint32(36, Number(data.dwCardListOffset), true);
  // 0x28: u32
  if (data?.dwCurrentPreferredCardID !== undefined) view.setUint32(40, Number(data.dwCurrentPreferredCardID), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.LINETRANSLATEOUTPUT (size: 40)
 */
export interface LINETRANSLATEOUTPUT {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwDialableStringSize: number;
  /** u32 */
  dwDialableStringOffset: number;
  /** u32 */
  dwDisplayableStringSize: number;
  /** u32 */
  dwDisplayableStringOffset: number;
  /** u32 */
  dwCurrentCountry: number;
  /** u32 */
  dwDestCountry: number;
  /** u32 */
  dwTranslateResults: number;
}

export const sizeofLINETRANSLATEOUTPUT = 40;

export function allocLINETRANSLATEOUTPUT(data?: Partial<LINETRANSLATEOUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofLINETRANSLATEOUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwDialableStringSize !== undefined) view.setUint32(12, Number(data.dwDialableStringSize), true);
  // 0x10: u32
  if (data?.dwDialableStringOffset !== undefined) view.setUint32(16, Number(data.dwDialableStringOffset), true);
  // 0x14: u32
  if (data?.dwDisplayableStringSize !== undefined) view.setUint32(20, Number(data.dwDisplayableStringSize), true);
  // 0x18: u32
  if (data?.dwDisplayableStringOffset !== undefined) view.setUint32(24, Number(data.dwDisplayableStringOffset), true);
  // 0x1c: u32
  if (data?.dwCurrentCountry !== undefined) view.setUint32(28, Number(data.dwCurrentCountry), true);
  // 0x20: u32
  if (data?.dwDestCountry !== undefined) view.setUint32(32, Number(data.dwDestCountry), true);
  // 0x24: u32
  if (data?.dwTranslateResults !== undefined) view.setUint32(36, Number(data.dwTranslateResults), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.PHONEBUTTONINFO (size: 40)
 */
export interface PHONEBUTTONINFO {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwButtonMode: number;
  /** u32 */
  dwButtonFunction: number;
  /** u32 */
  dwButtonTextSize: number;
  /** u32 */
  dwButtonTextOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwButtonState: number;
}

export const sizeofPHONEBUTTONINFO = 40;

export function allocPHONEBUTTONINFO(data?: Partial<PHONEBUTTONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPHONEBUTTONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwButtonMode !== undefined) view.setUint32(12, Number(data.dwButtonMode), true);
  // 0x10: u32
  if (data?.dwButtonFunction !== undefined) view.setUint32(16, Number(data.dwButtonFunction), true);
  // 0x14: u32
  if (data?.dwButtonTextSize !== undefined) view.setUint32(20, Number(data.dwButtonTextSize), true);
  // 0x18: u32
  if (data?.dwButtonTextOffset !== undefined) view.setUint32(24, Number(data.dwButtonTextOffset), true);
  // 0x1c: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(28, Number(data.dwDevSpecificSize), true);
  // 0x20: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(32, Number(data.dwDevSpecificOffset), true);
  // 0x24: u32
  if (data?.dwButtonState !== undefined) view.setUint32(36, Number(data.dwButtonState), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.PHONECAPS (size: 192)
 */
export interface PHONECAPS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwProviderInfoSize: number;
  /** u32 */
  dwProviderInfoOffset: number;
  /** u32 */
  dwPhoneInfoSize: number;
  /** u32 */
  dwPhoneInfoOffset: number;
  /** u32 */
  dwPermanentPhoneID: number;
  /** u32 */
  dwPhoneNameSize: number;
  /** u32 */
  dwPhoneNameOffset: number;
  /** u32 */
  dwStringFormat: number;
  /** u32 */
  dwPhoneStates: number;
  /** u32 */
  dwHookSwitchDevs: number;
  /** u32 */
  dwHandsetHookSwitchModes: number;
  /** u32 */
  dwSpeakerHookSwitchModes: number;
  /** u32 */
  dwHeadsetHookSwitchModes: number;
  /** u32 */
  dwVolumeFlags: number;
  /** u32 */
  dwGainFlags: number;
  /** u32 */
  dwDisplayNumRows: number;
  /** u32 */
  dwDisplayNumColumns: number;
  /** u32 */
  dwNumRingModes: number;
  /** u32 */
  dwNumButtonLamps: number;
  /** u32 */
  dwButtonModesSize: number;
  /** u32 */
  dwButtonModesOffset: number;
  /** u32 */
  dwButtonFunctionsSize: number;
  /** u32 */
  dwButtonFunctionsOffset: number;
  /** u32 */
  dwLampModesSize: number;
  /** u32 */
  dwLampModesOffset: number;
  /** u32 */
  dwNumSetData: number;
  /** u32 */
  dwSetDataSize: number;
  /** u32 */
  dwSetDataOffset: number;
  /** u32 */
  dwNumGetData: number;
  /** u32 */
  dwGetDataSize: number;
  /** u32 */
  dwGetDataOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwDeviceClassesSize: number;
  /** u32 */
  dwDeviceClassesOffset: number;
  /** u32 */
  dwPhoneFeatures: number;
  /** u32 */
  dwSettableHandsetHookSwitchModes: number;
  /** u32 */
  dwSettableSpeakerHookSwitchModes: number;
  /** u32 */
  dwSettableHeadsetHookSwitchModes: number;
  /** u32 */
  dwMonitoredHandsetHookSwitchModes: number;
  /** u32 */
  dwMonitoredSpeakerHookSwitchModes: number;
  /** u32 */
  dwMonitoredHeadsetHookSwitchModes: number;
  /** System.Guid */
  PermanentPhoneGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPHONECAPS = 192;

export function allocPHONECAPS(data?: Partial<PHONECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofPHONECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwProviderInfoSize !== undefined) view.setUint32(12, Number(data.dwProviderInfoSize), true);
  // 0x10: u32
  if (data?.dwProviderInfoOffset !== undefined) view.setUint32(16, Number(data.dwProviderInfoOffset), true);
  // 0x14: u32
  if (data?.dwPhoneInfoSize !== undefined) view.setUint32(20, Number(data.dwPhoneInfoSize), true);
  // 0x18: u32
  if (data?.dwPhoneInfoOffset !== undefined) view.setUint32(24, Number(data.dwPhoneInfoOffset), true);
  // 0x1c: u32
  if (data?.dwPermanentPhoneID !== undefined) view.setUint32(28, Number(data.dwPermanentPhoneID), true);
  // 0x20: u32
  if (data?.dwPhoneNameSize !== undefined) view.setUint32(32, Number(data.dwPhoneNameSize), true);
  // 0x24: u32
  if (data?.dwPhoneNameOffset !== undefined) view.setUint32(36, Number(data.dwPhoneNameOffset), true);
  // 0x28: u32
  if (data?.dwStringFormat !== undefined) view.setUint32(40, Number(data.dwStringFormat), true);
  // 0x2c: u32
  if (data?.dwPhoneStates !== undefined) view.setUint32(44, Number(data.dwPhoneStates), true);
  // 0x30: u32
  if (data?.dwHookSwitchDevs !== undefined) view.setUint32(48, Number(data.dwHookSwitchDevs), true);
  // 0x34: u32
  if (data?.dwHandsetHookSwitchModes !== undefined) view.setUint32(52, Number(data.dwHandsetHookSwitchModes), true);
  // 0x38: u32
  if (data?.dwSpeakerHookSwitchModes !== undefined) view.setUint32(56, Number(data.dwSpeakerHookSwitchModes), true);
  // 0x3c: u32
  if (data?.dwHeadsetHookSwitchModes !== undefined) view.setUint32(60, Number(data.dwHeadsetHookSwitchModes), true);
  // 0x40: u32
  if (data?.dwVolumeFlags !== undefined) view.setUint32(64, Number(data.dwVolumeFlags), true);
  // 0x44: u32
  if (data?.dwGainFlags !== undefined) view.setUint32(68, Number(data.dwGainFlags), true);
  // 0x48: u32
  if (data?.dwDisplayNumRows !== undefined) view.setUint32(72, Number(data.dwDisplayNumRows), true);
  // 0x4c: u32
  if (data?.dwDisplayNumColumns !== undefined) view.setUint32(76, Number(data.dwDisplayNumColumns), true);
  // 0x50: u32
  if (data?.dwNumRingModes !== undefined) view.setUint32(80, Number(data.dwNumRingModes), true);
  // 0x54: u32
  if (data?.dwNumButtonLamps !== undefined) view.setUint32(84, Number(data.dwNumButtonLamps), true);
  // 0x58: u32
  if (data?.dwButtonModesSize !== undefined) view.setUint32(88, Number(data.dwButtonModesSize), true);
  // 0x5c: u32
  if (data?.dwButtonModesOffset !== undefined) view.setUint32(92, Number(data.dwButtonModesOffset), true);
  // 0x60: u32
  if (data?.dwButtonFunctionsSize !== undefined) view.setUint32(96, Number(data.dwButtonFunctionsSize), true);
  // 0x64: u32
  if (data?.dwButtonFunctionsOffset !== undefined) view.setUint32(100, Number(data.dwButtonFunctionsOffset), true);
  // 0x68: u32
  if (data?.dwLampModesSize !== undefined) view.setUint32(104, Number(data.dwLampModesSize), true);
  // 0x6c: u32
  if (data?.dwLampModesOffset !== undefined) view.setUint32(108, Number(data.dwLampModesOffset), true);
  // 0x70: u32
  if (data?.dwNumSetData !== undefined) view.setUint32(112, Number(data.dwNumSetData), true);
  // 0x74: u32
  if (data?.dwSetDataSize !== undefined) view.setUint32(116, Number(data.dwSetDataSize), true);
  // 0x78: u32
  if (data?.dwSetDataOffset !== undefined) view.setUint32(120, Number(data.dwSetDataOffset), true);
  // 0x7c: u32
  if (data?.dwNumGetData !== undefined) view.setUint32(124, Number(data.dwNumGetData), true);
  // 0x80: u32
  if (data?.dwGetDataSize !== undefined) view.setUint32(128, Number(data.dwGetDataSize), true);
  // 0x84: u32
  if (data?.dwGetDataOffset !== undefined) view.setUint32(132, Number(data.dwGetDataOffset), true);
  // 0x88: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(136, Number(data.dwDevSpecificSize), true);
  // 0x8c: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(140, Number(data.dwDevSpecificOffset), true);
  // 0x90: u32
  if (data?.dwDeviceClassesSize !== undefined) view.setUint32(144, Number(data.dwDeviceClassesSize), true);
  // 0x94: u32
  if (data?.dwDeviceClassesOffset !== undefined) view.setUint32(148, Number(data.dwDeviceClassesOffset), true);
  // 0x98: u32
  if (data?.dwPhoneFeatures !== undefined) view.setUint32(152, Number(data.dwPhoneFeatures), true);
  // 0x9c: u32
  if (data?.dwSettableHandsetHookSwitchModes !== undefined) view.setUint32(156, Number(data.dwSettableHandsetHookSwitchModes), true);
  // 0xa0: u32
  if (data?.dwSettableSpeakerHookSwitchModes !== undefined) view.setUint32(160, Number(data.dwSettableSpeakerHookSwitchModes), true);
  // 0xa4: u32
  if (data?.dwSettableHeadsetHookSwitchModes !== undefined) view.setUint32(164, Number(data.dwSettableHeadsetHookSwitchModes), true);
  // 0xa8: u32
  if (data?.dwMonitoredHandsetHookSwitchModes !== undefined) view.setUint32(168, Number(data.dwMonitoredHandsetHookSwitchModes), true);
  // 0xac: u32
  if (data?.dwMonitoredSpeakerHookSwitchModes !== undefined) view.setUint32(172, Number(data.dwMonitoredSpeakerHookSwitchModes), true);
  // 0xb0: u32
  if (data?.dwMonitoredHeadsetHookSwitchModes !== undefined) view.setUint32(176, Number(data.dwMonitoredHeadsetHookSwitchModes), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.PermanentPhoneGuid !== undefined) view.setBigUint64(184, data.PermanentPhoneGuid === null ? 0n : BigInt(util.toPointer(data.PermanentPhoneGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.PHONEEXTENSIONID (size: 16)
 */
export interface PHONEEXTENSIONID {
  /** u32 */
  dwExtensionID0: number;
  /** u32 */
  dwExtensionID1: number;
  /** u32 */
  dwExtensionID2: number;
  /** u32 */
  dwExtensionID3: number;
}

export const sizeofPHONEEXTENSIONID = 16;

export function allocPHONEEXTENSIONID(data?: Partial<PHONEEXTENSIONID>): Uint8Array {
  const buf = new Uint8Array(sizeofPHONEEXTENSIONID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExtensionID0 !== undefined) view.setUint32(0, Number(data.dwExtensionID0), true);
  // 0x04: u32
  if (data?.dwExtensionID1 !== undefined) view.setUint32(4, Number(data.dwExtensionID1), true);
  // 0x08: u32
  if (data?.dwExtensionID2 !== undefined) view.setUint32(8, Number(data.dwExtensionID2), true);
  // 0x0c: u32
  if (data?.dwExtensionID3 !== undefined) view.setUint32(12, Number(data.dwExtensionID3), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.PHONEINITIALIZEEXPARAMS (size: 32)
 */
export interface PHONEINITIALIZEEXPARAMS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwOptions: number;
  /** _Handles_e__Union */
  Handles: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCompletionKey: number;
}

export const sizeofPHONEINITIALIZEEXPARAMS = 32;

export function allocPHONEINITIALIZEEXPARAMS(data?: Partial<PHONEINITIALIZEEXPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofPHONEINITIALIZEEXPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwOptions !== undefined) view.setUint32(12, Number(data.dwOptions), true);
  // 0x10: pointer
  if (data?.Handles !== undefined) view.setBigUint64(16, data.Handles === null ? 0n : BigInt(util.toPointer(data.Handles)), true);
  // 0x18: u32
  if (data?.dwCompletionKey !== undefined) view.setUint32(24, Number(data.dwCompletionKey), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.PHONEMESSAGE (size: 40)
 */
export interface PHONEMESSAGE {
  /** u32 */
  hDevice: number;
  /** u32 */
  dwMessageID: number;
  /** usize */
  dwCallbackInstance: Deno.PointerValue;
  /** usize */
  dwParam1: Deno.PointerValue;
  /** usize */
  dwParam2: Deno.PointerValue;
  /** usize */
  dwParam3: Deno.PointerValue;
}

export const sizeofPHONEMESSAGE = 40;

export function allocPHONEMESSAGE(data?: Partial<PHONEMESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPHONEMESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hDevice !== undefined) view.setUint32(0, Number(data.hDevice), true);
  // 0x04: u32
  if (data?.dwMessageID !== undefined) view.setUint32(4, Number(data.dwMessageID), true);
  // 0x08: usize
  if (data?.dwCallbackInstance !== undefined) view.setBigUint64(8, BigInt(data.dwCallbackInstance), true);
  // 0x10: usize
  if (data?.dwParam1 !== undefined) view.setBigUint64(16, BigInt(data.dwParam1), true);
  // 0x18: usize
  if (data?.dwParam2 !== undefined) view.setBigUint64(24, BigInt(data.dwParam2), true);
  // 0x20: usize
  if (data?.dwParam3 !== undefined) view.setBigUint64(32, BigInt(data.dwParam3), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.PHONESTATUS (size: 104)
 */
export interface PHONESTATUS {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwStatusFlags: number;
  /** u32 */
  dwNumOwners: number;
  /** u32 */
  dwNumMonitors: number;
  /** u32 */
  dwRingMode: number;
  /** u32 */
  dwRingVolume: number;
  /** u32 */
  dwHandsetHookSwitchMode: number;
  /** u32 */
  dwHandsetVolume: number;
  /** u32 */
  dwHandsetGain: number;
  /** u32 */
  dwSpeakerHookSwitchMode: number;
  /** u32 */
  dwSpeakerVolume: number;
  /** u32 */
  dwSpeakerGain: number;
  /** u32 */
  dwHeadsetHookSwitchMode: number;
  /** u32 */
  dwHeadsetVolume: number;
  /** u32 */
  dwHeadsetGain: number;
  /** u32 */
  dwDisplaySize: number;
  /** u32 */
  dwDisplayOffset: number;
  /** u32 */
  dwLampModesSize: number;
  /** u32 */
  dwLampModesOffset: number;
  /** u32 */
  dwOwnerNameSize: number;
  /** u32 */
  dwOwnerNameOffset: number;
  /** u32 */
  dwDevSpecificSize: number;
  /** u32 */
  dwDevSpecificOffset: number;
  /** u32 */
  dwPhoneFeatures: number;
}

export const sizeofPHONESTATUS = 104;

export function allocPHONESTATUS(data?: Partial<PHONESTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofPHONESTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwStatusFlags !== undefined) view.setUint32(12, Number(data.dwStatusFlags), true);
  // 0x10: u32
  if (data?.dwNumOwners !== undefined) view.setUint32(16, Number(data.dwNumOwners), true);
  // 0x14: u32
  if (data?.dwNumMonitors !== undefined) view.setUint32(20, Number(data.dwNumMonitors), true);
  // 0x18: u32
  if (data?.dwRingMode !== undefined) view.setUint32(24, Number(data.dwRingMode), true);
  // 0x1c: u32
  if (data?.dwRingVolume !== undefined) view.setUint32(28, Number(data.dwRingVolume), true);
  // 0x20: u32
  if (data?.dwHandsetHookSwitchMode !== undefined) view.setUint32(32, Number(data.dwHandsetHookSwitchMode), true);
  // 0x24: u32
  if (data?.dwHandsetVolume !== undefined) view.setUint32(36, Number(data.dwHandsetVolume), true);
  // 0x28: u32
  if (data?.dwHandsetGain !== undefined) view.setUint32(40, Number(data.dwHandsetGain), true);
  // 0x2c: u32
  if (data?.dwSpeakerHookSwitchMode !== undefined) view.setUint32(44, Number(data.dwSpeakerHookSwitchMode), true);
  // 0x30: u32
  if (data?.dwSpeakerVolume !== undefined) view.setUint32(48, Number(data.dwSpeakerVolume), true);
  // 0x34: u32
  if (data?.dwSpeakerGain !== undefined) view.setUint32(52, Number(data.dwSpeakerGain), true);
  // 0x38: u32
  if (data?.dwHeadsetHookSwitchMode !== undefined) view.setUint32(56, Number(data.dwHeadsetHookSwitchMode), true);
  // 0x3c: u32
  if (data?.dwHeadsetVolume !== undefined) view.setUint32(60, Number(data.dwHeadsetVolume), true);
  // 0x40: u32
  if (data?.dwHeadsetGain !== undefined) view.setUint32(64, Number(data.dwHeadsetGain), true);
  // 0x44: u32
  if (data?.dwDisplaySize !== undefined) view.setUint32(68, Number(data.dwDisplaySize), true);
  // 0x48: u32
  if (data?.dwDisplayOffset !== undefined) view.setUint32(72, Number(data.dwDisplayOffset), true);
  // 0x4c: u32
  if (data?.dwLampModesSize !== undefined) view.setUint32(76, Number(data.dwLampModesSize), true);
  // 0x50: u32
  if (data?.dwLampModesOffset !== undefined) view.setUint32(80, Number(data.dwLampModesOffset), true);
  // 0x54: u32
  if (data?.dwOwnerNameSize !== undefined) view.setUint32(84, Number(data.dwOwnerNameSize), true);
  // 0x58: u32
  if (data?.dwOwnerNameOffset !== undefined) view.setUint32(88, Number(data.dwOwnerNameOffset), true);
  // 0x5c: u32
  if (data?.dwDevSpecificSize !== undefined) view.setUint32(92, Number(data.dwDevSpecificSize), true);
  // 0x60: u32
  if (data?.dwDevSpecificOffset !== undefined) view.setUint32(96, Number(data.dwDevSpecificOffset), true);
  // 0x64: u32
  if (data?.dwPhoneFeatures !== undefined) view.setUint32(100, Number(data.dwPhoneFeatures), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.VARSTRING (size: 24)
 */
export interface VARSTRING {
  /** u32 */
  dwTotalSize: number;
  /** u32 */
  dwNeededSize: number;
  /** u32 */
  dwUsedSize: number;
  /** u32 */
  dwStringFormat: number;
  /** u32 */
  dwStringSize: number;
  /** u32 */
  dwStringOffset: number;
}

export const sizeofVARSTRING = 24;

export function allocVARSTRING(data?: Partial<VARSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofVARSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(0, Number(data.dwTotalSize), true);
  // 0x04: u32
  if (data?.dwNeededSize !== undefined) view.setUint32(4, Number(data.dwNeededSize), true);
  // 0x08: u32
  if (data?.dwUsedSize !== undefined) view.setUint32(8, Number(data.dwUsedSize), true);
  // 0x0c: u32
  if (data?.dwStringFormat !== undefined) view.setUint32(12, Number(data.dwStringFormat), true);
  // 0x10: u32
  if (data?.dwStringSize !== undefined) view.setUint32(16, Number(data.dwStringSize), true);
  // 0x14: u32
  if (data?.dwStringOffset !== undefined) view.setUint32(20, Number(data.dwStringOffset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HDRVCALL__ (size: 8)
 */
export interface HDRVCALL__ {
  /** i32 */
  unused: number;
}

export const sizeofHDRVCALL__ = 8;

export function allocHDRVCALL__(data?: Partial<HDRVCALL__>): Uint8Array {
  const buf = new Uint8Array(sizeofHDRVCALL__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HDRVLINE__ (size: 8)
 */
export interface HDRVLINE__ {
  /** i32 */
  unused: number;
}

export const sizeofHDRVLINE__ = 8;

export function allocHDRVLINE__(data?: Partial<HDRVLINE__>): Uint8Array {
  const buf = new Uint8Array(sizeofHDRVLINE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HDRVPHONE__ (size: 8)
 */
export interface HDRVPHONE__ {
  /** i32 */
  unused: number;
}

export const sizeofHDRVPHONE__ = 8;

export function allocHDRVPHONE__(data?: Partial<HDRVPHONE__>): Uint8Array {
  const buf = new Uint8Array(sizeofHDRVPHONE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HDRVMSPLINE__ (size: 8)
 */
export interface HDRVMSPLINE__ {
  /** i32 */
  unused: number;
}

export const sizeofHDRVMSPLINE__ = 8;

export function allocHDRVMSPLINE__(data?: Partial<HDRVMSPLINE__>): Uint8Array {
  const buf = new Uint8Array(sizeofHDRVMSPLINE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HDRVDIALOGINSTANCE__ (size: 8)
 */
export interface HDRVDIALOGINSTANCE__ {
  /** i32 */
  unused: number;
}

export const sizeofHDRVDIALOGINSTANCE__ = 8;

export function allocHDRVDIALOGINSTANCE__(data?: Partial<HDRVDIALOGINSTANCE__>): Uint8Array {
  const buf = new Uint8Array(sizeofHDRVDIALOGINSTANCE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HTAPICALL__ (size: 8)
 */
export interface HTAPICALL__ {
  /** i32 */
  unused: number;
}

export const sizeofHTAPICALL__ = 8;

export function allocHTAPICALL__(data?: Partial<HTAPICALL__>): Uint8Array {
  const buf = new Uint8Array(sizeofHTAPICALL__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HTAPILINE__ (size: 8)
 */
export interface HTAPILINE__ {
  /** i32 */
  unused: number;
}

export const sizeofHTAPILINE__ = 8;

export function allocHTAPILINE__(data?: Partial<HTAPILINE__>): Uint8Array {
  const buf = new Uint8Array(sizeofHTAPILINE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HTAPIPHONE__ (size: 8)
 */
export interface HTAPIPHONE__ {
  /** i32 */
  unused: number;
}

export const sizeofHTAPIPHONE__ = 8;

export function allocHTAPIPHONE__(data?: Partial<HTAPIPHONE__>): Uint8Array {
  const buf = new Uint8Array(sizeofHTAPIPHONE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.HPROVIDER__ (size: 8)
 */
export interface HPROVIDER__ {
  /** i32 */
  unused: number;
}

export const sizeofHPROVIDER__ = 8;

export function allocHPROVIDER__(data?: Partial<HPROVIDER__>): Uint8Array {
  const buf = new Uint8Array(sizeofHPROVIDER__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.Tapi.TUISPICREATEDIALOGINSTANCEPARAMS (size: 48)
 */
export interface TUISPICREATEDIALOGINSTANCEPARAMS {
  /** u32 */
  dwRequestID: number;
  /** ptr */
  hdDlgInst: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  htDlgInst: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUIDLLName: string | null;
  /** ptr */
  lpParams: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSize: number;
}

export const sizeofTUISPICREATEDIALOGINSTANCEPARAMS = 48;

export function allocTUISPICREATEDIALOGINSTANCEPARAMS(data?: Partial<TUISPICREATEDIALOGINSTANCEPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTUISPICREATEDIALOGINSTANCEPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRequestID !== undefined) view.setUint32(0, Number(data.dwRequestID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hdDlgInst !== undefined) view.setBigUint64(8, data.hdDlgInst === null ? 0n : BigInt(util.toPointer(data.hdDlgInst)), true);
  // 0x10: u32
  if (data?.htDlgInst !== undefined) view.setUint32(16, Number(data.htDlgInst), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszUIDLLName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszUIDLLName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.lpParams !== undefined) view.setBigUint64(32, data.lpParams === null ? 0n : BigInt(util.toPointer(data.lpParams)), true);
  // 0x28: u32
  if (data?.dwSize !== undefined) view.setUint32(40, Number(data.dwSize), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.TAPI_CUSTOMTONE (size: 16)
 */
export interface TAPI_CUSTOMTONE {
  /** u32 */
  dwFrequency: number;
  /** u32 */
  dwCadenceOn: number;
  /** u32 */
  dwCadenceOff: number;
  /** u32 */
  dwVolume: number;
}

export const sizeofTAPI_CUSTOMTONE = 16;

export function allocTAPI_CUSTOMTONE(data?: Partial<TAPI_CUSTOMTONE>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPI_CUSTOMTONE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFrequency !== undefined) view.setUint32(0, Number(data.dwFrequency), true);
  // 0x04: u32
  if (data?.dwCadenceOn !== undefined) view.setUint32(4, Number(data.dwCadenceOn), true);
  // 0x08: u32
  if (data?.dwCadenceOff !== undefined) view.setUint32(8, Number(data.dwCadenceOff), true);
  // 0x0c: u32
  if (data?.dwVolume !== undefined) view.setUint32(12, Number(data.dwVolume), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.TAPI_DETECTTONE (size: 24)
 */
export interface TAPI_DETECTTONE {
  /** u32 */
  dwAppSpecific: number;
  /** u32 */
  dwDuration: number;
  /** u32 */
  dwFrequency1: number;
  /** u32 */
  dwFrequency2: number;
  /** u32 */
  dwFrequency3: number;
}

export const sizeofTAPI_DETECTTONE = 24;

export function allocTAPI_DETECTTONE(data?: Partial<TAPI_DETECTTONE>): Uint8Array {
  const buf = new Uint8Array(sizeofTAPI_DETECTTONE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAppSpecific !== undefined) view.setUint32(0, Number(data.dwAppSpecific), true);
  // 0x04: u32
  if (data?.dwDuration !== undefined) view.setUint32(4, Number(data.dwDuration), true);
  // 0x08: u32
  if (data?.dwFrequency1 !== undefined) view.setUint32(8, Number(data.dwFrequency1), true);
  // 0x0c: u32
  if (data?.dwFrequency2 !== undefined) view.setUint32(12, Number(data.dwFrequency2), true);
  // 0x10: u32
  if (data?.dwFrequency3 !== undefined) view.setUint32(16, Number(data.dwFrequency3), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.MSP_EVENT_INFO (size: 24)
 */
export interface MSP_EVENT_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.Tapi.MSP_EVENT */
  Event: MSP_EVENT;
  /** ptr */
  hCall: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSP_EVENT_INFO = 24;

export function allocMSP_EVENT_INFO(data?: Partial<MSP_EVENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMSP_EVENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.Event !== undefined) view.setInt32(4, Number(data.Event), true);
  // 0x08: pointer
  if (data?.hCall !== undefined) view.setBigUint64(8, data.hCall === null ? 0n : BigInt(util.toPointer(data.hCall)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.STnefProblem (size: 16)
 */
export interface STnefProblem {
  /** u32 */
  ulComponent: number;
  /** u32 */
  ulAttribute: number;
  /** u32 */
  ulPropTag: number;
  /** i32 */
  scode: number;
}

export const sizeofSTnefProblem = 16;

export function allocSTnefProblem(data?: Partial<STnefProblem>): Uint8Array {
  const buf = new Uint8Array(sizeofSTnefProblem);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulComponent !== undefined) view.setUint32(0, Number(data.ulComponent), true);
  // 0x04: u32
  if (data?.ulAttribute !== undefined) view.setUint32(4, Number(data.ulAttribute), true);
  // 0x08: u32
  if (data?.ulPropTag !== undefined) view.setUint32(8, Number(data.ulPropTag), true);
  // 0x0c: i32
  if (data?.scode !== undefined) view.setInt32(12, Number(data.scode), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.STnefProblemArray (size: 16)
 */
export interface STnefProblemArray {
  /** u32 */
  cProblem: number;
  /** array */
  aProblem: Deno.PointerValue | null;
}

export const sizeofSTnefProblemArray = 16;

export function allocSTnefProblemArray(data?: Partial<STnefProblemArray>): Uint8Array {
  const buf = new Uint8Array(sizeofSTnefProblemArray);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProblem !== undefined) view.setUint32(0, Number(data.cProblem), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aProblem !== undefined) view.setBigUint64(8, data.aProblem === null ? 0n : BigInt(util.toPointer(data.aProblem)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.RENDDATA (size: 16)
 */
export interface RENDDATA {
  /** u16 */
  atyp: number;
  /** u32 */
  ulPosition: number;
  /** u16 */
  dxWidth: number;
  /** u16 */
  dyHeight: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofRENDDATA = 16;

export function allocRENDDATA(data?: Partial<RENDDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRENDDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.atyp !== undefined) view.setUint16(0, Number(data.atyp), true);
  // 0x02: u32
  if (data?.ulPosition !== undefined) view.setUint32(2, Number(data.ulPosition), true);
  // 0x06: u16
  if (data?.dxWidth !== undefined) view.setUint16(6, Number(data.dxWidth), true);
  // 0x08: u16
  if (data?.dyHeight !== undefined) view.setUint16(8, Number(data.dyHeight), true);
  // 0x0a: u32
  if (data?.dwFlags !== undefined) view.setUint32(10, Number(data.dwFlags), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.DTR (size: 16)
 */
export interface DTR {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wDayOfWeek: number;
}

export const sizeofDTR = 16;

export function allocDTR(data?: Partial<DTR>): Uint8Array {
  const buf = new Uint8Array(sizeofDTR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDay !== undefined) view.setUint16(4, Number(data.wDay), true);
  // 0x06: u16
  if (data?.wHour !== undefined) view.setUint16(6, Number(data.wHour), true);
  // 0x08: u16
  if (data?.wMinute !== undefined) view.setUint16(8, Number(data.wMinute), true);
  // 0x0a: u16
  if (data?.wSecond !== undefined) view.setUint16(10, Number(data.wSecond), true);
  // 0x0c: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(12, Number(data.wDayOfWeek), true);
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.TRP (size: 8)
 */
export interface TRP {
  /** u16 */
  trpid: number;
  /** u16 */
  cbgrtrp: number;
  /** u16 */
  cch: number;
  /** u16 */
  cbRgb: number;
}

export const sizeofTRP = 8;

export function allocTRP(data?: Partial<TRP>): Uint8Array {
  const buf = new Uint8Array(sizeofTRP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.trpid !== undefined) view.setUint16(0, Number(data.trpid), true);
  // 0x02: u16
  if (data?.cbgrtrp !== undefined) view.setUint16(2, Number(data.cbgrtrp), true);
  // 0x04: u16
  if (data?.cch !== undefined) view.setUint16(4, Number(data.cch), true);
  // 0x06: u16
  if (data?.cbRgb !== undefined) view.setUint16(6, Number(data.cbRgb), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.ADDRALIAS (size: 32)
 */
export interface ADDRALIAS {
  /** array */
  rgchName: Deno.PointerValue | null;
  /** array */
  rgchEName: Deno.PointerValue | null;
  /** array */
  rgchSrvr: Deno.PointerValue | null;
  /** u32 */
  dibDetail: number;
  /** u16 */
  type: number;
}

export const sizeofADDRALIAS = 32;

export function allocADDRALIAS(data?: Partial<ADDRALIAS>): Uint8Array {
  const buf = new Uint8Array(sizeofADDRALIAS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgchName !== undefined) view.setBigUint64(0, data.rgchName === null ? 0n : BigInt(util.toPointer(data.rgchName)), true);
  // 0x08: pointer
  if (data?.rgchEName !== undefined) view.setBigUint64(8, data.rgchEName === null ? 0n : BigInt(util.toPointer(data.rgchEName)), true);
  // 0x10: pointer
  if (data?.rgchSrvr !== undefined) view.setBigUint64(16, data.rgchSrvr === null ? 0n : BigInt(util.toPointer(data.rgchSrvr)), true);
  // 0x18: u32
  if (data?.dibDetail !== undefined) view.setUint32(24, Number(data.dibDetail), true);
  // 0x1c: u16
  if (data?.type !== undefined) view.setUint16(28, Number(data.type), true);
  // 0x1e: pad2
  return buf;
}

/**
 * _address_e__Union (size: 16)
 */
export interface _address_e__Union {
  /** Windows.Win32.Devices.Tapi.ADDRALIAS */
  alias: Uint8Array | Deno.PointerValue | null;
  /** array */
  rgchInterNet: Deno.PointerValue | null;
}

export const sizeof_address_e__Union = 16;

export function alloc_address_e__Union(data?: Partial<_address_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_address_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.alias !== undefined) view.setBigUint64(0, data.alias === null ? 0n : BigInt(util.toPointer(data.alias)), true);
  // 0x08: pointer
  if (data?.rgchInterNet !== undefined) view.setBigUint64(8, data.rgchInterNet === null ? 0n : BigInt(util.toPointer(data.rgchInterNet)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Tapi.NSID (size: 32)
 */
export interface NSID {
  /** u32 */
  dwSize: number;
  /** array */
  uchType: Deno.PointerValue | null;
  /** u32 */
  xtype: number;
  /** i32 */
  lTime: number;
  /** _address_e__Union */
  address: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNSID = 32;

export function allocNSID(data?: Partial<NSID>): Uint8Array {
  const buf = new Uint8Array(sizeofNSID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uchType !== undefined) view.setBigUint64(8, data.uchType === null ? 0n : BigInt(util.toPointer(data.uchType)), true);
  // 0x10: u32
  if (data?.xtype !== undefined) view.setUint32(16, Number(data.xtype), true);
  // 0x14: i32
  if (data?.lTime !== undefined) view.setInt32(20, Number(data.lTime), true);
  // 0x18: pointer
  if (data?.address !== undefined) view.setBigUint64(24, data.address === null ? 0n : BigInt(util.toPointer(data.address)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type HINSTANCE = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libTAPI32_dll = Deno.dlopen("TAPI32.dll", {
    lineAccept: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineAddProvider: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    lineAddProviderA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    lineAddProviderW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    lineAddToConference: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineAgentSpecific: {
      parameters: ["u32", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    lineAnswer: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineBlindTransfer: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineBlindTransferA: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineBlindTransferW: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineClose: {
      parameters: ["u32"],
      result: "i32",
    },
    lineCompleteCall: {
      parameters: ["u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    lineCompleteTransfer: {
      parameters: ["u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    lineConfigDialog: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    lineConfigDialogA: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    lineConfigDialogW: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    lineConfigDialogEdit: {
      parameters: ["u32", "pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    lineConfigDialogEditA: {
      parameters: ["u32", "pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    lineConfigDialogEditW: {
      parameters: ["u32", "pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    lineConfigProvider: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    lineCreateAgentW: {
      parameters: ["u32", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    lineCreateAgentA: {
      parameters: ["u32", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    lineCreateAgentSessionW: {
      parameters: ["u32", "u32", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineCreateAgentSessionA: {
      parameters: ["u32", "u32", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineDeallocateCall: {
      parameters: ["u32"],
      result: "i32",
    },
    lineDevSpecific: {
      parameters: ["u32", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    lineDevSpecificFeature: {
      parameters: ["u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    lineDial: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineDialA: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineDialW: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineDrop: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineForward: {
      parameters: ["u32", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineForwardA: {
      parameters: ["u32", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineForwardW: {
      parameters: ["u32", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGatherDigits: {
      parameters: ["u32", "u32", "buffer", "u32", "buffer", "u32", "u32"],
      result: "i32",
    },
    lineGatherDigitsA: {
      parameters: ["u32", "u32", "buffer", "u32", "buffer", "u32", "u32"],
      result: "i32",
    },
    lineGatherDigitsW: {
      parameters: ["u32", "u32", "buffer", "u32", "buffer", "u32", "u32"],
      result: "i32",
    },
    lineGenerateDigits: {
      parameters: ["u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineGenerateDigitsA: {
      parameters: ["u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineGenerateDigitsW: {
      parameters: ["u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineGenerateTone: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAddressCaps: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAddressCapsA: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAddressCapsW: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAddressID: {
      parameters: ["u32", "pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineGetAddressIDA: {
      parameters: ["u32", "pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineGetAddressIDW: {
      parameters: ["u32", "pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineGetAddressStatus: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAddressStatusA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAddressStatusW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentActivityListA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentActivityListW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentCapsA: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentCapsW: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentGroupListA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentGroupListW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentInfo: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentSessionInfo: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentSessionList: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentStatusA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAgentStatusW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetAppPriority: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGetAppPriorityA: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGetAppPriorityW: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGetCallInfo: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetCallInfoA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetCallInfoW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetCallStatus: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetConfRelatedCalls: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetCountry: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetCountryA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetCountryW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetDevCaps: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetDevCapsA: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetDevCapsW: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetDevConfig: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    lineGetDevConfigA: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    lineGetDevConfigW: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    lineGetGroupListA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetGroupListW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetIcon: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    lineGetIconA: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    lineGetIconW: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    lineGetID: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineGetIDA: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineGetIDW: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineGetLineDevStatus: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetLineDevStatusA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetLineDevStatusW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetMessage: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    lineGetNewCalls: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetNumRings: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetProviderList: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetProviderListA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetProviderListW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineGetProxyStatus: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetQueueInfo: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetQueueListA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGetQueueListW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGetRequest: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetRequestA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetRequestW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetStatusMessages: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineGetTranslateCaps: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetTranslateCapsA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineGetTranslateCapsW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineHandoff: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineHandoffA: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineHandoffW: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineHold: {
      parameters: ["u32"],
      result: "i32",
    },
    lineInitialize: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    lineInitializeExA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    lineInitializeExW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    lineMakeCall: {
      parameters: ["u32", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    lineMakeCallA: {
      parameters: ["u32", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    lineMakeCallW: {
      parameters: ["u32", "pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    lineMonitorDigits: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineMonitorMedia: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineMonitorTones: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    lineNegotiateAPIVersion: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    lineNegotiateExtVersion: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineOpen: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "usize", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineOpenA: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "usize", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineOpenW: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "usize", "u32", "u32", "pointer"],
      result: "i32",
    },
    linePark: {
      parameters: ["u32", "u32", "buffer", "pointer"],
      result: "i32",
    },
    lineParkA: {
      parameters: ["u32", "u32", "buffer", "pointer"],
      result: "i32",
    },
    lineParkW: {
      parameters: ["u32", "u32", "buffer", "pointer"],
      result: "i32",
    },
    linePickup: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer"],
      result: "i32",
    },
    linePickupA: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer"],
      result: "i32",
    },
    linePickupW: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer"],
      result: "i32",
    },
    linePrepareAddToConference: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    linePrepareAddToConferenceA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    linePrepareAddToConferenceW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineProxyMessage: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "u32"],
      result: "i32",
    },
    lineProxyResponse: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    lineRedirect: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineRedirectA: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineRedirectW: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineRegisterRequestRecipient: {
      parameters: ["u32", "u32", "u32", "u32"],
      result: "i32",
    },
    lineReleaseUserUserInfo: {
      parameters: ["u32"],
      result: "i32",
    },
    lineRemoveFromConference: {
      parameters: ["u32"],
      result: "i32",
    },
    lineRemoveProvider: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    lineSecureCall: {
      parameters: ["u32"],
      result: "i32",
    },
    lineSendUserUserInfo: {
      parameters: ["u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetAgentActivity: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    lineSetAgentGroup: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    lineSetAgentMeasurementPeriod: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    lineSetAgentSessionState: {
      parameters: ["u32", "u32", "u32", "u32"],
      result: "i32",
    },
    lineSetAgentStateEx: {
      parameters: ["u32", "u32", "u32", "u32"],
      result: "i32",
    },
    lineSetAgentState: {
      parameters: ["u32", "u32", "u32", "u32"],
      result: "i32",
    },
    lineSetAppPriority: {
      parameters: ["buffer", "u32", "pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetAppPriorityA: {
      parameters: ["buffer", "u32", "pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetAppPriorityW: {
      parameters: ["buffer", "u32", "pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetAppSpecific: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineSetCallData: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    lineSetCallParams: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineSetCallPrivilege: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineSetCallQualityOfService: {
      parameters: ["u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    lineSetCallTreatment: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineSetCurrentLocation: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineSetDevConfig: {
      parameters: ["u32", "pointer", "u32", "buffer"],
      result: "i32",
    },
    lineSetDevConfigA: {
      parameters: ["u32", "pointer", "u32", "buffer"],
      result: "i32",
    },
    lineSetDevConfigW: {
      parameters: ["u32", "pointer", "u32", "buffer"],
      result: "i32",
    },
    lineSetLineDevStatus: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    lineSetMediaControl: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    lineSetMediaMode: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineSetQueueMeasurementPeriod: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    lineSetNumRings: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    lineSetStatusMessages: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    lineSetTerminal: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "u32", "u32"],
      result: "i32",
    },
    lineSetTollList: {
      parameters: ["u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetTollListA: {
      parameters: ["u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetTollListW: {
      parameters: ["u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    lineSetupConference: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    lineSetupConferenceA: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    lineSetupConferenceW: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    lineSetupTransfer: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineSetupTransferA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineSetupTransferW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    lineShutdown: {
      parameters: ["u32"],
      result: "i32",
    },
    lineSwapHold: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineTranslateAddress: {
      parameters: ["u32", "u32", "u32", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineTranslateAddressA: {
      parameters: ["u32", "u32", "u32", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineTranslateAddressW: {
      parameters: ["u32", "u32", "u32", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    lineTranslateDialog: {
      parameters: ["u32", "u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineTranslateDialogA: {
      parameters: ["u32", "u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineTranslateDialogW: {
      parameters: ["u32", "u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineUncompleteCall: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    lineUnhold: {
      parameters: ["u32"],
      result: "i32",
    },
    lineUnpark: {
      parameters: ["u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineUnparkA: {
      parameters: ["u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    lineUnparkW: {
      parameters: ["u32", "u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneClose: {
      parameters: ["u32"],
      result: "i32",
    },
    phoneConfigDialog: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneConfigDialogA: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneConfigDialogW: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneDevSpecific: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    phoneGetButtonInfo: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetButtonInfoA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetButtonInfoW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetData: {
      parameters: ["u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    phoneGetDevCaps: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetDevCapsA: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetDevCapsW: {
      parameters: ["u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetDisplay: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    phoneGetGain: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetHookSwitch: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    phoneGetIcon: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    phoneGetIconA: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    phoneGetIconW: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    phoneGetID: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneGetIDA: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneGetIDW: {
      parameters: ["u32", "pointer", "buffer"],
      result: "i32",
    },
    phoneGetLamp: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneGetMessage: {
      parameters: ["u32", "pointer", "u32"],
      result: "i32",
    },
    phoneGetRing: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    phoneGetStatus: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    phoneGetStatusA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    phoneGetStatusW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    phoneGetStatusMessages: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    phoneGetVolume: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneInitialize: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    phoneInitializeExA: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    phoneInitializeExW: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    phoneNegotiateAPIVersion: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    phoneNegotiateExtVersion: {
      parameters: ["u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    phoneOpen: {
      parameters: ["u32", "u32", "pointer", "u32", "u32", "usize", "u32"],
      result: "i32",
    },
    phoneSetButtonInfo: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneSetButtonInfoA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneSetButtonInfoW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    phoneSetData: {
      parameters: ["u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    phoneSetDisplay: {
      parameters: ["u32", "u32", "u32", "buffer", "u32"],
      result: "i32",
    },
    phoneSetGain: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    phoneSetHookSwitch: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    phoneSetLamp: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    phoneSetRing: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    phoneSetStatusMessages: {
      parameters: ["u32", "u32", "u32", "u32"],
      result: "i32",
    },
    phoneSetVolume: {
      parameters: ["u32", "u32", "u32"],
      result: "i32",
    },
    phoneShutdown: {
      parameters: ["u32"],
      result: "i32",
    },
    tapiGetLocationInfo: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    tapiGetLocationInfoA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    tapiGetLocationInfoW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    tapiRequestDrop: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    tapiRequestMakeCall: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    tapiRequestMakeCallA: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    tapiRequestMakeCallW: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    tapiRequestMediaCall: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "u32", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    tapiRequestMediaCallA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "u32", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    tapiRequestMediaCallW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "u32", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMAPI32_dll = Deno.dlopen("MAPI32.dll", {
    OpenTnefStream: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u16", "pointer"],
      result: "pointer",
    },
    OpenTnefStreamEx: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u16", "pointer", "pointer"],
      result: "pointer",
    },
    GetTnefStreamCodepage: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function lineAccept(
  hCall: number /* u32 */,
  lpsUserUserInfo: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineAccept(hCall, util.pstrToFfi(lpsUserUserInfo), dwSize);
}

export function lineAddProvider(
  lpszProviderFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpdwPermanentProviderID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineAddProvider(util.pstrToFfi(lpszProviderFilename), util.hwndToFfi(hwndOwner), util.toPointer(lpdwPermanentProviderID));
}

export function lineAddProviderA(
  lpszProviderFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpdwPermanentProviderID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineAddProviderA(util.pstrToFfi(lpszProviderFilename), util.hwndToFfi(hwndOwner), util.toPointer(lpdwPermanentProviderID));
}

export function lineAddProviderW(
  lpszProviderFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpdwPermanentProviderID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineAddProviderW(util.pwstrToFfi(lpszProviderFilename), util.hwndToFfi(hwndOwner), util.toPointer(lpdwPermanentProviderID));
}

export function lineAddToConference(
  hConfCall: number /* u32 */,
  hConsultCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineAddToConference(hConfCall, hConsultCall);
}

export function lineAgentSpecific(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAgentExtensionIDIndex: number /* u32 */,
  lpParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineAgentSpecific(hLine, dwAddressID, dwAgentExtensionIDIndex, util.toPointer(lpParams), dwSize);
}

export function lineAnswer(
  hCall: number /* u32 */,
  lpsUserUserInfo: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineAnswer(hCall, util.pstrToFfi(lpsUserUserInfo), dwSize);
}

export function lineBlindTransfer(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineBlindTransfer(hCall, util.pstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineBlindTransferA(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineBlindTransferA(hCall, util.pstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineBlindTransferW(
  hCall: number /* u32 */,
  lpszDestAddressW: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineBlindTransferW(hCall, util.pwstrToFfi(lpszDestAddressW), dwCountryCode);
}

export function lineClose(
  hLine: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineClose(hLine);
}

export function lineCompleteCall(
  hCall: number /* u32 */,
  lpdwCompletionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCompletionMode: number /* u32 */,
  dwMessageID: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineCompleteCall(hCall, util.toPointer(lpdwCompletionID), dwCompletionMode, dwMessageID);
}

export function lineCompleteTransfer(
  hCall: number /* u32 */,
  hConsultCall: number /* u32 */,
  lphConfCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTransferMode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineCompleteTransfer(hCall, hConsultCall, util.toPointer(lphConfCall), dwTransferMode);
}

export function lineConfigDialog(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigDialog(dwDeviceID, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszDeviceClass));
}

export function lineConfigDialogA(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigDialogA(dwDeviceID, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszDeviceClass));
}

export function lineConfigDialogW(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigDialogW(dwDeviceID, util.hwndToFfi(hwndOwner), util.pwstrToFfi(lpszDeviceClass));
}

export function lineConfigDialogEdit(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDeviceConfigIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  lpDeviceConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigDialogEdit(dwDeviceID, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszDeviceClass), util.toPointer(lpDeviceConfigIn), dwSize, util.toPointer(lpDeviceConfigOut));
}

export function lineConfigDialogEditA(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDeviceConfigIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  lpDeviceConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigDialogEditA(dwDeviceID, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszDeviceClass), util.toPointer(lpDeviceConfigIn), dwSize, util.toPointer(lpDeviceConfigOut));
}

export function lineConfigDialogEditW(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDeviceConfigIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  lpDeviceConfigOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigDialogEditW(dwDeviceID, util.hwndToFfi(hwndOwner), util.pwstrToFfi(lpszDeviceClass), util.toPointer(lpDeviceConfigIn), dwSize, util.toPointer(lpDeviceConfigOut));
}

export function lineConfigProvider(
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwPermanentProviderID: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineConfigProvider(util.hwndToFfi(hwndOwner), dwPermanentProviderID);
}

export function lineCreateAgentW(
  hLine: number /* u32 */,
  lpszAgentID: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszAgentPIN: string | null /* Windows.Win32.Foundation.PWSTR */,
  lphAgent: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineCreateAgentW(hLine, util.pwstrToFfi(lpszAgentID), util.pwstrToFfi(lpszAgentPIN), util.toPointer(lphAgent));
}

export function lineCreateAgentA(
  hLine: number /* u32 */,
  lpszAgentID: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszAgentPIN: string | null /* Windows.Win32.Foundation.PSTR */,
  lphAgent: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineCreateAgentA(hLine, util.pstrToFfi(lpszAgentID), util.pstrToFfi(lpszAgentPIN), util.toPointer(lphAgent));
}

export function lineCreateAgentSessionW(
  hLine: number /* u32 */,
  hAgent: number /* u32 */,
  lpszAgentPIN: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwWorkingAddressID: number /* u32 */,
  lpGroupID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphAgentSession: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineCreateAgentSessionW(hLine, hAgent, util.pwstrToFfi(lpszAgentPIN), dwWorkingAddressID, util.toPointer(lpGroupID), util.toPointer(lphAgentSession));
}

export function lineCreateAgentSessionA(
  hLine: number /* u32 */,
  hAgent: number /* u32 */,
  lpszAgentPIN: string | null /* Windows.Win32.Foundation.PSTR */,
  dwWorkingAddressID: number /* u32 */,
  lpGroupID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphAgentSession: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineCreateAgentSessionA(hLine, hAgent, util.pstrToFfi(lpszAgentPIN), dwWorkingAddressID, util.toPointer(lpGroupID), util.toPointer(lphAgentSession));
}

export function lineDeallocateCall(
  hCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDeallocateCall(hCall);
}

export function lineDevSpecific(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  hCall: number /* u32 */,
  lpParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDevSpecific(hLine, dwAddressID, hCall, util.toPointer(lpParams), dwSize);
}

export function lineDevSpecificFeature(
  hLine: number /* u32 */,
  dwFeature: number /* u32 */,
  lpParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDevSpecificFeature(hLine, dwFeature, util.toPointer(lpParams), dwSize);
}

export function lineDial(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDial(hCall, util.pstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineDialA(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDialA(hCall, util.pstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineDialW(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDialW(hCall, util.pwstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineDrop(
  hCall: number /* u32 */,
  lpsUserUserInfo: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineDrop(hCall, util.pstrToFfi(lpsUserUserInfo), dwSize);
}

export function lineForward(
  hLine: number /* u32 */,
  bAllAddresses: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpForwardList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumRingsNoAnswer: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineForward(hLine, bAllAddresses, dwAddressID, util.toPointer(lpForwardList), dwNumRingsNoAnswer, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineForwardA(
  hLine: number /* u32 */,
  bAllAddresses: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpForwardList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumRingsNoAnswer: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineForwardA(hLine, bAllAddresses, dwAddressID, util.toPointer(lpForwardList), dwNumRingsNoAnswer, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineForwardW(
  hLine: number /* u32 */,
  bAllAddresses: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpForwardList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumRingsNoAnswer: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineForwardW(hLine, bAllAddresses, dwAddressID, util.toPointer(lpForwardList), dwNumRingsNoAnswer, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineGatherDigits(
  hCall: number /* u32 */,
  dwDigitModes: number /* u32 */,
  lpsDigits: string | null /* Windows.Win32.Foundation.PSTR */,
  dwNumDigits: number /* u32 */,
  lpszTerminationDigits: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFirstDigitTimeout: number /* u32 */,
  dwInterDigitTimeout: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGatherDigits(hCall, dwDigitModes, util.pstrToFfi(lpsDigits), dwNumDigits, util.pstrToFfi(lpszTerminationDigits), dwFirstDigitTimeout, dwInterDigitTimeout);
}

export function lineGatherDigitsA(
  hCall: number /* u32 */,
  dwDigitModes: number /* u32 */,
  lpsDigits: string | null /* Windows.Win32.Foundation.PSTR */,
  dwNumDigits: number /* u32 */,
  lpszTerminationDigits: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFirstDigitTimeout: number /* u32 */,
  dwInterDigitTimeout: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGatherDigitsA(hCall, dwDigitModes, util.pstrToFfi(lpsDigits), dwNumDigits, util.pstrToFfi(lpszTerminationDigits), dwFirstDigitTimeout, dwInterDigitTimeout);
}

export function lineGatherDigitsW(
  hCall: number /* u32 */,
  dwDigitModes: number /* u32 */,
  lpsDigits: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNumDigits: number /* u32 */,
  lpszTerminationDigits: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFirstDigitTimeout: number /* u32 */,
  dwInterDigitTimeout: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGatherDigitsW(hCall, dwDigitModes, util.pwstrToFfi(lpsDigits), dwNumDigits, util.pwstrToFfi(lpszTerminationDigits), dwFirstDigitTimeout, dwInterDigitTimeout);
}

export function lineGenerateDigits(
  hCall: number /* u32 */,
  dwDigitMode: number /* u32 */,
  lpszDigits: string | null /* Windows.Win32.Foundation.PSTR */,
  dwDuration: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGenerateDigits(hCall, dwDigitMode, util.pstrToFfi(lpszDigits), dwDuration);
}

export function lineGenerateDigitsA(
  hCall: number /* u32 */,
  dwDigitMode: number /* u32 */,
  lpszDigits: string | null /* Windows.Win32.Foundation.PSTR */,
  dwDuration: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGenerateDigitsA(hCall, dwDigitMode, util.pstrToFfi(lpszDigits), dwDuration);
}

export function lineGenerateDigitsW(
  hCall: number /* u32 */,
  dwDigitMode: number /* u32 */,
  lpszDigits: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDuration: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGenerateDigitsW(hCall, dwDigitMode, util.pwstrToFfi(lpszDigits), dwDuration);
}

export function lineGenerateTone(
  hCall: number /* u32 */,
  dwToneMode: number /* u32 */,
  dwDuration: number /* u32 */,
  dwNumTones: number /* u32 */,
  lpTones: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGenerateTone(hCall, dwToneMode, dwDuration, dwNumTones, util.toPointer(lpTones));
}

export function lineGetAddressCaps(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpAddressCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressCaps(hLineApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, util.toPointer(lpAddressCaps));
}

export function lineGetAddressCapsA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpAddressCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressCapsA(hLineApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, util.toPointer(lpAddressCaps));
}

export function lineGetAddressCapsW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpAddressCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressCapsW(hLineApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, util.toPointer(lpAddressCaps));
}

export function lineGetAddressID(
  hLine: number /* u32 */,
  lpdwAddressID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressMode: number /* u32 */,
  lpsAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressID(hLine, util.toPointer(lpdwAddressID), dwAddressMode, util.pstrToFfi(lpsAddress), dwSize);
}

export function lineGetAddressIDA(
  hLine: number /* u32 */,
  lpdwAddressID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressMode: number /* u32 */,
  lpsAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressIDA(hLine, util.toPointer(lpdwAddressID), dwAddressMode, util.pstrToFfi(lpsAddress), dwSize);
}

export function lineGetAddressIDW(
  hLine: number /* u32 */,
  lpdwAddressID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressMode: number /* u32 */,
  lpsAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressIDW(hLine, util.toPointer(lpdwAddressID), dwAddressMode, util.pwstrToFfi(lpsAddress), dwSize);
}

export function lineGetAddressStatus(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAddressStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressStatus(hLine, dwAddressID, util.toPointer(lpAddressStatus));
}

export function lineGetAddressStatusA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAddressStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressStatusA(hLine, dwAddressID, util.toPointer(lpAddressStatus));
}

export function lineGetAddressStatusW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAddressStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAddressStatusW(hLine, dwAddressID, util.toPointer(lpAddressStatus));
}

export function lineGetAgentActivityListA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentActivityList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentActivityListA(hLine, dwAddressID, util.toPointer(lpAgentActivityList));
}

export function lineGetAgentActivityListW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentActivityList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentActivityListW(hLine, dwAddressID, util.toPointer(lpAgentActivityList));
}

export function lineGetAgentCapsA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAppAPIVersion: number /* u32 */,
  lpAgentCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentCapsA(hLineApp, dwDeviceID, dwAddressID, dwAppAPIVersion, util.toPointer(lpAgentCaps));
}

export function lineGetAgentCapsW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAppAPIVersion: number /* u32 */,
  lpAgentCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentCapsW(hLineApp, dwDeviceID, dwAddressID, dwAppAPIVersion, util.toPointer(lpAgentCaps));
}

export function lineGetAgentGroupListA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentGroupListA(hLine, dwAddressID, util.toPointer(lpAgentGroupList));
}

export function lineGetAgentGroupListW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentGroupListW(hLine, dwAddressID, util.toPointer(lpAgentGroupList));
}

export function lineGetAgentInfo(
  hLine: number /* u32 */,
  hAgent: number /* u32 */,
  lpAgentInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentInfo(hLine, hAgent, util.toPointer(lpAgentInfo));
}

export function lineGetAgentSessionInfo(
  hLine: number /* u32 */,
  hAgentSession: number /* u32 */,
  lpAgentSessionInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentSessionInfo(hLine, hAgentSession, util.toPointer(lpAgentSessionInfo));
}

export function lineGetAgentSessionList(
  hLine: number /* u32 */,
  hAgent: number /* u32 */,
  lpAgentSessionList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentSessionList(hLine, hAgent, util.toPointer(lpAgentSessionList));
}

export function lineGetAgentStatusA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentStatusA(hLine, dwAddressID, util.toPointer(lpAgentStatus));
}

export function lineGetAgentStatusW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAgentStatusW(hLine, dwAddressID, util.toPointer(lpAgentStatus));
}

export function lineGetAppPriority(
  lpszAppFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  dwMediaMode: number /* u32 */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRequestMode: number /* u32 */,
  lpExtensionName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwPriority: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAppPriority(util.pstrToFfi(lpszAppFilename), dwMediaMode, util.toPointer(lpExtensionID), dwRequestMode, util.toPointer(lpExtensionName), util.toPointer(lpdwPriority));
}

export function lineGetAppPriorityA(
  lpszAppFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  dwMediaMode: number /* u32 */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRequestMode: number /* u32 */,
  lpExtensionName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwPriority: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAppPriorityA(util.pstrToFfi(lpszAppFilename), dwMediaMode, util.toPointer(lpExtensionID), dwRequestMode, util.toPointer(lpExtensionName), util.toPointer(lpdwPriority));
}

export function lineGetAppPriorityW(
  lpszAppFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwMediaMode: number /* u32 */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRequestMode: number /* u32 */,
  lpExtensionName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwPriority: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetAppPriorityW(util.pwstrToFfi(lpszAppFilename), dwMediaMode, util.toPointer(lpExtensionID), dwRequestMode, util.toPointer(lpExtensionName), util.toPointer(lpdwPriority));
}

export function lineGetCallInfo(
  hCall: number /* u32 */,
  lpCallInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCallInfo(hCall, util.toPointer(lpCallInfo));
}

export function lineGetCallInfoA(
  hCall: number /* u32 */,
  lpCallInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCallInfoA(hCall, util.toPointer(lpCallInfo));
}

export function lineGetCallInfoW(
  hCall: number /* u32 */,
  lpCallInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCallInfoW(hCall, util.toPointer(lpCallInfo));
}

export function lineGetCallStatus(
  hCall: number /* u32 */,
  lpCallStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCallStatus(hCall, util.toPointer(lpCallStatus));
}

export function lineGetConfRelatedCalls(
  hCall: number /* u32 */,
  lpCallList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetConfRelatedCalls(hCall, util.toPointer(lpCallList));
}

export function lineGetCountry(
  dwCountryID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpLineCountryList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCountry(dwCountryID, dwAPIVersion, util.toPointer(lpLineCountryList));
}

export function lineGetCountryA(
  dwCountryID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpLineCountryList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCountryA(dwCountryID, dwAPIVersion, util.toPointer(lpLineCountryList));
}

export function lineGetCountryW(
  dwCountryID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpLineCountryList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetCountryW(dwCountryID, dwAPIVersion, util.toPointer(lpLineCountryList));
}

export function lineGetDevCaps(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpLineDevCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetDevCaps(hLineApp, dwDeviceID, dwAPIVersion, dwExtVersion, util.toPointer(lpLineDevCaps));
}

export function lineGetDevCapsA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpLineDevCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetDevCapsA(hLineApp, dwDeviceID, dwAPIVersion, dwExtVersion, util.toPointer(lpLineDevCaps));
}

export function lineGetDevCapsW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpLineDevCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetDevCapsW(hLineApp, dwDeviceID, dwAPIVersion, dwExtVersion, util.toPointer(lpLineDevCaps));
}

export function lineGetDevConfig(
  dwDeviceID: number /* u32 */,
  lpDeviceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetDevConfig(dwDeviceID, util.toPointer(lpDeviceConfig), util.pstrToFfi(lpszDeviceClass));
}

export function lineGetDevConfigA(
  dwDeviceID: number /* u32 */,
  lpDeviceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetDevConfigA(dwDeviceID, util.toPointer(lpDeviceConfig), util.pstrToFfi(lpszDeviceClass));
}

export function lineGetDevConfigW(
  dwDeviceID: number /* u32 */,
  lpDeviceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetDevConfigW(dwDeviceID, util.toPointer(lpDeviceConfig), util.pwstrToFfi(lpszDeviceClass));
}

export function lineGetGroupListA(
  hLine: number /* u32 */,
  lpGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetGroupListA(hLine, util.toPointer(lpGroupList));
}

export function lineGetGroupListW(
  hLine: number /* u32 */,
  lpGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetGroupListW(hLine, util.toPointer(lpGroupList));
}

export function lineGetIcon(
  dwDeviceID: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lphIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetIcon(dwDeviceID, util.pstrToFfi(lpszDeviceClass), util.toPointer(lphIcon));
}

export function lineGetIconA(
  dwDeviceID: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lphIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetIconA(dwDeviceID, util.pstrToFfi(lpszDeviceClass), util.toPointer(lphIcon));
}

export function lineGetIconW(
  dwDeviceID: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
  lphIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetIconW(dwDeviceID, util.pwstrToFfi(lpszDeviceClass), util.toPointer(lphIcon));
}

export function lineGetID(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  hCall: number /* u32 */,
  dwSelect: number /* u32 */,
  lpDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetID(hLine, dwAddressID, hCall, dwSelect, util.toPointer(lpDeviceID), util.pstrToFfi(lpszDeviceClass));
}

export function lineGetIDA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  hCall: number /* u32 */,
  dwSelect: number /* u32 */,
  lpDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetIDA(hLine, dwAddressID, hCall, dwSelect, util.toPointer(lpDeviceID), util.pstrToFfi(lpszDeviceClass));
}

export function lineGetIDW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  hCall: number /* u32 */,
  dwSelect: number /* u32 */,
  lpDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetIDW(hLine, dwAddressID, hCall, dwSelect, util.toPointer(lpDeviceID), util.pwstrToFfi(lpszDeviceClass));
}

export function lineGetLineDevStatus(
  hLine: number /* u32 */,
  lpLineDevStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetLineDevStatus(hLine, util.toPointer(lpLineDevStatus));
}

export function lineGetLineDevStatusA(
  hLine: number /* u32 */,
  lpLineDevStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetLineDevStatusA(hLine, util.toPointer(lpLineDevStatus));
}

export function lineGetLineDevStatusW(
  hLine: number /* u32 */,
  lpLineDevStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetLineDevStatusW(hLine, util.toPointer(lpLineDevStatus));
}

export function lineGetMessage(
  hLineApp: number /* u32 */,
  lpMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTimeout: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetMessage(hLineApp, util.toPointer(lpMessage), dwTimeout);
}

export function lineGetNewCalls(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwSelect: number /* u32 */,
  lpCallList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetNewCalls(hLine, dwAddressID, dwSelect, util.toPointer(lpCallList));
}

export function lineGetNumRings(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpdwNumRings: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetNumRings(hLine, dwAddressID, util.toPointer(lpdwNumRings));
}

export function lineGetProviderList(
  dwAPIVersion: number /* u32 */,
  lpProviderList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetProviderList(dwAPIVersion, util.toPointer(lpProviderList));
}

export function lineGetProviderListA(
  dwAPIVersion: number /* u32 */,
  lpProviderList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetProviderListA(dwAPIVersion, util.toPointer(lpProviderList));
}

export function lineGetProviderListW(
  dwAPIVersion: number /* u32 */,
  lpProviderList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetProviderListW(dwAPIVersion, util.toPointer(lpProviderList));
}

export function lineGetProxyStatus(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAppAPIVersion: number /* u32 */,
  lpLineProxyReqestList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetProxyStatus(hLineApp, dwDeviceID, dwAppAPIVersion, util.toPointer(lpLineProxyReqestList));
}

export function lineGetQueueInfo(
  hLine: number /* u32 */,
  dwQueueID: number /* u32 */,
  lpLineQueueInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetQueueInfo(hLine, dwQueueID, util.toPointer(lpLineQueueInfo));
}

export function lineGetQueueListA(
  hLine: number /* u32 */,
  lpGroupID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpQueueList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetQueueListA(hLine, util.toPointer(lpGroupID), util.toPointer(lpQueueList));
}

export function lineGetQueueListW(
  hLine: number /* u32 */,
  lpGroupID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpQueueList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetQueueListW(hLine, util.toPointer(lpGroupID), util.toPointer(lpQueueList));
}

export function lineGetRequest(
  hLineApp: number /* u32 */,
  dwRequestMode: number /* u32 */,
  lpRequestBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetRequest(hLineApp, dwRequestMode, util.toPointer(lpRequestBuffer));
}

export function lineGetRequestA(
  hLineApp: number /* u32 */,
  dwRequestMode: number /* u32 */,
  lpRequestBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetRequestA(hLineApp, dwRequestMode, util.toPointer(lpRequestBuffer));
}

export function lineGetRequestW(
  hLineApp: number /* u32 */,
  dwRequestMode: number /* u32 */,
  lpRequestBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetRequestW(hLineApp, dwRequestMode, util.toPointer(lpRequestBuffer));
}

export function lineGetStatusMessages(
  hLine: number /* u32 */,
  lpdwLineStates: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwAddressStates: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetStatusMessages(hLine, util.toPointer(lpdwLineStates), util.toPointer(lpdwAddressStates));
}

export function lineGetTranslateCaps(
  hLineApp: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpTranslateCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetTranslateCaps(hLineApp, dwAPIVersion, util.toPointer(lpTranslateCaps));
}

export function lineGetTranslateCapsA(
  hLineApp: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpTranslateCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetTranslateCapsA(hLineApp, dwAPIVersion, util.toPointer(lpTranslateCaps));
}

export function lineGetTranslateCapsW(
  hLineApp: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpTranslateCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineGetTranslateCapsW(hLineApp, dwAPIVersion, util.toPointer(lpTranslateCaps));
}

export function lineHandoff(
  hCall: number /* u32 */,
  lpszFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwMediaMode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineHandoff(hCall, util.pstrToFfi(lpszFileName), dwMediaMode);
}

export function lineHandoffA(
  hCall: number /* u32 */,
  lpszFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwMediaMode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineHandoffA(hCall, util.pstrToFfi(lpszFileName), dwMediaMode);
}

export function lineHandoffW(
  hCall: number /* u32 */,
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwMediaMode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineHandoffW(hCall, util.pwstrToFfi(lpszFileName), dwMediaMode);
}

export function lineHold(
  hCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineHold(hCall);
}

export function lineInitialize(
  lphLineApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Tapi.LINECALLBACK */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwNumDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineInitialize(util.toPointer(lphLineApp), util.toPointer(hInstance), util.toPointer(lpfnCallback), util.pstrToFfi(lpszAppName), util.toPointer(lpdwNumDevs));
}

export function lineInitializeExA(
  lphLineApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Tapi.LINECALLBACK */,
  lpszFriendlyAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwNumDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwAPIVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLineInitializeExParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineInitializeExA(util.toPointer(lphLineApp), util.toPointer(hInstance), util.toPointer(lpfnCallback), util.pstrToFfi(lpszFriendlyAppName), util.toPointer(lpdwNumDevs), util.toPointer(lpdwAPIVersion), util.toPointer(lpLineInitializeExParams));
}

export function lineInitializeExW(
  lphLineApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Tapi.LINECALLBACK */,
  lpszFriendlyAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwNumDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwAPIVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLineInitializeExParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineInitializeExW(util.toPointer(lphLineApp), util.toPointer(hInstance), util.toPointer(lpfnCallback), util.pwstrToFfi(lpszFriendlyAppName), util.toPointer(lpdwNumDevs), util.toPointer(lpdwAPIVersion), util.toPointer(lpLineInitializeExParams));
}

export function lineMakeCall(
  hLine: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineMakeCall(hLine, util.toPointer(lphCall), util.pstrToFfi(lpszDestAddress), dwCountryCode, util.toPointer(lpCallParams));
}

export function lineMakeCallA(
  hLine: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineMakeCallA(hLine, util.toPointer(lphCall), util.pstrToFfi(lpszDestAddress), dwCountryCode, util.toPointer(lpCallParams));
}

export function lineMakeCallW(
  hLine: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCountryCode: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineMakeCallW(hLine, util.toPointer(lphCall), util.pwstrToFfi(lpszDestAddress), dwCountryCode, util.toPointer(lpCallParams));
}

export function lineMonitorDigits(
  hCall: number /* u32 */,
  dwDigitModes: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineMonitorDigits(hCall, dwDigitModes);
}

export function lineMonitorMedia(
  hCall: number /* u32 */,
  dwMediaModes: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineMonitorMedia(hCall, dwMediaModes);
}

export function lineMonitorTones(
  hCall: number /* u32 */,
  lpToneList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumEntries: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineMonitorTones(hCall, util.toPointer(lpToneList), dwNumEntries);
}

export function lineNegotiateAPIVersion(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPILowVersion: number /* u32 */,
  dwAPIHighVersion: number /* u32 */,
  lpdwAPIVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineNegotiateAPIVersion(hLineApp, dwDeviceID, dwAPILowVersion, dwAPIHighVersion, util.toPointer(lpdwAPIVersion), util.toPointer(lpExtensionID));
}

export function lineNegotiateExtVersion(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtLowVersion: number /* u32 */,
  dwExtHighVersion: number /* u32 */,
  lpdwExtVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineNegotiateExtVersion(hLineApp, dwDeviceID, dwAPIVersion, dwExtLowVersion, dwExtHighVersion, util.toPointer(lpdwExtVersion));
}

export function lineOpen(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lphLine: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  dwCallbackInstance: Deno.PointerValue /* usize */,
  dwPrivileges: number /* u32 */,
  dwMediaModes: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineOpen(hLineApp, dwDeviceID, util.toPointer(lphLine), dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivileges, dwMediaModes, util.toPointer(lpCallParams));
}

export function lineOpenA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lphLine: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  dwCallbackInstance: Deno.PointerValue /* usize */,
  dwPrivileges: number /* u32 */,
  dwMediaModes: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineOpenA(hLineApp, dwDeviceID, util.toPointer(lphLine), dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivileges, dwMediaModes, util.toPointer(lpCallParams));
}

export function lineOpenW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lphLine: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  dwCallbackInstance: Deno.PointerValue /* usize */,
  dwPrivileges: number /* u32 */,
  dwMediaModes: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineOpenW(hLineApp, dwDeviceID, util.toPointer(lphLine), dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivileges, dwMediaModes, util.toPointer(lpCallParams));
}

export function linePark(
  hCall: number /* u32 */,
  dwParkMode: number /* u32 */,
  lpszDirAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpNonDirAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.linePark(hCall, dwParkMode, util.pstrToFfi(lpszDirAddress), util.toPointer(lpNonDirAddress));
}

export function lineParkA(
  hCall: number /* u32 */,
  dwParkMode: number /* u32 */,
  lpszDirAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpNonDirAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineParkA(hCall, dwParkMode, util.pstrToFfi(lpszDirAddress), util.toPointer(lpNonDirAddress));
}

export function lineParkW(
  hCall: number /* u32 */,
  dwParkMode: number /* u32 */,
  lpszDirAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpNonDirAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineParkW(hCall, dwParkMode, util.pwstrToFfi(lpszDirAddress), util.toPointer(lpNonDirAddress));
}

export function linePickup(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszGroupID: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.linePickup(hLine, dwAddressID, util.toPointer(lphCall), util.pstrToFfi(lpszDestAddress), util.pstrToFfi(lpszGroupID));
}

export function linePickupA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszGroupID: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.linePickupA(hLine, dwAddressID, util.toPointer(lphCall), util.pstrToFfi(lpszDestAddress), util.pstrToFfi(lpszGroupID));
}

export function linePickupW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszGroupID: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.linePickupW(hLine, dwAddressID, util.toPointer(lphCall), util.pwstrToFfi(lpszDestAddress), util.pwstrToFfi(lpszGroupID));
}

export function linePrepareAddToConference(
  hConfCall: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.linePrepareAddToConference(hConfCall, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function linePrepareAddToConferenceA(
  hConfCall: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.linePrepareAddToConferenceA(hConfCall, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function linePrepareAddToConferenceW(
  hConfCall: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.linePrepareAddToConferenceW(hConfCall, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineProxyMessage(
  hLine: number /* u32 */,
  hCall: number /* u32 */,
  dwMsg: number /* u32 */,
  dwParam1: number /* u32 */,
  dwParam2: number /* u32 */,
  dwParam3: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineProxyMessage(hLine, hCall, dwMsg, dwParam1, dwParam2, dwParam3);
}

export function lineProxyResponse(
  hLine: number /* u32 */,
  lpProxyRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwResult: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineProxyResponse(hLine, util.toPointer(lpProxyRequest), dwResult);
}

export function lineRedirect(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineRedirect(hCall, util.pstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineRedirectA(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineRedirectA(hCall, util.pstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineRedirectW(
  hCall: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCountryCode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineRedirectW(hCall, util.pwstrToFfi(lpszDestAddress), dwCountryCode);
}

export function lineRegisterRequestRecipient(
  hLineApp: number /* u32 */,
  dwRegistrationInstance: number /* u32 */,
  dwRequestMode: number /* u32 */,
  bEnable: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineRegisterRequestRecipient(hLineApp, dwRegistrationInstance, dwRequestMode, bEnable);
}

export function lineReleaseUserUserInfo(
  hCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineReleaseUserUserInfo(hCall);
}

export function lineRemoveFromConference(
  hCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineRemoveFromConference(hCall);
}

export function lineRemoveProvider(
  dwPermanentProviderID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* i32 */ {
  return libTAPI32_dll.lineRemoveProvider(dwPermanentProviderID, util.hwndToFfi(hwndOwner));
}

export function lineSecureCall(
  hCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSecureCall(hCall);
}

export function lineSendUserUserInfo(
  hCall: number /* u32 */,
  lpsUserUserInfo: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSendUserUserInfo(hCall, util.pstrToFfi(lpsUserUserInfo), dwSize);
}

export function lineSetAgentActivity(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwActivityID: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAgentActivity(hLine, dwAddressID, dwActivityID);
}

export function lineSetAgentGroup(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lpAgentGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAgentGroup(hLine, dwAddressID, util.toPointer(lpAgentGroupList));
}

export function lineSetAgentMeasurementPeriod(
  hLine: number /* u32 */,
  hAgent: number /* u32 */,
  dwMeasurementPeriod: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAgentMeasurementPeriod(hLine, hAgent, dwMeasurementPeriod);
}

export function lineSetAgentSessionState(
  hLine: number /* u32 */,
  hAgentSession: number /* u32 */,
  dwAgentSessionState: number /* u32 */,
  dwNextAgentSessionState: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAgentSessionState(hLine, hAgentSession, dwAgentSessionState, dwNextAgentSessionState);
}

export function lineSetAgentStateEx(
  hLine: number /* u32 */,
  hAgent: number /* u32 */,
  dwAgentState: number /* u32 */,
  dwNextAgentState: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAgentStateEx(hLine, hAgent, dwAgentState, dwNextAgentState);
}

export function lineSetAgentState(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwAgentState: number /* u32 */,
  dwNextAgentState: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAgentState(hLine, dwAddressID, dwAgentState, dwNextAgentState);
}

export function lineSetAppPriority(
  lpszAppFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  dwMediaMode: number /* u32 */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRequestMode: number /* u32 */,
  lpszExtensionName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwPriority: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAppPriority(util.pstrToFfi(lpszAppFilename), dwMediaMode, util.toPointer(lpExtensionID), dwRequestMode, util.pstrToFfi(lpszExtensionName), dwPriority);
}

export function lineSetAppPriorityA(
  lpszAppFilename: string | null /* Windows.Win32.Foundation.PSTR */,
  dwMediaMode: number /* u32 */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRequestMode: number /* u32 */,
  lpszExtensionName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwPriority: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAppPriorityA(util.pstrToFfi(lpszAppFilename), dwMediaMode, util.toPointer(lpExtensionID), dwRequestMode, util.pstrToFfi(lpszExtensionName), dwPriority);
}

export function lineSetAppPriorityW(
  lpszAppFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwMediaMode: number /* u32 */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRequestMode: number /* u32 */,
  lpszExtensionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwPriority: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAppPriorityW(util.pwstrToFfi(lpszAppFilename), dwMediaMode, util.toPointer(lpExtensionID), dwRequestMode, util.pwstrToFfi(lpszExtensionName), dwPriority);
}

export function lineSetAppSpecific(
  hCall: number /* u32 */,
  dwAppSpecific: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetAppSpecific(hCall, dwAppSpecific);
}

export function lineSetCallData(
  hCall: number /* u32 */,
  lpCallData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetCallData(hCall, util.toPointer(lpCallData), dwSize);
}

export function lineSetCallParams(
  hCall: number /* u32 */,
  dwBearerMode: number /* u32 */,
  dwMinRate: number /* u32 */,
  dwMaxRate: number /* u32 */,
  lpDialParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetCallParams(hCall, dwBearerMode, dwMinRate, dwMaxRate, util.toPointer(lpDialParams));
}

export function lineSetCallPrivilege(
  hCall: number /* u32 */,
  dwCallPrivilege: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetCallPrivilege(hCall, dwCallPrivilege);
}

export function lineSetCallQualityOfService(
  hCall: number /* u32 */,
  lpSendingFlowspec: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSendingFlowspecSize: number /* u32 */,
  lpReceivingFlowspec: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReceivingFlowspecSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetCallQualityOfService(hCall, util.toPointer(lpSendingFlowspec), dwSendingFlowspecSize, util.toPointer(lpReceivingFlowspec), dwReceivingFlowspecSize);
}

export function lineSetCallTreatment(
  hCall: number /* u32 */,
  dwTreatment: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetCallTreatment(hCall, dwTreatment);
}

export function lineSetCurrentLocation(
  hLineApp: number /* u32 */,
  dwLocation: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetCurrentLocation(hLineApp, dwLocation);
}

export function lineSetDevConfig(
  dwDeviceID: number /* u32 */,
  lpDeviceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetDevConfig(dwDeviceID, util.toPointer(lpDeviceConfig), dwSize, util.pstrToFfi(lpszDeviceClass));
}

export function lineSetDevConfigA(
  dwDeviceID: number /* u32 */,
  lpDeviceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetDevConfigA(dwDeviceID, util.toPointer(lpDeviceConfig), dwSize, util.pstrToFfi(lpszDeviceClass));
}

export function lineSetDevConfigW(
  dwDeviceID: number /* u32 */,
  lpDeviceConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetDevConfigW(dwDeviceID, util.toPointer(lpDeviceConfig), dwSize, util.pwstrToFfi(lpszDeviceClass));
}

export function lineSetLineDevStatus(
  hLine: number /* u32 */,
  dwStatusToChange: number /* u32 */,
  fStatus: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetLineDevStatus(hLine, dwStatusToChange, fStatus);
}

export function lineSetMediaControl(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  hCall: number /* u32 */,
  dwSelect: number /* u32 */,
  lpDigitList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDigitNumEntries: number /* u32 */,
  lpMediaList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMediaNumEntries: number /* u32 */,
  lpToneList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwToneNumEntries: number /* u32 */,
  lpCallStateList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCallStateNumEntries: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetMediaControl(hLine, dwAddressID, hCall, dwSelect, util.toPointer(lpDigitList), dwDigitNumEntries, util.toPointer(lpMediaList), dwMediaNumEntries, util.toPointer(lpToneList), dwToneNumEntries, util.toPointer(lpCallStateList), dwCallStateNumEntries);
}

export function lineSetMediaMode(
  hCall: number /* u32 */,
  dwMediaModes: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetMediaMode(hCall, dwMediaModes);
}

export function lineSetQueueMeasurementPeriod(
  hLine: number /* u32 */,
  dwQueueID: number /* u32 */,
  dwMeasurementPeriod: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetQueueMeasurementPeriod(hLine, dwQueueID, dwMeasurementPeriod);
}

export function lineSetNumRings(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  dwNumRings: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetNumRings(hLine, dwAddressID, dwNumRings);
}

export function lineSetStatusMessages(
  hLine: number /* u32 */,
  dwLineStates: number /* u32 */,
  dwAddressStates: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetStatusMessages(hLine, dwLineStates, dwAddressStates);
}

export function lineSetTerminal(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  hCall: number /* u32 */,
  dwSelect: number /* u32 */,
  dwTerminalModes: number /* u32 */,
  dwTerminalID: number /* u32 */,
  bEnable: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetTerminal(hLine, dwAddressID, hCall, dwSelect, dwTerminalModes, dwTerminalID, bEnable);
}

export function lineSetTollList(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PSTR */,
  dwTollListOption: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetTollList(hLineApp, dwDeviceID, util.pstrToFfi(lpszAddressIn), dwTollListOption);
}

export function lineSetTollListA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PSTR */,
  dwTollListOption: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetTollListA(hLineApp, dwDeviceID, util.pstrToFfi(lpszAddressIn), dwTollListOption);
}

export function lineSetTollListW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lpszAddressInW: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwTollListOption: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetTollListW(hLineApp, dwDeviceID, util.pwstrToFfi(lpszAddressInW), dwTollListOption);
}

export function lineSetupConference(
  hCall: number /* u32 */,
  hLine: number /* u32 */,
  lphConfCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumParties: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetupConference(hCall, hLine, util.toPointer(lphConfCall), util.toPointer(lphConsultCall), dwNumParties, util.toPointer(lpCallParams));
}

export function lineSetupConferenceA(
  hCall: number /* u32 */,
  hLine: number /* u32 */,
  lphConfCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumParties: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetupConferenceA(hCall, hLine, util.toPointer(lphConfCall), util.toPointer(lphConsultCall), dwNumParties, util.toPointer(lpCallParams));
}

export function lineSetupConferenceW(
  hCall: number /* u32 */,
  hLine: number /* u32 */,
  lphConfCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumParties: number /* u32 */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetupConferenceW(hCall, hLine, util.toPointer(lphConfCall), util.toPointer(lphConsultCall), dwNumParties, util.toPointer(lpCallParams));
}

export function lineSetupTransfer(
  hCall: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetupTransfer(hCall, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineSetupTransferA(
  hCall: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetupTransferA(hCall, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineSetupTransferW(
  hCall: number /* u32 */,
  lphConsultCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCallParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineSetupTransferW(hCall, util.toPointer(lphConsultCall), util.toPointer(lpCallParams));
}

export function lineShutdown(
  hLineApp: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineShutdown(hLineApp);
}

export function lineSwapHold(
  hActiveCall: number /* u32 */,
  hHeldCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineSwapHold(hActiveCall, hHeldCall);
}

export function lineTranslateAddress(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCard: number /* u32 */,
  dwTranslateOptions: number /* u32 */,
  lpTranslateOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineTranslateAddress(hLineApp, dwDeviceID, dwAPIVersion, util.pstrToFfi(lpszAddressIn), dwCard, dwTranslateOptions, util.toPointer(lpTranslateOutput));
}

export function lineTranslateAddressA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PSTR */,
  dwCard: number /* u32 */,
  dwTranslateOptions: number /* u32 */,
  lpTranslateOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineTranslateAddressA(hLineApp, dwDeviceID, dwAPIVersion, util.pstrToFfi(lpszAddressIn), dwCard, dwTranslateOptions, util.toPointer(lpTranslateOutput));
}

export function lineTranslateAddressW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCard: number /* u32 */,
  dwTranslateOptions: number /* u32 */,
  lpTranslateOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.lineTranslateAddressW(hLineApp, dwDeviceID, dwAPIVersion, util.pwstrToFfi(lpszAddressIn), dwCard, dwTranslateOptions, util.toPointer(lpTranslateOutput));
}

export function lineTranslateDialog(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineTranslateDialog(hLineApp, dwDeviceID, dwAPIVersion, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszAddressIn));
}

export function lineTranslateDialogA(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineTranslateDialogA(hLineApp, dwDeviceID, dwAPIVersion, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszAddressIn));
}

export function lineTranslateDialogW(
  hLineApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszAddressIn: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineTranslateDialogW(hLineApp, dwDeviceID, dwAPIVersion, util.hwndToFfi(hwndOwner), util.pwstrToFfi(lpszAddressIn));
}

export function lineUncompleteCall(
  hLine: number /* u32 */,
  dwCompletionID: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineUncompleteCall(hLine, dwCompletionID);
}

export function lineUnhold(
  hCall: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.lineUnhold(hCall);
}

export function lineUnpark(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineUnpark(hLine, dwAddressID, util.toPointer(lphCall), util.pstrToFfi(lpszDestAddress));
}

export function lineUnparkA(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineUnparkA(hLine, dwAddressID, util.toPointer(lphCall), util.pstrToFfi(lpszDestAddress));
}

export function lineUnparkW(
  hLine: number /* u32 */,
  dwAddressID: number /* u32 */,
  lphCall: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.lineUnparkW(hLine, dwAddressID, util.toPointer(lphCall), util.pwstrToFfi(lpszDestAddress));
}

export function phoneClose(
  hPhone: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneClose(hPhone);
}

export function phoneConfigDialog(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.phoneConfigDialog(dwDeviceID, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszDeviceClass));
}

export function phoneConfigDialogA(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.phoneConfigDialogA(dwDeviceID, util.hwndToFfi(hwndOwner), util.pstrToFfi(lpszDeviceClass));
}

export function phoneConfigDialogW(
  dwDeviceID: number /* u32 */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.phoneConfigDialogW(dwDeviceID, util.hwndToFfi(hwndOwner), util.pwstrToFfi(lpszDeviceClass));
}

export function phoneDevSpecific(
  hPhone: number /* u32 */,
  lpParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneDevSpecific(hPhone, util.toPointer(lpParams), dwSize);
}

export function phoneGetButtonInfo(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpButtonInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetButtonInfo(hPhone, dwButtonLampID, util.toPointer(lpButtonInfo));
}

export function phoneGetButtonInfoA(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpButtonInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetButtonInfoA(hPhone, dwButtonLampID, util.toPointer(lpButtonInfo));
}

export function phoneGetButtonInfoW(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpButtonInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetButtonInfoW(hPhone, dwButtonLampID, util.toPointer(lpButtonInfo));
}

export function phoneGetData(
  hPhone: number /* u32 */,
  dwDataID: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetData(hPhone, dwDataID, util.toPointer(lpData), dwSize);
}

export function phoneGetDevCaps(
  hPhoneApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpPhoneCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetDevCaps(hPhoneApp, dwDeviceID, dwAPIVersion, dwExtVersion, util.toPointer(lpPhoneCaps));
}

export function phoneGetDevCapsA(
  hPhoneApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpPhoneCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetDevCapsA(hPhoneApp, dwDeviceID, dwAPIVersion, dwExtVersion, util.toPointer(lpPhoneCaps));
}

export function phoneGetDevCapsW(
  hPhoneApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  lpPhoneCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetDevCapsW(hPhoneApp, dwDeviceID, dwAPIVersion, dwExtVersion, util.toPointer(lpPhoneCaps));
}

export function phoneGetDisplay(
  hPhone: number /* u32 */,
  lpDisplay: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetDisplay(hPhone, util.toPointer(lpDisplay));
}

export function phoneGetGain(
  hPhone: number /* u32 */,
  dwHookSwitchDev: number /* u32 */,
  lpdwGain: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetGain(hPhone, dwHookSwitchDev, util.toPointer(lpdwGain));
}

export function phoneGetHookSwitch(
  hPhone: number /* u32 */,
  lpdwHookSwitchDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetHookSwitch(hPhone, util.toPointer(lpdwHookSwitchDevs));
}

export function phoneGetIcon(
  dwDeviceID: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lphIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetIcon(dwDeviceID, util.pstrToFfi(lpszDeviceClass), util.toPointer(lphIcon));
}

export function phoneGetIconA(
  dwDeviceID: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lphIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetIconA(dwDeviceID, util.pstrToFfi(lpszDeviceClass), util.toPointer(lphIcon));
}

export function phoneGetIconW(
  dwDeviceID: number /* u32 */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
  lphIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetIconW(dwDeviceID, util.pwstrToFfi(lpszDeviceClass), util.toPointer(lphIcon));
}

export function phoneGetID(
  hPhone: number /* u32 */,
  lpDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetID(hPhone, util.toPointer(lpDeviceID), util.pstrToFfi(lpszDeviceClass));
}

export function phoneGetIDA(
  hPhone: number /* u32 */,
  lpDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetIDA(hPhone, util.toPointer(lpDeviceID), util.pstrToFfi(lpszDeviceClass));
}

export function phoneGetIDW(
  hPhone: number /* u32 */,
  lpDeviceID: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetIDW(hPhone, util.toPointer(lpDeviceID), util.pwstrToFfi(lpszDeviceClass));
}

export function phoneGetLamp(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpdwLampMode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetLamp(hPhone, dwButtonLampID, util.toPointer(lpdwLampMode));
}

export function phoneGetMessage(
  hPhoneApp: number /* u32 */,
  lpMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTimeout: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetMessage(hPhoneApp, util.toPointer(lpMessage), dwTimeout);
}

export function phoneGetRing(
  hPhone: number /* u32 */,
  lpdwRingMode: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwVolume: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetRing(hPhone, util.toPointer(lpdwRingMode), util.toPointer(lpdwVolume));
}

export function phoneGetStatus(
  hPhone: number /* u32 */,
  lpPhoneStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetStatus(hPhone, util.toPointer(lpPhoneStatus));
}

export function phoneGetStatusA(
  hPhone: number /* u32 */,
  lpPhoneStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetStatusA(hPhone, util.toPointer(lpPhoneStatus));
}

export function phoneGetStatusW(
  hPhone: number /* u32 */,
  lpPhoneStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetStatusW(hPhone, util.toPointer(lpPhoneStatus));
}

export function phoneGetStatusMessages(
  hPhone: number /* u32 */,
  lpdwPhoneStates: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwButtonModes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwButtonStates: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetStatusMessages(hPhone, util.toPointer(lpdwPhoneStates), util.toPointer(lpdwButtonModes), util.toPointer(lpdwButtonStates));
}

export function phoneGetVolume(
  hPhone: number /* u32 */,
  dwHookSwitchDev: number /* u32 */,
  lpdwVolume: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneGetVolume(hPhone, dwHookSwitchDev, util.toPointer(lpdwVolume));
}

export function phoneInitialize(
  lphPhoneApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Tapi.PHONECALLBACK */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwNumDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneInitialize(util.toPointer(lphPhoneApp), util.toPointer(hInstance), util.toPointer(lpfnCallback), util.pstrToFfi(lpszAppName), util.toPointer(lpdwNumDevs));
}

export function phoneInitializeExA(
  lphPhoneApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Tapi.PHONECALLBACK */,
  lpszFriendlyAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwNumDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwAPIVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPhoneInitializeExParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneInitializeExA(util.toPointer(lphPhoneApp), util.toPointer(hInstance), util.toPointer(lpfnCallback), util.pstrToFfi(lpszFriendlyAppName), util.toPointer(lpdwNumDevs), util.toPointer(lpdwAPIVersion), util.toPointer(lpPhoneInitializeExParams));
}

export function phoneInitializeExW(
  lphPhoneApp: Deno.PointerValue | Uint8Array | null /* ptr */,
  hInstance: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Tapi.PHONECALLBACK */,
  lpszFriendlyAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwNumDevs: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwAPIVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpPhoneInitializeExParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneInitializeExW(util.toPointer(lphPhoneApp), util.toPointer(hInstance), util.toPointer(lpfnCallback), util.pwstrToFfi(lpszFriendlyAppName), util.toPointer(lpdwNumDevs), util.toPointer(lpdwAPIVersion), util.toPointer(lpPhoneInitializeExParams));
}

export function phoneNegotiateAPIVersion(
  hPhoneApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPILowVersion: number /* u32 */,
  dwAPIHighVersion: number /* u32 */,
  lpdwAPIVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpExtensionID: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneNegotiateAPIVersion(hPhoneApp, dwDeviceID, dwAPILowVersion, dwAPIHighVersion, util.toPointer(lpdwAPIVersion), util.toPointer(lpExtensionID));
}

export function phoneNegotiateExtVersion(
  hPhoneApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  dwAPIVersion: number /* u32 */,
  dwExtLowVersion: number /* u32 */,
  dwExtHighVersion: number /* u32 */,
  lpdwExtVersion: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneNegotiateExtVersion(hPhoneApp, dwDeviceID, dwAPIVersion, dwExtLowVersion, dwExtHighVersion, util.toPointer(lpdwExtVersion));
}

export function phoneOpen(
  hPhoneApp: number /* u32 */,
  dwDeviceID: number /* u32 */,
  lphPhone: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAPIVersion: number /* u32 */,
  dwExtVersion: number /* u32 */,
  dwCallbackInstance: Deno.PointerValue /* usize */,
  dwPrivilege: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneOpen(hPhoneApp, dwDeviceID, util.toPointer(lphPhone), dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivilege);
}

export function phoneSetButtonInfo(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpButtonInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetButtonInfo(hPhone, dwButtonLampID, util.toPointer(lpButtonInfo));
}

export function phoneSetButtonInfoA(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpButtonInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetButtonInfoA(hPhone, dwButtonLampID, util.toPointer(lpButtonInfo));
}

export function phoneSetButtonInfoW(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  lpButtonInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetButtonInfoW(hPhone, dwButtonLampID, util.toPointer(lpButtonInfo));
}

export function phoneSetData(
  hPhone: number /* u32 */,
  dwDataID: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetData(hPhone, dwDataID, util.toPointer(lpData), dwSize);
}

export function phoneSetDisplay(
  hPhone: number /* u32 */,
  dwRow: number /* u32 */,
  dwColumn: number /* u32 */,
  lpsDisplay: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetDisplay(hPhone, dwRow, dwColumn, util.pstrToFfi(lpsDisplay), dwSize);
}

export function phoneSetGain(
  hPhone: number /* u32 */,
  dwHookSwitchDev: number /* u32 */,
  dwGain: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetGain(hPhone, dwHookSwitchDev, dwGain);
}

export function phoneSetHookSwitch(
  hPhone: number /* u32 */,
  dwHookSwitchDevs: number /* u32 */,
  dwHookSwitchMode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetHookSwitch(hPhone, dwHookSwitchDevs, dwHookSwitchMode);
}

export function phoneSetLamp(
  hPhone: number /* u32 */,
  dwButtonLampID: number /* u32 */,
  dwLampMode: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetLamp(hPhone, dwButtonLampID, dwLampMode);
}

export function phoneSetRing(
  hPhone: number /* u32 */,
  dwRingMode: number /* u32 */,
  dwVolume: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetRing(hPhone, dwRingMode, dwVolume);
}

export function phoneSetStatusMessages(
  hPhone: number /* u32 */,
  dwPhoneStates: number /* u32 */,
  dwButtonModes: number /* u32 */,
  dwButtonStates: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetStatusMessages(hPhone, dwPhoneStates, dwButtonModes, dwButtonStates);
}

export function phoneSetVolume(
  hPhone: number /* u32 */,
  dwHookSwitchDev: number /* u32 */,
  dwVolume: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneSetVolume(hPhone, dwHookSwitchDev, dwVolume);
}

export function phoneShutdown(
  hPhoneApp: number /* u32 */,
): number /* i32 */ {
  return libTAPI32_dll.phoneShutdown(hPhoneApp);
}

export function tapiGetLocationInfo(
  lpszCountryCode: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszCityCode: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiGetLocationInfo(util.pstrToFfi(lpszCountryCode), util.pstrToFfi(lpszCityCode));
}

export function tapiGetLocationInfoA(
  lpszCountryCode: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszCityCode: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiGetLocationInfoA(util.pstrToFfi(lpszCountryCode), util.pstrToFfi(lpszCityCode));
}

export function tapiGetLocationInfoW(
  lpszCountryCodeW: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszCityCodeW: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiGetLocationInfoW(util.pwstrToFfi(lpszCountryCodeW), util.pwstrToFfi(lpszCityCodeW));
}

export function tapiRequestDrop(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wRequestID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestDrop(util.hwndToFfi(hwnd), util.toPointer(wRequestID));
}

export function tapiRequestMakeCall(
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszCalledParty: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszComment: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestMakeCall(util.pstrToFfi(lpszDestAddress), util.pstrToFfi(lpszAppName), util.pstrToFfi(lpszCalledParty), util.pstrToFfi(lpszComment));
}

export function tapiRequestMakeCallA(
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszCalledParty: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszComment: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestMakeCallA(util.pstrToFfi(lpszDestAddress), util.pstrToFfi(lpszAppName), util.pstrToFfi(lpszCalledParty), util.pstrToFfi(lpszComment));
}

export function tapiRequestMakeCallW(
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszCalledParty: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszComment: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestMakeCallW(util.pwstrToFfi(lpszDestAddress), util.pwstrToFfi(lpszAppName), util.pwstrToFfi(lpszCalledParty), util.pwstrToFfi(lpszComment));
}

export function tapiRequestMediaCall(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wRequestID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
  dwSecure: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszCalledParty: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszComment: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestMediaCall(util.hwndToFfi(hwnd), util.toPointer(wRequestID), util.pstrToFfi(lpszDeviceClass), util.pstrToFfi(lpDeviceID), dwSize, dwSecure, util.pstrToFfi(lpszDestAddress), util.pstrToFfi(lpszAppName), util.pstrToFfi(lpszCalledParty), util.pstrToFfi(lpszComment));
}

export function tapiRequestMediaCallA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wRequestID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDeviceID: string | null /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
  dwSecure: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszCalledParty: string | null /* Windows.Win32.Foundation.PSTR */,
  lpszComment: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestMediaCallA(util.hwndToFfi(hwnd), util.toPointer(wRequestID), util.pstrToFfi(lpszDeviceClass), util.pstrToFfi(lpDeviceID), dwSize, dwSecure, util.pstrToFfi(lpszDestAddress), util.pstrToFfi(lpszAppName), util.pstrToFfi(lpszCalledParty), util.pstrToFfi(lpszComment));
}

export function tapiRequestMediaCallW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wRequestID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lpszDeviceClass: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDeviceID: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwSize: number /* u32 */,
  dwSecure: number /* u32 */,
  lpszDestAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszAppName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszCalledParty: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszComment: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libTAPI32_dll.tapiRequestMediaCallW(util.hwndToFfi(hwnd), util.toPointer(wRequestID), util.pwstrToFfi(lpszDeviceClass), util.pwstrToFfi(lpDeviceID), dwSize, dwSecure, util.pwstrToFfi(lpszDestAddress), util.pwstrToFfi(lpszAppName), util.pwstrToFfi(lpszCalledParty), util.pwstrToFfi(lpszComment));
}

export function OpenTnefStream(
  lpvSupport: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  lpszStreamName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  lpMessage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMessage */,
  wKeyVal: number /* u16 */,
  lppTNEF: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.OpenTnefStream(util.toPointer(lpvSupport), util.toPointer(lpStream), util.toPointer(lpszStreamName), ulFlags, util.toPointer(lpMessage), wKeyVal, util.toPointer(lppTNEF)));
}

export function OpenTnefStreamEx(
  lpvSupport: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  lpszStreamName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ulFlags: number /* u32 */,
  lpMessage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IMessage */,
  wKeyVal: number /* u16 */,
  lpAdressBook: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.AddressBook.IAddrBook */,
  lppTNEF: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.OpenTnefStreamEx(util.toPointer(lpvSupport), util.toPointer(lpStream), util.toPointer(lpszStreamName), ulFlags, util.toPointer(lpMessage), wKeyVal, util.toPointer(lpAdressBook), util.toPointer(lppTNEF)));
}

export function GetTnefStreamCodepage(
  lpStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  lpulCodepage: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpulSubCodepage: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMAPI32_dll.GetTnefStreamCodepage(util.toPointer(lpStream), util.toPointer(lpulCodepage), util.toPointer(lpulSubCodepage)));
}

