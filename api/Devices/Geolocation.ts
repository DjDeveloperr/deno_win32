/// Auto-generated by Deno Win32: Windows.Win32.Devices.Geolocation.Apis

import * as util from "../../util.ts";

// Enums
export type LOCATION_REPORT_STATUS = number;
export type GNSS_DRIVERCOMMAND_TYPE = number;
export type GNSS_FIXSESSIONTYPE = number;
export type GNSS_GEOREGIONTYPE = number;
export type GNSS_GEOFENCE_STATE = number;
export type GNSS_EVENT_TYPE = number;
export type GNSS_AGNSS_REQUEST_TYPE = number;
export type GNSS_NI_PLANE_TYPE = number;
export type GNSS_NI_REQUEST_TYPE = number;
export type GNSS_NI_NOTIFICATION_TYPE = number;
export type GNSS_DRIVER_REQUEST = number;
export type GNSS_SUPL_CERT_ACTION = number;
export type GNSS_NI_USER_RESPONSE = number;

// Constants
export const GNSS_DRIVER_VERSION_1 = 1;
export const GNSS_DRIVER_VERSION_2 = 2;
export const GNSS_DRIVER_VERSION_3 = 3;
export const GNSS_DRIVER_VERSION_4 = 4;
export const GNSS_DRIVER_VERSION_5 = 5;
export const GNSS_DRIVER_VERSION_6 = 6;
export const IOCTL_GNSS_SEND_PLATFORM_CAPABILITY = 2228228;
export const IOCTL_GNSS_GET_DEVICE_CAPABILITY = 2228232;
export const IOCTL_GNSS_SEND_DRIVERCOMMAND = 2228236;
export const IOCTL_GNSS_START_FIXSESSION = 2228288;
export const IOCTL_GNSS_MODIFY_FIXSESSION = 2228292;
export const IOCTL_GNSS_STOP_FIXSESSION = 2228296;
export const IOCTL_GNSS_GET_FIXDATA = 2228300;
export const IOCTL_GNSS_INJECT_AGNSS = 2228352;
export const IOCTL_GNSS_LISTEN_AGNSS = 2228416;
export const IOCTL_GNSS_LISTEN_ERROR = 2228420;
export const IOCTL_GNSS_LISTEN_NI = 2228480;
export const IOCTL_GNSS_SET_SUPL_HSLP = 2228484;
export const IOCTL_GNSS_CONFIG_SUPL_CERT = 2228488;
export const IOCTL_GNSS_RESPOND_NI = 2228492;
export const IOCTL_GNSS_EXECUTE_CWTEST = 2228496;
export const IOCTL_GNSS_EXECUTE_SELFTEST = 2228500;
export const IOCTL_GNSS_GET_CHIPSETINFO = 2228504;
export const IOCTL_GNSS_LISTEN_NMEA = 2228508;
export const IOCTL_GNSS_SET_V2UPL_CONFIG = 2228512;
export const IOCTL_GNSS_CREATE_GEOFENCE = 2228544;
export const IOCTL_GNSS_DELETE_GEOFENCE = 2228548;
export const IOCTL_GNSS_LISTEN_GEOFENCE_ALERT = 2228552;
export const IOCTL_GNSS_LISTEN_GEOFENCES_TRACKINGSTATUS = 2228556;
export const IOCTL_GNSS_LISTEN_DRIVER_REQUEST = 2228608;
export const IOCTL_GNSS_START_BREADCRUMBING = 2228672;
export const IOCTL_GNSS_STOP_BREADCRUMBING = 2228676;
export const IOCTL_GNSS_LISTEN_BREADCRUMBING_ALERT = 2228680;
export const IOCTL_GNSS_POP_BREADCRUMBS = 2228684;
export const GNSS_AGNSSFORMAT_XTRA1 = 1;
export const GNSS_AGNSSFORMAT_XTRA2 = 2;
export const GNSS_AGNSSFORMAT_LTO = 4;
export const GNSS_AGNSSFORMAT_XTRA3 = 8;
export const GNSS_AGNSSFORMAT_XTRA3_1 = 16;
export const GNSS_AGNSSFORMAT_XTRA3_2 = 32;
export const GNSS_AGNSSFORMAT_XTRA_INT = 64;
export const MAX_SERVER_URL_NAME = 260;
export const MIN_GEOFENCES_REQUIRED = 100;
export const BREADCRUMBING_UNSUPPORTED = 0;
export const BREADCRUMBING_VERSION_1 = 1;
export const MIN_BREADCRUMBS_SUPPORTED = 120;
export const GNSS_SATELLITE_ANY = 0;
export const GNSS_SATELLITE_GPS = 1;
export const GNSS_SATELLITE_GLONASS = 2;
export const GNSS_SATELLITE_BEIDOU = 4;
export const GNSS_SATELLITE_GALILEO = 8;
export const GNSS_OPERMODE_ANY = 0;
export const GNSS_OPERMODE_MSA = 1;
export const GNSS_OPERMODE_MSB = 2;
export const GNSS_OPERMODE_MSS = 4;
export const GNSS_OPERMODE_CELLID = 8;
export const GNSS_OPERMODE_AFLT = 16;
export const GNSS_OPERMODE_OTDOA = 32;
export const GNSS_NMEALOGGING_NONE = 0;
export const GNSS_NMEALOGGING_ALL = 255;
export const GNSS_FIXDETAIL_BASIC = 1;
export const GNSS_FIXDETAIL_ACCURACY = 2;
export const GNSS_FIXDETAIL_SATELLITE = 4;
export const GNSS_MAXSATELLITE = 64;
export const GNSS_GEOFENCESUPPORT_SUPPORTED = 1;
export const GNSS_GEOFENCESUPPORT_CIRCLE = 2;
export const LOCATION_API_VERSION = 1;
export const REPORT_NOT_SUPPORTED = 0;
export const REPORT_ERROR = 1;
export const REPORT_ACCESS_DENIED = 2;
export const REPORT_INITIALIZING = 3;
export const REPORT_RUNNING = 4;
export const GNSS_SetLocationServiceEnabled = 1;
export const GNSS_SetLocationNIRequestAllowed = 2;
export const GNSS_ForceSatelliteSystem = 3;
export const GNSS_ForceOperationMode = 4;
export const GNSS_ResetEngine = 9;
export const GNSS_ClearAgnssData = 10;
export const GNSS_SetSuplVersion = 12;
export const GNSS_SetNMEALogging = 13;
export const GNSS_SetUplServerAccessInterval = 14;
export const GNSS_SetNiTimeoutInterval = 15;
export const GNSS_ResetGeofencesTracking = 16;
export const GNSS_SetSuplVersion2 = 17;
export const GNSS_CustomCommand = 256;
export const GNSS_FixSession_SingleShot = 1;
export const GNSS_FixSession_DistanceTracking = 2;
export const GNSS_FixSession_ContinuousTracking = 3;
export const GNSS_FixSession_LKG = 4;
export const GNSS_GeoRegion_Circle = 1;
export const GNSS_GeofenceState_Unknown = 0;
export const GNSS_GeofenceState_Entered = 1;
export const GNSS_GeofenceState_Exited = 2;
export const GNSS_Event_FixAvailable = 1;
export const GNSS_Event_RequireAgnss = 2;
export const GNSS_Event_Error = 3;
export const GNSS_Event_NiRequest = 12;
export const GNSS_Event_NmeaData = 13;
export const GNSS_Event_GeofenceAlertData = 14;
export const GNSS_Event_GeofencesTrackingStatus = 15;
export const GNSS_Event_DriverRequest = 16;
export const GNSS_Event_BreadcrumbAlertEvent = 17;
export const GNSS_Event_FixAvailable_2 = 18;
export const GNSS_Event_Custom = 32768;
export const GNSS_AGNSS_TimeInjection = 1;
export const GNSS_AGNSS_PositionInjection = 2;
export const GNSS_AGNSS_BlobInjection = 3;
export const GNSS_NI_SUPL = 1;
export const GNSS_NI_CP = 2;
export const GNSS_NI_V2UPL = 3;
export const GNSS_NI_Request_SingleShot = 1;
export const GNSS_NI_Request_AreaTrigger = 2;
export const GNSS_NI_NoNotifyNoVerify = 1;
export const GNSS_NI_NotifyOnly = 2;
export const GNSS_NI_NotifyVerifyDefaultAllow = 3;
export const GNSS_NI_NotifyVerifyDefaultNotAllow = 4;
export const GNSS_NI_PrivacyOverride = 5;
export const SUPL_CONFIG_DATA = 1;
export const GNSS_Supl_Cert_Inject = 1;
export const GNSS_Supl_Cert_Delete = 2;
export const GNSS_Supl_Cert_Purge = 3;
export const GNSS_Ni_UserResponseAccept = 1;
export const GNSS_Ni_UserResponseDeny = 2;
export const GNSS_Ni_UserResponseTimeout = 3;

// Structs

/**
 * Windows.Win32.Devices.Geolocation.Apis (size: 8)
 */
export interface Apis {
  /** System.Guid */
  GUID_DEVINTERFACE_GNSS: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 8;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.GUID_DEVINTERFACE_GNSS !== undefined) view.setBigUint64(0, data.GUID_DEVINTERFACE_GNSS === null ? 0n : BigInt(util.toPointer(data.GUID_DEVINTERFACE_GNSS)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SUPL_VERSION (size: 8)
 */
export interface GNSS_SUPL_VERSION {
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
}

export const sizeofGNSS_SUPL_VERSION = 8;

export function allocGNSS_SUPL_VERSION(data?: Partial<GNSS_SUPL_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SUPL_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MajorVersion !== undefined) view.setUint32(0, Number(data.MajorVersion), true);
  // 0x04: u32
  if (data?.MinorVersion !== undefined) view.setUint32(4, Number(data.MinorVersion), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SUPL_VERSION_2 (size: 16)
 */
export interface GNSS_SUPL_VERSION_2 {
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
  /** u32 */
  ServiceIndicator: number;
}

export const sizeofGNSS_SUPL_VERSION_2 = 16;

export function allocGNSS_SUPL_VERSION_2(data?: Partial<GNSS_SUPL_VERSION_2>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SUPL_VERSION_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MajorVersion !== undefined) view.setUint32(0, Number(data.MajorVersion), true);
  // 0x04: u32
  if (data?.MinorVersion !== undefined) view.setUint32(4, Number(data.MinorVersion), true);
  // 0x08: u32
  if (data?.ServiceIndicator !== undefined) view.setUint32(8, Number(data.ServiceIndicator), true);
  // 0x0c: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.Geolocation.GNSS_DEVICE_CAPABILITY (size: 120)
 */
export interface GNSS_DEVICE_CAPABILITY {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.BOOL */
  SupportMultipleFixSessions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SupportMultipleAppSessions: boolean;
  /** Windows.Win32.Foundation.BOOL */
  RequireAGnssInjection: boolean;
  /** u32 */
  AgnssFormatSupported: number;
  /** u32 */
  AgnssFormatPreferred: number;
  /** Windows.Win32.Foundation.BOOL */
  SupportDistanceTracking: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SupportContinuousTracking: boolean;
  /** u32 */
  Reserved1: number;
  /** Windows.Win32.Foundation.BOOL */
  Reserved2: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Reserved3: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Reserved4: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Reserved5: boolean;
  /** u32 */
  GeofencingSupport: number;
  /** Windows.Win32.Foundation.BOOL */
  Reserved6: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Reserved7: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SupportCpLocation: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SupportUplV2: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SupportSuplV1: boolean;
  /** Windows.Win32.Foundation.BOOL */
  SupportSuplV2: boolean;
  /** Windows.Win32.Devices.Geolocation.GNSS_SUPL_VERSION */
  SupportedSuplVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxGeofencesSupported: number;
  /** Windows.Win32.Foundation.BOOL */
  SupportMultipleSuplRootCert: boolean;
  /** u32 */
  GnssBreadCrumbPayloadVersion: number;
  /** u32 */
  MaxGnssBreadCrumbFixes: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_DEVICE_CAPABILITY = 120;

export function allocGNSS_DEVICE_CAPABILITY(data?: Partial<GNSS_DEVICE_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_DEVICE_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.SupportMultipleFixSessions !== undefined) view.setInt32(8, Number(data.SupportMultipleFixSessions), true);
  // 0x0c: i32
  if (data?.SupportMultipleAppSessions !== undefined) view.setInt32(12, Number(data.SupportMultipleAppSessions), true);
  // 0x10: i32
  if (data?.RequireAGnssInjection !== undefined) view.setInt32(16, Number(data.RequireAGnssInjection), true);
  // 0x14: u32
  if (data?.AgnssFormatSupported !== undefined) view.setUint32(20, Number(data.AgnssFormatSupported), true);
  // 0x18: u32
  if (data?.AgnssFormatPreferred !== undefined) view.setUint32(24, Number(data.AgnssFormatPreferred), true);
  // 0x1c: i32
  if (data?.SupportDistanceTracking !== undefined) view.setInt32(28, Number(data.SupportDistanceTracking), true);
  // 0x20: i32
  if (data?.SupportContinuousTracking !== undefined) view.setInt32(32, Number(data.SupportContinuousTracking), true);
  // 0x24: u32
  if (data?.Reserved1 !== undefined) view.setUint32(36, Number(data.Reserved1), true);
  // 0x28: i32
  if (data?.Reserved2 !== undefined) view.setInt32(40, Number(data.Reserved2), true);
  // 0x2c: i32
  if (data?.Reserved3 !== undefined) view.setInt32(44, Number(data.Reserved3), true);
  // 0x30: i32
  if (data?.Reserved4 !== undefined) view.setInt32(48, Number(data.Reserved4), true);
  // 0x34: i32
  if (data?.Reserved5 !== undefined) view.setInt32(52, Number(data.Reserved5), true);
  // 0x38: u32
  if (data?.GeofencingSupport !== undefined) view.setUint32(56, Number(data.GeofencingSupport), true);
  // 0x3c: i32
  if (data?.Reserved6 !== undefined) view.setInt32(60, Number(data.Reserved6), true);
  // 0x40: i32
  if (data?.Reserved7 !== undefined) view.setInt32(64, Number(data.Reserved7), true);
  // 0x44: i32
  if (data?.SupportCpLocation !== undefined) view.setInt32(68, Number(data.SupportCpLocation), true);
  // 0x48: i32
  if (data?.SupportUplV2 !== undefined) view.setInt32(72, Number(data.SupportUplV2), true);
  // 0x4c: i32
  if (data?.SupportSuplV1 !== undefined) view.setInt32(76, Number(data.SupportSuplV1), true);
  // 0x50: i32
  if (data?.SupportSuplV2 !== undefined) view.setInt32(80, Number(data.SupportSuplV2), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.SupportedSuplVersion !== undefined) view.setBigUint64(88, data.SupportedSuplVersion === null ? 0n : BigInt(util.toPointer(data.SupportedSuplVersion)), true);
  // 0x60: u32
  if (data?.MaxGeofencesSupported !== undefined) view.setUint32(96, Number(data.MaxGeofencesSupported), true);
  // 0x64: i32
  if (data?.SupportMultipleSuplRootCert !== undefined) view.setInt32(100, Number(data.SupportMultipleSuplRootCert), true);
  // 0x68: u32
  if (data?.GnssBreadCrumbPayloadVersion !== undefined) view.setUint32(104, Number(data.GnssBreadCrumbPayloadVersion), true);
  // 0x6c: u32
  if (data?.MaxGnssBreadCrumbFixes !== undefined) view.setUint32(108, Number(data.MaxGnssBreadCrumbFixes), true);
  // 0x70: pointer
  if (data?.Unused !== undefined) view.setBigUint64(112, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_PLATFORM_CAPABILITY (size: 24)
 */
export interface GNSS_PLATFORM_CAPABILITY {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.BOOL */
  SupportAgnssInjection: boolean;
  /** u32 */
  AgnssFormatSupported: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_PLATFORM_CAPABILITY = 24;

export function allocGNSS_PLATFORM_CAPABILITY(data?: Partial<GNSS_PLATFORM_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_PLATFORM_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.SupportAgnssInjection !== undefined) view.setInt32(8, Number(data.SupportAgnssInjection), true);
  // 0x0c: u32
  if (data?.AgnssFormatSupported !== undefined) view.setUint32(12, Number(data.AgnssFormatSupported), true);
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_DRIVERCOMMAND_PARAM (size: 40)
 */
export interface GNSS_DRIVERCOMMAND_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_DRIVERCOMMAND_TYPE */
  CommandType: GNSS_DRIVERCOMMAND_TYPE;
  /** u32 */
  Reserved: number;
  /** u32 */
  CommandDataSize: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** array */
  CommandData: Deno.PointerValue | null;
}

export const sizeofGNSS_DRIVERCOMMAND_PARAM = 40;

export function allocGNSS_DRIVERCOMMAND_PARAM(data?: Partial<GNSS_DRIVERCOMMAND_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_DRIVERCOMMAND_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.CommandType !== undefined) view.setInt32(8, Number(data.CommandType), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: u32
  if (data?.CommandDataSize !== undefined) view.setUint32(16, Number(data.CommandDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x20: pointer
  if (data?.CommandData !== undefined) view.setBigUint64(32, data.CommandData === null ? 0n : BigInt(util.toPointer(data.CommandData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SINGLESHOT_PARAM (size: 16)
 */
export interface GNSS_SINGLESHOT_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  ResponseTime: number;
}

export const sizeofGNSS_SINGLESHOT_PARAM = 16;

export function allocGNSS_SINGLESHOT_PARAM(data?: Partial<GNSS_SINGLESHOT_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SINGLESHOT_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.ResponseTime !== undefined) view.setUint32(8, Number(data.ResponseTime), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_DISTANCETRACKING_PARAM (size: 16)
 */
export interface GNSS_DISTANCETRACKING_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  MovementThreshold: number;
}

export const sizeofGNSS_DISTANCETRACKING_PARAM = 16;

export function allocGNSS_DISTANCETRACKING_PARAM(data?: Partial<GNSS_DISTANCETRACKING_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_DISTANCETRACKING_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.MovementThreshold !== undefined) view.setUint32(8, Number(data.MovementThreshold), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_CONTINUOUSTRACKING_PARAM (size: 16)
 */
export interface GNSS_CONTINUOUSTRACKING_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  PreferredInterval: number;
}

export const sizeofGNSS_CONTINUOUSTRACKING_PARAM = 16;

export function allocGNSS_CONTINUOUSTRACKING_PARAM(data?: Partial<GNSS_CONTINUOUSTRACKING_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_CONTINUOUSTRACKING_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.PreferredInterval !== undefined) view.setUint32(8, Number(data.PreferredInterval), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_LKGFIX_PARAM (size: 8)
 */
export interface GNSS_LKGFIX_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
}

export const sizeofGNSS_LKGFIX_PARAM = 8;

export function allocGNSS_LKGFIX_PARAM(data?: Partial<GNSS_LKGFIX_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_LKGFIX_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXSESSION_PARAM (size: 56)
 */
export interface GNSS_FIXSESSION_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  FixSessionID: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXSESSIONTYPE */
  SessionType: GNSS_FIXSESSIONTYPE;
  /** u32 */
  HorizontalAccuracy: number;
  /** u32 */
  HorizontalConfidence: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  FixLevelOfDetails: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_FIXSESSION_PARAM = 56;

export function allocGNSS_FIXSESSION_PARAM(data?: Partial<GNSS_FIXSESSION_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXSESSION_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.FixSessionID !== undefined) view.setUint32(8, Number(data.FixSessionID), true);
  // 0x0c: i32
  if (data?.SessionType !== undefined) view.setInt32(12, Number(data.SessionType), true);
  // 0x10: u32
  if (data?.HorizontalAccuracy !== undefined) view.setUint32(16, Number(data.HorizontalAccuracy), true);
  // 0x14: u32
  if (data?.HorizontalConfidence !== undefined) view.setUint32(20, Number(data.HorizontalConfidence), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x20: u32
  if (data?.FixLevelOfDetails !== undefined) view.setUint32(32, Number(data.FixLevelOfDetails), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: pointer
  if (data?.Unused !== undefined) view.setBigUint64(48, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_STOPFIXSESSION_PARAM (size: 24)
 */
export interface GNSS_STOPFIXSESSION_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  FixSessionID: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_STOPFIXSESSION_PARAM = 24;

export function allocGNSS_STOPFIXSESSION_PARAM(data?: Partial<GNSS_STOPFIXSESSION_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_STOPFIXSESSION_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.FixSessionID !== undefined) view.setUint32(8, Number(data.FixSessionID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_BASIC (size: 48)
 */
export interface GNSS_FIXDATA_BASIC {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** f64 */
  Latitude: number;
  /** f64 */
  Longitude: number;
  /** f64 */
  Altitude: number;
  /** f64 */
  Speed: number;
  /** f64 */
  Heading: number;
}

export const sizeofGNSS_FIXDATA_BASIC = 48;

export function allocGNSS_FIXDATA_BASIC(data?: Partial<GNSS_FIXDATA_BASIC>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA_BASIC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: f64
  if (data?.Latitude !== undefined) view.setFloat64(8, Number(data.Latitude), true);
  // 0x10: f64
  if (data?.Longitude !== undefined) view.setFloat64(16, Number(data.Longitude), true);
  // 0x18: f64
  if (data?.Altitude !== undefined) view.setFloat64(24, Number(data.Altitude), true);
  // 0x20: f64
  if (data?.Speed !== undefined) view.setFloat64(32, Number(data.Speed), true);
  // 0x28: f64
  if (data?.Heading !== undefined) view.setFloat64(40, Number(data.Heading), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_BASIC_2 (size: 56)
 */
export interface GNSS_FIXDATA_BASIC_2 {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** f64 */
  Latitude: number;
  /** f64 */
  Longitude: number;
  /** f64 */
  Altitude: number;
  /** f64 */
  Speed: number;
  /** f64 */
  Heading: number;
  /** f64 */
  AltitudeEllipsoid: number;
}

export const sizeofGNSS_FIXDATA_BASIC_2 = 56;

export function allocGNSS_FIXDATA_BASIC_2(data?: Partial<GNSS_FIXDATA_BASIC_2>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA_BASIC_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: f64
  if (data?.Latitude !== undefined) view.setFloat64(8, Number(data.Latitude), true);
  // 0x10: f64
  if (data?.Longitude !== undefined) view.setFloat64(16, Number(data.Longitude), true);
  // 0x18: f64
  if (data?.Altitude !== undefined) view.setFloat64(24, Number(data.Altitude), true);
  // 0x20: f64
  if (data?.Speed !== undefined) view.setFloat64(32, Number(data.Speed), true);
  // 0x28: f64
  if (data?.Heading !== undefined) view.setFloat64(40, Number(data.Heading), true);
  // 0x30: f64
  if (data?.AltitudeEllipsoid !== undefined) view.setFloat64(48, Number(data.AltitudeEllipsoid), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_ACCURACY (size: 64)
 */
export interface GNSS_FIXDATA_ACCURACY {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  HorizontalAccuracy: number;
  /** u32 */
  HorizontalErrorMajorAxis: number;
  /** u32 */
  HorizontalErrorMinorAxis: number;
  /** u32 */
  HorizontalErrorAngle: number;
  /** u32 */
  HeadingAccuracy: number;
  /** u32 */
  AltitudeAccuracy: number;
  /** u32 */
  SpeedAccuracy: number;
  /** u32 */
  HorizontalConfidence: number;
  /** u32 */
  HeadingConfidence: number;
  /** u32 */
  AltitudeConfidence: number;
  /** u32 */
  SpeedConfidence: number;
  /** f32 */
  PositionDilutionOfPrecision: number;
  /** f32 */
  HorizontalDilutionOfPrecision: number;
  /** f32 */
  VerticalDilutionOfPrecision: number;
}

export const sizeofGNSS_FIXDATA_ACCURACY = 64;

export function allocGNSS_FIXDATA_ACCURACY(data?: Partial<GNSS_FIXDATA_ACCURACY>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA_ACCURACY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.HorizontalAccuracy !== undefined) view.setUint32(8, Number(data.HorizontalAccuracy), true);
  // 0x0c: u32
  if (data?.HorizontalErrorMajorAxis !== undefined) view.setUint32(12, Number(data.HorizontalErrorMajorAxis), true);
  // 0x10: u32
  if (data?.HorizontalErrorMinorAxis !== undefined) view.setUint32(16, Number(data.HorizontalErrorMinorAxis), true);
  // 0x14: u32
  if (data?.HorizontalErrorAngle !== undefined) view.setUint32(20, Number(data.HorizontalErrorAngle), true);
  // 0x18: u32
  if (data?.HeadingAccuracy !== undefined) view.setUint32(24, Number(data.HeadingAccuracy), true);
  // 0x1c: u32
  if (data?.AltitudeAccuracy !== undefined) view.setUint32(28, Number(data.AltitudeAccuracy), true);
  // 0x20: u32
  if (data?.SpeedAccuracy !== undefined) view.setUint32(32, Number(data.SpeedAccuracy), true);
  // 0x24: u32
  if (data?.HorizontalConfidence !== undefined) view.setUint32(36, Number(data.HorizontalConfidence), true);
  // 0x28: u32
  if (data?.HeadingConfidence !== undefined) view.setUint32(40, Number(data.HeadingConfidence), true);
  // 0x2c: u32
  if (data?.AltitudeConfidence !== undefined) view.setUint32(44, Number(data.AltitudeConfidence), true);
  // 0x30: u32
  if (data?.SpeedConfidence !== undefined) view.setUint32(48, Number(data.SpeedConfidence), true);
  // 0x34: f32
  if (data?.PositionDilutionOfPrecision !== undefined) view.setFloat32(52, Number(data.PositionDilutionOfPrecision), true);
  // 0x38: f32
  if (data?.HorizontalDilutionOfPrecision !== undefined) view.setFloat32(56, Number(data.HorizontalDilutionOfPrecision), true);
  // 0x3c: f32
  if (data?.VerticalDilutionOfPrecision !== undefined) view.setFloat32(60, Number(data.VerticalDilutionOfPrecision), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_ACCURACY_2 (size: 120)
 */
export interface GNSS_FIXDATA_ACCURACY_2 {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** f64 */
  HorizontalAccuracy: number;
  /** f64 */
  HorizontalErrorMajorAxis: number;
  /** f64 */
  HorizontalErrorMinorAxis: number;
  /** f64 */
  HorizontalErrorAngle: number;
  /** f64 */
  HeadingAccuracy: number;
  /** f64 */
  AltitudeAccuracy: number;
  /** f64 */
  SpeedAccuracy: number;
  /** u32 */
  HorizontalConfidence: number;
  /** u32 */
  HeadingConfidence: number;
  /** u32 */
  AltitudeConfidence: number;
  /** u32 */
  SpeedConfidence: number;
  /** f64 */
  PositionDilutionOfPrecision: number;
  /** f64 */
  HorizontalDilutionOfPrecision: number;
  /** f64 */
  VerticalDilutionOfPrecision: number;
  /** f64 */
  GeometricDilutionOfPrecision: number;
  /** f64 */
  TimeDilutionOfPrecision: number;
}

export const sizeofGNSS_FIXDATA_ACCURACY_2 = 120;

export function allocGNSS_FIXDATA_ACCURACY_2(data?: Partial<GNSS_FIXDATA_ACCURACY_2>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA_ACCURACY_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: f64
  if (data?.HorizontalAccuracy !== undefined) view.setFloat64(8, Number(data.HorizontalAccuracy), true);
  // 0x10: f64
  if (data?.HorizontalErrorMajorAxis !== undefined) view.setFloat64(16, Number(data.HorizontalErrorMajorAxis), true);
  // 0x18: f64
  if (data?.HorizontalErrorMinorAxis !== undefined) view.setFloat64(24, Number(data.HorizontalErrorMinorAxis), true);
  // 0x20: f64
  if (data?.HorizontalErrorAngle !== undefined) view.setFloat64(32, Number(data.HorizontalErrorAngle), true);
  // 0x28: f64
  if (data?.HeadingAccuracy !== undefined) view.setFloat64(40, Number(data.HeadingAccuracy), true);
  // 0x30: f64
  if (data?.AltitudeAccuracy !== undefined) view.setFloat64(48, Number(data.AltitudeAccuracy), true);
  // 0x38: f64
  if (data?.SpeedAccuracy !== undefined) view.setFloat64(56, Number(data.SpeedAccuracy), true);
  // 0x40: u32
  if (data?.HorizontalConfidence !== undefined) view.setUint32(64, Number(data.HorizontalConfidence), true);
  // 0x44: u32
  if (data?.HeadingConfidence !== undefined) view.setUint32(68, Number(data.HeadingConfidence), true);
  // 0x48: u32
  if (data?.AltitudeConfidence !== undefined) view.setUint32(72, Number(data.AltitudeConfidence), true);
  // 0x4c: u32
  if (data?.SpeedConfidence !== undefined) view.setUint32(76, Number(data.SpeedConfidence), true);
  // 0x50: f64
  if (data?.PositionDilutionOfPrecision !== undefined) view.setFloat64(80, Number(data.PositionDilutionOfPrecision), true);
  // 0x58: f64
  if (data?.HorizontalDilutionOfPrecision !== undefined) view.setFloat64(88, Number(data.HorizontalDilutionOfPrecision), true);
  // 0x60: f64
  if (data?.VerticalDilutionOfPrecision !== undefined) view.setFloat64(96, Number(data.VerticalDilutionOfPrecision), true);
  // 0x68: f64
  if (data?.GeometricDilutionOfPrecision !== undefined) view.setFloat64(104, Number(data.GeometricDilutionOfPrecision), true);
  // 0x70: f64
  if (data?.TimeDilutionOfPrecision !== undefined) view.setFloat64(112, Number(data.TimeDilutionOfPrecision), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SATELLITEINFO (size: 32)
 */
export interface GNSS_SATELLITEINFO {
  /** u32 */
  SatelliteId: number;
  /** Windows.Win32.Foundation.BOOL */
  UsedInPositiong: boolean;
  /** f64 */
  Elevation: number;
  /** f64 */
  Azimuth: number;
  /** f64 */
  SignalToNoiseRatio: number;
}

export const sizeofGNSS_SATELLITEINFO = 32;

export function allocGNSS_SATELLITEINFO(data?: Partial<GNSS_SATELLITEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SATELLITEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SatelliteId !== undefined) view.setUint32(0, Number(data.SatelliteId), true);
  // 0x04: i32
  if (data?.UsedInPositiong !== undefined) view.setInt32(4, Number(data.UsedInPositiong), true);
  // 0x08: f64
  if (data?.Elevation !== undefined) view.setFloat64(8, Number(data.Elevation), true);
  // 0x10: f64
  if (data?.Azimuth !== undefined) view.setFloat64(16, Number(data.Azimuth), true);
  // 0x18: f64
  if (data?.SignalToNoiseRatio !== undefined) view.setFloat64(24, Number(data.SignalToNoiseRatio), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_SATELLITE (size: 24)
 */
export interface GNSS_FIXDATA_SATELLITE {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  SatelliteCount: number;
  /** array */
  SatelliteArray: Deno.PointerValue | null;
}

export const sizeofGNSS_FIXDATA_SATELLITE = 24;

export function allocGNSS_FIXDATA_SATELLITE(data?: Partial<GNSS_FIXDATA_SATELLITE>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA_SATELLITE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.SatelliteCount !== undefined) view.setUint32(8, Number(data.SatelliteCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SatelliteArray !== undefined) view.setBigUint64(16, data.SatelliteArray === null ? 0n : BigInt(util.toPointer(data.SatelliteArray)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA (size: 72)
 */
export interface GNSS_FIXDATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  FixSessionID: number;
  /** Windows.Win32.Foundation.FILETIME */
  FixTimeStamp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsFinalFix: boolean;
  /** Windows.Win32.Foundation.NTSTATUS */
  FixStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FixLevelOfDetails: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_BASIC */
  BasicData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_ACCURACY */
  AccuracyData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_SATELLITE */
  SatelliteData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_FIXDATA = 72;

export function allocGNSS_FIXDATA(data?: Partial<GNSS_FIXDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.FixSessionID !== undefined) view.setUint32(8, Number(data.FixSessionID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FixTimeStamp !== undefined) view.setBigUint64(16, data.FixTimeStamp === null ? 0n : BigInt(util.toPointer(data.FixTimeStamp)), true);
  // 0x18: i32
  if (data?.IsFinalFix !== undefined) view.setInt32(24, Number(data.IsFinalFix), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FixStatus !== undefined) view.setBigUint64(32, data.FixStatus === null ? 0n : BigInt(util.toPointer(data.FixStatus)), true);
  // 0x28: u32
  if (data?.FixLevelOfDetails !== undefined) view.setUint32(40, Number(data.FixLevelOfDetails), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.BasicData !== undefined) view.setBigUint64(48, data.BasicData === null ? 0n : BigInt(util.toPointer(data.BasicData)), true);
  // 0x38: pointer
  if (data?.AccuracyData !== undefined) view.setBigUint64(56, data.AccuracyData === null ? 0n : BigInt(util.toPointer(data.AccuracyData)), true);
  // 0x40: pointer
  if (data?.SatelliteData !== undefined) view.setBigUint64(64, data.SatelliteData === null ? 0n : BigInt(util.toPointer(data.SatelliteData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_2 (size: 72)
 */
export interface GNSS_FIXDATA_2 {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  FixSessionID: number;
  /** Windows.Win32.Foundation.FILETIME */
  FixTimeStamp: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  IsFinalFix: boolean;
  /** Windows.Win32.Foundation.NTSTATUS */
  FixStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FixLevelOfDetails: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_BASIC_2 */
  BasicData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_ACCURACY_2 */
  AccuracyData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_SATELLITE */
  SatelliteData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_FIXDATA_2 = 72;

export function allocGNSS_FIXDATA_2(data?: Partial<GNSS_FIXDATA_2>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_FIXDATA_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.FixSessionID !== undefined) view.setUint32(8, Number(data.FixSessionID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FixTimeStamp !== undefined) view.setBigUint64(16, data.FixTimeStamp === null ? 0n : BigInt(util.toPointer(data.FixTimeStamp)), true);
  // 0x18: i32
  if (data?.IsFinalFix !== undefined) view.setInt32(24, Number(data.IsFinalFix), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FixStatus !== undefined) view.setBigUint64(32, data.FixStatus === null ? 0n : BigInt(util.toPointer(data.FixStatus)), true);
  // 0x28: u32
  if (data?.FixLevelOfDetails !== undefined) view.setUint32(40, Number(data.FixLevelOfDetails), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.BasicData !== undefined) view.setBigUint64(48, data.BasicData === null ? 0n : BigInt(util.toPointer(data.BasicData)), true);
  // 0x38: pointer
  if (data?.AccuracyData !== undefined) view.setBigUint64(56, data.AccuracyData === null ? 0n : BigInt(util.toPointer(data.AccuracyData)), true);
  // 0x40: pointer
  if (data?.SatelliteData !== undefined) view.setBigUint64(64, data.SatelliteData === null ? 0n : BigInt(util.toPointer(data.SatelliteData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_BREADCRUMBING_PARAM (size: 32)
 */
export interface GNSS_BREADCRUMBING_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  MaximumHorizontalUncertainty: number;
  /** u32 */
  MinDistanceBetweenFixes: number;
  /** u32 */
  MaximumErrorTimeoutMs: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_BREADCRUMBING_PARAM = 32;

export function allocGNSS_BREADCRUMBING_PARAM(data?: Partial<GNSS_BREADCRUMBING_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_BREADCRUMBING_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.MaximumHorizontalUncertainty !== undefined) view.setUint32(8, Number(data.MaximumHorizontalUncertainty), true);
  // 0x0c: u32
  if (data?.MinDistanceBetweenFixes !== undefined) view.setUint32(12, Number(data.MinDistanceBetweenFixes), true);
  // 0x10: u32
  if (data?.MaximumErrorTimeoutMs !== undefined) view.setUint32(16, Number(data.MaximumErrorTimeoutMs), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_BREADCRUMBING_ALERT_DATA (size: 16)
 */
export interface GNSS_BREADCRUMBING_ALERT_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_BREADCRUMBING_ALERT_DATA = 16;

export function allocGNSS_BREADCRUMBING_ALERT_DATA(data?: Partial<GNSS_BREADCRUMBING_ALERT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_BREADCRUMBING_ALERT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.Unused !== undefined) view.setBigUint64(8, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_BREADCRUMB_V1 (size: 40)
 */
export interface GNSS_BREADCRUMB_V1 {
  /** Windows.Win32.Foundation.FILETIME */
  FixTimeStamp: Uint8Array | Deno.PointerValue | null;
  /** f64 */
  Latitude: number;
  /** f64 */
  Longitude: number;
  /** u32 */
  HorizontalAccuracy: number;
  /** u16 */
  Speed: number;
  /** u16 */
  SpeedAccuracy: number;
  /** i16 */
  Altitude: number;
  /** u16 */
  AltitudeAccuracy: number;
  /** i16 */
  Heading: number;
  /** u8 */
  HeadingAccuracy: number;
  /** u8 */
  FixSuccess: number;
}

export const sizeofGNSS_BREADCRUMB_V1 = 40;

export function allocGNSS_BREADCRUMB_V1(data?: Partial<GNSS_BREADCRUMB_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_BREADCRUMB_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FixTimeStamp !== undefined) view.setBigUint64(0, data.FixTimeStamp === null ? 0n : BigInt(util.toPointer(data.FixTimeStamp)), true);
  // 0x08: f64
  if (data?.Latitude !== undefined) view.setFloat64(8, Number(data.Latitude), true);
  // 0x10: f64
  if (data?.Longitude !== undefined) view.setFloat64(16, Number(data.Longitude), true);
  // 0x18: u32
  if (data?.HorizontalAccuracy !== undefined) view.setUint32(24, Number(data.HorizontalAccuracy), true);
  // 0x1c: u16
  if (data?.Speed !== undefined) view.setUint16(28, Number(data.Speed), true);
  // 0x1e: u16
  if (data?.SpeedAccuracy !== undefined) view.setUint16(30, Number(data.SpeedAccuracy), true);
  // 0x20: i16
  if (data?.Altitude !== undefined) view.setInt16(32, Number(data.Altitude), true);
  // 0x22: u16
  if (data?.AltitudeAccuracy !== undefined) view.setUint16(34, Number(data.AltitudeAccuracy), true);
  // 0x24: i16
  if (data?.Heading !== undefined) view.setInt16(36, Number(data.Heading), true);
  // 0x26: u8
  if (data?.HeadingAccuracy !== undefined) view.setUint8(38, Number(data.HeadingAccuracy));
  // 0x27: u8
  if (data?.FixSuccess !== undefined) view.setUint8(39, Number(data.FixSuccess));
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_BREADCRUMB_LIST (size: 24)
 */
export interface GNSS_BREADCRUMB_LIST {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  NumCrumbs: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_BREADCRUMB_LIST = 24;

export function allocGNSS_BREADCRUMB_LIST(data?: Partial<GNSS_BREADCRUMB_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_BREADCRUMB_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.NumCrumbs !== undefined) view.setUint32(8, Number(data.NumCrumbs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOREGION_CIRCLE (size: 24)
 */
export interface GNSS_GEOREGION_CIRCLE {
  /** f64 */
  Latitude: number;
  /** f64 */
  Longitude: number;
  /** f64 */
  RadiusInMeters: number;
}

export const sizeofGNSS_GEOREGION_CIRCLE = 24;

export function allocGNSS_GEOREGION_CIRCLE(data?: Partial<GNSS_GEOREGION_CIRCLE>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOREGION_CIRCLE);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.Latitude !== undefined) view.setFloat64(0, Number(data.Latitude), true);
  // 0x08: f64
  if (data?.Longitude !== undefined) view.setFloat64(8, Number(data.Longitude), true);
  // 0x10: f64
  if (data?.RadiusInMeters !== undefined) view.setFloat64(16, Number(data.RadiusInMeters), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOREGION (size: 24)
 */
export interface GNSS_GEOREGION {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_GEOREGIONTYPE */
  GeoRegionType: GNSS_GEOREGIONTYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_GEOREGION = 24;

export function allocGNSS_GEOREGION(data?: Partial<GNSS_GEOREGION>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOREGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.GeoRegionType !== undefined) view.setInt32(8, Number(data.GeoRegionType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOFENCE_CREATE_PARAM (size: 32)
 */
export interface GNSS_GEOFENCE_CREATE_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  AlertTypes: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_GEOFENCE_STATE */
  InitialState: GNSS_GEOFENCE_STATE;
  /** Windows.Win32.Devices.Geolocation.GNSS_GEOREGION */
  Boundary: Uint8Array | Deno.PointerValue | null;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_GEOFENCE_CREATE_PARAM = 32;

export function allocGNSS_GEOFENCE_CREATE_PARAM(data?: Partial<GNSS_GEOFENCE_CREATE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOFENCE_CREATE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.AlertTypes !== undefined) view.setUint32(8, Number(data.AlertTypes), true);
  // 0x0c: i32
  if (data?.InitialState !== undefined) view.setInt32(12, Number(data.InitialState), true);
  // 0x10: pointer
  if (data?.Boundary !== undefined) view.setBigUint64(16, data.Boundary === null ? 0n : BigInt(util.toPointer(data.Boundary)), true);
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOFENCE_CREATE_RESPONSE (size: 32)
 */
export interface GNSS_GEOFENCE_CREATE_RESPONSE {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  CreationStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  GeofenceID: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_GEOFENCE_CREATE_RESPONSE = 32;

export function allocGNSS_GEOFENCE_CREATE_RESPONSE(data?: Partial<GNSS_GEOFENCE_CREATE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOFENCE_CREATE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.CreationStatus !== undefined) view.setBigUint64(8, data.CreationStatus === null ? 0n : BigInt(util.toPointer(data.CreationStatus)), true);
  // 0x10: u32
  if (data?.GeofenceID !== undefined) view.setUint32(16, Number(data.GeofenceID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOFENCE_DELETE_PARAM (size: 24)
 */
export interface GNSS_GEOFENCE_DELETE_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  GeofenceID: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_GEOFENCE_DELETE_PARAM = 24;

export function allocGNSS_GEOFENCE_DELETE_PARAM(data?: Partial<GNSS_GEOFENCE_DELETE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOFENCE_DELETE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.GeofenceID !== undefined) view.setUint32(8, Number(data.GeofenceID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOFENCE_ALERT_DATA (size: 40)
 */
export interface GNSS_GEOFENCE_ALERT_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  GeofenceID: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_GEOFENCE_STATE */
  GeofenceState: GNSS_GEOFENCE_STATE;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_BASIC */
  FixBasicData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_ACCURACY */
  FixAccuracyData: Uint8Array | Deno.PointerValue | null;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_GEOFENCE_ALERT_DATA = 40;

export function allocGNSS_GEOFENCE_ALERT_DATA(data?: Partial<GNSS_GEOFENCE_ALERT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOFENCE_ALERT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.GeofenceID !== undefined) view.setUint32(8, Number(data.GeofenceID), true);
  // 0x0c: i32
  if (data?.GeofenceState !== undefined) view.setInt32(12, Number(data.GeofenceState), true);
  // 0x10: pointer
  if (data?.FixBasicData !== undefined) view.setBigUint64(16, data.FixBasicData === null ? 0n : BigInt(util.toPointer(data.FixBasicData)), true);
  // 0x18: pointer
  if (data?.FixAccuracyData !== undefined) view.setBigUint64(24, data.FixAccuracyData === null ? 0n : BigInt(util.toPointer(data.FixAccuracyData)), true);
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_GEOFENCES_TRACKINGSTATUS_DATA (size: 32)
 */
export interface GNSS_GEOFENCES_TRACKINGSTATUS_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  Status: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  StatusTimeStamp: Uint8Array | Deno.PointerValue | null;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_GEOFENCES_TRACKINGSTATUS_DATA = 32;

export function allocGNSS_GEOFENCES_TRACKINGSTATUS_DATA(data?: Partial<GNSS_GEOFENCES_TRACKINGSTATUS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_GEOFENCES_TRACKINGSTATUS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.Status !== undefined) view.setBigUint64(8, data.Status === null ? 0n : BigInt(util.toPointer(data.Status)), true);
  // 0x10: pointer
  if (data?.StatusTimeStamp !== undefined) view.setBigUint64(16, data.StatusTimeStamp === null ? 0n : BigInt(util.toPointer(data.StatusTimeStamp)), true);
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_ERRORINFO (size: 32)
 */
export interface GNSS_ERRORINFO {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  ErrorCode: number;
  /** Windows.Win32.Foundation.BOOL */
  IsRecoverable: boolean;
  /** array */
  ErrorDescription: Deno.PointerValue | null;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_ERRORINFO = 32;

export function allocGNSS_ERRORINFO(data?: Partial<GNSS_ERRORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_ERRORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.ErrorCode !== undefined) view.setUint32(8, Number(data.ErrorCode), true);
  // 0x0c: i32
  if (data?.IsRecoverable !== undefined) view.setInt32(12, Number(data.IsRecoverable), true);
  // 0x10: pointer
  if (data?.ErrorDescription !== undefined) view.setBigUint64(16, data.ErrorDescription === null ? 0n : BigInt(util.toPointer(data.ErrorDescription)), true);
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_NMEA_DATA (size: 16)
 */
export interface GNSS_NMEA_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  NmeaSentences: Deno.PointerValue | null;
}

export const sizeofGNSS_NMEA_DATA = 16;

export function allocGNSS_NMEA_DATA(data?: Partial<GNSS_NMEA_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_NMEA_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.NmeaSentences !== undefined) view.setBigUint64(8, data.NmeaSentences === null ? 0n : BigInt(util.toPointer(data.NmeaSentences)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_AGNSS_REQUEST_PARAM (size: 16)
 */
export interface GNSS_AGNSS_REQUEST_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_AGNSS_REQUEST_TYPE */
  RequestType: GNSS_AGNSS_REQUEST_TYPE;
  /** u32 */
  BlobFormat: number;
}

export const sizeofGNSS_AGNSS_REQUEST_PARAM = 16;

export function allocGNSS_AGNSS_REQUEST_PARAM(data?: Partial<GNSS_AGNSS_REQUEST_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_AGNSS_REQUEST_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.RequestType !== undefined) view.setInt32(8, Number(data.RequestType), true);
  // 0x0c: u32
  if (data?.BlobFormat !== undefined) view.setUint32(12, Number(data.BlobFormat), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SUPL_NI_INFO (size: 32)
 */
export interface GNSS_SUPL_NI_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  RequestorId: Deno.PointerValue | null;
  /** array */
  ClientName: Deno.PointerValue | null;
  /** array */
  SuplNiUrl: Deno.PointerValue | null;
}

export const sizeofGNSS_SUPL_NI_INFO = 32;

export function allocGNSS_SUPL_NI_INFO(data?: Partial<GNSS_SUPL_NI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SUPL_NI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.RequestorId !== undefined) view.setBigUint64(8, data.RequestorId === null ? 0n : BigInt(util.toPointer(data.RequestorId)), true);
  // 0x10: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(16, data.ClientName === null ? 0n : BigInt(util.toPointer(data.ClientName)), true);
  // 0x18: pointer
  if (data?.SuplNiUrl !== undefined) view.setBigUint64(24, data.SuplNiUrl === null ? 0n : BigInt(util.toPointer(data.SuplNiUrl)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_CP_NI_INFO (size: 24)
 */
export interface GNSS_CP_NI_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  RequestorId: Deno.PointerValue | null;
  /** array */
  NotificationText: Deno.PointerValue | null;
}

export const sizeofGNSS_CP_NI_INFO = 24;

export function allocGNSS_CP_NI_INFO(data?: Partial<GNSS_CP_NI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_CP_NI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.RequestorId !== undefined) view.setBigUint64(8, data.RequestorId === null ? 0n : BigInt(util.toPointer(data.RequestorId)), true);
  // 0x10: pointer
  if (data?.NotificationText !== undefined) view.setBigUint64(16, data.NotificationText === null ? 0n : BigInt(util.toPointer(data.NotificationText)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_V2UPL_NI_INFO (size: 16)
 */
export interface GNSS_V2UPL_NI_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  RequestorId: Deno.PointerValue | null;
}

export const sizeofGNSS_V2UPL_NI_INFO = 16;

export function allocGNSS_V2UPL_NI_INFO(data?: Partial<GNSS_V2UPL_NI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_V2UPL_NI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.RequestorId !== undefined) view.setBigUint64(8, data.RequestorId === null ? 0n : BigInt(util.toPointer(data.RequestorId)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_NI_REQUEST_PARAM (size: 40)
 */
export interface GNSS_NI_REQUEST_PARAM {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  RequestId: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_NI_REQUEST_TYPE */
  RequestType: GNSS_NI_REQUEST_TYPE;
  /** Windows.Win32.Devices.Geolocation.GNSS_NI_NOTIFICATION_TYPE */
  NotificationType: GNSS_NI_NOTIFICATION_TYPE;
  /** Windows.Win32.Devices.Geolocation.GNSS_NI_PLANE_TYPE */
  RequestPlaneType: GNSS_NI_PLANE_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ResponseTimeInSec: number;
  /** Windows.Win32.Foundation.BOOL */
  EmergencyLocation: boolean;
}

export const sizeofGNSS_NI_REQUEST_PARAM = 40;

export function allocGNSS_NI_REQUEST_PARAM(data?: Partial<GNSS_NI_REQUEST_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_NI_REQUEST_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.RequestId !== undefined) view.setUint32(8, Number(data.RequestId), true);
  // 0x0c: i32
  if (data?.RequestType !== undefined) view.setInt32(12, Number(data.RequestType), true);
  // 0x10: i32
  if (data?.NotificationType !== undefined) view.setInt32(16, Number(data.NotificationType), true);
  // 0x14: i32
  if (data?.RequestPlaneType !== undefined) view.setInt32(20, Number(data.RequestPlaneType), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.ResponseTimeInSec !== undefined) view.setUint32(32, Number(data.ResponseTimeInSec), true);
  // 0x24: i32
  if (data?.EmergencyLocation !== undefined) view.setInt32(36, Number(data.EmergencyLocation), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_DRIVER_REQUEST_DATA (size: 16)
 */
export interface GNSS_DRIVER_REQUEST_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_DRIVER_REQUEST */
  Request: GNSS_DRIVER_REQUEST;
  /** u32 */
  RequestFlag: number;
}

export const sizeofGNSS_DRIVER_REQUEST_DATA = 16;

export function allocGNSS_DRIVER_REQUEST_DATA(data?: Partial<GNSS_DRIVER_REQUEST_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_DRIVER_REQUEST_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.Request !== undefined) view.setInt32(8, Number(data.Request), true);
  // 0x0c: u32
  if (data?.RequestFlag !== undefined) view.setUint32(12, Number(data.RequestFlag), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_EVENT (size: 32)
 */
export interface GNSS_EVENT {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_EVENT_TYPE */
  EventType: GNSS_EVENT_TYPE;
  /** u32 */
  EventDataSize: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_EVENT = 32;

export function allocGNSS_EVENT(data?: Partial<GNSS_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.EventType !== undefined) view.setInt32(8, Number(data.EventType), true);
  // 0x0c: u32
  if (data?.EventDataSize !== undefined) view.setUint32(12, Number(data.EventDataSize), true);
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_EVENT_2 (size: 32)
 */
export interface GNSS_EVENT_2 {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_EVENT_TYPE */
  EventType: GNSS_EVENT_TYPE;
  /** u32 */
  EventDataSize: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_EVENT_2 = 32;

export function allocGNSS_EVENT_2(data?: Partial<GNSS_EVENT_2>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_EVENT_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.EventType !== undefined) view.setInt32(8, Number(data.EventType), true);
  // 0x0c: u32
  if (data?.EventDataSize !== undefined) view.setUint32(12, Number(data.EventDataSize), true);
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_AGNSS_INJECTTIME (size: 24)
 */
export interface GNSS_AGNSS_INJECTTIME {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.FILETIME */
  UtcTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TimeUncertainty: number;
}

export const sizeofGNSS_AGNSS_INJECTTIME = 24;

export function allocGNSS_AGNSS_INJECTTIME(data?: Partial<GNSS_AGNSS_INJECTTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_AGNSS_INJECTTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.UtcTime !== undefined) view.setBigUint64(8, data.UtcTime === null ? 0n : BigInt(util.toPointer(data.UtcTime)), true);
  // 0x10: u32
  if (data?.TimeUncertainty !== undefined) view.setUint32(16, Number(data.TimeUncertainty), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_AGNSS_INJECTPOSITION (size: 32)
 */
export interface GNSS_AGNSS_INJECTPOSITION {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  Age: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_BASIC */
  BasicData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Geolocation.GNSS_FIXDATA_ACCURACY */
  AccuracyData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_AGNSS_INJECTPOSITION = 32;

export function allocGNSS_AGNSS_INJECTPOSITION(data?: Partial<GNSS_AGNSS_INJECTPOSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_AGNSS_INJECTPOSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.Age !== undefined) view.setUint32(8, Number(data.Age), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.BasicData !== undefined) view.setBigUint64(16, data.BasicData === null ? 0n : BigInt(util.toPointer(data.BasicData)), true);
  // 0x18: pointer
  if (data?.AccuracyData !== undefined) view.setBigUint64(24, data.AccuracyData === null ? 0n : BigInt(util.toPointer(data.AccuracyData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_AGNSS_INJECTBLOB (size: 32)
 */
export interface GNSS_AGNSS_INJECTBLOB {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  BlobOui: number;
  /** u32 */
  BlobVersion: number;
  /** u32 */
  AgnssFormat: number;
  /** u32 */
  BlobSize: number;
  /** array */
  BlobData: Deno.PointerValue | null;
}

export const sizeofGNSS_AGNSS_INJECTBLOB = 32;

export function allocGNSS_AGNSS_INJECTBLOB(data?: Partial<GNSS_AGNSS_INJECTBLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_AGNSS_INJECTBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.BlobOui !== undefined) view.setUint32(8, Number(data.BlobOui), true);
  // 0x0c: u32
  if (data?.BlobVersion !== undefined) view.setUint32(12, Number(data.BlobVersion), true);
  // 0x10: u32
  if (data?.AgnssFormat !== undefined) view.setUint32(16, Number(data.AgnssFormat), true);
  // 0x14: u32
  if (data?.BlobSize !== undefined) view.setUint32(20, Number(data.BlobSize), true);
  // 0x18: pointer
  if (data?.BlobData !== undefined) view.setBigUint64(24, data.BlobData === null ? 0n : BigInt(util.toPointer(data.BlobData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_AGNSS_INJECT (size: 48)
 */
export interface GNSS_AGNSS_INJECT {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_AGNSS_REQUEST_TYPE */
  InjectionType: GNSS_AGNSS_REQUEST_TYPE;
  /** Windows.Win32.Foundation.NTSTATUS */
  InjectionStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InjectionDataSize: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGNSS_AGNSS_INJECT = 48;

export function allocGNSS_AGNSS_INJECT(data?: Partial<GNSS_AGNSS_INJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_AGNSS_INJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.InjectionType !== undefined) view.setInt32(8, Number(data.InjectionType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.InjectionStatus !== undefined) view.setBigUint64(16, data.InjectionStatus === null ? 0n : BigInt(util.toPointer(data.InjectionStatus)), true);
  // 0x18: u32
  if (data?.InjectionDataSize !== undefined) view.setUint32(24, Number(data.InjectionDataSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SUPL_HSLP_CONFIG (size: 40)
 */
export interface GNSS_SUPL_HSLP_CONFIG {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  SuplHslp: Deno.PointerValue | null;
  /** array */
  SuplHslpFromImsi: Deno.PointerValue | null;
  /** u32 */
  Reserved: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_SUPL_HSLP_CONFIG = 40;

export function allocGNSS_SUPL_HSLP_CONFIG(data?: Partial<GNSS_SUPL_HSLP_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SUPL_HSLP_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.SuplHslp !== undefined) view.setBigUint64(8, data.SuplHslp === null ? 0n : BigInt(util.toPointer(data.SuplHslp)), true);
  // 0x10: pointer
  if (data?.SuplHslpFromImsi !== undefined) view.setBigUint64(16, data.SuplHslpFromImsi === null ? 0n : BigInt(util.toPointer(data.SuplHslpFromImsi)), true);
  // 0x18: u32
  if (data?.Reserved !== undefined) view.setUint32(24, Number(data.Reserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SUPL_CERT_CONFIG (size: 48)
 */
export interface GNSS_SUPL_CERT_CONFIG {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_SUPL_CERT_ACTION */
  CertAction: GNSS_SUPL_CERT_ACTION;
  /** array */
  SuplCertName: Deno.PointerValue | null;
  /** u32 */
  CertSize: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** array */
  CertData: Deno.PointerValue | null;
}

export const sizeofGNSS_SUPL_CERT_CONFIG = 48;

export function allocGNSS_SUPL_CERT_CONFIG(data?: Partial<GNSS_SUPL_CERT_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SUPL_CERT_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.CertAction !== undefined) view.setInt32(8, Number(data.CertAction), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SuplCertName !== undefined) view.setBigUint64(16, data.SuplCertName === null ? 0n : BigInt(util.toPointer(data.SuplCertName)), true);
  // 0x18: u32
  if (data?.CertSize !== undefined) view.setUint32(24, Number(data.CertSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x28: pointer
  if (data?.CertData !== undefined) view.setBigUint64(40, data.CertData === null ? 0n : BigInt(util.toPointer(data.CertData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_V2UPL_CONFIG (size: 40)
 */
export interface GNSS_V2UPL_CONFIG {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  MPC: Deno.PointerValue | null;
  /** array */
  PDE: Deno.PointerValue | null;
  /** u8 */
  ApplicationTypeIndicator_MR: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_V2UPL_CONFIG = 40;

export function allocGNSS_V2UPL_CONFIG(data?: Partial<GNSS_V2UPL_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_V2UPL_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.MPC !== undefined) view.setBigUint64(8, data.MPC === null ? 0n : BigInt(util.toPointer(data.MPC)), true);
  // 0x10: pointer
  if (data?.PDE !== undefined) view.setBigUint64(16, data.PDE === null ? 0n : BigInt(util.toPointer(data.PDE)), true);
  // 0x18: u8
  if (data?.ApplicationTypeIndicator_MR !== undefined) view.setUint8(24, Number(data.ApplicationTypeIndicator_MR));
  // 0x19: pad7
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_NI_RESPONSE (size: 16)
 */
export interface GNSS_NI_RESPONSE {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  RequestId: number;
  /** Windows.Win32.Devices.Geolocation.GNSS_NI_USER_RESPONSE */
  UserResponse: GNSS_NI_USER_RESPONSE;
}

export const sizeofGNSS_NI_RESPONSE = 16;

export function allocGNSS_NI_RESPONSE(data?: Partial<GNSS_NI_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_NI_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.RequestId !== undefined) view.setUint32(8, Number(data.RequestId), true);
  // 0x0c: i32
  if (data?.UserResponse !== undefined) view.setInt32(12, Number(data.UserResponse), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_CWTESTDATA (size: 40)
 */
export interface GNSS_CWTESTDATA {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  TestResultStatus: Uint8Array | Deno.PointerValue | null;
  /** f64 */
  SignalToNoiseRatio: number;
  /** f64 */
  Frequency: number;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_CWTESTDATA = 40;

export function allocGNSS_CWTESTDATA(data?: Partial<GNSS_CWTESTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_CWTESTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.TestResultStatus !== undefined) view.setBigUint64(8, data.TestResultStatus === null ? 0n : BigInt(util.toPointer(data.TestResultStatus)), true);
  // 0x10: f64
  if (data?.SignalToNoiseRatio !== undefined) view.setFloat64(16, Number(data.SignalToNoiseRatio), true);
  // 0x18: f64
  if (data?.Frequency !== undefined) view.setFloat64(24, Number(data.Frequency), true);
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SELFTESTCONFIG (size: 40)
 */
export interface GNSS_SELFTESTCONFIG {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** u32 */
  TestType: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** u32 */
  InBufLen: number;
  /** array */
  InBuffer: Deno.PointerValue | null;
}

export const sizeofGNSS_SELFTESTCONFIG = 40;

export function allocGNSS_SELFTESTCONFIG(data?: Partial<GNSS_SELFTESTCONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SELFTESTCONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.TestType !== undefined) view.setUint32(8, Number(data.TestType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Unused !== undefined) view.setBigUint64(16, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x18: u32
  if (data?.InBufLen !== undefined) view.setUint32(24, Number(data.InBufLen), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.InBuffer !== undefined) view.setBigUint64(32, data.InBuffer === null ? 0n : BigInt(util.toPointer(data.InBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_SELFTESTRESULT (size: 48)
 */
export interface GNSS_SELFTESTRESULT {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  TestResultStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Result: number;
  /** u32 */
  PinFailedBitMask: number;
  /** array */
  Unused: Deno.PointerValue | null;
  /** u32 */
  OutBufLen: number;
  /** array */
  OutBuffer: Deno.PointerValue | null;
}

export const sizeofGNSS_SELFTESTRESULT = 48;

export function allocGNSS_SELFTESTRESULT(data?: Partial<GNSS_SELFTESTRESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_SELFTESTRESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.TestResultStatus !== undefined) view.setBigUint64(8, data.TestResultStatus === null ? 0n : BigInt(util.toPointer(data.TestResultStatus)), true);
  // 0x10: u32
  if (data?.Result !== undefined) view.setUint32(16, Number(data.Result), true);
  // 0x14: u32
  if (data?.PinFailedBitMask !== undefined) view.setUint32(20, Number(data.PinFailedBitMask), true);
  // 0x18: pointer
  if (data?.Unused !== undefined) view.setBigUint64(24, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  // 0x20: u32
  if (data?.OutBufLen !== undefined) view.setUint32(32, Number(data.OutBufLen), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.OutBuffer !== undefined) view.setBigUint64(40, data.OutBuffer === null ? 0n : BigInt(util.toPointer(data.OutBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Geolocation.GNSS_CHIPSETINFO (size: 40)
 */
export interface GNSS_CHIPSETINFO {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** array */
  ManufacturerID: Deno.PointerValue | null;
  /** array */
  HardwareID: Deno.PointerValue | null;
  /** array */
  FirmwareVersion: Deno.PointerValue | null;
  /** array */
  Unused: Deno.PointerValue | null;
}

export const sizeofGNSS_CHIPSETINFO = 40;

export function allocGNSS_CHIPSETINFO(data?: Partial<GNSS_CHIPSETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGNSS_CHIPSETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.ManufacturerID !== undefined) view.setBigUint64(8, data.ManufacturerID === null ? 0n : BigInt(util.toPointer(data.ManufacturerID)), true);
  // 0x10: pointer
  if (data?.HardwareID !== undefined) view.setBigUint64(16, data.HardwareID === null ? 0n : BigInt(util.toPointer(data.HardwareID)), true);
  // 0x18: pointer
  if (data?.FirmwareVersion !== undefined) view.setBigUint64(24, data.FirmwareVersion === null ? 0n : BigInt(util.toPointer(data.FirmwareVersion)), true);
  // 0x20: pointer
  if (data?.Unused !== undefined) view.setBigUint64(32, data.Unused === null ? 0n : BigInt(util.toPointer(data.Unused)), true);
  return buf;
}

// Native Libraries

// Symbols

