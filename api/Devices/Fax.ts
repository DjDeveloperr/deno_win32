/// Auto-generated by Deno Win32: Windows.Win32.Devices.Fax.Apis

import * as util from "../../util.ts";

// Enums
export type FAX_ENUM_LOG_LEVELS = number;
export type FAX_ENUM_LOG_CATEGORIES = number;
export type FAX_ENUM_JOB_COMMANDS = number;
export type FAX_ENUM_JOB_SEND_ATTRIBUTES = number;
export type FAX_ENUM_DELIVERY_REPORT_TYPES = number;
export type FAX_ENUM_PORT_OPEN_TYPE = number;
export type FAX_JOB_STATUS_ENUM = number;
export type FAX_JOB_EXTENDED_STATUS_ENUM = number;
export type FAX_JOB_OPERATIONS_ENUM = number;
export type FAX_JOB_TYPE_ENUM = number;
export type FAX_SERVER_EVENTS_TYPE_ENUM = number;
export type FAX_SERVER_APIVERSION_ENUM = number;
export type FAX_SMTP_AUTHENTICATION_TYPE_ENUM = number;
export type FAX_RECEIPT_TYPE_ENUM = number;
export type FAX_ACCESS_RIGHTS_ENUM = number;
export type FAX_PRIORITY_TYPE_ENUM = number;
export type FAX_COVERPAGE_TYPE_ENUM = number;
export type FAX_SCHEDULE_TYPE_ENUM = number;
export type FAX_PROVIDER_STATUS_ENUM = number;
export type FAX_DEVICE_RECEIVE_MODE_ENUM = number;
export type FAX_LOG_LEVEL_ENUM = number;
export type FAX_GROUP_STATUS_ENUM = number;
export type FAX_RULE_STATUS_ENUM = number;
export type FAX_ACCOUNT_EVENTS_TYPE_ENUM = number;
export type FAX_ACCESS_RIGHTS_ENUM_2 = number;
export type FAX_ROUTING_RULE_CODE_ENUM = number;
export type FAXROUTE_ENABLE = number;
export type FAX_ENUM_DEVICE_ID_SOURCE = number;
export type SendToMode = number;
export type STI_DEVICE_MJ_TYPE = number;

// Constants
export const prv_DEFAULT_PREFETCH_SIZE = 100;
export const FS_INITIALIZING = 536870912;
export const FS_DIALING = 536870913;
export const FS_TRANSMITTING = 536870914;
export const FS_RECEIVING = 536870916;
export const FS_COMPLETED = 536870920;
export const FS_HANDLED = 536870928;
export const FS_LINE_UNAVAILABLE = 536870944;
export const FS_BUSY = 536870976;
export const FS_NO_ANSWER = 536871040;
export const FS_BAD_ADDRESS = 536871168;
export const FS_NO_DIAL_TONE = 536871424;
export const FS_DISCONNECTED = 536871936;
export const FS_FATAL_ERROR = 536872960;
export const FS_NOT_FAX_CALL = 536875008;
export const FS_CALL_DELAYED = 536879104;
export const FS_CALL_BLACKLISTED = 536887296;
export const FS_USER_ABORT = 538968064;
export const FS_ANSWERED = 545259520;
export const FAXDEVRECEIVE_SIZE = 4096;
export const FAXDEVREPORTSTATUS_SIZE = 4096;
export const MS_FAXROUTE_PRINTING_GUID = `{aec1b37c-9af2-11d0-abf7-00c04fd91a4e}`;
export const MS_FAXROUTE_FOLDER_GUID = `{92041a90-9af2-11d0-abf7-00c04fd91a4e}`;
export const MS_FAXROUTE_EMAIL_GUID = `{6bbf7bfe-9af2-11d0-abf7-00c04fd91a4e}`;
export const FAX_ERR_START = 7001;
export const FAX_ERR_SRV_OUTOFMEMORY = 7001;
export const FAX_ERR_GROUP_NOT_FOUND = 7002;
export const FAX_ERR_BAD_GROUP_CONFIGURATION = 7003;
export const FAX_ERR_GROUP_IN_USE = 7004;
export const FAX_ERR_RULE_NOT_FOUND = 7005;
export const FAX_ERR_NOT_NTFS = 7006;
export const FAX_ERR_DIRECTORY_IN_USE = 7007;
export const FAX_ERR_FILE_ACCESS_DENIED = 7008;
export const FAX_ERR_MESSAGE_NOT_FOUND = 7009;
export const FAX_ERR_DEVICE_NUM_LIMIT_EXCEEDED = 7010;
export const FAX_ERR_NOT_SUPPORTED_ON_THIS_SKU = 7011;
export const FAX_ERR_VERSION_MISMATCH = 7012;
export const FAX_ERR_RECIPIENTS_LIMIT = 7013;
export const FAX_ERR_END = 7013;
export const FAX_E_SRV_OUTOFMEMORY = 295929175897021273n;
export const FAX_E_GROUP_NOT_FOUND = 295930275408649050n;
export const FAX_E_BAD_GROUP_CONFIGURATION = 295931374920276827n;
export const FAX_E_GROUP_IN_USE = 295932474431904604n;
export const FAX_E_RULE_NOT_FOUND = 295933573943532381n;
export const FAX_E_NOT_NTFS = 295934673455160158n;
export const FAX_E_DIRECTORY_IN_USE = 295935772966787935n;
export const FAX_E_FILE_ACCESS_DENIED = 295936872478415712n;
export const FAX_E_MESSAGE_NOT_FOUND = 295937971990043489n;
export const FAX_E_DEVICE_NUM_LIMIT_EXCEEDED = 295939071501671266n;
export const FAX_E_NOT_SUPPORTED_ON_THIS_SKU = 295940171013299043n;
export const FAX_E_VERSION_MISMATCH = 295941270524926820n;
export const FAX_E_RECIPIENTS_LIMIT = 36028816346585957n;
export const JT_UNKNOWN = 0;
export const JT_SEND = 1;
export const JT_RECEIVE = 2;
export const JT_ROUTING = 3;
export const JT_FAIL_RECEIVE = 4;
export const JS_PENDING = 0;
export const JS_INPROGRESS = 1;
export const JS_DELETING = 2;
export const JS_FAILED = 4;
export const JS_PAUSED = 8;
export const JS_NOLINE = 16;
export const JS_RETRYING = 32;
export const JS_RETRIES_EXCEEDED = 64;
export const FPS_DIALING = 536870913;
export const FPS_SENDING = 536870914;
export const FPS_RECEIVING = 536870916;
export const FPS_COMPLETED = 536870920;
export const FPS_HANDLED = 536870928;
export const FPS_UNAVAILABLE = 536870944;
export const FPS_BUSY = 536870976;
export const FPS_NO_ANSWER = 536871040;
export const FPS_BAD_ADDRESS = 536871168;
export const FPS_NO_DIAL_TONE = 536871424;
export const FPS_DISCONNECTED = 536871936;
export const FPS_FATAL_ERROR = 536872960;
export const FPS_NOT_FAX_CALL = 536875008;
export const FPS_CALL_DELAYED = 536879104;
export const FPS_CALL_BLACKLISTED = 536887296;
export const FPS_INITIALIZING = 536903680;
export const FPS_OFFLINE = 536936448;
export const FPS_RINGING = 537001984;
export const FPS_AVAILABLE = 537919488;
export const FPS_ABORTING = 538968064;
export const FPS_ROUTING = 541065216;
export const FPS_ANSWERED = 545259520;
export const FPF_RECEIVE = 1;
export const FPF_SEND = 2;
export const FPF_VIRTUAL = 4;
export const FEI_DIALING = 1;
export const FEI_SENDING = 2;
export const FEI_RECEIVING = 3;
export const FEI_COMPLETED = 4;
export const FEI_BUSY = 5;
export const FEI_NO_ANSWER = 6;
export const FEI_BAD_ADDRESS = 7;
export const FEI_NO_DIAL_TONE = 8;
export const FEI_DISCONNECTED = 9;
export const FEI_FATAL_ERROR = 10;
export const FEI_NOT_FAX_CALL = 11;
export const FEI_CALL_DELAYED = 12;
export const FEI_CALL_BLACKLISTED = 13;
export const FEI_RINGING = 14;
export const FEI_ABORTING = 15;
export const FEI_ROUTING = 16;
export const FEI_MODEM_POWERED_ON = 17;
export const FEI_MODEM_POWERED_OFF = 18;
export const FEI_IDLE = 19;
export const FEI_FAXSVC_ENDED = 20;
export const FEI_ANSWERED = 21;
export const FEI_JOB_QUEUED = 22;
export const FEI_DELETED = 23;
export const FEI_INITIALIZING = 24;
export const FEI_LINE_UNAVAILABLE = 25;
export const FEI_HANDLED = 26;
export const FEI_FAXSVC_STARTED = 27;
export const FEI_NEVENTS = 27;
export const FAX_JOB_SUBMIT = 1;
export const FAX_JOB_QUERY = 2;
export const FAX_CONFIG_QUERY = 4;
export const FAX_CONFIG_SET = 8;
export const FAX_PORT_QUERY = 16;
export const FAX_PORT_SET = 32;
export const FAX_JOB_MANAGE = 64;
export const CF_MSFAXSRV_DEVICE_ID = `FAXSRV_DeviceID`;
export const CF_MSFAXSRV_FSP_GUID = `FAXSRV_FSPGuid`;
export const CF_MSFAXSRV_SERVER_NAME = `FAXSRV_ServerName`;
export const CF_MSFAXSRV_ROUTEEXT_NAME = `FAXSRV_RoutingExtName`;
export const CF_MSFAXSRV_ROUTING_METHOD_GUID = `FAXSRV_RoutingMethodGuid`;
export const STI_UNICODE = 1;
export const STI_VERSION_FLAG_MASK = 4278190080;
export const STI_VERSION_FLAG_UNICODE = 16777216;
export const STI_VERSION_REAL = 2;
export const STI_VERSION_MIN_ALLOWED = 2;
export const STI_VERSION = 2;
export const STI_MAX_INTERNAL_NAME_LENGTH = 128;
export const STI_GENCAP_NOTIFICATIONS = 1;
export const STI_GENCAP_POLLING_NEEDED = 2;
export const STI_GENCAP_GENERATE_ARRIVALEVENT = 4;
export const STI_GENCAP_AUTO_PORTSELECT = 8;
export const STI_GENCAP_WIA = 16;
export const STI_GENCAP_SUBSET = 32;
export const WIA_INCOMPAT_XP = 1;
export const STI_HW_CONFIG_UNKNOWN = 1;
export const STI_HW_CONFIG_SCSI = 2;
export const STI_HW_CONFIG_USB = 4;
export const STI_HW_CONFIG_SERIAL = 8;
export const STI_HW_CONFIG_PARALLEL = 16;
export const STI_DEVSTATUS_ONLINE_STATE = 1;
export const STI_DEVSTATUS_EVENTS_STATE = 2;
export const STI_ONLINESTATE_OPERATIONAL = 1;
export const STI_ONLINESTATE_PENDING = 2;
export const STI_ONLINESTATE_ERROR = 4;
export const STI_ONLINESTATE_PAUSED = 8;
export const STI_ONLINESTATE_PAPER_JAM = 16;
export const STI_ONLINESTATE_PAPER_PROBLEM = 32;
export const STI_ONLINESTATE_OFFLINE = 64;
export const STI_ONLINESTATE_IO_ACTIVE = 128;
export const STI_ONLINESTATE_BUSY = 256;
export const STI_ONLINESTATE_TRANSFERRING = 512;
export const STI_ONLINESTATE_INITIALIZING = 1024;
export const STI_ONLINESTATE_WARMING_UP = 2048;
export const STI_ONLINESTATE_USER_INTERVENTION = 4096;
export const STI_ONLINESTATE_POWER_SAVE = 8192;
export const STI_EVENTHANDLING_ENABLED = 1;
export const STI_EVENTHANDLING_POLLING = 2;
export const STI_EVENTHANDLING_PENDING = 4;
export const STI_DIAGCODE_HWPRESENCE = 1;
export const STI_TRACE_INFORMATION = 1;
export const STI_TRACE_WARNING = 2;
export const STI_TRACE_ERROR = 4;
export const STI_SUBSCRIBE_FLAG_WINDOW = 1;
export const STI_SUBSCRIBE_FLAG_EVENT = 2;
export const MAX_NOTIFICATION_DATA = 64;
export const STI_ADD_DEVICE_BROADCAST_ACTION = `Arrival`;
export const STI_REMOVE_DEVICE_BROADCAST_ACTION = `Removal`;
export const STI_ADD_DEVICE_BROADCAST_STRING = `STI\\`;
export const STI_REMOVE_DEVICE_BROADCAST_STRING = `STI\\`;
export const STI_DEVICE_CREATE_STATUS = 1;
export const STI_DEVICE_CREATE_DATA = 2;
export const STI_DEVICE_CREATE_BOTH = 3;
export const STI_DEVICE_CREATE_MASK = 65535;
export const STIEDFL_ALLDEVICES = 0;
export const STIEDFL_ATTACHEDONLY = 1;
export const STI_RAW_RESERVED = 4096;
export const STI_OK = 0;
export const STI_ERROR_NO_ERROR = 0;
export const STI_NOTCONNECTED = 1;
export const STI_CHANGENOEFFECT = 1;
export const STIERR_OLD_VERSION = 505670914500134014n;
export const STIERR_BETA_VERSION = 504534019477013633n;
export const STIERR_BADDRIVER = 504405376616562807n;
export const STIERR_DEVICENOTREG = `-2147221164`;
export const STIERR_OBJECTNOTFOUND = 504426267337490434n;
export const STIERR_INVALID_PARAM = `-2147024809`;
export const STIERR_NOINTERFACE = `-2147467262`;
export const STIERR_GENERIC = `-2147467259`;
export const STIERR_OUTOFMEMORY = `-2147024882`;
export const STIERR_UNSUPPORTED = `-2147467263`;
export const STIERR_NOT_INITIALIZED = 505774268593143829n;
export const STIERR_ALREADY_INITIALIZED = 504439461477024991n;
export const STIERR_DEVICE_LOCKED = 504576900430495777n;
export const STIERR_READONLY = `-2147024891`;
export const STIERR_NOTINITIALIZED = `-2147024891`;
export const STIERR_NEEDS_LOCK = 504438361965396126n;
export const STIERR_SHARING_VIOLATION = 504604388221190176n;
export const STIERR_HANDLEEXISTS = 504538417523523767n;
export const STIERR_INVALID_DEVICE_NAME = 504417471244468347n;
export const STIERR_INVALID_HW_TYPE = 504687951104901133n;
export const STIERR_NOEVENTS = 7277911609518260483n;
export const STIERR_DEVICE_NOTREADY = 505774268593143829n;
export const REGSTR_VAL_TYPE_W = `Type`;
export const REGSTR_VAL_VENDOR_NAME_W = `Vendor`;
export const REGSTR_VAL_DEVICETYPE_W = `DeviceType`;
export const REGSTR_VAL_DEVICESUBTYPE_W = `DeviceSubType`;
export const REGSTR_VAL_DEV_NAME_W = `DeviceName`;
export const REGSTR_VAL_DRIVER_DESC_W = `DriverDesc`;
export const REGSTR_VAL_FRIENDLY_NAME_W = `FriendlyName`;
export const REGSTR_VAL_GENERIC_CAPS_W = `Capabilities`;
export const REGSTR_VAL_HARDWARE_W = `HardwareConfig`;
export const REGSTR_VAL_HARDWARE = `HardwareConfig`;
export const REGSTR_VAL_DEVICE_NAME_W = `DriverDesc`;
export const REGSTR_VAL_DATA_W = `DeviceData`;
export const REGSTR_VAL_GUID_W = `GUID`;
export const REGSTR_VAL_GUID = `GUID`;
export const REGSTR_VAL_LAUNCH_APPS_W = `LaunchApplications`;
export const REGSTR_VAL_LAUNCH_APPS = `LaunchApplications`;
export const REGSTR_VAL_LAUNCHABLE_W = `Launchable`;
export const REGSTR_VAL_LAUNCHABLE = `Launchable`;
export const REGSTR_VAL_SHUTDOWNDELAY_W = `ShutdownIfUnusedDelay`;
export const REGSTR_VAL_SHUTDOWNDELAY = `ShutdownIfUnusedDelay`;
export const IS_DIGITAL_CAMERA_STR = `IsDigitalCamera`;
export const IS_DIGITAL_CAMERA_VAL = 1;
export const SUPPORTS_MSCPLUS_STR = `SupportsMSCPlus`;
export const SUPPORTS_MSCPLUS_VAL = 1;
export const STI_DEVICE_VALUE_TWAIN_NAME = `TwainDS`;
export const STI_DEVICE_VALUE_ISIS_NAME = `ISISDriverName`;
export const STI_DEVICE_VALUE_ICM_PROFILE = `ICMProfile`;
export const STI_DEVICE_VALUE_DEFAULT_LAUNCHAPP = `DefaultLaunchApp`;
export const STI_DEVICE_VALUE_TIMEOUT = `PollTimeout`;
export const STI_DEVICE_VALUE_DISABLE_NOTIFICATIONS = `DisableNotifications`;
export const REGSTR_VAL_BAUDRATE = `BaudRate`;
export const STI_DEVICE_VALUE_TWAIN_NAME_A = `TwainDS`;
export const STI_DEVICE_VALUE_ISIS_NAME_A = `ISISDriverName`;
export const STI_DEVICE_VALUE_ICM_PROFILE_A = `ICMProfile`;
export const STI_DEVICE_VALUE_DEFAULT_LAUNCHAPP_A = `DefaultLaunchApp`;
export const STI_DEVICE_VALUE_TIMEOUT_A = `PollTimeout`;
export const STI_DEVICE_VALUE_DISABLE_NOTIFICATIONS_A = `DisableNotifications`;
export const REGSTR_VAL_BAUDRATE_A = `BaudRate`;
export const STI_USD_GENCAP_NATIVE_PUSHSUPPORT = 1;
export const STI_DEVICE_CREATE_FOR_MONITOR = 16777216;
export const lDEFAULT_PREFETCH_SIZE = 100;
export const wcharREASSIGN_RECIPIENTS_DELIMITER = 59;
export const FAXLOG_LEVEL_NONE = 0;
export const FAXLOG_LEVEL_MIN = 1;
export const FAXLOG_LEVEL_MED = 2;
export const FAXLOG_LEVEL_MAX = 3;
export const FAXLOG_CATEGORY_INIT = 1;
export const FAXLOG_CATEGORY_OUTBOUND = 2;
export const FAXLOG_CATEGORY_INBOUND = 3;
export const FAXLOG_CATEGORY_UNKNOWN = 4;
export const JC_UNKNOWN = 0;
export const JC_DELETE = 1;
export const JC_PAUSE = 2;
export const JC_RESUME = 3;
export const JSA_NOW = 0;
export const JSA_SPECIFIC_TIME = 1;
export const JSA_DISCOUNT_PERIOD = 2;
export const DRT_NONE = 0;
export const DRT_EMAIL = 1;
export const DRT_INBOX = 2;
export const PORT_OPEN_QUERY = 1;
export const PORT_OPEN_MODIFY = 2;
export const fjsPENDING = 1;
export const fjsINPROGRESS = 2;
export const fjsFAILED = 8;
export const fjsPAUSED = 16;
export const fjsNOLINE = 32;
export const fjsRETRYING = 64;
export const fjsRETRIES_EXCEEDED = 128;
export const fjsCOMPLETED = 256;
export const fjsCANCELED = 512;
export const fjsCANCELING = 1024;
export const fjsROUTING = 2048;
export const fjesNONE = 0;
export const fjesDISCONNECTED = 1;
export const fjesINITIALIZING = 2;
export const fjesDIALING = 3;
export const fjesTRANSMITTING = 4;
export const fjesANSWERED = 5;
export const fjesRECEIVING = 6;
export const fjesLINE_UNAVAILABLE = 7;
export const fjesBUSY = 8;
export const fjesNO_ANSWER = 9;
export const fjesBAD_ADDRESS = 10;
export const fjesNO_DIAL_TONE = 11;
export const fjesFATAL_ERROR = 12;
export const fjesCALL_DELAYED = 13;
export const fjesCALL_BLACKLISTED = 14;
export const fjesNOT_FAX_CALL = 15;
export const fjesPARTIALLY_RECEIVED = 16;
export const fjesHANDLED = 17;
export const fjesCALL_COMPLETED = 18;
export const fjesCALL_ABORTED = 19;
export const fjesPROPRIETARY = 16777216;
export const fjoVIEW = 1;
export const fjoPAUSE = 2;
export const fjoRESUME = 4;
export const fjoRESTART = 8;
export const fjoDELETE = 16;
export const fjoRECIPIENT_INFO = 32;
export const fjoSENDER_INFO = 64;
export const fjtSEND = 0;
export const fjtRECEIVE = 1;
export const fjtROUTING = 2;
export const fsetNONE = 0;
export const fsetIN_QUEUE = 1;
export const fsetOUT_QUEUE = 2;
export const fsetCONFIG = 4;
export const fsetACTIVITY = 8;
export const fsetQUEUE_STATE = 16;
export const fsetIN_ARCHIVE = 32;
export const fsetOUT_ARCHIVE = 64;
export const fsetFXSSVC_ENDED = 128;
export const fsetDEVICE_STATUS = 256;
export const fsetINCOMING_CALL = 512;
export const fsAPI_VERSION_0 = 0;
export const fsAPI_VERSION_1 = 65536;
export const fsAPI_VERSION_2 = 131072;
export const fsAPI_VERSION_3 = 196608;
export const fsatANONYMOUS = 0;
export const fsatBASIC = 1;
export const fsatNTLM = 2;
export const frtNONE = 0;
export const frtMAIL = 1;
export const frtMSGBOX = 4;
export const farSUBMIT_LOW = 1;
export const farSUBMIT_NORMAL = 2;
export const farSUBMIT_HIGH = 4;
export const farQUERY_JOBS = 8;
export const farMANAGE_JOBS = 16;
export const farQUERY_CONFIG = 32;
export const farMANAGE_CONFIG = 64;
export const farQUERY_IN_ARCHIVE = 128;
export const farMANAGE_IN_ARCHIVE = 256;
export const farQUERY_OUT_ARCHIVE = 512;
export const farMANAGE_OUT_ARCHIVE = 1024;
export const fptLOW = 0;
export const fptNORMAL = 1;
export const fptHIGH = 2;
export const fcptNONE = 0;
export const fcptLOCAL = 1;
export const fcptSERVER = 2;
export const fstNOW = 0;
export const fstSPECIFIC_TIME = 1;
export const fstDISCOUNT_PERIOD = 2;
export const fpsSUCCESS = 0;
export const fpsSERVER_ERROR = 1;
export const fpsBAD_GUID = 2;
export const fpsBAD_VERSION = 3;
export const fpsCANT_LOAD = 4;
export const fpsCANT_LINK = 5;
export const fpsCANT_INIT = 6;
export const fdrmNO_ANSWER = 0;
export const fdrmAUTO_ANSWER = 1;
export const fdrmMANUAL_ANSWER = 2;
export const fllNONE = 0;
export const fllMIN = 1;
export const fllMED = 2;
export const fllMAX = 3;
export const fgsALL_DEV_VALID = 0;
export const fgsEMPTY = 1;
export const fgsALL_DEV_NOT_VALID = 2;
export const fgsSOME_DEV_NOT_VALID = 3;
export const frsVALID = 0;
export const frsEMPTY_GROUP = 1;
export const frsALL_GROUP_DEV_NOT_VALID = 2;
export const frsSOME_GROUP_DEV_NOT_VALID = 3;
export const frsBAD_DEVICE = 4;
export const faetNONE = 0;
export const faetIN_QUEUE = 1;
export const faetOUT_QUEUE = 2;
export const faetIN_ARCHIVE = 4;
export const faetOUT_ARCHIVE = 8;
export const faetFXSSVC_ENDED = 16;
export const far2SUBMIT_LOW = 1;
export const far2SUBMIT_NORMAL = 2;
export const far2SUBMIT_HIGH = 4;
export const far2QUERY_OUT_JOBS = 8;
export const far2MANAGE_OUT_JOBS = 16;
export const far2QUERY_CONFIG = 32;
export const far2MANAGE_CONFIG = 64;
export const far2QUERY_ARCHIVES = 128;
export const far2MANAGE_ARCHIVES = 256;
export const far2MANAGE_RECEIVE_FOLDER = 512;
export const frrcANY_CODE = 0;
export const QUERY_STATUS = `-1`;
export const STATUS_DISABLE = 0;
export const STATUS_ENABLE = 1;
export const DEV_ID_SRC_FAX = 0;
export const DEV_ID_SRC_TAPI = 1;
export const SEND_TO_FAX_RECIPIENT_ATTACHMENT = 0;
export const StiDeviceTypeDefault = 0;
export const StiDeviceTypeScanner = 1;
export const StiDeviceTypeDigitalCamera = 2;
export const StiDeviceTypeStreamingVideo = 3;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.Fax.FAX_LOG_CATEGORYA (size: 16)
 */
export interface FAX_LOG_CATEGORYA {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null;
  /** u32 */
  Category: number;
  /** u32 */
  Level: number;
}

export const sizeofFAX_LOG_CATEGORYA = 16;

export function allocFAX_LOG_CATEGORYA(data?: Partial<FAX_LOG_CATEGORYA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_LOG_CATEGORYA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Category !== undefined) view.setUint32(8, Number(data.Category), true);
  // 0x0c: u32
  if (data?.Level !== undefined) view.setUint32(12, Number(data.Level), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.Fax.FAX_LOG_CATEGORYW (size: 16)
 */
export interface FAX_LOG_CATEGORYW {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null;
  /** u32 */
  Category: number;
  /** u32 */
  Level: number;
}

export const sizeofFAX_LOG_CATEGORYW = 16;

export function allocFAX_LOG_CATEGORYW(data?: Partial<FAX_LOG_CATEGORYW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_LOG_CATEGORYW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Category !== undefined) view.setUint32(8, Number(data.Category), true);
  // 0x0c: u32
  if (data?.Level !== undefined) view.setUint32(12, Number(data.Level), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_TIME (size: 8)
 */
export interface FAX_TIME {
  /** u16 */
  Hour: number;
  /** u16 */
  Minute: number;
}

export const sizeofFAX_TIME = 8;

export function allocFAX_TIME(data?: Partial<FAX_TIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_TIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Hour !== undefined) view.setUint16(0, Number(data.Hour), true);
  // 0x02: u16
  if (data?.Minute !== undefined) view.setUint16(2, Number(data.Minute), true);
  // 0x04: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.Fax.FAX_CONFIGURATIONA (size: 72)
 */
export interface FAX_CONFIGURATIONA {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  Retries: number;
  /** u32 */
  RetryDelay: number;
  /** u32 */
  DirtyDays: number;
  /** Windows.Win32.Foundation.BOOL */
  Branding: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UseDeviceTsid: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ServerCp: boolean;
  /** Windows.Win32.Foundation.BOOL */
  PauseServerQueue: boolean;
  /** Windows.Win32.Devices.Fax.FAX_TIME */
  StartCheapTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.FAX_TIME */
  StopCheapTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  ArchiveOutgoingFaxes: boolean;
  /** Windows.Win32.Foundation.PSTR */
  ArchiveDirectory: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Reserved: string | null;
}

export const sizeofFAX_CONFIGURATIONA = 72;

export function allocFAX_CONFIGURATIONA(data?: Partial<FAX_CONFIGURATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_CONFIGURATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Retries !== undefined) view.setUint32(4, Number(data.Retries), true);
  // 0x08: u32
  if (data?.RetryDelay !== undefined) view.setUint32(8, Number(data.RetryDelay), true);
  // 0x0c: u32
  if (data?.DirtyDays !== undefined) view.setUint32(12, Number(data.DirtyDays), true);
  // 0x10: i32
  if (data?.Branding !== undefined) view.setInt32(16, Number(data.Branding), true);
  // 0x14: i32
  if (data?.UseDeviceTsid !== undefined) view.setInt32(20, Number(data.UseDeviceTsid), true);
  // 0x18: i32
  if (data?.ServerCp !== undefined) view.setInt32(24, Number(data.ServerCp), true);
  // 0x1c: i32
  if (data?.PauseServerQueue !== undefined) view.setInt32(28, Number(data.PauseServerQueue), true);
  // 0x20: pointer
  if (data?.StartCheapTime !== undefined) view.setBigUint64(32, data.StartCheapTime === null ? 0n : BigInt(util.toPointer(data.StartCheapTime)), true);
  // 0x28: pointer
  if (data?.StopCheapTime !== undefined) view.setBigUint64(40, data.StopCheapTime === null ? 0n : BigInt(util.toPointer(data.StopCheapTime)), true);
  // 0x30: i32
  if (data?.ArchiveOutgoingFaxes !== undefined) view.setInt32(48, Number(data.ArchiveOutgoingFaxes), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.ArchiveDirectory !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.ArchiveDirectory);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.Reserved !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.Reserved);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_CONFIGURATIONW (size: 72)
 */
export interface FAX_CONFIGURATIONW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  Retries: number;
  /** u32 */
  RetryDelay: number;
  /** u32 */
  DirtyDays: number;
  /** Windows.Win32.Foundation.BOOL */
  Branding: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UseDeviceTsid: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ServerCp: boolean;
  /** Windows.Win32.Foundation.BOOL */
  PauseServerQueue: boolean;
  /** Windows.Win32.Devices.Fax.FAX_TIME */
  StartCheapTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.FAX_TIME */
  StopCheapTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  ArchiveOutgoingFaxes: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  ArchiveDirectory: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Reserved: string | null;
}

export const sizeofFAX_CONFIGURATIONW = 72;

export function allocFAX_CONFIGURATIONW(data?: Partial<FAX_CONFIGURATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_CONFIGURATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Retries !== undefined) view.setUint32(4, Number(data.Retries), true);
  // 0x08: u32
  if (data?.RetryDelay !== undefined) view.setUint32(8, Number(data.RetryDelay), true);
  // 0x0c: u32
  if (data?.DirtyDays !== undefined) view.setUint32(12, Number(data.DirtyDays), true);
  // 0x10: i32
  if (data?.Branding !== undefined) view.setInt32(16, Number(data.Branding), true);
  // 0x14: i32
  if (data?.UseDeviceTsid !== undefined) view.setInt32(20, Number(data.UseDeviceTsid), true);
  // 0x18: i32
  if (data?.ServerCp !== undefined) view.setInt32(24, Number(data.ServerCp), true);
  // 0x1c: i32
  if (data?.PauseServerQueue !== undefined) view.setInt32(28, Number(data.PauseServerQueue), true);
  // 0x20: pointer
  if (data?.StartCheapTime !== undefined) view.setBigUint64(32, data.StartCheapTime === null ? 0n : BigInt(util.toPointer(data.StartCheapTime)), true);
  // 0x28: pointer
  if (data?.StopCheapTime !== undefined) view.setBigUint64(40, data.StopCheapTime === null ? 0n : BigInt(util.toPointer(data.StopCheapTime)), true);
  // 0x30: i32
  if (data?.ArchiveOutgoingFaxes !== undefined) view.setInt32(48, Number(data.ArchiveOutgoingFaxes), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.ArchiveDirectory !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.ArchiveDirectory);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.Reserved !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.Reserved);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_DEVICE_STATUSA (size: 152)
 */
export interface FAX_DEVICE_STATUSA {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  CallerId: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Csid: string | null;
  /** u32 */
  CurrentPage: number;
  /** u32 */
  DeviceId: number;
  /** Windows.Win32.Foundation.PSTR */
  DeviceName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  DocumentName: string | null;
  /** u32 */
  JobType: number;
  /** Windows.Win32.Foundation.PSTR */
  PhoneNumber: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RoutingString: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecipientName: string | null;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.FILETIME */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Status: number;
  /** Windows.Win32.Foundation.PSTR */
  StatusString: string | null;
  /** Windows.Win32.Foundation.FILETIME */
  SubmittedTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalPages: number;
  /** Windows.Win32.Foundation.PSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PSTR */
  UserName: string | null;
}

export const sizeofFAX_DEVICE_STATUSA = 152;

export function allocFAX_DEVICE_STATUSA(data?: Partial<FAX_DEVICE_STATUSA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_DEVICE_STATUSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CallerId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.CallerId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Csid !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Csid);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.CurrentPage !== undefined) view.setUint32(24, Number(data.CurrentPage), true);
  // 0x1c: u32
  if (data?.DeviceId !== undefined) view.setUint32(28, Number(data.DeviceId), true);
  // 0x20: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.DeviceName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.DocumentName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.DocumentName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.JobType !== undefined) view.setUint32(48, Number(data.JobType), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.PhoneNumber !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.PhoneNumber);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.RoutingString !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.RoutingString);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.SenderName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.RecipientName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.Size !== undefined) view.setUint32(88, Number(data.Size), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(96, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x68: u32
  if (data?.Status !== undefined) view.setUint32(104, Number(data.Status), true);
  // 0x6c: pad4
  // 0x70: buffer
  if (data?.StatusString !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.StatusString);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: pointer
  if (data?.SubmittedTime !== undefined) view.setBigUint64(120, data.SubmittedTime === null ? 0n : BigInt(util.toPointer(data.SubmittedTime)), true);
  // 0x80: u32
  if (data?.TotalPages !== undefined) view.setUint32(128, Number(data.TotalPages), true);
  // 0x84: pad4
  // 0x88: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f136 = util.pstrToFfi(data.Tsid);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f144 = util.pstrToFfi(data.UserName);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_DEVICE_STATUSW (size: 152)
 */
export interface FAX_DEVICE_STATUSW {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  CallerId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Csid: string | null;
  /** u32 */
  CurrentPage: number;
  /** u32 */
  DeviceId: number;
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DocumentName: string | null;
  /** u32 */
  JobType: number;
  /** Windows.Win32.Foundation.PWSTR */
  PhoneNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RoutingString: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientName: string | null;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.FILETIME */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Status: number;
  /** Windows.Win32.Foundation.PWSTR */
  StatusString: string | null;
  /** Windows.Win32.Foundation.FILETIME */
  SubmittedTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TotalPages: number;
  /** Windows.Win32.Foundation.PWSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null;
}

export const sizeofFAX_DEVICE_STATUSW = 152;

export function allocFAX_DEVICE_STATUSW(data?: Partial<FAX_DEVICE_STATUSW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_DEVICE_STATUSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CallerId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.CallerId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Csid !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Csid);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.CurrentPage !== undefined) view.setUint32(24, Number(data.CurrentPage), true);
  // 0x1c: u32
  if (data?.DeviceId !== undefined) view.setUint32(28, Number(data.DeviceId), true);
  // 0x20: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.DocumentName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.DocumentName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.JobType !== undefined) view.setUint32(48, Number(data.JobType), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.PhoneNumber !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.PhoneNumber);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.RoutingString !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.RoutingString);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.SenderName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.RecipientName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.Size !== undefined) view.setUint32(88, Number(data.Size), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(96, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x68: u32
  if (data?.Status !== undefined) view.setUint32(104, Number(data.Status), true);
  // 0x6c: pad4
  // 0x70: buffer
  if (data?.StatusString !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.StatusString);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: pointer
  if (data?.SubmittedTime !== undefined) view.setBigUint64(120, data.SubmittedTime === null ? 0n : BigInt(util.toPointer(data.SubmittedTime)), true);
  // 0x80: u32
  if (data?.TotalPages !== undefined) view.setUint32(128, Number(data.TotalPages), true);
  // 0x84: pad4
  // 0x88: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.Tsid);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f144 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_JOB_ENTRYA (size: 136)
 */
export interface FAX_JOB_ENTRYA {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PSTR */
  UserName: string | null;
  /** u32 */
  JobType: number;
  /** u32 */
  QueueStatus: number;
  /** u32 */
  Status: number;
  /** u32 */
  Size: number;
  /** u32 */
  PageCount: number;
  /** Windows.Win32.Foundation.PSTR */
  RecipientNumber: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecipientName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderCompany: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderDept: string | null;
  /** Windows.Win32.Foundation.PSTR */
  BillingCode: string | null;
  /** u32 */
  ScheduleAction: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  ScheduleTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeliveryReportType: number;
  /** Windows.Win32.Foundation.PSTR */
  DeliveryReportAddress: string | null;
  /** Windows.Win32.Foundation.PSTR */
  DocumentName: string | null;
}

export const sizeofFAX_JOB_ENTRYA = 136;

export function allocFAX_JOB_ENTRYA(data?: Partial<FAX_JOB_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_JOB_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.JobId !== undefined) view.setUint32(4, Number(data.JobId), true);
  // 0x08: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.UserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.JobType !== undefined) view.setUint32(16, Number(data.JobType), true);
  // 0x14: u32
  if (data?.QueueStatus !== undefined) view.setUint32(20, Number(data.QueueStatus), true);
  // 0x18: u32
  if (data?.Status !== undefined) view.setUint32(24, Number(data.Status), true);
  // 0x1c: u32
  if (data?.Size !== undefined) view.setUint32(28, Number(data.Size), true);
  // 0x20: u32
  if (data?.PageCount !== undefined) view.setUint32(32, Number(data.PageCount), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.RecipientNumber !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.RecipientNumber);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.RecipientName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.Tsid);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.SenderName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.SenderCompany !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.SenderCompany);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.SenderDept !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.SenderDept);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.BillingCode !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.BillingCode);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.ScheduleAction !== undefined) view.setUint32(96, Number(data.ScheduleAction), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.ScheduleTime !== undefined) view.setBigUint64(104, data.ScheduleTime === null ? 0n : BigInt(util.toPointer(data.ScheduleTime)), true);
  // 0x70: u32
  if (data?.DeliveryReportType !== undefined) view.setUint32(112, Number(data.DeliveryReportType), true);
  // 0x74: pad4
  // 0x78: buffer
  if (data?.DeliveryReportAddress !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.DeliveryReportAddress);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: buffer
  if (data?.DocumentName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.DocumentName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_JOB_ENTRYW (size: 136)
 */
export interface FAX_JOB_ENTRYW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null;
  /** u32 */
  JobType: number;
  /** u32 */
  QueueStatus: number;
  /** u32 */
  Status: number;
  /** u32 */
  Size: number;
  /** u32 */
  PageCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderCompany: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderDept: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  BillingCode: string | null;
  /** u32 */
  ScheduleAction: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  ScheduleTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeliveryReportType: number;
  /** Windows.Win32.Foundation.PWSTR */
  DeliveryReportAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DocumentName: string | null;
}

export const sizeofFAX_JOB_ENTRYW = 136;

export function allocFAX_JOB_ENTRYW(data?: Partial<FAX_JOB_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_JOB_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.JobId !== undefined) view.setUint32(4, Number(data.JobId), true);
  // 0x08: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.JobType !== undefined) view.setUint32(16, Number(data.JobType), true);
  // 0x14: u32
  if (data?.QueueStatus !== undefined) view.setUint32(20, Number(data.QueueStatus), true);
  // 0x18: u32
  if (data?.Status !== undefined) view.setUint32(24, Number(data.Status), true);
  // 0x1c: u32
  if (data?.Size !== undefined) view.setUint32(28, Number(data.Size), true);
  // 0x20: u32
  if (data?.PageCount !== undefined) view.setUint32(32, Number(data.PageCount), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.RecipientNumber !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.RecipientNumber);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.RecipientName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.Tsid);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.SenderName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.SenderCompany !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.SenderCompany);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.SenderDept !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.SenderDept);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.BillingCode !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.BillingCode);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.ScheduleAction !== undefined) view.setUint32(96, Number(data.ScheduleAction), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.ScheduleTime !== undefined) view.setBigUint64(104, data.ScheduleTime === null ? 0n : BigInt(util.toPointer(data.ScheduleTime)), true);
  // 0x70: u32
  if (data?.DeliveryReportType !== undefined) view.setUint32(112, Number(data.DeliveryReportType), true);
  // 0x74: pad4
  // 0x78: buffer
  if (data?.DeliveryReportAddress !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.DeliveryReportAddress);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: buffer
  if (data?.DocumentName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.DocumentName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_PORT_INFOA (size: 48)
 */
export interface FAX_PORT_INFOA {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  State: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Rings: number;
  /** u32 */
  Priority: number;
  /** Windows.Win32.Foundation.PSTR */
  DeviceName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Csid: string | null;
}

export const sizeofFAX_PORT_INFOA = 48;

export function allocFAX_PORT_INFOA(data?: Partial<FAX_PORT_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_PORT_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.DeviceId !== undefined) view.setUint32(4, Number(data.DeviceId), true);
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Rings !== undefined) view.setUint32(16, Number(data.Rings), true);
  // 0x14: u32
  if (data?.Priority !== undefined) view.setUint32(20, Number(data.Priority), true);
  // 0x18: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.DeviceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Tsid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.Csid !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.Csid);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_PORT_INFOW (size: 48)
 */
export interface FAX_PORT_INFOW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  State: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Rings: number;
  /** u32 */
  Priority: number;
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Csid: string | null;
}

export const sizeofFAX_PORT_INFOW = 48;

export function allocFAX_PORT_INFOW(data?: Partial<FAX_PORT_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_PORT_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.DeviceId !== undefined) view.setUint32(4, Number(data.DeviceId), true);
  // 0x08: u32
  if (data?.State !== undefined) view.setUint32(8, Number(data.State), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.Rings !== undefined) view.setUint32(16, Number(data.Rings), true);
  // 0x14: u32
  if (data?.Priority !== undefined) view.setUint32(20, Number(data.Priority), true);
  // 0x18: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Tsid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.Csid !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.Csid);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_ROUTING_METHODA (size: 64)
 */
export interface FAX_ROUTING_METHODA {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  DeviceId: number;
  /** Windows.Win32.Foundation.BOOL */
  Enabled: boolean;
  /** Windows.Win32.Foundation.PSTR */
  DeviceName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Guid: string | null;
  /** Windows.Win32.Foundation.PSTR */
  FriendlyName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  FunctionName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  ExtensionImageName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  ExtensionFriendlyName: string | null;
}

export const sizeofFAX_ROUTING_METHODA = 64;

export function allocFAX_ROUTING_METHODA(data?: Partial<FAX_ROUTING_METHODA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_ROUTING_METHODA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.DeviceId !== undefined) view.setUint32(4, Number(data.DeviceId), true);
  // 0x08: i32
  if (data?.Enabled !== undefined) view.setInt32(8, Number(data.Enabled), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.DeviceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Guid !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.Guid);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.FriendlyName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.FriendlyName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.FunctionName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.FunctionName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.ExtensionImageName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.ExtensionImageName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.ExtensionFriendlyName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.ExtensionFriendlyName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_ROUTING_METHODW (size: 64)
 */
export interface FAX_ROUTING_METHODW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  DeviceId: number;
  /** Windows.Win32.Foundation.BOOL */
  Enabled: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Guid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  FriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  FunctionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ExtensionImageName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ExtensionFriendlyName: string | null;
}

export const sizeofFAX_ROUTING_METHODW = 64;

export function allocFAX_ROUTING_METHODW(data?: Partial<FAX_ROUTING_METHODW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_ROUTING_METHODW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.DeviceId !== undefined) view.setUint32(4, Number(data.DeviceId), true);
  // 0x08: i32
  if (data?.Enabled !== undefined) view.setInt32(8, Number(data.Enabled), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Guid !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Guid);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.FriendlyName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.FriendlyName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.FunctionName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.FunctionName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.ExtensionImageName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.ExtensionImageName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.ExtensionFriendlyName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.ExtensionFriendlyName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_GLOBAL_ROUTING_INFOA (size: 48)
 */
export interface FAX_GLOBAL_ROUTING_INFOA {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  Priority: number;
  /** Windows.Win32.Foundation.PSTR */
  Guid: string | null;
  /** Windows.Win32.Foundation.PSTR */
  FriendlyName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  FunctionName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  ExtensionImageName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  ExtensionFriendlyName: string | null;
}

export const sizeofFAX_GLOBAL_ROUTING_INFOA = 48;

export function allocFAX_GLOBAL_ROUTING_INFOA(data?: Partial<FAX_GLOBAL_ROUTING_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_GLOBAL_ROUTING_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Priority !== undefined) view.setUint32(4, Number(data.Priority), true);
  // 0x08: buffer
  if (data?.Guid !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Guid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.FriendlyName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.FriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.FunctionName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.FunctionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.ExtensionImageName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.ExtensionImageName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.ExtensionFriendlyName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.ExtensionFriendlyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_GLOBAL_ROUTING_INFOW (size: 48)
 */
export interface FAX_GLOBAL_ROUTING_INFOW {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  Priority: number;
  /** Windows.Win32.Foundation.PWSTR */
  Guid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  FriendlyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  FunctionName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ExtensionImageName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ExtensionFriendlyName: string | null;
}

export const sizeofFAX_GLOBAL_ROUTING_INFOW = 48;

export function allocFAX_GLOBAL_ROUTING_INFOW(data?: Partial<FAX_GLOBAL_ROUTING_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_GLOBAL_ROUTING_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.Priority !== undefined) view.setUint32(4, Number(data.Priority), true);
  // 0x08: buffer
  if (data?.Guid !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Guid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.FriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.FriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.FunctionName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.FunctionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.ExtensionImageName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ExtensionImageName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.ExtensionFriendlyName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ExtensionFriendlyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_COVERPAGE_INFOA (size: 232)
 */
export interface FAX_COVERPAGE_INFOA {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  CoverPageName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  UseServerCoverPage: boolean;
  /** Windows.Win32.Foundation.PSTR */
  RecName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecFaxNumber: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecCompany: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecStreetAddress: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecCity: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecState: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecZip: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecCountry: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecTitle: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecDepartment: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecOfficeLocation: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecHomePhone: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecOfficePhone: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrFaxNumber: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrCompany: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrAddress: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrTitle: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrDepartment: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrOfficeLocation: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrHomePhone: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SdrOfficePhone: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Note: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Subject: string | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeSent: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PageCount: number;
}

export const sizeofFAX_COVERPAGE_INFOA = 232;

export function allocFAX_COVERPAGE_INFOA(data?: Partial<FAX_COVERPAGE_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_COVERPAGE_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CoverPageName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.CoverPageName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.UseServerCoverPage !== undefined) view.setInt32(16, Number(data.UseServerCoverPage), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.RecName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.RecName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.RecFaxNumber !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.RecFaxNumber);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.RecCompany !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.RecCompany);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.RecStreetAddress !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.RecStreetAddress);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.RecCity !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.RecCity);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.RecState !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.RecState);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.RecZip !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.RecZip);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.RecCountry !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.RecCountry);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.RecTitle !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.RecTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.RecDepartment !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.RecDepartment);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.RecOfficeLocation !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.RecOfficeLocation);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: buffer
  if (data?.RecHomePhone !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.RecHomePhone);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: buffer
  if (data?.RecOfficePhone !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.RecOfficePhone);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: buffer
  if (data?.SdrName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.SdrName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: buffer
  if (data?.SdrFaxNumber !== undefined) {
    (buf as any)._f136 = util.pstrToFfi(data.SdrFaxNumber);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: buffer
  if (data?.SdrCompany !== undefined) {
    (buf as any)._f144 = util.pstrToFfi(data.SdrCompany);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  // 0x98: buffer
  if (data?.SdrAddress !== undefined) {
    (buf as any)._f152 = util.pstrToFfi(data.SdrAddress);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  // 0xa0: buffer
  if (data?.SdrTitle !== undefined) {
    (buf as any)._f160 = util.pstrToFfi(data.SdrTitle);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f160)), true);
  }
  // 0xa8: buffer
  if (data?.SdrDepartment !== undefined) {
    (buf as any)._f168 = util.pstrToFfi(data.SdrDepartment);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f168)), true);
  }
  // 0xb0: buffer
  if (data?.SdrOfficeLocation !== undefined) {
    (buf as any)._f176 = util.pstrToFfi(data.SdrOfficeLocation);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f176)), true);
  }
  // 0xb8: buffer
  if (data?.SdrHomePhone !== undefined) {
    (buf as any)._f184 = util.pstrToFfi(data.SdrHomePhone);
    view.setBigUint64(184, (buf as any)._f184 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f184)), true);
  }
  // 0xc0: buffer
  if (data?.SdrOfficePhone !== undefined) {
    (buf as any)._f192 = util.pstrToFfi(data.SdrOfficePhone);
    view.setBigUint64(192, (buf as any)._f192 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f192)), true);
  }
  // 0xc8: buffer
  if (data?.Note !== undefined) {
    (buf as any)._f200 = util.pstrToFfi(data.Note);
    view.setBigUint64(200, (buf as any)._f200 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f200)), true);
  }
  // 0xd0: buffer
  if (data?.Subject !== undefined) {
    (buf as any)._f208 = util.pstrToFfi(data.Subject);
    view.setBigUint64(208, (buf as any)._f208 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f208)), true);
  }
  // 0xd8: pointer
  if (data?.TimeSent !== undefined) view.setBigUint64(216, data.TimeSent === null ? 0n : BigInt(util.toPointer(data.TimeSent)), true);
  // 0xe0: u32
  if (data?.PageCount !== undefined) view.setUint32(224, Number(data.PageCount), true);
  // 0xe4: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_COVERPAGE_INFOW (size: 232)
 */
export interface FAX_COVERPAGE_INFOW {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  CoverPageName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  UseServerCoverPage: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  RecName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecFaxNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecCompany: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecStreetAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecCity: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecState: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecZip: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecCountry: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecTitle: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecDepartment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecOfficeLocation: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecHomePhone: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecOfficePhone: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrFaxNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrCompany: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrTitle: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrDepartment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrOfficeLocation: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrHomePhone: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SdrOfficePhone: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Note: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Subject: string | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeSent: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PageCount: number;
}

export const sizeofFAX_COVERPAGE_INFOW = 232;

export function allocFAX_COVERPAGE_INFOW(data?: Partial<FAX_COVERPAGE_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_COVERPAGE_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CoverPageName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.CoverPageName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.UseServerCoverPage !== undefined) view.setInt32(16, Number(data.UseServerCoverPage), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.RecName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.RecName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.RecFaxNumber !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.RecFaxNumber);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.RecCompany !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.RecCompany);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.RecStreetAddress !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.RecStreetAddress);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.RecCity !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.RecCity);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.RecState !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.RecState);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.RecZip !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.RecZip);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.RecCountry !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.RecCountry);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.RecTitle !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.RecTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.RecDepartment !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.RecDepartment);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.RecOfficeLocation !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.RecOfficeLocation);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: buffer
  if (data?.RecHomePhone !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.RecHomePhone);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: buffer
  if (data?.RecOfficePhone !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.RecOfficePhone);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: buffer
  if (data?.SdrName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.SdrName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: buffer
  if (data?.SdrFaxNumber !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.SdrFaxNumber);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: buffer
  if (data?.SdrCompany !== undefined) {
    (buf as any)._f144 = util.pwstrToFfi(data.SdrCompany);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  // 0x98: buffer
  if (data?.SdrAddress !== undefined) {
    (buf as any)._f152 = util.pwstrToFfi(data.SdrAddress);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  // 0xa0: buffer
  if (data?.SdrTitle !== undefined) {
    (buf as any)._f160 = util.pwstrToFfi(data.SdrTitle);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f160)), true);
  }
  // 0xa8: buffer
  if (data?.SdrDepartment !== undefined) {
    (buf as any)._f168 = util.pwstrToFfi(data.SdrDepartment);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f168)), true);
  }
  // 0xb0: buffer
  if (data?.SdrOfficeLocation !== undefined) {
    (buf as any)._f176 = util.pwstrToFfi(data.SdrOfficeLocation);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f176)), true);
  }
  // 0xb8: buffer
  if (data?.SdrHomePhone !== undefined) {
    (buf as any)._f184 = util.pwstrToFfi(data.SdrHomePhone);
    view.setBigUint64(184, (buf as any)._f184 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f184)), true);
  }
  // 0xc0: buffer
  if (data?.SdrOfficePhone !== undefined) {
    (buf as any)._f192 = util.pwstrToFfi(data.SdrOfficePhone);
    view.setBigUint64(192, (buf as any)._f192 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f192)), true);
  }
  // 0xc8: buffer
  if (data?.Note !== undefined) {
    (buf as any)._f200 = util.pwstrToFfi(data.Note);
    view.setBigUint64(200, (buf as any)._f200 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f200)), true);
  }
  // 0xd0: buffer
  if (data?.Subject !== undefined) {
    (buf as any)._f208 = util.pwstrToFfi(data.Subject);
    view.setBigUint64(208, (buf as any)._f208 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f208)), true);
  }
  // 0xd8: pointer
  if (data?.TimeSent !== undefined) view.setBigUint64(216, data.TimeSent === null ? 0n : BigInt(util.toPointer(data.TimeSent)), true);
  // 0xe0: u32
  if (data?.PageCount !== undefined) view.setUint32(224, Number(data.PageCount), true);
  // 0xe4: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_JOB_PARAMA (size: 120)
 */
export interface FAX_JOB_PARAMA {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  RecipientNumber: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecipientName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderCompany: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderDept: string | null;
  /** Windows.Win32.Foundation.PSTR */
  BillingCode: string | null;
  /** u32 */
  ScheduleAction: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  ScheduleTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeliveryReportType: number;
  /** Windows.Win32.Foundation.PSTR */
  DeliveryReportAddress: string | null;
  /** Windows.Win32.Foundation.PSTR */
  DocumentName: string | null;
  /** u32 */
  CallHandle: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofFAX_JOB_PARAMA = 120;

export function allocFAX_JOB_PARAMA(data?: Partial<FAX_JOB_PARAMA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_JOB_PARAMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.RecipientNumber !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.RecipientNumber);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.RecipientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.Tsid);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.SenderName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.SenderCompany !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.SenderCompany);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.SenderDept !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.SenderDept);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.BillingCode !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.BillingCode);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.ScheduleAction !== undefined) view.setUint32(64, Number(data.ScheduleAction), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.ScheduleTime !== undefined) view.setBigUint64(72, data.ScheduleTime === null ? 0n : BigInt(util.toPointer(data.ScheduleTime)), true);
  // 0x50: u32
  if (data?.DeliveryReportType !== undefined) view.setUint32(80, Number(data.DeliveryReportType), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.DeliveryReportAddress !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.DeliveryReportAddress);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.DocumentName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.DocumentName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: u32
  if (data?.CallHandle !== undefined) view.setUint32(104, Number(data.CallHandle), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(112, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_JOB_PARAMW (size: 120)
 */
export interface FAX_JOB_PARAMW {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderCompany: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderDept: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  BillingCode: string | null;
  /** u32 */
  ScheduleAction: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  ScheduleTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeliveryReportType: number;
  /** Windows.Win32.Foundation.PWSTR */
  DeliveryReportAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DocumentName: string | null;
  /** u32 */
  CallHandle: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofFAX_JOB_PARAMW = 120;

export function allocFAX_JOB_PARAMW(data?: Partial<FAX_JOB_PARAMW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_JOB_PARAMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.RecipientNumber !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.RecipientNumber);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.RecipientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Tsid);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SenderName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.SenderCompany !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.SenderCompany);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.SenderDept !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.SenderDept);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.BillingCode !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.BillingCode);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.ScheduleAction !== undefined) view.setUint32(64, Number(data.ScheduleAction), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.ScheduleTime !== undefined) view.setBigUint64(72, data.ScheduleTime === null ? 0n : BigInt(util.toPointer(data.ScheduleTime)), true);
  // 0x50: u32
  if (data?.DeliveryReportType !== undefined) view.setUint32(80, Number(data.DeliveryReportType), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.DeliveryReportAddress !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.DeliveryReportAddress);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.DocumentName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.DocumentName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: u32
  if (data?.CallHandle !== undefined) view.setUint32(104, Number(data.CallHandle), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(112, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_EVENTA (size: 32)
 */
export interface FAX_EVENTA {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.FILETIME */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeviceId: number;
  /** u32 */
  EventId: number;
  /** u32 */
  JobId: number;
}

export const sizeofFAX_EVENTA = 32;

export function allocFAX_EVENTA(data?: Partial<FAX_EVENTA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_EVENTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(8, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x10: u32
  if (data?.DeviceId !== undefined) view.setUint32(16, Number(data.DeviceId), true);
  // 0x14: u32
  if (data?.EventId !== undefined) view.setUint32(20, Number(data.EventId), true);
  // 0x18: u32
  if (data?.JobId !== undefined) view.setUint32(24, Number(data.JobId), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_EVENTW (size: 32)
 */
export interface FAX_EVENTW {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.FILETIME */
  TimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeviceId: number;
  /** u32 */
  EventId: number;
  /** u32 */
  JobId: number;
}

export const sizeofFAX_EVENTW = 32;

export function allocFAX_EVENTW(data?: Partial<FAX_EVENTW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_EVENTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TimeStamp !== undefined) view.setBigUint64(8, data.TimeStamp === null ? 0n : BigInt(util.toPointer(data.TimeStamp)), true);
  // 0x10: u32
  if (data?.DeviceId !== undefined) view.setUint32(16, Number(data.DeviceId), true);
  // 0x14: u32
  if (data?.EventId !== undefined) view.setUint32(20, Number(data.EventId), true);
  // 0x18: u32
  if (data?.JobId !== undefined) view.setUint32(24, Number(data.JobId), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_PRINT_INFOA (size: 88)
 */
export interface FAX_PRINT_INFOA {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  DocName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecipientName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  RecipientNumber: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderCompany: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderDept: string | null;
  /** Windows.Win32.Foundation.PSTR */
  SenderBillingCode: string | null;
  /** Windows.Win32.Foundation.PSTR */
  Reserved: string | null;
  /** Windows.Win32.Foundation.PSTR */
  DrEmailAddress: string | null;
  /** Windows.Win32.Foundation.PSTR */
  OutputFileName: string | null;
}

export const sizeofFAX_PRINT_INFOA = 88;

export function allocFAX_PRINT_INFOA(data?: Partial<FAX_PRINT_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_PRINT_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.DocName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.DocName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.RecipientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.RecipientNumber !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.RecipientNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.SenderName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.SenderCompany !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.SenderCompany);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.SenderDept !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.SenderDept);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.SenderBillingCode !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.SenderBillingCode);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.Reserved !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.Reserved);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.DrEmailAddress !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.DrEmailAddress);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.OutputFileName !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.OutputFileName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_PRINT_INFOW (size: 88)
 */
export interface FAX_PRINT_INFOW {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  DocName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RecipientNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderCompany: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderDept: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  SenderBillingCode: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Reserved: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DrEmailAddress: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  OutputFileName: string | null;
}

export const sizeofFAX_PRINT_INFOW = 88;

export function allocFAX_PRINT_INFOW(data?: Partial<FAX_PRINT_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_PRINT_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.DocName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DocName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.RecipientName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.RecipientName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.RecipientNumber !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.RecipientNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.SenderName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.SenderName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.SenderCompany !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.SenderCompany);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.SenderDept !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.SenderDept);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.SenderBillingCode !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.SenderBillingCode);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.Reserved !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.Reserved);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.DrEmailAddress !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.DrEmailAddress);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.OutputFileName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.OutputFileName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Fax.FAX_CONTEXT_INFOA (size: 24)
 */
export interface FAX_CONTEXT_INFOA {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue | null;
  /** array */
  ServerName: Deno.PointerValue | null;
}

export const sizeofFAX_CONTEXT_INFOA = 24;

export function allocFAX_CONTEXT_INFOA(data?: Partial<FAX_CONTEXT_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_CONTEXT_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hDC !== undefined) view.setBigUint64(8, data.hDC === null ? 0n : BigInt(util.toPointer(data.hDC)), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_CONTEXT_INFOW (size: 24)
 */
export interface FAX_CONTEXT_INFOW {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue | null;
  /** array */
  ServerName: Deno.PointerValue | null;
}

export const sizeofFAX_CONTEXT_INFOW = 24;

export function allocFAX_CONTEXT_INFOW(data?: Partial<FAX_CONTEXT_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_CONTEXT_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hDC !== undefined) view.setBigUint64(8, data.hDC === null ? 0n : BigInt(util.toPointer(data.hDC)), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_SEND (size: 64)
 */
export interface FAX_SEND {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  FileName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  CallerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  CallerNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ReceiverName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ReceiverNumber: string | null;
  /** Windows.Win32.Foundation.BOOL */
  Branding: boolean;
  /** u32 */
  CallHandle: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofFAX_SEND = 64;

export function allocFAX_SEND(data?: Partial<FAX_SEND>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_SEND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.FileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.CallerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.CallerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.CallerNumber !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.CallerNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.ReceiverName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ReceiverName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.ReceiverNumber !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ReceiverNumber);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.Branding !== undefined) view.setInt32(48, Number(data.Branding), true);
  // 0x34: u32
  if (data?.CallHandle !== undefined) view.setUint32(52, Number(data.CallHandle), true);
  // 0x38: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(56, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_RECEIVE (size: 40)
 */
export interface FAX_RECEIVE {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  FileName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ReceiverName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ReceiverNumber: string | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofFAX_RECEIVE = 40;

export function allocFAX_RECEIVE(data?: Partial<FAX_RECEIVE>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_RECEIVE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.FileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.FileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ReceiverName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ReceiverName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ReceiverNumber !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ReceiverNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(32, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_DEV_STATUS (size: 56)
 */
export interface FAX_DEV_STATUS {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  StatusId: number;
  /** u32 */
  StringId: number;
  /** u32 */
  PageCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  CSI: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  CallerId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RoutingInfo: string | null;
  /** u32 */
  ErrorCode: number;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofFAX_DEV_STATUS = 56;

export function allocFAX_DEV_STATUS(data?: Partial<FAX_DEV_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_DEV_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.StatusId !== undefined) view.setUint32(4, Number(data.StatusId), true);
  // 0x08: u32
  if (data?.StringId !== undefined) view.setUint32(8, Number(data.StringId), true);
  // 0x0c: u32
  if (data?.PageCount !== undefined) view.setUint32(12, Number(data.PageCount), true);
  // 0x10: buffer
  if (data?.CSI !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.CSI);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.CallerId !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.CallerId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.RoutingInfo !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.RoutingInfo);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.ErrorCode !== undefined) view.setUint32(40, Number(data.ErrorCode), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(48, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_ROUTE_CALLBACKROUTINES (size: 48)
 */
export interface FAX_ROUTE_CALLBACKROUTINES {
  /** u32 */
  SizeOfStruct: number;
  /** Windows.Win32.Devices.Fax.PFAXROUTEADDFILE */
  FaxRouteAddFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.PFAXROUTEDELETEFILE */
  FaxRouteDeleteFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.PFAXROUTEGETFILE */
  FaxRouteGetFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.PFAXROUTEENUMFILES */
  FaxRouteEnumFiles: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.PFAXROUTEMODIFYROUTINGDATA */
  FaxRouteModifyRoutingData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFAX_ROUTE_CALLBACKROUTINES = 48;

export function allocFAX_ROUTE_CALLBACKROUTINES(data?: Partial<FAX_ROUTE_CALLBACKROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_ROUTE_CALLBACKROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FaxRouteAddFile !== undefined) view.setBigUint64(8, data.FaxRouteAddFile === null ? 0n : BigInt(util.toPointer(data.FaxRouteAddFile)), true);
  // 0x10: pointer
  if (data?.FaxRouteDeleteFile !== undefined) view.setBigUint64(16, data.FaxRouteDeleteFile === null ? 0n : BigInt(util.toPointer(data.FaxRouteDeleteFile)), true);
  // 0x18: pointer
  if (data?.FaxRouteGetFile !== undefined) view.setBigUint64(24, data.FaxRouteGetFile === null ? 0n : BigInt(util.toPointer(data.FaxRouteGetFile)), true);
  // 0x20: pointer
  if (data?.FaxRouteEnumFiles !== undefined) view.setBigUint64(32, data.FaxRouteEnumFiles === null ? 0n : BigInt(util.toPointer(data.FaxRouteEnumFiles)), true);
  // 0x28: pointer
  if (data?.FaxRouteModifyRoutingData !== undefined) view.setBigUint64(40, data.FaxRouteModifyRoutingData === null ? 0n : BigInt(util.toPointer(data.FaxRouteModifyRoutingData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.FAX_ROUTE (size: 112)
 */
export interface FAX_ROUTE {
  /** u32 */
  SizeOfStruct: number;
  /** u32 */
  JobId: number;
  /** u64 */
  ElapsedTime: Deno.PointerValue;
  /** u64 */
  ReceiveTime: Deno.PointerValue;
  /** u32 */
  PageCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  Csid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Tsid: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  CallerId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  RoutingInfo: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ReceiverName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  ReceiverNumber: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  DeviceName: string | null;
  /** u32 */
  DeviceId: number;
  /** ptr */
  RoutingInfoData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RoutingInfoDataSize: number;
}

export const sizeofFAX_ROUTE = 112;

export function allocFAX_ROUTE(data?: Partial<FAX_ROUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofFAX_ROUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SizeOfStruct !== undefined) view.setUint32(0, Number(data.SizeOfStruct), true);
  // 0x04: u32
  if (data?.JobId !== undefined) view.setUint32(4, Number(data.JobId), true);
  // 0x08: u64
  if (data?.ElapsedTime !== undefined) view.setBigUint64(8, BigInt(data.ElapsedTime), true);
  // 0x10: u64
  if (data?.ReceiveTime !== undefined) view.setBigUint64(16, BigInt(data.ReceiveTime), true);
  // 0x18: u32
  if (data?.PageCount !== undefined) view.setUint32(24, Number(data.PageCount), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.Csid !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Csid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.Tsid !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.Tsid);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.CallerId !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.CallerId);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.RoutingInfo !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.RoutingInfo);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.ReceiverName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.ReceiverName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.ReceiverNumber !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.ReceiverNumber);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.DeviceName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.DeviceName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.DeviceId !== undefined) view.setUint32(88, Number(data.DeviceId), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.RoutingInfoData !== undefined) view.setBigUint64(96, data.RoutingInfoData === null ? 0n : BigInt(util.toPointer(data.RoutingInfoData)), true);
  // 0x68: u32
  if (data?.RoutingInfoDataSize !== undefined) view.setUint32(104, Number(data.RoutingInfoDataSize), true);
  // 0x6c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STI_DEV_CAPS (size: 8)
 */
export interface STI_DEV_CAPS {
  /** u32 */
  dwGeneric: number;
}

export const sizeofSTI_DEV_CAPS = 8;

export function allocSTI_DEV_CAPS(data?: Partial<STI_DEV_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTI_DEV_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGeneric !== undefined) view.setUint32(0, Number(data.dwGeneric), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STI_DEVICE_INFORMATIONW (size: 72)
 */
export interface STI_DEVICE_INFORMATIONW {
  /** u32 */
  dwSize: number;
  /** u32 */
  DeviceType: number;
  /** array */
  szDeviceInternalName: Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.STI_DEV_CAPS */
  DeviceCapabilitiesA: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwHardwareConfiguration: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszVendorDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDeviceDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPortName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPropProvider: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocalName: string | null;
}

export const sizeofSTI_DEVICE_INFORMATIONW = 72;

export function allocSTI_DEVICE_INFORMATIONW(data?: Partial<STI_DEVICE_INFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTI_DEVICE_INFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.DeviceType !== undefined) view.setUint32(4, Number(data.DeviceType), true);
  // 0x08: pointer
  if (data?.szDeviceInternalName !== undefined) view.setBigUint64(8, data.szDeviceInternalName === null ? 0n : BigInt(util.toPointer(data.szDeviceInternalName)), true);
  // 0x10: pointer
  if (data?.DeviceCapabilitiesA !== undefined) view.setBigUint64(16, data.DeviceCapabilitiesA === null ? 0n : BigInt(util.toPointer(data.DeviceCapabilitiesA)), true);
  // 0x18: u32
  if (data?.dwHardwareConfiguration !== undefined) view.setUint32(24, Number(data.dwHardwareConfiguration), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszVendorDescription !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszVendorDescription);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszDeviceDescription !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszDeviceDescription);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pszPortName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszPortName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pszPropProvider !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszPropProvider);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pszLocalName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszLocalName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STI_WIA_DEVICE_INFORMATIONW (size: 88)
 */
export interface STI_WIA_DEVICE_INFORMATIONW {
  /** u32 */
  dwSize: number;
  /** u32 */
  DeviceType: number;
  /** array */
  szDeviceInternalName: Deno.PointerValue | null;
  /** Windows.Win32.Devices.Fax.STI_DEV_CAPS */
  DeviceCapabilitiesA: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwHardwareConfiguration: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszVendorDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDeviceDescription: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPortName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPropProvider: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocalName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszUiDll: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszServer: string | null;
}

export const sizeofSTI_WIA_DEVICE_INFORMATIONW = 88;

export function allocSTI_WIA_DEVICE_INFORMATIONW(data?: Partial<STI_WIA_DEVICE_INFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTI_WIA_DEVICE_INFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.DeviceType !== undefined) view.setUint32(4, Number(data.DeviceType), true);
  // 0x08: pointer
  if (data?.szDeviceInternalName !== undefined) view.setBigUint64(8, data.szDeviceInternalName === null ? 0n : BigInt(util.toPointer(data.szDeviceInternalName)), true);
  // 0x10: pointer
  if (data?.DeviceCapabilitiesA !== undefined) view.setBigUint64(16, data.DeviceCapabilitiesA === null ? 0n : BigInt(util.toPointer(data.DeviceCapabilitiesA)), true);
  // 0x18: u32
  if (data?.dwHardwareConfiguration !== undefined) view.setUint32(24, Number(data.dwHardwareConfiguration), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszVendorDescription !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszVendorDescription);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszDeviceDescription !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszDeviceDescription);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pszPortName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszPortName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pszPropProvider !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszPropProvider);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pszLocalName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszLocalName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pszUiDll !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszUiDll);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.pszServer !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszServer);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STI_DEVICE_STATUS (size: 24)
 */
export interface STI_DEVICE_STATUS {
  /** u32 */
  dwSize: number;
  /** u32 */
  StatusMask: number;
  /** u32 */
  dwOnlineState: number;
  /** u32 */
  dwHardwareStatusCode: number;
  /** u32 */
  dwEventHandlingState: number;
  /** u32 */
  dwPollingInterval: number;
}

export const sizeofSTI_DEVICE_STATUS = 24;

export function allocSTI_DEVICE_STATUS(data?: Partial<STI_DEVICE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTI_DEVICE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.StatusMask !== undefined) view.setUint32(4, Number(data.StatusMask), true);
  // 0x08: u32
  if (data?.dwOnlineState !== undefined) view.setUint32(8, Number(data.dwOnlineState), true);
  // 0x0c: u32
  if (data?.dwHardwareStatusCode !== undefined) view.setUint32(12, Number(data.dwHardwareStatusCode), true);
  // 0x10: u32
  if (data?.dwEventHandlingState !== undefined) view.setUint32(16, Number(data.dwEventHandlingState), true);
  // 0x14: u32
  if (data?.dwPollingInterval !== undefined) view.setUint32(20, Number(data.dwPollingInterval), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax._ERROR_INFOW (size: 24)
 */
export interface _ERROR_INFOW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwGenericError: number;
  /** u32 */
  dwVendorError: number;
  /** array */
  szExtendedErrorText: Deno.PointerValue | null;
}

export const sizeof_ERROR_INFOW = 24;

export function alloc_ERROR_INFOW(data?: Partial<_ERROR_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeof_ERROR_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwGenericError !== undefined) view.setUint32(4, Number(data.dwGenericError), true);
  // 0x08: u32
  if (data?.dwVendorError !== undefined) view.setUint32(8, Number(data.dwVendorError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szExtendedErrorText !== undefined) view.setBigUint64(16, data.szExtendedErrorText === null ? 0n : BigInt(util.toPointer(data.szExtendedErrorText)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STI_DIAG (size: 24)
 */
export interface STI_DIAG {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwBasicDiagCode: number;
  /** u32 */
  dwVendorDiagCode: number;
  /** u32 */
  dwStatusMask: number;
  /** Windows.Win32.Devices.Fax._ERROR_INFOW */
  sErrorInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTI_DIAG = 24;

export function allocSTI_DIAG(data?: Partial<STI_DIAG>): Uint8Array {
  const buf = new Uint8Array(sizeofSTI_DIAG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwBasicDiagCode !== undefined) view.setUint32(4, Number(data.dwBasicDiagCode), true);
  // 0x08: u32
  if (data?.dwVendorDiagCode !== undefined) view.setUint32(8, Number(data.dwVendorDiagCode), true);
  // 0x0c: u32
  if (data?.dwStatusMask !== undefined) view.setUint32(12, Number(data.dwStatusMask), true);
  // 0x10: pointer
  if (data?.sErrorInfo !== undefined) view.setBigUint64(16, data.sErrorInfo === null ? 0n : BigInt(util.toPointer(data.sErrorInfo)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Fax.STISUBSCRIBE (size: 40)
 */
export interface STISUBSCRIBE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFilter: number;
  /** Windows.Win32.Foundation.HWND */
  hWndNotify: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hEvent: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uiNotificationMessage: number;
}

export const sizeofSTISUBSCRIBE = 40;

export function allocSTISUBSCRIBE(data?: Partial<STISUBSCRIBE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTISUBSCRIBE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFilter !== undefined) view.setUint32(8, Number(data.dwFilter), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hWndNotify !== undefined) view.setBigUint64(16, data.hWndNotify === null ? 0n : BigInt(util.toPointer(data.hWndNotify)), true);
  // 0x18: pointer
  if (data?.hEvent !== undefined) view.setBigUint64(24, data.hEvent === null ? 0n : BigInt(util.toPointer(data.hEvent)), true);
  // 0x20: u32
  if (data?.uiNotificationMessage !== undefined) view.setUint32(32, Number(data.uiNotificationMessage), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STINOTIFY (size: 24)
 */
export interface STINOTIFY {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidNotificationCode: Uint8Array | Deno.PointerValue | null;
  /** array */
  abNotificationData: Deno.PointerValue | null;
}

export const sizeofSTINOTIFY = 24;

export function allocSTINOTIFY(data?: Partial<STINOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofSTINOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidNotificationCode !== undefined) view.setBigUint64(8, data.guidNotificationCode === null ? 0n : BigInt(util.toPointer(data.guidNotificationCode)), true);
  // 0x10: pointer
  if (data?.abNotificationData !== undefined) view.setBigUint64(16, data.abNotificationData === null ? 0n : BigInt(util.toPointer(data.abNotificationData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.Fax.STI_USD_CAPS (size: 8)
 */
export interface STI_USD_CAPS {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwGenericCaps: number;
}

export const sizeofSTI_USD_CAPS = 8;

export function allocSTI_USD_CAPS(data?: Partial<STI_USD_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTI_USD_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwGenericCaps !== undefined) view.setUint32(4, Number(data.dwGenericCaps), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libWINFAX_dll = Deno.dlopen("WINFAX.dll", {
    FaxConnectFaxServerA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    FaxConnectFaxServerW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    FaxClose: {
      parameters: ["pointer"],
      result: "i32",
    },
    FaxOpenPort: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    FaxCompleteJobParamsA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxCompleteJobParamsW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxSendDocumentA: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxSendDocumentW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxSendDocumentForBroadcastA: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxSendDocumentForBroadcastW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxEnumJobsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxEnumJobsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxGetJobA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    FaxGetJobW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    FaxSetJobA: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    FaxSetJobW: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    FaxGetPageData: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxGetDeviceStatusA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxGetDeviceStatusW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxAbort: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    FaxGetConfigurationA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxGetConfigurationW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxSetConfigurationA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxSetConfigurationW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxGetLoggingCategoriesA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxGetLoggingCategoriesW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxSetLoggingCategoriesA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    FaxSetLoggingCategoriesW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    FaxEnumPortsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxEnumPortsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxGetPortA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxGetPortW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxSetPortA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxSetPortW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxEnumRoutingMethodsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxEnumRoutingMethodsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxEnableRoutingMethodA: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    FaxEnableRoutingMethodW: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    FaxEnumGlobalRoutingInfoA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxEnumGlobalRoutingInfoW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxSetGlobalRoutingInfoA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxSetGlobalRoutingInfoW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxGetRoutingInfoA: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    FaxGetRoutingInfoW: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    FaxSetRoutingInfoA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    FaxSetRoutingInfoW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    FaxInitializeEventQueue: {
      parameters: ["pointer", "pointer", "usize", "pointer", "u32"],
      result: "i32",
    },
    FaxFreeBuffer: {
      parameters: ["pointer"],
      result: "void",
    },
    FaxStartPrintJobA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxStartPrintJobW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FaxPrintCoverPageA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxPrintCoverPageW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FaxRegisterServiceProviderW: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    FaxUnregisterServiceProviderW: {
      parameters: ["buffer"],
      result: "i32",
    },
    FaxRegisterRoutingExtensionW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    FaxAccessCheck: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libfxsutility_dll = Deno.dlopen("fxsutility.dll", {
    CanSendToFaxRecipient: {
      parameters: [],
      result: "i32",
    },
    SendToFaxRecipient: {
      parameters: ["i32", "buffer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSTI_dll = Deno.dlopen("STI.dll", {
    StiCreateInstanceW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function FaxConnectFaxServerA(
  MachineName: string | null /* Windows.Win32.Foundation.PSTR */,
  FaxHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxConnectFaxServerA(util.pstrToFfi(MachineName), util.toPointer(FaxHandle)));
}

export function FaxConnectFaxServerW(
  MachineName: string | null /* Windows.Win32.Foundation.PWSTR */,
  FaxHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxConnectFaxServerW(util.pwstrToFfi(MachineName), util.toPointer(FaxHandle)));
}

export function FaxClose(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxClose(util.toPointer(FaxHandle)));
}

export function FaxOpenPort(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DeviceId: number /* u32 */,
  Flags: number /* u32 */,
  FaxPortHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxOpenPort(util.toPointer(FaxHandle), DeviceId, Flags, util.toPointer(FaxPortHandle)));
}

export function FaxCompleteJobParamsA(
  JobParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  CoverpageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxCompleteJobParamsA(util.toPointer(JobParams), util.toPointer(CoverpageInfo)));
}

export function FaxCompleteJobParamsW(
  JobParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  CoverpageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxCompleteJobParamsW(util.toPointer(JobParams), util.toPointer(CoverpageInfo)));
}

export function FaxSendDocumentA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  JobParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  CoverpageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxJobId: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSendDocumentA(util.toPointer(FaxHandle), util.pstrToFfi(FileName), util.toPointer(JobParams), util.toPointer(CoverpageInfo), util.toPointer(FaxJobId)));
}

export function FaxSendDocumentW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  JobParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  CoverpageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxJobId: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSendDocumentW(util.toPointer(FaxHandle), util.pwstrToFfi(FileName), util.toPointer(JobParams), util.toPointer(CoverpageInfo), util.toPointer(FaxJobId)));
}

export function FaxSendDocumentForBroadcastA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null /* Windows.Win32.Foundation.PSTR */,
  FaxJobId: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxRecipientCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Fax.PFAX_RECIPIENT_CALLBACKA */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSendDocumentForBroadcastA(util.toPointer(FaxHandle), util.pstrToFfi(FileName), util.toPointer(FaxJobId), util.toPointer(FaxRecipientCallback), util.toPointer(Context)));
}

export function FaxSendDocumentForBroadcastW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  FaxJobId: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxRecipientCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Fax.PFAX_RECIPIENT_CALLBACKW */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSendDocumentForBroadcastW(util.toPointer(FaxHandle), util.pwstrToFfi(FileName), util.toPointer(FaxJobId), util.toPointer(FaxRecipientCallback), util.toPointer(Context)));
}

export function FaxEnumJobsA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  JobsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumJobsA(util.toPointer(FaxHandle), util.toPointer(JobEntry), util.toPointer(JobsReturned)));
}

export function FaxEnumJobsW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
  JobsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumJobsW(util.toPointer(FaxHandle), util.toPointer(JobEntry), util.toPointer(JobsReturned)));
}

export function FaxGetJobA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  JobEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetJobA(util.toPointer(FaxHandle), JobId, util.toPointer(JobEntry)));
}

export function FaxGetJobW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  JobEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetJobW(util.toPointer(FaxHandle), JobId, util.toPointer(JobEntry)));
}

export function FaxSetJobA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Command: number /* u32 */,
  JobEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetJobA(util.toPointer(FaxHandle), JobId, Command, util.toPointer(JobEntry)));
}

export function FaxSetJobW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Command: number /* u32 */,
  JobEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetJobW(util.toPointer(FaxHandle), JobId, Command, util.toPointer(JobEntry)));
}

export function FaxGetPageData(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImageWidth: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImageHeight: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetPageData(util.toPointer(FaxHandle), JobId, util.toPointer(Buffer), util.toPointer(BufferSize), util.toPointer(ImageWidth), util.toPointer(ImageHeight)));
}

export function FaxGetDeviceStatusA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DeviceStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetDeviceStatusA(util.toPointer(FaxPortHandle), util.toPointer(DeviceStatus)));
}

export function FaxGetDeviceStatusW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DeviceStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetDeviceStatusW(util.toPointer(FaxPortHandle), util.toPointer(DeviceStatus)));
}

export function FaxAbort(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxAbort(util.toPointer(FaxHandle), JobId));
}

export function FaxGetConfigurationA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FaxConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetConfigurationA(util.toPointer(FaxHandle), util.toPointer(FaxConfig)));
}

export function FaxGetConfigurationW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FaxConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetConfigurationW(util.toPointer(FaxHandle), util.toPointer(FaxConfig)));
}

export function FaxSetConfigurationA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FaxConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetConfigurationA(util.toPointer(FaxHandle), util.toPointer(FaxConfig)));
}

export function FaxSetConfigurationW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FaxConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetConfigurationW(util.toPointer(FaxHandle), util.toPointer(FaxConfig)));
}

export function FaxGetLoggingCategoriesA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Categories: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumberCategories: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetLoggingCategoriesA(util.toPointer(FaxHandle), util.toPointer(Categories), util.toPointer(NumberCategories)));
}

export function FaxGetLoggingCategoriesW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Categories: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumberCategories: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetLoggingCategoriesW(util.toPointer(FaxHandle), util.toPointer(Categories), util.toPointer(NumberCategories)));
}

export function FaxSetLoggingCategoriesA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Categories: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumberCategories: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetLoggingCategoriesA(util.toPointer(FaxHandle), util.toPointer(Categories), NumberCategories));
}

export function FaxSetLoggingCategoriesW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Categories: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumberCategories: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetLoggingCategoriesW(util.toPointer(FaxHandle), util.toPointer(Categories), NumberCategories));
}

export function FaxEnumPortsA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  PortsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumPortsA(util.toPointer(FaxHandle), util.toPointer(PortInfo), util.toPointer(PortsReturned)));
}

export function FaxEnumPortsW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  PortsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumPortsW(util.toPointer(FaxHandle), util.toPointer(PortInfo), util.toPointer(PortsReturned)));
}

export function FaxGetPortA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetPortA(util.toPointer(FaxPortHandle), util.toPointer(PortInfo)));
}

export function FaxGetPortW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetPortW(util.toPointer(FaxPortHandle), util.toPointer(PortInfo)));
}

export function FaxSetPortA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetPortA(util.toPointer(FaxPortHandle), util.toPointer(PortInfo)));
}

export function FaxSetPortW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PortInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetPortW(util.toPointer(FaxPortHandle), util.toPointer(PortInfo)));
}

export function FaxEnumRoutingMethodsA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingMethod: Deno.PointerValue | Uint8Array | null /* ptr */,
  MethodsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumRoutingMethodsA(util.toPointer(FaxPortHandle), util.toPointer(RoutingMethod), util.toPointer(MethodsReturned)));
}

export function FaxEnumRoutingMethodsW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingMethod: Deno.PointerValue | Uint8Array | null /* ptr */,
  MethodsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumRoutingMethodsW(util.toPointer(FaxPortHandle), util.toPointer(RoutingMethod), util.toPointer(MethodsReturned)));
}

export function FaxEnableRoutingMethodA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  Enabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnableRoutingMethodA(util.toPointer(FaxPortHandle), util.pstrToFfi(RoutingGuid), util.boolToFfi(Enabled)));
}

export function FaxEnableRoutingMethodW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  Enabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnableRoutingMethodW(util.toPointer(FaxPortHandle), util.pwstrToFfi(RoutingGuid), util.boolToFfi(Enabled)));
}

export function FaxEnumGlobalRoutingInfoA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  MethodsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumGlobalRoutingInfoA(util.toPointer(FaxHandle), util.toPointer(RoutingInfo), util.toPointer(MethodsReturned)));
}

export function FaxEnumGlobalRoutingInfoW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  MethodsReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxEnumGlobalRoutingInfoW(util.toPointer(FaxHandle), util.toPointer(RoutingInfo), util.toPointer(MethodsReturned)));
}

export function FaxSetGlobalRoutingInfoA(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetGlobalRoutingInfoA(util.toPointer(FaxHandle), util.toPointer(RoutingInfo)));
}

export function FaxSetGlobalRoutingInfoW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetGlobalRoutingInfoW(util.toPointer(FaxHandle), util.toPointer(RoutingInfo)));
}

export function FaxGetRoutingInfoA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  RoutingInfoBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RoutingInfoBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetRoutingInfoA(util.toPointer(FaxPortHandle), util.pstrToFfi(RoutingGuid), util.toPointer(RoutingInfoBuffer), util.toPointer(RoutingInfoBufferSize)));
}

export function FaxGetRoutingInfoW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  RoutingInfoBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RoutingInfoBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxGetRoutingInfoW(util.toPointer(FaxPortHandle), util.pwstrToFfi(RoutingGuid), util.toPointer(RoutingInfoBuffer), util.toPointer(RoutingInfoBufferSize)));
}

export function FaxSetRoutingInfoA(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingGuid: string | null /* Windows.Win32.Foundation.PSTR */,
  RoutingInfoBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RoutingInfoBufferSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetRoutingInfoA(util.toPointer(FaxPortHandle), util.pstrToFfi(RoutingGuid), util.toPointer(RoutingInfoBuffer), RoutingInfoBufferSize));
}

export function FaxSetRoutingInfoW(
  FaxPortHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RoutingGuid: string | null /* Windows.Win32.Foundation.PWSTR */,
  RoutingInfoBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RoutingInfoBufferSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxSetRoutingInfoW(util.toPointer(FaxPortHandle), util.pwstrToFfi(RoutingGuid), util.toPointer(RoutingInfoBuffer), RoutingInfoBufferSize));
}

export function FaxInitializeEventQueue(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CompletionKey: Deno.PointerValue /* usize */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  MessageStart: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxInitializeEventQueue(util.toPointer(FaxHandle), util.toPointer(CompletionPort), CompletionKey, util.hwndToFfi(hWnd), MessageStart));
}

export function FaxFreeBuffer(
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWINFAX_dll.FaxFreeBuffer(util.toPointer(Buffer));
}

export function FaxStartPrintJobA(
  PrinterName: string | null /* Windows.Win32.Foundation.PSTR */,
  PrintInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxJobId: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxContextInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxStartPrintJobA(util.pstrToFfi(PrinterName), util.toPointer(PrintInfo), util.toPointer(FaxJobId), util.toPointer(FaxContextInfo)));
}

export function FaxStartPrintJobW(
  PrinterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  PrintInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxJobId: Deno.PointerValue | Uint8Array | null /* ptr */,
  FaxContextInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxStartPrintJobW(util.pwstrToFfi(PrinterName), util.toPointer(PrintInfo), util.toPointer(FaxJobId), util.toPointer(FaxContextInfo)));
}

export function FaxPrintCoverPageA(
  FaxContextInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  CoverPageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxPrintCoverPageA(util.toPointer(FaxContextInfo), util.toPointer(CoverPageInfo)));
}

export function FaxPrintCoverPageW(
  FaxContextInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  CoverPageInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxPrintCoverPageW(util.toPointer(FaxContextInfo), util.toPointer(CoverPageInfo)));
}

export function FaxRegisterServiceProviderW(
  DeviceProvider: string | null /* Windows.Win32.Foundation.PWSTR */,
  FriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ImageName: string | null /* Windows.Win32.Foundation.PWSTR */,
  TspName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxRegisterServiceProviderW(util.pwstrToFfi(DeviceProvider), util.pwstrToFfi(FriendlyName), util.pwstrToFfi(ImageName), util.pwstrToFfi(TspName)));
}

export function FaxUnregisterServiceProviderW(
  DeviceProvider: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxUnregisterServiceProviderW(util.pwstrToFfi(DeviceProvider)));
}

export function FaxRegisterRoutingExtensionW(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ExtensionName: string | null /* Windows.Win32.Foundation.PWSTR */,
  FriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ImageName: string | null /* Windows.Win32.Foundation.PWSTR */,
  CallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Fax.PFAX_ROUTING_INSTALLATION_CALLBACKW */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxRegisterRoutingExtensionW(util.toPointer(FaxHandle), util.pwstrToFfi(ExtensionName), util.pwstrToFfi(FriendlyName), util.pwstrToFfi(ImageName), util.toPointer(CallBack), util.toPointer(Context)));
}

export function FaxAccessCheck(
  FaxHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AccessMask: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINFAX_dll.FaxAccessCheck(util.toPointer(FaxHandle), AccessMask));
}

export function CanSendToFaxRecipient(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libfxsutility_dll.CanSendToFaxRecipient());
}

export function SendToFaxRecipient(
  sndMode: SendToMode /* Windows.Win32.Devices.Fax.SendToMode */,
  lpFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libfxsutility_dll.SendToFaxRecipient(sndMode, util.pwstrToFfi(lpFileName));
}

export function StiCreateInstanceW(
  hinst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  dwVer: number /* u32 */,
  ppSti: Deno.PointerValue | Uint8Array | null /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSTI_dll.StiCreateInstanceW(util.toPointer(hinst), dwVer, util.toPointer(ppSti), util.toPointer(punkOuter)));
}

