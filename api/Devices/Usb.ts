/// Auto-generated by Deno Win32: Windows.Win32.Devices.Usb.Apis

import * as util from "../../util.ts";

// Enums
export type USB_DEVICE_SPEED = number;
export type USB_DEVICE_TYPE = number;
export type USB_CONTROLLER_FLAVOR = number;
export type USBD_PIPE_TYPE = number;
export type USBD_ENDPOINT_OFFLOAD_MODE = number;
export type USB_USER_ERROR_CODE = number;
export type WDMUSB_POWER_STATE = number;
export type USBFN_EVENT = number;
export type USBFN_PORT_TYPE = number;
export type USBFN_BUS_SPEED = number;
export type USBFN_DIRECTION = number;
export type USBFN_DEVICE_STATE = number;
export type RIP_INFO_TYPE = number;
export type PIPE_TYPE = number;
export type RAW_PIPE_TYPE = number;

// Constants
export const SHORT_PACKET_TERMINATE = 1;
export const AUTO_CLEAR_STALL = 2;
export const PIPE_TRANSFER_TIMEOUT = 3;
export const IGNORE_SHORT_PACKETS = 4;
export const ALLOW_PARTIAL_READS = 5;
export const AUTO_FLUSH = 6;
export const RAW_IO = 7;
export const MAXIMUM_TRANSFER_SIZE = 8;
export const RESET_PIPE_ON_RESUME = 9;
export const AUTO_SUSPEND = 129;
export const SUSPEND_DELAY = 131;
export const DEVICE_SPEED = 1;
export const LowSpeed = 1;
export const FullSpeed = 2;
export const HighSpeed = 3;
export const IOCTL_GENERICUSBFN_TRANSFER_IN = 2277389;
export const IOCTL_GENERICUSBFN_TRANSFER_IN_APPEND_ZERO_PKT = 2277393;
export const IOCTL_GENERICUSBFN_TRANSFER_OUT = 2277398;
export const IOCTL_GENERICUSBFN_CONTROL_STATUS_HANDSHAKE_IN = 2277400;
export const IOCTL_GENERICUSBFN_CONTROL_STATUS_HANDSHAKE_OUT = 2277404;
export const IOCTL_GENERICUSBFN_GET_CLASS_INFO = 2277410;
export const IOCTL_GENERICUSBFN_GET_PIPE_STATE = 2277414;
export const IOCTL_GENERICUSBFN_SET_PIPE_STATE = 2277417;
export const IOCTL_GENERICUSBFN_ACTIVATE_USB_BUS = 2277420;
export const IOCTL_GENERICUSBFN_DEACTIVATE_USB_BUS = 2277424;
export const IOCTL_GENERICUSBFN_BUS_EVENT_NOTIFICATION = 2277430;
export const IOCTL_GENERICUSBFN_GET_CLASS_INFO_EX = 2277434;
export const IOCTL_GENERICUSBFN_GET_INTERFACE_DESCRIPTOR_SET = 2277438;
export const IOCTL_GENERICUSBFN_REGISTER_USB_STRING = 2277441;
export const USBUSER_VERSION = 4;
export const USBUSER_GET_CONTROLLER_INFO_0 = 1;
export const USBUSER_GET_CONTROLLER_DRIVER_KEY = 2;
export const USBUSER_PASS_THRU = 3;
export const USBUSER_GET_POWER_STATE_MAP = 4;
export const USBUSER_GET_BANDWIDTH_INFORMATION = 5;
export const USBUSER_GET_BUS_STATISTICS_0 = 6;
export const USBUSER_GET_ROOTHUB_SYMBOLIC_NAME = 7;
export const USBUSER_GET_USB_DRIVER_VERSION = 8;
export const USBUSER_GET_USB2_HW_VERSION = 9;
export const USBUSER_USB_REFRESH_HCT_REG = 10;
export const USBUSER_OP_SEND_ONE_PACKET = 268435457;
export const USBUSER_OP_RAW_RESET_PORT = 536870913;
export const USBUSER_OP_OPEN_RAW_DEVICE = 536870914;
export const USBUSER_OP_CLOSE_RAW_DEVICE = 536870915;
export const USBUSER_OP_SEND_RAW_COMMAND = 536870916;
export const USBUSER_SET_ROOTPORT_FEATURE = 536870917;
export const USBUSER_CLEAR_ROOTPORT_FEATURE = 536870918;
export const USBUSER_GET_ROOTPORT_STATUS = 536870919;
export const USBUSER_INVALID_REQUEST = 4294967280;
export const USBUSER_OP_MASK_DEVONLY_API = 268435456;
export const USBUSER_OP_MASK_HCTEST_API = 536870912;
export const USB_PACKETFLAG_LOW_SPEED = 1;
export const USB_PACKETFLAG_FULL_SPEED = 2;
export const USB_PACKETFLAG_HIGH_SPEED = 4;
export const USB_PACKETFLAG_ASYNC_IN = 8;
export const USB_PACKETFLAG_ASYNC_OUT = 16;
export const USB_PACKETFLAG_ISO_IN = 32;
export const USB_PACKETFLAG_ISO_OUT = 64;
export const USB_PACKETFLAG_SETUP = 128;
export const USB_PACKETFLAG_TOGGLE0 = 256;
export const USB_PACKETFLAG_TOGGLE1 = 512;
export const USB_HC_FEATURE_FLAG_PORT_POWER_SWITCHING = 1;
export const USB_HC_FEATURE_FLAG_SEL_SUSPEND = 2;
export const USB_HC_FEATURE_LEGACY_BIOS = 4;
export const USB_HC_FEATURE_TIME_SYNC_API = 8;
export const USB_SUBMIT_URB = 0;
export const USB_RESET_PORT = 1;
export const USB_GET_ROOTHUB_PDO = 3;
export const USB_GET_PORT_STATUS = 4;
export const USB_ENABLE_PORT = 5;
export const USB_GET_HUB_COUNT = 6;
export const USB_CYCLE_PORT = 7;
export const USB_GET_HUB_NAME = 8;
export const USB_IDLE_NOTIFICATION = 9;
export const USB_RECORD_FAILURE = 10;
export const USB_GET_BUS_INFO = 264;
export const USB_GET_CONTROLLER_NAME = 265;
export const USB_GET_BUSGUID_INFO = 266;
export const USB_GET_PARENT_HUB_INFO = 267;
export const USB_GET_DEVICE_HANDLE = 268;
export const USB_GET_DEVICE_HANDLE_EX = 269;
export const USB_GET_TT_DEVICE_HANDLE = 270;
export const USB_GET_TOPOLOGY_ADDRESS = 271;
export const USB_IDLE_NOTIFICATION_EX = 272;
export const USB_REQ_GLOBAL_SUSPEND = 273;
export const USB_REQ_GLOBAL_RESUME = 274;
export const USB_GET_HUB_CONFIG_INFO = 275;
export const USB_FAIL_GET_STATUS = 280;
export const USB_REGISTER_COMPOSITE_DEVICE = 0;
export const USB_UNREGISTER_COMPOSITE_DEVICE = 1;
export const USB_REQUEST_REMOTE_WAKE_NOTIFICATION = 2;
export const HCD_GET_STATS_1 = 255;
export const HCD_DIAGNOSTIC_MODE_ON = 256;
export const HCD_DIAGNOSTIC_MODE_OFF = 257;
export const HCD_GET_ROOT_HUB_NAME = 258;
export const HCD_GET_DRIVERKEY_NAME = 265;
export const HCD_GET_STATS_2 = 266;
export const HCD_DISABLE_PORT = 268;
export const HCD_ENABLE_PORT = 269;
export const HCD_USER_REQUEST = 270;
export const HCD_TRACE_READ_REQUEST = 275;
export const USB_GET_NODE_INFORMATION = 258;
export const USB_GET_NODE_CONNECTION_INFORMATION = 259;
export const USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION = 260;
export const USB_GET_NODE_CONNECTION_NAME = 261;
export const USB_DIAG_IGNORE_HUBS_ON = 262;
export const USB_DIAG_IGNORE_HUBS_OFF = 263;
export const USB_GET_NODE_CONNECTION_DRIVERKEY_NAME = 264;
export const USB_GET_HUB_CAPABILITIES = 271;
export const USB_GET_NODE_CONNECTION_ATTRIBUTES = 272;
export const USB_HUB_CYCLE_PORT = 273;
export const USB_GET_NODE_CONNECTION_INFORMATION_EX = 274;
export const USB_RESET_HUB = 275;
export const USB_GET_HUB_CAPABILITIES_EX = 276;
export const USB_GET_HUB_INFORMATION_EX = 277;
export const USB_GET_PORT_CONNECTOR_PROPERTIES = 278;
export const USB_GET_NODE_CONNECTION_INFORMATION_EX_V2 = 279;
export const USB_GET_TRANSPORT_CHARACTERISTICS = 281;
export const USB_REGISTER_FOR_TRANSPORT_CHARACTERISTICS_CHANGE = 282;
export const USB_NOTIFY_ON_TRANSPORT_CHARACTERISTICS_CHANGE = 283;
export const USB_UNREGISTER_FOR_TRANSPORT_CHARACTERISTICS_CHANGE = 284;
export const USB_START_TRACKING_FOR_TIME_SYNC = 285;
export const USB_GET_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC = 286;
export const USB_STOP_TRACKING_FOR_TIME_SYNC = 287;
export const USB_GET_DEVICE_CHARACTERISTICS = 288;
export const FILE_DEVICE_USB = 34;
export const BMREQUEST_HOST_TO_DEVICE = 0;
export const BMREQUEST_DEVICE_TO_HOST = 1;
export const BMREQUEST_STANDARD = 0;
export const BMREQUEST_CLASS = 1;
export const BMREQUEST_VENDOR = 2;
export const BMREQUEST_TO_DEVICE = 0;
export const BMREQUEST_TO_INTERFACE = 1;
export const BMREQUEST_TO_ENDPOINT = 2;
export const BMREQUEST_TO_OTHER = 3;
export const USB_REQUEST_GET_STATUS = 0;
export const USB_REQUEST_CLEAR_FEATURE = 1;
export const USB_REQUEST_SET_FEATURE = 3;
export const USB_REQUEST_SET_ADDRESS = 5;
export const USB_REQUEST_GET_DESCRIPTOR = 6;
export const USB_REQUEST_SET_DESCRIPTOR = 7;
export const USB_REQUEST_GET_CONFIGURATION = 8;
export const USB_REQUEST_SET_CONFIGURATION = 9;
export const USB_REQUEST_GET_INTERFACE = 10;
export const USB_REQUEST_SET_INTERFACE = 11;
export const USB_REQUEST_SYNC_FRAME = 12;
export const USB_REQUEST_GET_FIRMWARE_STATUS = 26;
export const USB_REQUEST_SET_FIRMWARE_STATUS = 27;
export const USB_GET_FIRMWARE_ALLOWED_OR_DISALLOWED_STATE = 0;
export const USB_GET_FIRMWARE_HASH = 1;
export const USB_DEVICE_FIRMWARE_HASH_LENGTH = 32;
export const USB_DISALLOW_FIRMWARE_UPDATE = 0;
export const USB_ALLOW_FIRMWARE_UPDATE = 1;
export const USB_REQUEST_SET_SEL = 48;
export const USB_REQUEST_ISOCH_DELAY = 49;
export const USB_DEVICE_DESCRIPTOR_TYPE = 1;
export const USB_CONFIGURATION_DESCRIPTOR_TYPE = 2;
export const USB_STRING_DESCRIPTOR_TYPE = 3;
export const USB_INTERFACE_DESCRIPTOR_TYPE = 4;
export const USB_ENDPOINT_DESCRIPTOR_TYPE = 5;
export const USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE = 6;
export const USB_OTHER_SPEED_CONFIGURATION_DESCRIPTOR_TYPE = 7;
export const USB_INTERFACE_POWER_DESCRIPTOR_TYPE = 8;
export const USB_OTG_DESCRIPTOR_TYPE = 9;
export const USB_DEBUG_DESCRIPTOR_TYPE = 10;
export const USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE = 11;
export const USB_BOS_DESCRIPTOR_TYPE = 15;
export const USB_DEVICE_CAPABILITY_DESCRIPTOR_TYPE = 16;
export const USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR_TYPE = 48;
export const USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR_TYPE = 49;
export const USB_RESERVED_DESCRIPTOR_TYPE = 6;
export const USB_CONFIG_POWER_DESCRIPTOR_TYPE = 7;
export const USB_FEATURE_ENDPOINT_STALL = 0;
export const USB_FEATURE_REMOTE_WAKEUP = 1;
export const USB_FEATURE_TEST_MODE = 2;
export const USB_FEATURE_FUNCTION_SUSPEND = 0;
export const USB_FEATURE_U1_ENABLE = 48;
export const USB_FEATURE_U2_ENABLE = 49;
export const USB_FEATURE_LTM_ENABLE = 50;
export const USB_FEATURE_LDM_ENABLE = 53;
export const USB_FEATURE_BATTERY_WAKE_MASK = 40;
export const USB_FEATURE_OS_IS_PD_AWARE = 41;
export const USB_FEATURE_POLICY_MODE = 42;
export const USB_FEATURE_CHARGING_POLICY = 54;
export const USB_CHARGING_POLICY_DEFAULT = 0;
export const USB_CHARGING_POLICY_ICCHPF = 1;
export const USB_CHARGING_POLICY_ICCLPF = 2;
export const USB_CHARGING_POLICY_NO_POWER = 3;
export const USB_STATUS_PORT_STATUS = 0;
export const USB_STATUS_PD_STATUS = 1;
export const USB_STATUS_EXT_PORT_STATUS = 2;
export const USB_GETSTATUS_SELF_POWERED = 1;
export const USB_GETSTATUS_REMOTE_WAKEUP_ENABLED = 2;
export const USB_GETSTATUS_U1_ENABLE = 4;
export const USB_GETSTATUS_U2_ENABLE = 8;
export const USB_GETSTATUS_LTM_ENABLE = 16;
export const USB_DEVICE_CLASS_RESERVED = 0;
export const USB_DEVICE_CLASS_AUDIO = 1;
export const USB_DEVICE_CLASS_COMMUNICATIONS = 2;
export const USB_DEVICE_CLASS_HUMAN_INTERFACE = 3;
export const USB_DEVICE_CLASS_MONITOR = 4;
export const USB_DEVICE_CLASS_PHYSICAL_INTERFACE = 5;
export const USB_DEVICE_CLASS_POWER = 6;
export const USB_DEVICE_CLASS_IMAGE = 6;
export const USB_DEVICE_CLASS_PRINTER = 7;
export const USB_DEVICE_CLASS_STORAGE = 8;
export const USB_DEVICE_CLASS_HUB = 9;
export const USB_DEVICE_CLASS_CDC_DATA = 10;
export const USB_DEVICE_CLASS_SMART_CARD = 11;
export const USB_DEVICE_CLASS_CONTENT_SECURITY = 13;
export const USB_DEVICE_CLASS_VIDEO = 14;
export const USB_DEVICE_CLASS_PERSONAL_HEALTHCARE = 15;
export const USB_DEVICE_CLASS_AUDIO_VIDEO = 16;
export const USB_DEVICE_CLASS_BILLBOARD = 17;
export const USB_DEVICE_CLASS_DIAGNOSTIC_DEVICE = 220;
export const USB_DEVICE_CLASS_WIRELESS_CONTROLLER = 224;
export const USB_DEVICE_CLASS_MISCELLANEOUS = 239;
export const USB_DEVICE_CLASS_APPLICATION_SPECIFIC = 254;
export const USB_DEVICE_CLASS_VENDOR_SPECIFIC = 255;
export const USB_DEVICE_CAPABILITY_WIRELESS_USB = 1;
export const USB_DEVICE_CAPABILITY_USB20_EXTENSION = 2;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_USB = 3;
export const USB_DEVICE_CAPABILITY_CONTAINER_ID = 4;
export const USB_DEVICE_CAPABILITY_PLATFORM = 5;
export const USB_DEVICE_CAPABILITY_POWER_DELIVERY = 6;
export const USB_DEVICE_CAPABILITY_BATTERY_INFO = 7;
export const USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT = 8;
export const USB_DEVICE_CAPABILITY_PD_PROVIDER_PORT = 9;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB = 10;
export const USB_DEVICE_CAPABILITY_PRECISION_TIME_MEASUREMENT = 11;
export const USB_DEVICE_CAPABILITY_BILLBOARD = 13;
export const USB_DEVICE_CAPABILITY_FIRMWARE_STATUS = 17;
export const USB_DEVICE_CAPABILITY_USB20_EXTENSION_BMATTRIBUTES_RESERVED_MASK = 4294901985;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_BMATTRIBUTES_RESERVED_MASK = 253;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_BMATTRIBUTES_LTM_CAPABLE = 2;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_SPEEDS_SUPPORTED_RESERVED_MASK = 65520;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_SPEEDS_SUPPORTED_LOW = 1;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_SPEEDS_SUPPORTED_FULL = 2;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_SPEEDS_SUPPORTED_HIGH = 4;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_SPEEDS_SUPPORTED_SUPER = 8;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_U1_DEVICE_EXIT_MAX_VALUE = 10;
export const USB_DEVICE_CAPABILITY_SUPERSPEED_U2_DEVICE_EXIT_MAX_VALUE = 2047;
export const USB_DEVICE_CAPABILITY_MAX_U1_LATENCY = 10;
export const USB_DEVICE_CAPABILITY_MAX_U2_LATENCY = 2047;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_LSE_BPS = 0;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_LSE_KBPS = 1;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_LSE_MBPS = 2;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_LSE_GBPS = 3;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_MODE_SYMMETRIC = 0;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_MODE_ASYMMETRIC = 1;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_DIR_RX = 0;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_DIR_TX = 1;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_PROTOCOL_SS = 0;
export const USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED_PROTOCOL_SSP = 1;
export const USB_CONFIG_POWERED_MASK = 192;
export const USB_CONFIG_BUS_POWERED = 128;
export const USB_CONFIG_SELF_POWERED = 64;
export const USB_CONFIG_REMOTE_WAKEUP = 32;
export const USB_CONFIG_RESERVED = 31;
export const USB_ENDPOINT_DIRECTION_MASK = 128;
export const USB_ENDPOINT_ADDRESS_MASK = 15;
export const USB_ENDPOINT_TYPE_MASK = 3;
export const USB_ENDPOINT_TYPE_CONTROL = 0;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS = 1;
export const USB_ENDPOINT_TYPE_BULK = 2;
export const USB_ENDPOINT_TYPE_INTERRUPT = 3;
export const USB_ENDPOINT_TYPE_BULK_RESERVED_MASK = 252;
export const USB_ENDPOINT_TYPE_CONTROL_RESERVED_MASK = 252;
export const USB_20_ENDPOINT_TYPE_INTERRUPT_RESERVED_MASK = 252;
export const USB_30_ENDPOINT_TYPE_INTERRUPT_RESERVED_MASK = 204;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_RESERVED_MASK = 192;
export const USB_30_ENDPOINT_TYPE_INTERRUPT_USAGE_MASK = 48;
export const USB_30_ENDPOINT_TYPE_INTERRUPT_USAGE_PERIODIC = 0;
export const USB_30_ENDPOINT_TYPE_INTERRUPT_USAGE_NOTIFICATION = 16;
export const USB_30_ENDPOINT_TYPE_INTERRUPT_USAGE_RESERVED10 = 32;
export const USB_30_ENDPOINT_TYPE_INTERRUPT_USAGE_RESERVED11 = 48;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_SYNCHRONIZATION_MASK = 12;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_SYNCHRONIZATION_NO_SYNCHRONIZATION = 0;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_SYNCHRONIZATION_ASYNCHRONOUS = 4;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_SYNCHRONIZATION_ADAPTIVE = 8;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_SYNCHRONIZATION_SYNCHRONOUS = 12;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_USAGE_MASK = 48;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_USAGE_DATA_ENDOINT = 0;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_USAGE_FEEDBACK_ENDPOINT = 16;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_USAGE_IMPLICIT_FEEDBACK_DATA_ENDPOINT = 32;
export const USB_ENDPOINT_TYPE_ISOCHRONOUS_USAGE_RESERVED = 48;
export const USB_ENDPOINT_SUPERSPEED_BULK_MAX_PACKET_SIZE = 1024;
export const USB_ENDPOINT_SUPERSPEED_CONTROL_MAX_PACKET_SIZE = 512;
export const USB_ENDPOINT_SUPERSPEED_ISO_MAX_PACKET_SIZE = 1024;
export const USB_ENDPOINT_SUPERSPEED_INTERRUPT_MAX_PACKET_SIZE = 1024;
export const MAXIMUM_USB_STRING_LENGTH = 255;
export const USB_SUPERSPEED_ISOCHRONOUS_MAX_MULTIPLIER = 2;
export const USB_SUPERSPEEDPLUS_ISOCHRONOUS_MIN_BYTESPERINTERVAL = 49153;
export const USB_SUPERSPEEDPLUS_ISOCHRONOUS_MAX_BYTESPERINTERVAL = 16777215;
export const USB_20_HUB_DESCRIPTOR_TYPE = 41;
export const USB_30_HUB_DESCRIPTOR_TYPE = 42;
export const USB_REQUEST_GET_STATE = 2;
export const USB_REQUEST_CLEAR_TT_BUFFER = 8;
export const USB_REQUEST_RESET_TT = 9;
export const USB_REQUEST_GET_TT_STATE = 10;
export const USB_REQUEST_STOP_TT = 11;
export const USB_REQUEST_SET_HUB_DEPTH = 12;
export const USB_REQUEST_GET_PORT_ERR_COUNT = 13;
export const USB_PORT_STATUS_CONNECT = 1;
export const USB_PORT_STATUS_ENABLE = 2;
export const USB_PORT_STATUS_SUSPEND = 4;
export const USB_PORT_STATUS_OVER_CURRENT = 8;
export const USB_PORT_STATUS_RESET = 16;
export const USB_PORT_STATUS_POWER = 256;
export const USB_PORT_STATUS_LOW_SPEED = 512;
export const USB_PORT_STATUS_HIGH_SPEED = 1024;
export const PORT_LINK_STATE_U0 = 0;
export const PORT_LINK_STATE_U1 = 1;
export const PORT_LINK_STATE_U2 = 2;
export const PORT_LINK_STATE_U3 = 3;
export const PORT_LINK_STATE_DISABLED = 4;
export const PORT_LINK_STATE_RX_DETECT = 5;
export const PORT_LINK_STATE_INACTIVE = 6;
export const PORT_LINK_STATE_POLLING = 7;
export const PORT_LINK_STATE_RECOVERY = 8;
export const PORT_LINK_STATE_HOT_RESET = 9;
export const PORT_LINK_STATE_COMPLIANCE_MODE = 10;
export const PORT_LINK_STATE_LOOPBACK = 11;
export const PORT_LINK_STATE_TEST_MODE = 11;
export const USB_FEATURE_INTERFACE_POWER_D0 = 2;
export const USB_FEATURE_INTERFACE_POWER_D1 = 3;
export const USB_FEATURE_INTERFACE_POWER_D2 = 4;
export const USB_FEATURE_INTERFACE_POWER_D3 = 5;
export const USB_SUPPORT_D0_COMMAND = 1;
export const USB_SUPPORT_D1_COMMAND = 2;
export const USB_SUPPORT_D2_COMMAND = 4;
export const USB_SUPPORT_D3_COMMAND = 8;
export const USB_SUPPORT_D1_WAKEUP = 16;
export const USB_SUPPORT_D2_WAKEUP = 32;
export const USBDI_VERSION = 1536;
export const USB_PORTATTR_NO_CONNECTOR = 1;
export const USB_PORTATTR_SHARED_USB2 = 2;
export const USB_PORTATTR_MINI_CONNECTOR = 4;
export const USB_PORTATTR_OEM_CONNECTOR = 8;
export const USB_PORTATTR_OWNED_BY_CC = 16777216;
export const USB_PORTATTR_NO_OVERCURRENT_UI = 33554432;
export const USB_DEFAULT_DEVICE_ADDRESS = 0;
export const USB_DEFAULT_ENDPOINT_ADDRESS = 0;
export const USB_DEFAULT_MAX_PACKET = 64;
export const URB_FUNCTION_SELECT_CONFIGURATION = 0;
export const URB_FUNCTION_SELECT_INTERFACE = 1;
export const URB_FUNCTION_ABORT_PIPE = 2;
export const URB_FUNCTION_TAKE_FRAME_LENGTH_CONTROL = 3;
export const URB_FUNCTION_RELEASE_FRAME_LENGTH_CONTROL = 4;
export const URB_FUNCTION_GET_FRAME_LENGTH = 5;
export const URB_FUNCTION_SET_FRAME_LENGTH = 6;
export const URB_FUNCTION_GET_CURRENT_FRAME_NUMBER = 7;
export const URB_FUNCTION_CONTROL_TRANSFER = 8;
export const URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER = 9;
export const URB_FUNCTION_ISOCH_TRANSFER = 10;
export const URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE = 11;
export const URB_FUNCTION_SET_DESCRIPTOR_TO_DEVICE = 12;
export const URB_FUNCTION_SET_FEATURE_TO_DEVICE = 13;
export const URB_FUNCTION_SET_FEATURE_TO_INTERFACE = 14;
export const URB_FUNCTION_SET_FEATURE_TO_ENDPOINT = 15;
export const URB_FUNCTION_CLEAR_FEATURE_TO_DEVICE = 16;
export const URB_FUNCTION_CLEAR_FEATURE_TO_INTERFACE = 17;
export const URB_FUNCTION_CLEAR_FEATURE_TO_ENDPOINT = 18;
export const URB_FUNCTION_GET_STATUS_FROM_DEVICE = 19;
export const URB_FUNCTION_GET_STATUS_FROM_INTERFACE = 20;
export const URB_FUNCTION_GET_STATUS_FROM_ENDPOINT = 21;
export const URB_FUNCTION_RESERVED_0X0016 = 22;
export const URB_FUNCTION_VENDOR_DEVICE = 23;
export const URB_FUNCTION_VENDOR_INTERFACE = 24;
export const URB_FUNCTION_VENDOR_ENDPOINT = 25;
export const URB_FUNCTION_CLASS_DEVICE = 26;
export const URB_FUNCTION_CLASS_INTERFACE = 27;
export const URB_FUNCTION_CLASS_ENDPOINT = 28;
export const URB_FUNCTION_RESERVE_0X001D = 29;
export const URB_FUNCTION_SYNC_RESET_PIPE_AND_CLEAR_STALL = 30;
export const URB_FUNCTION_CLASS_OTHER = 31;
export const URB_FUNCTION_VENDOR_OTHER = 32;
export const URB_FUNCTION_GET_STATUS_FROM_OTHER = 33;
export const URB_FUNCTION_CLEAR_FEATURE_TO_OTHER = 34;
export const URB_FUNCTION_SET_FEATURE_TO_OTHER = 35;
export const URB_FUNCTION_GET_DESCRIPTOR_FROM_ENDPOINT = 36;
export const URB_FUNCTION_SET_DESCRIPTOR_TO_ENDPOINT = 37;
export const URB_FUNCTION_GET_CONFIGURATION = 38;
export const URB_FUNCTION_GET_INTERFACE = 39;
export const URB_FUNCTION_GET_DESCRIPTOR_FROM_INTERFACE = 40;
export const URB_FUNCTION_SET_DESCRIPTOR_TO_INTERFACE = 41;
export const URB_FUNCTION_RESERVE_0X002B = 43;
export const URB_FUNCTION_RESERVE_0X002C = 44;
export const URB_FUNCTION_RESERVE_0X002D = 45;
export const URB_FUNCTION_RESERVE_0X002E = 46;
export const URB_FUNCTION_RESERVE_0X002F = 47;
export const URB_FUNCTION_GET_MS_FEATURE_DESCRIPTOR = 42;
export const URB_FUNCTION_SYNC_RESET_PIPE = 48;
export const URB_FUNCTION_SYNC_CLEAR_STALL = 49;
export const URB_FUNCTION_CONTROL_TRANSFER_EX = 50;
export const URB_FUNCTION_RESERVE_0X0033 = 51;
export const URB_FUNCTION_RESERVE_0X0034 = 52;
export const URB_FUNCTION_OPEN_STATIC_STREAMS = 53;
export const URB_FUNCTION_CLOSE_STATIC_STREAMS = 54;
export const URB_FUNCTION_BULK_OR_INTERRUPT_TRANSFER_USING_CHAINED_MDL = 55;
export const URB_FUNCTION_ISOCH_TRANSFER_USING_CHAINED_MDL = 56;
export const URB_FUNCTION_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS = 61;
export const URB_FUNCTION_RESET_PIPE = 30;
export const USBD_SHORT_TRANSFER_OK = 2;
export const USBD_START_ISO_TRANSFER_ASAP = 4;
export const USBD_DEFAULT_PIPE_TRANSFER = 8;
export const USBD_TRANSFER_DIRECTION_OUT = 0;
export const USBD_TRANSFER_DIRECTION_IN = 1;
export const USBD_TRANSFER_DIRECTION = 1;
export const USBD_ISO_START_FRAME_RANGE = 1024;
export const USBD_DEFAULT_MAXIMUM_TRANSFER_SIZE = 4294967295;
export const USBD_PF_CHANGE_MAX_PACKET = 1;
export const USBD_PF_SHORT_PACKET_OPT = 2;
export const USBD_PF_ENABLE_RT_THREAD_ACCESS = 4;
export const USBD_PF_MAP_ADD_TRANSFERS = 8;
export const USBD_PF_VIDEO_PRIORITY = 16;
export const USBD_PF_VOICE_PRIORITY = 32;
export const USBD_PF_INTERACTIVE_PRIORITY = 48;
export const USBD_PF_PRIORITY_MASK = 240;
export const USBD_PF_HANDLES_SSP_HIGH_BANDWIDTH_ISOCH = 256;
export const USBD_PF_SSP_HIGH_BANDWIDTH_ISOCH = 65536;
export const OS_STRING_DESCRIPTOR_INDEX = 238;
export const MS_GENRE_DESCRIPTOR_INDEX = 1;
export const MS_POWER_DESCRIPTOR_INDEX = 2;
export const MS_OS_STRING_SIGNATURE = `MSFT100`;
export const MS_OS_FLAGS_CONTAINERID = 2;
export const URB_OPEN_STATIC_STREAMS_VERSION_100 = 256;
export const KREGUSBFNENUMPATH = `\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\USBFN\\`;
export const UREGUSBFNENUMPATH = `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\USBFN\\`;
export const KREGMANUSBFNENUMPATH = `\\Registry\\Machine\\SYSTEM\\CurrentControlSet\\Control\\ManufacturingMode\\Current\\USBFN\\`;
export const UREGMANUSBFNENUMPATH = `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ManufacturingMode\\Current\\USBFN\\`;
export const MAX_NUM_USBFN_ENDPOINTS = 15;
export const MAX_CONFIGURATION_NAME_LENGTH = 40;
export const MAX_USB_STRING_LENGTH = 255;
export const MAX_SUPPORTED_CONFIGURATIONS = 12;
export const USBFN_INTERRUPT_ENDPOINT_SIZE_NOT_UPDATEABLE_MASK = 128;
export const USB_TEST_MODE_TEST_J = 1;
export const USB_TEST_MODE_TEST_K = 2;
export const USB_TEST_MODE_TEST_SE0_NAK = 3;
export const USB_TEST_MODE_TEST_PACKET = 4;
export const USB_TEST_MODE_TEST_FORCE_ENABLE = 5;
export const MAX_INTERFACE_NAME_LENGTH = 40;
export const MAX_ALTERNATE_NAME_LENGTH = 40;
export const MAX_ASSOCIATION_NAME_LENGTH = 40;
export const IOCTL_INTERNAL_USB_SUBMIT_URB = 2228227;
export const IOCTL_INTERNAL_USB_RESET_PORT = 2228231;
export const IOCTL_INTERNAL_USB_GET_ROOTHUB_PDO = 2228239;
export const USBD_PORT_ENABLED = 1;
export const USBD_PORT_CONNECTED = 2;
export const IOCTL_INTERNAL_USB_GET_PORT_STATUS = 2228243;
export const IOCTL_INTERNAL_USB_ENABLE_PORT = 2228247;
export const IOCTL_INTERNAL_USB_GET_HUB_COUNT = 2228251;
export const IOCTL_INTERNAL_USB_CYCLE_PORT = 2228255;
export const IOCTL_INTERNAL_USB_GET_HUB_NAME = 2228256;
export const IOCTL_INTERNAL_USB_GET_BUS_INFO = 2229280;
export const IOCTL_INTERNAL_USB_GET_CONTROLLER_NAME = 2229284;
export const IOCTL_INTERNAL_USB_GET_BUSGUID_INFO = 2229288;
export const IOCTL_INTERNAL_USB_GET_PARENT_HUB_INFO = 2229292;
export const IOCTL_INTERNAL_USB_SUBMIT_IDLE_NOTIFICATION = 2228263;
export const IOCTL_INTERNAL_USB_GET_DEVICE_HANDLE = 2229299;
export const IOCTL_INTERNAL_USB_NOTIFY_IDLE_READY = 2229315;
export const IOCTL_INTERNAL_USB_REQ_GLOBAL_SUSPEND = 2229319;
export const IOCTL_INTERNAL_USB_REQ_GLOBAL_RESUME = 2229323;
export const IOCTL_INTERNAL_USB_RECORD_FAILURE = 2228267;
export const IOCTL_INTERNAL_USB_GET_DEVICE_HANDLE_EX = 2229303;
export const IOCTL_INTERNAL_USB_GET_TT_DEVICE_HANDLE = 2229307;
export const IOCTL_INTERNAL_USB_GET_TOPOLOGY_ADDRESS = 2229311;
export const IOCTL_INTERNAL_USB_GET_DEVICE_CONFIG_INFO = 2229327;
export const IOCTL_INTERNAL_USB_REGISTER_COMPOSITE_DEVICE = 4784131;
export const IOCTL_INTERNAL_USB_UNREGISTER_COMPOSITE_DEVICE = 4784135;
export const IOCTL_INTERNAL_USB_REQUEST_REMOTE_WAKE_NOTIFICATION = 4784139;
export const IOCTL_INTERNAL_USB_FAIL_GET_STATUS_FROM_DEVICE = 2229347;
export const IOCTL_USB_HCD_GET_STATS_1 = 2229244;
export const IOCTL_USB_HCD_GET_STATS_2 = 2229288;
export const IOCTL_USB_HCD_DISABLE_PORT = 2229296;
export const IOCTL_USB_HCD_ENABLE_PORT = 2229300;
export const IOCTL_USB_DIAGNOSTIC_MODE_ON = 2229248;
export const IOCTL_USB_DIAGNOSTIC_MODE_OFF = 2229252;
export const IOCTL_USB_GET_ROOT_HUB_NAME = 2229256;
export const IOCTL_GET_HCD_DRIVERKEY_NAME = 2229284;
export const IOCTL_USB_GET_NODE_INFORMATION = 2229256;
export const IOCTL_USB_GET_NODE_CONNECTION_INFORMATION = 2229260;
export const IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION = 2229264;
export const IOCTL_USB_GET_NODE_CONNECTION_NAME = 2229268;
export const IOCTL_USB_DIAG_IGNORE_HUBS_ON = 2229272;
export const IOCTL_USB_DIAG_IGNORE_HUBS_OFF = 2229276;
export const IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME = 2229280;
export const IOCTL_USB_GET_HUB_CAPABILITIES = 2229308;
export const IOCTL_USB_HUB_CYCLE_PORT = 2229316;
export const IOCTL_USB_GET_NODE_CONNECTION_ATTRIBUTES = 2229312;
export const IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX = 2229320;
export const IOCTL_USB_RESET_HUB = 2229324;
export const IOCTL_USB_GET_HUB_CAPABILITIES_EX = 2229328;
export const IOCTL_USB_GET_HUB_INFORMATION_EX = 2229332;
export const IOCTL_USB_GET_PORT_CONNECTOR_PROPERTIES = 2229336;
export const IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX_V2 = 2229340;
export const IOCTL_USB_GET_TRANSPORT_CHARACTERISTICS = 2229348;
export const IOCTL_USB_REGISTER_FOR_TRANSPORT_CHARACTERISTICS_CHANGE = 2229352;
export const IOCTL_USB_NOTIFY_ON_TRANSPORT_CHARACTERISTICS_CHANGE = 2229356;
export const IOCTL_USB_UNREGISTER_FOR_TRANSPORT_CHARACTERISTICS_CHANGE = 2229360;
export const IOCTL_USB_START_TRACKING_FOR_TIME_SYNC = 2229364;
export const IOCTL_USB_GET_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC = 2229368;
export const IOCTL_USB_STOP_TRACKING_FOR_TIME_SYNC = 2229372;
export const IOCTL_USB_GET_DEVICE_CHARACTERISTICS = 2229376;
export const WMI_USB_DRIVER_INFORMATION = 0;
export const WMI_USB_DRIVER_NOTIFICATION = 1;
export const WMI_USB_POWER_DEVICE_ENABLE = 2;
export const WMI_USB_HUB_NODE_INFORMATION = 4;
export const WMI_USB_PERFORMANCE_INFORMATION = 1;
export const WMI_USB_DEVICE_NODE_INFORMATION = 2;
export const USB_TRANSPORT_CHARACTERISTICS_VERSION_1 = 1;
export const USB_TRANSPORT_CHARACTERISTICS_LATENCY_AVAILABLE = 1;
export const USB_TRANSPORT_CHARACTERISTICS_BANDWIDTH_AVAILABLE = 2;
export const USB_REGISTER_FOR_TRANSPORT_LATENCY_CHANGE = 1;
export const USB_REGISTER_FOR_TRANSPORT_BANDWIDTH_CHANGE = 2;
export const USB_DEVICE_CHARACTERISTICS_VERSION_1 = 1;
export const USB_DEVICE_CHARACTERISTICS_MAXIMUM_PATH_DELAYS_AVAILABLE = 1;
export const MAX_NUM_PIPES = 8;
export const BULKIN_FLAG = 128;
export const FILE_DEVICE_USB_SCAN = 32768;
export const IOCTL_INDEX = 2048;
export const IOCTL_GET_VERSION = 2147491840;
export const IOCTL_CANCEL_IO = 2147491844;
export const IOCTL_WAIT_ON_DEVICE_EVENT = 2147491848;
export const IOCTL_READ_REGISTERS = 2147491852;
export const IOCTL_WRITE_REGISTERS = 2147491856;
export const IOCTL_GET_CHANNEL_ALIGN_RQST = 2147491860;
export const IOCTL_GET_DEVICE_DESCRIPTOR = 2147491864;
export const IOCTL_RESET_PIPE = 2147491868;
export const IOCTL_GET_USB_DESCRIPTOR = 2147491872;
export const IOCTL_SEND_USB_REQUEST = 2147491876;
export const IOCTL_GET_PIPE_CONFIGURATION = 2147491880;
export const IOCTL_SET_TIMEOUT = 2147491884;
export const IOCTL_ABORT_PIPE = 2147491844;
export const UsbLowSpeed = 0;
export const UsbFullSpeed = 1;
export const UsbHighSpeed = 2;
export const UsbSuperSpeed = 3;
export const Usb11Device = 0;
export const Usb20Device = 1;
export const USB_HcGeneric = 0;
export const OHCI_Generic = 100;
export const OHCI_Hydra = 101;
export const OHCI_NEC = 102;
export const UHCI_Generic = 200;
export const UHCI_Piix4 = 201;
export const UHCI_Piix3 = 202;
export const UHCI_Ich2 = 203;
export const UHCI_Reserved204 = 204;
export const UHCI_Ich1 = 205;
export const UHCI_Ich3m = 206;
export const UHCI_Ich4 = 207;
export const UHCI_Ich5 = 208;
export const UHCI_Ich6 = 209;
export const UHCI_Intel = 249;
export const UHCI_VIA = 250;
export const UHCI_VIA_x01 = 251;
export const UHCI_VIA_x02 = 252;
export const UHCI_VIA_x03 = 253;
export const UHCI_VIA_x04 = 254;
export const UHCI_VIA_x0E_FIFO = 264;
export const EHCI_Generic = 1000;
export const EHCI_NEC = 2000;
export const EHCI_Lucent = 3000;
export const EHCI_NVIDIA_Tegra2 = 4000;
export const EHCI_NVIDIA_Tegra3 = 4001;
export const EHCI_Intel_Medfield = 5001;
export const UsbdPipeTypeControl = 0;
export const UsbdPipeTypeIsochronous = 1;
export const UsbdPipeTypeBulk = 2;
export const UsbdPipeTypeInterrupt = 3;
export const UsbdEndpointOffloadModeNotSupported = 0;
export const UsbdEndpointOffloadSoftwareAssisted = 1;
export const UsbdEndpointOffloadHardwareAssisted = 2;
export const UsbUserSuccess = 0;
export const UsbUserNotSupported = 1;
export const UsbUserInvalidRequestCode = 2;
export const UsbUserFeatureDisabled = 3;
export const UsbUserInvalidHeaderParameter = 4;
export const UsbUserInvalidParameter = 5;
export const UsbUserMiniportError = 6;
export const UsbUserBufferTooSmall = 7;
export const UsbUserErrorNotMapped = 8;
export const UsbUserDeviceNotStarted = 9;
export const UsbUserNoDeviceConnected = 10;
export const WdmUsbPowerNotMapped = 0;
export const WdmUsbPowerSystemUnspecified = 100;
export const WdmUsbPowerSystemWorking = 101;
export const WdmUsbPowerSystemSleeping1 = 102;
export const WdmUsbPowerSystemSleeping2 = 103;
export const WdmUsbPowerSystemSleeping3 = 104;
export const WdmUsbPowerSystemHibernate = 105;
export const WdmUsbPowerSystemShutdown = 106;
export const WdmUsbPowerDeviceUnspecified = 200;
export const WdmUsbPowerDeviceD0 = 201;
export const WdmUsbPowerDeviceD1 = 202;
export const WdmUsbPowerDeviceD2 = 203;
export const WdmUsbPowerDeviceD3 = 204;
export const UsbfnEventMinimum = 0;
export const UsbfnEventAttach = 1;
export const UsbfnEventReset = 2;
export const UsbfnEventDetach = 3;
export const UsbfnEventSuspend = 4;
export const UsbfnEventResume = 5;
export const UsbfnEventSetupPacket = 6;
export const UsbfnEventConfigured = 7;
export const UsbfnEventUnConfigured = 8;
export const UsbfnEventPortType = 9;
export const UsbfnEventBusTearDown = 10;
export const UsbfnEventSetInterface = 11;
export const UsbfnEventMaximum = 12;
export const UsbfnUnknownPort = 0;
export const UsbfnStandardDownstreamPort = 1;
export const UsbfnChargingDownstreamPort = 2;
export const UsbfnDedicatedChargingPort = 3;
export const UsbfnInvalidDedicatedChargingPort = 4;
export const UsbfnProprietaryDedicatedChargingPort = 5;
export const UsbfnPortTypeMaximum = 6;
export const UsbfnBusSpeedLow = 0;
export const UsbfnBusSpeedFull = 1;
export const UsbfnBusSpeedHigh = 2;
export const UsbfnBusSpeedSuper = 3;
export const UsbfnBusSpeedMaximum = 4;
export const UsbfnDirectionMinimum = 0;
export const UsbfnDirectionIn = 1;
export const UsbfnDirectionOut = 2;
export const UsbfnDirectionTx = 1;
export const UsbfnDirectionRx = 2;
export const UsbfnDirectionMaximum = 3;
export const UsbfnDeviceStateMinimum = 0;
export const UsbfnDeviceStateAttached = 1;
export const UsbfnDeviceStateDefault = 2;
export const UsbfnDeviceStateDetached = 3;
export const UsbfnDeviceStateAddressed = 4;
export const UsbfnDeviceStateConfigured = 5;
export const UsbfnDeviceStateSuspended = 6;
export const UsbfnDeviceStateStateMaximum = 7;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const EVENT_PIPE = 0;
export const READ_DATA_PIPE = 1;
export const WRITE_DATA_PIPE = 2;
export const ALL_PIPE = 3;
export const USBSCAN_PIPE_CONTROL = 0;
export const USBSCAN_PIPE_ISOCHRONOUS = 1;
export const USBSCAN_PIPE_BULK = 2;
export const USBSCAN_PIPE_INTERRUPT = 3;

// Structs

/**
 * _BM (size: 8)
 */
export interface _BM {
  /** u8 */
  _bitfield: number;
}

export const sizeof_BM = 8;

export function alloc_BM(data?: Partial<_BM>): Uint8Array {
  const buf = new Uint8Array(sizeof_BM);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class _BMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Devices.Usb.BM_REQUEST_TYPE (size: 16)
 */
export interface BM_REQUEST_TYPE {
  /** _BM */
  s: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  B: number;
}

export const sizeofBM_REQUEST_TYPE = 16;

export function allocBM_REQUEST_TYPE(data?: Partial<BM_REQUEST_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofBM_REQUEST_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.s !== undefined) view.setBigUint64(0, data.s === null ? 0n : BigInt(util.toPointer(data.s)), true);
  // 0x08: u8
  if (data?.B !== undefined) view.setUint8(8, Number(data.B));
  // 0x09: pad7
  return buf;
}

export class BM_REQUEST_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get s(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get B(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: pointer
  set s(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set B(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _wValue (size: 16)
 */
export interface _wValue {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  W: number;
}

export const sizeof_wValue = 16;

export function alloc_wValue(data?: Partial<_wValue>): Uint8Array {
  const buf = new Uint8Array(sizeof_wValue);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.W !== undefined) view.setUint16(8, Number(data.W), true);
  // 0x0a: pad6
  return buf;
}

export class _wValueView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get W(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set W(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * _wIndex (size: 16)
 */
export interface _wIndex {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  W: number;
}

export const sizeof_wIndex = 16;

export function alloc_wIndex(data?: Partial<_wIndex>): Uint8Array {
  const buf = new Uint8Array(sizeof_wIndex);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u16
  if (data?.W !== undefined) view.setUint16(8, Number(data.W), true);
  // 0x0a: pad6
  return buf;
}

export class _wIndexView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get W(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set W(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_DEFAULT_PIPE_SETUP_PACKET (size: 40)
 */
export interface USB_DEFAULT_PIPE_SETUP_PACKET {
  /** Windows.Win32.Devices.Usb.BM_REQUEST_TYPE */
  bmRequestType: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bRequest: number;
  /** _wValue */
  wValue: Uint8Array | Deno.PointerValue | null;
  /** _wIndex */
  wIndex: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wLength: number;
}

export const sizeofUSB_DEFAULT_PIPE_SETUP_PACKET = 40;

export function allocUSB_DEFAULT_PIPE_SETUP_PACKET(data?: Partial<USB_DEFAULT_PIPE_SETUP_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEFAULT_PIPE_SETUP_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bmRequestType !== undefined) view.setBigUint64(0, data.bmRequestType === null ? 0n : BigInt(util.toPointer(data.bmRequestType)), true);
  // 0x08: u8
  if (data?.bRequest !== undefined) view.setUint8(8, Number(data.bRequest));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.wValue !== undefined) view.setBigUint64(16, data.wValue === null ? 0n : BigInt(util.toPointer(data.wValue)), true);
  // 0x18: pointer
  if (data?.wIndex !== undefined) view.setBigUint64(24, data.wIndex === null ? 0n : BigInt(util.toPointer(data.wIndex)), true);
  // 0x20: u16
  if (data?.wLength !== undefined) view.setUint16(32, Number(data.wLength), true);
  // 0x22: pad6
  return buf;
}

export class USB_DEFAULT_PIPE_SETUP_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get bmRequestType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get bRequest(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get wValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wIndex(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get wLength(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set bmRequestType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set bRequest(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set wValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wIndex(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set wLength(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_STATUS (size: 16)
 */
export interface USB_DEVICE_STATUS {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_STATUS = 16;

export function allocUSB_DEVICE_STATUS(data?: Partial<USB_DEVICE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_DEVICE_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_INTERFACE_STATUS (size: 16)
 */
export interface USB_INTERFACE_STATUS {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_INTERFACE_STATUS = 16;

export function allocUSB_INTERFACE_STATUS(data?: Partial<USB_INTERFACE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_INTERFACE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_INTERFACE_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_ENDPOINT_STATUS (size: 16)
 */
export interface USB_ENDPOINT_STATUS {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_ENDPOINT_STATUS = 16;

export function allocUSB_ENDPOINT_STATUS(data?: Partial<USB_ENDPOINT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_ENDPOINT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_ENDPOINT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_COMMON_DESCRIPTOR (size: 8)
 */
export interface USB_COMMON_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
}

export const sizeofUSB_COMMON_DESCRIPTOR = 8;

export function allocUSB_COMMON_DESCRIPTOR(data?: Partial<USB_COMMON_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_COMMON_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: pad6
  return buf;
}

export class USB_COMMON_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_DESCRIPTOR (size: 24)
 */
export interface USB_DEVICE_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u16 */
  bcdUSB: number;
  /** u8 */
  bDeviceClass: number;
  /** u8 */
  bDeviceSubClass: number;
  /** u8 */
  bDeviceProtocol: number;
  /** u8 */
  bMaxPacketSize0: number;
  /** u16 */
  idVendor: number;
  /** u16 */
  idProduct: number;
  /** u16 */
  bcdDevice: number;
  /** u8 */
  iManufacturer: number;
  /** u8 */
  iProduct: number;
  /** u8 */
  iSerialNumber: number;
  /** u8 */
  bNumConfigurations: number;
}

export const sizeofUSB_DEVICE_DESCRIPTOR = 24;

export function allocUSB_DEVICE_DESCRIPTOR(data?: Partial<USB_DEVICE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u16
  if (data?.bcdUSB !== undefined) view.setUint16(2, Number(data.bcdUSB), true);
  // 0x04: u8
  if (data?.bDeviceClass !== undefined) view.setUint8(4, Number(data.bDeviceClass));
  // 0x05: u8
  if (data?.bDeviceSubClass !== undefined) view.setUint8(5, Number(data.bDeviceSubClass));
  // 0x06: u8
  if (data?.bDeviceProtocol !== undefined) view.setUint8(6, Number(data.bDeviceProtocol));
  // 0x07: u8
  if (data?.bMaxPacketSize0 !== undefined) view.setUint8(7, Number(data.bMaxPacketSize0));
  // 0x08: u16
  if (data?.idVendor !== undefined) view.setUint16(8, Number(data.idVendor), true);
  // 0x0a: u16
  if (data?.idProduct !== undefined) view.setUint16(10, Number(data.idProduct), true);
  // 0x0c: u16
  if (data?.bcdDevice !== undefined) view.setUint16(12, Number(data.bcdDevice), true);
  // 0x0e: u8
  if (data?.iManufacturer !== undefined) view.setUint8(14, Number(data.iManufacturer));
  // 0x0f: u8
  if (data?.iProduct !== undefined) view.setUint8(15, Number(data.iProduct));
  // 0x10: u8
  if (data?.iSerialNumber !== undefined) view.setUint8(16, Number(data.iSerialNumber));
  // 0x11: u8
  if (data?.bNumConfigurations !== undefined) view.setUint8(17, Number(data.bNumConfigurations));
  // 0x12: pad6
  return buf;
}

export class USB_DEVICE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get bcdUSB(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get bDeviceClass(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bDeviceSubClass(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bDeviceProtocol(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bMaxPacketSize0(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u16
  get idVendor(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get idProduct(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get bcdDevice(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u8
  get iManufacturer(): number {
    return this.view.getUint8(14);
  }

  // 0x0f: u8
  get iProduct(): number {
    return this.view.getUint8(15);
  }

  // 0x10: u8
  get iSerialNumber(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get bNumConfigurations(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set bcdUSB(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set bDeviceClass(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bDeviceSubClass(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bDeviceProtocol(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bMaxPacketSize0(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u16
  set idVendor(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set idProduct(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set bcdDevice(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u8
  set iManufacturer(value: number) {
    this.view.setUint8(14, value);
  }

  // 0x0f: u8
  set iProduct(value: number) {
    this.view.setUint8(15, value);
  }

  // 0x10: u8
  set iSerialNumber(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set bNumConfigurations(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_QUALIFIER_DESCRIPTOR (size: 16)
 */
export interface USB_DEVICE_QUALIFIER_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u16 */
  bcdUSB: number;
  /** u8 */
  bDeviceClass: number;
  /** u8 */
  bDeviceSubClass: number;
  /** u8 */
  bDeviceProtocol: number;
  /** u8 */
  bMaxPacketSize0: number;
  /** u8 */
  bNumConfigurations: number;
  /** u8 */
  bReserved: number;
}

export const sizeofUSB_DEVICE_QUALIFIER_DESCRIPTOR = 16;

export function allocUSB_DEVICE_QUALIFIER_DESCRIPTOR(data?: Partial<USB_DEVICE_QUALIFIER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_QUALIFIER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u16
  if (data?.bcdUSB !== undefined) view.setUint16(2, Number(data.bcdUSB), true);
  // 0x04: u8
  if (data?.bDeviceClass !== undefined) view.setUint8(4, Number(data.bDeviceClass));
  // 0x05: u8
  if (data?.bDeviceSubClass !== undefined) view.setUint8(5, Number(data.bDeviceSubClass));
  // 0x06: u8
  if (data?.bDeviceProtocol !== undefined) view.setUint8(6, Number(data.bDeviceProtocol));
  // 0x07: u8
  if (data?.bMaxPacketSize0 !== undefined) view.setUint8(7, Number(data.bMaxPacketSize0));
  // 0x08: u8
  if (data?.bNumConfigurations !== undefined) view.setUint8(8, Number(data.bNumConfigurations));
  // 0x09: u8
  if (data?.bReserved !== undefined) view.setUint8(9, Number(data.bReserved));
  // 0x0a: pad6
  return buf;
}

export class USB_DEVICE_QUALIFIER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get bcdUSB(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get bDeviceClass(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bDeviceSubClass(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bDeviceProtocol(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bMaxPacketSize0(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get bNumConfigurations(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get bReserved(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set bcdUSB(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set bDeviceClass(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bDeviceSubClass(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bDeviceProtocol(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bMaxPacketSize0(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set bNumConfigurations(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set bReserved(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_BOS_DESCRIPTOR (size: 8)
 */
export interface USB_BOS_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u16 */
  wTotalLength: number;
  /** u8 */
  bNumDeviceCaps: number;
}

export const sizeofUSB_BOS_DESCRIPTOR = 8;

export function allocUSB_BOS_DESCRIPTOR(data?: Partial<USB_BOS_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_BOS_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u16
  if (data?.wTotalLength !== undefined) view.setUint16(2, Number(data.wTotalLength), true);
  // 0x04: u8
  if (data?.bNumDeviceCaps !== undefined) view.setUint8(4, Number(data.bNumDeviceCaps));
  // 0x05: pad3
  return buf;
}

export class USB_BOS_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get wTotalLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get bNumDeviceCaps(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set wTotalLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set bNumDeviceCaps(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * _bmAttributes_e__Union (size: 16)
 */
export interface _bmAttributes_e__Union {
  /** u32 */
  AsUlong: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_bmAttributes_e__Union = 16;

export function alloc_bmAttributes_e__Union(data?: Partial<_bmAttributes_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_bmAttributes_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AsUlong !== undefined) view.setUint32(0, Number(data.AsUlong), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class _bmAttributes_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AsUlong(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AsUlong(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR (size: 16)
 */
export interface USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** _bmAttributes_e__Union */
  bmAttributes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR = 16;

export function allocUSB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.bmAttributes !== undefined) view.setBigUint64(8, data.bmAttributes === null ? 0n : BigInt(util.toPointer(data.bmAttributes)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_USB20_EXTENSION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get bmAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set bmAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR (size: 32)
 */
export interface USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bReserved: number;
  /** _bmAttributes_e__Union */
  bmAttributes: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  bmProviderPorts: number;
  /** u16 */
  bmConsumerPorts: number;
  /** u16 */
  bcdBCVersion: number;
  /** u16 */
  bcdPDVersion: number;
  /** u16 */
  bcdUSBTypeCVersion: number;
}

export const sizeofUSB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR = 32;

export function allocUSB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bReserved !== undefined) view.setUint8(3, Number(data.bReserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bmAttributes !== undefined) view.setBigUint64(8, data.bmAttributes === null ? 0n : BigInt(util.toPointer(data.bmAttributes)), true);
  // 0x10: u16
  if (data?.bmProviderPorts !== undefined) view.setUint16(16, Number(data.bmProviderPorts), true);
  // 0x12: u16
  if (data?.bmConsumerPorts !== undefined) view.setUint16(18, Number(data.bmConsumerPorts), true);
  // 0x14: u16
  if (data?.bcdBCVersion !== undefined) view.setUint16(20, Number(data.bcdBCVersion), true);
  // 0x16: u16
  if (data?.bcdPDVersion !== undefined) view.setUint16(22, Number(data.bcdPDVersion), true);
  // 0x18: u16
  if (data?.bcdUSBTypeCVersion !== undefined) view.setUint16(24, Number(data.bcdUSBTypeCVersion), true);
  // 0x1a: pad6
  return buf;
}

export class USB_DEVICE_CAPABILITY_POWER_DELIVERY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bReserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bmAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get bmProviderPorts(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get bmConsumerPorts(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get bcdBCVersion(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get bcdPDVersion(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u16
  get bcdUSBTypeCVersion(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bReserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bmAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set bmProviderPorts(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set bmConsumerPorts(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set bcdBCVersion(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set bcdPDVersion(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u16
  set bcdUSBTypeCVersion(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6
}

/**
 * _bmCapabilities_e__Union (size: 16)
 */
export interface _bmCapabilities_e__Union {
  /** u16 */
  AsUshort: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_bmCapabilities_e__Union = 16;

export function alloc_bmCapabilities_e__Union(data?: Partial<_bmCapabilities_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_bmCapabilities_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort !== undefined) view.setUint16(0, Number(data.AsUshort), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class _bmCapabilities_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR (size: 40)
 */
export interface USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bReserved: number;
  /** _bmCapabilities_e__Union */
  bmCapabilities: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wMinVoltage: number;
  /** u16 */
  wMaxVoltage: number;
  /** u16 */
  wReserved: number;
  /** u32 */
  dwMaxOperatingPower: number;
  /** u32 */
  dwMaxPeakPower: number;
  /** u32 */
  dwMaxPeakPowerTime: number;
}

export const sizeofUSB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR = 40;

export function allocUSB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bReserved !== undefined) view.setUint8(3, Number(data.bReserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bmCapabilities !== undefined) view.setBigUint64(8, data.bmCapabilities === null ? 0n : BigInt(util.toPointer(data.bmCapabilities)), true);
  // 0x10: u16
  if (data?.wMinVoltage !== undefined) view.setUint16(16, Number(data.wMinVoltage), true);
  // 0x12: u16
  if (data?.wMaxVoltage !== undefined) view.setUint16(18, Number(data.wMaxVoltage), true);
  // 0x14: u16
  if (data?.wReserved !== undefined) view.setUint16(20, Number(data.wReserved), true);
  // 0x16: u32
  if (data?.dwMaxOperatingPower !== undefined) view.setUint32(22, Number(data.dwMaxOperatingPower), true);
  // 0x1a: u32
  if (data?.dwMaxPeakPower !== undefined) view.setUint32(26, Number(data.dwMaxPeakPower), true);
  // 0x1e: u32
  if (data?.dwMaxPeakPowerTime !== undefined) view.setUint32(30, Number(data.dwMaxPeakPowerTime), true);
  // 0x22: pad6
  return buf;
}

export class USB_DEVICE_CAPABILITY_PD_CONSUMER_PORT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bReserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bmCapabilities(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get wMinVoltage(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wMaxVoltage(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get wReserved(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get dwMaxOperatingPower(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: u32
  get dwMaxPeakPower(): number {
    return this.view.getUint32(26, true);
  }

  // 0x1e: u32
  get dwMaxPeakPowerTime(): number {
    return this.view.getUint32(30, true);
  }

  // 0x22: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bReserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bmCapabilities(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set wMinVoltage(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wMaxVoltage(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set wReserved(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set dwMaxOperatingPower(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: u32
  set dwMaxPeakPower(value: number) {
    this.view.setUint32(26, value, true);
  }

  // 0x1e: u32
  set dwMaxPeakPowerTime(value: number) {
    this.view.setUint32(30, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR (size: 16)
 */
export interface USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bmAttributes: number;
  /** u16 */
  wSpeedsSupported: number;
  /** u8 */
  bFunctionalitySupport: number;
  /** u8 */
  bU1DevExitLat: number;
  /** u16 */
  wU2DevExitLat: number;
}

export const sizeofUSB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR = 16;

export function allocUSB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bmAttributes !== undefined) view.setUint8(3, Number(data.bmAttributes));
  // 0x04: u16
  if (data?.wSpeedsSupported !== undefined) view.setUint16(4, Number(data.wSpeedsSupported), true);
  // 0x06: u8
  if (data?.bFunctionalitySupport !== undefined) view.setUint8(6, Number(data.bFunctionalitySupport));
  // 0x07: u8
  if (data?.bU1DevExitLat !== undefined) view.setUint8(7, Number(data.bU1DevExitLat));
  // 0x08: u16
  if (data?.wU2DevExitLat !== undefined) view.setUint16(8, Number(data.wU2DevExitLat), true);
  // 0x0a: pad6
  return buf;
}

export class USB_DEVICE_CAPABILITY_SUPERSPEED_USB_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bmAttributes(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u16
  get wSpeedsSupported(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u8
  get bFunctionalitySupport(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bU1DevExitLat(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u16
  get wU2DevExitLat(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bmAttributes(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u16
  set wSpeedsSupported(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u8
  set bFunctionalitySupport(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bU1DevExitLat(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u16
  set wU2DevExitLat(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED (size: 16)
 */
export interface USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED {
  /** u32 */
  AsUlong32: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED = 16;

export function allocUSB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED(data?: Partial<USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AsUlong32 !== undefined) view.setUint32(0, Number(data.AsUlong32), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_SPEEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AsUlong32(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AsUlong32(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _wFunctionalitySupport_e__Union (size: 16)
 */
export interface _wFunctionalitySupport_e__Union {
  /** u16 */
  AsUshort: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_wFunctionalitySupport_e__Union = 16;

export function alloc_wFunctionalitySupport_e__Union(data?: Partial<_wFunctionalitySupport_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_wFunctionalitySupport_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort !== undefined) view.setUint16(0, Number(data.AsUshort), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class _wFunctionalitySupport_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR (size: 40)
 */
export interface USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bReserved: number;
  /** _bmAttributes_e__Union */
  bmAttributes: Uint8Array | Deno.PointerValue | null;
  /** _wFunctionalitySupport_e__Union */
  wFunctionalitySupport: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wReserved: number;
  /** array */
  bmSublinkSpeedAttr: Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR = 40;

export function allocUSB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bReserved !== undefined) view.setUint8(3, Number(data.bReserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bmAttributes !== undefined) view.setBigUint64(8, data.bmAttributes === null ? 0n : BigInt(util.toPointer(data.bmAttributes)), true);
  // 0x10: pointer
  if (data?.wFunctionalitySupport !== undefined) view.setBigUint64(16, data.wFunctionalitySupport === null ? 0n : BigInt(util.toPointer(data.wFunctionalitySupport)), true);
  // 0x18: u16
  if (data?.wReserved !== undefined) view.setUint16(24, Number(data.wReserved), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.bmSublinkSpeedAttr !== undefined) view.setBigUint64(32, data.bmSublinkSpeedAttr === null ? 0n : BigInt(util.toPointer(data.bmSublinkSpeedAttr)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_SUPERSPEEDPLUS_USB_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bReserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bmAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wFunctionalitySupport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get wReserved(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get bmSublinkSpeedAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bReserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bmAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wFunctionalitySupport(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set wReserved(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set bmSublinkSpeedAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR (size: 16)
 */
export interface USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bReserved: number;
  /** array */
  ContainerID: Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR = 16;

export function allocUSB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bReserved !== undefined) view.setUint8(3, Number(data.bReserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ContainerID !== undefined) view.setBigUint64(8, data.ContainerID === null ? 0n : BigInt(util.toPointer(data.ContainerID)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_CONTAINER_ID_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bReserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ContainerID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bReserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ContainerID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR (size: 24)
 */
export interface USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bReserved: number;
  /** System.Guid */
  PlatformCapabilityUuid: Uint8Array | Deno.PointerValue | null;
  /** array */
  CapabililityData: Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR = 24;

export function allocUSB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bReserved !== undefined) view.setUint8(3, Number(data.bReserved));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PlatformCapabilityUuid !== undefined) view.setBigUint64(8, data.PlatformCapabilityUuid === null ? 0n : BigInt(util.toPointer(data.PlatformCapabilityUuid)), true);
  // 0x10: pointer
  if (data?.CapabililityData !== undefined) view.setBigUint64(16, data.CapabililityData === null ? 0n : BigInt(util.toPointer(data.CapabililityData)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_PLATFORM_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bReserved(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PlatformCapabilityUuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CapabililityData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bReserved(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PlatformCapabilityUuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CapabililityData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _VconnPower_e__Union (size: 16)
 */
export interface _VconnPower_e__Union {
  /** u16 */
  AsUshort: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_VconnPower_e__Union = 16;

export function alloc_VconnPower_e__Union(data?: Partial<_VconnPower_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_VconnPower_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort !== undefined) view.setUint16(0, Number(data.AsUshort), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class _VconnPower_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR (size: 40)
 */
export interface USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  iAddtionalInfoURL: number;
  /** u8 */
  bNumberOfAlternateModes: number;
  /** u8 */
  bPreferredAlternateMode: number;
  /** _VconnPower_e__Union */
  VconnPower: Uint8Array | Deno.PointerValue | null;
  /** array */
  bmConfigured: Deno.PointerValue | null;
  /** u32 */
  bReserved: number;
  /** array */
  AlternateMode: Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR = 40;

export function allocUSB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.iAddtionalInfoURL !== undefined) view.setUint8(3, Number(data.iAddtionalInfoURL));
  // 0x04: u8
  if (data?.bNumberOfAlternateModes !== undefined) view.setUint8(4, Number(data.bNumberOfAlternateModes));
  // 0x05: u8
  if (data?.bPreferredAlternateMode !== undefined) view.setUint8(5, Number(data.bPreferredAlternateMode));
  // 0x06: pad2
  // 0x08: pointer
  if (data?.VconnPower !== undefined) view.setBigUint64(8, data.VconnPower === null ? 0n : BigInt(util.toPointer(data.VconnPower)), true);
  // 0x10: pointer
  if (data?.bmConfigured !== undefined) view.setBigUint64(16, data.bmConfigured === null ? 0n : BigInt(util.toPointer(data.bmConfigured)), true);
  // 0x18: u32
  if (data?.bReserved !== undefined) view.setUint32(24, Number(data.bReserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.AlternateMode !== undefined) view.setBigUint64(32, data.AlternateMode === null ? 0n : BigInt(util.toPointer(data.AlternateMode)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_BILLBOARD_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get iAddtionalInfoURL(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bNumberOfAlternateModes(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bPreferredAlternateMode(): number {
    return this.view.getUint8(5);
  }

  // 0x06: pad2

  // 0x08: pointer
  get VconnPower(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get bmConfigured(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get bReserved(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get AlternateMode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set iAddtionalInfoURL(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bNumberOfAlternateModes(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bPreferredAlternateMode(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: pad2

  // 0x08: pointer
  set VconnPower(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set bmConfigured(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set bReserved(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set AlternateMode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR (size: 16)
 */
export interface USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
  /** u8 */
  bcdDescriptorVersion: number;
  /** _bmAttributes_e__Union */
  bmAttributes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR = 16;

export function allocUSB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: u8
  if (data?.bcdDescriptorVersion !== undefined) view.setUint8(3, Number(data.bcdDescriptorVersion));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bmAttributes !== undefined) view.setBigUint64(8, data.bmAttributes === null ? 0n : BigInt(util.toPointer(data.bmAttributes)), true);
  return buf;
}

export class USB_DEVICE_CAPABILITY_FIRMWARE_STATUS_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bcdDescriptorVersion(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bmAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bcdDescriptorVersion(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bmAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DEVICE_CAPABILITY_DESCRIPTOR (size: 8)
 */
export interface USB_DEVICE_CAPABILITY_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bDevCapabilityType: number;
}

export const sizeofUSB_DEVICE_CAPABILITY_DESCRIPTOR = 8;

export function allocUSB_DEVICE_CAPABILITY_DESCRIPTOR(data?: Partial<USB_DEVICE_CAPABILITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DEVICE_CAPABILITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bDevCapabilityType !== undefined) view.setUint8(2, Number(data.bDevCapabilityType));
  // 0x03: pad5
  return buf;
}

export class USB_DEVICE_CAPABILITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bDevCapabilityType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bDevCapabilityType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.Devices.Usb.USB_CONFIGURATION_DESCRIPTOR (size: 16)
 */
export interface USB_CONFIGURATION_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u16 */
  wTotalLength: number;
  /** u8 */
  bNumInterfaces: number;
  /** u8 */
  bConfigurationValue: number;
  /** u8 */
  iConfiguration: number;
  /** u8 */
  bmAttributes: number;
  /** u8 */
  MaxPower: number;
}

export const sizeofUSB_CONFIGURATION_DESCRIPTOR = 16;

export function allocUSB_CONFIGURATION_DESCRIPTOR(data?: Partial<USB_CONFIGURATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_CONFIGURATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u16
  if (data?.wTotalLength !== undefined) view.setUint16(2, Number(data.wTotalLength), true);
  // 0x04: u8
  if (data?.bNumInterfaces !== undefined) view.setUint8(4, Number(data.bNumInterfaces));
  // 0x05: u8
  if (data?.bConfigurationValue !== undefined) view.setUint8(5, Number(data.bConfigurationValue));
  // 0x06: u8
  if (data?.iConfiguration !== undefined) view.setUint8(6, Number(data.iConfiguration));
  // 0x07: u8
  if (data?.bmAttributes !== undefined) view.setUint8(7, Number(data.bmAttributes));
  // 0x08: u8
  if (data?.MaxPower !== undefined) view.setUint8(8, Number(data.MaxPower));
  // 0x09: pad7
  return buf;
}

export class USB_CONFIGURATION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get wTotalLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u8
  get bNumInterfaces(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bConfigurationValue(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get iConfiguration(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bmAttributes(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get MaxPower(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set wTotalLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u8
  set bNumInterfaces(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bConfigurationValue(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set iConfiguration(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bmAttributes(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set MaxPower(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Devices.Usb.USB_INTERFACE_ASSOCIATION_DESCRIPTOR (size: 8)
 */
export interface USB_INTERFACE_ASSOCIATION_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bFirstInterface: number;
  /** u8 */
  bInterfaceCount: number;
  /** u8 */
  bFunctionClass: number;
  /** u8 */
  bFunctionSubClass: number;
  /** u8 */
  bFunctionProtocol: number;
  /** u8 */
  iFunction: number;
}

export const sizeofUSB_INTERFACE_ASSOCIATION_DESCRIPTOR = 8;

export function allocUSB_INTERFACE_ASSOCIATION_DESCRIPTOR(data?: Partial<USB_INTERFACE_ASSOCIATION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_INTERFACE_ASSOCIATION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bFirstInterface !== undefined) view.setUint8(2, Number(data.bFirstInterface));
  // 0x03: u8
  if (data?.bInterfaceCount !== undefined) view.setUint8(3, Number(data.bInterfaceCount));
  // 0x04: u8
  if (data?.bFunctionClass !== undefined) view.setUint8(4, Number(data.bFunctionClass));
  // 0x05: u8
  if (data?.bFunctionSubClass !== undefined) view.setUint8(5, Number(data.bFunctionSubClass));
  // 0x06: u8
  if (data?.bFunctionProtocol !== undefined) view.setUint8(6, Number(data.bFunctionProtocol));
  // 0x07: u8
  if (data?.iFunction !== undefined) view.setUint8(7, Number(data.iFunction));
  return buf;
}

export class USB_INTERFACE_ASSOCIATION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bFirstInterface(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bInterfaceCount(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bFunctionClass(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bFunctionSubClass(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bFunctionProtocol(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get iFunction(): number {
    return this.view.getUint8(7);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bFirstInterface(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bInterfaceCount(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bFunctionClass(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bFunctionSubClass(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bFunctionProtocol(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set iFunction(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_INTERFACE_DESCRIPTOR (size: 16)
 */
export interface USB_INTERFACE_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bInterfaceNumber: number;
  /** u8 */
  bAlternateSetting: number;
  /** u8 */
  bNumEndpoints: number;
  /** u8 */
  bInterfaceClass: number;
  /** u8 */
  bInterfaceSubClass: number;
  /** u8 */
  bInterfaceProtocol: number;
  /** u8 */
  iInterface: number;
}

export const sizeofUSB_INTERFACE_DESCRIPTOR = 16;

export function allocUSB_INTERFACE_DESCRIPTOR(data?: Partial<USB_INTERFACE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_INTERFACE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bInterfaceNumber !== undefined) view.setUint8(2, Number(data.bInterfaceNumber));
  // 0x03: u8
  if (data?.bAlternateSetting !== undefined) view.setUint8(3, Number(data.bAlternateSetting));
  // 0x04: u8
  if (data?.bNumEndpoints !== undefined) view.setUint8(4, Number(data.bNumEndpoints));
  // 0x05: u8
  if (data?.bInterfaceClass !== undefined) view.setUint8(5, Number(data.bInterfaceClass));
  // 0x06: u8
  if (data?.bInterfaceSubClass !== undefined) view.setUint8(6, Number(data.bInterfaceSubClass));
  // 0x07: u8
  if (data?.bInterfaceProtocol !== undefined) view.setUint8(7, Number(data.bInterfaceProtocol));
  // 0x08: u8
  if (data?.iInterface !== undefined) view.setUint8(8, Number(data.iInterface));
  // 0x09: pad7
  return buf;
}

export class USB_INTERFACE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bInterfaceNumber(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bAlternateSetting(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bNumEndpoints(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bInterfaceClass(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bInterfaceSubClass(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bInterfaceProtocol(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get iInterface(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bInterfaceNumber(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bAlternateSetting(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bNumEndpoints(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bInterfaceClass(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bInterfaceSubClass(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bInterfaceProtocol(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set iInterface(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Devices.Usb.USB_ENDPOINT_DESCRIPTOR (size: 8)
 */
export interface USB_ENDPOINT_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bEndpointAddress: number;
  /** u8 */
  bmAttributes: number;
  /** u16 */
  wMaxPacketSize: number;
  /** u8 */
  bInterval: number;
}

export const sizeofUSB_ENDPOINT_DESCRIPTOR = 8;

export function allocUSB_ENDPOINT_DESCRIPTOR(data?: Partial<USB_ENDPOINT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_ENDPOINT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bEndpointAddress !== undefined) view.setUint8(2, Number(data.bEndpointAddress));
  // 0x03: u8
  if (data?.bmAttributes !== undefined) view.setUint8(3, Number(data.bmAttributes));
  // 0x04: u16
  if (data?.wMaxPacketSize !== undefined) view.setUint16(4, Number(data.wMaxPacketSize), true);
  // 0x06: u8
  if (data?.bInterval !== undefined) view.setUint8(6, Number(data.bInterval));
  // 0x07: pad1
  return buf;
}

export class USB_ENDPOINT_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bEndpointAddress(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bmAttributes(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u16
  get wMaxPacketSize(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u8
  get bInterval(): number {
    return this.view.getUint8(6);
  }

  // 0x07: pad1

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bEndpointAddress(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bmAttributes(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u16
  set wMaxPacketSize(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u8
  set bInterval(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: pad1
}

/**
 * Windows.Win32.Devices.Usb.USB_HIGH_SPEED_MAXPACKET (size: 8)
 */
export interface USB_HIGH_SPEED_MAXPACKET {
  /** u16 */
  us: number;
}

export const sizeofUSB_HIGH_SPEED_MAXPACKET = 8;

export function allocUSB_HIGH_SPEED_MAXPACKET(data?: Partial<USB_HIGH_SPEED_MAXPACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_HIGH_SPEED_MAXPACKET);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.us !== undefined) view.setUint16(0, Number(data.us), true);
  // 0x02: pad6
  return buf;
}

export class USB_HIGH_SPEED_MAXPACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get us(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set us(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_STRING_DESCRIPTOR (size: 16)
 */
export interface USB_STRING_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** array */
  bString: Deno.PointerValue | null;
}

export const sizeofUSB_STRING_DESCRIPTOR = 16;

export function allocUSB_STRING_DESCRIPTOR(data?: Partial<USB_STRING_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_STRING_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.bString !== undefined) view.setBigUint64(8, data.bString === null ? 0n : BigInt(util.toPointer(data.bString)), true);
  return buf;
}

export class USB_STRING_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get bString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set bString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR (size: 24)
 */
export interface USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bMaxBurst: number;
  /** _bmAttributes_e__Union */
  bmAttributes: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wBytesPerInterval: number;
}

export const sizeofUSB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR = 24;

export function allocUSB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR(data?: Partial<USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bMaxBurst !== undefined) view.setUint8(2, Number(data.bMaxBurst));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.bmAttributes !== undefined) view.setBigUint64(8, data.bmAttributes === null ? 0n : BigInt(util.toPointer(data.bmAttributes)), true);
  // 0x10: u16
  if (data?.wBytesPerInterval !== undefined) view.setUint16(16, Number(data.wBytesPerInterval), true);
  // 0x12: pad6
  return buf;
}

export class USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bMaxBurst(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get bmAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get wBytesPerInterval(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bMaxBurst(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set bmAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set wBytesPerInterval(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Devices.Usb.USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR (size: 8)
 */
export interface USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u16 */
  wReserved: number;
  /** u32 */
  dwBytesPerInterval: number;
}

export const sizeofUSB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR = 8;

export function allocUSB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR(data?: Partial<USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u16
  if (data?.wReserved !== undefined) view.setUint16(2, Number(data.wReserved), true);
  // 0x04: u32
  if (data?.dwBytesPerInterval !== undefined) view.setUint32(4, Number(data.dwBytesPerInterval), true);
  return buf;
}

export class USB_SUPERSPEEDPLUS_ISOCH_ENDPOINT_COMPANION_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get wReserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get dwBytesPerInterval(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set wReserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set dwBytesPerInterval(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_HUB_DESCRIPTOR (size: 16)
 */
export interface USB_HUB_DESCRIPTOR {
  /** u8 */
  bDescriptorLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bNumberOfPorts: number;
  /** u16 */
  wHubCharacteristics: number;
  /** u8 */
  bPowerOnToPowerGood: number;
  /** u8 */
  bHubControlCurrent: number;
  /** array */
  bRemoveAndPowerMask: Deno.PointerValue | null;
}

export const sizeofUSB_HUB_DESCRIPTOR = 16;

export function allocUSB_HUB_DESCRIPTOR(data?: Partial<USB_HUB_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_HUB_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bDescriptorLength !== undefined) view.setUint8(0, Number(data.bDescriptorLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bNumberOfPorts !== undefined) view.setUint8(2, Number(data.bNumberOfPorts));
  // 0x03: u16
  if (data?.wHubCharacteristics !== undefined) view.setUint16(3, Number(data.wHubCharacteristics), true);
  // 0x05: u8
  if (data?.bPowerOnToPowerGood !== undefined) view.setUint8(5, Number(data.bPowerOnToPowerGood));
  // 0x06: u8
  if (data?.bHubControlCurrent !== undefined) view.setUint8(6, Number(data.bHubControlCurrent));
  // 0x07: pad1
  // 0x08: pointer
  if (data?.bRemoveAndPowerMask !== undefined) view.setBigUint64(8, data.bRemoveAndPowerMask === null ? 0n : BigInt(util.toPointer(data.bRemoveAndPowerMask)), true);
  return buf;
}

export class USB_HUB_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bDescriptorLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bNumberOfPorts(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u16
  get wHubCharacteristics(): number {
    return this.view.getUint16(3, true);
  }

  // 0x05: u8
  get bPowerOnToPowerGood(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bHubControlCurrent(): number {
    return this.view.getUint8(6);
  }

  // 0x07: pad1

  // 0x08: pointer
  get bRemoveAndPowerMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bDescriptorLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bNumberOfPorts(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u16
  set wHubCharacteristics(value: number) {
    this.view.setUint16(3, value, true);
  }

  // 0x05: u8
  set bPowerOnToPowerGood(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bHubControlCurrent(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: pad1

  // 0x08: pointer
  set bRemoveAndPowerMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_30_HUB_DESCRIPTOR (size: 16)
 */
export interface USB_30_HUB_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bNumberOfPorts: number;
  /** u16 */
  wHubCharacteristics: number;
  /** u8 */
  bPowerOnToPowerGood: number;
  /** u8 */
  bHubControlCurrent: number;
  /** u8 */
  bHubHdrDecLat: number;
  /** u16 */
  wHubDelay: number;
  /** u16 */
  DeviceRemovable: number;
}

export const sizeofUSB_30_HUB_DESCRIPTOR = 16;

export function allocUSB_30_HUB_DESCRIPTOR(data?: Partial<USB_30_HUB_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_30_HUB_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bNumberOfPorts !== undefined) view.setUint8(2, Number(data.bNumberOfPorts));
  // 0x03: u16
  if (data?.wHubCharacteristics !== undefined) view.setUint16(3, Number(data.wHubCharacteristics), true);
  // 0x05: u8
  if (data?.bPowerOnToPowerGood !== undefined) view.setUint8(5, Number(data.bPowerOnToPowerGood));
  // 0x06: u8
  if (data?.bHubControlCurrent !== undefined) view.setUint8(6, Number(data.bHubControlCurrent));
  // 0x07: u8
  if (data?.bHubHdrDecLat !== undefined) view.setUint8(7, Number(data.bHubHdrDecLat));
  // 0x08: u16
  if (data?.wHubDelay !== undefined) view.setUint16(8, Number(data.wHubDelay), true);
  // 0x0a: u16
  if (data?.DeviceRemovable !== undefined) view.setUint16(10, Number(data.DeviceRemovable), true);
  // 0x0c: pad4
  return buf;
}

export class USB_30_HUB_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bNumberOfPorts(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u16
  get wHubCharacteristics(): number {
    return this.view.getUint16(3, true);
  }

  // 0x05: u8
  get bPowerOnToPowerGood(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bHubControlCurrent(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bHubHdrDecLat(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u16
  get wHubDelay(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get DeviceRemovable(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bNumberOfPorts(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u16
  set wHubCharacteristics(value: number) {
    this.view.setUint16(3, value, true);
  }

  // 0x05: u8
  set bPowerOnToPowerGood(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bHubControlCurrent(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bHubHdrDecLat(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u16
  set wHubDelay(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set DeviceRemovable(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb.USB_HUB_STATUS (size: 16)
 */
export interface USB_HUB_STATUS {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_HUB_STATUS = 16;

export function allocUSB_HUB_STATUS(data?: Partial<USB_HUB_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_HUB_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_HUB_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_HUB_CHANGE (size: 16)
 */
export interface USB_HUB_CHANGE {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_HUB_CHANGE = 16;

export function allocUSB_HUB_CHANGE(data?: Partial<USB_HUB_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_HUB_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_HUB_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_HUB_STATUS_AND_CHANGE (size: 16)
 */
export interface USB_HUB_STATUS_AND_CHANGE {
  /** u32 */
  AsUlong32: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_HUB_STATUS_AND_CHANGE = 16;

export function allocUSB_HUB_STATUS_AND_CHANGE(data?: Partial<USB_HUB_STATUS_AND_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_HUB_STATUS_AND_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AsUlong32 !== undefined) view.setUint32(0, Number(data.AsUlong32), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_HUB_STATUS_AND_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AsUlong32(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AsUlong32(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_20_PORT_STATUS (size: 16)
 */
export interface USB_20_PORT_STATUS {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_20_PORT_STATUS = 16;

export function allocUSB_20_PORT_STATUS(data?: Partial<USB_20_PORT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_20_PORT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_20_PORT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_20_PORT_CHANGE (size: 16)
 */
export interface USB_20_PORT_CHANGE {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_20_PORT_CHANGE = 16;

export function allocUSB_20_PORT_CHANGE(data?: Partial<USB_20_PORT_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_20_PORT_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_20_PORT_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_30_PORT_STATUS (size: 16)
 */
export interface USB_30_PORT_STATUS {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_30_PORT_STATUS = 16;

export function allocUSB_30_PORT_STATUS(data?: Partial<USB_30_PORT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_30_PORT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_30_PORT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_30_PORT_CHANGE (size: 16)
 */
export interface USB_30_PORT_CHANGE {
  /** u16 */
  AsUshort16: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_30_PORT_CHANGE = 16;

export function allocUSB_30_PORT_CHANGE(data?: Partial<USB_30_PORT_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_30_PORT_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_30_PORT_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_PORT_STATUS (size: 24)
 */
export interface USB_PORT_STATUS {
  /** u16 */
  AsUshort16: number;
  /** Windows.Win32.Devices.Usb.USB_20_PORT_STATUS */
  Usb20PortStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_30_PORT_STATUS */
  Usb30PortStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_PORT_STATUS = 24;

export function allocUSB_PORT_STATUS(data?: Partial<USB_PORT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_PORT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Usb20PortStatus !== undefined) view.setBigUint64(8, data.Usb20PortStatus === null ? 0n : BigInt(util.toPointer(data.Usb20PortStatus)), true);
  // 0x10: pointer
  if (data?.Usb30PortStatus !== undefined) view.setBigUint64(16, data.Usb30PortStatus === null ? 0n : BigInt(util.toPointer(data.Usb30PortStatus)), true);
  return buf;
}

export class USB_PORT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Usb20PortStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Usb30PortStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Usb20PortStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Usb30PortStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_PORT_CHANGE (size: 24)
 */
export interface USB_PORT_CHANGE {
  /** u16 */
  AsUshort16: number;
  /** Windows.Win32.Devices.Usb.USB_20_PORT_CHANGE */
  Usb20PortChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_30_PORT_CHANGE */
  Usb30PortChange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_PORT_CHANGE = 24;

export function allocUSB_PORT_CHANGE(data?: Partial<USB_PORT_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_PORT_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AsUshort16 !== undefined) view.setUint16(0, Number(data.AsUshort16), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Usb20PortChange !== undefined) view.setBigUint64(8, data.Usb20PortChange === null ? 0n : BigInt(util.toPointer(data.Usb20PortChange)), true);
  // 0x10: pointer
  if (data?.Usb30PortChange !== undefined) view.setBigUint64(16, data.Usb30PortChange === null ? 0n : BigInt(util.toPointer(data.Usb30PortChange)), true);
  return buf;
}

export class USB_PORT_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AsUshort16(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Usb20PortChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Usb30PortChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AsUshort16(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Usb20PortChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Usb30PortChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_PORT_EXT_STATUS (size: 16)
 */
export interface USB_PORT_EXT_STATUS {
  /** u32 */
  AsUlong32: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_PORT_EXT_STATUS = 16;

export function allocUSB_PORT_EXT_STATUS(data?: Partial<USB_PORT_EXT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_PORT_EXT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AsUlong32 !== undefined) view.setUint32(0, Number(data.AsUlong32), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_PORT_EXT_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AsUlong32(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AsUlong32(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_PORT_STATUS_AND_CHANGE (size: 16)
 */
export interface USB_PORT_STATUS_AND_CHANGE {
  /** u32 */
  AsUlong32: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_PORT_STATUS_AND_CHANGE = 16;

export function allocUSB_PORT_STATUS_AND_CHANGE(data?: Partial<USB_PORT_STATUS_AND_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_PORT_STATUS_AND_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AsUlong32 !== undefined) view.setUint32(0, Number(data.AsUlong32), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_PORT_STATUS_AND_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AsUlong32(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AsUlong32(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_PORT_EXT_STATUS_AND_CHANGE (size: 16)
 */
export interface USB_PORT_EXT_STATUS_AND_CHANGE {
  /** u64 */
  AsUlong64: Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_PORT_EXT_STATUS_AND_CHANGE = 16;

export function allocUSB_PORT_EXT_STATUS_AND_CHANGE(data?: Partial<USB_PORT_EXT_STATUS_AND_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_PORT_EXT_STATUS_AND_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AsUlong64 !== undefined) view.setBigUint64(0, BigInt(data.AsUlong64), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_PORT_EXT_STATUS_AND_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get AsUlong64(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set AsUlong64(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_HUB_30_PORT_REMOTE_WAKE_MASK (size: 16)
 */
export interface USB_HUB_30_PORT_REMOTE_WAKE_MASK {
  /** u8 */
  AsUchar8: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_HUB_30_PORT_REMOTE_WAKE_MASK = 16;

export function allocUSB_HUB_30_PORT_REMOTE_WAKE_MASK(data?: Partial<USB_HUB_30_PORT_REMOTE_WAKE_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_HUB_30_PORT_REMOTE_WAKE_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.AsUchar8 !== undefined) view.setUint8(0, Number(data.AsUchar8));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_HUB_30_PORT_REMOTE_WAKE_MASKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get AsUchar8(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set AsUchar8(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_FUNCTION_SUSPEND_OPTIONS (size: 16)
 */
export interface USB_FUNCTION_SUSPEND_OPTIONS {
  /** u8 */
  AsUchar: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_FUNCTION_SUSPEND_OPTIONS = 16;

export function allocUSB_FUNCTION_SUSPEND_OPTIONS(data?: Partial<USB_FUNCTION_SUSPEND_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_FUNCTION_SUSPEND_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.AsUchar !== undefined) view.setUint8(0, Number(data.AsUchar));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class USB_FUNCTION_SUSPEND_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get AsUchar(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set AsUchar(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_CONFIGURATION_POWER_DESCRIPTOR (size: 32)
 */
export interface USB_CONFIGURATION_POWER_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** array */
  SelfPowerConsumedD0: Deno.PointerValue | null;
  /** u8 */
  bPowerSummaryId: number;
  /** u8 */
  bBusPowerSavingD1: number;
  /** u8 */
  bSelfPowerSavingD1: number;
  /** u8 */
  bBusPowerSavingD2: number;
  /** u8 */
  bSelfPowerSavingD2: number;
  /** u8 */
  bBusPowerSavingD3: number;
  /** u8 */
  bSelfPowerSavingD3: number;
  /** u16 */
  TransitionTimeFromD1: number;
  /** u16 */
  TransitionTimeFromD2: number;
  /** u16 */
  TransitionTimeFromD3: number;
}

export const sizeofUSB_CONFIGURATION_POWER_DESCRIPTOR = 32;

export function allocUSB_CONFIGURATION_POWER_DESCRIPTOR(data?: Partial<USB_CONFIGURATION_POWER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_CONFIGURATION_POWER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.SelfPowerConsumedD0 !== undefined) view.setBigUint64(8, data.SelfPowerConsumedD0 === null ? 0n : BigInt(util.toPointer(data.SelfPowerConsumedD0)), true);
  // 0x10: u8
  if (data?.bPowerSummaryId !== undefined) view.setUint8(16, Number(data.bPowerSummaryId));
  // 0x11: u8
  if (data?.bBusPowerSavingD1 !== undefined) view.setUint8(17, Number(data.bBusPowerSavingD1));
  // 0x12: u8
  if (data?.bSelfPowerSavingD1 !== undefined) view.setUint8(18, Number(data.bSelfPowerSavingD1));
  // 0x13: u8
  if (data?.bBusPowerSavingD2 !== undefined) view.setUint8(19, Number(data.bBusPowerSavingD2));
  // 0x14: u8
  if (data?.bSelfPowerSavingD2 !== undefined) view.setUint8(20, Number(data.bSelfPowerSavingD2));
  // 0x15: u8
  if (data?.bBusPowerSavingD3 !== undefined) view.setUint8(21, Number(data.bBusPowerSavingD3));
  // 0x16: u8
  if (data?.bSelfPowerSavingD3 !== undefined) view.setUint8(22, Number(data.bSelfPowerSavingD3));
  // 0x17: u16
  if (data?.TransitionTimeFromD1 !== undefined) view.setUint16(23, Number(data.TransitionTimeFromD1), true);
  // 0x19: u16
  if (data?.TransitionTimeFromD2 !== undefined) view.setUint16(25, Number(data.TransitionTimeFromD2), true);
  // 0x1b: u16
  if (data?.TransitionTimeFromD3 !== undefined) view.setUint16(27, Number(data.TransitionTimeFromD3), true);
  // 0x1d: pad3
  return buf;
}

export class USB_CONFIGURATION_POWER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get SelfPowerConsumedD0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get bPowerSummaryId(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get bBusPowerSavingD1(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u8
  get bSelfPowerSavingD1(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get bBusPowerSavingD2(): number {
    return this.view.getUint8(19);
  }

  // 0x14: u8
  get bSelfPowerSavingD2(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get bBusPowerSavingD3(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get bSelfPowerSavingD3(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u16
  get TransitionTimeFromD1(): number {
    return this.view.getUint16(23, true);
  }

  // 0x19: u16
  get TransitionTimeFromD2(): number {
    return this.view.getUint16(25, true);
  }

  // 0x1b: u16
  get TransitionTimeFromD3(): number {
    return this.view.getUint16(27, true);
  }

  // 0x1d: pad3

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set SelfPowerConsumedD0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set bPowerSummaryId(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set bBusPowerSavingD1(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u8
  set bSelfPowerSavingD1(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set bBusPowerSavingD2(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: u8
  set bSelfPowerSavingD2(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set bBusPowerSavingD3(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set bSelfPowerSavingD3(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u16
  set TransitionTimeFromD1(value: number) {
    this.view.setUint16(23, value, true);
  }

  // 0x19: u16
  set TransitionTimeFromD2(value: number) {
    this.view.setUint16(25, value, true);
  }

  // 0x1b: u16
  set TransitionTimeFromD3(value: number) {
    this.view.setUint16(27, value, true);
  }

  // 0x1d: pad3
}

/**
 * Windows.Win32.Devices.Usb.USB_INTERFACE_POWER_DESCRIPTOR (size: 16)
 */
export interface USB_INTERFACE_POWER_DESCRIPTOR {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** u8 */
  bmCapabilitiesFlags: number;
  /** u8 */
  bBusPowerSavingD1: number;
  /** u8 */
  bSelfPowerSavingD1: number;
  /** u8 */
  bBusPowerSavingD2: number;
  /** u8 */
  bSelfPowerSavingD2: number;
  /** u8 */
  bBusPowerSavingD3: number;
  /** u8 */
  bSelfPowerSavingD3: number;
  /** u16 */
  TransitionTimeFromD1: number;
  /** u16 */
  TransitionTimeFromD2: number;
  /** u16 */
  TransitionTimeFromD3: number;
}

export const sizeofUSB_INTERFACE_POWER_DESCRIPTOR = 16;

export function allocUSB_INTERFACE_POWER_DESCRIPTOR(data?: Partial<USB_INTERFACE_POWER_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_INTERFACE_POWER_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: u8
  if (data?.bmCapabilitiesFlags !== undefined) view.setUint8(2, Number(data.bmCapabilitiesFlags));
  // 0x03: u8
  if (data?.bBusPowerSavingD1 !== undefined) view.setUint8(3, Number(data.bBusPowerSavingD1));
  // 0x04: u8
  if (data?.bSelfPowerSavingD1 !== undefined) view.setUint8(4, Number(data.bSelfPowerSavingD1));
  // 0x05: u8
  if (data?.bBusPowerSavingD2 !== undefined) view.setUint8(5, Number(data.bBusPowerSavingD2));
  // 0x06: u8
  if (data?.bSelfPowerSavingD2 !== undefined) view.setUint8(6, Number(data.bSelfPowerSavingD2));
  // 0x07: u8
  if (data?.bBusPowerSavingD3 !== undefined) view.setUint8(7, Number(data.bBusPowerSavingD3));
  // 0x08: u8
  if (data?.bSelfPowerSavingD3 !== undefined) view.setUint8(8, Number(data.bSelfPowerSavingD3));
  // 0x09: u16
  if (data?.TransitionTimeFromD1 !== undefined) view.setUint16(9, Number(data.TransitionTimeFromD1), true);
  // 0x0b: u16
  if (data?.TransitionTimeFromD2 !== undefined) view.setUint16(11, Number(data.TransitionTimeFromD2), true);
  // 0x0d: u16
  if (data?.TransitionTimeFromD3 !== undefined) view.setUint16(13, Number(data.TransitionTimeFromD3), true);
  // 0x0f: pad1
  return buf;
}

export class USB_INTERFACE_POWER_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bmCapabilitiesFlags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bBusPowerSavingD1(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bSelfPowerSavingD1(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get bBusPowerSavingD2(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get bSelfPowerSavingD2(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get bBusPowerSavingD3(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u8
  get bSelfPowerSavingD3(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u16
  get TransitionTimeFromD1(): number {
    return this.view.getUint16(9, true);
  }

  // 0x0b: u16
  get TransitionTimeFromD2(): number {
    return this.view.getUint16(11, true);
  }

  // 0x0d: u16
  get TransitionTimeFromD3(): number {
    return this.view.getUint16(13, true);
  }

  // 0x0f: pad1

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bmCapabilitiesFlags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bBusPowerSavingD1(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bSelfPowerSavingD1(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set bBusPowerSavingD2(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set bSelfPowerSavingD2(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set bBusPowerSavingD3(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u8
  set bSelfPowerSavingD3(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u16
  set TransitionTimeFromD1(value: number) {
    this.view.setUint16(9, value, true);
  }

  // 0x0b: u16
  set TransitionTimeFromD2(value: number) {
    this.view.setUint16(11, value, true);
  }

  // 0x0d: u16
  set TransitionTimeFromD3(value: number) {
    this.view.setUint16(13, value, true);
  }

  // 0x0f: pad1
}

/**
 * Windows.Win32.Devices.Usb.USBD_VERSION_INFORMATION (size: 8)
 */
export interface USBD_VERSION_INFORMATION {
  /** u32 */
  USBDI_Version: number;
  /** u32 */
  Supported_USB_Version: number;
}

export const sizeofUSBD_VERSION_INFORMATION = 8;

export function allocUSBD_VERSION_INFORMATION(data?: Partial<USBD_VERSION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_VERSION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.USBDI_Version !== undefined) view.setUint32(0, Number(data.USBDI_Version), true);
  // 0x04: u32
  if (data?.Supported_USB_Version !== undefined) view.setUint32(4, Number(data.Supported_USB_Version), true);
  return buf;
}

export class USBD_VERSION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get USBDI_Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Supported_USB_Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set USBDI_Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Supported_USB_Version(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBD_DEVICE_INFORMATION (size: 24)
 */
export interface USBD_DEVICE_INFORMATION {
  /** u32 */
  OffsetNext: number;
  /** ptr */
  UsbdDeviceHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb.USB_DEVICE_DESCRIPTOR */
  DeviceDescriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBD_DEVICE_INFORMATION = 24;

export function allocUSBD_DEVICE_INFORMATION(data?: Partial<USBD_DEVICE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_DEVICE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OffsetNext !== undefined) view.setUint32(0, Number(data.OffsetNext), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UsbdDeviceHandle !== undefined) view.setBigUint64(8, data.UsbdDeviceHandle === null ? 0n : BigInt(util.toPointer(data.UsbdDeviceHandle)), true);
  // 0x10: pointer
  if (data?.DeviceDescriptor !== undefined) view.setBigUint64(16, data.DeviceDescriptor === null ? 0n : BigInt(util.toPointer(data.DeviceDescriptor)), true);
  return buf;
}

export class USBD_DEVICE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OffsetNext(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UsbdDeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DeviceDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set OffsetNext(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UsbdDeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DeviceDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBD_PIPE_INFORMATION (size: 24)
 */
export interface USBD_PIPE_INFORMATION {
  /** u16 */
  MaximumPacketSize: number;
  /** u8 */
  EndpointAddress: number;
  /** u8 */
  Interval: number;
  /** Windows.Win32.Devices.Usb.USBD_PIPE_TYPE */
  PipeType: USBD_PIPE_TYPE;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaximumTransferSize: number;
  /** u32 */
  PipeFlags: number;
}

export const sizeofUSBD_PIPE_INFORMATION = 24;

export function allocUSBD_PIPE_INFORMATION(data?: Partial<USBD_PIPE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_PIPE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MaximumPacketSize !== undefined) view.setUint16(0, Number(data.MaximumPacketSize), true);
  // 0x02: u8
  if (data?.EndpointAddress !== undefined) view.setUint8(2, Number(data.EndpointAddress));
  // 0x03: u8
  if (data?.Interval !== undefined) view.setUint8(3, Number(data.Interval));
  // 0x04: i32
  if (data?.PipeType !== undefined) view.setInt32(4, Number(data.PipeType), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.MaximumTransferSize !== undefined) view.setUint32(16, Number(data.MaximumTransferSize), true);
  // 0x14: u32
  if (data?.PipeFlags !== undefined) view.setUint32(20, Number(data.PipeFlags), true);
  return buf;
}

export class USBD_PIPE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MaximumPacketSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get EndpointAddress(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Interval(): number {
    return this.view.getUint8(3);
  }

  // 0x04: i32
  get PipeType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get MaximumTransferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PipeFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u16
  set MaximumPacketSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set EndpointAddress(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Interval(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: i32
  set PipeType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set MaximumTransferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PipeFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBD_ENDPOINT_OFFLOAD_INFORMATION (size: 88)
 */
export interface USBD_ENDPOINT_OFFLOAD_INFORMATION {
  /** u32 */
  Size: number;
  /** u16 */
  EndpointAddress: number;
  /** u32 */
  ResourceId: number;
  /** Windows.Win32.Devices.Usb.USBD_ENDPOINT_OFFLOAD_MODE */
  Mode: USBD_ENDPOINT_OFFLOAD_MODE;
  /** u32 */
  _bitfield1: number;
  /** u32 */
  _bitfield2: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TransferSegmentLA: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  TransferSegmentVA: Deno.PointerValue | Uint8Array | null;
  /** usize */
  TransferRingSize: Deno.PointerValue;
  /** u32 */
  TransferRingInitialCycleBit: number;
  /** u32 */
  MessageNumber: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EventRingSegmentLA: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  EventRingSegmentVA: Deno.PointerValue | Uint8Array | null;
  /** usize */
  EventRingSize: Deno.PointerValue;
  /** u32 */
  EventRingInitialCycleBit: number;
}

export const sizeofUSBD_ENDPOINT_OFFLOAD_INFORMATION = 88;

export function allocUSBD_ENDPOINT_OFFLOAD_INFORMATION(data?: Partial<USBD_ENDPOINT_OFFLOAD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_ENDPOINT_OFFLOAD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u16
  if (data?.EndpointAddress !== undefined) view.setUint16(4, Number(data.EndpointAddress), true);
  // 0x06: u32
  if (data?.ResourceId !== undefined) view.setUint32(6, Number(data.ResourceId), true);
  // 0x0a: i32
  if (data?.Mode !== undefined) view.setInt32(10, Number(data.Mode), true);
  // 0x0e: u32
  if (data?._bitfield1 !== undefined) view.setUint32(14, Number(data._bitfield1), true);
  // 0x12: u32
  if (data?._bitfield2 !== undefined) view.setUint32(18, Number(data._bitfield2), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.TransferSegmentLA !== undefined) view.setBigUint64(24, data.TransferSegmentLA === null ? 0n : BigInt(util.toPointer(data.TransferSegmentLA)), true);
  // 0x20: pointer
  if (data?.TransferSegmentVA !== undefined) view.setBigUint64(32, data.TransferSegmentVA === null ? 0n : BigInt(util.toPointer(data.TransferSegmentVA)), true);
  // 0x28: usize
  if (data?.TransferRingSize !== undefined) view.setBigUint64(40, BigInt(data.TransferRingSize), true);
  // 0x30: u32
  if (data?.TransferRingInitialCycleBit !== undefined) view.setUint32(48, Number(data.TransferRingInitialCycleBit), true);
  // 0x34: u32
  if (data?.MessageNumber !== undefined) view.setUint32(52, Number(data.MessageNumber), true);
  // 0x38: pointer
  if (data?.EventRingSegmentLA !== undefined) view.setBigUint64(56, data.EventRingSegmentLA === null ? 0n : BigInt(util.toPointer(data.EventRingSegmentLA)), true);
  // 0x40: pointer
  if (data?.EventRingSegmentVA !== undefined) view.setBigUint64(64, data.EventRingSegmentVA === null ? 0n : BigInt(util.toPointer(data.EventRingSegmentVA)), true);
  // 0x48: usize
  if (data?.EventRingSize !== undefined) view.setBigUint64(72, BigInt(data.EventRingSize), true);
  // 0x50: u32
  if (data?.EventRingInitialCycleBit !== undefined) view.setUint32(80, Number(data.EventRingInitialCycleBit), true);
  // 0x54: pad4
  return buf;
}

export class USBD_ENDPOINT_OFFLOAD_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get EndpointAddress(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get ResourceId(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: i32
  get Mode(): number {
    return this.view.getInt32(10, true);
  }

  // 0x0e: u32
  get _bitfield1(): number {
    return this.view.getUint32(14, true);
  }

  // 0x12: u32
  get _bitfield2(): number {
    return this.view.getUint32(18, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  get TransferSegmentLA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferSegmentVA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: usize
  get TransferRingSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get TransferRingInitialCycleBit(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get MessageNumber(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get EventRingSegmentLA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get EventRingSegmentVA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: usize
  get EventRingSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get EventRingInitialCycleBit(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set EndpointAddress(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set ResourceId(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: i32
  set Mode(value: number) {
    this.view.setInt32(10, value, true);
  }

  // 0x0e: u32
  set _bitfield1(value: number) {
    this.view.setUint32(14, value, true);
  }

  // 0x12: u32
  set _bitfield2(value: number) {
    this.view.setUint32(18, value, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  set TransferSegmentLA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferSegmentVA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: usize
  set TransferRingSize(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set TransferRingInitialCycleBit(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set MessageNumber(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set EventRingSegmentLA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set EventRingSegmentVA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: usize
  set EventRingSize(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set EventRingInitialCycleBit(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBD_INTERFACE_INFORMATION (size: 32)
 */
export interface USBD_INTERFACE_INFORMATION {
  /** u16 */
  Length: number;
  /** u8 */
  InterfaceNumber: number;
  /** u8 */
  AlternateSetting: number;
  /** u8 */
  Class: number;
  /** u8 */
  SubClass: number;
  /** u8 */
  Protocol: number;
  /** u8 */
  Reserved: number;
  /** ptr */
  InterfaceHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfPipes: number;
  /** array */
  Pipes: Deno.PointerValue | null;
}

export const sizeofUSBD_INTERFACE_INFORMATION = 32;

export function allocUSBD_INTERFACE_INFORMATION(data?: Partial<USBD_INTERFACE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_INTERFACE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u8
  if (data?.InterfaceNumber !== undefined) view.setUint8(2, Number(data.InterfaceNumber));
  // 0x03: u8
  if (data?.AlternateSetting !== undefined) view.setUint8(3, Number(data.AlternateSetting));
  // 0x04: u8
  if (data?.Class !== undefined) view.setUint8(4, Number(data.Class));
  // 0x05: u8
  if (data?.SubClass !== undefined) view.setUint8(5, Number(data.SubClass));
  // 0x06: u8
  if (data?.Protocol !== undefined) view.setUint8(6, Number(data.Protocol));
  // 0x07: u8
  if (data?.Reserved !== undefined) view.setUint8(7, Number(data.Reserved));
  // 0x08: pointer
  if (data?.InterfaceHandle !== undefined) view.setBigUint64(8, data.InterfaceHandle === null ? 0n : BigInt(util.toPointer(data.InterfaceHandle)), true);
  // 0x10: u32
  if (data?.NumberOfPipes !== undefined) view.setUint32(16, Number(data.NumberOfPipes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Pipes !== undefined) view.setBigUint64(24, data.Pipes === null ? 0n : BigInt(util.toPointer(data.Pipes)), true);
  return buf;
}

export class USBD_INTERFACE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get InterfaceNumber(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get AlternateSetting(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get Class(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get SubClass(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get Protocol(): number {
    return this.view.getUint8(6);
  }

  // 0x07: u8
  get Reserved(): number {
    return this.view.getUint8(7);
  }

  // 0x08: pointer
  get InterfaceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumberOfPipes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Pipes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set InterfaceNumber(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set AlternateSetting(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set Class(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set SubClass(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set Protocol(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: u8
  set Reserved(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: pointer
  set InterfaceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumberOfPipes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Pipes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_HCD_AREA (size: 8)
 */
export interface _URB_HCD_AREA {
  /** array */
  Reserved8: Deno.PointerValue | null;
}

export const sizeof_URB_HCD_AREA = 8;

export function alloc_URB_HCD_AREA(data?: Partial<_URB_HCD_AREA>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_HCD_AREA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved8 !== undefined) view.setBigUint64(0, data.Reserved8 === null ? 0n : BigInt(util.toPointer(data.Reserved8)), true);
  return buf;
}

export class _URB_HCD_AREAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved8(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Reserved8(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_HEADER (size: 24)
 */
export interface _URB_HEADER {
  /** u16 */
  Length: number;
  /** u16 */
  Function: number;
  /** i32 */
  Status: number;
  /** ptr */
  UsbdDeviceHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UsbdFlags: number;
}

export const sizeof_URB_HEADER = 24;

export function alloc_URB_HEADER(data?: Partial<_URB_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.Function !== undefined) view.setUint16(2, Number(data.Function), true);
  // 0x04: i32
  if (data?.Status !== undefined) view.setInt32(4, Number(data.Status), true);
  // 0x08: pointer
  if (data?.UsbdDeviceHandle !== undefined) view.setBigUint64(8, data.UsbdDeviceHandle === null ? 0n : BigInt(util.toPointer(data.UsbdDeviceHandle)), true);
  // 0x10: u32
  if (data?.UsbdFlags !== undefined) view.setUint32(16, Number(data.UsbdFlags), true);
  // 0x14: pad4
  return buf;
}

export class _URB_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Function(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get Status(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get UsbdDeviceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get UsbdFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Function(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set Status(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set UsbdDeviceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set UsbdFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_SELECT_INTERFACE (size: 24)
 */
export interface _URB_SELECT_INTERFACE {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ConfigurationHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb.USBD_INTERFACE_INFORMATION */
  Interface: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_URB_SELECT_INTERFACE = 24;

export function alloc_URB_SELECT_INTERFACE(data?: Partial<_URB_SELECT_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_SELECT_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.ConfigurationHandle !== undefined) view.setBigUint64(8, data.ConfigurationHandle === null ? 0n : BigInt(util.toPointer(data.ConfigurationHandle)), true);
  // 0x10: pointer
  if (data?.Interface !== undefined) view.setBigUint64(16, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  return buf;
}

export class _URB_SELECT_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ConfigurationHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Interface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ConfigurationHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Interface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_SELECT_CONFIGURATION (size: 32)
 */
export interface _URB_SELECT_CONFIGURATION {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ConfigurationDescriptor: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ConfigurationHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb.USBD_INTERFACE_INFORMATION */
  Interface: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_URB_SELECT_CONFIGURATION = 32;

export function alloc_URB_SELECT_CONFIGURATION(data?: Partial<_URB_SELECT_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_SELECT_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.ConfigurationDescriptor !== undefined) view.setBigUint64(8, data.ConfigurationDescriptor === null ? 0n : BigInt(util.toPointer(data.ConfigurationDescriptor)), true);
  // 0x10: pointer
  if (data?.ConfigurationHandle !== undefined) view.setBigUint64(16, data.ConfigurationHandle === null ? 0n : BigInt(util.toPointer(data.ConfigurationHandle)), true);
  // 0x18: pointer
  if (data?.Interface !== undefined) view.setBigUint64(24, data.Interface === null ? 0n : BigInt(util.toPointer(data.Interface)), true);
  return buf;
}

export class _URB_SELECT_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ConfigurationDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ConfigurationHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Interface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ConfigurationDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ConfigurationHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Interface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_PIPE_REQUEST (size: 24)
 */
export interface _URB_PIPE_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved: number;
}

export const sizeof_URB_PIPE_REQUEST = 24;

export function alloc_URB_PIPE_REQUEST(data?: Partial<_URB_PIPE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_PIPE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.Reserved !== undefined) view.setUint32(16, Number(data.Reserved), true);
  // 0x14: pad4
  return buf;
}

export class _URB_PIPE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_FRAME_LENGTH_CONTROL (size: 8)
 */
export interface _URB_FRAME_LENGTH_CONTROL {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_URB_FRAME_LENGTH_CONTROL = 8;

export function alloc_URB_FRAME_LENGTH_CONTROL(data?: Partial<_URB_FRAME_LENGTH_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_FRAME_LENGTH_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  return buf;
}

export class _URB_FRAME_LENGTH_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_GET_FRAME_LENGTH (size: 16)
 */
export interface _URB_GET_FRAME_LENGTH {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FrameLength: number;
  /** u32 */
  FrameNumber: number;
}

export const sizeof_URB_GET_FRAME_LENGTH = 16;

export function alloc_URB_GET_FRAME_LENGTH(data?: Partial<_URB_GET_FRAME_LENGTH>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_GET_FRAME_LENGTH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: u32
  if (data?.FrameLength !== undefined) view.setUint32(8, Number(data.FrameLength), true);
  // 0x0c: u32
  if (data?.FrameNumber !== undefined) view.setUint32(12, Number(data.FrameNumber), true);
  return buf;
}

export class _URB_GET_FRAME_LENGTHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get FrameLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get FrameNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set FrameLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set FrameNumber(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_SET_FRAME_LENGTH (size: 16)
 */
export interface _URB_SET_FRAME_LENGTH {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  FrameLengthDelta: number;
}

export const sizeof_URB_SET_FRAME_LENGTH = 16;

export function alloc_URB_SET_FRAME_LENGTH(data?: Partial<_URB_SET_FRAME_LENGTH>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_SET_FRAME_LENGTH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: i32
  if (data?.FrameLengthDelta !== undefined) view.setInt32(8, Number(data.FrameLengthDelta), true);
  // 0x0c: pad4
  return buf;
}

export class _URB_SET_FRAME_LENGTHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get FrameLengthDelta(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set FrameLengthDelta(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_GET_CURRENT_FRAME_NUMBER (size: 16)
 */
export interface _URB_GET_CURRENT_FRAME_NUMBER {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FrameNumber: number;
}

export const sizeof_URB_GET_CURRENT_FRAME_NUMBER = 16;

export function alloc_URB_GET_CURRENT_FRAME_NUMBER(data?: Partial<_URB_GET_CURRENT_FRAME_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_GET_CURRENT_FRAME_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: u32
  if (data?.FrameNumber !== undefined) view.setUint32(8, Number(data.FrameNumber), true);
  // 0x0c: pad4
  return buf;
}

export class _URB_GET_CURRENT_FRAME_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get FrameNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set FrameNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_DESCRIPTOR_REQUEST (size: 64)
 */
export interface _URB_CONTROL_DESCRIPTOR_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved0: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved1: number;
  /** u8 */
  Index: number;
  /** u8 */
  DescriptorType: number;
  /** u16 */
  LanguageId: number;
  /** u16 */
  Reserved2: number;
}

export const sizeof_URB_CONTROL_DESCRIPTOR_REQUEST = 64;

export function alloc_URB_CONTROL_DESCRIPTOR_REQUEST(data?: Partial<_URB_CONTROL_DESCRIPTOR_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_DESCRIPTOR_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Reserved0 !== undefined) view.setUint32(16, Number(data.Reserved0), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: u16
  if (data?.Reserved1 !== undefined) view.setUint16(56, Number(data.Reserved1), true);
  // 0x3a: u8
  if (data?.Index !== undefined) view.setUint8(58, Number(data.Index));
  // 0x3b: u8
  if (data?.DescriptorType !== undefined) view.setUint8(59, Number(data.DescriptorType));
  // 0x3c: u16
  if (data?.LanguageId !== undefined) view.setUint16(60, Number(data.LanguageId), true);
  // 0x3e: u16
  if (data?.Reserved2 !== undefined) view.setUint16(62, Number(data.Reserved2), true);
  return buf;
}

export class _URB_CONTROL_DESCRIPTOR_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved0(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get Reserved1(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u8
  get Index(): number {
    return this.view.getUint8(58);
  }

  // 0x3b: u8
  get DescriptorType(): number {
    return this.view.getUint8(59);
  }

  // 0x3c: u16
  get LanguageId(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get Reserved2(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved0(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set Reserved1(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u8
  set Index(value: number) {
    this.view.setUint8(58, value);
  }

  // 0x3b: u8
  set DescriptorType(value: number) {
    this.view.setUint8(59, value);
  }

  // 0x3c: u16
  set LanguageId(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set Reserved2(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_GET_STATUS_REQUEST (size: 72)
 */
export interface _URB_CONTROL_GET_STATUS_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved0: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u16 */
  Index: number;
  /** u16 */
  Reserved2: number;
}

export const sizeof_URB_CONTROL_GET_STATUS_REQUEST = 72;

export function alloc_URB_CONTROL_GET_STATUS_REQUEST(data?: Partial<_URB_CONTROL_GET_STATUS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_GET_STATUS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Reserved0 !== undefined) view.setUint32(16, Number(data.Reserved0), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(56, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x40: u16
  if (data?.Index !== undefined) view.setUint16(64, Number(data.Index), true);
  // 0x42: u16
  if (data?.Reserved2 !== undefined) view.setUint16(66, Number(data.Reserved2), true);
  // 0x44: pad4
  return buf;
}

export class _URB_CONTROL_GET_STATUS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved0(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u16
  get Index(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: u16
  get Reserved2(): number {
    return this.view.getUint16(66, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved0(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u16
  set Index(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: u16
  set Reserved2(value: number) {
    this.view.setUint16(66, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_FEATURE_REQUEST (size: 64)
 */
export interface _URB_CONTROL_FEATURE_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved2: number;
  /** u32 */
  Reserved3: number;
  /** ptr */
  Reserved4: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved5: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Reserved0: number;
  /** u16 */
  FeatureSelector: number;
  /** u16 */
  Index: number;
  /** u16 */
  Reserved1: number;
}

export const sizeof_URB_CONTROL_FEATURE_REQUEST = 64;

export function alloc_URB_CONTROL_FEATURE_REQUEST(data?: Partial<_URB_CONTROL_FEATURE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_FEATURE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Reserved2 !== undefined) view.setUint32(16, Number(data.Reserved2), true);
  // 0x14: u32
  if (data?.Reserved3 !== undefined) view.setUint32(20, Number(data.Reserved3), true);
  // 0x18: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(24, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0x20: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(32, data.Reserved5 === null ? 0n : BigInt(util.toPointer(data.Reserved5)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: u16
  if (data?.Reserved0 !== undefined) view.setUint16(56, Number(data.Reserved0), true);
  // 0x3a: u16
  if (data?.FeatureSelector !== undefined) view.setUint16(58, Number(data.FeatureSelector), true);
  // 0x3c: u16
  if (data?.Index !== undefined) view.setUint16(60, Number(data.Index), true);
  // 0x3e: u16
  if (data?.Reserved1 !== undefined) view.setUint16(62, Number(data.Reserved1), true);
  return buf;
}

export class _URB_CONTROL_FEATURE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved2(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved3(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Reserved5(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get Reserved0(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get FeatureSelector(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get Index(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get Reserved1(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved2(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved3(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Reserved5(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set Reserved0(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set FeatureSelector(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set Index(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set Reserved1(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_VENDOR_OR_CLASS_REQUEST (size: 64)
 */
export interface _URB_CONTROL_VENDOR_OR_CLASS_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TransferFlags: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  RequestTypeReservedBits: number;
  /** u8 */
  Request: number;
  /** u16 */
  Value: number;
  /** u16 */
  Index: number;
  /** u16 */
  Reserved1: number;
}

export const sizeof_URB_CONTROL_VENDOR_OR_CLASS_REQUEST = 64;

export function alloc_URB_CONTROL_VENDOR_OR_CLASS_REQUEST(data?: Partial<_URB_CONTROL_VENDOR_OR_CLASS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_VENDOR_OR_CLASS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.TransferFlags !== undefined) view.setUint32(16, Number(data.TransferFlags), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: u8
  if (data?.RequestTypeReservedBits !== undefined) view.setUint8(56, Number(data.RequestTypeReservedBits));
  // 0x39: u8
  if (data?.Request !== undefined) view.setUint8(57, Number(data.Request));
  // 0x3a: u16
  if (data?.Value !== undefined) view.setUint16(58, Number(data.Value), true);
  // 0x3c: u16
  if (data?.Index !== undefined) view.setUint16(60, Number(data.Index), true);
  // 0x3e: u16
  if (data?.Reserved1 !== undefined) view.setUint16(62, Number(data.Reserved1), true);
  return buf;
}

export class _URB_CONTROL_VENDOR_OR_CLASS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TransferFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u8
  get RequestTypeReservedBits(): number {
    return this.view.getUint8(56);
  }

  // 0x39: u8
  get Request(): number {
    return this.view.getUint8(57);
  }

  // 0x3a: u16
  get Value(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: u16
  get Index(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get Reserved1(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TransferFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u8
  set RequestTypeReservedBits(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: u8
  set Request(value: number) {
    this.view.setUint8(57, value);
  }

  // 0x3a: u16
  set Value(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: u16
  set Index(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set Reserved1(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_GET_INTERFACE_REQUEST (size: 72)
 */
export interface _URB_CONTROL_GET_INTERFACE_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved0: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u16 */
  Interface: number;
  /** u16 */
  Reserved2: number;
}

export const sizeof_URB_CONTROL_GET_INTERFACE_REQUEST = 72;

export function alloc_URB_CONTROL_GET_INTERFACE_REQUEST(data?: Partial<_URB_CONTROL_GET_INTERFACE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_GET_INTERFACE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Reserved0 !== undefined) view.setUint32(16, Number(data.Reserved0), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(56, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x40: u16
  if (data?.Interface !== undefined) view.setUint16(64, Number(data.Interface), true);
  // 0x42: u16
  if (data?.Reserved2 !== undefined) view.setUint16(66, Number(data.Reserved2), true);
  // 0x44: pad4
  return buf;
}

export class _URB_CONTROL_GET_INTERFACE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved0(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u16
  get Interface(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: u16
  get Reserved2(): number {
    return this.view.getUint16(66, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved0(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u16
  set Interface(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: u16
  set Reserved2(value: number) {
    this.view.setUint16(66, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_GET_CONFIGURATION_REQUEST (size: 64)
 */
export interface _URB_CONTROL_GET_CONFIGURATION_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved0: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
}

export const sizeof_URB_CONTROL_GET_CONFIGURATION_REQUEST = 64;

export function alloc_URB_CONTROL_GET_CONFIGURATION_REQUEST(data?: Partial<_URB_CONTROL_GET_CONFIGURATION_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_GET_CONFIGURATION_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Reserved0 !== undefined) view.setUint32(16, Number(data.Reserved0), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(56, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  return buf;
}

export class _URB_CONTROL_GET_CONFIGURATION_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved0(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved0(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.OS_STRING (size: 32)
 */
export interface OS_STRING {
  /** u8 */
  bLength: number;
  /** u8 */
  bDescriptorType: number;
  /** array */
  MicrosoftString: Deno.PointerValue | null;
  /** u8 */
  bVendorCode: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOS_STRING = 32;

export function allocOS_STRING(data?: Partial<OS_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofOS_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bLength !== undefined) view.setUint8(0, Number(data.bLength));
  // 0x01: u8
  if (data?.bDescriptorType !== undefined) view.setUint8(1, Number(data.bDescriptorType));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.MicrosoftString !== undefined) view.setBigUint64(8, data.MicrosoftString === null ? 0n : BigInt(util.toPointer(data.MicrosoftString)), true);
  // 0x10: u8
  if (data?.bVendorCode !== undefined) view.setUint8(16, Number(data.bVendorCode));
  // 0x11: pad7
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class OS_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bLength(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bDescriptorType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get MicrosoftString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get bVendorCode(): number {
    return this.view.getUint8(16);
  }

  // 0x11: pad7

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set bLength(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bDescriptorType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set MicrosoftString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set bVendorCode(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: pad7

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_OS_FEATURE_DESCRIPTOR_REQUEST (size: 64)
 */
export interface _URB_OS_FEATURE_DESCRIPTOR_REQUEST {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Reserved0: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  _bitfield: number;
  /** u8 */
  Reserved2: number;
  /** u8 */
  InterfaceNumber: number;
  /** u8 */
  MS_PageIndex: number;
  /** u16 */
  MS_FeatureDescriptorIndex: number;
  /** u16 */
  Reserved3: number;
}

export const sizeof_URB_OS_FEATURE_DESCRIPTOR_REQUEST = 64;

export function alloc_URB_OS_FEATURE_DESCRIPTOR_REQUEST(data?: Partial<_URB_OS_FEATURE_DESCRIPTOR_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_OS_FEATURE_DESCRIPTOR_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.Reserved0 !== undefined) view.setUint32(16, Number(data.Reserved0), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: u8
  if (data?._bitfield !== undefined) view.setUint8(56, Number(data._bitfield));
  // 0x39: u8
  if (data?.Reserved2 !== undefined) view.setUint8(57, Number(data.Reserved2));
  // 0x3a: u8
  if (data?.InterfaceNumber !== undefined) view.setUint8(58, Number(data.InterfaceNumber));
  // 0x3b: u8
  if (data?.MS_PageIndex !== undefined) view.setUint8(59, Number(data.MS_PageIndex));
  // 0x3c: u16
  if (data?.MS_FeatureDescriptorIndex !== undefined) view.setUint16(60, Number(data.MS_FeatureDescriptorIndex), true);
  // 0x3e: u16
  if (data?.Reserved3 !== undefined) view.setUint16(62, Number(data.Reserved3), true);
  return buf;
}

export class _URB_OS_FEATURE_DESCRIPTOR_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Reserved0(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u8
  get _bitfield(): number {
    return this.view.getUint8(56);
  }

  // 0x39: u8
  get Reserved2(): number {
    return this.view.getUint8(57);
  }

  // 0x3a: u8
  get InterfaceNumber(): number {
    return this.view.getUint8(58);
  }

  // 0x3b: u8
  get MS_PageIndex(): number {
    return this.view.getUint8(59);
  }

  // 0x3c: u16
  get MS_FeatureDescriptorIndex(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get Reserved3(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Reserved0(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u8
  set _bitfield(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: u8
  set Reserved2(value: number) {
    this.view.setUint8(57, value);
  }

  // 0x3a: u8
  set InterfaceNumber(value: number) {
    this.view.setUint8(58, value);
  }

  // 0x3b: u8
  set MS_PageIndex(value: number) {
    this.view.setUint8(59, value);
  }

  // 0x3c: u16
  set MS_FeatureDescriptorIndex(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set Reserved3(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_TRANSFER (size: 64)
 */
export interface _URB_CONTROL_TRANSFER {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TransferFlags: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** array */
  SetupPacket: Deno.PointerValue | null;
}

export const sizeof_URB_CONTROL_TRANSFER = 64;

export function alloc_URB_CONTROL_TRANSFER(data?: Partial<_URB_CONTROL_TRANSFER>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_TRANSFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.TransferFlags !== undefined) view.setUint32(16, Number(data.TransferFlags), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: pointer
  if (data?.SetupPacket !== undefined) view.setBigUint64(56, data.SetupPacket === null ? 0n : BigInt(util.toPointer(data.SetupPacket)), true);
  return buf;
}

export class _URB_CONTROL_TRANSFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TransferFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get SetupPacket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TransferFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set SetupPacket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_CONTROL_TRANSFER_EX (size: 64)
 */
export interface _URB_CONTROL_TRANSFER_EX {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TransferFlags: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Timeout: number;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** array */
  SetupPacket: Deno.PointerValue | null;
}

export const sizeof_URB_CONTROL_TRANSFER_EX = 64;

export function alloc_URB_CONTROL_TRANSFER_EX(data?: Partial<_URB_CONTROL_TRANSFER_EX>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_CONTROL_TRANSFER_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.TransferFlags !== undefined) view.setUint32(16, Number(data.TransferFlags), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: u32
  if (data?.Timeout !== undefined) view.setUint32(40, Number(data.Timeout), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: pointer
  if (data?.SetupPacket !== undefined) view.setBigUint64(56, data.SetupPacket === null ? 0n : BigInt(util.toPointer(data.SetupPacket)), true);
  return buf;
}

export class _URB_CONTROL_TRANSFER_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TransferFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Timeout(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get SetupPacket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TransferFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Timeout(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set SetupPacket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_BULK_OR_INTERRUPT_TRANSFER (size: 56)
 */
export interface _URB_BULK_OR_INTERRUPT_TRANSFER {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TransferFlags: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_URB_BULK_OR_INTERRUPT_TRANSFER = 56;

export function alloc_URB_BULK_OR_INTERRUPT_TRANSFER(data?: Partial<_URB_BULK_OR_INTERRUPT_TRANSFER>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_BULK_OR_INTERRUPT_TRANSFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.TransferFlags !== undefined) view.setUint32(16, Number(data.TransferFlags), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  return buf;
}

export class _URB_BULK_OR_INTERRUPT_TRANSFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TransferFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TransferFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBD_ISO_PACKET_DESCRIPTOR (size: 16)
 */
export interface USBD_ISO_PACKET_DESCRIPTOR {
  /** u32 */
  Offset: number;
  /** u32 */
  Length: number;
  /** i32 */
  Status: number;
}

export const sizeofUSBD_ISO_PACKET_DESCRIPTOR = 16;

export function allocUSBD_ISO_PACKET_DESCRIPTOR(data?: Partial<USBD_ISO_PACKET_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_ISO_PACKET_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: i32
  if (data?.Status !== undefined) view.setInt32(8, Number(data.Status), true);
  // 0x0c: pad4
  return buf;
}

export class USBD_ISO_PACKET_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get Status(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set Status(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_ISOCH_TRANSFER (size: 80)
 */
export interface _URB_ISOCH_TRANSFER {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TransferFlags: number;
  /** u32 */
  TransferBufferLength: number;
  /** ptr */
  TransferBuffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TransferBufferMDL: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  UrbLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Devices.Usb._URB_HCD_AREA */
  hca: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartFrame: number;
  /** u32 */
  NumberOfPackets: number;
  /** u32 */
  ErrorCount: number;
  /** array */
  IsoPacket: Deno.PointerValue | null;
}

export const sizeof_URB_ISOCH_TRANSFER = 80;

export function alloc_URB_ISOCH_TRANSFER(data?: Partial<_URB_ISOCH_TRANSFER>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_ISOCH_TRANSFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.TransferFlags !== undefined) view.setUint32(16, Number(data.TransferFlags), true);
  // 0x14: u32
  if (data?.TransferBufferLength !== undefined) view.setUint32(20, Number(data.TransferBufferLength), true);
  // 0x18: pointer
  if (data?.TransferBuffer !== undefined) view.setBigUint64(24, data.TransferBuffer === null ? 0n : BigInt(util.toPointer(data.TransferBuffer)), true);
  // 0x20: pointer
  if (data?.TransferBufferMDL !== undefined) view.setBigUint64(32, data.TransferBufferMDL === null ? 0n : BigInt(util.toPointer(data.TransferBufferMDL)), true);
  // 0x28: pointer
  if (data?.UrbLink !== undefined) view.setBigUint64(40, data.UrbLink === null ? 0n : BigInt(util.toPointer(data.UrbLink)), true);
  // 0x30: pointer
  if (data?.hca !== undefined) view.setBigUint64(48, data.hca === null ? 0n : BigInt(util.toPointer(data.hca)), true);
  // 0x38: u32
  if (data?.StartFrame !== undefined) view.setUint32(56, Number(data.StartFrame), true);
  // 0x3c: u32
  if (data?.NumberOfPackets !== undefined) view.setUint32(60, Number(data.NumberOfPackets), true);
  // 0x40: u32
  if (data?.ErrorCount !== undefined) view.setUint32(64, Number(data.ErrorCount), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.IsoPacket !== undefined) view.setBigUint64(72, data.IsoPacket === null ? 0n : BigInt(util.toPointer(data.IsoPacket)), true);
  return buf;
}

export class _URB_ISOCH_TRANSFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get TransferFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get TransferBufferLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get TransferBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TransferBufferMDL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UrbLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hca(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get StartFrame(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get NumberOfPackets(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get ErrorCount(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get IsoPacket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set TransferFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set TransferBufferLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set TransferBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TransferBufferMDL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UrbLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hca(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set StartFrame(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set NumberOfPackets(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set ErrorCount(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set IsoPacket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBD_STREAM_INFORMATION (size: 24)
 */
export interface USBD_STREAM_INFORMATION {
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  StreamID: number;
  /** u32 */
  MaximumTransferSize: number;
  /** u32 */
  PipeFlags: number;
}

export const sizeofUSBD_STREAM_INFORMATION = 24;

export function allocUSBD_STREAM_INFORMATION(data?: Partial<USBD_STREAM_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBD_STREAM_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(0, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x08: u32
  if (data?.StreamID !== undefined) view.setUint32(8, Number(data.StreamID), true);
  // 0x0c: u32
  if (data?.MaximumTransferSize !== undefined) view.setUint32(12, Number(data.MaximumTransferSize), true);
  // 0x10: u32
  if (data?.PipeFlags !== undefined) view.setUint32(16, Number(data.PipeFlags), true);
  // 0x14: pad4
  return buf;
}

export class USBD_STREAM_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get StreamID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaximumTransferSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get PipeFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set StreamID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaximumTransferSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set PipeFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.Usb._URB_OPEN_STATIC_STREAMS (size: 32)
 */
export interface _URB_OPEN_STATIC_STREAMS {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfStreams: number;
  /** u16 */
  StreamInfoVersion: number;
  /** u16 */
  StreamInfoSize: number;
  /** ptr */
  Streams: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_URB_OPEN_STATIC_STREAMS = 32;

export function alloc_URB_OPEN_STATIC_STREAMS(data?: Partial<_URB_OPEN_STATIC_STREAMS>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_OPEN_STATIC_STREAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.NumberOfStreams !== undefined) view.setUint32(16, Number(data.NumberOfStreams), true);
  // 0x14: u16
  if (data?.StreamInfoVersion !== undefined) view.setUint16(20, Number(data.StreamInfoVersion), true);
  // 0x16: u16
  if (data?.StreamInfoSize !== undefined) view.setUint16(22, Number(data.StreamInfoSize), true);
  // 0x18: pointer
  if (data?.Streams !== undefined) view.setBigUint64(24, data.Streams === null ? 0n : BigInt(util.toPointer(data.Streams)), true);
  return buf;
}

export class _URB_OPEN_STATIC_STREAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumberOfStreams(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get StreamInfoVersion(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get StreamInfoSize(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: pointer
  get Streams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumberOfStreams(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set StreamInfoVersion(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set StreamInfoSize(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: pointer
  set Streams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb._URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS (size: 24)
 */
export interface _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS {
  /** Windows.Win32.Devices.Usb._URB_HEADER */
  Hdr: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  PipeHandle: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaximumSendPathDelayInMilliSeconds: number;
  /** u32 */
  MaximumCompletionPathDelayInMilliSeconds: number;
}

export const sizeof_URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS = 24;

export function alloc_URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS(data?: Partial<_URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS>): Uint8Array {
  const buf = new Uint8Array(sizeof_URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hdr !== undefined) view.setBigUint64(0, data.Hdr === null ? 0n : BigInt(util.toPointer(data.Hdr)), true);
  // 0x08: pointer
  if (data?.PipeHandle !== undefined) view.setBigUint64(8, data.PipeHandle === null ? 0n : BigInt(util.toPointer(data.PipeHandle)), true);
  // 0x10: u32
  if (data?.MaximumSendPathDelayInMilliSeconds !== undefined) view.setUint32(16, Number(data.MaximumSendPathDelayInMilliSeconds), true);
  // 0x14: u32
  if (data?.MaximumCompletionPathDelayInMilliSeconds !== undefined) view.setUint32(20, Number(data.MaximumCompletionPathDelayInMilliSeconds), true);
  return buf;
}

export class _URB_GET_ISOCH_PIPE_TRANSFER_PATH_DELAYSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PipeHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get MaximumSendPathDelayInMilliSeconds(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get MaximumCompletionPathDelayInMilliSeconds(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set Hdr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PipeHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set MaximumSendPathDelayInMilliSeconds(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set MaximumCompletionPathDelayInMilliSeconds(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.URB (size: 8)
 */
export interface URB {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofURB = 8;

export function allocURB(data?: Partial<URB>): Uint8Array {
  const buf = new Uint8Array(sizeofURB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class URBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_IDLE_CALLBACK_INFO (size: 16)
 */
export interface USB_IDLE_CALLBACK_INFO {
  /** Windows.Win32.Devices.Usb.USB_IDLE_CALLBACK */
  IdleCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  IdleContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUSB_IDLE_CALLBACK_INFO = 16;

export function allocUSB_IDLE_CALLBACK_INFO(data?: Partial<USB_IDLE_CALLBACK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_IDLE_CALLBACK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IdleCallback !== undefined) view.setBigUint64(0, data.IdleCallback === null ? 0n : BigInt(util.toPointer(data.IdleCallback)), true);
  // 0x08: pointer
  if (data?.IdleContext !== undefined) view.setBigUint64(8, data.IdleContext === null ? 0n : BigInt(util.toPointer(data.IdleContext)), true);
  return buf;
}

export class USB_IDLE_CALLBACK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IdleCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IdleContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set IdleCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IdleContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER (size: 16)
 */
export interface USBUSER_REQUEST_HEADER {
  /** u32 */
  UsbUserRequest: number;
  /** Windows.Win32.Devices.Usb.USB_USER_ERROR_CODE */
  UsbUserStatusCode: USB_USER_ERROR_CODE;
  /** u32 */
  RequestBufferLength: number;
  /** u32 */
  ActualBufferLength: number;
}

export const sizeofUSBUSER_REQUEST_HEADER = 16;

export function allocUSBUSER_REQUEST_HEADER(data?: Partial<USBUSER_REQUEST_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_REQUEST_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UsbUserRequest !== undefined) view.setUint32(0, Number(data.UsbUserRequest), true);
  // 0x04: i32
  if (data?.UsbUserStatusCode !== undefined) view.setInt32(4, Number(data.UsbUserStatusCode), true);
  // 0x08: u32
  if (data?.RequestBufferLength !== undefined) view.setUint32(8, Number(data.RequestBufferLength), true);
  // 0x0c: u32
  if (data?.ActualBufferLength !== undefined) view.setUint32(12, Number(data.ActualBufferLength), true);
  return buf;
}

export class USBUSER_REQUEST_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UsbUserRequest(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get UsbUserStatusCode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get RequestBufferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ActualBufferLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set UsbUserRequest(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set UsbUserStatusCode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set RequestBufferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ActualBufferLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.PACKET_PARAMETERS (size: 48)
 */
export interface PACKET_PARAMETERS {
  /** u8 */
  DeviceAddress: number;
  /** u8 */
  EndpointAddress: number;
  /** u16 */
  MaximumPacketSize: number;
  /** u32 */
  Timeout: number;
  /** u32 */
  Flags: number;
  /** u32 */
  DataLength: number;
  /** u16 */
  HubDeviceAddress: number;
  /** u16 */
  PortTTNumber: number;
  /** u8 */
  ErrorCount: number;
  /** array */
  Pad: Deno.PointerValue | null;
  /** i32 */
  UsbdStatusCode: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofPACKET_PARAMETERS = 48;

export function allocPACKET_PARAMETERS(data?: Partial<PACKET_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKET_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.DeviceAddress !== undefined) view.setUint8(0, Number(data.DeviceAddress));
  // 0x01: u8
  if (data?.EndpointAddress !== undefined) view.setUint8(1, Number(data.EndpointAddress));
  // 0x02: u16
  if (data?.MaximumPacketSize !== undefined) view.setUint16(2, Number(data.MaximumPacketSize), true);
  // 0x04: u32
  if (data?.Timeout !== undefined) view.setUint32(4, Number(data.Timeout), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.DataLength !== undefined) view.setUint32(12, Number(data.DataLength), true);
  // 0x10: u16
  if (data?.HubDeviceAddress !== undefined) view.setUint16(16, Number(data.HubDeviceAddress), true);
  // 0x12: u16
  if (data?.PortTTNumber !== undefined) view.setUint16(18, Number(data.PortTTNumber), true);
  // 0x14: u8
  if (data?.ErrorCount !== undefined) view.setUint8(20, Number(data.ErrorCount));
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Pad !== undefined) view.setBigUint64(24, data.Pad === null ? 0n : BigInt(util.toPointer(data.Pad)), true);
  // 0x20: i32
  if (data?.UsbdStatusCode !== undefined) view.setInt32(32, Number(data.UsbdStatusCode), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Data !== undefined) view.setBigUint64(40, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class PACKET_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get DeviceAddress(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get EndpointAddress(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get MaximumPacketSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Timeout(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DataLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get HubDeviceAddress(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get PortTTNumber(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u8
  get ErrorCount(): number {
    return this.view.getUint8(20);
  }

  // 0x15: pad3

  // 0x18: pointer
  get Pad(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get UsbdStatusCode(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set DeviceAddress(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set EndpointAddress(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set MaximumPacketSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Timeout(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DataLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set HubDeviceAddress(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set PortTTNumber(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u8
  set ErrorCount(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: pad3

  // 0x18: pointer
  set Pad(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set UsbdStatusCode(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_SEND_ONE_PACKET (size: 16)
 */
export interface USBUSER_SEND_ONE_PACKET {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.PACKET_PARAMETERS */
  PacketParameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_SEND_ONE_PACKET = 16;

export function allocUSBUSER_SEND_ONE_PACKET(data?: Partial<USBUSER_SEND_ONE_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_SEND_ONE_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.PacketParameters !== undefined) view.setBigUint64(8, data.PacketParameters === null ? 0n : BigInt(util.toPointer(data.PacketParameters)), true);
  return buf;
}

export class USBUSER_SEND_ONE_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PacketParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PacketParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.RAW_RESET_PORT_PARAMETERS (size: 8)
 */
export interface RAW_RESET_PORT_PARAMETERS {
  /** u16 */
  PortNumber: number;
  /** u16 */
  PortStatus: number;
}

export const sizeofRAW_RESET_PORT_PARAMETERS = 8;

export function allocRAW_RESET_PORT_PARAMETERS(data?: Partial<RAW_RESET_PORT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRAW_RESET_PORT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PortNumber !== undefined) view.setUint16(0, Number(data.PortNumber), true);
  // 0x02: u16
  if (data?.PortStatus !== undefined) view.setUint16(2, Number(data.PortStatus), true);
  // 0x04: pad4
  return buf;
}

export class RAW_RESET_PORT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PortNumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get PortStatus(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set PortNumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set PortStatus(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_RAW_RESET_ROOT_PORT (size: 16)
 */
export interface USBUSER_RAW_RESET_ROOT_PORT {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.RAW_RESET_PORT_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_RAW_RESET_ROOT_PORT = 16;

export function allocUSBUSER_RAW_RESET_ROOT_PORT(data?: Partial<USBUSER_RAW_RESET_ROOT_PORT>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_RAW_RESET_ROOT_PORT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_RAW_RESET_ROOT_PORTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.RAW_ROOTPORT_FEATURE (size: 8)
 */
export interface RAW_ROOTPORT_FEATURE {
  /** u16 */
  PortNumber: number;
  /** u16 */
  PortFeature: number;
  /** u16 */
  PortStatus: number;
}

export const sizeofRAW_ROOTPORT_FEATURE = 8;

export function allocRAW_ROOTPORT_FEATURE(data?: Partial<RAW_ROOTPORT_FEATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofRAW_ROOTPORT_FEATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PortNumber !== undefined) view.setUint16(0, Number(data.PortNumber), true);
  // 0x02: u16
  if (data?.PortFeature !== undefined) view.setUint16(2, Number(data.PortFeature), true);
  // 0x04: u16
  if (data?.PortStatus !== undefined) view.setUint16(4, Number(data.PortStatus), true);
  // 0x06: pad2
  return buf;
}

export class RAW_ROOTPORT_FEATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PortNumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get PortFeature(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get PortStatus(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set PortNumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set PortFeature(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set PortStatus(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_ROOTPORT_FEATURE_REQUEST (size: 16)
 */
export interface USBUSER_ROOTPORT_FEATURE_REQUEST {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.RAW_ROOTPORT_FEATURE */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_ROOTPORT_FEATURE_REQUEST = 16;

export function allocUSBUSER_ROOTPORT_FEATURE_REQUEST(data?: Partial<USBUSER_ROOTPORT_FEATURE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_ROOTPORT_FEATURE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_ROOTPORT_FEATURE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.RAW_ROOTPORT_PARAMETERS (size: 8)
 */
export interface RAW_ROOTPORT_PARAMETERS {
  /** u16 */
  PortNumber: number;
  /** u16 */
  PortStatus: number;
}

export const sizeofRAW_ROOTPORT_PARAMETERS = 8;

export function allocRAW_ROOTPORT_PARAMETERS(data?: Partial<RAW_ROOTPORT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRAW_ROOTPORT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PortNumber !== undefined) view.setUint16(0, Number(data.PortNumber), true);
  // 0x02: u16
  if (data?.PortStatus !== undefined) view.setUint16(2, Number(data.PortStatus), true);
  // 0x04: pad4
  return buf;
}

export class RAW_ROOTPORT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PortNumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get PortStatus(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set PortNumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set PortStatus(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_ROOTPORT_PARAMETERS (size: 16)
 */
export interface USBUSER_ROOTPORT_PARAMETERS {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.RAW_ROOTPORT_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_ROOTPORT_PARAMETERS = 16;

export function allocUSBUSER_ROOTPORT_PARAMETERS(data?: Partial<USBUSER_ROOTPORT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_ROOTPORT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_ROOTPORT_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_CONTROLLER_INFO_0 (size: 24)
 */
export interface USB_CONTROLLER_INFO_0 {
  /** u32 */
  PciVendorId: number;
  /** u32 */
  PciDeviceId: number;
  /** u32 */
  PciRevision: number;
  /** u32 */
  NumberOfRootPorts: number;
  /** Windows.Win32.Devices.Usb.USB_CONTROLLER_FLAVOR */
  ControllerFlavor: USB_CONTROLLER_FLAVOR;
  /** u32 */
  HcFeatureFlags: number;
}

export const sizeofUSB_CONTROLLER_INFO_0 = 24;

export function allocUSB_CONTROLLER_INFO_0(data?: Partial<USB_CONTROLLER_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_CONTROLLER_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PciVendorId !== undefined) view.setUint32(0, Number(data.PciVendorId), true);
  // 0x04: u32
  if (data?.PciDeviceId !== undefined) view.setUint32(4, Number(data.PciDeviceId), true);
  // 0x08: u32
  if (data?.PciRevision !== undefined) view.setUint32(8, Number(data.PciRevision), true);
  // 0x0c: u32
  if (data?.NumberOfRootPorts !== undefined) view.setUint32(12, Number(data.NumberOfRootPorts), true);
  // 0x10: i32
  if (data?.ControllerFlavor !== undefined) view.setInt32(16, Number(data.ControllerFlavor), true);
  // 0x14: u32
  if (data?.HcFeatureFlags !== undefined) view.setUint32(20, Number(data.HcFeatureFlags), true);
  return buf;
}

export class USB_CONTROLLER_INFO_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PciVendorId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PciDeviceId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PciRevision(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get NumberOfRootPorts(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get ControllerFlavor(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get HcFeatureFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set PciVendorId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PciDeviceId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PciRevision(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set NumberOfRootPorts(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set ControllerFlavor(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set HcFeatureFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_CONTROLLER_INFO_0 (size: 16)
 */
export interface USBUSER_CONTROLLER_INFO_0 {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_CONTROLLER_INFO_0 */
  Info0: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_CONTROLLER_INFO_0 = 16;

export function allocUSBUSER_CONTROLLER_INFO_0(data?: Partial<USBUSER_CONTROLLER_INFO_0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_CONTROLLER_INFO_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Info0 !== undefined) view.setBigUint64(8, data.Info0 === null ? 0n : BigInt(util.toPointer(data.Info0)), true);
  return buf;
}

export class USBUSER_CONTROLLER_INFO_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Info0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Info0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_UNICODE_NAME (size: 16)
 */
export interface USB_UNICODE_NAME {
  /** u32 */
  Length: number;
  /** array */
  String: Deno.PointerValue | null;
}

export const sizeofUSB_UNICODE_NAME = 16;

export function allocUSB_UNICODE_NAME(data?: Partial<USB_UNICODE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_UNICODE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.String !== undefined) view.setBigUint64(8, data.String === null ? 0n : BigInt(util.toPointer(data.String)), true);
  return buf;
}

export class USB_UNICODE_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_CONTROLLER_UNICODE_NAME (size: 16)
 */
export interface USBUSER_CONTROLLER_UNICODE_NAME {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_UNICODE_NAME */
  UnicodeName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_CONTROLLER_UNICODE_NAME = 16;

export function allocUSBUSER_CONTROLLER_UNICODE_NAME(data?: Partial<USBUSER_CONTROLLER_UNICODE_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_CONTROLLER_UNICODE_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.UnicodeName !== undefined) view.setBigUint64(8, data.UnicodeName === null ? 0n : BigInt(util.toPointer(data.UnicodeName)), true);
  return buf;
}

export class USBUSER_CONTROLLER_UNICODE_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get UnicodeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set UnicodeName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_PASS_THRU_PARAMETERS (size: 24)
 */
export interface USB_PASS_THRU_PARAMETERS {
  /** System.Guid */
  FunctionGUID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ParameterLength: number;
  /** array */
  Parameters: Deno.PointerValue | null;
}

export const sizeofUSB_PASS_THRU_PARAMETERS = 24;

export function allocUSB_PASS_THRU_PARAMETERS(data?: Partial<USB_PASS_THRU_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_PASS_THRU_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FunctionGUID !== undefined) view.setBigUint64(0, data.FunctionGUID === null ? 0n : BigInt(util.toPointer(data.FunctionGUID)), true);
  // 0x08: u32
  if (data?.ParameterLength !== undefined) view.setUint32(8, Number(data.ParameterLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(16, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USB_PASS_THRU_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FunctionGUID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ParameterLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FunctionGUID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ParameterLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_PASS_THRU_REQUEST (size: 16)
 */
export interface USBUSER_PASS_THRU_REQUEST {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_PASS_THRU_PARAMETERS */
  PassThru: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_PASS_THRU_REQUEST = 16;

export function allocUSBUSER_PASS_THRU_REQUEST(data?: Partial<USBUSER_PASS_THRU_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_PASS_THRU_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.PassThru !== undefined) view.setBigUint64(8, data.PassThru === null ? 0n : BigInt(util.toPointer(data.PassThru)), true);
  return buf;
}

export class USBUSER_PASS_THRU_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PassThru(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PassThru(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Devices.Usb.USB_POWER_INFO (size: 48)
 */
export interface USB_POWER_INFO {
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  SystemState: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  HcDevicePowerState: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  HcDeviceWake: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  HcSystemWake: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  RhDevicePowerState: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  RhDeviceWake: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  RhSystemWake: WDMUSB_POWER_STATE;
  /** Windows.Win32.Devices.Usb.WDMUSB_POWER_STATE */
  LastSystemSleepState: WDMUSB_POWER_STATE;
  /** Windows.Win32.Foundation.BOOLEAN */
  CanWakeup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsPowered: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_POWER_INFO = 48;

export function allocUSB_POWER_INFO(data?: Partial<USB_POWER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_POWER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SystemState !== undefined) view.setInt32(0, Number(data.SystemState), true);
  // 0x04: i32
  if (data?.HcDevicePowerState !== undefined) view.setInt32(4, Number(data.HcDevicePowerState), true);
  // 0x08: i32
  if (data?.HcDeviceWake !== undefined) view.setInt32(8, Number(data.HcDeviceWake), true);
  // 0x0c: i32
  if (data?.HcSystemWake !== undefined) view.setInt32(12, Number(data.HcSystemWake), true);
  // 0x10: i32
  if (data?.RhDevicePowerState !== undefined) view.setInt32(16, Number(data.RhDevicePowerState), true);
  // 0x14: i32
  if (data?.RhDeviceWake !== undefined) view.setInt32(20, Number(data.RhDeviceWake), true);
  // 0x18: i32
  if (data?.RhSystemWake !== undefined) view.setInt32(24, Number(data.RhSystemWake), true);
  // 0x1c: i32
  if (data?.LastSystemSleepState !== undefined) view.setInt32(28, Number(data.LastSystemSleepState), true);
  // 0x20: pointer
  if (data?.CanWakeup !== undefined) view.setBigUint64(32, data.CanWakeup === null ? 0n : BigInt(util.toPointer(data.CanWakeup)), true);
  // 0x28: pointer
  if (data?.IsPowered !== undefined) view.setBigUint64(40, data.IsPowered === null ? 0n : BigInt(util.toPointer(data.IsPowered)), true);
  return buf;
}

export class USB_POWER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get SystemState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get HcDevicePowerState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get HcDeviceWake(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get HcSystemWake(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get RhDevicePowerState(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get RhDeviceWake(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get RhSystemWake(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get LastSystemSleepState(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get CanWakeup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get IsPowered(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set SystemState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set HcDevicePowerState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set HcDeviceWake(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set HcSystemWake(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set RhDevicePowerState(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set RhDeviceWake(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set RhSystemWake(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set LastSystemSleepState(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set CanWakeup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set IsPowered(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_POWER_INFO_REQUEST (size: 16)
 */
export interface USBUSER_POWER_INFO_REQUEST {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_POWER_INFO */
  PowerInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_POWER_INFO_REQUEST = 16;

export function allocUSBUSER_POWER_INFO_REQUEST(data?: Partial<USBUSER_POWER_INFO_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_POWER_INFO_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.PowerInformation !== undefined) view.setBigUint64(8, data.PowerInformation === null ? 0n : BigInt(util.toPointer(data.PowerInformation)), true);
  return buf;
}

export class USBUSER_POWER_INFO_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PowerInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PowerInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_OPEN_RAW_DEVICE_PARAMETERS (size: 8)
 */
export interface USB_OPEN_RAW_DEVICE_PARAMETERS {
  /** u16 */
  PortStatus: number;
  /** u16 */
  MaxPacketEp0: number;
}

export const sizeofUSB_OPEN_RAW_DEVICE_PARAMETERS = 8;

export function allocUSB_OPEN_RAW_DEVICE_PARAMETERS(data?: Partial<USB_OPEN_RAW_DEVICE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_OPEN_RAW_DEVICE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PortStatus !== undefined) view.setUint16(0, Number(data.PortStatus), true);
  // 0x02: u16
  if (data?.MaxPacketEp0 !== undefined) view.setUint16(2, Number(data.MaxPacketEp0), true);
  // 0x04: pad4
  return buf;
}

export class USB_OPEN_RAW_DEVICE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PortStatus(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaxPacketEp0(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set PortStatus(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaxPacketEp0(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_OPEN_RAW_DEVICE (size: 16)
 */
export interface USBUSER_OPEN_RAW_DEVICE {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_OPEN_RAW_DEVICE_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_OPEN_RAW_DEVICE = 16;

export function allocUSBUSER_OPEN_RAW_DEVICE(data?: Partial<USBUSER_OPEN_RAW_DEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_OPEN_RAW_DEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_OPEN_RAW_DEVICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_CLOSE_RAW_DEVICE_PARAMETERS (size: 8)
 */
export interface USB_CLOSE_RAW_DEVICE_PARAMETERS {
  /** u32 */
  xxx: number;
}

export const sizeofUSB_CLOSE_RAW_DEVICE_PARAMETERS = 8;

export function allocUSB_CLOSE_RAW_DEVICE_PARAMETERS(data?: Partial<USB_CLOSE_RAW_DEVICE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_CLOSE_RAW_DEVICE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.xxx !== undefined) view.setUint32(0, Number(data.xxx), true);
  // 0x04: pad4
  return buf;
}

export class USB_CLOSE_RAW_DEVICE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get xxx(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set xxx(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_CLOSE_RAW_DEVICE (size: 16)
 */
export interface USBUSER_CLOSE_RAW_DEVICE {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_CLOSE_RAW_DEVICE_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_CLOSE_RAW_DEVICE = 16;

export function allocUSBUSER_CLOSE_RAW_DEVICE(data?: Partial<USBUSER_CLOSE_RAW_DEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_CLOSE_RAW_DEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_CLOSE_RAW_DEVICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_SEND_RAW_COMMAND_PARAMETERS (size: 32)
 */
export interface USB_SEND_RAW_COMMAND_PARAMETERS {
  /** u8 */
  Usb_bmRequest: number;
  /** u8 */
  Usb_bRequest: number;
  /** u16 */
  Usb_wVlaue: number;
  /** u16 */
  Usb_wIndex: number;
  /** u16 */
  Usb_wLength: number;
  /** u16 */
  DeviceAddress: number;
  /** u16 */
  MaximumPacketSize: number;
  /** u32 */
  Timeout: number;
  /** u32 */
  DataLength: number;
  /** i32 */
  UsbdStatusCode: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofUSB_SEND_RAW_COMMAND_PARAMETERS = 32;

export function allocUSB_SEND_RAW_COMMAND_PARAMETERS(data?: Partial<USB_SEND_RAW_COMMAND_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_SEND_RAW_COMMAND_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Usb_bmRequest !== undefined) view.setUint8(0, Number(data.Usb_bmRequest));
  // 0x01: u8
  if (data?.Usb_bRequest !== undefined) view.setUint8(1, Number(data.Usb_bRequest));
  // 0x02: u16
  if (data?.Usb_wVlaue !== undefined) view.setUint16(2, Number(data.Usb_wVlaue), true);
  // 0x04: u16
  if (data?.Usb_wIndex !== undefined) view.setUint16(4, Number(data.Usb_wIndex), true);
  // 0x06: u16
  if (data?.Usb_wLength !== undefined) view.setUint16(6, Number(data.Usb_wLength), true);
  // 0x08: u16
  if (data?.DeviceAddress !== undefined) view.setUint16(8, Number(data.DeviceAddress), true);
  // 0x0a: u16
  if (data?.MaximumPacketSize !== undefined) view.setUint16(10, Number(data.MaximumPacketSize), true);
  // 0x0c: u32
  if (data?.Timeout !== undefined) view.setUint32(12, Number(data.Timeout), true);
  // 0x10: u32
  if (data?.DataLength !== undefined) view.setUint32(16, Number(data.DataLength), true);
  // 0x14: i32
  if (data?.UsbdStatusCode !== undefined) view.setInt32(20, Number(data.UsbdStatusCode), true);
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class USB_SEND_RAW_COMMAND_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Usb_bmRequest(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Usb_bRequest(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Usb_wVlaue(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Usb_wIndex(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Usb_wLength(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get DeviceAddress(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get MaximumPacketSize(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get Timeout(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get UsbdStatusCode(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Usb_bmRequest(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Usb_bRequest(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Usb_wVlaue(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Usb_wIndex(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Usb_wLength(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set DeviceAddress(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set MaximumPacketSize(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set Timeout(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set UsbdStatusCode(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_SEND_RAW_COMMAND (size: 16)
 */
export interface USBUSER_SEND_RAW_COMMAND {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_SEND_RAW_COMMAND_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_SEND_RAW_COMMAND = 16;

export function allocUSBUSER_SEND_RAW_COMMAND(data?: Partial<USBUSER_SEND_RAW_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_SEND_RAW_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_SEND_RAW_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_BANDWIDTH_INFO (size: 48)
 */
export interface USB_BANDWIDTH_INFO {
  /** u32 */
  DeviceCount: number;
  /** u32 */
  TotalBusBandwidth: number;
  /** u32 */
  Total32secBandwidth: number;
  /** u32 */
  AllocedBulkAndControl: number;
  /** u32 */
  AllocedIso: number;
  /** u32 */
  AllocedInterrupt_1ms: number;
  /** u32 */
  AllocedInterrupt_2ms: number;
  /** u32 */
  AllocedInterrupt_4ms: number;
  /** u32 */
  AllocedInterrupt_8ms: number;
  /** u32 */
  AllocedInterrupt_16ms: number;
  /** u32 */
  AllocedInterrupt_32ms: number;
}

export const sizeofUSB_BANDWIDTH_INFO = 48;

export function allocUSB_BANDWIDTH_INFO(data?: Partial<USB_BANDWIDTH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_BANDWIDTH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceCount !== undefined) view.setUint32(0, Number(data.DeviceCount), true);
  // 0x04: u32
  if (data?.TotalBusBandwidth !== undefined) view.setUint32(4, Number(data.TotalBusBandwidth), true);
  // 0x08: u32
  if (data?.Total32secBandwidth !== undefined) view.setUint32(8, Number(data.Total32secBandwidth), true);
  // 0x0c: u32
  if (data?.AllocedBulkAndControl !== undefined) view.setUint32(12, Number(data.AllocedBulkAndControl), true);
  // 0x10: u32
  if (data?.AllocedIso !== undefined) view.setUint32(16, Number(data.AllocedIso), true);
  // 0x14: u32
  if (data?.AllocedInterrupt_1ms !== undefined) view.setUint32(20, Number(data.AllocedInterrupt_1ms), true);
  // 0x18: u32
  if (data?.AllocedInterrupt_2ms !== undefined) view.setUint32(24, Number(data.AllocedInterrupt_2ms), true);
  // 0x1c: u32
  if (data?.AllocedInterrupt_4ms !== undefined) view.setUint32(28, Number(data.AllocedInterrupt_4ms), true);
  // 0x20: u32
  if (data?.AllocedInterrupt_8ms !== undefined) view.setUint32(32, Number(data.AllocedInterrupt_8ms), true);
  // 0x24: u32
  if (data?.AllocedInterrupt_16ms !== undefined) view.setUint32(36, Number(data.AllocedInterrupt_16ms), true);
  // 0x28: u32
  if (data?.AllocedInterrupt_32ms !== undefined) view.setUint32(40, Number(data.AllocedInterrupt_32ms), true);
  // 0x2c: pad4
  return buf;
}

export class USB_BANDWIDTH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TotalBusBandwidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Total32secBandwidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AllocedBulkAndControl(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get AllocedIso(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AllocedInterrupt_1ms(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get AllocedInterrupt_2ms(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get AllocedInterrupt_4ms(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get AllocedInterrupt_8ms(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get AllocedInterrupt_16ms(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get AllocedInterrupt_32ms(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set DeviceCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TotalBusBandwidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Total32secBandwidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AllocedBulkAndControl(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set AllocedIso(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AllocedInterrupt_1ms(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set AllocedInterrupt_2ms(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set AllocedInterrupt_4ms(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set AllocedInterrupt_8ms(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set AllocedInterrupt_16ms(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set AllocedInterrupt_32ms(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_BANDWIDTH_INFO_REQUEST (size: 16)
 */
export interface USBUSER_BANDWIDTH_INFO_REQUEST {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_BANDWIDTH_INFO */
  BandwidthInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_BANDWIDTH_INFO_REQUEST = 16;

export function allocUSBUSER_BANDWIDTH_INFO_REQUEST(data?: Partial<USBUSER_BANDWIDTH_INFO_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_BANDWIDTH_INFO_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.BandwidthInformation !== undefined) view.setBigUint64(8, data.BandwidthInformation === null ? 0n : BigInt(util.toPointer(data.BandwidthInformation)), true);
  return buf;
}

export class USBUSER_BANDWIDTH_INFO_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BandwidthInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BandwidthInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_BUS_STATISTICS_0 (size: 72)
 */
export interface USB_BUS_STATISTICS_0 {
  /** u32 */
  DeviceCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CurrentSystemTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CurrentUsbFrame: number;
  /** u32 */
  BulkBytes: number;
  /** u32 */
  IsoBytes: number;
  /** u32 */
  InterruptBytes: number;
  /** u32 */
  ControlDataBytes: number;
  /** u32 */
  PciInterruptCount: number;
  /** u32 */
  HardResetCount: number;
  /** u32 */
  WorkerSignalCount: number;
  /** u32 */
  CommonBufferBytes: number;
  /** u32 */
  WorkerIdleTimeMs: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  RootHubEnabled: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  RootHubDevicePowerState: number;
  /** u8 */
  Unused: number;
  /** u8 */
  NameIndex: number;
}

export const sizeofUSB_BUS_STATISTICS_0 = 72;

export function allocUSB_BUS_STATISTICS_0(data?: Partial<USB_BUS_STATISTICS_0>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_BUS_STATISTICS_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceCount !== undefined) view.setUint32(0, Number(data.DeviceCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CurrentSystemTime !== undefined) view.setBigUint64(8, data.CurrentSystemTime === null ? 0n : BigInt(util.toPointer(data.CurrentSystemTime)), true);
  // 0x10: u32
  if (data?.CurrentUsbFrame !== undefined) view.setUint32(16, Number(data.CurrentUsbFrame), true);
  // 0x14: u32
  if (data?.BulkBytes !== undefined) view.setUint32(20, Number(data.BulkBytes), true);
  // 0x18: u32
  if (data?.IsoBytes !== undefined) view.setUint32(24, Number(data.IsoBytes), true);
  // 0x1c: u32
  if (data?.InterruptBytes !== undefined) view.setUint32(28, Number(data.InterruptBytes), true);
  // 0x20: u32
  if (data?.ControlDataBytes !== undefined) view.setUint32(32, Number(data.ControlDataBytes), true);
  // 0x24: u32
  if (data?.PciInterruptCount !== undefined) view.setUint32(36, Number(data.PciInterruptCount), true);
  // 0x28: u32
  if (data?.HardResetCount !== undefined) view.setUint32(40, Number(data.HardResetCount), true);
  // 0x2c: u32
  if (data?.WorkerSignalCount !== undefined) view.setUint32(44, Number(data.WorkerSignalCount), true);
  // 0x30: u32
  if (data?.CommonBufferBytes !== undefined) view.setUint32(48, Number(data.CommonBufferBytes), true);
  // 0x34: u32
  if (data?.WorkerIdleTimeMs !== undefined) view.setUint32(52, Number(data.WorkerIdleTimeMs), true);
  // 0x38: pointer
  if (data?.RootHubEnabled !== undefined) view.setBigUint64(56, data.RootHubEnabled === null ? 0n : BigInt(util.toPointer(data.RootHubEnabled)), true);
  // 0x40: u8
  if (data?.RootHubDevicePowerState !== undefined) view.setUint8(64, Number(data.RootHubDevicePowerState));
  // 0x41: u8
  if (data?.Unused !== undefined) view.setUint8(65, Number(data.Unused));
  // 0x42: u8
  if (data?.NameIndex !== undefined) view.setUint8(66, Number(data.NameIndex));
  // 0x43: pad5
  return buf;
}

export class USB_BUS_STATISTICS_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DeviceCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CurrentSystemTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get CurrentUsbFrame(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get BulkBytes(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get IsoBytes(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get InterruptBytes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get ControlDataBytes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PciInterruptCount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get HardResetCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get WorkerSignalCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get CommonBufferBytes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get WorkerIdleTimeMs(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get RootHubEnabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u8
  get RootHubDevicePowerState(): number {
    return this.view.getUint8(64);
  }

  // 0x41: u8
  get Unused(): number {
    return this.view.getUint8(65);
  }

  // 0x42: u8
  get NameIndex(): number {
    return this.view.getUint8(66);
  }

  // 0x43: pad5

  // 0x00: u32
  set DeviceCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CurrentSystemTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set CurrentUsbFrame(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set BulkBytes(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set IsoBytes(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set InterruptBytes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set ControlDataBytes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PciInterruptCount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set HardResetCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set WorkerSignalCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set CommonBufferBytes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set WorkerIdleTimeMs(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set RootHubEnabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u8
  set RootHubDevicePowerState(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: u8
  set Unused(value: number) {
    this.view.setUint8(65, value);
  }

  // 0x42: u8
  set NameIndex(value: number) {
    this.view.setUint8(66, value);
  }

  // 0x43: pad5
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_BUS_STATISTICS_0_REQUEST (size: 16)
 */
export interface USBUSER_BUS_STATISTICS_0_REQUEST {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_BUS_STATISTICS_0 */
  BusStatistics0: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_BUS_STATISTICS_0_REQUEST = 16;

export function allocUSBUSER_BUS_STATISTICS_0_REQUEST(data?: Partial<USBUSER_BUS_STATISTICS_0_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_BUS_STATISTICS_0_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.BusStatistics0 !== undefined) view.setBigUint64(8, data.BusStatistics0 === null ? 0n : BigInt(util.toPointer(data.BusStatistics0)), true);
  return buf;
}

export class USBUSER_BUS_STATISTICS_0_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get BusStatistics0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set BusStatistics0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_DRIVER_VERSION_PARAMETERS (size: 40)
 */
export interface USB_DRIVER_VERSION_PARAMETERS {
  /** u32 */
  DriverTrackingCode: number;
  /** u32 */
  USBDI_Version: number;
  /** u32 */
  USBUSER_Version: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  CheckedPortDriver: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  CheckedMiniportDriver: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  USB_Version: number;
}

export const sizeofUSB_DRIVER_VERSION_PARAMETERS = 40;

export function allocUSB_DRIVER_VERSION_PARAMETERS(data?: Partial<USB_DRIVER_VERSION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_DRIVER_VERSION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DriverTrackingCode !== undefined) view.setUint32(0, Number(data.DriverTrackingCode), true);
  // 0x04: u32
  if (data?.USBDI_Version !== undefined) view.setUint32(4, Number(data.USBDI_Version), true);
  // 0x08: u32
  if (data?.USBUSER_Version !== undefined) view.setUint32(8, Number(data.USBUSER_Version), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CheckedPortDriver !== undefined) view.setBigUint64(16, data.CheckedPortDriver === null ? 0n : BigInt(util.toPointer(data.CheckedPortDriver)), true);
  // 0x18: pointer
  if (data?.CheckedMiniportDriver !== undefined) view.setBigUint64(24, data.CheckedMiniportDriver === null ? 0n : BigInt(util.toPointer(data.CheckedMiniportDriver)), true);
  // 0x20: u16
  if (data?.USB_Version !== undefined) view.setUint16(32, Number(data.USB_Version), true);
  // 0x22: pad6
  return buf;
}

export class USB_DRIVER_VERSION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DriverTrackingCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get USBDI_Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get USBUSER_Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get CheckedPortDriver(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CheckedMiniportDriver(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get USB_Version(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: u32
  set DriverTrackingCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set USBDI_Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set USBUSER_Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set CheckedPortDriver(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CheckedMiniportDriver(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set USB_Version(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_GET_DRIVER_VERSION (size: 16)
 */
export interface USBUSER_GET_DRIVER_VERSION {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_DRIVER_VERSION_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_GET_DRIVER_VERSION = 16;

export function allocUSBUSER_GET_DRIVER_VERSION(data?: Partial<USBUSER_GET_DRIVER_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_GET_DRIVER_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_GET_DRIVER_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_USB2HW_VERSION_PARAMETERS (size: 8)
 */
export interface USB_USB2HW_VERSION_PARAMETERS {
  /** u8 */
  Usb2HwRevision: number;
}

export const sizeofUSB_USB2HW_VERSION_PARAMETERS = 8;

export function allocUSB_USB2HW_VERSION_PARAMETERS(data?: Partial<USB_USB2HW_VERSION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_USB2HW_VERSION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Usb2HwRevision !== undefined) view.setUint8(0, Number(data.Usb2HwRevision));
  // 0x01: pad7
  return buf;
}

export class USB_USB2HW_VERSION_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Usb2HwRevision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set Usb2HwRevision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_GET_USB2HW_VERSION (size: 16)
 */
export interface USBUSER_GET_USB2HW_VERSION {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USB_USB2HW_VERSION_PARAMETERS */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBUSER_GET_USB2HW_VERSION = 16;

export function allocUSBUSER_GET_USB2HW_VERSION(data?: Partial<USBUSER_GET_USB2HW_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_GET_USB2HW_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class USBUSER_GET_USB2HW_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBUSER_REFRESH_HCT_REG (size: 16)
 */
export interface USBUSER_REFRESH_HCT_REG {
  /** Windows.Win32.Devices.Usb.USBUSER_REQUEST_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofUSBUSER_REFRESH_HCT_REG = 16;

export function allocUSBUSER_REFRESH_HCT_REG(data?: Partial<USBUSER_REFRESH_HCT_REG>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBUSER_REFRESH_HCT_REG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class USBUSER_REFRESH_HCT_REGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb.WINUSB_PIPE_INFORMATION (size: 8)
 */
export interface WINUSB_PIPE_INFORMATION {
  /** Windows.Win32.Devices.Usb.USBD_PIPE_TYPE */
  PipeType: USBD_PIPE_TYPE;
  /** u8 */
  PipeId: number;
  /** u16 */
  MaximumPacketSize: number;
  /** u8 */
  Interval: number;
}

export const sizeofWINUSB_PIPE_INFORMATION = 8;

export function allocWINUSB_PIPE_INFORMATION(data?: Partial<WINUSB_PIPE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWINUSB_PIPE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PipeType !== undefined) view.setInt32(0, Number(data.PipeType), true);
  // 0x04: u8
  if (data?.PipeId !== undefined) view.setUint8(4, Number(data.PipeId));
  // 0x05: u16
  if (data?.MaximumPacketSize !== undefined) view.setUint16(5, Number(data.MaximumPacketSize), true);
  // 0x07: u8
  if (data?.Interval !== undefined) view.setUint8(7, Number(data.Interval));
  return buf;
}

export class WINUSB_PIPE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PipeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get PipeId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u16
  get MaximumPacketSize(): number {
    return this.view.getUint16(5, true);
  }

  // 0x07: u8
  get Interval(): number {
    return this.view.getUint8(7);
  }

  // 0x00: i32
  set PipeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set PipeId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u16
  set MaximumPacketSize(value: number) {
    this.view.setUint16(5, value, true);
  }

  // 0x07: u8
  set Interval(value: number) {
    this.view.setUint8(7, value);
  }
}

/**
 * Windows.Win32.Devices.Usb.WINUSB_PIPE_INFORMATION_EX (size: 16)
 */
export interface WINUSB_PIPE_INFORMATION_EX {
  /** Windows.Win32.Devices.Usb.USBD_PIPE_TYPE */
  PipeType: USBD_PIPE_TYPE;
  /** u8 */
  PipeId: number;
  /** u16 */
  MaximumPacketSize: number;
  /** u8 */
  Interval: number;
  /** u32 */
  MaximumBytesPerInterval: number;
}

export const sizeofWINUSB_PIPE_INFORMATION_EX = 16;

export function allocWINUSB_PIPE_INFORMATION_EX(data?: Partial<WINUSB_PIPE_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWINUSB_PIPE_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PipeType !== undefined) view.setInt32(0, Number(data.PipeType), true);
  // 0x04: u8
  if (data?.PipeId !== undefined) view.setUint8(4, Number(data.PipeId));
  // 0x05: u16
  if (data?.MaximumPacketSize !== undefined) view.setUint16(5, Number(data.MaximumPacketSize), true);
  // 0x07: u8
  if (data?.Interval !== undefined) view.setUint8(7, Number(data.Interval));
  // 0x08: u32
  if (data?.MaximumBytesPerInterval !== undefined) view.setUint32(8, Number(data.MaximumBytesPerInterval), true);
  // 0x0c: pad4
  return buf;
}

export class WINUSB_PIPE_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PipeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get PipeId(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u16
  get MaximumPacketSize(): number {
    return this.view.getUint16(5, true);
  }

  // 0x07: u8
  get Interval(): number {
    return this.view.getUint8(7);
  }

  // 0x08: u32
  get MaximumBytesPerInterval(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set PipeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set PipeId(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u16
  set MaximumPacketSize(value: number) {
    this.view.setUint16(5, value, true);
  }

  // 0x07: u8
  set Interval(value: number) {
    this.view.setUint8(7, value);
  }

  // 0x08: u32
  set MaximumBytesPerInterval(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb.WINUSB_SETUP_PACKET (size: 8)
 */
export interface WINUSB_SETUP_PACKET {
  /** u8 */
  RequestType: number;
  /** u8 */
  Request: number;
  /** u16 */
  Value: number;
  /** u16 */
  Index: number;
  /** u16 */
  Length: number;
}

export const sizeofWINUSB_SETUP_PACKET = 8;

export function allocWINUSB_SETUP_PACKET(data?: Partial<WINUSB_SETUP_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofWINUSB_SETUP_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.RequestType !== undefined) view.setUint8(0, Number(data.RequestType));
  // 0x01: u8
  if (data?.Request !== undefined) view.setUint8(1, Number(data.Request));
  // 0x02: u16
  if (data?.Value !== undefined) view.setUint16(2, Number(data.Value), true);
  // 0x04: u16
  if (data?.Index !== undefined) view.setUint16(4, Number(data.Index), true);
  // 0x06: u16
  if (data?.Length !== undefined) view.setUint16(6, Number(data.Length), true);
  return buf;
}

export class WINUSB_SETUP_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get RequestType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Request(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Value(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Index(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Length(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u8
  set RequestType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Request(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Value(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Index(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Length(value: number) {
    this.view.setUint16(6, value, true);
  }
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.Usb.USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION (size: 16)
 */
export interface USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  TimeTrackingHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsStartupDelayTolerable: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_START_TRACKING_FOR_TIME_SYNC_INFORMATION = 16;

export function allocUSB_START_TRACKING_FOR_TIME_SYNC_INFORMATION(data?: Partial<USB_START_TRACKING_FOR_TIME_SYNC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_START_TRACKING_FOR_TIME_SYNC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TimeTrackingHandle !== undefined) view.setBigUint64(0, data.TimeTrackingHandle === null ? 0n : BigInt(util.toPointer(data.TimeTrackingHandle)), true);
  // 0x08: pointer
  if (data?.IsStartupDelayTolerable !== undefined) view.setBigUint64(8, data.IsStartupDelayTolerable === null ? 0n : BigInt(util.toPointer(data.IsStartupDelayTolerable)), true);
  return buf;
}

export class USB_START_TRACKING_FOR_TIME_SYNC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TimeTrackingHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IsStartupDelayTolerable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TimeTrackingHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IsStartupDelayTolerable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION (size: 8)
 */
export interface USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  TimeTrackingHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION = 8;

export function allocUSB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION(data?: Partial<USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TimeTrackingHandle !== undefined) view.setBigUint64(0, data.TimeTrackingHandle === null ? 0n : BigInt(util.toPointer(data.TimeTrackingHandle)), true);
  return buf;
}

export class USB_STOP_TRACKING_FOR_TIME_SYNC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TimeTrackingHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TimeTrackingHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION (size: 64)
 */
export interface USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION {
  /** Windows.Win32.Foundation.HANDLE */
  TimeTrackingHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  InputFrameNumber: number;
  /** u32 */
  InputMicroFrameNumber: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  QueryPerformanceCounterAtInputFrameOrMicroFrame: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  QueryPerformanceCounterFrequency: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PredictedAccuracyInMicroSeconds: number;
  /** u32 */
  CurrentGenerationID: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CurrentQueryPerformanceCounter: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CurrentHardwareFrameNumber: number;
  /** u32 */
  CurrentHardwareMicroFrameNumber: number;
  /** u32 */
  CurrentUSBFrameNumber: number;
}

export const sizeofUSB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION = 64;

export function allocUSB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION(data?: Partial<USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TimeTrackingHandle !== undefined) view.setBigUint64(0, data.TimeTrackingHandle === null ? 0n : BigInt(util.toPointer(data.TimeTrackingHandle)), true);
  // 0x08: u32
  if (data?.InputFrameNumber !== undefined) view.setUint32(8, Number(data.InputFrameNumber), true);
  // 0x0c: u32
  if (data?.InputMicroFrameNumber !== undefined) view.setUint32(12, Number(data.InputMicroFrameNumber), true);
  // 0x10: pointer
  if (data?.QueryPerformanceCounterAtInputFrameOrMicroFrame !== undefined) view.setBigUint64(16, data.QueryPerformanceCounterAtInputFrameOrMicroFrame === null ? 0n : BigInt(util.toPointer(data.QueryPerformanceCounterAtInputFrameOrMicroFrame)), true);
  // 0x18: pointer
  if (data?.QueryPerformanceCounterFrequency !== undefined) view.setBigUint64(24, data.QueryPerformanceCounterFrequency === null ? 0n : BigInt(util.toPointer(data.QueryPerformanceCounterFrequency)), true);
  // 0x20: u32
  if (data?.PredictedAccuracyInMicroSeconds !== undefined) view.setUint32(32, Number(data.PredictedAccuracyInMicroSeconds), true);
  // 0x24: u32
  if (data?.CurrentGenerationID !== undefined) view.setUint32(36, Number(data.CurrentGenerationID), true);
  // 0x28: pointer
  if (data?.CurrentQueryPerformanceCounter !== undefined) view.setBigUint64(40, data.CurrentQueryPerformanceCounter === null ? 0n : BigInt(util.toPointer(data.CurrentQueryPerformanceCounter)), true);
  // 0x30: u32
  if (data?.CurrentHardwareFrameNumber !== undefined) view.setUint32(48, Number(data.CurrentHardwareFrameNumber), true);
  // 0x34: u32
  if (data?.CurrentHardwareMicroFrameNumber !== undefined) view.setUint32(52, Number(data.CurrentHardwareMicroFrameNumber), true);
  // 0x38: u32
  if (data?.CurrentUSBFrameNumber !== undefined) view.setUint32(56, Number(data.CurrentUSBFrameNumber), true);
  // 0x3c: pad4
  return buf;
}

export class USB_FRAME_NUMBER_AND_QPC_FOR_TIME_SYNC_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TimeTrackingHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get InputFrameNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get InputMicroFrameNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get QueryPerformanceCounterAtInputFrameOrMicroFrame(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get QueryPerformanceCounterFrequency(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get PredictedAccuracyInMicroSeconds(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CurrentGenerationID(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get CurrentQueryPerformanceCounter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get CurrentHardwareFrameNumber(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get CurrentHardwareMicroFrameNumber(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get CurrentUSBFrameNumber(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set TimeTrackingHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set InputFrameNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set InputMicroFrameNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set QueryPerformanceCounterAtInputFrameOrMicroFrame(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set QueryPerformanceCounterFrequency(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set PredictedAccuracyInMicroSeconds(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CurrentGenerationID(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set CurrentQueryPerformanceCounter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set CurrentHardwareFrameNumber(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set CurrentHardwareMicroFrameNumber(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set CurrentUSBFrameNumber(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Devices.Usb.ALTERNATE_INTERFACE (size: 8)
 */
export interface ALTERNATE_INTERFACE {
  /** u16 */
  InterfaceNumber: number;
  /** u16 */
  AlternateInterfaceNumber: number;
}

export const sizeofALTERNATE_INTERFACE = 8;

export function allocALTERNATE_INTERFACE(data?: Partial<ALTERNATE_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofALTERNATE_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.InterfaceNumber !== undefined) view.setUint16(0, Number(data.InterfaceNumber), true);
  // 0x02: u16
  if (data?.AlternateInterfaceNumber !== undefined) view.setUint16(2, Number(data.AlternateInterfaceNumber), true);
  // 0x04: pad4
  return buf;
}

export class ALTERNATE_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get InterfaceNumber(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AlternateInterfaceNumber(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set InterfaceNumber(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AlternateInterfaceNumber(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_NOTIFICATION (size: 16)
 */
export interface USBFN_NOTIFICATION {
  /** Windows.Win32.Devices.Usb.USBFN_EVENT */
  Event: USBFN_EVENT;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBFN_NOTIFICATION = 16;

export function allocUSBFN_NOTIFICATION(data?: Partial<USBFN_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Event !== undefined) view.setInt32(0, Number(data.Event), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

export class USBFN_NOTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Event(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Event(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_PIPE_INFORMATION (size: 16)
 */
export interface USBFN_PIPE_INFORMATION {
  /** Windows.Win32.Devices.Usb.USB_ENDPOINT_DESCRIPTOR */
  EpDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PipeId: number;
}

export const sizeofUSBFN_PIPE_INFORMATION = 16;

export function allocUSBFN_PIPE_INFORMATION(data?: Partial<USBFN_PIPE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_PIPE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EpDesc !== undefined) view.setBigUint64(0, data.EpDesc === null ? 0n : BigInt(util.toPointer(data.EpDesc)), true);
  // 0x08: u32
  if (data?.PipeId !== undefined) view.setUint32(8, Number(data.PipeId), true);
  // 0x0c: pad4
  return buf;
}

export class USBFN_PIPE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EpDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get PipeId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set EpDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set PipeId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE (size: 16)
 */
export interface USBFN_CLASS_INTERFACE {
  /** u8 */
  InterfaceNumber: number;
  /** u8 */
  PipeCount: number;
  /** array */
  PipeArr: Deno.PointerValue | null;
}

export const sizeofUSBFN_CLASS_INTERFACE = 16;

export function allocUSBFN_CLASS_INTERFACE(data?: Partial<USBFN_CLASS_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_CLASS_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.InterfaceNumber !== undefined) view.setUint8(0, Number(data.InterfaceNumber));
  // 0x01: u8
  if (data?.PipeCount !== undefined) view.setUint8(1, Number(data.PipeCount));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.PipeArr !== undefined) view.setBigUint64(8, data.PipeArr === null ? 0n : BigInt(util.toPointer(data.PipeArr)), true);
  return buf;
}

export class USBFN_CLASS_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get InterfaceNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get PipeCount(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get PipeArr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set InterfaceNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set PipeCount(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set PipeArr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_CLASS_INFORMATION_PACKET (size: 48)
 */
export interface USBFN_CLASS_INFORMATION_PACKET {
  /** Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE */
  FullSpeedClassInterface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE */
  HighSpeedClassInterface: Uint8Array | Deno.PointerValue | null;
  /** array */
  InterfaceName: Deno.PointerValue | null;
  /** array */
  InterfaceGuid: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasInterfaceGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE */
  SuperSpeedClassInterface: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBFN_CLASS_INFORMATION_PACKET = 48;

export function allocUSBFN_CLASS_INFORMATION_PACKET(data?: Partial<USBFN_CLASS_INFORMATION_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_CLASS_INFORMATION_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FullSpeedClassInterface !== undefined) view.setBigUint64(0, data.FullSpeedClassInterface === null ? 0n : BigInt(util.toPointer(data.FullSpeedClassInterface)), true);
  // 0x08: pointer
  if (data?.HighSpeedClassInterface !== undefined) view.setBigUint64(8, data.HighSpeedClassInterface === null ? 0n : BigInt(util.toPointer(data.HighSpeedClassInterface)), true);
  // 0x10: pointer
  if (data?.InterfaceName !== undefined) view.setBigUint64(16, data.InterfaceName === null ? 0n : BigInt(util.toPointer(data.InterfaceName)), true);
  // 0x18: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(24, data.InterfaceGuid === null ? 0n : BigInt(util.toPointer(data.InterfaceGuid)), true);
  // 0x20: pointer
  if (data?.HasInterfaceGuid !== undefined) view.setBigUint64(32, data.HasInterfaceGuid === null ? 0n : BigInt(util.toPointer(data.HasInterfaceGuid)), true);
  // 0x28: pointer
  if (data?.SuperSpeedClassInterface !== undefined) view.setBigUint64(40, data.SuperSpeedClassInterface === null ? 0n : BigInt(util.toPointer(data.SuperSpeedClassInterface)), true);
  return buf;
}

export class USBFN_CLASS_INFORMATION_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FullSpeedClassInterface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get HighSpeedClassInterface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get InterfaceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get HasInterfaceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get SuperSpeedClassInterface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FullSpeedClassInterface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set HighSpeedClassInterface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set InterfaceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set HasInterfaceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set SuperSpeedClassInterface(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE_EX (size: 16)
 */
export interface USBFN_CLASS_INTERFACE_EX {
  /** u8 */
  BaseInterfaceNumber: number;
  /** u8 */
  InterfaceCount: number;
  /** u8 */
  PipeCount: number;
  /** array */
  PipeArr: Deno.PointerValue | null;
}

export const sizeofUSBFN_CLASS_INTERFACE_EX = 16;

export function allocUSBFN_CLASS_INTERFACE_EX(data?: Partial<USBFN_CLASS_INTERFACE_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_CLASS_INTERFACE_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BaseInterfaceNumber !== undefined) view.setUint8(0, Number(data.BaseInterfaceNumber));
  // 0x01: u8
  if (data?.InterfaceCount !== undefined) view.setUint8(1, Number(data.InterfaceCount));
  // 0x02: u8
  if (data?.PipeCount !== undefined) view.setUint8(2, Number(data.PipeCount));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.PipeArr !== undefined) view.setBigUint64(8, data.PipeArr === null ? 0n : BigInt(util.toPointer(data.PipeArr)), true);
  return buf;
}

export class USBFN_CLASS_INTERFACE_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get BaseInterfaceNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get InterfaceCount(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get PipeCount(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get PipeArr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set BaseInterfaceNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set InterfaceCount(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set PipeCount(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set PipeArr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_CLASS_INFORMATION_PACKET_EX (size: 48)
 */
export interface USBFN_CLASS_INFORMATION_PACKET_EX {
  /** Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE_EX */
  FullSpeedClassInterfaceEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE_EX */
  HighSpeedClassInterfaceEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Usb.USBFN_CLASS_INTERFACE_EX */
  SuperSpeedClassInterfaceEx: Uint8Array | Deno.PointerValue | null;
  /** array */
  InterfaceName: Deno.PointerValue | null;
  /** array */
  InterfaceGuid: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasInterfaceGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBFN_CLASS_INFORMATION_PACKET_EX = 48;

export function allocUSBFN_CLASS_INFORMATION_PACKET_EX(data?: Partial<USBFN_CLASS_INFORMATION_PACKET_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_CLASS_INFORMATION_PACKET_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FullSpeedClassInterfaceEx !== undefined) view.setBigUint64(0, data.FullSpeedClassInterfaceEx === null ? 0n : BigInt(util.toPointer(data.FullSpeedClassInterfaceEx)), true);
  // 0x08: pointer
  if (data?.HighSpeedClassInterfaceEx !== undefined) view.setBigUint64(8, data.HighSpeedClassInterfaceEx === null ? 0n : BigInt(util.toPointer(data.HighSpeedClassInterfaceEx)), true);
  // 0x10: pointer
  if (data?.SuperSpeedClassInterfaceEx !== undefined) view.setBigUint64(16, data.SuperSpeedClassInterfaceEx === null ? 0n : BigInt(util.toPointer(data.SuperSpeedClassInterfaceEx)), true);
  // 0x18: pointer
  if (data?.InterfaceName !== undefined) view.setBigUint64(24, data.InterfaceName === null ? 0n : BigInt(util.toPointer(data.InterfaceName)), true);
  // 0x20: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(32, data.InterfaceGuid === null ? 0n : BigInt(util.toPointer(data.InterfaceGuid)), true);
  // 0x28: pointer
  if (data?.HasInterfaceGuid !== undefined) view.setBigUint64(40, data.HasInterfaceGuid === null ? 0n : BigInt(util.toPointer(data.HasInterfaceGuid)), true);
  return buf;
}

export class USBFN_CLASS_INFORMATION_PACKET_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get FullSpeedClassInterfaceEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get HighSpeedClassInterfaceEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SuperSpeedClassInterfaceEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InterfaceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get HasInterfaceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set FullSpeedClassInterfaceEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set HighSpeedClassInterfaceEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SuperSpeedClassInterfaceEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InterfaceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set HasInterfaceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_INTERFACE_INFO (size: 16)
 */
export interface USBFN_INTERFACE_INFO {
  /** u8 */
  InterfaceNumber: number;
  /** Windows.Win32.Devices.Usb.USBFN_BUS_SPEED */
  Speed: USBFN_BUS_SPEED;
  /** u16 */
  Size: number;
  /** array */
  InterfaceDescriptorSet: Deno.PointerValue | null;
}

export const sizeofUSBFN_INTERFACE_INFO = 16;

export function allocUSBFN_INTERFACE_INFO(data?: Partial<USBFN_INTERFACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_INTERFACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.InterfaceNumber !== undefined) view.setUint8(0, Number(data.InterfaceNumber));
  // 0x01: i32
  if (data?.Speed !== undefined) view.setInt32(1, Number(data.Speed), true);
  // 0x05: u16
  if (data?.Size !== undefined) view.setUint16(5, Number(data.Size), true);
  // 0x07: pad1
  // 0x08: pointer
  if (data?.InterfaceDescriptorSet !== undefined) view.setBigUint64(8, data.InterfaceDescriptorSet === null ? 0n : BigInt(util.toPointer(data.InterfaceDescriptorSet)), true);
  return buf;
}

export class USBFN_INTERFACE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get InterfaceNumber(): number {
    return this.view.getUint8(0);
  }

  // 0x01: i32
  get Speed(): number {
    return this.view.getInt32(1, true);
  }

  // 0x05: u16
  get Size(): number {
    return this.view.getUint16(5, true);
  }

  // 0x07: pad1

  // 0x08: pointer
  get InterfaceDescriptorSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set InterfaceNumber(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: i32
  set Speed(value: number) {
    this.view.setInt32(1, value, true);
  }

  // 0x05: u16
  set Size(value: number) {
    this.view.setUint16(5, value, true);
  }

  // 0x07: pad1

  // 0x08: pointer
  set InterfaceDescriptorSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_USB_STRING (size: 16)
 */
export interface USBFN_USB_STRING {
  /** u8 */
  StringIndex: number;
  /** array */
  UsbString: Deno.PointerValue | null;
}

export const sizeofUSBFN_USB_STRING = 16;

export function allocUSBFN_USB_STRING(data?: Partial<USBFN_USB_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_USB_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.StringIndex !== undefined) view.setUint8(0, Number(data.StringIndex));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.UsbString !== undefined) view.setBigUint64(8, data.UsbString === null ? 0n : BigInt(util.toPointer(data.UsbString)), true);
  return buf;
}

export class USBFN_USB_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get StringIndex(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get UsbString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set StringIndex(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set UsbString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBFN_BUS_CONFIGURATION_INFO (size: 24)
 */
export interface USBFN_BUS_CONFIGURATION_INFO {
  /** array */
  ConfigurationName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsCurrent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsActive: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSBFN_BUS_CONFIGURATION_INFO = 24;

export function allocUSBFN_BUS_CONFIGURATION_INFO(data?: Partial<USBFN_BUS_CONFIGURATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBFN_BUS_CONFIGURATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ConfigurationName !== undefined) view.setBigUint64(0, data.ConfigurationName === null ? 0n : BigInt(util.toPointer(data.ConfigurationName)), true);
  // 0x08: pointer
  if (data?.IsCurrent !== undefined) view.setBigUint64(8, data.IsCurrent === null ? 0n : BigInt(util.toPointer(data.IsCurrent)), true);
  // 0x10: pointer
  if (data?.IsActive !== undefined) view.setBigUint64(16, data.IsActive === null ? 0n : BigInt(util.toPointer(data.IsActive)), true);
  return buf;
}

export class USBFN_BUS_CONFIGURATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ConfigurationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IsCurrent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get IsActive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ConfigurationName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IsCurrent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set IsActive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.DRV_VERSION (size: 16)
 */
export interface DRV_VERSION {
  /** u32 */
  major: number;
  /** u32 */
  minor: number;
  /** u32 */
  internal: number;
}

export const sizeofDRV_VERSION = 16;

export function allocDRV_VERSION(data?: Partial<DRV_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofDRV_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.major !== undefined) view.setUint32(0, Number(data.major), true);
  // 0x04: u32
  if (data?.minor !== undefined) view.setUint32(4, Number(data.minor), true);
  // 0x08: u32
  if (data?.internal !== undefined) view.setUint32(8, Number(data.internal), true);
  // 0x0c: pad4
  return buf;
}

export class DRV_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get major(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get minor(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get internal(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set major(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set minor(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set internal(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb.IO_BLOCK (size: 24)
 */
export interface IO_BLOCK {
  /** u32 */
  uOffset: number;
  /** u32 */
  uLength: number;
  /** ptr */
  pbyData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  uIndex: number;
}

export const sizeofIO_BLOCK = 24;

export function allocIO_BLOCK(data?: Partial<IO_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uOffset !== undefined) view.setUint32(0, Number(data.uOffset), true);
  // 0x04: u32
  if (data?.uLength !== undefined) view.setUint32(4, Number(data.uLength), true);
  // 0x08: pointer
  if (data?.pbyData !== undefined) view.setBigUint64(8, data.pbyData === null ? 0n : BigInt(util.toPointer(data.pbyData)), true);
  // 0x10: u32
  if (data?.uIndex !== undefined) view.setUint32(16, Number(data.uIndex), true);
  // 0x14: pad4
  return buf;
}

export class IO_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbyData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get uIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set uOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbyData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set uIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.Usb.IO_BLOCK_EX (size: 24)
 */
export interface IO_BLOCK_EX {
  /** u32 */
  uOffset: number;
  /** u32 */
  uLength: number;
  /** ptr */
  pbyData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  uIndex: number;
  /** u8 */
  bRequest: number;
  /** u8 */
  bmRequestType: number;
  /** u8 */
  fTransferDirectionIn: number;
}

export const sizeofIO_BLOCK_EX = 24;

export function allocIO_BLOCK_EX(data?: Partial<IO_BLOCK_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIO_BLOCK_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uOffset !== undefined) view.setUint32(0, Number(data.uOffset), true);
  // 0x04: u32
  if (data?.uLength !== undefined) view.setUint32(4, Number(data.uLength), true);
  // 0x08: pointer
  if (data?.pbyData !== undefined) view.setBigUint64(8, data.pbyData === null ? 0n : BigInt(util.toPointer(data.pbyData)), true);
  // 0x10: u32
  if (data?.uIndex !== undefined) view.setUint32(16, Number(data.uIndex), true);
  // 0x14: u8
  if (data?.bRequest !== undefined) view.setUint8(20, Number(data.bRequest));
  // 0x15: u8
  if (data?.bmRequestType !== undefined) view.setUint8(21, Number(data.bmRequestType));
  // 0x16: u8
  if (data?.fTransferDirectionIn !== undefined) view.setUint8(22, Number(data.fTransferDirectionIn));
  // 0x17: pad1
  return buf;
}

export class IO_BLOCK_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbyData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get uIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u8
  get bRequest(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get bmRequestType(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get fTransferDirectionIn(): number {
    return this.view.getUint8(22);
  }

  // 0x17: pad1

  // 0x00: u32
  set uOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbyData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set uIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u8
  set bRequest(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set bmRequestType(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set fTransferDirectionIn(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: pad1
}

/**
 * Windows.Win32.Devices.Usb.CHANNEL_INFO (size: 16)
 */
export interface CHANNEL_INFO {
  /** u32 */
  EventChannelSize: number;
  /** u32 */
  uReadDataAlignment: number;
  /** u32 */
  uWriteDataAlignment: number;
}

export const sizeofCHANNEL_INFO = 16;

export function allocCHANNEL_INFO(data?: Partial<CHANNEL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANNEL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EventChannelSize !== undefined) view.setUint32(0, Number(data.EventChannelSize), true);
  // 0x04: u32
  if (data?.uReadDataAlignment !== undefined) view.setUint32(4, Number(data.uReadDataAlignment), true);
  // 0x08: u32
  if (data?.uWriteDataAlignment !== undefined) view.setUint32(8, Number(data.uWriteDataAlignment), true);
  // 0x0c: pad4
  return buf;
}

export class CHANNEL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EventChannelSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uReadDataAlignment(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uWriteDataAlignment(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set EventChannelSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uReadDataAlignment(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uWriteDataAlignment(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.Usb.USBSCAN_GET_DESCRIPTOR (size: 8)
 */
export interface USBSCAN_GET_DESCRIPTOR {
  /** u8 */
  DescriptorType: number;
  /** u8 */
  Index: number;
  /** u16 */
  LanguageId: number;
}

export const sizeofUSBSCAN_GET_DESCRIPTOR = 8;

export function allocUSBSCAN_GET_DESCRIPTOR(data?: Partial<USBSCAN_GET_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBSCAN_GET_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.DescriptorType !== undefined) view.setUint8(0, Number(data.DescriptorType));
  // 0x01: u8
  if (data?.Index !== undefined) view.setUint8(1, Number(data.Index));
  // 0x02: u16
  if (data?.LanguageId !== undefined) view.setUint16(2, Number(data.LanguageId), true);
  // 0x04: pad4
  return buf;
}

export class USBSCAN_GET_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get DescriptorType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Index(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get LanguageId(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set DescriptorType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Index(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set LanguageId(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.Usb.DEVICE_DESCRIPTOR (size: 8)
 */
export interface DEVICE_DESCRIPTOR {
  /** u16 */
  usVendorId: number;
  /** u16 */
  usProductId: number;
  /** u16 */
  usBcdDevice: number;
  /** u16 */
  usLanguageId: number;
}

export const sizeofDEVICE_DESCRIPTOR = 8;

export function allocDEVICE_DESCRIPTOR(data?: Partial<DEVICE_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICE_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usVendorId !== undefined) view.setUint16(0, Number(data.usVendorId), true);
  // 0x02: u16
  if (data?.usProductId !== undefined) view.setUint16(2, Number(data.usProductId), true);
  // 0x04: u16
  if (data?.usBcdDevice !== undefined) view.setUint16(4, Number(data.usBcdDevice), true);
  // 0x06: u16
  if (data?.usLanguageId !== undefined) view.setUint16(6, Number(data.usLanguageId), true);
  return buf;
}

export class DEVICE_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usVendorId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usProductId(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get usBcdDevice(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get usLanguageId(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set usVendorId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usProductId(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set usBcdDevice(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set usLanguageId(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBSCAN_PIPE_INFORMATION (size: 8)
 */
export interface USBSCAN_PIPE_INFORMATION {
  /** u16 */
  MaximumPacketSize: number;
  /** u8 */
  EndpointAddress: number;
  /** u8 */
  Interval: number;
  /** Windows.Win32.Devices.Usb.RAW_PIPE_TYPE */
  PipeType: RAW_PIPE_TYPE;
}

export const sizeofUSBSCAN_PIPE_INFORMATION = 8;

export function allocUSBSCAN_PIPE_INFORMATION(data?: Partial<USBSCAN_PIPE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBSCAN_PIPE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MaximumPacketSize !== undefined) view.setUint16(0, Number(data.MaximumPacketSize), true);
  // 0x02: u8
  if (data?.EndpointAddress !== undefined) view.setUint8(2, Number(data.EndpointAddress));
  // 0x03: u8
  if (data?.Interval !== undefined) view.setUint8(3, Number(data.Interval));
  // 0x04: i32
  if (data?.PipeType !== undefined) view.setInt32(4, Number(data.PipeType), true);
  return buf;
}

export class USBSCAN_PIPE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MaximumPacketSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get EndpointAddress(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Interval(): number {
    return this.view.getUint8(3);
  }

  // 0x04: i32
  get PipeType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u16
  set MaximumPacketSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set EndpointAddress(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Interval(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: i32
  set PipeType(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBSCAN_PIPE_CONFIGURATION (size: 16)
 */
export interface USBSCAN_PIPE_CONFIGURATION {
  /** u32 */
  NumberOfPipes: number;
  /** array */
  PipeInfo: Deno.PointerValue | null;
}

export const sizeofUSBSCAN_PIPE_CONFIGURATION = 16;

export function allocUSBSCAN_PIPE_CONFIGURATION(data?: Partial<USBSCAN_PIPE_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBSCAN_PIPE_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumberOfPipes !== undefined) view.setUint32(0, Number(data.NumberOfPipes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PipeInfo !== undefined) view.setBigUint64(8, data.PipeInfo === null ? 0n : BigInt(util.toPointer(data.PipeInfo)), true);
  return buf;
}

export class USBSCAN_PIPE_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumberOfPipes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PipeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set NumberOfPipes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PipeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Usb.USBSCAN_TIMEOUT (size: 16)
 */
export interface USBSCAN_TIMEOUT {
  /** u32 */
  TimeoutRead: number;
  /** u32 */
  TimeoutWrite: number;
  /** u32 */
  TimeoutEvent: number;
}

export const sizeofUSBSCAN_TIMEOUT = 16;

export function allocUSBSCAN_TIMEOUT(data?: Partial<USBSCAN_TIMEOUT>): Uint8Array {
  const buf = new Uint8Array(sizeofUSBSCAN_TIMEOUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TimeoutRead !== undefined) view.setUint32(0, Number(data.TimeoutRead), true);
  // 0x04: u32
  if (data?.TimeoutWrite !== undefined) view.setUint32(4, Number(data.TimeoutWrite), true);
  // 0x08: u32
  if (data?.TimeoutEvent !== undefined) view.setUint32(8, Number(data.TimeoutEvent), true);
  // 0x0c: pad4
  return buf;
}

export class USBSCAN_TIMEOUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TimeoutRead(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get TimeoutWrite(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get TimeoutEvent(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set TimeoutRead(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set TimeoutWrite(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set TimeoutEvent(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type BOOL = number;

// Native Libraries

try {
  var libWINUSB_dll = Deno.dlopen("WINUSB.dll", {
    WinUsb_Initialize: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinUsb_Free: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinUsb_GetAssociatedInterface: {
      parameters: ["pointer", "u8", "pointer"],
      result: "i32",
    },
    WinUsb_GetDescriptor: {
      parameters: ["pointer", "u8", "u8", "u16", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WinUsb_QueryInterfaceSettings: {
      parameters: ["pointer", "u8", "pointer"],
      result: "i32",
    },
    WinUsb_QueryDeviceInformation: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_SetCurrentAlternateSetting: {
      parameters: ["pointer", "u8"],
      result: "i32",
    },
    WinUsb_GetCurrentAlternateSetting: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinUsb_QueryPipe: {
      parameters: ["pointer", "u8", "u8", "pointer"],
      result: "i32",
    },
    WinUsb_QueryPipeEx: {
      parameters: ["pointer", "u8", "u8", "pointer"],
      result: "i32",
    },
    WinUsb_SetPipePolicy: {
      parameters: ["pointer", "u8", "u32", "u32", "pointer"],
      result: "i32",
    },
    WinUsb_GetPipePolicy: {
      parameters: ["pointer", "u8", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_ReadPipe: {
      parameters: ["pointer", "u8", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_WritePipe: {
      parameters: ["pointer", "u8", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_ControlTransfer: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_ResetPipe: {
      parameters: ["pointer", "u8"],
      result: "i32",
    },
    WinUsb_AbortPipe: {
      parameters: ["pointer", "u8"],
      result: "i32",
    },
    WinUsb_FlushPipe: {
      parameters: ["pointer", "u8"],
      result: "i32",
    },
    WinUsb_SetPowerPolicy: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    WinUsb_GetPowerPolicy: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_GetOverlappedResult: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    WinUsb_ParseConfigurationDescriptor: {
      parameters: ["pointer", "pointer", "i32", "i32", "i32", "i32", "i32"],
      result: "pointer",
    },
    WinUsb_ParseDescriptors: {
      parameters: ["pointer", "u32", "pointer", "i32"],
      result: "pointer",
    },
    WinUsb_GetCurrentFrameNumber: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_GetAdjustedFrameNumber: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinUsb_RegisterIsochBuffer: {
      parameters: ["pointer", "u8", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WinUsb_UnregisterIsochBuffer: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinUsb_WriteIsochPipe: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_ReadIsochPipe: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_WriteIsochPipeAsap: {
      parameters: ["pointer", "u32", "u32", "i32", "pointer"],
      result: "i32",
    },
    WinUsb_ReadIsochPipeAsap: {
      parameters: ["pointer", "u32", "u32", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinUsb_StartTrackingForTimeSync: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinUsb_GetCurrentFrameNumberAndQpc: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinUsb_StopTrackingForTimeSync: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WinUsb_Initialize(
  DeviceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_Initialize(util.toPointer(DeviceHandle), util.toPointer(InterfaceHandle)));
}

export function WinUsb_Free(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_Free(util.toPointer(InterfaceHandle)));
}

export function WinUsb_GetAssociatedInterface(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  AssociatedInterfaceIndex: number /* u8 */,
  AssociatedInterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetAssociatedInterface(util.toPointer(InterfaceHandle), AssociatedInterfaceIndex, util.toPointer(AssociatedInterfaceHandle)));
}

export function WinUsb_GetDescriptor(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorType: number /* u8 */,
  Index: number /* u8 */,
  LanguageID: number /* u16 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  LengthTransferred: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetDescriptor(util.toPointer(InterfaceHandle), DescriptorType, Index, LanguageID, util.toPointer(Buffer), BufferLength, util.toPointer(LengthTransferred)));
}

export function WinUsb_QueryInterfaceSettings(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternateInterfaceNumber: number /* u8 */,
  UsbAltInterfaceDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_QueryInterfaceSettings(util.toPointer(InterfaceHandle), AlternateInterfaceNumber, util.toPointer(UsbAltInterfaceDescriptor)));
}

export function WinUsb_QueryDeviceInformation(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  InformationType: number /* u32 */,
  BufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_QueryDeviceInformation(util.toPointer(InterfaceHandle), InformationType, util.toPointer(BufferLength), util.toPointer(Buffer)));
}

export function WinUsb_SetCurrentAlternateSetting(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SettingNumber: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_SetCurrentAlternateSetting(util.toPointer(InterfaceHandle), SettingNumber));
}

export function WinUsb_GetCurrentAlternateSetting(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SettingNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetCurrentAlternateSetting(util.toPointer(InterfaceHandle), util.toPointer(SettingNumber)));
}

export function WinUsb_QueryPipe(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternateInterfaceNumber: number /* u8 */,
  PipeIndex: number /* u8 */,
  PipeInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_QueryPipe(util.toPointer(InterfaceHandle), AlternateInterfaceNumber, PipeIndex, util.toPointer(PipeInformation)));
}

export function WinUsb_QueryPipeEx(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  AlternateSettingNumber: number /* u8 */,
  PipeIndex: number /* u8 */,
  PipeInformationEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_QueryPipeEx(util.toPointer(InterfaceHandle), AlternateSettingNumber, PipeIndex, util.toPointer(PipeInformationEx)));
}

export function WinUsb_SetPipePolicy(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
  PolicyType: number /* u32 */,
  ValueLength: number /* u32 */,
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_SetPipePolicy(util.toPointer(InterfaceHandle), PipeID, PolicyType, ValueLength, util.toPointer(Value)));
}

export function WinUsb_GetPipePolicy(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
  PolicyType: number /* u32 */,
  ValueLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetPipePolicy(util.toPointer(InterfaceHandle), PipeID, PolicyType, util.toPointer(ValueLength), util.toPointer(Value)));
}

export function WinUsb_ReadPipe(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  LengthTransferred: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_ReadPipe(util.toPointer(InterfaceHandle), PipeID, util.toPointer(Buffer), BufferLength, util.toPointer(LengthTransferred), util.toPointer(Overlapped)));
}

export function WinUsb_WritePipe(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  LengthTransferred: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_WritePipe(util.toPointer(InterfaceHandle), PipeID, util.toPointer(Buffer), BufferLength, util.toPointer(LengthTransferred), util.toPointer(Overlapped)));
}

export function WinUsb_ControlTransfer(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  SetupPacket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.Usb.WINUSB_SETUP_PACKET */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  LengthTransferred: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_ControlTransfer(util.toPointer(InterfaceHandle), util.toPointer(SetupPacket), util.toPointer(Buffer), BufferLength, util.toPointer(LengthTransferred), util.toPointer(Overlapped)));
}

export function WinUsb_ResetPipe(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_ResetPipe(util.toPointer(InterfaceHandle), PipeID));
}

export function WinUsb_AbortPipe(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_AbortPipe(util.toPointer(InterfaceHandle), PipeID));
}

export function WinUsb_FlushPipe(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_FlushPipe(util.toPointer(InterfaceHandle), PipeID));
}

export function WinUsb_SetPowerPolicy(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PolicyType: number /* u32 */,
  ValueLength: number /* u32 */,
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_SetPowerPolicy(util.toPointer(InterfaceHandle), PolicyType, ValueLength, util.toPointer(Value)));
}

export function WinUsb_GetPowerPolicy(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PolicyType: number /* u32 */,
  ValueLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetPowerPolicy(util.toPointer(InterfaceHandle), PolicyType, util.toPointer(ValueLength), util.toPointer(Value)));
}

export function WinUsb_GetOverlappedResult(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpNumberOfBytesTransferred: Deno.PointerValue | Uint8Array | null /* ptr */,
  bWait: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetOverlappedResult(util.toPointer(InterfaceHandle), util.toPointer(lpOverlapped), util.toPointer(lpNumberOfBytesTransferred), util.boolToFfi(bWait)));
}

export function WinUsb_ParseConfigurationDescriptor(
  ConfigurationDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  StartPosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  InterfaceNumber: number /* i32 */,
  AlternateSetting: number /* i32 */,
  InterfaceClass: number /* i32 */,
  InterfaceSubClass: number /* i32 */,
  InterfaceProtocol: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWINUSB_dll.WinUsb_ParseConfigurationDescriptor(util.toPointer(ConfigurationDescriptor), util.toPointer(StartPosition), InterfaceNumber, AlternateSetting, InterfaceClass, InterfaceSubClass, InterfaceProtocol));
}

export function WinUsb_ParseDescriptors(
  DescriptorBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  TotalLength: number /* u32 */,
  StartPosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  DescriptorType: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWINUSB_dll.WinUsb_ParseDescriptors(util.toPointer(DescriptorBuffer), TotalLength, util.toPointer(StartPosition), DescriptorType));
}

export function WinUsb_GetCurrentFrameNumber(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurrentFrameNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimeStamp: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetCurrentFrameNumber(util.toPointer(InterfaceHandle), util.toPointer(CurrentFrameNumber), util.toPointer(TimeStamp)));
}

export function WinUsb_GetAdjustedFrameNumber(
  CurrentFrameNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimeStamp: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LARGE_INTEGER */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetAdjustedFrameNumber(util.toPointer(CurrentFrameNumber), util.toPointer(TimeStamp)));
}

export function WinUsb_RegisterIsochBuffer(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  PipeID: number /* u8 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  IsochBufferHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_RegisterIsochBuffer(util.toPointer(InterfaceHandle), PipeID, util.toPointer(Buffer), BufferLength, util.toPointer(IsochBufferHandle)));
}

export function WinUsb_UnregisterIsochBuffer(
  IsochBufferHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_UnregisterIsochBuffer(util.toPointer(IsochBufferHandle)));
}

export function WinUsb_WriteIsochPipe(
  BufferHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number /* u32 */,
  Length: number /* u32 */,
  FrameNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_WriteIsochPipe(util.toPointer(BufferHandle), Offset, Length, util.toPointer(FrameNumber), util.toPointer(Overlapped)));
}

export function WinUsb_ReadIsochPipe(
  BufferHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number /* u32 */,
  Length: number /* u32 */,
  FrameNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
  NumberOfPackets: number /* u32 */,
  IsoPacketDescriptors: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_ReadIsochPipe(util.toPointer(BufferHandle), Offset, Length, util.toPointer(FrameNumber), NumberOfPackets, util.toPointer(IsoPacketDescriptors), util.toPointer(Overlapped)));
}

export function WinUsb_WriteIsochPipeAsap(
  BufferHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number /* u32 */,
  Length: number /* u32 */,
  ContinueStream: boolean /* Windows.Win32.Foundation.BOOL */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_WriteIsochPipeAsap(util.toPointer(BufferHandle), Offset, Length, util.boolToFfi(ContinueStream), util.toPointer(Overlapped)));
}

export function WinUsb_ReadIsochPipeAsap(
  BufferHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Offset: number /* u32 */,
  Length: number /* u32 */,
  ContinueStream: boolean /* Windows.Win32.Foundation.BOOL */,
  NumberOfPackets: number /* u32 */,
  IsoPacketDescriptors: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_ReadIsochPipeAsap(util.toPointer(BufferHandle), Offset, Length, util.boolToFfi(ContinueStream), NumberOfPackets, util.toPointer(IsoPacketDescriptors), util.toPointer(Overlapped)));
}

export function WinUsb_StartTrackingForTimeSync(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  StartTrackingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_StartTrackingForTimeSync(util.toPointer(InterfaceHandle), util.toPointer(StartTrackingInfo)));
}

export function WinUsb_GetCurrentFrameNumberAndQpc(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  FrameQpcInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_GetCurrentFrameNumberAndQpc(util.toPointer(InterfaceHandle), util.toPointer(FrameQpcInfo)));
}

export function WinUsb_StopTrackingForTimeSync(
  InterfaceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  StopTrackingInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINUSB_dll.WinUsb_StopTrackingForTimeSync(util.toPointer(InterfaceHandle), util.toPointer(StopTrackingInfo)));
}

