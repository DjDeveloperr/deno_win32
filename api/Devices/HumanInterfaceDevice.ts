/// Auto-generated by Deno Win32: Windows.Win32.Devices.HumanInterfaceDevice.Apis

import * as util from "../../util.ts";

// Enums
export type HIDP_REPORT_TYPE = number;
export type HIDP_KEYBOARD_DIRECTION = number;
export type GPIOBUTTONS_BUTTON_TYPE = number;

// Constants
export const DIRECTINPUT_VERSION = 2048;
export const JOY_HW_NONE = 0;
export const JOY_HW_CUSTOM = 1;
export const JOY_HW_2A_2B_GENERIC = 2;
export const JOY_HW_2A_4B_GENERIC = 3;
export const JOY_HW_2B_GAMEPAD = 4;
export const JOY_HW_2B_FLIGHTYOKE = 5;
export const JOY_HW_2B_FLIGHTYOKETHROTTLE = 6;
export const JOY_HW_3A_2B_GENERIC = 7;
export const JOY_HW_3A_4B_GENERIC = 8;
export const JOY_HW_4B_GAMEPAD = 9;
export const JOY_HW_4B_FLIGHTYOKE = 10;
export const JOY_HW_4B_FLIGHTYOKETHROTTLE = 11;
export const JOY_HW_TWO_2A_2B_WITH_Y = 12;
export const JOY_HW_LASTENTRY = 13;
export const JOY_ISCAL_XY = 1;
export const JOY_ISCAL_Z = 2;
export const JOY_ISCAL_R = 4;
export const JOY_ISCAL_U = 8;
export const JOY_ISCAL_V = 16;
export const JOY_ISCAL_POV = 32;
export const JOY_POV_NUMDIRS = 4;
export const JOY_POVVAL_FORWARD = 0;
export const JOY_POVVAL_BACKWARD = 1;
export const JOY_POVVAL_LEFT = 2;
export const JOY_POVVAL_RIGHT = 3;
export const JOY_HWS_HASZ = 1;
export const JOY_HWS_HASPOV = 2;
export const JOY_HWS_POVISBUTTONCOMBOS = 4;
export const JOY_HWS_POVISPOLL = 8;
export const JOY_HWS_ISYOKE = 16;
export const JOY_HWS_ISGAMEPAD = 32;
export const JOY_HWS_ISCARCTRL = 64;
export const JOY_HWS_XISJ1Y = 128;
export const JOY_HWS_XISJ2X = 256;
export const JOY_HWS_XISJ2Y = 512;
export const JOY_HWS_YISJ1X = 1024;
export const JOY_HWS_YISJ2X = 2048;
export const JOY_HWS_YISJ2Y = 4096;
export const JOY_HWS_ZISJ1X = 8192;
export const JOY_HWS_ZISJ1Y = 16384;
export const JOY_HWS_ZISJ2X = 32768;
export const JOY_HWS_POVISJ1X = 65536;
export const JOY_HWS_POVISJ1Y = 131072;
export const JOY_HWS_POVISJ2X = 262144;
export const JOY_HWS_HASR = 524288;
export const JOY_HWS_RISJ1X = 1048576;
export const JOY_HWS_RISJ1Y = 2097152;
export const JOY_HWS_RISJ2Y = 4194304;
export const JOY_HWS_HASU = 8388608;
export const JOY_HWS_HASV = 16777216;
export const JOY_US_HASRUDDER = 1;
export const JOY_US_PRESENT = 2;
export const JOY_US_ISOEM = 4;
export const JOY_US_RESERVED = `-2147483648`;
export const JOYTYPE_ZEROGAMEENUMOEMDATA = 1;
export const JOYTYPE_NOAUTODETECTGAMEPORT = 2;
export const JOYTYPE_NOHIDDIRECT = 4;
export const JOYTYPE_ANALOGCOMPAT = 8;
export const JOYTYPE_DEFAULTPROPSHEET = `-2147483648`;
export const JOYTYPE_DEVICEHIDE = 65536;
export const JOYTYPE_MOUSEHIDE = 131072;
export const JOYTYPE_KEYBHIDE = 262144;
export const JOYTYPE_GAMEHIDE = 524288;
export const JOYTYPE_HIDEACTIVE = 1048576;
export const JOYTYPE_INFOMASK = 14680064;
export const JOYTYPE_INFODEFAULT = 0;
export const JOYTYPE_INFOYYPEDALS = 2097152;
export const JOYTYPE_INFOZYPEDALS = 4194304;
export const JOYTYPE_INFOYRPEDALS = 6291456;
export const JOYTYPE_INFOZRPEDALS = 8388608;
export const JOYTYPE_INFOZISSLIDER = 2097152;
export const JOYTYPE_INFOZISZ = 4194304;
export const JOYTYPE_ENABLEINPUTREPORT = 16777216;
export const MAX_JOYSTRING = 256;
export const MAX_JOYSTICKOEMVXDNAME = 260;
export const DITC_REGHWSETTINGS = 1;
export const DITC_CLSIDCONFIG = 2;
export const DITC_DISPLAYNAME = 4;
export const DITC_CALLOUT = 8;
export const DITC_HARDWAREID = 16;
export const DITC_FLAGS1 = 32;
export const DITC_FLAGS2 = 64;
export const DITC_MAPFILE = 128;
export const DIJC_GUIDINSTANCE = 1;
export const DIJC_REGHWCONFIGTYPE = 2;
export const DIJC_GAIN = 4;
export const DIJC_CALLOUT = 8;
export const DIJC_WDMGAMEPORT = 16;
export const DIJU_USERVALUES = 1;
export const DIJU_GLOBALDRIVER = 2;
export const DIJU_GAMEPORTEMULATOR = 4;
export const DIRECTINPUT_NOTIFICATION_MSGSTRINGA = `DIRECTINPUT_NOTIFICATION_MSGSTRING`;
export const DIRECTINPUT_NOTIFICATION_MSGSTRINGW = `DIRECTINPUT_NOTIFICATION_MSGSTRING`;
export const DIRECTINPUT_NOTIFICATION_MSGSTRING = `DIRECTINPUT_NOTIFICATION_MSGSTRING`;
export const DIMSGWP_NEWAPPSTART = 1;
export const DIMSGWP_DX8APPSTART = 2;
export const DIMSGWP_DX8MAPPERAPPSTART = 3;
export const DIAPPIDFLAG_NOTIME = 1;
export const DIAPPIDFLAG_NOSIZE = 2;
export const DIRECTINPUT_REGSTR_VAL_APPIDFLAGA = `AppIdFlag`;
export const DIRECTINPUT_REGSTR_KEY_LASTAPPA = `MostRecentApplication`;
export const DIRECTINPUT_REGSTR_KEY_LASTMAPAPPA = `MostRecentMapperApplication`;
export const DIRECTINPUT_REGSTR_VAL_VERSIONA = `Version`;
export const DIRECTINPUT_REGSTR_VAL_NAMEA = `Name`;
export const DIRECTINPUT_REGSTR_VAL_IDA = `Id`;
export const DIRECTINPUT_REGSTR_VAL_MAPPERA = `UsesMapper`;
export const DIRECTINPUT_REGSTR_VAL_LASTSTARTA = `MostRecentStart`;
export const DIRECTINPUT_REGSTR_VAL_APPIDFLAGW = `AppIdFlag`;
export const DIRECTINPUT_REGSTR_KEY_LASTAPPW = `MostRecentApplication`;
export const DIRECTINPUT_REGSTR_KEY_LASTMAPAPPW = `MostRecentMapperApplication`;
export const DIRECTINPUT_REGSTR_VAL_VERSIONW = `Version`;
export const DIRECTINPUT_REGSTR_VAL_NAMEW = `Name`;
export const DIRECTINPUT_REGSTR_VAL_IDW = `Id`;
export const DIRECTINPUT_REGSTR_VAL_MAPPERW = `UsesMapper`;
export const DIRECTINPUT_REGSTR_VAL_LASTSTARTW = `MostRecentStart`;
export const DIRECTINPUT_REGSTR_VAL_APPIDFLAG = `AppIdFlag`;
export const DIRECTINPUT_REGSTR_KEY_LASTAPP = `MostRecentApplication`;
export const DIRECTINPUT_REGSTR_KEY_LASTMAPAPP = `MostRecentMapperApplication`;
export const DIRECTINPUT_REGSTR_VAL_VERSION = `Version`;
export const DIRECTINPUT_REGSTR_VAL_NAME = `Name`;
export const DIRECTINPUT_REGSTR_VAL_ID = `Id`;
export const DIRECTINPUT_REGSTR_VAL_MAPPER = `UsesMapper`;
export const DIRECTINPUT_REGSTR_VAL_LASTSTART = `MostRecentStart`;
export const DIERR_NOMOREITEMS = 7277911609518260483n;
export const DIERR_DRIVERFIRST = `-2147220736`;
export const DIERR_DRIVERLAST = `-2147220481`;
export const DIERR_INVALIDCLASSINSTALLER = `-2147220480`;
export const DIERR_CANCELLED = `-2147220479`;
export const DIERR_BADINF = `-2147220478`;
export const DIDIFT_DELETE = 16777216;
export const HID_REVISION = 1;
export const HID_USAGE_PAGE_UNDEFINED = 0;
export const HID_USAGE_PAGE_GENERIC = 1;
export const HID_USAGE_PAGE_SIMULATION = 2;
export const HID_USAGE_PAGE_VR = 3;
export const HID_USAGE_PAGE_SPORT = 4;
export const HID_USAGE_PAGE_GAME = 5;
export const HID_USAGE_PAGE_GENERIC_DEVICE = 6;
export const HID_USAGE_PAGE_KEYBOARD = 7;
export const HID_USAGE_PAGE_LED = 8;
export const HID_USAGE_PAGE_BUTTON = 9;
export const HID_USAGE_PAGE_ORDINAL = 10;
export const HID_USAGE_PAGE_TELEPHONY = 11;
export const HID_USAGE_PAGE_CONSUMER = 12;
export const HID_USAGE_PAGE_DIGITIZER = 13;
export const HID_USAGE_PAGE_HAPTICS = 14;
export const HID_USAGE_PAGE_PID = 15;
export const HID_USAGE_PAGE_UNICODE = 16;
export const HID_USAGE_PAGE_ALPHANUMERIC = 20;
export const HID_USAGE_PAGE_SENSOR = 32;
export const HID_USAGE_PAGE_LIGHTING_ILLUMINATION = 89;
export const HID_USAGE_PAGE_BARCODE_SCANNER = 140;
export const HID_USAGE_PAGE_WEIGHING_DEVICE = 141;
export const HID_USAGE_PAGE_MAGNETIC_STRIPE_READER = 142;
export const HID_USAGE_PAGE_CAMERA_CONTROL = 144;
export const HID_USAGE_PAGE_ARCADE = 145;
export const HID_USAGE_PAGE_MICROSOFT_BLUETOOTH_HANDSFREE = 65523;
export const HID_USAGE_PAGE_VENDOR_DEFINED_BEGIN = 65280;
export const HID_USAGE_PAGE_VENDOR_DEFINED_END = 65535;
export const HID_USAGE_GENERIC_POINTER = 1;
export const HID_USAGE_GENERIC_MOUSE = 2;
export const HID_USAGE_GENERIC_JOYSTICK = 4;
export const HID_USAGE_GENERIC_GAMEPAD = 5;
export const HID_USAGE_GENERIC_KEYBOARD = 6;
export const HID_USAGE_GENERIC_KEYPAD = 7;
export const HID_USAGE_GENERIC_MULTI_AXIS_CONTROLLER = 8;
export const HID_USAGE_GENERIC_TABLET_PC_SYSTEM_CTL = 9;
export const HID_USAGE_GENERIC_PORTABLE_DEVICE_CONTROL = 13;
export const HID_USAGE_GENERIC_INTERACTIVE_CONTROL = 14;
export const HID_USAGE_GENERIC_COUNTED_BUFFER = 58;
export const HID_USAGE_GENERIC_SYSTEM_CTL = 128;
export const HID_USAGE_GENERIC_X = 48;
export const HID_USAGE_GENERIC_Y = 49;
export const HID_USAGE_GENERIC_Z = 50;
export const HID_USAGE_GENERIC_RX = 51;
export const HID_USAGE_GENERIC_RY = 52;
export const HID_USAGE_GENERIC_RZ = 53;
export const HID_USAGE_GENERIC_SLIDER = 54;
export const HID_USAGE_GENERIC_DIAL = 55;
export const HID_USAGE_GENERIC_WHEEL = 56;
export const HID_USAGE_GENERIC_HATSWITCH = 57;
export const HID_USAGE_GENERIC_BYTE_COUNT = 59;
export const HID_USAGE_GENERIC_MOTION_WAKEUP = 60;
export const HID_USAGE_GENERIC_START = 61;
export const HID_USAGE_GENERIC_SELECT = 62;
export const HID_USAGE_GENERIC_VX = 64;
export const HID_USAGE_GENERIC_VY = 65;
export const HID_USAGE_GENERIC_VZ = 66;
export const HID_USAGE_GENERIC_VBRX = 67;
export const HID_USAGE_GENERIC_VBRY = 68;
export const HID_USAGE_GENERIC_VBRZ = 69;
export const HID_USAGE_GENERIC_VNO = 70;
export const HID_USAGE_GENERIC_FEATURE_NOTIFICATION = 71;
export const HID_USAGE_GENERIC_RESOLUTION_MULTIPLIER = 72;
export const HID_USAGE_GENERIC_SYSCTL_POWER = 129;
export const HID_USAGE_GENERIC_SYSCTL_SLEEP = 130;
export const HID_USAGE_GENERIC_SYSCTL_WAKE = 131;
export const HID_USAGE_GENERIC_SYSCTL_CONTEXT_MENU = 132;
export const HID_USAGE_GENERIC_SYSCTL_MAIN_MENU = 133;
export const HID_USAGE_GENERIC_SYSCTL_APP_MENU = 134;
export const HID_USAGE_GENERIC_SYSCTL_HELP_MENU = 135;
export const HID_USAGE_GENERIC_SYSCTL_MENU_EXIT = 136;
export const HID_USAGE_GENERIC_SYSCTL_MENU_SELECT = 137;
export const HID_USAGE_GENERIC_SYSCTL_MENU_RIGHT = 138;
export const HID_USAGE_GENERIC_SYSCTL_MENU_LEFT = 139;
export const HID_USAGE_GENERIC_SYSCTL_MENU_UP = 140;
export const HID_USAGE_GENERIC_SYSCTL_MENU_DOWN = 141;
export const HID_USAGE_GENERIC_SYSCTL_COLD_RESTART = 142;
export const HID_USAGE_GENERIC_SYSCTL_WARM_RESTART = 143;
export const HID_USAGE_GENERIC_DPAD_UP = 144;
export const HID_USAGE_GENERIC_DPAD_DOWN = 145;
export const HID_USAGE_GENERIC_DPAD_RIGHT = 146;
export const HID_USAGE_GENERIC_DPAD_LEFT = 147;
export const HID_USAGE_GENERIC_SYSCTL_FN = 151;
export const HID_USAGE_GENERIC_SYSCTL_FN_LOCK = 152;
export const HID_USAGE_GENERIC_SYSCTL_FN_LOCK_INDICATOR = 153;
export const HID_USAGE_GENERIC_SYSCTL_DISMISS_NOTIFICATION = 154;
export const HID_USAGE_GENERIC_SYSCTL_DOCK = 160;
export const HID_USAGE_GENERIC_SYSCTL_UNDOCK = 161;
export const HID_USAGE_GENERIC_SYSCTL_SETUP = 162;
export const HID_USAGE_GENERIC_SYSCTL_SYS_BREAK = 163;
export const HID_USAGE_GENERIC_SYSCTL_SYS_DBG_BREAK = 164;
export const HID_USAGE_GENERIC_SYSCTL_APP_BREAK = 165;
export const HID_USAGE_GENERIC_SYSCTL_APP_DBG_BREAK = 166;
export const HID_USAGE_GENERIC_SYSCTL_MUTE = 167;
export const HID_USAGE_GENERIC_SYSCTL_HIBERNATE = 168;
export const HID_USAGE_GENERIC_SYSCTL_DISP_INVERT = 176;
export const HID_USAGE_GENERIC_SYSCTL_DISP_INTERNAL = 177;
export const HID_USAGE_GENERIC_SYSCTL_DISP_EXTERNAL = 178;
export const HID_USAGE_GENERIC_SYSCTL_DISP_BOTH = 179;
export const HID_USAGE_GENERIC_SYSCTL_DISP_DUAL = 180;
export const HID_USAGE_GENERIC_SYSCTL_DISP_TOGGLE = 181;
export const HID_USAGE_GENERIC_SYSCTL_DISP_SWAP = 182;
export const HID_USAGE_GENERIC_SYSCTL_DISP_AUTOSCALE = 183;
export const HID_USAGE_GENERIC_SYSTEM_DISPLAY_ROTATION_LOCK_BUTTON = 201;
export const HID_USAGE_GENERIC_SYSTEM_DISPLAY_ROTATION_LOCK_SLIDER_SWITCH = 202;
export const HID_USAGE_GENERIC_CONTROL_ENABLE = 203;
export const HID_USAGE_SIMULATION_FLIGHT_SIMULATION_DEVICE = 1;
export const HID_USAGE_SIMULATION_AUTOMOBILE_SIMULATION_DEVICE = 2;
export const HID_USAGE_SIMULATION_TANK_SIMULATION_DEVICE = 3;
export const HID_USAGE_SIMULATION_SPACESHIP_SIMULATION_DEVICE = 4;
export const HID_USAGE_SIMULATION_SUBMARINE_SIMULATION_DEVICE = 5;
export const HID_USAGE_SIMULATION_SAILING_SIMULATION_DEVICE = 6;
export const HID_USAGE_SIMULATION_MOTORCYCLE_SIMULATION_DEVICE = 7;
export const HID_USAGE_SIMULATION_SPORTS_SIMULATION_DEVICE = 8;
export const HID_USAGE_SIMULATION_AIRPLANE_SIMULATION_DEVICE = 9;
export const HID_USAGE_SIMULATION_HELICOPTER_SIMULATION_DEVICE = 10;
export const HID_USAGE_SIMULATION_MAGIC_CARPET_SIMULATION_DEVICE = 11;
export const HID_USAGE_SIMULATION_BICYCLE_SIMULATION_DEVICE = 12;
export const HID_USAGE_SIMULATION_FLIGHT_CONTROL_STICK = 32;
export const HID_USAGE_SIMULATION_FLIGHT_STICK = 33;
export const HID_USAGE_SIMULATION_CYCLIC_CONTROL = 34;
export const HID_USAGE_SIMULATION_CYCLIC_TRIM = 35;
export const HID_USAGE_SIMULATION_FLIGHT_YOKE = 36;
export const HID_USAGE_SIMULATION_TRACK_CONTROL = 37;
export const HID_USAGE_SIMULATION_AILERON = 176;
export const HID_USAGE_SIMULATION_AILERON_TRIM = 177;
export const HID_USAGE_SIMULATION_ANTI_TORQUE_CONTROL = 178;
export const HID_USAGE_SIMULATION_AUTOPIOLOT_ENABLE = 179;
export const HID_USAGE_SIMULATION_CHAFF_RELEASE = 180;
export const HID_USAGE_SIMULATION_COLLECTIVE_CONTROL = 181;
export const HID_USAGE_SIMULATION_DIVE_BRAKE = 182;
export const HID_USAGE_SIMULATION_ELECTRONIC_COUNTERMEASURES = 183;
export const HID_USAGE_SIMULATION_ELEVATOR = 184;
export const HID_USAGE_SIMULATION_ELEVATOR_TRIM = 185;
export const HID_USAGE_SIMULATION_RUDDER = 186;
export const HID_USAGE_SIMULATION_THROTTLE = 187;
export const HID_USAGE_SIMULATION_FLIGHT_COMMUNICATIONS = 188;
export const HID_USAGE_SIMULATION_FLARE_RELEASE = 189;
export const HID_USAGE_SIMULATION_LANDING_GEAR = 190;
export const HID_USAGE_SIMULATION_TOE_BRAKE = 191;
export const HID_USAGE_SIMULATION_TRIGGER = 192;
export const HID_USAGE_SIMULATION_WEAPONS_ARM = 193;
export const HID_USAGE_SIMULATION_WEAPONS_SELECT = 194;
export const HID_USAGE_SIMULATION_WING_FLAPS = 195;
export const HID_USAGE_SIMULATION_ACCELLERATOR = 196;
export const HID_USAGE_SIMULATION_BRAKE = 197;
export const HID_USAGE_SIMULATION_CLUTCH = 198;
export const HID_USAGE_SIMULATION_SHIFTER = 199;
export const HID_USAGE_SIMULATION_STEERING = 200;
export const HID_USAGE_SIMULATION_TURRET_DIRECTION = 201;
export const HID_USAGE_SIMULATION_BARREL_ELEVATION = 202;
export const HID_USAGE_SIMULATION_DIVE_PLANE = 203;
export const HID_USAGE_SIMULATION_BALLAST = 204;
export const HID_USAGE_SIMULATION_BICYCLE_CRANK = 205;
export const HID_USAGE_SIMULATION_HANDLE_BARS = 206;
export const HID_USAGE_SIMULATION_FRONT_BRAKE = 207;
export const HID_USAGE_SIMULATION_REAR_BRAKE = 208;
export const HID_USAGE_VR_BELT = 1;
export const HID_USAGE_VR_BODY_SUIT = 2;
export const HID_USAGE_VR_FLEXOR = 3;
export const HID_USAGE_VR_GLOVE = 4;
export const HID_USAGE_VR_HEAD_TRACKER = 5;
export const HID_USAGE_VR_HEAD_MOUNTED_DISPLAY = 6;
export const HID_USAGE_VR_HAND_TRACKER = 7;
export const HID_USAGE_VR_OCULOMETER = 8;
export const HID_USAGE_VR_VEST = 9;
export const HID_USAGE_VR_ANIMATRONIC_DEVICE = 10;
export const HID_USAGE_VR_STEREO_ENABLE = 32;
export const HID_USAGE_VR_DISPLAY_ENABLE = 33;
export const HID_USAGE_SPORT_BASEBALL_BAT = 1;
export const HID_USAGE_SPORT_GOLF_CLUB = 2;
export const HID_USAGE_SPORT_ROWING_MACHINE = 3;
export const HID_USAGE_SPORT_TREADMILL = 4;
export const HID_USAGE_SPORT_STICK_TYPE = 56;
export const HID_USAGE_SPORT_OAR = 48;
export const HID_USAGE_SPORT_SLOPE = 49;
export const HID_USAGE_SPORT_RATE = 50;
export const HID_USAGE_SPORT_STICK_SPEED = 51;
export const HID_USAGE_SPORT_STICK_FACE_ANGLE = 52;
export const HID_USAGE_SPORT_HEEL_TOE = 53;
export const HID_USAGE_SPORT_FOLLOW_THROUGH = 54;
export const HID_USAGE_SPORT_TEMPO = 55;
export const HID_USAGE_SPORT_HEIGHT = 57;
export const HID_USAGE_SPORT_PUTTER = 80;
export const HID_USAGE_SPORT_1_IRON = 81;
export const HID_USAGE_SPORT_2_IRON = 82;
export const HID_USAGE_SPORT_3_IRON = 83;
export const HID_USAGE_SPORT_4_IRON = 84;
export const HID_USAGE_SPORT_5_IRON = 85;
export const HID_USAGE_SPORT_6_IRON = 86;
export const HID_USAGE_SPORT_7_IRON = 87;
export const HID_USAGE_SPORT_8_IRON = 88;
export const HID_USAGE_SPORT_9_IRON = 89;
export const HID_USAGE_SPORT_10_IRON = 90;
export const HID_USAGE_SPORT_11_IRON = 91;
export const HID_USAGE_SPORT_SAND_WEDGE = 92;
export const HID_USAGE_SPORT_LOFT_WEDGE = 93;
export const HID_USAGE_SPORT_POWER_WEDGE = 94;
export const HID_USAGE_SPORT_1_WOOD = 95;
export const HID_USAGE_SPORT_3_WOOD = 96;
export const HID_USAGE_SPORT_5_WOOD = 97;
export const HID_USAGE_SPORT_7_WOOD = 98;
export const HID_USAGE_SPORT_9_WOOD = 99;
export const HID_USAGE_GAME_3D_GAME_CONTROLLER = 1;
export const HID_USAGE_GAME_PINBALL_DEVICE = 2;
export const HID_USAGE_GAME_GUN_DEVICE = 3;
export const HID_USAGE_GAME_POINT_OF_VIEW = 32;
export const HID_USAGE_GAME_GUN_SELECTOR = 50;
export const HID_USAGE_GAME_GAMEPAD_FIRE_JUMP = 55;
export const HID_USAGE_GAME_GAMEPAD_TRIGGER = 57;
export const HID_USAGE_GAME_TURN_RIGHT_LEFT = 33;
export const HID_USAGE_GAME_PITCH_FORWARD_BACK = 34;
export const HID_USAGE_GAME_ROLL_RIGHT_LEFT = 35;
export const HID_USAGE_GAME_MOVE_RIGHT_LEFT = 36;
export const HID_USAGE_GAME_MOVE_FORWARD_BACK = 37;
export const HID_USAGE_GAME_MOVE_UP_DOWN = 38;
export const HID_USAGE_GAME_LEAN_RIGHT_LEFT = 39;
export const HID_USAGE_GAME_LEAN_FORWARD_BACK = 40;
export const HID_USAGE_GAME_POV_HEIGHT = 41;
export const HID_USAGE_GAME_FLIPPER = 42;
export const HID_USAGE_GAME_SECONDARY_FLIPPER = 43;
export const HID_USAGE_GAME_BUMP = 44;
export const HID_USAGE_GAME_NEW_GAME = 45;
export const HID_USAGE_GAME_SHOOT_BALL = 46;
export const HID_USAGE_GAME_PLAYER = 47;
export const HID_USAGE_GAME_GUN_BOLT = 48;
export const HID_USAGE_GAME_GUN_CLIP = 49;
export const HID_USAGE_GAME_GUN_SINGLE_SHOT = 51;
export const HID_USAGE_GAME_GUN_BURST = 52;
export const HID_USAGE_GAME_GUN_AUTOMATIC = 53;
export const HID_USAGE_GAME_GUN_SAFETY = 54;
export const HID_USAGE_GENERIC_DEVICE_BATTERY_STRENGTH = 32;
export const HID_USAGE_GENERIC_DEVICE_WIRELESS_CHANNEL = 33;
export const HID_USAGE_GENERIC_DEVICE_WIRELESS_ID = 34;
export const HID_USAGE_GENERIC_DEVICE_DISCOVER_WIRELESS_CONTROL = 35;
export const HID_USAGE_GENERIC_DEVICE_SECURITY_CODE_CHAR_ENTERED = 36;
export const HID_USAGE_GENERIC_DEVICE_SECURITY_CODE_CHAR_ERASED = 37;
export const HID_USAGE_GENERIC_DEVICE_SECURITY_CODE_CLEARED = 38;
export const HID_USAGE_KEYBOARD_NOEVENT = 0;
export const HID_USAGE_KEYBOARD_ROLLOVER = 1;
export const HID_USAGE_KEYBOARD_POSTFAIL = 2;
export const HID_USAGE_KEYBOARD_UNDEFINED = 3;
export const HID_USAGE_KEYBOARD_aA = 4;
export const HID_USAGE_KEYBOARD_zZ = 29;
export const HID_USAGE_KEYBOARD_ONE = 30;
export const HID_USAGE_KEYBOARD_ZERO = 39;
export const HID_USAGE_KEYBOARD_LCTRL = 224;
export const HID_USAGE_KEYBOARD_LSHFT = 225;
export const HID_USAGE_KEYBOARD_LALT = 226;
export const HID_USAGE_KEYBOARD_LGUI = 227;
export const HID_USAGE_KEYBOARD_RCTRL = 228;
export const HID_USAGE_KEYBOARD_RSHFT = 229;
export const HID_USAGE_KEYBOARD_RALT = 230;
export const HID_USAGE_KEYBOARD_RGUI = 231;
export const HID_USAGE_KEYBOARD_SCROLL_LOCK = 71;
export const HID_USAGE_KEYBOARD_NUM_LOCK = 83;
export const HID_USAGE_KEYBOARD_CAPS_LOCK = 57;
export const HID_USAGE_KEYBOARD_F1 = 58;
export const HID_USAGE_KEYBOARD_F2 = 59;
export const HID_USAGE_KEYBOARD_F3 = 60;
export const HID_USAGE_KEYBOARD_F4 = 61;
export const HID_USAGE_KEYBOARD_F5 = 62;
export const HID_USAGE_KEYBOARD_F6 = 63;
export const HID_USAGE_KEYBOARD_F7 = 64;
export const HID_USAGE_KEYBOARD_F8 = 65;
export const HID_USAGE_KEYBOARD_F9 = 66;
export const HID_USAGE_KEYBOARD_F10 = 67;
export const HID_USAGE_KEYBOARD_F11 = 68;
export const HID_USAGE_KEYBOARD_F12 = 69;
export const HID_USAGE_KEYBOARD_F13 = 104;
export const HID_USAGE_KEYBOARD_F14 = 105;
export const HID_USAGE_KEYBOARD_F15 = 106;
export const HID_USAGE_KEYBOARD_F16 = 107;
export const HID_USAGE_KEYBOARD_F17 = 108;
export const HID_USAGE_KEYBOARD_F18 = 109;
export const HID_USAGE_KEYBOARD_F19 = 110;
export const HID_USAGE_KEYBOARD_F20 = 111;
export const HID_USAGE_KEYBOARD_F21 = 112;
export const HID_USAGE_KEYBOARD_F22 = 113;
export const HID_USAGE_KEYBOARD_F23 = 114;
export const HID_USAGE_KEYBOARD_F24 = 115;
export const HID_USAGE_KEYBOARD_RETURN = 40;
export const HID_USAGE_KEYBOARD_ESCAPE = 41;
export const HID_USAGE_KEYBOARD_DELETE = 42;
export const HID_USAGE_KEYBOARD_PRINT_SCREEN = 70;
export const HID_USAGE_KEYBOARD_DELETE_FORWARD = 76;
export const HID_USAGE_LED_NUM_LOCK = 1;
export const HID_USAGE_LED_CAPS_LOCK = 2;
export const HID_USAGE_LED_SCROLL_LOCK = 3;
export const HID_USAGE_LED_COMPOSE = 4;
export const HID_USAGE_LED_KANA = 5;
export const HID_USAGE_LED_POWER = 6;
export const HID_USAGE_LED_SHIFT = 7;
export const HID_USAGE_LED_DO_NOT_DISTURB = 8;
export const HID_USAGE_LED_MUTE = 9;
export const HID_USAGE_LED_TONE_ENABLE = 10;
export const HID_USAGE_LED_HIGH_CUT_FILTER = 11;
export const HID_USAGE_LED_LOW_CUT_FILTER = 12;
export const HID_USAGE_LED_EQUALIZER_ENABLE = 13;
export const HID_USAGE_LED_SOUND_FIELD_ON = 14;
export const HID_USAGE_LED_SURROUND_FIELD_ON = 15;
export const HID_USAGE_LED_REPEAT = 16;
export const HID_USAGE_LED_STEREO = 17;
export const HID_USAGE_LED_SAMPLING_RATE_DETECT = 18;
export const HID_USAGE_LED_SPINNING = 19;
export const HID_USAGE_LED_CAV = 20;
export const HID_USAGE_LED_CLV = 21;
export const HID_USAGE_LED_RECORDING_FORMAT_DET = 22;
export const HID_USAGE_LED_OFF_HOOK = 23;
export const HID_USAGE_LED_RING = 24;
export const HID_USAGE_LED_MESSAGE_WAITING = 25;
export const HID_USAGE_LED_DATA_MODE = 26;
export const HID_USAGE_LED_BATTERY_OPERATION = 27;
export const HID_USAGE_LED_BATTERY_OK = 28;
export const HID_USAGE_LED_BATTERY_LOW = 29;
export const HID_USAGE_LED_SPEAKER = 30;
export const HID_USAGE_LED_HEAD_SET = 31;
export const HID_USAGE_LED_HOLD = 32;
export const HID_USAGE_LED_MICROPHONE = 33;
export const HID_USAGE_LED_COVERAGE = 34;
export const HID_USAGE_LED_NIGHT_MODE = 35;
export const HID_USAGE_LED_SEND_CALLS = 36;
export const HID_USAGE_LED_CALL_PICKUP = 37;
export const HID_USAGE_LED_CONFERENCE = 38;
export const HID_USAGE_LED_STAND_BY = 39;
export const HID_USAGE_LED_CAMERA_ON = 40;
export const HID_USAGE_LED_CAMERA_OFF = 41;
export const HID_USAGE_LED_ON_LINE = 42;
export const HID_USAGE_LED_OFF_LINE = 43;
export const HID_USAGE_LED_BUSY = 44;
export const HID_USAGE_LED_READY = 45;
export const HID_USAGE_LED_PAPER_OUT = 46;
export const HID_USAGE_LED_PAPER_JAM = 47;
export const HID_USAGE_LED_REMOTE = 48;
export const HID_USAGE_LED_FORWARD = 49;
export const HID_USAGE_LED_REVERSE = 50;
export const HID_USAGE_LED_STOP = 51;
export const HID_USAGE_LED_REWIND = 52;
export const HID_USAGE_LED_FAST_FORWARD = 53;
export const HID_USAGE_LED_PLAY = 54;
export const HID_USAGE_LED_PAUSE = 55;
export const HID_USAGE_LED_RECORD = 56;
export const HID_USAGE_LED_ERROR = 57;
export const HID_USAGE_LED_SELECTED_INDICATOR = 58;
export const HID_USAGE_LED_IN_USE_INDICATOR = 59;
export const HID_USAGE_LED_MULTI_MODE_INDICATOR = 60;
export const HID_USAGE_LED_INDICATOR_ON = 61;
export const HID_USAGE_LED_INDICATOR_FLASH = 62;
export const HID_USAGE_LED_INDICATOR_SLOW_BLINK = 63;
export const HID_USAGE_LED_INDICATOR_FAST_BLINK = 64;
export const HID_USAGE_LED_INDICATOR_OFF = 65;
export const HID_USAGE_LED_FLASH_ON_TIME = 66;
export const HID_USAGE_LED_SLOW_BLINK_ON_TIME = 67;
export const HID_USAGE_LED_SLOW_BLINK_OFF_TIME = 68;
export const HID_USAGE_LED_FAST_BLINK_ON_TIME = 69;
export const HID_USAGE_LED_FAST_BLINK_OFF_TIME = 70;
export const HID_USAGE_LED_INDICATOR_COLOR = 71;
export const HID_USAGE_LED_RED = 72;
export const HID_USAGE_LED_GREEN = 73;
export const HID_USAGE_LED_AMBER = 74;
export const HID_USAGE_LED_GENERIC_INDICATOR = 75;
export const HID_USAGE_LED_SYSTEM_SUSPEND = 76;
export const HID_USAGE_LED_EXTERNAL_POWER = 77;
export const HID_USAGE_TELEPHONY_PHONE = 1;
export const HID_USAGE_TELEPHONY_ANSWERING_MACHINE = 2;
export const HID_USAGE_TELEPHONY_MESSAGE_CONTROLS = 3;
export const HID_USAGE_TELEPHONY_HANDSET = 4;
export const HID_USAGE_TELEPHONY_HEADSET = 5;
export const HID_USAGE_TELEPHONY_KEYPAD = 6;
export const HID_USAGE_TELEPHONY_PROGRAMMABLE_BUTTON = 7;
export const HID_USAGE_TELEPHONY_REDIAL = 36;
export const HID_USAGE_TELEPHONY_TRANSFER = 37;
export const HID_USAGE_TELEPHONY_DROP = 38;
export const HID_USAGE_TELEPHONY_LINE = 42;
export const HID_USAGE_TELEPHONY_RING_ENABLE = 45;
export const HID_USAGE_TELEPHONY_SEND = 49;
export const HID_USAGE_TELEPHONY_KEYPAD_0 = 176;
export const HID_USAGE_TELEPHONY_KEYPAD_D = 191;
export const HID_USAGE_TELEPHONY_HOST_AVAILABLE = 241;
export const HID_USAGE_CONSUMERCTRL = 1;
export const HID_USAGE_CONSUMER_CHANNEL_INCREMENT = 156;
export const HID_USAGE_CONSUMER_CHANNEL_DECREMENT = 157;
export const HID_USAGE_CONSUMER_PLAY = 176;
export const HID_USAGE_CONSUMER_PAUSE = 177;
export const HID_USAGE_CONSUMER_RECORD = 178;
export const HID_USAGE_CONSUMER_FAST_FORWARD = 179;
export const HID_USAGE_CONSUMER_REWIND = 180;
export const HID_USAGE_CONSUMER_SCAN_NEXT_TRACK = 181;
export const HID_USAGE_CONSUMER_SCAN_PREV_TRACK = 182;
export const HID_USAGE_CONSUMER_STOP = 183;
export const HID_USAGE_CONSUMER_PLAY_PAUSE = 205;
export const HID_USAGE_CONSUMER_GAMEDVR_OPEN_GAMEBAR = 208;
export const HID_USAGE_CONSUMER_GAMEDVR_TOGGLE_RECORD = 209;
export const HID_USAGE_CONSUMER_GAMEDVR_RECORD_CLIP = 210;
export const HID_USAGE_CONSUMER_GAMEDVR_SCREENSHOT = 211;
export const HID_USAGE_CONSUMER_GAMEDVR_TOGGLE_INDICATOR = 212;
export const HID_USAGE_CONSUMER_GAMEDVR_TOGGLE_MICROPHONE = 213;
export const HID_USAGE_CONSUMER_GAMEDVR_TOGGLE_CAMERA = 214;
export const HID_USAGE_CONSUMER_GAMEDVR_TOGGLE_BROADCAST = 215;
export const HID_USAGE_CONSUMER_VOLUME = 224;
export const HID_USAGE_CONSUMER_BALANCE = 225;
export const HID_USAGE_CONSUMER_MUTE = 226;
export const HID_USAGE_CONSUMER_BASS = 227;
export const HID_USAGE_CONSUMER_TREBLE = 228;
export const HID_USAGE_CONSUMER_BASS_BOOST = 229;
export const HID_USAGE_CONSUMER_SURROUND_MODE = 230;
export const HID_USAGE_CONSUMER_LOUDNESS = 231;
export const HID_USAGE_CONSUMER_MPX = 232;
export const HID_USAGE_CONSUMER_VOLUME_INCREMENT = 233;
export const HID_USAGE_CONSUMER_VOLUME_DECREMENT = 234;
export const HID_USAGE_CONSUMER_BASS_INCREMENT = 338;
export const HID_USAGE_CONSUMER_BASS_DECREMENT = 339;
export const HID_USAGE_CONSUMER_TREBLE_INCREMENT = 340;
export const HID_USAGE_CONSUMER_TREBLE_DECREMENT = 341;
export const HID_USAGE_CONSUMER_AL_CONFIGURATION = 387;
export const HID_USAGE_CONSUMER_AL_EMAIL = 394;
export const HID_USAGE_CONSUMER_AL_CALCULATOR = 402;
export const HID_USAGE_CONSUMER_AL_BROWSER = 404;
export const HID_USAGE_CONSUMER_AL_SEARCH = 454;
export const HID_USAGE_CONSUMER_AC_SEARCH = 545;
export const HID_USAGE_CONSUMER_AC_GOTO = 546;
export const HID_USAGE_CONSUMER_AC_HOME = 547;
export const HID_USAGE_CONSUMER_AC_BACK = 548;
export const HID_USAGE_CONSUMER_AC_FORWARD = 549;
export const HID_USAGE_CONSUMER_AC_STOP = 550;
export const HID_USAGE_CONSUMER_AC_REFRESH = 551;
export const HID_USAGE_CONSUMER_AC_PREVIOUS = 552;
export const HID_USAGE_CONSUMER_AC_NEXT = 553;
export const HID_USAGE_CONSUMER_AC_BOOKMARKS = 554;
export const HID_USAGE_CONSUMER_AC_PAN = 568;
export const HID_USAGE_CONSUMER_EXTENDED_KEYBOARD_ATTRIBUTES_COLLECTION = 704;
export const HID_USAGE_CONSUMER_KEYBOARD_FORM_FACTOR = 705;
export const HID_USAGE_CONSUMER_KEYBOARD_KEY_TYPE = 706;
export const HID_USAGE_CONSUMER_KEYBOARD_PHYSICAL_LAYOUT = 707;
export const HID_USAGE_CONSUMER_VENDOR_SPECIFIC_KEYBOARD_PHYSICAL_LAYOUT = 708;
export const HID_USAGE_CONSUMER_KEYBOARD_IETF_LANGUAGE_TAG_INDEX = 709;
export const HID_USAGE_CONSUMER_IMPLEMENTED_KEYBOARD_INPUT_ASSIST_CONTROLS = 710;
export const HID_USAGE_DIGITIZER_DIGITIZER = 1;
export const HID_USAGE_DIGITIZER_PEN = 2;
export const HID_USAGE_DIGITIZER_LIGHT_PEN = 3;
export const HID_USAGE_DIGITIZER_TOUCH_SCREEN = 4;
export const HID_USAGE_DIGITIZER_TOUCH_PAD = 5;
export const HID_USAGE_DIGITIZER_WHITE_BOARD = 6;
export const HID_USAGE_DIGITIZER_COORD_MEASURING = 7;
export const HID_USAGE_DIGITIZER_3D_DIGITIZER = 8;
export const HID_USAGE_DIGITIZER_STEREO_PLOTTER = 9;
export const HID_USAGE_DIGITIZER_ARTICULATED_ARM = 10;
export const HID_USAGE_DIGITIZER_ARMATURE = 11;
export const HID_USAGE_DIGITIZER_MULTI_POINT = 12;
export const HID_USAGE_DIGITIZER_FREE_SPACE_WAND = 13;
export const HID_USAGE_DIGITIZER_HEAT_MAP = 15;
export const HID_USAGE_DIGITIZER_STYLUS = 32;
export const HID_USAGE_DIGITIZER_PUCK = 33;
export const HID_USAGE_DIGITIZER_FINGER = 34;
export const HID_USAGE_DIGITIZER_TABLET_FUNC_KEYS = 57;
export const HID_USAGE_DIGITIZER_PROG_CHANGE_KEYS = 58;
export const HID_USAGE_DIGITIZER_TIP_PRESSURE = 48;
export const HID_USAGE_DIGITIZER_BARREL_PRESSURE = 49;
export const HID_USAGE_DIGITIZER_IN_RANGE = 50;
export const HID_USAGE_DIGITIZER_TOUCH = 51;
export const HID_USAGE_DIGITIZER_UNTOUCH = 52;
export const HID_USAGE_DIGITIZER_TAP = 53;
export const HID_USAGE_DIGITIZER_QUALITY = 54;
export const HID_USAGE_DIGITIZER_DATA_VALID = 55;
export const HID_USAGE_DIGITIZER_TRANSDUCER_INDEX = 56;
export const HID_USAGE_DIGITIZER_BATTERY_STRENGTH = 59;
export const HID_USAGE_DIGITIZER_INVERT = 60;
export const HID_USAGE_DIGITIZER_X_TILT = 61;
export const HID_USAGE_DIGITIZER_Y_TILT = 62;
export const HID_USAGE_DIGITIZER_AZIMUTH = 63;
export const HID_USAGE_DIGITIZER_ALTITUDE = 64;
export const HID_USAGE_DIGITIZER_TWIST = 65;
export const HID_USAGE_DIGITIZER_TIP_SWITCH = 66;
export const HID_USAGE_DIGITIZER_SECONDARY_TIP_SWITCH = 67;
export const HID_USAGE_DIGITIZER_BARREL_SWITCH = 68;
export const HID_USAGE_DIGITIZER_ERASER = 69;
export const HID_USAGE_DIGITIZER_TABLET_PICK = 70;
export const HID_USAGE_DIGITIZER_TRANSDUCER_SERIAL = 91;
export const HID_USAGE_DIGITIZER_HEAT_MAP_PROTOCOL_VENDOR_ID = 106;
export const HID_USAGE_DIGITIZER_HEAT_MAP_PROTOCOL_VERSION = 107;
export const HID_USAGE_DIGITIZER_HEAT_MAP_FRAME_DATA = 108;
export const HID_USAGE_DIGITIZER_TRANSDUCER_VENDOR = 145;
export const HID_USAGE_DIGITIZER_TRANSDUCER_PRODUCT = 146;
export const HID_USAGE_DIGITIZER_TRANSDUCER_CONNECTED = 162;
export const HID_USAGE_HAPTICS_SIMPLE_CONTROLLER = 1;
export const HID_USAGE_HAPTICS_WAVEFORM_LIST = 16;
export const HID_USAGE_HAPTICS_DURATION_LIST = 17;
export const HID_USAGE_HAPTICS_AUTO_TRIGGER = 32;
export const HID_USAGE_HAPTICS_MANUAL_TRIGGER = 33;
export const HID_USAGE_HAPTICS_AUTO_ASSOCIATED_CONTROL = 34;
export const HID_USAGE_HAPTICS_INTENSITY = 35;
export const HID_USAGE_HAPTICS_REPEAT_COUNT = 36;
export const HID_USAGE_HAPTICS_RETRIGGER_PERIOD = 37;
export const HID_USAGE_HAPTICS_WAVEFORM_VENDOR_PAGE = 38;
export const HID_USAGE_HAPTICS_WAVEFORM_VENDOR_ID = 39;
export const HID_USAGE_HAPTICS_WAVEFORM_CUTOFF_TIME = 40;
export const HID_USAGE_HAPTICS_WAVEFORM_BEGIN = 4096;
export const HID_USAGE_HAPTICS_WAVEFORM_STOP = 4097;
export const HID_USAGE_HAPTICS_WAVEFORM_NULL = 4098;
export const HID_USAGE_HAPTICS_WAVEFORM_CLICK = 4099;
export const HID_USAGE_HAPTICS_WAVEFORM_BUZZ = 4100;
export const HID_USAGE_HAPTICS_WAVEFORM_RUMBLE = 4101;
export const HID_USAGE_HAPTICS_WAVEFORM_PRESS = 4102;
export const HID_USAGE_HAPTICS_WAVEFORM_RELEASE = 4103;
export const HID_USAGE_HAPTICS_WAVEFORM_END = 8191;
export const HID_USAGE_HAPTICS_WAVEFORM_VENDOR_BEGIN = 8192;
export const HID_USAGE_HAPTICS_WAVEFORM_VENDOR_END = 12287;
export const HID_USAGE_ALPHANUMERIC_ALPHANUMERIC_DISPLAY = 1;
export const HID_USAGE_ALPHANUMERIC_BITMAPPED_DISPLAY = 2;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_ATTRIBUTES_REPORT = 32;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_CONTROL_REPORT = 36;
export const HID_USAGE_ALPHANUMERIC_CHARACTER_REPORT = 43;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_STATUS = 45;
export const HID_USAGE_ALPHANUMERIC_CURSOR_POSITION_REPORT = 50;
export const HID_USAGE_ALPHANUMERIC_FONT_REPORT = 59;
export const HID_USAGE_ALPHANUMERIC_FONT_DATA = 60;
export const HID_USAGE_ALPHANUMERIC_CHARACTER_ATTRIBUTE = 72;
export const HID_USAGE_ALPHANUMERIC_PALETTE_REPORT = 133;
export const HID_USAGE_ALPHANUMERIC_PALETTE_DATA = 136;
export const HID_USAGE_ALPHANUMERIC_BLIT_REPORT = 138;
export const HID_USAGE_ALPHANUMERIC_BLIT_DATA = 143;
export const HID_USAGE_ALPHANUMERIC_SOFT_BUTTON = 144;
export const HID_USAGE_ALPHANUMERIC_ASCII_CHARACTER_SET = 33;
export const HID_USAGE_ALPHANUMERIC_DATA_READ_BACK = 34;
export const HID_USAGE_ALPHANUMERIC_FONT_READ_BACK = 35;
export const HID_USAGE_ALPHANUMERIC_CLEAR_DISPLAY = 37;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_ENABLE = 38;
export const HID_USAGE_ALPHANUMERIC_SCREEN_SAVER_DELAY = 39;
export const HID_USAGE_ALPHANUMERIC_SCREEN_SAVER_ENABLE = 40;
export const HID_USAGE_ALPHANUMERIC_VERTICAL_SCROLL = 41;
export const HID_USAGE_ALPHANUMERIC_HORIZONTAL_SCROLL = 42;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_DATA = 44;
export const HID_USAGE_ALPHANUMERIC_STATUS_NOT_READY = 46;
export const HID_USAGE_ALPHANUMERIC_STATUS_READY = 47;
export const HID_USAGE_ALPHANUMERIC_ERR_NOT_A_LOADABLE_CHARACTER = 48;
export const HID_USAGE_ALPHANUMERIC_ERR_FONT_DATA_CANNOT_BE_READ = 49;
export const HID_USAGE_ALPHANUMERIC_ROW = 51;
export const HID_USAGE_ALPHANUMERIC_COLUMN = 52;
export const HID_USAGE_ALPHANUMERIC_ROWS = 53;
export const HID_USAGE_ALPHANUMERIC_COLUMNS = 54;
export const HID_USAGE_ALPHANUMERIC_CURSOR_PIXEL_POSITIONING = 55;
export const HID_USAGE_ALPHANUMERIC_CURSOR_MODE = 56;
export const HID_USAGE_ALPHANUMERIC_CURSOR_ENABLE = 57;
export const HID_USAGE_ALPHANUMERIC_CURSOR_BLINK = 58;
export const HID_USAGE_ALPHANUMERIC_CHAR_WIDTH = 61;
export const HID_USAGE_ALPHANUMERIC_CHAR_HEIGHT = 62;
export const HID_USAGE_ALPHANUMERIC_CHAR_SPACING_HORIZONTAL = 63;
export const HID_USAGE_ALPHANUMERIC_CHAR_SPACING_VERTICAL = 64;
export const HID_USAGE_ALPHANUMERIC_UNICODE_CHAR_SET = 65;
export const HID_USAGE_ALPHANUMERIC_FONT_7_SEGMENT = 66;
export const HID_USAGE_ALPHANUMERIC_7_SEGMENT_DIRECT_MAP = 67;
export const HID_USAGE_ALPHANUMERIC_FONT_14_SEGMENT = 68;
export const HID_USAGE_ALPHANUMERIC_14_SEGMENT_DIRECT_MAP = 69;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_BRIGHTNESS = 70;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_CONTRAST = 71;
export const HID_USAGE_ALPHANUMERIC_ATTRIBUTE_READBACK = 73;
export const HID_USAGE_ALPHANUMERIC_ATTRIBUTE_DATA = 74;
export const HID_USAGE_ALPHANUMERIC_CHAR_ATTR_ENHANCE = 75;
export const HID_USAGE_ALPHANUMERIC_CHAR_ATTR_UNDERLINE = 76;
export const HID_USAGE_ALPHANUMERIC_CHAR_ATTR_BLINK = 77;
export const HID_USAGE_ALPHANUMERIC_BITMAP_SIZE_X = 128;
export const HID_USAGE_ALPHANUMERIC_BITMAP_SIZE_Y = 129;
export const HID_USAGE_ALPHANUMERIC_BIT_DEPTH_FORMAT = 131;
export const HID_USAGE_ALPHANUMERIC_DISPLAY_ORIENTATION = 132;
export const HID_USAGE_ALPHANUMERIC_PALETTE_DATA_SIZE = 134;
export const HID_USAGE_ALPHANUMERIC_PALETTE_DATA_OFFSET = 135;
export const HID_USAGE_ALPHANUMERIC_BLIT_RECTANGLE_X1 = 139;
export const HID_USAGE_ALPHANUMERIC_BLIT_RECTANGLE_Y1 = 140;
export const HID_USAGE_ALPHANUMERIC_BLIT_RECTANGLE_X2 = 141;
export const HID_USAGE_ALPHANUMERIC_BLIT_RECTANGLE_Y2 = 142;
export const HID_USAGE_ALPHANUMERIC_SOFT_BUTTON_ID = 145;
export const HID_USAGE_ALPHANUMERIC_SOFT_BUTTON_SIDE = 146;
export const HID_USAGE_ALPHANUMERIC_SOFT_BUTTON_OFFSET1 = 147;
export const HID_USAGE_ALPHANUMERIC_SOFT_BUTTON_OFFSET2 = 148;
export const HID_USAGE_ALPHANUMERIC_SOFT_BUTTON_REPORT = 149;
export const HID_USAGE_LAMPARRAY = 1;
export const HID_USAGE_LAMPARRAY_ATTRBIUTES_REPORT = 2;
export const HID_USAGE_LAMPARRAY_LAMP_COUNT = 3;
export const HID_USAGE_LAMPARRAY_BOUNDING_BOX_WIDTH_IN_MICROMETERS = 4;
export const HID_USAGE_LAMPARRAY_BOUNDING_BOX_HEIGHT_IN_MICROMETERS = 5;
export const HID_USAGE_LAMPARRAY_BOUNDING_BOX_DEPTH_IN_MICROMETERS = 6;
export const HID_USAGE_LAMPARRAY_KIND = 7;
export const HID_USAGE_LAMPARRAY_MIN_UPDATE_INTERVAL_IN_MICROSECONDS = 8;
export const HID_USAGE_LAMPARRAY_LAMP_ATTRIBUTES_REQUEST_REPORT = 32;
export const HID_USAGE_LAMPARRAY_LAMP_ID = 33;
export const HID_USAGE_LAMPARRAY_LAMP_ATTRIBUTES_RESPONSE_REPORT = 34;
export const HID_USAGE_LAMPARRAY_POSITION_X_IN_MICROMETERS = 35;
export const HID_USAGE_LAMPARRAY_POSITION_Y_IN_MICROMETERS = 36;
export const HID_USAGE_LAMPARRAY_POSITION_Z_IN_MICROMETERS = 37;
export const HID_USAGE_LAMPARRAY_LAMP_PURPOSES = 38;
export const HID_USAGE_LAMPARRAY_UPDATE_LATENCY_IN_MICROSECONDS = 39;
export const HID_USAGE_LAMPARRAY_RED_LEVEL_COUNT = 40;
export const HID_USAGE_LAMPARRAY_GREEN_LEVEL_COUNT = 41;
export const HID_USAGE_LAMPARRAY_BLUE_LEVEL_COUNT = 42;
export const HID_USAGE_LAMPARRAY_INTENSITY_LEVEL_COUNT = 43;
export const HID_USAGE_LAMPARRAY_IS_PROGRAMMABLE = 44;
export const HID_USAGE_LAMPARRAY_INPUT_BINDING = 45;
export const HID_USAGE_LAMPARRAY_LAMP_MULTI_UPDATE_REPORT = 80;
export const HID_USAGE_LAMPARRAY_LAMP_RED_UPDATE_CHANNEL = 81;
export const HID_USAGE_LAMPARRAY_LAMP_GREEN_UPDATE_CHANNEL = 82;
export const HID_USAGE_LAMPARRAY_LAMP_BLUE_UPDATE_CHANNEL = 83;
export const HID_USAGE_LAMPARRAY_LAMP_INTENSITY_UPDATE_CHANNEL = 84;
export const HID_USAGE_LAMPARRAY_LAMP_UPDATE_FLAGS = 85;
export const HID_USAGE_LAMPARRAY_LAMP_RANGE_UPDATE_REPORT = 96;
export const HID_USAGE_LAMPARRAY_LAMP_ID_START = 97;
export const HID_USAGE_LAMPARRAY_LAMP_ID_END = 98;
export const HID_USAGE_LAMPARRAY_CONTROL_REPORT = 112;
export const HID_USAGE_LAMPARRAY_AUTONOMOUS_MODE = 113;
export const HID_USAGE_CAMERA_AUTO_FOCUS = 32;
export const HID_USAGE_CAMERA_SHUTTER = 33;
export const HID_USAGE_MS_BTH_HF_DIALNUMBER = 33;
export const HID_USAGE_MS_BTH_HF_DIALMEMORY = 34;
export const DD_KEYBOARD_DEVICE_NAME = `\\Device\\KeyboardClass`;
export const DD_KEYBOARD_DEVICE_NAME_U = `\\Device\\KeyboardClass`;
export const IOCTL_KEYBOARD_QUERY_ATTRIBUTES = 720896;
export const IOCTL_KEYBOARD_SET_TYPEMATIC = 720900;
export const IOCTL_KEYBOARD_SET_INDICATORS = 720904;
export const IOCTL_KEYBOARD_QUERY_TYPEMATIC = 720928;
export const IOCTL_KEYBOARD_QUERY_INDICATORS = 720960;
export const IOCTL_KEYBOARD_QUERY_INDICATOR_TRANSLATION = 721024;
export const IOCTL_KEYBOARD_INSERT_DATA = 721152;
export const IOCTL_KEYBOARD_QUERY_EXTENDED_ATTRIBUTES = 721408;
export const IOCTL_KEYBOARD_QUERY_IME_STATUS = 724992;
export const IOCTL_KEYBOARD_SET_IME_STATUS = 724996;
export const KEYBOARD_OVERRUN_MAKE_CODE = 255;
export const KEY_MAKE = 0;
export const KEY_BREAK = 1;
export const KEY_E0 = 2;
export const KEY_E1 = 4;
export const KEY_TERMSRV_SET_LED = 8;
export const KEY_TERMSRV_SHADOW = 16;
export const KEY_TERMSRV_VKPACKET = 32;
export const KEY_RIM_VKEY = 64;
export const KEY_FROM_KEYBOARD_OVERRIDER = 128;
export const KEY_UNICODE_SEQUENCE_ITEM = 256;
export const KEY_UNICODE_SEQUENCE_END = 512;
export const KEYBOARD_EXTENDED_ATTRIBUTES_STRUCT_VERSION_1 = 1;
export const KEYBOARD_LED_INJECTED = 32768;
export const KEYBOARD_SHADOW = 16384;
export const KEYBOARD_KANA_LOCK_ON = 8;
export const KEYBOARD_CAPS_LOCK_ON = 4;
export const KEYBOARD_NUM_LOCK_ON = 2;
export const KEYBOARD_SCROLL_LOCK_ON = 1;
export const KEYBOARD_ERROR_VALUE_BASE = 10000;
export const DD_MOUSE_DEVICE_NAME = `\\Device\\PointerClass`;
export const DD_MOUSE_DEVICE_NAME_U = `\\Device\\PointerClass`;
export const IOCTL_MOUSE_QUERY_ATTRIBUTES = 983040;
export const IOCTL_MOUSE_INSERT_DATA = 983044;
export const MOUSE_LEFT_BUTTON_DOWN = 1;
export const MOUSE_LEFT_BUTTON_UP = 2;
export const MOUSE_RIGHT_BUTTON_DOWN = 4;
export const MOUSE_RIGHT_BUTTON_UP = 8;
export const MOUSE_MIDDLE_BUTTON_DOWN = 16;
export const MOUSE_MIDDLE_BUTTON_UP = 32;
export const MOUSE_BUTTON_1_DOWN = 1;
export const MOUSE_BUTTON_1_UP = 2;
export const MOUSE_BUTTON_2_DOWN = 4;
export const MOUSE_BUTTON_2_UP = 8;
export const MOUSE_BUTTON_3_DOWN = 16;
export const MOUSE_BUTTON_3_UP = 32;
export const MOUSE_BUTTON_4_DOWN = 64;
export const MOUSE_BUTTON_4_UP = 128;
export const MOUSE_BUTTON_5_DOWN = 256;
export const MOUSE_BUTTON_5_UP = 512;
export const MOUSE_WHEEL = 1024;
export const MOUSE_HWHEEL = 2048;
export const MOUSE_MOVE_RELATIVE = 0;
export const MOUSE_MOVE_ABSOLUTE = 1;
export const MOUSE_VIRTUAL_DESKTOP = 2;
export const MOUSE_ATTRIBUTES_CHANGED = 4;
export const MOUSE_MOVE_NOCOALESCE = 8;
export const MOUSE_TERMSRV_SRC_SHADOW = 256;
export const MOUSE_INPORT_HARDWARE = 1;
export const MOUSE_I8042_HARDWARE = 2;
export const MOUSE_SERIAL_HARDWARE = 4;
export const BALLPOINT_I8042_HARDWARE = 8;
export const BALLPOINT_SERIAL_HARDWARE = 16;
export const WHEELMOUSE_I8042_HARDWARE = 32;
export const WHEELMOUSE_SERIAL_HARDWARE = 64;
export const MOUSE_HID_HARDWARE = 128;
export const WHEELMOUSE_HID_HARDWARE = 256;
export const HORIZONTAL_WHEEL_PRESENT = 32768;
export const MOUSE_ERROR_VALUE_BASE = 20000;
export const DIRECTINPUT_HEADER_VERSION = 2048;
export const DIEFT_ALL = 0;
export const DIEFT_CONSTANTFORCE = 1;
export const DIEFT_RAMPFORCE = 2;
export const DIEFT_PERIODIC = 3;
export const DIEFT_CONDITION = 4;
export const DIEFT_CUSTOMFORCE = 5;
export const DIEFT_HARDWARE = 255;
export const DIEFT_FFATTACK = 512;
export const DIEFT_FFFADE = 1024;
export const DIEFT_SATURATION = 2048;
export const DIEFT_POSNEGCOEFFICIENTS = 4096;
export const DIEFT_POSNEGSATURATION = 8192;
export const DIEFT_DEADBAND = 16384;
export const DIEFT_STARTDELAY = 32768;
export const DI_DEGREES = 100;
export const DI_FFNOMINALMAX = 10000;
export const DI_SECONDS = 1000000;
export const DIEFF_OBJECTIDS = 1;
export const DIEFF_OBJECTOFFSETS = 2;
export const DIEFF_CARTESIAN = 16;
export const DIEFF_POLAR = 32;
export const DIEFF_SPHERICAL = 64;
export const DIEP_DURATION = 1;
export const DIEP_SAMPLEPERIOD = 2;
export const DIEP_GAIN = 4;
export const DIEP_TRIGGERBUTTON = 8;
export const DIEP_TRIGGERREPEATINTERVAL = 16;
export const DIEP_AXES = 32;
export const DIEP_DIRECTION = 64;
export const DIEP_ENVELOPE = 128;
export const DIEP_TYPESPECIFICPARAMS = 256;
export const DIEP_STARTDELAY = 512;
export const DIEP_ALLPARAMS_DX5 = 511;
export const DIEP_ALLPARAMS = 1023;
export const DIEP_START = 536870912;
export const DIEP_NORESTART = 1073741824;
export const DIEP_NODOWNLOAD = 2147483648;
export const DIEB_NOTRIGGER = 4294967295;
export const DIES_SOLO = 1;
export const DIES_NODOWNLOAD = 2147483648;
export const DIEGES_PLAYING = 1;
export const DIEGES_EMULATED = 2;
export const DIDEVTYPE_DEVICE = 1;
export const DIDEVTYPE_MOUSE = 2;
export const DIDEVTYPE_KEYBOARD = 3;
export const DIDEVTYPE_JOYSTICK = 4;
export const DI8DEVCLASS_ALL = 0;
export const DI8DEVCLASS_DEVICE = 1;
export const DI8DEVCLASS_POINTER = 2;
export const DI8DEVCLASS_KEYBOARD = 3;
export const DI8DEVCLASS_GAMECTRL = 4;
export const DI8DEVTYPE_DEVICE = 17;
export const DI8DEVTYPE_MOUSE = 18;
export const DI8DEVTYPE_KEYBOARD = 19;
export const DI8DEVTYPE_JOYSTICK = 20;
export const DI8DEVTYPE_GAMEPAD = 21;
export const DI8DEVTYPE_DRIVING = 22;
export const DI8DEVTYPE_FLIGHT = 23;
export const DI8DEVTYPE_1STPERSON = 24;
export const DI8DEVTYPE_DEVICECTRL = 25;
export const DI8DEVTYPE_SCREENPOINTER = 26;
export const DI8DEVTYPE_REMOTE = 27;
export const DI8DEVTYPE_SUPPLEMENTAL = 28;
export const DIDEVTYPE_HID = 65536;
export const DIDEVTYPEMOUSE_UNKNOWN = 1;
export const DIDEVTYPEMOUSE_TRADITIONAL = 2;
export const DIDEVTYPEMOUSE_FINGERSTICK = 3;
export const DIDEVTYPEMOUSE_TOUCHPAD = 4;
export const DIDEVTYPEMOUSE_TRACKBALL = 5;
export const DIDEVTYPEKEYBOARD_UNKNOWN = 0;
export const DIDEVTYPEKEYBOARD_PCXT = 1;
export const DIDEVTYPEKEYBOARD_OLIVETTI = 2;
export const DIDEVTYPEKEYBOARD_PCAT = 3;
export const DIDEVTYPEKEYBOARD_PCENH = 4;
export const DIDEVTYPEKEYBOARD_NOKIA1050 = 5;
export const DIDEVTYPEKEYBOARD_NOKIA9140 = 6;
export const DIDEVTYPEKEYBOARD_NEC98 = 7;
export const DIDEVTYPEKEYBOARD_NEC98LAPTOP = 8;
export const DIDEVTYPEKEYBOARD_NEC98106 = 9;
export const DIDEVTYPEKEYBOARD_JAPAN106 = 10;
export const DIDEVTYPEKEYBOARD_JAPANAX = 11;
export const DIDEVTYPEKEYBOARD_J3100 = 12;
export const DIDEVTYPEJOYSTICK_UNKNOWN = 1;
export const DIDEVTYPEJOYSTICK_TRADITIONAL = 2;
export const DIDEVTYPEJOYSTICK_FLIGHTSTICK = 3;
export const DIDEVTYPEJOYSTICK_GAMEPAD = 4;
export const DIDEVTYPEJOYSTICK_RUDDER = 5;
export const DIDEVTYPEJOYSTICK_WHEEL = 6;
export const DIDEVTYPEJOYSTICK_HEADTRACKER = 7;
export const DI8DEVTYPEMOUSE_UNKNOWN = 1;
export const DI8DEVTYPEMOUSE_TRADITIONAL = 2;
export const DI8DEVTYPEMOUSE_FINGERSTICK = 3;
export const DI8DEVTYPEMOUSE_TOUCHPAD = 4;
export const DI8DEVTYPEMOUSE_TRACKBALL = 5;
export const DI8DEVTYPEMOUSE_ABSOLUTE = 6;
export const DI8DEVTYPEKEYBOARD_UNKNOWN = 0;
export const DI8DEVTYPEKEYBOARD_PCXT = 1;
export const DI8DEVTYPEKEYBOARD_OLIVETTI = 2;
export const DI8DEVTYPEKEYBOARD_PCAT = 3;
export const DI8DEVTYPEKEYBOARD_PCENH = 4;
export const DI8DEVTYPEKEYBOARD_NOKIA1050 = 5;
export const DI8DEVTYPEKEYBOARD_NOKIA9140 = 6;
export const DI8DEVTYPEKEYBOARD_NEC98 = 7;
export const DI8DEVTYPEKEYBOARD_NEC98LAPTOP = 8;
export const DI8DEVTYPEKEYBOARD_NEC98106 = 9;
export const DI8DEVTYPEKEYBOARD_JAPAN106 = 10;
export const DI8DEVTYPEKEYBOARD_JAPANAX = 11;
export const DI8DEVTYPEKEYBOARD_J3100 = 12;
export const DI8DEVTYPE_LIMITEDGAMESUBTYPE = 1;
export const DI8DEVTYPEJOYSTICK_LIMITED = 1;
export const DI8DEVTYPEJOYSTICK_STANDARD = 2;
export const DI8DEVTYPEGAMEPAD_LIMITED = 1;
export const DI8DEVTYPEGAMEPAD_STANDARD = 2;
export const DI8DEVTYPEGAMEPAD_TILT = 3;
export const DI8DEVTYPEDRIVING_LIMITED = 1;
export const DI8DEVTYPEDRIVING_COMBINEDPEDALS = 2;
export const DI8DEVTYPEDRIVING_DUALPEDALS = 3;
export const DI8DEVTYPEDRIVING_THREEPEDALS = 4;
export const DI8DEVTYPEDRIVING_HANDHELD = 5;
export const DI8DEVTYPEFLIGHT_LIMITED = 1;
export const DI8DEVTYPEFLIGHT_STICK = 2;
export const DI8DEVTYPEFLIGHT_YOKE = 3;
export const DI8DEVTYPEFLIGHT_RC = 4;
export const DI8DEVTYPE1STPERSON_LIMITED = 1;
export const DI8DEVTYPE1STPERSON_UNKNOWN = 2;
export const DI8DEVTYPE1STPERSON_SIXDOF = 3;
export const DI8DEVTYPE1STPERSON_SHOOTER = 4;
export const DI8DEVTYPESCREENPTR_UNKNOWN = 2;
export const DI8DEVTYPESCREENPTR_LIGHTGUN = 3;
export const DI8DEVTYPESCREENPTR_LIGHTPEN = 4;
export const DI8DEVTYPESCREENPTR_TOUCH = 5;
export const DI8DEVTYPEREMOTE_UNKNOWN = 2;
export const DI8DEVTYPEDEVICECTRL_UNKNOWN = 2;
export const DI8DEVTYPEDEVICECTRL_COMMSSELECTION = 3;
export const DI8DEVTYPEDEVICECTRL_COMMSSELECTION_HARDWIRED = 4;
export const DI8DEVTYPESUPPLEMENTAL_UNKNOWN = 2;
export const DI8DEVTYPESUPPLEMENTAL_2NDHANDCONTROLLER = 3;
export const DI8DEVTYPESUPPLEMENTAL_HEADTRACKER = 4;
export const DI8DEVTYPESUPPLEMENTAL_HANDTRACKER = 5;
export const DI8DEVTYPESUPPLEMENTAL_SHIFTSTICKGATE = 6;
export const DI8DEVTYPESUPPLEMENTAL_SHIFTER = 7;
export const DI8DEVTYPESUPPLEMENTAL_THROTTLE = 8;
export const DI8DEVTYPESUPPLEMENTAL_SPLITTHROTTLE = 9;
export const DI8DEVTYPESUPPLEMENTAL_COMBINEDPEDALS = 10;
export const DI8DEVTYPESUPPLEMENTAL_DUALPEDALS = 11;
export const DI8DEVTYPESUPPLEMENTAL_THREEPEDALS = 12;
export const DI8DEVTYPESUPPLEMENTAL_RUDDERPEDALS = 13;
export const DIDC_ATTACHED = 1;
export const DIDC_POLLEDDEVICE = 2;
export const DIDC_EMULATED = 4;
export const DIDC_POLLEDDATAFORMAT = 8;
export const DIDC_FORCEFEEDBACK = 256;
export const DIDC_FFATTACK = 512;
export const DIDC_FFFADE = 1024;
export const DIDC_SATURATION = 2048;
export const DIDC_POSNEGCOEFFICIENTS = 4096;
export const DIDC_POSNEGSATURATION = 8192;
export const DIDC_DEADBAND = 16384;
export const DIDC_STARTDELAY = 32768;
export const DIDC_ALIAS = 65536;
export const DIDC_PHANTOM = 131072;
export const DIDC_HIDDEN = 262144;
export const DIDFT_ALL = 0;
export const DIDFT_RELAXIS = 1;
export const DIDFT_ABSAXIS = 2;
export const DIDFT_AXIS = 3;
export const DIDFT_PSHBUTTON = 4;
export const DIDFT_TGLBUTTON = 8;
export const DIDFT_BUTTON = 12;
export const DIDFT_POV = 16;
export const DIDFT_COLLECTION = 64;
export const DIDFT_NODATA = 128;
export const DIDFT_ANYINSTANCE = 16776960;
export const DIDFT_INSTANCEMASK = 16776960;
export const DIDFT_FFACTUATOR = 16777216;
export const DIDFT_FFEFFECTTRIGGER = 33554432;
export const DIDFT_OUTPUT = 268435456;
export const DIDFT_VENDORDEFINED = 67108864;
export const DIDFT_ALIAS = 134217728;
export const DIDFT_NOCOLLECTION = 16776960;
export const DIDF_ABSAXIS = 1;
export const DIDF_RELAXIS = 2;
export const DIA_FORCEFEEDBACK = 1;
export const DIA_APPMAPPED = 2;
export const DIA_APPNOMAP = 4;
export const DIA_NORANGE = 8;
export const DIA_APPFIXED = 16;
export const DIAH_UNMAPPED = 0;
export const DIAH_USERCONFIG = 1;
export const DIAH_APPREQUESTED = 2;
export const DIAH_HWAPP = 4;
export const DIAH_HWDEFAULT = 8;
export const DIAH_DEFAULT = 32;
export const DIAH_ERROR = 2147483648;
export const DIAFTS_NEWDEVICELOW = 4294967295;
export const DIAFTS_NEWDEVICEHIGH = 4294967295;
export const DIAFTS_UNUSEDDEVICELOW = 0;
export const DIAFTS_UNUSEDDEVICEHIGH = 0;
export const DIDBAM_DEFAULT = 0;
export const DIDBAM_PRESERVE = 1;
export const DIDBAM_INITIALIZE = 2;
export const DIDBAM_HWDEFAULTS = 4;
export const DIDSAM_DEFAULT = 0;
export const DIDSAM_NOUSER = 1;
export const DIDSAM_FORCESAVE = 2;
export const DICD_DEFAULT = 0;
export const DICD_EDIT = 1;
export const DIDIFT_CONFIGURATION = 1;
export const DIDIFT_OVERLAY = 2;
export const DIDAL_CENTERED = 0;
export const DIDAL_LEFTALIGNED = 1;
export const DIDAL_RIGHTALIGNED = 2;
export const DIDAL_MIDDLE = 0;
export const DIDAL_TOPALIGNED = 4;
export const DIDAL_BOTTOMALIGNED = 8;
export const DIDOI_FFACTUATOR = 1;
export const DIDOI_FFEFFECTTRIGGER = 2;
export const DIDOI_POLLED = 32768;
export const DIDOI_ASPECTPOSITION = 256;
export const DIDOI_ASPECTVELOCITY = 512;
export const DIDOI_ASPECTACCEL = 768;
export const DIDOI_ASPECTFORCE = 1024;
export const DIDOI_ASPECTMASK = 3840;
export const DIDOI_GUIDISUSAGE = 65536;
export const DIPH_DEVICE = 0;
export const DIPH_BYOFFSET = 1;
export const DIPH_BYID = 2;
export const DIPH_BYUSAGE = 3;
export const MAXCPOINTSNUM = 8;
export const DIPROPAXISMODE_ABS = 0;
export const DIPROPAXISMODE_REL = 1;
export const DIPROPAUTOCENTER_OFF = 0;
export const DIPROPAUTOCENTER_ON = 1;
export const DIPROPCALIBRATIONMODE_COOKED = 0;
export const DIPROPCALIBRATIONMODE_RAW = 1;
export const DIGDD_PEEK = 1;
export const DISCL_EXCLUSIVE = 1;
export const DISCL_NONEXCLUSIVE = 2;
export const DISCL_FOREGROUND = 4;
export const DISCL_BACKGROUND = 8;
export const DISCL_NOWINKEY = 16;
export const DISFFC_RESET = 1;
export const DISFFC_STOPALL = 2;
export const DISFFC_PAUSE = 4;
export const DISFFC_CONTINUE = 8;
export const DISFFC_SETACTUATORSON = 16;
export const DISFFC_SETACTUATORSOFF = 32;
export const DIGFFS_EMPTY = 1;
export const DIGFFS_STOPPED = 2;
export const DIGFFS_PAUSED = 4;
export const DIGFFS_ACTUATORSON = 16;
export const DIGFFS_ACTUATORSOFF = 32;
export const DIGFFS_POWERON = 64;
export const DIGFFS_POWEROFF = 128;
export const DIGFFS_SAFETYSWITCHON = 256;
export const DIGFFS_SAFETYSWITCHOFF = 512;
export const DIGFFS_USERFFSWITCHON = 1024;
export const DIGFFS_USERFFSWITCHOFF = 2048;
export const DIGFFS_DEVICELOST = 2147483648;
export const DISDD_CONTINUE = 1;
export const DIFEF_DEFAULT = 0;
export const DIFEF_INCLUDENONSTANDARD = 1;
export const DIFEF_MODIFYIFNEEDED = 16;
export const DIK_ESCAPE = 1;
export const DIK_1 = 2;
export const DIK_2 = 3;
export const DIK_3 = 4;
export const DIK_4 = 5;
export const DIK_5 = 6;
export const DIK_6 = 7;
export const DIK_7 = 8;
export const DIK_8 = 9;
export const DIK_9 = 10;
export const DIK_0 = 11;
export const DIK_MINUS = 12;
export const DIK_EQUALS = 13;
export const DIK_BACK = 14;
export const DIK_TAB = 15;
export const DIK_Q = 16;
export const DIK_W = 17;
export const DIK_E = 18;
export const DIK_R = 19;
export const DIK_T = 20;
export const DIK_Y = 21;
export const DIK_U = 22;
export const DIK_I = 23;
export const DIK_O = 24;
export const DIK_P = 25;
export const DIK_LBRACKET = 26;
export const DIK_RBRACKET = 27;
export const DIK_RETURN = 28;
export const DIK_LCONTROL = 29;
export const DIK_A = 30;
export const DIK_S = 31;
export const DIK_D = 32;
export const DIK_F = 33;
export const DIK_G = 34;
export const DIK_H = 35;
export const DIK_J = 36;
export const DIK_K = 37;
export const DIK_L = 38;
export const DIK_SEMICOLON = 39;
export const DIK_APOSTROPHE = 40;
export const DIK_GRAVE = 41;
export const DIK_LSHIFT = 42;
export const DIK_BACKSLASH = 43;
export const DIK_Z = 44;
export const DIK_X = 45;
export const DIK_C = 46;
export const DIK_V = 47;
export const DIK_B = 48;
export const DIK_N = 49;
export const DIK_M = 50;
export const DIK_COMMA = 51;
export const DIK_PERIOD = 52;
export const DIK_SLASH = 53;
export const DIK_RSHIFT = 54;
export const DIK_MULTIPLY = 55;
export const DIK_LMENU = 56;
export const DIK_SPACE = 57;
export const DIK_CAPITAL = 58;
export const DIK_F1 = 59;
export const DIK_F2 = 60;
export const DIK_F3 = 61;
export const DIK_F4 = 62;
export const DIK_F5 = 63;
export const DIK_F6 = 64;
export const DIK_F7 = 65;
export const DIK_F8 = 66;
export const DIK_F9 = 67;
export const DIK_F10 = 68;
export const DIK_NUMLOCK = 69;
export const DIK_SCROLL = 70;
export const DIK_NUMPAD7 = 71;
export const DIK_NUMPAD8 = 72;
export const DIK_NUMPAD9 = 73;
export const DIK_SUBTRACT = 74;
export const DIK_NUMPAD4 = 75;
export const DIK_NUMPAD5 = 76;
export const DIK_NUMPAD6 = 77;
export const DIK_ADD = 78;
export const DIK_NUMPAD1 = 79;
export const DIK_NUMPAD2 = 80;
export const DIK_NUMPAD3 = 81;
export const DIK_NUMPAD0 = 82;
export const DIK_DECIMAL = 83;
export const DIK_OEM_102 = 86;
export const DIK_F11 = 87;
export const DIK_F12 = 88;
export const DIK_F13 = 100;
export const DIK_F14 = 101;
export const DIK_F15 = 102;
export const DIK_KANA = 112;
export const DIK_ABNT_C1 = 115;
export const DIK_CONVERT = 121;
export const DIK_NOCONVERT = 123;
export const DIK_YEN = 125;
export const DIK_ABNT_C2 = 126;
export const DIK_NUMPADEQUALS = 141;
export const DIK_PREVTRACK = 144;
export const DIK_AT = 145;
export const DIK_COLON = 146;
export const DIK_UNDERLINE = 147;
export const DIK_KANJI = 148;
export const DIK_STOP = 149;
export const DIK_AX = 150;
export const DIK_UNLABELED = 151;
export const DIK_NEXTTRACK = 153;
export const DIK_NUMPADENTER = 156;
export const DIK_RCONTROL = 157;
export const DIK_MUTE = 160;
export const DIK_CALCULATOR = 161;
export const DIK_PLAYPAUSE = 162;
export const DIK_MEDIASTOP = 164;
export const DIK_VOLUMEDOWN = 174;
export const DIK_VOLUMEUP = 176;
export const DIK_WEBHOME = 178;
export const DIK_NUMPADCOMMA = 179;
export const DIK_DIVIDE = 181;
export const DIK_SYSRQ = 183;
export const DIK_RMENU = 184;
export const DIK_PAUSE = 197;
export const DIK_HOME = 199;
export const DIK_UP = 200;
export const DIK_PRIOR = 201;
export const DIK_LEFT = 203;
export const DIK_RIGHT = 205;
export const DIK_END = 207;
export const DIK_DOWN = 208;
export const DIK_NEXT = 209;
export const DIK_INSERT = 210;
export const DIK_DELETE = 211;
export const DIK_LWIN = 219;
export const DIK_RWIN = 220;
export const DIK_APPS = 221;
export const DIK_POWER = 222;
export const DIK_SLEEP = 223;
export const DIK_WAKE = 227;
export const DIK_WEBSEARCH = 229;
export const DIK_WEBFAVORITES = 230;
export const DIK_WEBREFRESH = 231;
export const DIK_WEBSTOP = 232;
export const DIK_WEBFORWARD = 233;
export const DIK_WEBBACK = 234;
export const DIK_MYCOMPUTER = 235;
export const DIK_MAIL = 236;
export const DIK_MEDIASELECT = 237;
export const DIK_BACKSPACE = 14;
export const DIK_NUMPADSTAR = 55;
export const DIK_LALT = 56;
export const DIK_CAPSLOCK = 58;
export const DIK_NUMPADMINUS = 74;
export const DIK_NUMPADPLUS = 78;
export const DIK_NUMPADPERIOD = 83;
export const DIK_NUMPADSLASH = 181;
export const DIK_RALT = 184;
export const DIK_UPARROW = 200;
export const DIK_PGUP = 201;
export const DIK_LEFTARROW = 203;
export const DIK_RIGHTARROW = 205;
export const DIK_DOWNARROW = 208;
export const DIK_PGDN = 209;
export const DIK_CIRCUMFLEX = 144;
export const DIENUM_STOP = 0;
export const DIENUM_CONTINUE = 1;
export const DIEDFL_ALLDEVICES = 0;
export const DIEDFL_ATTACHEDONLY = 1;
export const DIEDFL_FORCEFEEDBACK = 256;
export const DIEDFL_INCLUDEALIASES = 65536;
export const DIEDFL_INCLUDEPHANTOMS = 131072;
export const DIEDFL_INCLUDEHIDDEN = 262144;
export const DIEDBS_MAPPEDPRI1 = 1;
export const DIEDBS_MAPPEDPRI2 = 2;
export const DIEDBS_RECENTDEVICE = 16;
export const DIEDBS_NEWDEVICE = 32;
export const DIEDBSFL_ATTACHEDONLY = 0;
export const DIEDBSFL_THISUSER = 16;
export const DIEDBSFL_FORCEFEEDBACK = 256;
export const DIEDBSFL_AVAILABLEDEVICES = 4096;
export const DIEDBSFL_MULTIMICEKEYBOARDS = 8192;
export const DIEDBSFL_NONGAMINGDEVICES = 16384;
export const DIEDBSFL_VALID = 28944;
export const DI_OK = 0;
export const DI_NOTATTACHED = 1;
export const DI_BUFFEROVERFLOW = 1;
export const DI_PROPNOEFFECT = 1;
export const DI_NOEFFECT = 1;
export const DI_POLLEDDEVICE = 4415226380290;
export const DI_DOWNLOADSKIPPED = 5514738008067;
export const DI_EFFECTRESTARTED = 1518001159355236356n;
export const DI_TRUNCATED = 16509854285832;
export const DI_SETTINGSNOTSAVED = 1147907319267339;
export const DI_TRUNCATEDANDRESTARTED = 14310831030284;
export const DI_WRITEPROTECT = 28604482191379;
export const DIERR_OLDDIRECTINPUTVERSION = 505670914500134014n;
export const DIERR_BETADIRECTINPUTVERSION = 504534019477013633n;
export const DIERR_BADDRIVERVER = 504405376616562807n;
export const DIERR_DEVICENOTREG = `-2147221164`;
export const DIERR_NOTFOUND = 504426267337490434n;
export const DIERR_OBJECTNOTFOUND = 504426267337490434n;
export const DIERR_INVALIDPARAM = `-2147024809`;
export const DIERR_NOINTERFACE = `-2147467262`;
export const DIERR_GENERIC = `-2147467259`;
export const DIERR_OUTOFMEMORY = `-2147024882`;
export const DIERR_UNSUPPORTED = `-2147467263`;
export const DIERR_NOTINITIALIZED = 505774268593143829n;
export const DIERR_ALREADYINITIALIZED = 504439461477024991n;
export const DIERR_NOAGGREGATION = `-2147221232`;
export const DIERR_OTHERAPPHASPRIO = `-2147024891`;
export const DIERR_INPUTLOST = 504590094570029086n;
export const DIERR_ACQUIRED = 504416371732840618n;
export const DIERR_NOTACQUIRED = 1127018746281996;
export const DIERR_READONLY = `-2147024891`;
export const DIERR_HANDLEEXISTS = `-2147024891`;
export const DIERR_INSUFFICIENTPRIVS = `-2147220992`;
export const DIERR_DEVICEFULL = `-2147220991`;
export const DIERR_MOREDATA = `-2147220990`;
export const DIERR_NOTDOWNLOADED = `-2147220989`;
export const DIERR_HASEFFECTS = `-2147220988`;
export const DIERR_NOTEXCLUSIVEACQUIRED = `-2147220987`;
export const DIERR_INCOMPLETEEFFECT = `-2147220986`;
export const DIERR_NOTBUFFERED = `-2147220985`;
export const DIERR_EFFECTPLAYING = `-2147220984`;
export const DIERR_UNPLUGGED = `-2147220983`;
export const DIERR_REPORTFULL = `-2147220982`;
export const DIERR_MAPFILEFAIL = `-2147220981`;
export const DIKEYBOARD_ESCAPE = 2164261889;
export const DIKEYBOARD_1 = 2164261890;
export const DIKEYBOARD_2 = 2164261891;
export const DIKEYBOARD_3 = 2164261892;
export const DIKEYBOARD_4 = 2164261893;
export const DIKEYBOARD_5 = 2164261894;
export const DIKEYBOARD_6 = 2164261895;
export const DIKEYBOARD_7 = 2164261896;
export const DIKEYBOARD_8 = 2164261897;
export const DIKEYBOARD_9 = 2164261898;
export const DIKEYBOARD_0 = 2164261899;
export const DIKEYBOARD_MINUS = 2164261900;
export const DIKEYBOARD_EQUALS = 2164261901;
export const DIKEYBOARD_BACK = 2164261902;
export const DIKEYBOARD_TAB = 2164261903;
export const DIKEYBOARD_Q = 2164261904;
export const DIKEYBOARD_W = 2164261905;
export const DIKEYBOARD_E = 2164261906;
export const DIKEYBOARD_R = 2164261907;
export const DIKEYBOARD_T = 2164261908;
export const DIKEYBOARD_Y = 2164261909;
export const DIKEYBOARD_U = 2164261910;
export const DIKEYBOARD_I = 2164261911;
export const DIKEYBOARD_O = 2164261912;
export const DIKEYBOARD_P = 2164261913;
export const DIKEYBOARD_LBRACKET = 2164261914;
export const DIKEYBOARD_RBRACKET = 2164261915;
export const DIKEYBOARD_RETURN = 2164261916;
export const DIKEYBOARD_LCONTROL = 2164261917;
export const DIKEYBOARD_A = 2164261918;
export const DIKEYBOARD_S = 2164261919;
export const DIKEYBOARD_D = 2164261920;
export const DIKEYBOARD_F = 2164261921;
export const DIKEYBOARD_G = 2164261922;
export const DIKEYBOARD_H = 2164261923;
export const DIKEYBOARD_J = 2164261924;
export const DIKEYBOARD_K = 2164261925;
export const DIKEYBOARD_L = 2164261926;
export const DIKEYBOARD_SEMICOLON = 2164261927;
export const DIKEYBOARD_APOSTROPHE = 2164261928;
export const DIKEYBOARD_GRAVE = 2164261929;
export const DIKEYBOARD_LSHIFT = 2164261930;
export const DIKEYBOARD_BACKSLASH = 2164261931;
export const DIKEYBOARD_Z = 2164261932;
export const DIKEYBOARD_X = 2164261933;
export const DIKEYBOARD_C = 2164261934;
export const DIKEYBOARD_V = 2164261935;
export const DIKEYBOARD_B = 2164261936;
export const DIKEYBOARD_N = 2164261937;
export const DIKEYBOARD_M = 2164261938;
export const DIKEYBOARD_COMMA = 2164261939;
export const DIKEYBOARD_PERIOD = 2164261940;
export const DIKEYBOARD_SLASH = 2164261941;
export const DIKEYBOARD_RSHIFT = 2164261942;
export const DIKEYBOARD_MULTIPLY = 2164261943;
export const DIKEYBOARD_LMENU = 2164261944;
export const DIKEYBOARD_SPACE = 2164261945;
export const DIKEYBOARD_CAPITAL = 2164261946;
export const DIKEYBOARD_F1 = 2164261947;
export const DIKEYBOARD_F2 = 2164261948;
export const DIKEYBOARD_F3 = 2164261949;
export const DIKEYBOARD_F4 = 2164261950;
export const DIKEYBOARD_F5 = 2164261951;
export const DIKEYBOARD_F6 = 2164261952;
export const DIKEYBOARD_F7 = 2164261953;
export const DIKEYBOARD_F8 = 2164261954;
export const DIKEYBOARD_F9 = 2164261955;
export const DIKEYBOARD_F10 = 2164261956;
export const DIKEYBOARD_NUMLOCK = 2164261957;
export const DIKEYBOARD_SCROLL = 2164261958;
export const DIKEYBOARD_NUMPAD7 = 2164261959;
export const DIKEYBOARD_NUMPAD8 = 2164261960;
export const DIKEYBOARD_NUMPAD9 = 2164261961;
export const DIKEYBOARD_SUBTRACT = 2164261962;
export const DIKEYBOARD_NUMPAD4 = 2164261963;
export const DIKEYBOARD_NUMPAD5 = 2164261964;
export const DIKEYBOARD_NUMPAD6 = 2164261965;
export const DIKEYBOARD_ADD = 2164261966;
export const DIKEYBOARD_NUMPAD1 = 2164261967;
export const DIKEYBOARD_NUMPAD2 = 2164261968;
export const DIKEYBOARD_NUMPAD3 = 2164261969;
export const DIKEYBOARD_NUMPAD0 = 2164261970;
export const DIKEYBOARD_DECIMAL = 2164261971;
export const DIKEYBOARD_OEM_102 = 2164261974;
export const DIKEYBOARD_F11 = 2164261975;
export const DIKEYBOARD_F12 = 2164261976;
export const DIKEYBOARD_F13 = 2164261988;
export const DIKEYBOARD_F14 = 2164261989;
export const DIKEYBOARD_F15 = 2164261990;
export const DIKEYBOARD_KANA = 2164262000;
export const DIKEYBOARD_ABNT_C1 = 2164262003;
export const DIKEYBOARD_CONVERT = 2164262009;
export const DIKEYBOARD_NOCONVERT = 2164262011;
export const DIKEYBOARD_YEN = 2164262013;
export const DIKEYBOARD_ABNT_C2 = 2164262014;
export const DIKEYBOARD_NUMPADEQUALS = 2164262029;
export const DIKEYBOARD_PREVTRACK = 2164262032;
export const DIKEYBOARD_AT = 2164262033;
export const DIKEYBOARD_COLON = 2164262034;
export const DIKEYBOARD_UNDERLINE = 2164262035;
export const DIKEYBOARD_KANJI = 2164262036;
export const DIKEYBOARD_STOP = 2164262037;
export const DIKEYBOARD_AX = 2164262038;
export const DIKEYBOARD_UNLABELED = 2164262039;
export const DIKEYBOARD_NEXTTRACK = 2164262041;
export const DIKEYBOARD_NUMPADENTER = 2164262044;
export const DIKEYBOARD_RCONTROL = 2164262045;
export const DIKEYBOARD_MUTE = 2164262048;
export const DIKEYBOARD_CALCULATOR = 2164262049;
export const DIKEYBOARD_PLAYPAUSE = 2164262050;
export const DIKEYBOARD_MEDIASTOP = 2164262052;
export const DIKEYBOARD_VOLUMEDOWN = 2164262062;
export const DIKEYBOARD_VOLUMEUP = 2164262064;
export const DIKEYBOARD_WEBHOME = 2164262066;
export const DIKEYBOARD_NUMPADCOMMA = 2164262067;
export const DIKEYBOARD_DIVIDE = 2164262069;
export const DIKEYBOARD_SYSRQ = 2164262071;
export const DIKEYBOARD_RMENU = 2164262072;
export const DIKEYBOARD_PAUSE = 2164262085;
export const DIKEYBOARD_HOME = 2164262087;
export const DIKEYBOARD_UP = 2164262088;
export const DIKEYBOARD_PRIOR = 2164262089;
export const DIKEYBOARD_LEFT = 2164262091;
export const DIKEYBOARD_RIGHT = 2164262093;
export const DIKEYBOARD_END = 2164262095;
export const DIKEYBOARD_DOWN = 2164262096;
export const DIKEYBOARD_NEXT = 2164262097;
export const DIKEYBOARD_INSERT = 2164262098;
export const DIKEYBOARD_DELETE = 2164262099;
export const DIKEYBOARD_LWIN = 2164262107;
export const DIKEYBOARD_RWIN = 2164262108;
export const DIKEYBOARD_APPS = 2164262109;
export const DIKEYBOARD_POWER = 2164262110;
export const DIKEYBOARD_SLEEP = 2164262111;
export const DIKEYBOARD_WAKE = 2164262115;
export const DIKEYBOARD_WEBSEARCH = 2164262117;
export const DIKEYBOARD_WEBFAVORITES = 2164262118;
export const DIKEYBOARD_WEBREFRESH = 2164262119;
export const DIKEYBOARD_WEBSTOP = 2164262120;
export const DIKEYBOARD_WEBFORWARD = 2164262121;
export const DIKEYBOARD_WEBBACK = 2164262122;
export const DIKEYBOARD_MYCOMPUTER = 2164262123;
export const DIKEYBOARD_MAIL = 2164262124;
export const DIKEYBOARD_MEDIASELECT = 2164262125;
export const DIVOICE_CHANNEL1 = 2197816321;
export const DIVOICE_CHANNEL2 = 2197816322;
export const DIVOICE_CHANNEL3 = 2197816323;
export const DIVOICE_CHANNEL4 = 2197816324;
export const DIVOICE_CHANNEL5 = 2197816325;
export const DIVOICE_CHANNEL6 = 2197816326;
export const DIVOICE_CHANNEL7 = 2197816327;
export const DIVOICE_CHANNEL8 = 2197816328;
export const DIVOICE_TEAM = 2197816329;
export const DIVOICE_ALL = 2197816330;
export const DIVOICE_RECORDMUTE = 2197816331;
export const DIVOICE_PLAYBACKMUTE = 2197816332;
export const DIVOICE_TRANSMIT = 2197816333;
export const DIVOICE_VOICECOMMAND = 2197816336;
export const DIVIRTUAL_DRIVING_RACE = 16777216;
export const DIAXIS_DRIVINGR_STEER = 16812545;
export const DIAXIS_DRIVINGR_ACCELERATE = 17011202;
export const DIAXIS_DRIVINGR_BRAKE = 17043971;
export const DIBUTTON_DRIVINGR_SHIFTUP = 16780289;
export const DIBUTTON_DRIVINGR_SHIFTDOWN = 16780290;
export const DIBUTTON_DRIVINGR_VIEW = 16784387;
export const DIBUTTON_DRIVINGR_MENU = 16778493;
export const DIAXIS_DRIVINGR_ACCEL_AND_BRAKE = 16861700;
export const DIHATSWITCH_DRIVINGR_GLANCE = 16795137;
export const DIBUTTON_DRIVINGR_BRAKE = 16796676;
export const DIBUTTON_DRIVINGR_DASHBOARD = 16794629;
export const DIBUTTON_DRIVINGR_AIDS = 16794630;
export const DIBUTTON_DRIVINGR_MAP = 16794631;
export const DIBUTTON_DRIVINGR_BOOST = 16794632;
export const DIBUTTON_DRIVINGR_PIT = 16794633;
export const DIBUTTON_DRIVINGR_ACCELERATE_LINK = 17028320;
export const DIBUTTON_DRIVINGR_STEER_LEFT_LINK = 16829668;
export const DIBUTTON_DRIVINGR_STEER_RIGHT_LINK = 16829676;
export const DIBUTTON_DRIVINGR_GLANCE_LEFT_LINK = 17286372;
export const DIBUTTON_DRIVINGR_GLANCE_RIGHT_LINK = 17286380;
export const DIBUTTON_DRIVINGR_DEVICE = 16794878;
export const DIBUTTON_DRIVINGR_PAUSE = 16794876;
export const DIVIRTUAL_DRIVING_COMBAT = 33554432;
export const DIAXIS_DRIVINGC_STEER = 33589761;
export const DIAXIS_DRIVINGC_ACCELERATE = 33788418;
export const DIAXIS_DRIVINGC_BRAKE = 33821187;
export const DIBUTTON_DRIVINGC_FIRE = 33557505;
export const DIBUTTON_DRIVINGC_WEAPONS = 33557506;
export const DIBUTTON_DRIVINGC_TARGET = 33557507;
export const DIBUTTON_DRIVINGC_MENU = 33555709;
export const DIAXIS_DRIVINGC_ACCEL_AND_BRAKE = 33638916;
export const DIHATSWITCH_DRIVINGC_GLANCE = 33572353;
export const DIBUTTON_DRIVINGC_SHIFTUP = 33573892;
export const DIBUTTON_DRIVINGC_SHIFTDOWN = 33573893;
export const DIBUTTON_DRIVINGC_DASHBOARD = 33571846;
export const DIBUTTON_DRIVINGC_AIDS = 33571847;
export const DIBUTTON_DRIVINGC_BRAKE = 33573896;
export const DIBUTTON_DRIVINGC_FIRESECONDARY = 33573897;
export const DIBUTTON_DRIVINGC_ACCELERATE_LINK = 33805536;
export const DIBUTTON_DRIVINGC_STEER_LEFT_LINK = 33606884;
export const DIBUTTON_DRIVINGC_STEER_RIGHT_LINK = 33606892;
export const DIBUTTON_DRIVINGC_GLANCE_LEFT_LINK = 34063588;
export const DIBUTTON_DRIVINGC_GLANCE_RIGHT_LINK = 34063596;
export const DIBUTTON_DRIVINGC_DEVICE = 33572094;
export const DIBUTTON_DRIVINGC_PAUSE = 33572092;
export const DIVIRTUAL_DRIVING_TANK = 50331648;
export const DIAXIS_DRIVINGT_STEER = 50366977;
export const DIAXIS_DRIVINGT_BARREL = 50397698;
export const DIAXIS_DRIVINGT_ACCELERATE = 50565635;
export const DIAXIS_DRIVINGT_ROTATE = 50463236;
export const DIBUTTON_DRIVINGT_FIRE = 50334721;
export const DIBUTTON_DRIVINGT_WEAPONS = 50334722;
export const DIBUTTON_DRIVINGT_TARGET = 50334723;
export const DIBUTTON_DRIVINGT_MENU = 50332925;
export const DIHATSWITCH_DRIVINGT_GLANCE = 50349569;
export const DIAXIS_DRIVINGT_BRAKE = 50614789;
export const DIAXIS_DRIVINGT_ACCEL_AND_BRAKE = 50416134;
export const DIBUTTON_DRIVINGT_VIEW = 50355204;
export const DIBUTTON_DRIVINGT_DASHBOARD = 50355205;
export const DIBUTTON_DRIVINGT_BRAKE = 50351110;
export const DIBUTTON_DRIVINGT_FIRESECONDARY = 50351111;
export const DIBUTTON_DRIVINGT_ACCELERATE_LINK = 50582752;
export const DIBUTTON_DRIVINGT_STEER_LEFT_LINK = 50384100;
export const DIBUTTON_DRIVINGT_STEER_RIGHT_LINK = 50384108;
export const DIBUTTON_DRIVINGT_BARREL_UP_LINK = 50414816;
export const DIBUTTON_DRIVINGT_BARREL_DOWN_LINK = 50414824;
export const DIBUTTON_DRIVINGT_ROTATE_LEFT_LINK = 50480356;
export const DIBUTTON_DRIVINGT_ROTATE_RIGHT_LINK = 50480364;
export const DIBUTTON_DRIVINGT_GLANCE_LEFT_LINK = 50840804;
export const DIBUTTON_DRIVINGT_GLANCE_RIGHT_LINK = 50840812;
export const DIBUTTON_DRIVINGT_DEVICE = 50349310;
export const DIBUTTON_DRIVINGT_PAUSE = 50349308;
export const DIVIRTUAL_FLYING_CIVILIAN = 67108864;
export const DIAXIS_FLYINGC_BANK = 67144193;
export const DIAXIS_FLYINGC_PITCH = 67176962;
export const DIAXIS_FLYINGC_THROTTLE = 67342851;
export const DIBUTTON_FLYINGC_VIEW = 67118081;
export const DIBUTTON_FLYINGC_DISPLAY = 67118082;
export const DIBUTTON_FLYINGC_GEAR = 67120131;
export const DIBUTTON_FLYINGC_MENU = 67110141;
export const DIHATSWITCH_FLYINGC_GLANCE = 67126785;
export const DIAXIS_FLYINGC_BRAKE = 67398148;
export const DIAXIS_FLYINGC_RUDDER = 67260933;
export const DIAXIS_FLYINGC_FLAPS = 67459590;
export const DIBUTTON_FLYINGC_FLAPSUP = 67134468;
export const DIBUTTON_FLYINGC_FLAPSDOWN = 67134469;
export const DIBUTTON_FLYINGC_BRAKE_LINK = 67398880;
export const DIBUTTON_FLYINGC_FASTER_LINK = 67359968;
export const DIBUTTON_FLYINGC_SLOWER_LINK = 67359976;
export const DIBUTTON_FLYINGC_GLANCE_LEFT_LINK = 67618020;
export const DIBUTTON_FLYINGC_GLANCE_RIGHT_LINK = 67618028;
export const DIBUTTON_FLYINGC_GLANCE_UP_LINK = 67618016;
export const DIBUTTON_FLYINGC_GLANCE_DOWN_LINK = 67618024;
export const DIBUTTON_FLYINGC_DEVICE = 67126526;
export const DIBUTTON_FLYINGC_PAUSE = 67126524;
export const DIVIRTUAL_FLYING_MILITARY = 83886080;
export const DIAXIS_FLYINGM_BANK = 83921409;
export const DIAXIS_FLYINGM_PITCH = 83954178;
export const DIAXIS_FLYINGM_THROTTLE = 84120067;
export const DIBUTTON_FLYINGM_FIRE = 83889153;
export const DIBUTTON_FLYINGM_WEAPONS = 83889154;
export const DIBUTTON_FLYINGM_TARGET = 83889155;
export const DIBUTTON_FLYINGM_MENU = 83887357;
export const DIHATSWITCH_FLYINGM_GLANCE = 83904001;
export const DIBUTTON_FLYINGM_COUNTER = 83909636;
export const DIAXIS_FLYINGM_RUDDER = 84036100;
export const DIAXIS_FLYINGM_BRAKE = 84173317;
export const DIBUTTON_FLYINGM_VIEW = 83911685;
export const DIBUTTON_FLYINGM_DISPLAY = 83911686;
export const DIAXIS_FLYINGM_FLAPS = 84234758;
export const DIBUTTON_FLYINGM_FLAPSUP = 83907591;
export const DIBUTTON_FLYINGM_FLAPSDOWN = 83907592;
export const DIBUTTON_FLYINGM_FIRESECONDARY = 83905545;
export const DIBUTTON_FLYINGM_GEAR = 83911690;
export const DIBUTTON_FLYINGM_BRAKE_LINK = 84174048;
export const DIBUTTON_FLYINGM_FASTER_LINK = 84137184;
export const DIBUTTON_FLYINGM_SLOWER_LINK = 84137192;
export const DIBUTTON_FLYINGM_GLANCE_LEFT_LINK = 84395236;
export const DIBUTTON_FLYINGM_GLANCE_RIGHT_LINK = 84395244;
export const DIBUTTON_FLYINGM_GLANCE_UP_LINK = 84395232;
export const DIBUTTON_FLYINGM_GLANCE_DOWN_LINK = 84395240;
export const DIBUTTON_FLYINGM_DEVICE = 83903742;
export const DIBUTTON_FLYINGM_PAUSE = 83903740;
export const DIVIRTUAL_FLYING_HELICOPTER = 100663296;
export const DIAXIS_FLYINGH_BANK = 100698625;
export const DIAXIS_FLYINGH_PITCH = 100731394;
export const DIAXIS_FLYINGH_COLLECTIVE = 100764163;
export const DIBUTTON_FLYINGH_FIRE = 100668417;
export const DIBUTTON_FLYINGH_WEAPONS = 100668418;
export const DIBUTTON_FLYINGH_TARGET = 100668419;
export const DIBUTTON_FLYINGH_MENU = 100664573;
export const DIHATSWITCH_FLYINGH_GLANCE = 100681217;
export const DIAXIS_FLYINGH_TORQUE = 100817412;
export const DIAXIS_FLYINGH_THROTTLE = 100915717;
export const DIBUTTON_FLYINGH_COUNTER = 100684804;
export const DIBUTTON_FLYINGH_VIEW = 100688901;
export const DIBUTTON_FLYINGH_GEAR = 100688902;
export const DIBUTTON_FLYINGH_FIRESECONDARY = 100682759;
export const DIBUTTON_FLYINGH_FASTER_LINK = 100916448;
export const DIBUTTON_FLYINGH_SLOWER_LINK = 100916456;
export const DIBUTTON_FLYINGH_GLANCE_LEFT_LINK = 101172452;
export const DIBUTTON_FLYINGH_GLANCE_RIGHT_LINK = 101172460;
export const DIBUTTON_FLYINGH_GLANCE_UP_LINK = 101172448;
export const DIBUTTON_FLYINGH_GLANCE_DOWN_LINK = 101172456;
export const DIBUTTON_FLYINGH_DEVICE = 100680958;
export const DIBUTTON_FLYINGH_PAUSE = 100680956;
export const DIVIRTUAL_SPACESIM = 117440512;
export const DIAXIS_SPACESIM_LATERAL = 117473793;
export const DIAXIS_SPACESIM_MOVE = 117506562;
export const DIAXIS_SPACESIM_THROTTLE = 117670403;
export const DIBUTTON_SPACESIM_FIRE = 117441537;
export const DIBUTTON_SPACESIM_WEAPONS = 117441538;
export const DIBUTTON_SPACESIM_TARGET = 117441539;
export const DIBUTTON_SPACESIM_MENU = 117441789;
export const DIHATSWITCH_SPACESIM_GLANCE = 117458433;
export const DIAXIS_SPACESIM_CLIMB = 117555716;
export const DIAXIS_SPACESIM_ROTATE = 117588485;
export const DIBUTTON_SPACESIM_VIEW = 117457924;
export const DIBUTTON_SPACESIM_DISPLAY = 117457925;
export const DIBUTTON_SPACESIM_RAISE = 117457926;
export const DIBUTTON_SPACESIM_LOWER = 117457927;
export const DIBUTTON_SPACESIM_GEAR = 117457928;
export const DIBUTTON_SPACESIM_FIRESECONDARY = 117457929;
export const DIBUTTON_SPACESIM_LEFT_LINK = 117490916;
export const DIBUTTON_SPACESIM_RIGHT_LINK = 117490924;
export const DIBUTTON_SPACESIM_FORWARD_LINK = 117523680;
export const DIBUTTON_SPACESIM_BACKWARD_LINK = 117523688;
export const DIBUTTON_SPACESIM_FASTER_LINK = 117687520;
export const DIBUTTON_SPACESIM_SLOWER_LINK = 117687528;
export const DIBUTTON_SPACESIM_TURN_LEFT_LINK = 117589220;
export const DIBUTTON_SPACESIM_TURN_RIGHT_LINK = 117589228;
export const DIBUTTON_SPACESIM_GLANCE_LEFT_LINK = 117949668;
export const DIBUTTON_SPACESIM_GLANCE_RIGHT_LINK = 117949676;
export const DIBUTTON_SPACESIM_GLANCE_UP_LINK = 117949664;
export const DIBUTTON_SPACESIM_GLANCE_DOWN_LINK = 117949672;
export const DIBUTTON_SPACESIM_DEVICE = 117458174;
export const DIBUTTON_SPACESIM_PAUSE = 117458172;
export const DIVIRTUAL_FIGHTING_HAND2HAND = 134217728;
export const DIAXIS_FIGHTINGH_LATERAL = 134251009;
export const DIAXIS_FIGHTINGH_MOVE = 134283778;
export const DIBUTTON_FIGHTINGH_PUNCH = 134218753;
export const DIBUTTON_FIGHTINGH_KICK = 134218754;
export const DIBUTTON_FIGHTINGH_BLOCK = 134218755;
export const DIBUTTON_FIGHTINGH_CROUCH = 134218756;
export const DIBUTTON_FIGHTINGH_JUMP = 134218757;
export const DIBUTTON_FIGHTINGH_SPECIAL1 = 134218758;
export const DIBUTTON_FIGHTINGH_SPECIAL2 = 134218759;
export const DIBUTTON_FIGHTINGH_MENU = 134219005;
export const DIBUTTON_FIGHTINGH_SELECT = 134235144;
export const DIHATSWITCH_FIGHTINGH_SLIDE = 134235649;
export const DIBUTTON_FIGHTINGH_DISPLAY = 134235145;
export const DIAXIS_FIGHTINGH_ROTATE = 134365699;
export const DIBUTTON_FIGHTINGH_DODGE = 134235146;
export const DIBUTTON_FIGHTINGH_LEFT_LINK = 134268132;
export const DIBUTTON_FIGHTINGH_RIGHT_LINK = 134268140;
export const DIBUTTON_FIGHTINGH_FORWARD_LINK = 134300896;
export const DIBUTTON_FIGHTINGH_BACKWARD_LINK = 134300904;
export const DIBUTTON_FIGHTINGH_DEVICE = 134235390;
export const DIBUTTON_FIGHTINGH_PAUSE = 134235388;
export const DIVIRTUAL_FIGHTING_FPS = 150994944;
export const DIAXIS_FPS_ROTATE = 151028225;
export const DIAXIS_FPS_MOVE = 151060994;
export const DIBUTTON_FPS_FIRE = 150995969;
export const DIBUTTON_FPS_WEAPONS = 150995970;
export const DIBUTTON_FPS_APPLY = 150995971;
export const DIBUTTON_FPS_SELECT = 150995972;
export const DIBUTTON_FPS_CROUCH = 150995973;
export const DIBUTTON_FPS_JUMP = 150995974;
export const DIAXIS_FPS_LOOKUPDOWN = 151093763;
export const DIBUTTON_FPS_STRAFE = 150995975;
export const DIBUTTON_FPS_MENU = 150996221;
export const DIHATSWITCH_FPS_GLANCE = 151012865;
export const DIBUTTON_FPS_DISPLAY = 151012360;
export const DIAXIS_FPS_SIDESTEP = 151142916;
export const DIBUTTON_FPS_DODGE = 151012361;
export const DIBUTTON_FPS_GLANCEL = 151012362;
export const DIBUTTON_FPS_GLANCER = 151012363;
export const DIBUTTON_FPS_FIRESECONDARY = 151012364;
export const DIBUTTON_FPS_ROTATE_LEFT_LINK = 151045348;
export const DIBUTTON_FPS_ROTATE_RIGHT_LINK = 151045356;
export const DIBUTTON_FPS_FORWARD_LINK = 151078112;
export const DIBUTTON_FPS_BACKWARD_LINK = 151078120;
export const DIBUTTON_FPS_GLANCE_UP_LINK = 151110880;
export const DIBUTTON_FPS_GLANCE_DOWN_LINK = 151110888;
export const DIBUTTON_FPS_STEP_LEFT_LINK = 151143652;
export const DIBUTTON_FPS_STEP_RIGHT_LINK = 151143660;
export const DIBUTTON_FPS_DEVICE = 151012606;
export const DIBUTTON_FPS_PAUSE = 151012604;
export const DIVIRTUAL_FIGHTING_THIRDPERSON = 167772160;
export const DIAXIS_TPS_TURN = 167903745;
export const DIAXIS_TPS_MOVE = 167838210;
export const DIBUTTON_TPS_RUN = 167773185;
export const DIBUTTON_TPS_ACTION = 167773186;
export const DIBUTTON_TPS_SELECT = 167773187;
export const DIBUTTON_TPS_USE = 167773188;
export const DIBUTTON_TPS_JUMP = 167773189;
export const DIBUTTON_TPS_MENU = 167773437;
export const DIHATSWITCH_TPS_GLANCE = 167790081;
export const DIBUTTON_TPS_VIEW = 167789574;
export const DIBUTTON_TPS_STEPLEFT = 167789575;
export const DIBUTTON_TPS_STEPRIGHT = 167789576;
export const DIAXIS_TPS_STEP = 167821827;
export const DIBUTTON_TPS_DODGE = 167789577;
export const DIBUTTON_TPS_INVENTORY = 167789578;
export const DIBUTTON_TPS_TURN_LEFT_LINK = 167920868;
export const DIBUTTON_TPS_TURN_RIGHT_LINK = 167920876;
export const DIBUTTON_TPS_FORWARD_LINK = 167855328;
export const DIBUTTON_TPS_BACKWARD_LINK = 167855336;
export const DIBUTTON_TPS_GLANCE_UP_LINK = 168281312;
export const DIBUTTON_TPS_GLANCE_DOWN_LINK = 168281320;
export const DIBUTTON_TPS_GLANCE_LEFT_LINK = 168281316;
export const DIBUTTON_TPS_GLANCE_RIGHT_LINK = 168281324;
export const DIBUTTON_TPS_DEVICE = 167789822;
export const DIBUTTON_TPS_PAUSE = 167789820;
export const DIVIRTUAL_STRATEGY_ROLEPLAYING = 184549376;
export const DIAXIS_STRATEGYR_LATERAL = 184582657;
export const DIAXIS_STRATEGYR_MOVE = 184615426;
export const DIBUTTON_STRATEGYR_GET = 184550401;
export const DIBUTTON_STRATEGYR_APPLY = 184550402;
export const DIBUTTON_STRATEGYR_SELECT = 184550403;
export const DIBUTTON_STRATEGYR_ATTACK = 184550404;
export const DIBUTTON_STRATEGYR_CAST = 184550405;
export const DIBUTTON_STRATEGYR_CROUCH = 184550406;
export const DIBUTTON_STRATEGYR_JUMP = 184550407;
export const DIBUTTON_STRATEGYR_MENU = 184550653;
export const DIHATSWITCH_STRATEGYR_GLANCE = 184567297;
export const DIBUTTON_STRATEGYR_MAP = 184566792;
export const DIBUTTON_STRATEGYR_DISPLAY = 184566793;
export const DIAXIS_STRATEGYR_ROTATE = 184697347;
export const DIBUTTON_STRATEGYR_LEFT_LINK = 184599780;
export const DIBUTTON_STRATEGYR_RIGHT_LINK = 184599788;
export const DIBUTTON_STRATEGYR_FORWARD_LINK = 184632544;
export const DIBUTTON_STRATEGYR_BACK_LINK = 184632552;
export const DIBUTTON_STRATEGYR_ROTATE_LEFT_LINK = 184698084;
export const DIBUTTON_STRATEGYR_ROTATE_RIGHT_LINK = 184698092;
export const DIBUTTON_STRATEGYR_DEVICE = 184567038;
export const DIBUTTON_STRATEGYR_PAUSE = 184567036;
export const DIVIRTUAL_STRATEGY_TURN = 201326592;
export const DIAXIS_STRATEGYT_LATERAL = 201359873;
export const DIAXIS_STRATEGYT_MOVE = 201392642;
export const DIBUTTON_STRATEGYT_SELECT = 201327617;
export const DIBUTTON_STRATEGYT_INSTRUCT = 201327618;
export const DIBUTTON_STRATEGYT_APPLY = 201327619;
export const DIBUTTON_STRATEGYT_TEAM = 201327620;
export const DIBUTTON_STRATEGYT_TURN = 201327621;
export const DIBUTTON_STRATEGYT_MENU = 201327869;
export const DIBUTTON_STRATEGYT_ZOOM = 201344006;
export const DIBUTTON_STRATEGYT_MAP = 201344007;
export const DIBUTTON_STRATEGYT_DISPLAY = 201344008;
export const DIBUTTON_STRATEGYT_LEFT_LINK = 201376996;
export const DIBUTTON_STRATEGYT_RIGHT_LINK = 201377004;
export const DIBUTTON_STRATEGYT_FORWARD_LINK = 201409760;
export const DIBUTTON_STRATEGYT_BACK_LINK = 201409768;
export const DIBUTTON_STRATEGYT_DEVICE = 201344254;
export const DIBUTTON_STRATEGYT_PAUSE = 201344252;
export const DIVIRTUAL_SPORTS_HUNTING = 218103808;
export const DIAXIS_HUNTING_LATERAL = 218137089;
export const DIAXIS_HUNTING_MOVE = 218169858;
export const DIBUTTON_HUNTING_FIRE = 218104833;
export const DIBUTTON_HUNTING_AIM = 218104834;
export const DIBUTTON_HUNTING_WEAPON = 218104835;
export const DIBUTTON_HUNTING_BINOCULAR = 218104836;
export const DIBUTTON_HUNTING_CALL = 218104837;
export const DIBUTTON_HUNTING_MAP = 218104838;
export const DIBUTTON_HUNTING_SPECIAL = 218104839;
export const DIBUTTON_HUNTING_MENU = 218105085;
export const DIHATSWITCH_HUNTING_GLANCE = 218121729;
export const DIBUTTON_HUNTING_DISPLAY = 218121224;
export const DIAXIS_HUNTING_ROTATE = 218251779;
export const DIBUTTON_HUNTING_CROUCH = 218121225;
export const DIBUTTON_HUNTING_JUMP = 218121226;
export const DIBUTTON_HUNTING_FIRESECONDARY = 218121227;
export const DIBUTTON_HUNTING_LEFT_LINK = 218154212;
export const DIBUTTON_HUNTING_RIGHT_LINK = 218154220;
export const DIBUTTON_HUNTING_FORWARD_LINK = 218186976;
export const DIBUTTON_HUNTING_BACK_LINK = 218186984;
export const DIBUTTON_HUNTING_ROTATE_LEFT_LINK = 218252516;
export const DIBUTTON_HUNTING_ROTATE_RIGHT_LINK = 218252524;
export const DIBUTTON_HUNTING_DEVICE = 218121470;
export const DIBUTTON_HUNTING_PAUSE = 218121468;
export const DIVIRTUAL_SPORTS_FISHING = 234881024;
export const DIAXIS_FISHING_LATERAL = 234914305;
export const DIAXIS_FISHING_MOVE = 234947074;
export const DIBUTTON_FISHING_CAST = 234882049;
export const DIBUTTON_FISHING_TYPE = 234882050;
export const DIBUTTON_FISHING_BINOCULAR = 234882051;
export const DIBUTTON_FISHING_BAIT = 234882052;
export const DIBUTTON_FISHING_MAP = 234882053;
export const DIBUTTON_FISHING_MENU = 234882301;
export const DIHATSWITCH_FISHING_GLANCE = 234898945;
export const DIBUTTON_FISHING_DISPLAY = 234898438;
export const DIAXIS_FISHING_ROTATE = 235028995;
export const DIBUTTON_FISHING_CROUCH = 234898439;
export const DIBUTTON_FISHING_JUMP = 234898440;
export const DIBUTTON_FISHING_LEFT_LINK = 234931428;
export const DIBUTTON_FISHING_RIGHT_LINK = 234931436;
export const DIBUTTON_FISHING_FORWARD_LINK = 234964192;
export const DIBUTTON_FISHING_BACK_LINK = 234964200;
export const DIBUTTON_FISHING_ROTATE_LEFT_LINK = 235029732;
export const DIBUTTON_FISHING_ROTATE_RIGHT_LINK = 235029740;
export const DIBUTTON_FISHING_DEVICE = 234898686;
export const DIBUTTON_FISHING_PAUSE = 234898684;
export const DIVIRTUAL_SPORTS_BASEBALL_BAT = 251658240;
export const DIAXIS_BASEBALLB_LATERAL = 251691521;
export const DIAXIS_BASEBALLB_MOVE = 251724290;
export const DIBUTTON_BASEBALLB_SELECT = 251659265;
export const DIBUTTON_BASEBALLB_NORMAL = 251659266;
export const DIBUTTON_BASEBALLB_POWER = 251659267;
export const DIBUTTON_BASEBALLB_BUNT = 251659268;
export const DIBUTTON_BASEBALLB_STEAL = 251659269;
export const DIBUTTON_BASEBALLB_BURST = 251659270;
export const DIBUTTON_BASEBALLB_SLIDE = 251659271;
export const DIBUTTON_BASEBALLB_CONTACT = 251659272;
export const DIBUTTON_BASEBALLB_MENU = 251659517;
export const DIBUTTON_BASEBALLB_NOSTEAL = 251675657;
export const DIBUTTON_BASEBALLB_BOX = 251675658;
export const DIBUTTON_BASEBALLB_LEFT_LINK = 251708644;
export const DIBUTTON_BASEBALLB_RIGHT_LINK = 251708652;
export const DIBUTTON_BASEBALLB_FORWARD_LINK = 251741408;
export const DIBUTTON_BASEBALLB_BACK_LINK = 251741416;
export const DIBUTTON_BASEBALLB_DEVICE = 251675902;
export const DIBUTTON_BASEBALLB_PAUSE = 251675900;
export const DIVIRTUAL_SPORTS_BASEBALL_PITCH = 268435456;
export const DIAXIS_BASEBALLP_LATERAL = 268468737;
export const DIAXIS_BASEBALLP_MOVE = 268501506;
export const DIBUTTON_BASEBALLP_SELECT = 268436481;
export const DIBUTTON_BASEBALLP_PITCH = 268436482;
export const DIBUTTON_BASEBALLP_BASE = 268436483;
export const DIBUTTON_BASEBALLP_THROW = 268436484;
export const DIBUTTON_BASEBALLP_FAKE = 268436485;
export const DIBUTTON_BASEBALLP_MENU = 268436733;
export const DIBUTTON_BASEBALLP_WALK = 268452870;
export const DIBUTTON_BASEBALLP_LOOK = 268452871;
export const DIBUTTON_BASEBALLP_LEFT_LINK = 268485860;
export const DIBUTTON_BASEBALLP_RIGHT_LINK = 268485868;
export const DIBUTTON_BASEBALLP_FORWARD_LINK = 268518624;
export const DIBUTTON_BASEBALLP_BACK_LINK = 268518632;
export const DIBUTTON_BASEBALLP_DEVICE = 268453118;
export const DIBUTTON_BASEBALLP_PAUSE = 268453116;
export const DIVIRTUAL_SPORTS_BASEBALL_FIELD = 285212672;
export const DIAXIS_BASEBALLF_LATERAL = 285245953;
export const DIAXIS_BASEBALLF_MOVE = 285278722;
export const DIBUTTON_BASEBALLF_NEAREST = 285213697;
export const DIBUTTON_BASEBALLF_THROW1 = 285213698;
export const DIBUTTON_BASEBALLF_THROW2 = 285213699;
export const DIBUTTON_BASEBALLF_BURST = 285213700;
export const DIBUTTON_BASEBALLF_JUMP = 285213701;
export const DIBUTTON_BASEBALLF_DIVE = 285213702;
export const DIBUTTON_BASEBALLF_MENU = 285213949;
export const DIBUTTON_BASEBALLF_SHIFTIN = 285230087;
export const DIBUTTON_BASEBALLF_SHIFTOUT = 285230088;
export const DIBUTTON_BASEBALLF_AIM_LEFT_LINK = 285263076;
export const DIBUTTON_BASEBALLF_AIM_RIGHT_LINK = 285263084;
export const DIBUTTON_BASEBALLF_FORWARD_LINK = 285295840;
export const DIBUTTON_BASEBALLF_BACK_LINK = 285295848;
export const DIBUTTON_BASEBALLF_DEVICE = 285230334;
export const DIBUTTON_BASEBALLF_PAUSE = 285230332;
export const DIVIRTUAL_SPORTS_BASKETBALL_OFFENSE = 301989888;
export const DIAXIS_BBALLO_LATERAL = 302023169;
export const DIAXIS_BBALLO_MOVE = 302055938;
export const DIBUTTON_BBALLO_SHOOT = 301990913;
export const DIBUTTON_BBALLO_DUNK = 301990914;
export const DIBUTTON_BBALLO_PASS = 301990915;
export const DIBUTTON_BBALLO_FAKE = 301990916;
export const DIBUTTON_BBALLO_SPECIAL = 301990917;
export const DIBUTTON_BBALLO_PLAYER = 301990918;
export const DIBUTTON_BBALLO_BURST = 301990919;
export const DIBUTTON_BBALLO_CALL = 301990920;
export const DIBUTTON_BBALLO_MENU = 301991165;
export const DIHATSWITCH_BBALLO_GLANCE = 302007809;
export const DIBUTTON_BBALLO_SCREEN = 302007305;
export const DIBUTTON_BBALLO_PLAY = 302007306;
export const DIBUTTON_BBALLO_JAB = 302007307;
export const DIBUTTON_BBALLO_POST = 302007308;
export const DIBUTTON_BBALLO_TIMEOUT = 302007309;
export const DIBUTTON_BBALLO_SUBSTITUTE = 302007310;
export const DIBUTTON_BBALLO_LEFT_LINK = 302040292;
export const DIBUTTON_BBALLO_RIGHT_LINK = 302040300;
export const DIBUTTON_BBALLO_FORWARD_LINK = 302073056;
export const DIBUTTON_BBALLO_BACK_LINK = 302073064;
export const DIBUTTON_BBALLO_DEVICE = 302007550;
export const DIBUTTON_BBALLO_PAUSE = 302007548;
export const DIVIRTUAL_SPORTS_BASKETBALL_DEFENSE = 318767104;
export const DIAXIS_BBALLD_LATERAL = 318800385;
export const DIAXIS_BBALLD_MOVE = 318833154;
export const DIBUTTON_BBALLD_JUMP = 318768129;
export const DIBUTTON_BBALLD_STEAL = 318768130;
export const DIBUTTON_BBALLD_FAKE = 318768131;
export const DIBUTTON_BBALLD_SPECIAL = 318768132;
export const DIBUTTON_BBALLD_PLAYER = 318768133;
export const DIBUTTON_BBALLD_BURST = 318768134;
export const DIBUTTON_BBALLD_PLAY = 318768135;
export const DIBUTTON_BBALLD_MENU = 318768381;
export const DIHATSWITCH_BBALLD_GLANCE = 318785025;
export const DIBUTTON_BBALLD_TIMEOUT = 318784520;
export const DIBUTTON_BBALLD_SUBSTITUTE = 318784521;
export const DIBUTTON_BBALLD_LEFT_LINK = 318817508;
export const DIBUTTON_BBALLD_RIGHT_LINK = 318817516;
export const DIBUTTON_BBALLD_FORWARD_LINK = 318850272;
export const DIBUTTON_BBALLD_BACK_LINK = 318850280;
export const DIBUTTON_BBALLD_DEVICE = 318784766;
export const DIBUTTON_BBALLD_PAUSE = 318784764;
export const DIVIRTUAL_SPORTS_FOOTBALL_FIELD = 335544320;
export const DIBUTTON_FOOTBALLP_PLAY = 335545345;
export const DIBUTTON_FOOTBALLP_SELECT = 335545346;
export const DIBUTTON_FOOTBALLP_HELP = 335545347;
export const DIBUTTON_FOOTBALLP_MENU = 335545597;
export const DIBUTTON_FOOTBALLP_DEVICE = 335561982;
export const DIBUTTON_FOOTBALLP_PAUSE = 335561980;
export const DIVIRTUAL_SPORTS_FOOTBALL_QBCK = 352321536;
export const DIAXIS_FOOTBALLQ_LATERAL = 352354817;
export const DIAXIS_FOOTBALLQ_MOVE = 352387586;
export const DIBUTTON_FOOTBALLQ_SELECT = 352322561;
export const DIBUTTON_FOOTBALLQ_SNAP = 352322562;
export const DIBUTTON_FOOTBALLQ_JUMP = 352322563;
export const DIBUTTON_FOOTBALLQ_SLIDE = 352322564;
export const DIBUTTON_FOOTBALLQ_PASS = 352322565;
export const DIBUTTON_FOOTBALLQ_FAKE = 352322566;
export const DIBUTTON_FOOTBALLQ_MENU = 352322813;
export const DIBUTTON_FOOTBALLQ_FAKESNAP = 352338951;
export const DIBUTTON_FOOTBALLQ_MOTION = 352338952;
export const DIBUTTON_FOOTBALLQ_AUDIBLE = 352338953;
export const DIBUTTON_FOOTBALLQ_LEFT_LINK = 352371940;
export const DIBUTTON_FOOTBALLQ_RIGHT_LINK = 352371948;
export const DIBUTTON_FOOTBALLQ_FORWARD_LINK = 352404704;
export const DIBUTTON_FOOTBALLQ_BACK_LINK = 352404712;
export const DIBUTTON_FOOTBALLQ_DEVICE = 352339198;
export const DIBUTTON_FOOTBALLQ_PAUSE = 352339196;
export const DIVIRTUAL_SPORTS_FOOTBALL_OFFENSE = 369098752;
export const DIAXIS_FOOTBALLO_LATERAL = 369132033;
export const DIAXIS_FOOTBALLO_MOVE = 369164802;
export const DIBUTTON_FOOTBALLO_JUMP = 369099777;
export const DIBUTTON_FOOTBALLO_LEFTARM = 369099778;
export const DIBUTTON_FOOTBALLO_RIGHTARM = 369099779;
export const DIBUTTON_FOOTBALLO_THROW = 369099780;
export const DIBUTTON_FOOTBALLO_SPIN = 369099781;
export const DIBUTTON_FOOTBALLO_MENU = 369100029;
export const DIBUTTON_FOOTBALLO_JUKE = 369116166;
export const DIBUTTON_FOOTBALLO_SHOULDER = 369116167;
export const DIBUTTON_FOOTBALLO_TURBO = 369116168;
export const DIBUTTON_FOOTBALLO_DIVE = 369116169;
export const DIBUTTON_FOOTBALLO_ZOOM = 369116170;
export const DIBUTTON_FOOTBALLO_SUBSTITUTE = 369116171;
export const DIBUTTON_FOOTBALLO_LEFT_LINK = 369149156;
export const DIBUTTON_FOOTBALLO_RIGHT_LINK = 369149164;
export const DIBUTTON_FOOTBALLO_FORWARD_LINK = 369181920;
export const DIBUTTON_FOOTBALLO_BACK_LINK = 369181928;
export const DIBUTTON_FOOTBALLO_DEVICE = 369116414;
export const DIBUTTON_FOOTBALLO_PAUSE = 369116412;
export const DIVIRTUAL_SPORTS_FOOTBALL_DEFENSE = 385875968;
export const DIAXIS_FOOTBALLD_LATERAL = 385909249;
export const DIAXIS_FOOTBALLD_MOVE = 385942018;
export const DIBUTTON_FOOTBALLD_PLAY = 385876993;
export const DIBUTTON_FOOTBALLD_SELECT = 385876994;
export const DIBUTTON_FOOTBALLD_JUMP = 385876995;
export const DIBUTTON_FOOTBALLD_TACKLE = 385876996;
export const DIBUTTON_FOOTBALLD_FAKE = 385876997;
export const DIBUTTON_FOOTBALLD_SUPERTACKLE = 385876998;
export const DIBUTTON_FOOTBALLD_MENU = 385877245;
export const DIBUTTON_FOOTBALLD_SPIN = 385893383;
export const DIBUTTON_FOOTBALLD_SWIM = 385893384;
export const DIBUTTON_FOOTBALLD_BULLRUSH = 385893385;
export const DIBUTTON_FOOTBALLD_RIP = 385893386;
export const DIBUTTON_FOOTBALLD_AUDIBLE = 385893387;
export const DIBUTTON_FOOTBALLD_ZOOM = 385893388;
export const DIBUTTON_FOOTBALLD_SUBSTITUTE = 385893389;
export const DIBUTTON_FOOTBALLD_LEFT_LINK = 385926372;
export const DIBUTTON_FOOTBALLD_RIGHT_LINK = 385926380;
export const DIBUTTON_FOOTBALLD_FORWARD_LINK = 385959136;
export const DIBUTTON_FOOTBALLD_BACK_LINK = 385959144;
export const DIBUTTON_FOOTBALLD_DEVICE = 385893630;
export const DIBUTTON_FOOTBALLD_PAUSE = 385893628;
export const DIVIRTUAL_SPORTS_GOLF = 402653184;
export const DIAXIS_GOLF_LATERAL = 402686465;
export const DIAXIS_GOLF_MOVE = 402719234;
export const DIBUTTON_GOLF_SWING = 402654209;
export const DIBUTTON_GOLF_SELECT = 402654210;
export const DIBUTTON_GOLF_UP = 402654211;
export const DIBUTTON_GOLF_DOWN = 402654212;
export const DIBUTTON_GOLF_TERRAIN = 402654213;
export const DIBUTTON_GOLF_FLYBY = 402654214;
export const DIBUTTON_GOLF_MENU = 402654461;
export const DIHATSWITCH_GOLF_SCROLL = 402671105;
export const DIBUTTON_GOLF_ZOOM = 402670599;
export const DIBUTTON_GOLF_TIMEOUT = 402670600;
export const DIBUTTON_GOLF_SUBSTITUTE = 402670601;
export const DIBUTTON_GOLF_LEFT_LINK = 402703588;
export const DIBUTTON_GOLF_RIGHT_LINK = 402703596;
export const DIBUTTON_GOLF_FORWARD_LINK = 402736352;
export const DIBUTTON_GOLF_BACK_LINK = 402736360;
export const DIBUTTON_GOLF_DEVICE = 402670846;
export const DIBUTTON_GOLF_PAUSE = 402670844;
export const DIVIRTUAL_SPORTS_HOCKEY_OFFENSE = 419430400;
export const DIAXIS_HOCKEYO_LATERAL = 419463681;
export const DIAXIS_HOCKEYO_MOVE = 419496450;
export const DIBUTTON_HOCKEYO_SHOOT = 419431425;
export const DIBUTTON_HOCKEYO_PASS = 419431426;
export const DIBUTTON_HOCKEYO_BURST = 419431427;
export const DIBUTTON_HOCKEYO_SPECIAL = 419431428;
export const DIBUTTON_HOCKEYO_FAKE = 419431429;
export const DIBUTTON_HOCKEYO_MENU = 419431677;
export const DIHATSWITCH_HOCKEYO_SCROLL = 419448321;
export const DIBUTTON_HOCKEYO_ZOOM = 419447814;
export const DIBUTTON_HOCKEYO_STRATEGY = 419447815;
export const DIBUTTON_HOCKEYO_TIMEOUT = 419447816;
export const DIBUTTON_HOCKEYO_SUBSTITUTE = 419447817;
export const DIBUTTON_HOCKEYO_LEFT_LINK = 419480804;
export const DIBUTTON_HOCKEYO_RIGHT_LINK = 419480812;
export const DIBUTTON_HOCKEYO_FORWARD_LINK = 419513568;
export const DIBUTTON_HOCKEYO_BACK_LINK = 419513576;
export const DIBUTTON_HOCKEYO_DEVICE = 419448062;
export const DIBUTTON_HOCKEYO_PAUSE = 419448060;
export const DIVIRTUAL_SPORTS_HOCKEY_DEFENSE = 436207616;
export const DIAXIS_HOCKEYD_LATERAL = 436240897;
export const DIAXIS_HOCKEYD_MOVE = 436273666;
export const DIBUTTON_HOCKEYD_PLAYER = 436208641;
export const DIBUTTON_HOCKEYD_STEAL = 436208642;
export const DIBUTTON_HOCKEYD_BURST = 436208643;
export const DIBUTTON_HOCKEYD_BLOCK = 436208644;
export const DIBUTTON_HOCKEYD_FAKE = 436208645;
export const DIBUTTON_HOCKEYD_MENU = 436208893;
export const DIHATSWITCH_HOCKEYD_SCROLL = 436225537;
export const DIBUTTON_HOCKEYD_ZOOM = 436225030;
export const DIBUTTON_HOCKEYD_STRATEGY = 436225031;
export const DIBUTTON_HOCKEYD_TIMEOUT = 436225032;
export const DIBUTTON_HOCKEYD_SUBSTITUTE = 436225033;
export const DIBUTTON_HOCKEYD_LEFT_LINK = 436258020;
export const DIBUTTON_HOCKEYD_RIGHT_LINK = 436258028;
export const DIBUTTON_HOCKEYD_FORWARD_LINK = 436290784;
export const DIBUTTON_HOCKEYD_BACK_LINK = 436290792;
export const DIBUTTON_HOCKEYD_DEVICE = 436225278;
export const DIBUTTON_HOCKEYD_PAUSE = 436225276;
export const DIVIRTUAL_SPORTS_HOCKEY_GOALIE = 452984832;
export const DIAXIS_HOCKEYG_LATERAL = 453018113;
export const DIAXIS_HOCKEYG_MOVE = 453050882;
export const DIBUTTON_HOCKEYG_PASS = 452985857;
export const DIBUTTON_HOCKEYG_POKE = 452985858;
export const DIBUTTON_HOCKEYG_STEAL = 452985859;
export const DIBUTTON_HOCKEYG_BLOCK = 452985860;
export const DIBUTTON_HOCKEYG_MENU = 452986109;
export const DIHATSWITCH_HOCKEYG_SCROLL = 453002753;
export const DIBUTTON_HOCKEYG_ZOOM = 453002245;
export const DIBUTTON_HOCKEYG_STRATEGY = 453002246;
export const DIBUTTON_HOCKEYG_TIMEOUT = 453002247;
export const DIBUTTON_HOCKEYG_SUBSTITUTE = 453002248;
export const DIBUTTON_HOCKEYG_LEFT_LINK = 453035236;
export const DIBUTTON_HOCKEYG_RIGHT_LINK = 453035244;
export const DIBUTTON_HOCKEYG_FORWARD_LINK = 453068000;
export const DIBUTTON_HOCKEYG_BACK_LINK = 453068008;
export const DIBUTTON_HOCKEYG_DEVICE = 453002494;
export const DIBUTTON_HOCKEYG_PAUSE = 453002492;
export const DIVIRTUAL_SPORTS_BIKING_MOUNTAIN = 469762048;
export const DIAXIS_BIKINGM_TURN = 469795329;
export const DIAXIS_BIKINGM_PEDAL = 469828098;
export const DIBUTTON_BIKINGM_JUMP = 469763073;
export const DIBUTTON_BIKINGM_CAMERA = 469763074;
export const DIBUTTON_BIKINGM_SPECIAL1 = 469763075;
export const DIBUTTON_BIKINGM_SELECT = 469763076;
export const DIBUTTON_BIKINGM_SPECIAL2 = 469763077;
export const DIBUTTON_BIKINGM_MENU = 469763325;
export const DIHATSWITCH_BIKINGM_SCROLL = 469779969;
export const DIBUTTON_BIKINGM_ZOOM = 469779462;
export const DIAXIS_BIKINGM_BRAKE = 470041091;
export const DIBUTTON_BIKINGM_LEFT_LINK = 469812452;
export const DIBUTTON_BIKINGM_RIGHT_LINK = 469812460;
export const DIBUTTON_BIKINGM_FASTER_LINK = 469845216;
export const DIBUTTON_BIKINGM_SLOWER_LINK = 469845224;
export const DIBUTTON_BIKINGM_BRAKE_BUTTON_LINK = 470041832;
export const DIBUTTON_BIKINGM_DEVICE = 469779710;
export const DIBUTTON_BIKINGM_PAUSE = 469779708;
export const DIVIRTUAL_SPORTS_SKIING = 486539264;
export const DIAXIS_SKIING_TURN = 486572545;
export const DIAXIS_SKIING_SPEED = 486605314;
export const DIBUTTON_SKIING_JUMP = 486540289;
export const DIBUTTON_SKIING_CROUCH = 486540290;
export const DIBUTTON_SKIING_CAMERA = 486540291;
export const DIBUTTON_SKIING_SPECIAL1 = 486540292;
export const DIBUTTON_SKIING_SELECT = 486540293;
export const DIBUTTON_SKIING_SPECIAL2 = 486540294;
export const DIBUTTON_SKIING_MENU = 486540541;
export const DIHATSWITCH_SKIING_GLANCE = 486557185;
export const DIBUTTON_SKIING_ZOOM = 486556679;
export const DIBUTTON_SKIING_LEFT_LINK = 486589668;
export const DIBUTTON_SKIING_RIGHT_LINK = 486589676;
export const DIBUTTON_SKIING_FASTER_LINK = 486622432;
export const DIBUTTON_SKIING_SLOWER_LINK = 486622440;
export const DIBUTTON_SKIING_DEVICE = 486556926;
export const DIBUTTON_SKIING_PAUSE = 486556924;
export const DIVIRTUAL_SPORTS_SOCCER_OFFENSE = 503316480;
export const DIAXIS_SOCCERO_LATERAL = 503349761;
export const DIAXIS_SOCCERO_MOVE = 503382530;
export const DIAXIS_SOCCERO_BEND = 503415299;
export const DIBUTTON_SOCCERO_SHOOT = 503317505;
export const DIBUTTON_SOCCERO_PASS = 503317506;
export const DIBUTTON_SOCCERO_FAKE = 503317507;
export const DIBUTTON_SOCCERO_PLAYER = 503317508;
export const DIBUTTON_SOCCERO_SPECIAL1 = 503317509;
export const DIBUTTON_SOCCERO_SELECT = 503317510;
export const DIBUTTON_SOCCERO_MENU = 503317757;
export const DIHATSWITCH_SOCCERO_GLANCE = 503334401;
export const DIBUTTON_SOCCERO_SUBSTITUTE = 503333895;
export const DIBUTTON_SOCCERO_SHOOTLOW = 503333896;
export const DIBUTTON_SOCCERO_SHOOTHIGH = 503333897;
export const DIBUTTON_SOCCERO_PASSTHRU = 503333898;
export const DIBUTTON_SOCCERO_SPRINT = 503333899;
export const DIBUTTON_SOCCERO_CONTROL = 503333900;
export const DIBUTTON_SOCCERO_HEAD = 503333901;
export const DIBUTTON_SOCCERO_LEFT_LINK = 503366884;
export const DIBUTTON_SOCCERO_RIGHT_LINK = 503366892;
export const DIBUTTON_SOCCERO_FORWARD_LINK = 503399648;
export const DIBUTTON_SOCCERO_BACK_LINK = 503399656;
export const DIBUTTON_SOCCERO_DEVICE = 503334142;
export const DIBUTTON_SOCCERO_PAUSE = 503334140;
export const DIVIRTUAL_SPORTS_SOCCER_DEFENSE = 520093696;
export const DIAXIS_SOCCERD_LATERAL = 520126977;
export const DIAXIS_SOCCERD_MOVE = 520159746;
export const DIBUTTON_SOCCERD_BLOCK = 520094721;
export const DIBUTTON_SOCCERD_STEAL = 520094722;
export const DIBUTTON_SOCCERD_FAKE = 520094723;
export const DIBUTTON_SOCCERD_PLAYER = 520094724;
export const DIBUTTON_SOCCERD_SPECIAL = 520094725;
export const DIBUTTON_SOCCERD_SELECT = 520094726;
export const DIBUTTON_SOCCERD_SLIDE = 520094727;
export const DIBUTTON_SOCCERD_MENU = 520094973;
export const DIHATSWITCH_SOCCERD_GLANCE = 520111617;
export const DIBUTTON_SOCCERD_FOUL = 520111112;
export const DIBUTTON_SOCCERD_HEAD = 520111113;
export const DIBUTTON_SOCCERD_CLEAR = 520111114;
export const DIBUTTON_SOCCERD_GOALIECHARGE = 520111115;
export const DIBUTTON_SOCCERD_SUBSTITUTE = 520111116;
export const DIBUTTON_SOCCERD_LEFT_LINK = 520144100;
export const DIBUTTON_SOCCERD_RIGHT_LINK = 520144108;
export const DIBUTTON_SOCCERD_FORWARD_LINK = 520176864;
export const DIBUTTON_SOCCERD_BACK_LINK = 520176872;
export const DIBUTTON_SOCCERD_DEVICE = 520111358;
export const DIBUTTON_SOCCERD_PAUSE = 520111356;
export const DIVIRTUAL_SPORTS_RACQUET = 536870912;
export const DIAXIS_RACQUET_LATERAL = 536904193;
export const DIAXIS_RACQUET_MOVE = 536936962;
export const DIBUTTON_RACQUET_SWING = 536871937;
export const DIBUTTON_RACQUET_BACKSWING = 536871938;
export const DIBUTTON_RACQUET_SMASH = 536871939;
export const DIBUTTON_RACQUET_SPECIAL = 536871940;
export const DIBUTTON_RACQUET_SELECT = 536871941;
export const DIBUTTON_RACQUET_MENU = 536872189;
export const DIHATSWITCH_RACQUET_GLANCE = 536888833;
export const DIBUTTON_RACQUET_TIMEOUT = 536888326;
export const DIBUTTON_RACQUET_SUBSTITUTE = 536888327;
export const DIBUTTON_RACQUET_LEFT_LINK = 536921316;
export const DIBUTTON_RACQUET_RIGHT_LINK = 536921324;
export const DIBUTTON_RACQUET_FORWARD_LINK = 536954080;
export const DIBUTTON_RACQUET_BACK_LINK = 536954088;
export const DIBUTTON_RACQUET_DEVICE = 536888574;
export const DIBUTTON_RACQUET_PAUSE = 536888572;
export const DIVIRTUAL_ARCADE_SIDE2SIDE = 553648128;
export const DIAXIS_ARCADES_LATERAL = 553681409;
export const DIAXIS_ARCADES_MOVE = 553714178;
export const DIBUTTON_ARCADES_THROW = 553649153;
export const DIBUTTON_ARCADES_CARRY = 553649154;
export const DIBUTTON_ARCADES_ATTACK = 553649155;
export const DIBUTTON_ARCADES_SPECIAL = 553649156;
export const DIBUTTON_ARCADES_SELECT = 553649157;
export const DIBUTTON_ARCADES_MENU = 553649405;
export const DIHATSWITCH_ARCADES_VIEW = 553666049;
export const DIBUTTON_ARCADES_LEFT_LINK = 553698532;
export const DIBUTTON_ARCADES_RIGHT_LINK = 553698540;
export const DIBUTTON_ARCADES_FORWARD_LINK = 553731296;
export const DIBUTTON_ARCADES_BACK_LINK = 553731304;
export const DIBUTTON_ARCADES_VIEW_UP_LINK = 554157280;
export const DIBUTTON_ARCADES_VIEW_DOWN_LINK = 554157288;
export const DIBUTTON_ARCADES_VIEW_LEFT_LINK = 554157284;
export const DIBUTTON_ARCADES_VIEW_RIGHT_LINK = 554157292;
export const DIBUTTON_ARCADES_DEVICE = 553665790;
export const DIBUTTON_ARCADES_PAUSE = 553665788;
export const DIVIRTUAL_ARCADE_PLATFORM = 570425344;
export const DIAXIS_ARCADEP_LATERAL = 570458625;
export const DIAXIS_ARCADEP_MOVE = 570491394;
export const DIBUTTON_ARCADEP_JUMP = 570426369;
export const DIBUTTON_ARCADEP_FIRE = 570426370;
export const DIBUTTON_ARCADEP_CROUCH = 570426371;
export const DIBUTTON_ARCADEP_SPECIAL = 570426372;
export const DIBUTTON_ARCADEP_SELECT = 570426373;
export const DIBUTTON_ARCADEP_MENU = 570426621;
export const DIHATSWITCH_ARCADEP_VIEW = 570443265;
export const DIBUTTON_ARCADEP_FIRESECONDARY = 570442758;
export const DIBUTTON_ARCADEP_LEFT_LINK = 570475748;
export const DIBUTTON_ARCADEP_RIGHT_LINK = 570475756;
export const DIBUTTON_ARCADEP_FORWARD_LINK = 570508512;
export const DIBUTTON_ARCADEP_BACK_LINK = 570508520;
export const DIBUTTON_ARCADEP_VIEW_UP_LINK = 570934496;
export const DIBUTTON_ARCADEP_VIEW_DOWN_LINK = 570934504;
export const DIBUTTON_ARCADEP_VIEW_LEFT_LINK = 570934500;
export const DIBUTTON_ARCADEP_VIEW_RIGHT_LINK = 570934508;
export const DIBUTTON_ARCADEP_DEVICE = 570443006;
export const DIBUTTON_ARCADEP_PAUSE = 570443004;
export const DIVIRTUAL_CAD_2DCONTROL = 587202560;
export const DIAXIS_2DCONTROL_LATERAL = 587235841;
export const DIAXIS_2DCONTROL_MOVE = 587268610;
export const DIAXIS_2DCONTROL_INOUT = 587301379;
export const DIBUTTON_2DCONTROL_SELECT = 587203585;
export const DIBUTTON_2DCONTROL_SPECIAL1 = 587203586;
export const DIBUTTON_2DCONTROL_SPECIAL = 587203587;
export const DIBUTTON_2DCONTROL_SPECIAL2 = 587203588;
export const DIBUTTON_2DCONTROL_MENU = 587203837;
export const DIHATSWITCH_2DCONTROL_HATSWITCH = 587220481;
export const DIAXIS_2DCONTROL_ROTATEZ = 587350532;
export const DIBUTTON_2DCONTROL_DISPLAY = 587219973;
export const DIBUTTON_2DCONTROL_DEVICE = 587220222;
export const DIBUTTON_2DCONTROL_PAUSE = 587220220;
export const DIVIRTUAL_CAD_3DCONTROL = 603979776;
export const DIAXIS_3DCONTROL_LATERAL = 604013057;
export const DIAXIS_3DCONTROL_MOVE = 604045826;
export const DIAXIS_3DCONTROL_INOUT = 604078595;
export const DIBUTTON_3DCONTROL_SELECT = 603980801;
export const DIBUTTON_3DCONTROL_SPECIAL1 = 603980802;
export const DIBUTTON_3DCONTROL_SPECIAL = 603980803;
export const DIBUTTON_3DCONTROL_SPECIAL2 = 603980804;
export const DIBUTTON_3DCONTROL_MENU = 603981053;
export const DIHATSWITCH_3DCONTROL_HATSWITCH = 603997697;
export const DIAXIS_3DCONTROL_ROTATEX = 604193284;
export const DIAXIS_3DCONTROL_ROTATEY = 604160517;
export const DIAXIS_3DCONTROL_ROTATEZ = 604127750;
export const DIBUTTON_3DCONTROL_DISPLAY = 603997189;
export const DIBUTTON_3DCONTROL_DEVICE = 603997438;
export const DIBUTTON_3DCONTROL_PAUSE = 603997436;
export const DIVIRTUAL_CAD_FLYBY = 620756992;
export const DIAXIS_CADF_LATERAL = 620790273;
export const DIAXIS_CADF_MOVE = 620823042;
export const DIAXIS_CADF_INOUT = 620855811;
export const DIBUTTON_CADF_SELECT = 620758017;
export const DIBUTTON_CADF_SPECIAL1 = 620758018;
export const DIBUTTON_CADF_SPECIAL = 620758019;
export const DIBUTTON_CADF_SPECIAL2 = 620758020;
export const DIBUTTON_CADF_MENU = 620758269;
export const DIHATSWITCH_CADF_HATSWITCH = 620774913;
export const DIAXIS_CADF_ROTATEX = 620970500;
export const DIAXIS_CADF_ROTATEY = 620937733;
export const DIAXIS_CADF_ROTATEZ = 620904966;
export const DIBUTTON_CADF_DISPLAY = 620774405;
export const DIBUTTON_CADF_DEVICE = 620774654;
export const DIBUTTON_CADF_PAUSE = 620774652;
export const DIVIRTUAL_CAD_MODEL = 637534208;
export const DIAXIS_CADM_LATERAL = 637567489;
export const DIAXIS_CADM_MOVE = 637600258;
export const DIAXIS_CADM_INOUT = 637633027;
export const DIBUTTON_CADM_SELECT = 637535233;
export const DIBUTTON_CADM_SPECIAL1 = 637535234;
export const DIBUTTON_CADM_SPECIAL = 637535235;
export const DIBUTTON_CADM_SPECIAL2 = 637535236;
export const DIBUTTON_CADM_MENU = 637535485;
export const DIHATSWITCH_CADM_HATSWITCH = 637552129;
export const DIAXIS_CADM_ROTATEX = 637747716;
export const DIAXIS_CADM_ROTATEY = 637714949;
export const DIAXIS_CADM_ROTATEZ = 637682182;
export const DIBUTTON_CADM_DISPLAY = 637551621;
export const DIBUTTON_CADM_DEVICE = 637551870;
export const DIBUTTON_CADM_PAUSE = 637551868;
export const DIVIRTUAL_REMOTE_CONTROL = 654311424;
export const DIAXIS_REMOTE_SLIDER = 654639617;
export const DIBUTTON_REMOTE_MUTE = 654312449;
export const DIBUTTON_REMOTE_SELECT = 654312450;
export const DIBUTTON_REMOTE_PLAY = 654320643;
export const DIBUTTON_REMOTE_CUE = 654320644;
export const DIBUTTON_REMOTE_REVIEW = 654320645;
export const DIBUTTON_REMOTE_CHANGE = 654320646;
export const DIBUTTON_REMOTE_RECORD = 654320647;
export const DIBUTTON_REMOTE_MENU = 654312701;
export const DIAXIS_REMOTE_SLIDER2 = 654656002;
export const DIBUTTON_REMOTE_TV = 654334984;
export const DIBUTTON_REMOTE_CABLE = 654334985;
export const DIBUTTON_REMOTE_CD = 654334986;
export const DIBUTTON_REMOTE_VCR = 654334987;
export const DIBUTTON_REMOTE_TUNER = 654334988;
export const DIBUTTON_REMOTE_DVD = 654334989;
export const DIBUTTON_REMOTE_ADJUST = 654334990;
export const DIBUTTON_REMOTE_DIGIT0 = 654332943;
export const DIBUTTON_REMOTE_DIGIT1 = 654332944;
export const DIBUTTON_REMOTE_DIGIT2 = 654332945;
export const DIBUTTON_REMOTE_DIGIT3 = 654332946;
export const DIBUTTON_REMOTE_DIGIT4 = 654332947;
export const DIBUTTON_REMOTE_DIGIT5 = 654332948;
export const DIBUTTON_REMOTE_DIGIT6 = 654332949;
export const DIBUTTON_REMOTE_DIGIT7 = 654332950;
export const DIBUTTON_REMOTE_DIGIT8 = 654332951;
export const DIBUTTON_REMOTE_DIGIT9 = 654332952;
export const DIBUTTON_REMOTE_DEVICE = 654329086;
export const DIBUTTON_REMOTE_PAUSE = 654329084;
export const DIVIRTUAL_BROWSER_CONTROL = 671088640;
export const DIAXIS_BROWSER_LATERAL = 671121921;
export const DIAXIS_BROWSER_MOVE = 671154690;
export const DIBUTTON_BROWSER_SELECT = 671089665;
export const DIAXIS_BROWSER_VIEW = 671187459;
export const DIBUTTON_BROWSER_REFRESH = 671089666;
export const DIBUTTON_BROWSER_MENU = 671089917;
export const DIBUTTON_BROWSER_SEARCH = 671106051;
export const DIBUTTON_BROWSER_STOP = 671106052;
export const DIBUTTON_BROWSER_HOME = 671106053;
export const DIBUTTON_BROWSER_FAVORITES = 671106054;
export const DIBUTTON_BROWSER_NEXT = 671106055;
export const DIBUTTON_BROWSER_PREVIOUS = 671106056;
export const DIBUTTON_BROWSER_HISTORY = 671106057;
export const DIBUTTON_BROWSER_PRINT = 671106058;
export const DIBUTTON_BROWSER_DEVICE = 671106302;
export const DIBUTTON_BROWSER_PAUSE = 671106300;
export const DIVIRTUAL_DRIVING_MECHA = 687865856;
export const DIAXIS_MECHA_STEER = 687899137;
export const DIAXIS_MECHA_TORSO = 687931906;
export const DIAXIS_MECHA_ROTATE = 687997443;
export const DIAXIS_MECHA_THROTTLE = 688095748;
export const DIBUTTON_MECHA_FIRE = 687866881;
export const DIBUTTON_MECHA_WEAPONS = 687866882;
export const DIBUTTON_MECHA_TARGET = 687866883;
export const DIBUTTON_MECHA_REVERSE = 687866884;
export const DIBUTTON_MECHA_ZOOM = 687866885;
export const DIBUTTON_MECHA_JUMP = 687866886;
export const DIBUTTON_MECHA_MENU = 687867133;
export const DIBUTTON_MECHA_CENTER = 687883271;
export const DIHATSWITCH_MECHA_GLANCE = 687883777;
export const DIBUTTON_MECHA_VIEW = 687883272;
export const DIBUTTON_MECHA_FIRESECONDARY = 687883273;
export const DIBUTTON_MECHA_LEFT_LINK = 687916260;
export const DIBUTTON_MECHA_RIGHT_LINK = 687916268;
export const DIBUTTON_MECHA_FORWARD_LINK = 687949024;
export const DIBUTTON_MECHA_BACK_LINK = 687949032;
export const DIBUTTON_MECHA_ROTATE_LEFT_LINK = 688014564;
export const DIBUTTON_MECHA_ROTATE_RIGHT_LINK = 688014572;
export const DIBUTTON_MECHA_FASTER_LINK = 688112864;
export const DIBUTTON_MECHA_SLOWER_LINK = 688112872;
export const DIBUTTON_MECHA_DEVICE = 687883518;
export const DIBUTTON_MECHA_PAUSE = 687883516;
export const DIAXIS_ANY_X_1 = 4278239745;
export const DIAXIS_ANY_X_2 = 4278239746;
export const DIAXIS_ANY_Y_1 = 4278272513;
export const DIAXIS_ANY_Y_2 = 4278272514;
export const DIAXIS_ANY_Z_1 = 4278305281;
export const DIAXIS_ANY_Z_2 = 4278305282;
export const DIAXIS_ANY_R_1 = 4278338049;
export const DIAXIS_ANY_R_2 = 4278338050;
export const DIAXIS_ANY_U_1 = 4278370817;
export const DIAXIS_ANY_U_2 = 4278370818;
export const DIAXIS_ANY_V_1 = 4278403585;
export const DIAXIS_ANY_V_2 = 4278403586;
export const DIAXIS_ANY_A_1 = 4278436353;
export const DIAXIS_ANY_A_2 = 4278436354;
export const DIAXIS_ANY_B_1 = 4278469121;
export const DIAXIS_ANY_B_2 = 4278469122;
export const DIAXIS_ANY_C_1 = 4278501889;
export const DIAXIS_ANY_C_2 = 4278501890;
export const DIAXIS_ANY_S_1 = 4278534657;
export const DIAXIS_ANY_S_2 = 4278534658;
export const DIAXIS_ANY_1 = 4278206977;
export const DIAXIS_ANY_2 = 4278206978;
export const DIAXIS_ANY_3 = 4278206979;
export const DIAXIS_ANY_4 = 4278206980;
export const DIPOV_ANY_1 = 4278208001;
export const DIPOV_ANY_2 = 4278208002;
export const DIPOV_ANY_3 = 4278208003;
export const DIPOV_ANY_4 = 4278208004;
export const JOY_PASSDRIVERDATA = 268435456;
export const JOY_HWS_ISHEADTRACKER = 33554432;
export const JOY_HWS_ISGAMEPORTDRIVER = 67108864;
export const JOY_HWS_ISANALOGPORTDRIVER = 134217728;
export const JOY_HWS_AUTOLOAD = 268435456;
export const JOY_HWS_NODEVNODE = 536870912;
export const JOY_HWS_ISGAMEPORTBUS = `-2147483648`;
export const JOY_HWS_GAMEPORTBUSBUSY = 1;
export const JOY_US_VOLATILE = 8;
export const JOY_OEMPOLL_PASSDRIVERDATA = 7;
export const BUTTON_BIT_POWER = 1;
export const BUTTON_BIT_WINDOWS = 2;
export const BUTTON_BIT_VOLUMEUP = 4;
export const BUTTON_BIT_VOLUMEDOWN = 8;
export const BUTTON_BIT_ROTATION_LOCK = 16;
export const BUTTON_BIT_BACK = 32;
export const BUTTON_BIT_SEARCH = 64;
export const BUTTON_BIT_CAMERAFOCUS = 128;
export const BUTTON_BIT_CAMERASHUTTER = 256;
export const BUTTON_BIT_RINGERTOGGLE = 512;
export const BUTTON_BIT_HEADSET = 1024;
export const BUTTON_BIT_HWKBDEPLOY = 2048;
export const BUTTON_BIT_CAMERALENS = 4096;
export const BUTTON_BIT_OEMCUSTOM = 8192;
export const BUTTON_BIT_OEMCUSTOM2 = 16384;
export const BUTTON_BIT_OEMCUSTOM3 = 32768;
export const BUTTON_BIT_ALLBUTTONSMASK = 16383;
export const IOCTL_BUTTON_SET_ENABLED_ON_IDLE = 721576;
export const IOCTL_BUTTON_GET_ENABLED_ON_IDLE = 721580;
export const HidP_Input = 0;
export const HidP_Output = 1;
export const HidP_Feature = 2;
export const HidP_Keyboard_Break = 0;
export const HidP_Keyboard_Make = 1;
export const GPIO_BUTTON_POWER = 0;
export const GPIO_BUTTON_WINDOWS = 1;
export const GPIO_BUTTON_VOLUME_UP = 2;
export const GPIO_BUTTON_VOLUME_DOWN = 3;
export const GPIO_BUTTON_ROTATION_LOCK = 4;
export const GPIO_BUTTON_BACK = 5;
export const GPIO_BUTTON_SEARCH = 6;
export const GPIO_BUTTON_CAMERA_FOCUS = 7;
export const GPIO_BUTTON_CAMERA_SHUTTER = 8;
export const GPIO_BUTTON_RINGER_TOGGLE = 9;
export const GPIO_BUTTON_HEADSET = 10;
export const GPIO_BUTTON_HWKB_DEPLOY = 11;
export const GPIO_BUTTON_CAMERA_LENS = 12;
export const GPIO_BUTTON_OEM_CUSTOM = 13;
export const GPIO_BUTTON_OEM_CUSTOM2 = 14;
export const GPIO_BUTTON_OEM_CUSTOM3 = 15;
export const GPIO_BUTTON_COUNT_MIN = 5;
export const GPIO_BUTTON_COUNT = 16;

// Structs

/**
 * Windows.Win32.Devices.Properties.DEVPROPKEY (size: 16)
 */
export interface DEVPROPKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofDEVPROPKEY = 16;

export function allocDEVPROPKEY(data?: Partial<DEVPROPKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVPROPKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : util.toBigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class DEVPROPKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DICONSTANTFORCE (size: 8)
 */
export interface DICONSTANTFORCE {
  /** i32 */
  lMagnitude: number;
}

export const sizeofDICONSTANTFORCE = 8;

export function allocDICONSTANTFORCE(data?: Partial<DICONSTANTFORCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDICONSTANTFORCE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lMagnitude !== undefined) view.setInt32(0, Number(data.lMagnitude), true);
  // 0x04: pad4
  return buf;
}

export class DICONSTANTFORCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lMagnitude(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set lMagnitude(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIRAMPFORCE (size: 8)
 */
export interface DIRAMPFORCE {
  /** i32 */
  lStart: number;
  /** i32 */
  lEnd: number;
}

export const sizeofDIRAMPFORCE = 8;

export function allocDIRAMPFORCE(data?: Partial<DIRAMPFORCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIRAMPFORCE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lStart !== undefined) view.setInt32(0, Number(data.lStart), true);
  // 0x04: i32
  if (data?.lEnd !== undefined) view.setInt32(4, Number(data.lEnd), true);
  return buf;
}

export class DIRAMPFORCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lStart(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lEnd(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set lStart(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lEnd(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPERIODIC (size: 16)
 */
export interface DIPERIODIC {
  /** u32 */
  dwMagnitude: number;
  /** i32 */
  lOffset: number;
  /** u32 */
  dwPhase: number;
  /** u32 */
  dwPeriod: number;
}

export const sizeofDIPERIODIC = 16;

export function allocDIPERIODIC(data?: Partial<DIPERIODIC>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPERIODIC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagnitude !== undefined) view.setUint32(0, Number(data.dwMagnitude), true);
  // 0x04: i32
  if (data?.lOffset !== undefined) view.setInt32(4, Number(data.lOffset), true);
  // 0x08: u32
  if (data?.dwPhase !== undefined) view.setUint32(8, Number(data.dwPhase), true);
  // 0x0c: u32
  if (data?.dwPeriod !== undefined) view.setUint32(12, Number(data.dwPeriod), true);
  return buf;
}

export class DIPERIODICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagnitude(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get lOffset(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwPhase(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwPeriod(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwMagnitude(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set lOffset(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwPhase(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwPeriod(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DICONDITION (size: 24)
 */
export interface DICONDITION {
  /** i32 */
  lOffset: number;
  /** i32 */
  lPositiveCoefficient: number;
  /** i32 */
  lNegativeCoefficient: number;
  /** u32 */
  dwPositiveSaturation: number;
  /** u32 */
  dwNegativeSaturation: number;
  /** i32 */
  lDeadBand: number;
}

export const sizeofDICONDITION = 24;

export function allocDICONDITION(data?: Partial<DICONDITION>): Uint8Array {
  const buf = new Uint8Array(sizeofDICONDITION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lOffset !== undefined) view.setInt32(0, Number(data.lOffset), true);
  // 0x04: i32
  if (data?.lPositiveCoefficient !== undefined) view.setInt32(4, Number(data.lPositiveCoefficient), true);
  // 0x08: i32
  if (data?.lNegativeCoefficient !== undefined) view.setInt32(8, Number(data.lNegativeCoefficient), true);
  // 0x0c: u32
  if (data?.dwPositiveSaturation !== undefined) view.setUint32(12, Number(data.dwPositiveSaturation), true);
  // 0x10: u32
  if (data?.dwNegativeSaturation !== undefined) view.setUint32(16, Number(data.dwNegativeSaturation), true);
  // 0x14: i32
  if (data?.lDeadBand !== undefined) view.setInt32(20, Number(data.lDeadBand), true);
  return buf;
}

export class DICONDITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lOffset(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lPositiveCoefficient(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lNegativeCoefficient(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwPositiveSaturation(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNegativeSaturation(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get lDeadBand(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set lOffset(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lPositiveCoefficient(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lNegativeCoefficient(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwPositiveSaturation(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNegativeSaturation(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set lDeadBand(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DICUSTOMFORCE (size: 24)
 */
export interface DICUSTOMFORCE {
  /** u32 */
  cChannels: number;
  /** u32 */
  dwSamplePeriod: number;
  /** u32 */
  cSamples: number;
  /** ptr */
  rglForceData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDICUSTOMFORCE = 24;

export function allocDICUSTOMFORCE(data?: Partial<DICUSTOMFORCE>): Uint8Array {
  const buf = new Uint8Array(sizeofDICUSTOMFORCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cChannels !== undefined) view.setUint32(0, Number(data.cChannels), true);
  // 0x04: u32
  if (data?.dwSamplePeriod !== undefined) view.setUint32(4, Number(data.dwSamplePeriod), true);
  // 0x08: u32
  if (data?.cSamples !== undefined) view.setUint32(8, Number(data.cSamples), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rglForceData !== undefined) view.setBigUint64(16, data.rglForceData === null ? 0n : util.toBigInt(util.toPointer(data.rglForceData)), true);
  return buf;
}

export class DICUSTOMFORCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cChannels(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSamplePeriod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cSamples(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rglForceData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cChannels(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSamplePeriod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cSamples(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rglForceData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIENVELOPE (size: 24)
 */
export interface DIENVELOPE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwAttackLevel: number;
  /** u32 */
  dwAttackTime: number;
  /** u32 */
  dwFadeLevel: number;
  /** u32 */
  dwFadeTime: number;
}

export const sizeofDIENVELOPE = 24;

export function allocDIENVELOPE(data?: Partial<DIENVELOPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIENVELOPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAttackLevel !== undefined) view.setUint32(4, Number(data.dwAttackLevel), true);
  // 0x08: u32
  if (data?.dwAttackTime !== undefined) view.setUint32(8, Number(data.dwAttackTime), true);
  // 0x0c: u32
  if (data?.dwFadeLevel !== undefined) view.setUint32(12, Number(data.dwFadeLevel), true);
  // 0x10: u32
  if (data?.dwFadeTime !== undefined) view.setUint32(16, Number(data.dwFadeTime), true);
  // 0x14: pad4
  return buf;
}

export class DIENVELOPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAttackLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwAttackTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFadeLevel(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFadeTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAttackLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwAttackTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFadeLevel(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFadeTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIEFFECT_DX5 (size: 72)
 */
export interface DIEFFECT_DX5 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDuration: number;
  /** u32 */
  dwSamplePeriod: number;
  /** u32 */
  dwGain: number;
  /** u32 */
  dwTriggerButton: number;
  /** u32 */
  dwTriggerRepeatInterval: number;
  /** u32 */
  cAxes: number;
  /** ptr */
  rgdwAxes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rglDirection: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpEnvelope: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbTypeSpecificParams: number;
  /** ptr */
  lpvTypeSpecificParams: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDIEFFECT_DX5 = 72;

export function allocDIEFFECT_DX5(data?: Partial<DIEFFECT_DX5>): Uint8Array {
  const buf = new Uint8Array(sizeofDIEFFECT_DX5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwDuration !== undefined) view.setUint32(8, Number(data.dwDuration), true);
  // 0x0c: u32
  if (data?.dwSamplePeriod !== undefined) view.setUint32(12, Number(data.dwSamplePeriod), true);
  // 0x10: u32
  if (data?.dwGain !== undefined) view.setUint32(16, Number(data.dwGain), true);
  // 0x14: u32
  if (data?.dwTriggerButton !== undefined) view.setUint32(20, Number(data.dwTriggerButton), true);
  // 0x18: u32
  if (data?.dwTriggerRepeatInterval !== undefined) view.setUint32(24, Number(data.dwTriggerRepeatInterval), true);
  // 0x1c: u32
  if (data?.cAxes !== undefined) view.setUint32(28, Number(data.cAxes), true);
  // 0x20: pointer
  if (data?.rgdwAxes !== undefined) view.setBigUint64(32, data.rgdwAxes === null ? 0n : util.toBigInt(util.toPointer(data.rgdwAxes)), true);
  // 0x28: pointer
  if (data?.rglDirection !== undefined) view.setBigUint64(40, data.rglDirection === null ? 0n : util.toBigInt(util.toPointer(data.rglDirection)), true);
  // 0x30: pointer
  if (data?.lpEnvelope !== undefined) view.setBigUint64(48, data.lpEnvelope === null ? 0n : util.toBigInt(util.toPointer(data.lpEnvelope)), true);
  // 0x38: u32
  if (data?.cbTypeSpecificParams !== undefined) view.setUint32(56, Number(data.cbTypeSpecificParams), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpvTypeSpecificParams !== undefined) view.setBigUint64(64, data.lpvTypeSpecificParams === null ? 0n : util.toBigInt(util.toPointer(data.lpvTypeSpecificParams)), true);
  return buf;
}

export class DIEFFECT_DX5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDuration(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSamplePeriod(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwGain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwTriggerButton(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwTriggerRepeatInterval(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cAxes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgdwAxes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rglDirection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpEnvelope(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cbTypeSpecificParams(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get lpvTypeSpecificParams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDuration(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSamplePeriod(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwGain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwTriggerButton(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwTriggerRepeatInterval(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cAxes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgdwAxes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rglDirection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpEnvelope(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cbTypeSpecificParams(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set lpvTypeSpecificParams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIEFFECT (size: 80)
 */
export interface DIEFFECT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDuration: number;
  /** u32 */
  dwSamplePeriod: number;
  /** u32 */
  dwGain: number;
  /** u32 */
  dwTriggerButton: number;
  /** u32 */
  dwTriggerRepeatInterval: number;
  /** u32 */
  cAxes: number;
  /** ptr */
  rgdwAxes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rglDirection: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpEnvelope: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbTypeSpecificParams: number;
  /** ptr */
  lpvTypeSpecificParams: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwStartDelay: number;
}

export const sizeofDIEFFECT = 80;

export function allocDIEFFECT(data?: Partial<DIEFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIEFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwDuration !== undefined) view.setUint32(8, Number(data.dwDuration), true);
  // 0x0c: u32
  if (data?.dwSamplePeriod !== undefined) view.setUint32(12, Number(data.dwSamplePeriod), true);
  // 0x10: u32
  if (data?.dwGain !== undefined) view.setUint32(16, Number(data.dwGain), true);
  // 0x14: u32
  if (data?.dwTriggerButton !== undefined) view.setUint32(20, Number(data.dwTriggerButton), true);
  // 0x18: u32
  if (data?.dwTriggerRepeatInterval !== undefined) view.setUint32(24, Number(data.dwTriggerRepeatInterval), true);
  // 0x1c: u32
  if (data?.cAxes !== undefined) view.setUint32(28, Number(data.cAxes), true);
  // 0x20: pointer
  if (data?.rgdwAxes !== undefined) view.setBigUint64(32, data.rgdwAxes === null ? 0n : util.toBigInt(util.toPointer(data.rgdwAxes)), true);
  // 0x28: pointer
  if (data?.rglDirection !== undefined) view.setBigUint64(40, data.rglDirection === null ? 0n : util.toBigInt(util.toPointer(data.rglDirection)), true);
  // 0x30: pointer
  if (data?.lpEnvelope !== undefined) view.setBigUint64(48, data.lpEnvelope === null ? 0n : util.toBigInt(util.toPointer(data.lpEnvelope)), true);
  // 0x38: u32
  if (data?.cbTypeSpecificParams !== undefined) view.setUint32(56, Number(data.cbTypeSpecificParams), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpvTypeSpecificParams !== undefined) view.setBigUint64(64, data.lpvTypeSpecificParams === null ? 0n : util.toBigInt(util.toPointer(data.lpvTypeSpecificParams)), true);
  // 0x48: u32
  if (data?.dwStartDelay !== undefined) view.setUint32(72, Number(data.dwStartDelay), true);
  // 0x4c: pad4
  return buf;
}

export class DIEFFECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDuration(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSamplePeriod(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwGain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwTriggerButton(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwTriggerRepeatInterval(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cAxes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgdwAxes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rglDirection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpEnvelope(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cbTypeSpecificParams(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get lpvTypeSpecificParams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get dwStartDelay(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDuration(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSamplePeriod(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwGain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwTriggerButton(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwTriggerRepeatInterval(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cAxes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgdwAxes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rglDirection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpEnvelope(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cbTypeSpecificParams(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set lpvTypeSpecificParams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set dwStartDelay(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIFILEEFFECT (size: 32)
 */
export interface DIFILEEFFECT {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  GuidEffect: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpDiEffect: Deno.PointerValue | Uint8Array | null;
  /** array */
  szFriendlyName: Deno.PointerValue | null;
}

export const sizeofDIFILEEFFECT = 32;

export function allocDIFILEEFFECT(data?: Partial<DIFILEEFFECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIFILEEFFECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GuidEffect !== undefined) view.setBigUint64(8, data.GuidEffect === null ? 0n : util.toBigInt(util.toPointer(data.GuidEffect)), true);
  // 0x10: pointer
  if (data?.lpDiEffect !== undefined) view.setBigUint64(16, data.lpDiEffect === null ? 0n : util.toBigInt(util.toPointer(data.lpDiEffect)), true);
  // 0x18: pointer
  if (data?.szFriendlyName !== undefined) view.setBigUint64(24, data.szFriendlyName === null ? 0n : util.toBigInt(util.toPointer(data.szFriendlyName)), true);
  return buf;
}

export class DIFILEEFFECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get GuidEffect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lpDiEffect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szFriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set GuidEffect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lpDiEffect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szFriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIEFFESCAPE (size: 40)
 */
export interface DIEFFESCAPE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCommand: number;
  /** ptr */
  lpvInBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbInBuffer: number;
  /** ptr */
  lpvOutBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbOutBuffer: number;
}

export const sizeofDIEFFESCAPE = 40;

export function allocDIEFFESCAPE(data?: Partial<DIEFFESCAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIEFFESCAPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCommand !== undefined) view.setUint32(4, Number(data.dwCommand), true);
  // 0x08: pointer
  if (data?.lpvInBuffer !== undefined) view.setBigUint64(8, data.lpvInBuffer === null ? 0n : util.toBigInt(util.toPointer(data.lpvInBuffer)), true);
  // 0x10: u32
  if (data?.cbInBuffer !== undefined) view.setUint32(16, Number(data.cbInBuffer), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpvOutBuffer !== undefined) view.setBigUint64(24, data.lpvOutBuffer === null ? 0n : util.toBigInt(util.toPointer(data.lpvOutBuffer)), true);
  // 0x20: u32
  if (data?.cbOutBuffer !== undefined) view.setUint32(32, Number(data.cbOutBuffer), true);
  // 0x24: pad4
  return buf;
}

export class DIEFFESCAPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCommand(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get lpvInBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbInBuffer(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpvOutBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbOutBuffer(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCommand(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set lpvInBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbInBuffer(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpvOutBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbOutBuffer(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVCAPS_DX3 (size: 24)
 */
export interface DIDEVCAPS_DX3 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDevType: number;
  /** u32 */
  dwAxes: number;
  /** u32 */
  dwButtons: number;
  /** u32 */
  dwPOVs: number;
}

export const sizeofDIDEVCAPS_DX3 = 24;

export function allocDIDEVCAPS_DX3(data?: Partial<DIDEVCAPS_DX3>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVCAPS_DX3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwDevType !== undefined) view.setUint32(8, Number(data.dwDevType), true);
  // 0x0c: u32
  if (data?.dwAxes !== undefined) view.setUint32(12, Number(data.dwAxes), true);
  // 0x10: u32
  if (data?.dwButtons !== undefined) view.setUint32(16, Number(data.dwButtons), true);
  // 0x14: u32
  if (data?.dwPOVs !== undefined) view.setUint32(20, Number(data.dwPOVs), true);
  return buf;
}

export class DIDEVCAPS_DX3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDevType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwAxes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwButtons(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPOVs(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDevType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwAxes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwButtons(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPOVs(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVCAPS (size: 48)
 */
export interface DIDEVCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDevType: number;
  /** u32 */
  dwAxes: number;
  /** u32 */
  dwButtons: number;
  /** u32 */
  dwPOVs: number;
  /** u32 */
  dwFFSamplePeriod: number;
  /** u32 */
  dwFFMinTimeResolution: number;
  /** u32 */
  dwFirmwareRevision: number;
  /** u32 */
  dwHardwareRevision: number;
  /** u32 */
  dwFFDriverVersion: number;
}

export const sizeofDIDEVCAPS = 48;

export function allocDIDEVCAPS(data?: Partial<DIDEVCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwDevType !== undefined) view.setUint32(8, Number(data.dwDevType), true);
  // 0x0c: u32
  if (data?.dwAxes !== undefined) view.setUint32(12, Number(data.dwAxes), true);
  // 0x10: u32
  if (data?.dwButtons !== undefined) view.setUint32(16, Number(data.dwButtons), true);
  // 0x14: u32
  if (data?.dwPOVs !== undefined) view.setUint32(20, Number(data.dwPOVs), true);
  // 0x18: u32
  if (data?.dwFFSamplePeriod !== undefined) view.setUint32(24, Number(data.dwFFSamplePeriod), true);
  // 0x1c: u32
  if (data?.dwFFMinTimeResolution !== undefined) view.setUint32(28, Number(data.dwFFMinTimeResolution), true);
  // 0x20: u32
  if (data?.dwFirmwareRevision !== undefined) view.setUint32(32, Number(data.dwFirmwareRevision), true);
  // 0x24: u32
  if (data?.dwHardwareRevision !== undefined) view.setUint32(36, Number(data.dwHardwareRevision), true);
  // 0x28: u32
  if (data?.dwFFDriverVersion !== undefined) view.setUint32(40, Number(data.dwFFDriverVersion), true);
  // 0x2c: pad4
  return buf;
}

export class DIDEVCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDevType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwAxes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwButtons(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPOVs(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFFSamplePeriod(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwFFMinTimeResolution(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwFirmwareRevision(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwHardwareRevision(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwFFDriverVersion(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDevType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwAxes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwButtons(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPOVs(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFFSamplePeriod(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwFFMinTimeResolution(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwFirmwareRevision(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwHardwareRevision(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwFFDriverVersion(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIOBJECTDATAFORMAT (size: 24)
 */
export interface DIOBJECTDATAFORMAT {
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofDIOBJECTDATAFORMAT = 24;

export function allocDIOBJECTDATAFORMAT(data?: Partial<DIOBJECTDATAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIOBJECTDATAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pguid !== undefined) view.setBigUint64(0, data.pguid === null ? 0n : util.toBigInt(util.toPointer(data.pguid)), true);
  // 0x08: u32
  if (data?.dwOfs !== undefined) view.setUint32(8, Number(data.dwOfs), true);
  // 0x0c: u32
  if (data?.dwType !== undefined) view.setUint32(12, Number(data.dwType), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

export class DIOBJECTDATAFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwOfs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwOfs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDATAFORMAT (size: 32)
 */
export interface DIDATAFORMAT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwObjSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwNumObjs: number;
  /** ptr */
  rgodf: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDIDATAFORMAT = 32;

export function allocDIDATAFORMAT(data?: Partial<DIDATAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDATAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwObjSize !== undefined) view.setUint32(4, Number(data.dwObjSize), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwDataSize !== undefined) view.setUint32(12, Number(data.dwDataSize), true);
  // 0x10: u32
  if (data?.dwNumObjs !== undefined) view.setUint32(16, Number(data.dwNumObjs), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgodf !== undefined) view.setBigUint64(24, data.rgodf === null ? 0n : util.toBigInt(util.toPointer(data.rgodf)), true);
  return buf;
}

export class DIDATAFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwObjSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDataSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNumObjs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgodf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwObjSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDataSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNumObjs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgodf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIACTIONA (size: 40)
 */
export interface DIACTIONA {
  /** usize */
  uAppData: number | bigint;
  /** u32 */
  dwSemantic: number;
  /** u32 */
  dwFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwObjID: number;
  /** u32 */
  dwHow: number;
}

export const sizeofDIACTIONA = 40;

export function allocDIACTIONA(data?: Partial<DIACTIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIACTIONA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.uAppData !== undefined) view.setBigUint64(0, util.toBigInt(data.uAppData), true);
  // 0x08: u32
  if (data?.dwSemantic !== undefined) view.setUint32(8, Number(data.dwSemantic), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(24, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x20: u32
  if (data?.dwObjID !== undefined) view.setUint32(32, Number(data.dwObjID), true);
  // 0x24: u32
  if (data?.dwHow !== undefined) view.setUint32(36, Number(data.dwHow), true);
  return buf;
}

export class DIACTIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get uAppData(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get dwSemantic(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwObjID(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwHow(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: usize
  set uAppData(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set dwSemantic(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwObjID(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwHow(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIACTIONW (size: 40)
 */
export interface DIACTIONW {
  /** usize */
  uAppData: number | bigint;
  /** u32 */
  dwSemantic: number;
  /** u32 */
  dwFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwObjID: number;
  /** u32 */
  dwHow: number;
}

export const sizeofDIACTIONW = 40;

export function allocDIACTIONW(data?: Partial<DIACTIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIACTIONW);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.uAppData !== undefined) view.setBigUint64(0, util.toBigInt(data.uAppData), true);
  // 0x08: u32
  if (data?.dwSemantic !== undefined) view.setUint32(8, Number(data.dwSemantic), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(24, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x20: u32
  if (data?.dwObjID !== undefined) view.setUint32(32, Number(data.dwObjID), true);
  // 0x24: u32
  if (data?.dwHow !== undefined) view.setUint32(36, Number(data.dwHow), true);
  return buf;
}

export class DIACTIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get uAppData(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u32
  get dwSemantic(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwObjID(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwHow(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: usize
  set uAppData(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u32
  set dwSemantic(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwObjID(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwHow(value: number) {
    this.view.setUint32(36, value, true);
  }
}

export type HINSTANCE = number | bigint;

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIACTIONFORMATA (size: 80)
 */
export interface DIACTIONFORMATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwActionSize: number;
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwNumActions: number;
  /** ptr */
  rgoAction: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  guidActionMap: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwGenre: number;
  /** u32 */
  dwBufferSize: number;
  /** i32 */
  lAxisMin: number;
  /** i32 */
  lAxisMax: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftTimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCRC: number;
  /** array */
  tszActionMap: Deno.PointerValue | null;
}

export const sizeofDIACTIONFORMATA = 80;

export function allocDIACTIONFORMATA(data?: Partial<DIACTIONFORMATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIACTIONFORMATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwActionSize !== undefined) view.setUint32(4, Number(data.dwActionSize), true);
  // 0x08: u32
  if (data?.dwDataSize !== undefined) view.setUint32(8, Number(data.dwDataSize), true);
  // 0x0c: u32
  if (data?.dwNumActions !== undefined) view.setUint32(12, Number(data.dwNumActions), true);
  // 0x10: pointer
  if (data?.rgoAction !== undefined) view.setBigUint64(16, data.rgoAction === null ? 0n : util.toBigInt(util.toPointer(data.rgoAction)), true);
  // 0x18: pointer
  if (data?.guidActionMap !== undefined) view.setBigUint64(24, data.guidActionMap === null ? 0n : util.toBigInt(util.toPointer(data.guidActionMap)), true);
  // 0x20: u32
  if (data?.dwGenre !== undefined) view.setUint32(32, Number(data.dwGenre), true);
  // 0x24: u32
  if (data?.dwBufferSize !== undefined) view.setUint32(36, Number(data.dwBufferSize), true);
  // 0x28: i32
  if (data?.lAxisMin !== undefined) view.setInt32(40, Number(data.lAxisMin), true);
  // 0x2c: i32
  if (data?.lAxisMax !== undefined) view.setInt32(44, Number(data.lAxisMax), true);
  // 0x30: pointer
  if (data?.hInstString !== undefined) view.setBigUint64(48, data.hInstString === null ? 0n : util.toBigInt(util.toPointer(data.hInstString)), true);
  // 0x38: pointer
  if (data?.ftTimeStamp !== undefined) view.setBigUint64(56, data.ftTimeStamp === null ? 0n : util.toBigInt(util.toPointer(data.ftTimeStamp)), true);
  // 0x40: u32
  if (data?.dwCRC !== undefined) view.setUint32(64, Number(data.dwCRC), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.tszActionMap !== undefined) view.setBigUint64(72, data.tszActionMap === null ? 0n : util.toBigInt(util.toPointer(data.tszActionMap)), true);
  return buf;
}

export class DIACTIONFORMATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwActionSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumActions(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rgoAction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get guidActionMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwGenre(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwBufferSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get lAxisMin(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get lAxisMax(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get hInstString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ftTimeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwCRC(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get tszActionMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwActionSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumActions(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rgoAction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set guidActionMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwGenre(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwBufferSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set lAxisMin(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set lAxisMax(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set hInstString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ftTimeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set dwCRC(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set tszActionMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIACTIONFORMATW (size: 80)
 */
export interface DIACTIONFORMATW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwActionSize: number;
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwNumActions: number;
  /** ptr */
  rgoAction: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  guidActionMap: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwGenre: number;
  /** u32 */
  dwBufferSize: number;
  /** i32 */
  lAxisMin: number;
  /** i32 */
  lAxisMax: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftTimeStamp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCRC: number;
  /** array */
  tszActionMap: Deno.PointerValue | null;
}

export const sizeofDIACTIONFORMATW = 80;

export function allocDIACTIONFORMATW(data?: Partial<DIACTIONFORMATW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIACTIONFORMATW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwActionSize !== undefined) view.setUint32(4, Number(data.dwActionSize), true);
  // 0x08: u32
  if (data?.dwDataSize !== undefined) view.setUint32(8, Number(data.dwDataSize), true);
  // 0x0c: u32
  if (data?.dwNumActions !== undefined) view.setUint32(12, Number(data.dwNumActions), true);
  // 0x10: pointer
  if (data?.rgoAction !== undefined) view.setBigUint64(16, data.rgoAction === null ? 0n : util.toBigInt(util.toPointer(data.rgoAction)), true);
  // 0x18: pointer
  if (data?.guidActionMap !== undefined) view.setBigUint64(24, data.guidActionMap === null ? 0n : util.toBigInt(util.toPointer(data.guidActionMap)), true);
  // 0x20: u32
  if (data?.dwGenre !== undefined) view.setUint32(32, Number(data.dwGenre), true);
  // 0x24: u32
  if (data?.dwBufferSize !== undefined) view.setUint32(36, Number(data.dwBufferSize), true);
  // 0x28: i32
  if (data?.lAxisMin !== undefined) view.setInt32(40, Number(data.lAxisMin), true);
  // 0x2c: i32
  if (data?.lAxisMax !== undefined) view.setInt32(44, Number(data.lAxisMax), true);
  // 0x30: pointer
  if (data?.hInstString !== undefined) view.setBigUint64(48, data.hInstString === null ? 0n : util.toBigInt(util.toPointer(data.hInstString)), true);
  // 0x38: pointer
  if (data?.ftTimeStamp !== undefined) view.setBigUint64(56, data.ftTimeStamp === null ? 0n : util.toBigInt(util.toPointer(data.ftTimeStamp)), true);
  // 0x40: u32
  if (data?.dwCRC !== undefined) view.setUint32(64, Number(data.dwCRC), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.tszActionMap !== undefined) view.setBigUint64(72, data.tszActionMap === null ? 0n : util.toBigInt(util.toPointer(data.tszActionMap)), true);
  return buf;
}

export class DIACTIONFORMATWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwActionSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumActions(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rgoAction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get guidActionMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwGenre(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwBufferSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get lAxisMin(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get lAxisMax(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get hInstString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ftTimeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwCRC(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get tszActionMap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwActionSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumActions(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rgoAction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set guidActionMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwGenre(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwBufferSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set lAxisMin(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set lAxisMax(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set hInstString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ftTimeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set dwCRC(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set tszActionMap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DICOLORSET (size: 40)
 */
export interface DICOLORSET {
  /** u32 */
  dwSize: number;
  /** u32 */
  cTextFore: number;
  /** u32 */
  cTextHighlight: number;
  /** u32 */
  cCalloutLine: number;
  /** u32 */
  cCalloutHighlight: number;
  /** u32 */
  cBorder: number;
  /** u32 */
  cControlFill: number;
  /** u32 */
  cHighlightFill: number;
  /** u32 */
  cAreaFill: number;
}

export const sizeofDICOLORSET = 40;

export function allocDICOLORSET(data?: Partial<DICOLORSET>): Uint8Array {
  const buf = new Uint8Array(sizeofDICOLORSET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cTextFore !== undefined) view.setUint32(4, Number(data.cTextFore), true);
  // 0x08: u32
  if (data?.cTextHighlight !== undefined) view.setUint32(8, Number(data.cTextHighlight), true);
  // 0x0c: u32
  if (data?.cCalloutLine !== undefined) view.setUint32(12, Number(data.cCalloutLine), true);
  // 0x10: u32
  if (data?.cCalloutHighlight !== undefined) view.setUint32(16, Number(data.cCalloutHighlight), true);
  // 0x14: u32
  if (data?.cBorder !== undefined) view.setUint32(20, Number(data.cBorder), true);
  // 0x18: u32
  if (data?.cControlFill !== undefined) view.setUint32(24, Number(data.cControlFill), true);
  // 0x1c: u32
  if (data?.cHighlightFill !== undefined) view.setUint32(28, Number(data.cHighlightFill), true);
  // 0x20: u32
  if (data?.cAreaFill !== undefined) view.setUint32(32, Number(data.cAreaFill), true);
  // 0x24: pad4
  return buf;
}

export class DICOLORSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cTextFore(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cTextHighlight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cCalloutLine(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cCalloutHighlight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cBorder(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cControlFill(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cHighlightFill(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get cAreaFill(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cTextFore(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cTextHighlight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cCalloutLine(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cCalloutHighlight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cBorder(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cControlFill(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cHighlightFill(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set cAreaFill(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

export type HWND = number | bigint;

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DICONFIGUREDEVICESPARAMSA (size: 56)
 */
export interface DICONFIGUREDEVICESPARAMSA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwcUsers: number;
  /** Windows.Win32.Foundation.PSTR */
  lptszUserNames: string | null | Uint8Array;
  /** u32 */
  dwcFormats: number;
  /** ptr */
  lprgFormats: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.DICOLORSET */
  dics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  lpUnkDDSTarget: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDICONFIGUREDEVICESPARAMSA = 56;

export function allocDICONFIGUREDEVICESPARAMSA(data?: Partial<DICONFIGUREDEVICESPARAMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofDICONFIGUREDEVICESPARAMSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwcUsers !== undefined) view.setUint32(4, Number(data.dwcUsers), true);
  // 0x08: buffer
  if (data?.lptszUserNames !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lptszUserNames);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwcFormats !== undefined) view.setUint32(16, Number(data.dwcFormats), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lprgFormats !== undefined) view.setBigUint64(24, data.lprgFormats === null ? 0n : util.toBigInt(util.toPointer(data.lprgFormats)), true);
  // 0x20: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(32, data.hwnd === null ? 0n : util.toBigInt(util.toPointer(data.hwnd)), true);
  // 0x28: pointer
  if (data?.dics !== undefined) view.setBigUint64(40, data.dics === null ? 0n : util.toBigInt(util.toPointer(data.dics)), true);
  // 0x30: pointer
  if (data?.lpUnkDDSTarget !== undefined) view.setBigUint64(48, data.lpUnkDDSTarget === null ? 0n : util.toBigInt(util.toPointer(data.lpUnkDDSTarget)), true);
  return buf;
}

export class DICONFIGUREDEVICESPARAMSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwcUsers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get lptszUserNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwcFormats(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lprgFormats(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hwnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get dics(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpUnkDDSTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwcUsers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set lptszUserNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwcFormats(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lprgFormats(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set dics(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpUnkDDSTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DICONFIGUREDEVICESPARAMSW (size: 56)
 */
export interface DICONFIGUREDEVICESPARAMSW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwcUsers: number;
  /** Windows.Win32.Foundation.PWSTR */
  lptszUserNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwcFormats: number;
  /** ptr */
  lprgFormats: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.DICOLORSET */
  dics: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.IUnknown */
  lpUnkDDSTarget: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDICONFIGUREDEVICESPARAMSW = 56;

export function allocDICONFIGUREDEVICESPARAMSW(data?: Partial<DICONFIGUREDEVICESPARAMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofDICONFIGUREDEVICESPARAMSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwcUsers !== undefined) view.setUint32(4, Number(data.dwcUsers), true);
  // 0x08: buffer
  if (data?.lptszUserNames !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lptszUserNames);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwcFormats !== undefined) view.setUint32(16, Number(data.dwcFormats), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lprgFormats !== undefined) view.setBigUint64(24, data.lprgFormats === null ? 0n : util.toBigInt(util.toPointer(data.lprgFormats)), true);
  // 0x20: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(32, data.hwnd === null ? 0n : util.toBigInt(util.toPointer(data.hwnd)), true);
  // 0x28: pointer
  if (data?.dics !== undefined) view.setBigUint64(40, data.dics === null ? 0n : util.toBigInt(util.toPointer(data.dics)), true);
  // 0x30: pointer
  if (data?.lpUnkDDSTarget !== undefined) view.setBigUint64(48, data.lpUnkDDSTarget === null ? 0n : util.toBigInt(util.toPointer(data.lpUnkDDSTarget)), true);
  return buf;
}

export class DICONFIGUREDEVICESPARAMSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwcUsers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get lptszUserNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwcFormats(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lprgFormats(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hwnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get dics(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lpUnkDDSTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwcUsers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set lptszUserNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwcFormats(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lprgFormats(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set dics(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lpUnkDDSTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEIMAGEINFOA (size: 56)
 */
export interface DIDEVICEIMAGEINFOA {
  /** array */
  tszImagePath: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwViewID: number;
  /** Windows.Win32.Foundation.RECT */
  rcOverlay: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwObjID: number;
  /** u32 */
  dwcValidPts: number;
  /** array */
  rgptCalloutLine: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcCalloutRect: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTextAlign: number;
}

export const sizeofDIDEVICEIMAGEINFOA = 56;

export function allocDIDEVICEIMAGEINFOA(data?: Partial<DIDEVICEIMAGEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEIMAGEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tszImagePath !== undefined) view.setBigUint64(0, data.tszImagePath === null ? 0n : util.toBigInt(util.toPointer(data.tszImagePath)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwViewID !== undefined) view.setUint32(12, Number(data.dwViewID), true);
  // 0x10: pointer
  if (data?.rcOverlay !== undefined) view.setBigUint64(16, data.rcOverlay === null ? 0n : util.toBigInt(util.toPointer(data.rcOverlay)), true);
  // 0x18: u32
  if (data?.dwObjID !== undefined) view.setUint32(24, Number(data.dwObjID), true);
  // 0x1c: u32
  if (data?.dwcValidPts !== undefined) view.setUint32(28, Number(data.dwcValidPts), true);
  // 0x20: pointer
  if (data?.rgptCalloutLine !== undefined) view.setBigUint64(32, data.rgptCalloutLine === null ? 0n : util.toBigInt(util.toPointer(data.rgptCalloutLine)), true);
  // 0x28: pointer
  if (data?.rcCalloutRect !== undefined) view.setBigUint64(40, data.rcCalloutRect === null ? 0n : util.toBigInt(util.toPointer(data.rcCalloutRect)), true);
  // 0x30: u32
  if (data?.dwTextAlign !== undefined) view.setUint32(48, Number(data.dwTextAlign), true);
  // 0x34: pad4
  return buf;
}

export class DIDEVICEIMAGEINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tszImagePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwViewID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rcOverlay(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwObjID(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwcValidPts(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgptCalloutLine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rcCalloutRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwTextAlign(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set tszImagePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwViewID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rcOverlay(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwObjID(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwcValidPts(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgptCalloutLine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rcCalloutRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwTextAlign(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEIMAGEINFOW (size: 56)
 */
export interface DIDEVICEIMAGEINFOW {
  /** array */
  tszImagePath: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwViewID: number;
  /** Windows.Win32.Foundation.RECT */
  rcOverlay: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwObjID: number;
  /** u32 */
  dwcValidPts: number;
  /** array */
  rgptCalloutLine: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcCalloutRect: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTextAlign: number;
}

export const sizeofDIDEVICEIMAGEINFOW = 56;

export function allocDIDEVICEIMAGEINFOW(data?: Partial<DIDEVICEIMAGEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEIMAGEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tszImagePath !== undefined) view.setBigUint64(0, data.tszImagePath === null ? 0n : util.toBigInt(util.toPointer(data.tszImagePath)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwViewID !== undefined) view.setUint32(12, Number(data.dwViewID), true);
  // 0x10: pointer
  if (data?.rcOverlay !== undefined) view.setBigUint64(16, data.rcOverlay === null ? 0n : util.toBigInt(util.toPointer(data.rcOverlay)), true);
  // 0x18: u32
  if (data?.dwObjID !== undefined) view.setUint32(24, Number(data.dwObjID), true);
  // 0x1c: u32
  if (data?.dwcValidPts !== undefined) view.setUint32(28, Number(data.dwcValidPts), true);
  // 0x20: pointer
  if (data?.rgptCalloutLine !== undefined) view.setBigUint64(32, data.rgptCalloutLine === null ? 0n : util.toBigInt(util.toPointer(data.rgptCalloutLine)), true);
  // 0x28: pointer
  if (data?.rcCalloutRect !== undefined) view.setBigUint64(40, data.rcCalloutRect === null ? 0n : util.toBigInt(util.toPointer(data.rcCalloutRect)), true);
  // 0x30: u32
  if (data?.dwTextAlign !== undefined) view.setUint32(48, Number(data.dwTextAlign), true);
  // 0x34: pad4
  return buf;
}

export class DIDEVICEIMAGEINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tszImagePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwViewID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rcOverlay(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwObjID(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwcValidPts(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get rgptCalloutLine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rcCalloutRect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwTextAlign(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set tszImagePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwViewID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rcOverlay(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwObjID(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwcValidPts(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set rgptCalloutLine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rcCalloutRect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwTextAlign(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEIMAGEINFOHEADERA (size: 40)
 */
export interface DIDEVICEIMAGEINFOHEADERA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSizeImageInfo: number;
  /** u32 */
  dwcViews: number;
  /** u32 */
  dwcButtons: number;
  /** u32 */
  dwcAxes: number;
  /** u32 */
  dwcPOVs: number;
  /** u32 */
  dwBufferSize: number;
  /** u32 */
  dwBufferUsed: number;
  /** ptr */
  lprgImageInfoArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDIDEVICEIMAGEINFOHEADERA = 40;

export function allocDIDEVICEIMAGEINFOHEADERA(data?: Partial<DIDEVICEIMAGEINFOHEADERA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEIMAGEINFOHEADERA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSizeImageInfo !== undefined) view.setUint32(4, Number(data.dwSizeImageInfo), true);
  // 0x08: u32
  if (data?.dwcViews !== undefined) view.setUint32(8, Number(data.dwcViews), true);
  // 0x0c: u32
  if (data?.dwcButtons !== undefined) view.setUint32(12, Number(data.dwcButtons), true);
  // 0x10: u32
  if (data?.dwcAxes !== undefined) view.setUint32(16, Number(data.dwcAxes), true);
  // 0x14: u32
  if (data?.dwcPOVs !== undefined) view.setUint32(20, Number(data.dwcPOVs), true);
  // 0x18: u32
  if (data?.dwBufferSize !== undefined) view.setUint32(24, Number(data.dwBufferSize), true);
  // 0x1c: u32
  if (data?.dwBufferUsed !== undefined) view.setUint32(28, Number(data.dwBufferUsed), true);
  // 0x20: pointer
  if (data?.lprgImageInfoArray !== undefined) view.setBigUint64(32, data.lprgImageInfoArray === null ? 0n : util.toBigInt(util.toPointer(data.lprgImageInfoArray)), true);
  return buf;
}

export class DIDEVICEIMAGEINFOHEADERAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSizeImageInfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwcViews(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwcButtons(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwcAxes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwcPOVs(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwBufferSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwBufferUsed(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get lprgImageInfoArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSizeImageInfo(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwcViews(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwcButtons(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwcAxes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwcPOVs(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwBufferSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwBufferUsed(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set lprgImageInfoArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEIMAGEINFOHEADERW (size: 40)
 */
export interface DIDEVICEIMAGEINFOHEADERW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSizeImageInfo: number;
  /** u32 */
  dwcViews: number;
  /** u32 */
  dwcButtons: number;
  /** u32 */
  dwcAxes: number;
  /** u32 */
  dwcPOVs: number;
  /** u32 */
  dwBufferSize: number;
  /** u32 */
  dwBufferUsed: number;
  /** ptr */
  lprgImageInfoArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDIDEVICEIMAGEINFOHEADERW = 40;

export function allocDIDEVICEIMAGEINFOHEADERW(data?: Partial<DIDEVICEIMAGEINFOHEADERW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEIMAGEINFOHEADERW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSizeImageInfo !== undefined) view.setUint32(4, Number(data.dwSizeImageInfo), true);
  // 0x08: u32
  if (data?.dwcViews !== undefined) view.setUint32(8, Number(data.dwcViews), true);
  // 0x0c: u32
  if (data?.dwcButtons !== undefined) view.setUint32(12, Number(data.dwcButtons), true);
  // 0x10: u32
  if (data?.dwcAxes !== undefined) view.setUint32(16, Number(data.dwcAxes), true);
  // 0x14: u32
  if (data?.dwcPOVs !== undefined) view.setUint32(20, Number(data.dwcPOVs), true);
  // 0x18: u32
  if (data?.dwBufferSize !== undefined) view.setUint32(24, Number(data.dwBufferSize), true);
  // 0x1c: u32
  if (data?.dwBufferUsed !== undefined) view.setUint32(28, Number(data.dwBufferUsed), true);
  // 0x20: pointer
  if (data?.lprgImageInfoArray !== undefined) view.setBigUint64(32, data.lprgImageInfoArray === null ? 0n : util.toBigInt(util.toPointer(data.lprgImageInfoArray)), true);
  return buf;
}

export class DIDEVICEIMAGEINFOHEADERWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSizeImageInfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwcViews(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwcButtons(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwcAxes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwcPOVs(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwBufferSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwBufferUsed(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get lprgImageInfoArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSizeImageInfo(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwcViews(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwcButtons(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwcAxes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwcPOVs(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwBufferSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwBufferUsed(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set lprgImageInfoArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEOBJECTINSTANCE_DX3A (size: 40)
 */
export interface DIDEVICEOBJECTINSTANCE_DX3A {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwFlags: number;
  /** array */
  tszName: Deno.PointerValue | null;
}

export const sizeofDIDEVICEOBJECTINSTANCE_DX3A = 40;

export function allocDIDEVICEOBJECTINSTANCE_DX3A(data?: Partial<DIDEVICEOBJECTINSTANCE_DX3A>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEOBJECTINSTANCE_DX3A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidType !== undefined) view.setBigUint64(8, data.guidType === null ? 0n : util.toBigInt(util.toPointer(data.guidType)), true);
  // 0x10: u32
  if (data?.dwOfs !== undefined) view.setUint32(16, Number(data.dwOfs), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszName !== undefined) view.setBigUint64(32, data.tszName === null ? 0n : util.toBigInt(util.toPointer(data.tszName)), true);
  return buf;
}

export class DIDEVICEOBJECTINSTANCE_DX3AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwOfs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwOfs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEOBJECTINSTANCE_DX3W (size: 40)
 */
export interface DIDEVICEOBJECTINSTANCE_DX3W {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwFlags: number;
  /** array */
  tszName: Deno.PointerValue | null;
}

export const sizeofDIDEVICEOBJECTINSTANCE_DX3W = 40;

export function allocDIDEVICEOBJECTINSTANCE_DX3W(data?: Partial<DIDEVICEOBJECTINSTANCE_DX3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEOBJECTINSTANCE_DX3W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidType !== undefined) view.setBigUint64(8, data.guidType === null ? 0n : util.toBigInt(util.toPointer(data.guidType)), true);
  // 0x10: u32
  if (data?.dwOfs !== undefined) view.setUint32(16, Number(data.dwOfs), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszName !== undefined) view.setBigUint64(32, data.tszName === null ? 0n : util.toBigInt(util.toPointer(data.tszName)), true);
  return buf;
}

export class DIDEVICEOBJECTINSTANCE_DX3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwOfs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwOfs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEOBJECTINSTANCEA (size: 64)
 */
export interface DIDEVICEOBJECTINSTANCEA {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwFlags: number;
  /** array */
  tszName: Deno.PointerValue | null;
  /** u32 */
  dwFFMaxForce: number;
  /** u32 */
  dwFFForceResolution: number;
  /** u16 */
  wCollectionNumber: number;
  /** u16 */
  wDesignatorIndex: number;
  /** u16 */
  wUsagePage: number;
  /** u16 */
  wUsage: number;
  /** u32 */
  dwDimension: number;
  /** u16 */
  wExponent: number;
  /** u16 */
  wReportId: number;
}

export const sizeofDIDEVICEOBJECTINSTANCEA = 64;

export function allocDIDEVICEOBJECTINSTANCEA(data?: Partial<DIDEVICEOBJECTINSTANCEA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEOBJECTINSTANCEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidType !== undefined) view.setBigUint64(8, data.guidType === null ? 0n : util.toBigInt(util.toPointer(data.guidType)), true);
  // 0x10: u32
  if (data?.dwOfs !== undefined) view.setUint32(16, Number(data.dwOfs), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszName !== undefined) view.setBigUint64(32, data.tszName === null ? 0n : util.toBigInt(util.toPointer(data.tszName)), true);
  // 0x28: u32
  if (data?.dwFFMaxForce !== undefined) view.setUint32(40, Number(data.dwFFMaxForce), true);
  // 0x2c: u32
  if (data?.dwFFForceResolution !== undefined) view.setUint32(44, Number(data.dwFFForceResolution), true);
  // 0x30: u16
  if (data?.wCollectionNumber !== undefined) view.setUint16(48, Number(data.wCollectionNumber), true);
  // 0x32: u16
  if (data?.wDesignatorIndex !== undefined) view.setUint16(50, Number(data.wDesignatorIndex), true);
  // 0x34: u16
  if (data?.wUsagePage !== undefined) view.setUint16(52, Number(data.wUsagePage), true);
  // 0x36: u16
  if (data?.wUsage !== undefined) view.setUint16(54, Number(data.wUsage), true);
  // 0x38: u32
  if (data?.dwDimension !== undefined) view.setUint32(56, Number(data.dwDimension), true);
  // 0x3c: u16
  if (data?.wExponent !== undefined) view.setUint16(60, Number(data.wExponent), true);
  // 0x3e: u16
  if (data?.wReportId !== undefined) view.setUint16(62, Number(data.wReportId), true);
  return buf;
}

export class DIDEVICEOBJECTINSTANCEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwOfs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwFFMaxForce(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwFFForceResolution(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u16
  get wCollectionNumber(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wDesignatorIndex(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get wUsagePage(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: u16
  get wUsage(): number {
    return this.view.getUint16(54, true);
  }

  // 0x38: u32
  get dwDimension(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u16
  get wExponent(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get wReportId(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwOfs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwFFMaxForce(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwFFForceResolution(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u16
  set wCollectionNumber(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wDesignatorIndex(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set wUsagePage(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: u16
  set wUsage(value: number) {
    this.view.setUint16(54, value, true);
  }

  // 0x38: u32
  set dwDimension(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u16
  set wExponent(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set wReportId(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEOBJECTINSTANCEW (size: 64)
 */
export interface DIDEVICEOBJECTINSTANCEW {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwFlags: number;
  /** array */
  tszName: Deno.PointerValue | null;
  /** u32 */
  dwFFMaxForce: number;
  /** u32 */
  dwFFForceResolution: number;
  /** u16 */
  wCollectionNumber: number;
  /** u16 */
  wDesignatorIndex: number;
  /** u16 */
  wUsagePage: number;
  /** u16 */
  wUsage: number;
  /** u32 */
  dwDimension: number;
  /** u16 */
  wExponent: number;
  /** u16 */
  wReportId: number;
}

export const sizeofDIDEVICEOBJECTINSTANCEW = 64;

export function allocDIDEVICEOBJECTINSTANCEW(data?: Partial<DIDEVICEOBJECTINSTANCEW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEOBJECTINSTANCEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidType !== undefined) view.setBigUint64(8, data.guidType === null ? 0n : util.toBigInt(util.toPointer(data.guidType)), true);
  // 0x10: u32
  if (data?.dwOfs !== undefined) view.setUint32(16, Number(data.dwOfs), true);
  // 0x14: u32
  if (data?.dwType !== undefined) view.setUint32(20, Number(data.dwType), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszName !== undefined) view.setBigUint64(32, data.tszName === null ? 0n : util.toBigInt(util.toPointer(data.tszName)), true);
  // 0x28: u32
  if (data?.dwFFMaxForce !== undefined) view.setUint32(40, Number(data.dwFFMaxForce), true);
  // 0x2c: u32
  if (data?.dwFFForceResolution !== undefined) view.setUint32(44, Number(data.dwFFForceResolution), true);
  // 0x30: u16
  if (data?.wCollectionNumber !== undefined) view.setUint16(48, Number(data.wCollectionNumber), true);
  // 0x32: u16
  if (data?.wDesignatorIndex !== undefined) view.setUint16(50, Number(data.wDesignatorIndex), true);
  // 0x34: u16
  if (data?.wUsagePage !== undefined) view.setUint16(52, Number(data.wUsagePage), true);
  // 0x36: u16
  if (data?.wUsage !== undefined) view.setUint16(54, Number(data.wUsage), true);
  // 0x38: u32
  if (data?.dwDimension !== undefined) view.setUint32(56, Number(data.dwDimension), true);
  // 0x3c: u16
  if (data?.wExponent !== undefined) view.setUint16(60, Number(data.wExponent), true);
  // 0x3e: u16
  if (data?.wReportId !== undefined) view.setUint16(62, Number(data.wReportId), true);
  return buf;
}

export class DIDEVICEOBJECTINSTANCEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwOfs(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwFFMaxForce(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwFFForceResolution(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u16
  get wCollectionNumber(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wDesignatorIndex(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get wUsagePage(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: u16
  get wUsage(): number {
    return this.view.getUint16(54, true);
  }

  // 0x38: u32
  get dwDimension(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u16
  get wExponent(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: u16
  get wReportId(): number {
    return this.view.getUint16(62, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwOfs(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwFFMaxForce(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwFFForceResolution(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u16
  set wCollectionNumber(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wDesignatorIndex(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set wUsagePage(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: u16
  set wUsage(value: number) {
    this.view.setUint16(54, value, true);
  }

  // 0x38: u32
  set dwDimension(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u16
  set wExponent(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: u16
  set wReportId(value: number) {
    this.view.setUint16(62, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER (size: 16)
 */
export interface DIPROPHEADER {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwHeaderSize: number;
  /** u32 */
  dwObj: number;
  /** u32 */
  dwHow: number;
}

export const sizeofDIPROPHEADER = 16;

export function allocDIPROPHEADER(data?: Partial<DIPROPHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwHeaderSize !== undefined) view.setUint32(4, Number(data.dwHeaderSize), true);
  // 0x08: u32
  if (data?.dwObj !== undefined) view.setUint32(8, Number(data.dwObj), true);
  // 0x0c: u32
  if (data?.dwHow !== undefined) view.setUint32(12, Number(data.dwHow), true);
  return buf;
}

export class DIPROPHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHeaderSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwObj(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHow(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHeaderSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwObj(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHow(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPDWORD (size: 16)
 */
export interface DIPROPDWORD {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwData: number;
}

export const sizeofDIPROPDWORD = 16;

export function allocDIPROPDWORD(data?: Partial<DIPROPDWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPDWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: u32
  if (data?.dwData !== undefined) view.setUint32(8, Number(data.dwData), true);
  // 0x0c: pad4
  return buf;
}

export class DIPROPDWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPPOINTER (size: 16)
 */
export interface DIPROPPOINTER {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** usize */
  uData: number | bigint;
}

export const sizeofDIPROPPOINTER = 16;

export function allocDIPROPPOINTER(data?: Partial<DIPROPPOINTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPPOINTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: usize
  if (data?.uData !== undefined) view.setBigUint64(8, util.toBigInt(data.uData), true);
  return buf;
}

export class DIPROPPOINTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get uData(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set uData(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPRANGE (size: 16)
 */
export interface DIPROPRANGE {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lMin: number;
  /** i32 */
  lMax: number;
}

export const sizeofDIPROPRANGE = 16;

export function allocDIPROPRANGE(data?: Partial<DIPROPRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: i32
  if (data?.lMin !== undefined) view.setInt32(8, Number(data.lMin), true);
  // 0x0c: i32
  if (data?.lMax !== undefined) view.setInt32(12, Number(data.lMax), true);
  return buf;
}

export class DIPROPRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get lMin(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lMax(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set lMin(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lMax(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPCAL (size: 24)
 */
export interface DIPROPCAL {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  lMin: number;
  /** i32 */
  lCenter: number;
  /** i32 */
  lMax: number;
}

export const sizeofDIPROPCAL = 24;

export function allocDIPROPCAL(data?: Partial<DIPROPCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPCAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: i32
  if (data?.lMin !== undefined) view.setInt32(8, Number(data.lMin), true);
  // 0x0c: i32
  if (data?.lCenter !== undefined) view.setInt32(12, Number(data.lCenter), true);
  // 0x10: i32
  if (data?.lMax !== undefined) view.setInt32(16, Number(data.lMax), true);
  // 0x14: pad4
  return buf;
}

export class DIPROPCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get lMin(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lCenter(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set lMin(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lCenter(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPCALPOV (size: 24)
 */
export interface DIPROPCALPOV {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** array */
  lMin: Deno.PointerValue | null;
  /** array */
  lMax: Deno.PointerValue | null;
}

export const sizeofDIPROPCALPOV = 24;

export function allocDIPROPCALPOV(data?: Partial<DIPROPCALPOV>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPCALPOV);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: pointer
  if (data?.lMin !== undefined) view.setBigUint64(8, data.lMin === null ? 0n : util.toBigInt(util.toPointer(data.lMin)), true);
  // 0x10: pointer
  if (data?.lMax !== undefined) view.setBigUint64(16, data.lMax === null ? 0n : util.toBigInt(util.toPointer(data.lMax)), true);
  return buf;
}

export class DIPROPCALPOVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lMin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lMax(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lMin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lMax(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPGUIDANDPATH (size: 24)
 */
export interface DIPROPGUIDANDPATH {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidClass: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszPath: Deno.PointerValue | null;
}

export const sizeofDIPROPGUIDANDPATH = 24;

export function allocDIPROPGUIDANDPATH(data?: Partial<DIPROPGUIDANDPATH>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPGUIDANDPATH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: pointer
  if (data?.guidClass !== undefined) view.setBigUint64(8, data.guidClass === null ? 0n : util.toBigInt(util.toPointer(data.guidClass)), true);
  // 0x10: pointer
  if (data?.wszPath !== undefined) view.setBigUint64(16, data.wszPath === null ? 0n : util.toBigInt(util.toPointer(data.wszPath)), true);
  return buf;
}

export class DIPROPGUIDANDPATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get guidClass(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wszPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set guidClass(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wszPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPSTRING (size: 16)
 */
export interface DIPROPSTRING {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** array */
  wsz: Deno.PointerValue | null;
}

export const sizeofDIPROPSTRING = 16;

export function allocDIPROPSTRING(data?: Partial<DIPROPSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: pointer
  if (data?.wsz !== undefined) view.setBigUint64(8, data.wsz === null ? 0n : util.toBigInt(util.toPointer(data.wsz)), true);
  return buf;
}

export class DIPROPSTRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get wsz(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set wsz(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.CPOINT (size: 8)
 */
export interface CPOINT {
  /** i32 */
  lP: number;
  /** u32 */
  dwLog: number;
}

export const sizeofCPOINT = 8;

export function allocCPOINT(data?: Partial<CPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofCPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lP !== undefined) view.setInt32(0, Number(data.lP), true);
  // 0x04: u32
  if (data?.dwLog !== undefined) view.setUint32(4, Number(data.dwLog), true);
  return buf;
}

export class CPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lP(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwLog(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set lP(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwLog(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPROPCPOINTS (size: 24)
 */
export interface DIPROPCPOINTS {
  /** Windows.Win32.Devices.HumanInterfaceDevice.DIPROPHEADER */
  diph: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCPointsNum: number;
  /** array */
  cp: Deno.PointerValue | null;
}

export const sizeofDIPROPCPOINTS = 24;

export function allocDIPROPCPOINTS(data?: Partial<DIPROPCPOINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPROPCPOINTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.diph !== undefined) view.setBigUint64(0, data.diph === null ? 0n : util.toBigInt(util.toPointer(data.diph)), true);
  // 0x08: u32
  if (data?.dwCPointsNum !== undefined) view.setUint32(8, Number(data.dwCPointsNum), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.cp !== undefined) view.setBigUint64(16, data.cp === null ? 0n : util.toBigInt(util.toPointer(data.cp)), true);
  return buf;
}

export class DIPROPCPOINTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get diph(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwCPointsNum(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get cp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set diph(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwCPointsNum(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set cp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEOBJECTDATA_DX3 (size: 16)
 */
export interface DIDEVICEOBJECTDATA_DX3 {
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwData: number;
  /** u32 */
  dwTimeStamp: number;
  /** u32 */
  dwSequence: number;
}

export const sizeofDIDEVICEOBJECTDATA_DX3 = 16;

export function allocDIDEVICEOBJECTDATA_DX3(data?: Partial<DIDEVICEOBJECTDATA_DX3>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEOBJECTDATA_DX3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOfs !== undefined) view.setUint32(0, Number(data.dwOfs), true);
  // 0x04: u32
  if (data?.dwData !== undefined) view.setUint32(4, Number(data.dwData), true);
  // 0x08: u32
  if (data?.dwTimeStamp !== undefined) view.setUint32(8, Number(data.dwTimeStamp), true);
  // 0x0c: u32
  if (data?.dwSequence !== undefined) view.setUint32(12, Number(data.dwSequence), true);
  return buf;
}

export class DIDEVICEOBJECTDATA_DX3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOfs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwTimeStamp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSequence(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwOfs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwTimeStamp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSequence(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEOBJECTDATA (size: 24)
 */
export interface DIDEVICEOBJECTDATA {
  /** u32 */
  dwOfs: number;
  /** u32 */
  dwData: number;
  /** u32 */
  dwTimeStamp: number;
  /** u32 */
  dwSequence: number;
  /** usize */
  uAppData: number | bigint;
}

export const sizeofDIDEVICEOBJECTDATA = 24;

export function allocDIDEVICEOBJECTDATA(data?: Partial<DIDEVICEOBJECTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEOBJECTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOfs !== undefined) view.setUint32(0, Number(data.dwOfs), true);
  // 0x04: u32
  if (data?.dwData !== undefined) view.setUint32(4, Number(data.dwData), true);
  // 0x08: u32
  if (data?.dwTimeStamp !== undefined) view.setUint32(8, Number(data.dwTimeStamp), true);
  // 0x0c: u32
  if (data?.dwSequence !== undefined) view.setUint32(12, Number(data.dwSequence), true);
  // 0x10: usize
  if (data?.uAppData !== undefined) view.setBigUint64(16, util.toBigInt(data.uAppData), true);
  return buf;
}

export class DIDEVICEOBJECTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOfs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwTimeStamp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSequence(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: usize
  get uAppData(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u32
  set dwOfs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwTimeStamp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSequence(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: usize
  set uAppData(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEINSTANCE_DX3A (size: 48)
 */
export interface DIDEVICEINSTANCE_DX3A {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidProduct: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDevType: number;
  /** array */
  tszInstanceName: Deno.PointerValue | null;
  /** array */
  tszProductName: Deno.PointerValue | null;
}

export const sizeofDIDEVICEINSTANCE_DX3A = 48;

export function allocDIDEVICEINSTANCE_DX3A(data?: Partial<DIDEVICEINSTANCE_DX3A>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEINSTANCE_DX3A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(8, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x10: pointer
  if (data?.guidProduct !== undefined) view.setBigUint64(16, data.guidProduct === null ? 0n : util.toBigInt(util.toPointer(data.guidProduct)), true);
  // 0x18: u32
  if (data?.dwDevType !== undefined) view.setUint32(24, Number(data.dwDevType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszInstanceName !== undefined) view.setBigUint64(32, data.tszInstanceName === null ? 0n : util.toBigInt(util.toPointer(data.tszInstanceName)), true);
  // 0x28: pointer
  if (data?.tszProductName !== undefined) view.setBigUint64(40, data.tszProductName === null ? 0n : util.toBigInt(util.toPointer(data.tszProductName)), true);
  return buf;
}

export class DIDEVICEINSTANCE_DX3AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwDevType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszInstanceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get tszProductName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwDevType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszInstanceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set tszProductName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEINSTANCE_DX3W (size: 48)
 */
export interface DIDEVICEINSTANCE_DX3W {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidProduct: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDevType: number;
  /** array */
  tszInstanceName: Deno.PointerValue | null;
  /** array */
  tszProductName: Deno.PointerValue | null;
}

export const sizeofDIDEVICEINSTANCE_DX3W = 48;

export function allocDIDEVICEINSTANCE_DX3W(data?: Partial<DIDEVICEINSTANCE_DX3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEINSTANCE_DX3W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(8, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x10: pointer
  if (data?.guidProduct !== undefined) view.setBigUint64(16, data.guidProduct === null ? 0n : util.toBigInt(util.toPointer(data.guidProduct)), true);
  // 0x18: u32
  if (data?.dwDevType !== undefined) view.setUint32(24, Number(data.dwDevType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszInstanceName !== undefined) view.setBigUint64(32, data.tszInstanceName === null ? 0n : util.toBigInt(util.toPointer(data.tszInstanceName)), true);
  // 0x28: pointer
  if (data?.tszProductName !== undefined) view.setBigUint64(40, data.tszProductName === null ? 0n : util.toBigInt(util.toPointer(data.tszProductName)), true);
  return buf;
}

export class DIDEVICEINSTANCE_DX3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwDevType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszInstanceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get tszProductName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwDevType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszInstanceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set tszProductName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEINSTANCEA (size: 64)
 */
export interface DIDEVICEINSTANCEA {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidProduct: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDevType: number;
  /** array */
  tszInstanceName: Deno.PointerValue | null;
  /** array */
  tszProductName: Deno.PointerValue | null;
  /** System.Guid */
  guidFFDriver: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wUsagePage: number;
  /** u16 */
  wUsage: number;
}

export const sizeofDIDEVICEINSTANCEA = 64;

export function allocDIDEVICEINSTANCEA(data?: Partial<DIDEVICEINSTANCEA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEINSTANCEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(8, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x10: pointer
  if (data?.guidProduct !== undefined) view.setBigUint64(16, data.guidProduct === null ? 0n : util.toBigInt(util.toPointer(data.guidProduct)), true);
  // 0x18: u32
  if (data?.dwDevType !== undefined) view.setUint32(24, Number(data.dwDevType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszInstanceName !== undefined) view.setBigUint64(32, data.tszInstanceName === null ? 0n : util.toBigInt(util.toPointer(data.tszInstanceName)), true);
  // 0x28: pointer
  if (data?.tszProductName !== undefined) view.setBigUint64(40, data.tszProductName === null ? 0n : util.toBigInt(util.toPointer(data.tszProductName)), true);
  // 0x30: pointer
  if (data?.guidFFDriver !== undefined) view.setBigUint64(48, data.guidFFDriver === null ? 0n : util.toBigInt(util.toPointer(data.guidFFDriver)), true);
  // 0x38: u16
  if (data?.wUsagePage !== undefined) view.setUint16(56, Number(data.wUsagePage), true);
  // 0x3a: u16
  if (data?.wUsage !== undefined) view.setUint16(58, Number(data.wUsage), true);
  // 0x3c: pad4
  return buf;
}

export class DIDEVICEINSTANCEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwDevType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszInstanceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get tszProductName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get guidFFDriver(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get wUsagePage(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get wUsage(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwDevType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszInstanceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set tszProductName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set guidFFDriver(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set wUsagePage(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set wUsage(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICEINSTANCEW (size: 64)
 */
export interface DIDEVICEINSTANCEW {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidProduct: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDevType: number;
  /** array */
  tszInstanceName: Deno.PointerValue | null;
  /** array */
  tszProductName: Deno.PointerValue | null;
  /** System.Guid */
  guidFFDriver: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wUsagePage: number;
  /** u16 */
  wUsage: number;
}

export const sizeofDIDEVICEINSTANCEW = 64;

export function allocDIDEVICEINSTANCEW(data?: Partial<DIDEVICEINSTANCEW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICEINSTANCEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(8, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x10: pointer
  if (data?.guidProduct !== undefined) view.setBigUint64(16, data.guidProduct === null ? 0n : util.toBigInt(util.toPointer(data.guidProduct)), true);
  // 0x18: u32
  if (data?.dwDevType !== undefined) view.setUint32(24, Number(data.dwDevType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszInstanceName !== undefined) view.setBigUint64(32, data.tszInstanceName === null ? 0n : util.toBigInt(util.toPointer(data.tszInstanceName)), true);
  // 0x28: pointer
  if (data?.tszProductName !== undefined) view.setBigUint64(40, data.tszProductName === null ? 0n : util.toBigInt(util.toPointer(data.tszProductName)), true);
  // 0x30: pointer
  if (data?.guidFFDriver !== undefined) view.setBigUint64(48, data.guidFFDriver === null ? 0n : util.toBigInt(util.toPointer(data.guidFFDriver)), true);
  // 0x38: u16
  if (data?.wUsagePage !== undefined) view.setUint16(56, Number(data.wUsagePage), true);
  // 0x3a: u16
  if (data?.wUsage !== undefined) view.setUint16(58, Number(data.wUsage), true);
  // 0x3c: pad4
  return buf;
}

export class DIDEVICEINSTANCEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get guidProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwDevType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszInstanceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get tszProductName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get guidFFDriver(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get wUsagePage(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get wUsage(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set guidProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwDevType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszInstanceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set tszProductName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set guidFFDriver(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set wUsagePage(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set wUsage(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIEFFECTINFOA (size: 40)
 */
export interface DIEFFECTINFOA {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEffType: number;
  /** u32 */
  dwStaticParams: number;
  /** u32 */
  dwDynamicParams: number;
  /** array */
  tszName: Deno.PointerValue | null;
}

export const sizeofDIEFFECTINFOA = 40;

export function allocDIEFFECTINFOA(data?: Partial<DIEFFECTINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIEFFECTINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : util.toBigInt(util.toPointer(data.guid)), true);
  // 0x10: u32
  if (data?.dwEffType !== undefined) view.setUint32(16, Number(data.dwEffType), true);
  // 0x14: u32
  if (data?.dwStaticParams !== undefined) view.setUint32(20, Number(data.dwStaticParams), true);
  // 0x18: u32
  if (data?.dwDynamicParams !== undefined) view.setUint32(24, Number(data.dwDynamicParams), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszName !== undefined) view.setBigUint64(32, data.tszName === null ? 0n : util.toBigInt(util.toPointer(data.tszName)), true);
  return buf;
}

export class DIEFFECTINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwEffType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwStaticParams(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDynamicParams(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwEffType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwStaticParams(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDynamicParams(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIEFFECTINFOW (size: 40)
 */
export interface DIEFFECTINFOW {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEffType: number;
  /** u32 */
  dwStaticParams: number;
  /** u32 */
  dwDynamicParams: number;
  /** array */
  tszName: Deno.PointerValue | null;
}

export const sizeofDIEFFECTINFOW = 40;

export function allocDIEFFECTINFOW(data?: Partial<DIEFFECTINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDIEFFECTINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : util.toBigInt(util.toPointer(data.guid)), true);
  // 0x10: u32
  if (data?.dwEffType !== undefined) view.setUint32(16, Number(data.dwEffType), true);
  // 0x14: u32
  if (data?.dwStaticParams !== undefined) view.setUint32(20, Number(data.dwStaticParams), true);
  // 0x18: u32
  if (data?.dwDynamicParams !== undefined) view.setUint32(24, Number(data.dwDynamicParams), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.tszName !== undefined) view.setBigUint64(32, data.tszName === null ? 0n : util.toBigInt(util.toPointer(data.tszName)), true);
  return buf;
}

export class DIEFFECTINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwEffType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwStaticParams(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDynamicParams(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get tszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwEffType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwStaticParams(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDynamicParams(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set tszName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIMOUSESTATE (size: 24)
 */
export interface DIMOUSESTATE {
  /** i32 */
  lX: number;
  /** i32 */
  lY: number;
  /** i32 */
  lZ: number;
  /** array */
  rgbButtons: Deno.PointerValue | null;
}

export const sizeofDIMOUSESTATE = 24;

export function allocDIMOUSESTATE(data?: Partial<DIMOUSESTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIMOUSESTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lX !== undefined) view.setInt32(0, Number(data.lX), true);
  // 0x04: i32
  if (data?.lY !== undefined) view.setInt32(4, Number(data.lY), true);
  // 0x08: i32
  if (data?.lZ !== undefined) view.setInt32(8, Number(data.lZ), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgbButtons !== undefined) view.setBigUint64(16, data.rgbButtons === null ? 0n : util.toBigInt(util.toPointer(data.rgbButtons)), true);
  return buf;
}

export class DIMOUSESTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lZ(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgbButtons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lZ(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgbButtons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIMOUSESTATE2 (size: 24)
 */
export interface DIMOUSESTATE2 {
  /** i32 */
  lX: number;
  /** i32 */
  lY: number;
  /** i32 */
  lZ: number;
  /** array */
  rgbButtons: Deno.PointerValue | null;
}

export const sizeofDIMOUSESTATE2 = 24;

export function allocDIMOUSESTATE2(data?: Partial<DIMOUSESTATE2>): Uint8Array {
  const buf = new Uint8Array(sizeofDIMOUSESTATE2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lX !== undefined) view.setInt32(0, Number(data.lX), true);
  // 0x04: i32
  if (data?.lY !== undefined) view.setInt32(4, Number(data.lY), true);
  // 0x08: i32
  if (data?.lZ !== undefined) view.setInt32(8, Number(data.lZ), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgbButtons !== undefined) view.setBigUint64(16, data.rgbButtons === null ? 0n : util.toBigInt(util.toPointer(data.rgbButtons)), true);
  return buf;
}

export class DIMOUSESTATE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lZ(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgbButtons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lZ(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgbButtons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYSTATE (size: 48)
 */
export interface DIJOYSTATE {
  /** i32 */
  lX: number;
  /** i32 */
  lY: number;
  /** i32 */
  lZ: number;
  /** i32 */
  lRx: number;
  /** i32 */
  lRy: number;
  /** i32 */
  lRz: number;
  /** array */
  rglSlider: Deno.PointerValue | null;
  /** array */
  rgdwPOV: Deno.PointerValue | null;
  /** array */
  rgbButtons: Deno.PointerValue | null;
}

export const sizeofDIJOYSTATE = 48;

export function allocDIJOYSTATE(data?: Partial<DIJOYSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lX !== undefined) view.setInt32(0, Number(data.lX), true);
  // 0x04: i32
  if (data?.lY !== undefined) view.setInt32(4, Number(data.lY), true);
  // 0x08: i32
  if (data?.lZ !== undefined) view.setInt32(8, Number(data.lZ), true);
  // 0x0c: i32
  if (data?.lRx !== undefined) view.setInt32(12, Number(data.lRx), true);
  // 0x10: i32
  if (data?.lRy !== undefined) view.setInt32(16, Number(data.lRy), true);
  // 0x14: i32
  if (data?.lRz !== undefined) view.setInt32(20, Number(data.lRz), true);
  // 0x18: pointer
  if (data?.rglSlider !== undefined) view.setBigUint64(24, data.rglSlider === null ? 0n : util.toBigInt(util.toPointer(data.rglSlider)), true);
  // 0x20: pointer
  if (data?.rgdwPOV !== undefined) view.setBigUint64(32, data.rgdwPOV === null ? 0n : util.toBigInt(util.toPointer(data.rgdwPOV)), true);
  // 0x28: pointer
  if (data?.rgbButtons !== undefined) view.setBigUint64(40, data.rgbButtons === null ? 0n : util.toBigInt(util.toPointer(data.rgbButtons)), true);
  return buf;
}

export class DIJOYSTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lZ(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lRx(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lRy(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lRz(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get rglSlider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get rgdwPOV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rgbButtons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lZ(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lRx(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lRy(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lRz(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set rglSlider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set rgdwPOV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rgbButtons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYSTATE2 (size: 144)
 */
export interface DIJOYSTATE2 {
  /** i32 */
  lX: number;
  /** i32 */
  lY: number;
  /** i32 */
  lZ: number;
  /** i32 */
  lRx: number;
  /** i32 */
  lRy: number;
  /** i32 */
  lRz: number;
  /** array */
  rglSlider: Deno.PointerValue | null;
  /** array */
  rgdwPOV: Deno.PointerValue | null;
  /** array */
  rgbButtons: Deno.PointerValue | null;
  /** i32 */
  lVX: number;
  /** i32 */
  lVY: number;
  /** i32 */
  lVZ: number;
  /** i32 */
  lVRx: number;
  /** i32 */
  lVRy: number;
  /** i32 */
  lVRz: number;
  /** array */
  rglVSlider: Deno.PointerValue | null;
  /** i32 */
  lAX: number;
  /** i32 */
  lAY: number;
  /** i32 */
  lAZ: number;
  /** i32 */
  lARx: number;
  /** i32 */
  lARy: number;
  /** i32 */
  lARz: number;
  /** array */
  rglASlider: Deno.PointerValue | null;
  /** i32 */
  lFX: number;
  /** i32 */
  lFY: number;
  /** i32 */
  lFZ: number;
  /** i32 */
  lFRx: number;
  /** i32 */
  lFRy: number;
  /** i32 */
  lFRz: number;
  /** array */
  rglFSlider: Deno.PointerValue | null;
}

export const sizeofDIJOYSTATE2 = 144;

export function allocDIJOYSTATE2(data?: Partial<DIJOYSTATE2>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYSTATE2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lX !== undefined) view.setInt32(0, Number(data.lX), true);
  // 0x04: i32
  if (data?.lY !== undefined) view.setInt32(4, Number(data.lY), true);
  // 0x08: i32
  if (data?.lZ !== undefined) view.setInt32(8, Number(data.lZ), true);
  // 0x0c: i32
  if (data?.lRx !== undefined) view.setInt32(12, Number(data.lRx), true);
  // 0x10: i32
  if (data?.lRy !== undefined) view.setInt32(16, Number(data.lRy), true);
  // 0x14: i32
  if (data?.lRz !== undefined) view.setInt32(20, Number(data.lRz), true);
  // 0x18: pointer
  if (data?.rglSlider !== undefined) view.setBigUint64(24, data.rglSlider === null ? 0n : util.toBigInt(util.toPointer(data.rglSlider)), true);
  // 0x20: pointer
  if (data?.rgdwPOV !== undefined) view.setBigUint64(32, data.rgdwPOV === null ? 0n : util.toBigInt(util.toPointer(data.rgdwPOV)), true);
  // 0x28: pointer
  if (data?.rgbButtons !== undefined) view.setBigUint64(40, data.rgbButtons === null ? 0n : util.toBigInt(util.toPointer(data.rgbButtons)), true);
  // 0x30: i32
  if (data?.lVX !== undefined) view.setInt32(48, Number(data.lVX), true);
  // 0x34: i32
  if (data?.lVY !== undefined) view.setInt32(52, Number(data.lVY), true);
  // 0x38: i32
  if (data?.lVZ !== undefined) view.setInt32(56, Number(data.lVZ), true);
  // 0x3c: i32
  if (data?.lVRx !== undefined) view.setInt32(60, Number(data.lVRx), true);
  // 0x40: i32
  if (data?.lVRy !== undefined) view.setInt32(64, Number(data.lVRy), true);
  // 0x44: i32
  if (data?.lVRz !== undefined) view.setInt32(68, Number(data.lVRz), true);
  // 0x48: pointer
  if (data?.rglVSlider !== undefined) view.setBigUint64(72, data.rglVSlider === null ? 0n : util.toBigInt(util.toPointer(data.rglVSlider)), true);
  // 0x50: i32
  if (data?.lAX !== undefined) view.setInt32(80, Number(data.lAX), true);
  // 0x54: i32
  if (data?.lAY !== undefined) view.setInt32(84, Number(data.lAY), true);
  // 0x58: i32
  if (data?.lAZ !== undefined) view.setInt32(88, Number(data.lAZ), true);
  // 0x5c: i32
  if (data?.lARx !== undefined) view.setInt32(92, Number(data.lARx), true);
  // 0x60: i32
  if (data?.lARy !== undefined) view.setInt32(96, Number(data.lARy), true);
  // 0x64: i32
  if (data?.lARz !== undefined) view.setInt32(100, Number(data.lARz), true);
  // 0x68: pointer
  if (data?.rglASlider !== undefined) view.setBigUint64(104, data.rglASlider === null ? 0n : util.toBigInt(util.toPointer(data.rglASlider)), true);
  // 0x70: i32
  if (data?.lFX !== undefined) view.setInt32(112, Number(data.lFX), true);
  // 0x74: i32
  if (data?.lFY !== undefined) view.setInt32(116, Number(data.lFY), true);
  // 0x78: i32
  if (data?.lFZ !== undefined) view.setInt32(120, Number(data.lFZ), true);
  // 0x7c: i32
  if (data?.lFRx !== undefined) view.setInt32(124, Number(data.lFRx), true);
  // 0x80: i32
  if (data?.lFRy !== undefined) view.setInt32(128, Number(data.lFRy), true);
  // 0x84: i32
  if (data?.lFRz !== undefined) view.setInt32(132, Number(data.lFRz), true);
  // 0x88: pointer
  if (data?.rglFSlider !== undefined) view.setBigUint64(136, data.rglFSlider === null ? 0n : util.toBigInt(util.toPointer(data.rglFSlider)), true);
  return buf;
}

export class DIJOYSTATE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lZ(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lRx(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lRy(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lRz(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get rglSlider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get rgdwPOV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rgbButtons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get lVX(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get lVY(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: i32
  get lVZ(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get lVRx(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get lVRy(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get lVRz(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: pointer
  get rglVSlider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: i32
  get lAX(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: i32
  get lAY(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: i32
  get lAZ(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: i32
  get lARx(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get lARy(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: i32
  get lARz(): number {
    return this.view.getInt32(100, true);
  }

  // 0x68: pointer
  get rglASlider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: i32
  get lFX(): number {
    return this.view.getInt32(112, true);
  }

  // 0x74: i32
  get lFY(): number {
    return this.view.getInt32(116, true);
  }

  // 0x78: i32
  get lFZ(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: i32
  get lFRx(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: i32
  get lFRy(): number {
    return this.view.getInt32(128, true);
  }

  // 0x84: i32
  get lFRz(): number {
    return this.view.getInt32(132, true);
  }

  // 0x88: pointer
  get rglFSlider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lZ(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lRx(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lRy(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lRz(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set rglSlider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set rgdwPOV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rgbButtons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set lVX(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set lVY(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: i32
  set lVZ(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set lVRx(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set lVRy(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set lVRz(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: pointer
  set rglVSlider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: i32
  set lAX(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: i32
  set lAY(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: i32
  set lAZ(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: i32
  set lARx(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set lARy(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: i32
  set lARz(value: number) {
    this.view.setInt32(100, value, true);
  }

  // 0x68: pointer
  set rglASlider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: i32
  set lFX(value: number) {
    this.view.setInt32(112, value, true);
  }

  // 0x74: i32
  set lFY(value: number) {
    this.view.setInt32(116, value, true);
  }

  // 0x78: i32
  set lFZ(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: i32
  set lFRx(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: i32
  set lFRy(value: number) {
    this.view.setInt32(128, value, true);
  }

  // 0x84: i32
  set lFRz(value: number) {
    this.view.setInt32(132, value, true);
  }

  // 0x88: pointer
  set rglFSlider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIOBJECTATTRIBUTES (size: 8)
 */
export interface DIOBJECTATTRIBUTES {
  /** u32 */
  dwFlags: number;
  /** u16 */
  wUsagePage: number;
  /** u16 */
  wUsage: number;
}

export const sizeofDIOBJECTATTRIBUTES = 8;

export function allocDIOBJECTATTRIBUTES(data?: Partial<DIOBJECTATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDIOBJECTATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u16
  if (data?.wUsagePage !== undefined) view.setUint16(4, Number(data.wUsagePage), true);
  // 0x06: u16
  if (data?.wUsage !== undefined) view.setUint16(6, Number(data.wUsage), true);
  return buf;
}

export class DIOBJECTATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wUsagePage(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wUsage(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wUsagePage(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wUsage(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIFFOBJECTATTRIBUTES (size: 8)
 */
export interface DIFFOBJECTATTRIBUTES {
  /** u32 */
  dwFFMaxForce: number;
  /** u32 */
  dwFFForceResolution: number;
}

export const sizeofDIFFOBJECTATTRIBUTES = 8;

export function allocDIFFOBJECTATTRIBUTES(data?: Partial<DIFFOBJECTATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDIFFOBJECTATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFFMaxForce !== undefined) view.setUint32(0, Number(data.dwFFMaxForce), true);
  // 0x04: u32
  if (data?.dwFFForceResolution !== undefined) view.setUint32(4, Number(data.dwFFForceResolution), true);
  return buf;
}

export class DIFFOBJECTATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFFMaxForce(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFFForceResolution(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwFFMaxForce(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFFForceResolution(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIOBJECTCALIBRATION (size: 16)
 */
export interface DIOBJECTCALIBRATION {
  /** i32 */
  lMin: number;
  /** i32 */
  lCenter: number;
  /** i32 */
  lMax: number;
}

export const sizeofDIOBJECTCALIBRATION = 16;

export function allocDIOBJECTCALIBRATION(data?: Partial<DIOBJECTCALIBRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIOBJECTCALIBRATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lMin !== undefined) view.setInt32(0, Number(data.lMin), true);
  // 0x04: i32
  if (data?.lCenter !== undefined) view.setInt32(4, Number(data.lCenter), true);
  // 0x08: i32
  if (data?.lMax !== undefined) view.setInt32(8, Number(data.lMax), true);
  // 0x0c: pad4
  return buf;
}

export class DIOBJECTCALIBRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lMin(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lCenter(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lMax(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set lMin(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lCenter(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lMax(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIPOVCALIBRATION (size: 16)
 */
export interface DIPOVCALIBRATION {
  /** array */
  lMin: Deno.PointerValue | null;
  /** array */
  lMax: Deno.PointerValue | null;
}

export const sizeofDIPOVCALIBRATION = 16;

export function allocDIPOVCALIBRATION(data?: Partial<DIPOVCALIBRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIPOVCALIBRATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lMin !== undefined) view.setBigUint64(0, data.lMin === null ? 0n : util.toBigInt(util.toPointer(data.lMin)), true);
  // 0x08: pointer
  if (data?.lMax !== undefined) view.setBigUint64(8, data.lMax === null ? 0n : util.toBigInt(util.toPointer(data.lMax)), true);
  return buf;
}

export class DIPOVCALIBRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lMin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lMax(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set lMin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lMax(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIEFFECTATTRIBUTES (size: 24)
 */
export interface DIEFFECTATTRIBUTES {
  /** u32 */
  dwEffectId: number;
  /** u32 */
  dwEffType: number;
  /** u32 */
  dwStaticParams: number;
  /** u32 */
  dwDynamicParams: number;
  /** u32 */
  dwCoords: number;
}

export const sizeofDIEFFECTATTRIBUTES = 24;

export function allocDIEFFECTATTRIBUTES(data?: Partial<DIEFFECTATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDIEFFECTATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwEffectId !== undefined) view.setUint32(0, Number(data.dwEffectId), true);
  // 0x04: u32
  if (data?.dwEffType !== undefined) view.setUint32(4, Number(data.dwEffType), true);
  // 0x08: u32
  if (data?.dwStaticParams !== undefined) view.setUint32(8, Number(data.dwStaticParams), true);
  // 0x0c: u32
  if (data?.dwDynamicParams !== undefined) view.setUint32(12, Number(data.dwDynamicParams), true);
  // 0x10: u32
  if (data?.dwCoords !== undefined) view.setUint32(16, Number(data.dwCoords), true);
  // 0x14: pad4
  return buf;
}

export class DIEFFECTATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwEffectId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEffType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStaticParams(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDynamicParams(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwCoords(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwEffectId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEffType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStaticParams(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDynamicParams(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwCoords(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIFFDEVICEATTRIBUTES (size: 16)
 */
export interface DIFFDEVICEATTRIBUTES {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFFSamplePeriod: number;
  /** u32 */
  dwFFMinTimeResolution: number;
}

export const sizeofDIFFDEVICEATTRIBUTES = 16;

export function allocDIFFDEVICEATTRIBUTES(data?: Partial<DIFFDEVICEATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofDIFFDEVICEATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwFFSamplePeriod !== undefined) view.setUint32(4, Number(data.dwFFSamplePeriod), true);
  // 0x08: u32
  if (data?.dwFFMinTimeResolution !== undefined) view.setUint32(8, Number(data.dwFFMinTimeResolution), true);
  // 0x0c: pad4
  return buf;
}

export class DIFFDEVICEATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFFSamplePeriod(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFFMinTimeResolution(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFFSamplePeriod(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFFMinTimeResolution(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDRIVERVERSIONS (size: 16)
 */
export interface DIDRIVERVERSIONS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFirmwareRevision: number;
  /** u32 */
  dwHardwareRevision: number;
  /** u32 */
  dwFFDriverVersion: number;
}

export const sizeofDIDRIVERVERSIONS = 16;

export function allocDIDRIVERVERSIONS(data?: Partial<DIDRIVERVERSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDRIVERVERSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFirmwareRevision !== undefined) view.setUint32(4, Number(data.dwFirmwareRevision), true);
  // 0x08: u32
  if (data?.dwHardwareRevision !== undefined) view.setUint32(8, Number(data.dwHardwareRevision), true);
  // 0x0c: u32
  if (data?.dwFFDriverVersion !== undefined) view.setUint32(12, Number(data.dwFFDriverVersion), true);
  return buf;
}

export class DIDRIVERVERSIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFirmwareRevision(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwHardwareRevision(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFFDriverVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFirmwareRevision(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwHardwareRevision(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFFDriverVersion(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIDEVICESTATE (size: 16)
 */
export interface DIDEVICESTATE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwLoad: number;
}

export const sizeofDIDEVICESTATE = 16;

export function allocDIDEVICESTATE(data?: Partial<DIDEVICESTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIDEVICESTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwState !== undefined) view.setUint32(4, Number(data.dwState), true);
  // 0x08: u32
  if (data?.dwLoad !== undefined) view.setUint32(8, Number(data.dwLoad), true);
  // 0x0c: pad4
  return buf;
}

export class DIDEVICESTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwState(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLoad(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwState(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLoad(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIHIDFFINITINFO (size: 24)
 */
export interface DIHIDFFINITINFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDeviceInterface: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  GuidInstance: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIHIDFFINITINFO = 24;

export function allocDIHIDFFINITINFO(data?: Partial<DIHIDFFINITINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDIHIDFFINITINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszDeviceInterface !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszDeviceInterface);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.GuidInstance !== undefined) view.setBigUint64(16, data.GuidInstance === null ? 0n : util.toBigInt(util.toPointer(data.GuidInstance)), true);
  return buf;
}

export class DIHIDFFINITINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszDeviceInterface(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get GuidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszDeviceInterface(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set GuidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYPOS (size: 24)
 */
export interface JOYPOS {
  /** u32 */
  dwX: number;
  /** u32 */
  dwY: number;
  /** u32 */
  dwZ: number;
  /** u32 */
  dwR: number;
  /** u32 */
  dwU: number;
  /** u32 */
  dwV: number;
}

export const sizeofJOYPOS = 24;

export function allocJOYPOS(data?: Partial<JOYPOS>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYPOS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwX !== undefined) view.setUint32(0, Number(data.dwX), true);
  // 0x04: u32
  if (data?.dwY !== undefined) view.setUint32(4, Number(data.dwY), true);
  // 0x08: u32
  if (data?.dwZ !== undefined) view.setUint32(8, Number(data.dwZ), true);
  // 0x0c: u32
  if (data?.dwR !== undefined) view.setUint32(12, Number(data.dwR), true);
  // 0x10: u32
  if (data?.dwU !== undefined) view.setUint32(16, Number(data.dwU), true);
  // 0x14: u32
  if (data?.dwV !== undefined) view.setUint32(20, Number(data.dwV), true);
  return buf;
}

export class JOYPOSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwX(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwY(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwZ(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwR(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwU(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwV(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwX(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwY(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwZ(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwR(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwU(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwV(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYRANGE (size: 24)
 */
export interface JOYRANGE {
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYPOS */
  jpMin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYPOS */
  jpMax: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYPOS */
  jpCenter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJOYRANGE = 24;

export function allocJOYRANGE(data?: Partial<JOYRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.jpMin !== undefined) view.setBigUint64(0, data.jpMin === null ? 0n : util.toBigInt(util.toPointer(data.jpMin)), true);
  // 0x08: pointer
  if (data?.jpMax !== undefined) view.setBigUint64(8, data.jpMax === null ? 0n : util.toBigInt(util.toPointer(data.jpMax)), true);
  // 0x10: pointer
  if (data?.jpCenter !== undefined) view.setBigUint64(16, data.jpCenter === null ? 0n : util.toBigInt(util.toPointer(data.jpCenter)), true);
  return buf;
}

export class JOYRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get jpMin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get jpMax(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get jpCenter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set jpMin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set jpMax(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set jpCenter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYREGUSERVALUES (size: 24)
 */
export interface JOYREGUSERVALUES {
  /** u32 */
  dwTimeOut: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYRANGE */
  jrvRanges: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYPOS */
  jpDeadZone: Uint8Array | Deno.PointerValue | null;
}

export const sizeofJOYREGUSERVALUES = 24;

export function allocJOYREGUSERVALUES(data?: Partial<JOYREGUSERVALUES>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYREGUSERVALUES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTimeOut !== undefined) view.setUint32(0, Number(data.dwTimeOut), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.jrvRanges !== undefined) view.setBigUint64(8, data.jrvRanges === null ? 0n : util.toBigInt(util.toPointer(data.jrvRanges)), true);
  // 0x10: pointer
  if (data?.jpDeadZone !== undefined) view.setBigUint64(16, data.jpDeadZone === null ? 0n : util.toBigInt(util.toPointer(data.jpDeadZone)), true);
  return buf;
}

export class JOYREGUSERVALUESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTimeOut(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get jrvRanges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get jpDeadZone(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwTimeOut(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set jrvRanges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set jpDeadZone(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWSETTINGS (size: 8)
 */
export interface JOYREGHWSETTINGS {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwNumButtons: number;
}

export const sizeofJOYREGHWSETTINGS = 8;

export function allocJOYREGHWSETTINGS(data?: Partial<JOYREGHWSETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYREGHWSETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwNumButtons !== undefined) view.setUint32(4, Number(data.dwNumButtons), true);
  return buf;
}

export class JOYREGHWSETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumButtons(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumButtons(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWVALUES (size: 24)
 */
export interface JOYREGHWVALUES {
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYRANGE */
  jrvHardware: Uint8Array | Deno.PointerValue | null;
  /** array */
  dwPOVValues: Deno.PointerValue | null;
  /** u32 */
  dwCalFlags: number;
}

export const sizeofJOYREGHWVALUES = 24;

export function allocJOYREGHWVALUES(data?: Partial<JOYREGHWVALUES>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYREGHWVALUES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.jrvHardware !== undefined) view.setBigUint64(0, data.jrvHardware === null ? 0n : util.toBigInt(util.toPointer(data.jrvHardware)), true);
  // 0x08: pointer
  if (data?.dwPOVValues !== undefined) view.setBigUint64(8, data.dwPOVValues === null ? 0n : util.toBigInt(util.toPointer(data.dwPOVValues)), true);
  // 0x10: u32
  if (data?.dwCalFlags !== undefined) view.setUint32(16, Number(data.dwCalFlags), true);
  // 0x14: pad4
  return buf;
}

export class JOYREGHWVALUESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get jrvHardware(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get dwPOVValues(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCalFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set jrvHardware(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set dwPOVValues(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCalFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWCONFIG (size: 32)
 */
export interface JOYREGHWCONFIG {
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWSETTINGS */
  hws: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwUsageSettings: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWVALUES */
  hwv: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwType: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofJOYREGHWCONFIG = 32;

export function allocJOYREGHWCONFIG(data?: Partial<JOYREGHWCONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYREGHWCONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hws !== undefined) view.setBigUint64(0, data.hws === null ? 0n : util.toBigInt(util.toPointer(data.hws)), true);
  // 0x08: u32
  if (data?.dwUsageSettings !== undefined) view.setUint32(8, Number(data.dwUsageSettings), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwv !== undefined) view.setBigUint64(16, data.hwv === null ? 0n : util.toBigInt(util.toPointer(data.hwv)), true);
  // 0x18: u32
  if (data?.dwType !== undefined) view.setUint32(24, Number(data.dwType), true);
  // 0x1c: u32
  if (data?.dwReserved !== undefined) view.setUint32(28, Number(data.dwReserved), true);
  return buf;
}

export class JOYREGHWCONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hws(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwUsageSettings(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hwv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwReserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set hws(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwUsageSettings(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hwv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwReserved(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.JOYCALIBRATE (size: 24)
 */
export interface JOYCALIBRATE {
  /** u32 */
  wXbase: number;
  /** u32 */
  wXdelta: number;
  /** u32 */
  wYbase: number;
  /** u32 */
  wYdelta: number;
  /** u32 */
  wZbase: number;
  /** u32 */
  wZdelta: number;
}

export const sizeofJOYCALIBRATE = 24;

export function allocJOYCALIBRATE(data?: Partial<JOYCALIBRATE>): Uint8Array {
  const buf = new Uint8Array(sizeofJOYCALIBRATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.wXbase !== undefined) view.setUint32(0, Number(data.wXbase), true);
  // 0x04: u32
  if (data?.wXdelta !== undefined) view.setUint32(4, Number(data.wXdelta), true);
  // 0x08: u32
  if (data?.wYbase !== undefined) view.setUint32(8, Number(data.wYbase), true);
  // 0x0c: u32
  if (data?.wYdelta !== undefined) view.setUint32(12, Number(data.wYdelta), true);
  // 0x10: u32
  if (data?.wZbase !== undefined) view.setUint32(16, Number(data.wZbase), true);
  // 0x14: u32
  if (data?.wZdelta !== undefined) view.setUint32(20, Number(data.wZdelta), true);
  return buf;
}

export class JOYCALIBRATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get wXbase(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get wXdelta(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get wYbase(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get wYdelta(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get wZbase(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get wZdelta(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set wXbase(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set wXdelta(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set wYbase(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set wYdelta(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set wZbase(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set wZdelta(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYTYPEINFO_DX5 (size: 40)
 */
export interface DIJOYTYPEINFO_DX5 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWSETTINGS */
  hws: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidConfig: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDisplayName: Deno.PointerValue | null;
  /** array */
  wszCallout: Deno.PointerValue | null;
}

export const sizeofDIJOYTYPEINFO_DX5 = 40;

export function allocDIJOYTYPEINFO_DX5(data?: Partial<DIJOYTYPEINFO_DX5>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYTYPEINFO_DX5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hws !== undefined) view.setBigUint64(8, data.hws === null ? 0n : util.toBigInt(util.toPointer(data.hws)), true);
  // 0x10: pointer
  if (data?.clsidConfig !== undefined) view.setBigUint64(16, data.clsidConfig === null ? 0n : util.toBigInt(util.toPointer(data.clsidConfig)), true);
  // 0x18: pointer
  if (data?.wszDisplayName !== undefined) view.setBigUint64(24, data.wszDisplayName === null ? 0n : util.toBigInt(util.toPointer(data.wszDisplayName)), true);
  // 0x20: pointer
  if (data?.wszCallout !== undefined) view.setBigUint64(32, data.wszCallout === null ? 0n : util.toBigInt(util.toPointer(data.wszCallout)), true);
  return buf;
}

export class DIJOYTYPEINFO_DX5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hws(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get clsidConfig(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wszCallout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hws(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set clsidConfig(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wszCallout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYTYPEINFO_DX6 (size: 56)
 */
export interface DIJOYTYPEINFO_DX6 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWSETTINGS */
  hws: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidConfig: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDisplayName: Deno.PointerValue | null;
  /** array */
  wszCallout: Deno.PointerValue | null;
  /** array */
  wszHardwareId: Deno.PointerValue | null;
  /** u32 */
  dwFlags1: number;
}

export const sizeofDIJOYTYPEINFO_DX6 = 56;

export function allocDIJOYTYPEINFO_DX6(data?: Partial<DIJOYTYPEINFO_DX6>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYTYPEINFO_DX6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hws !== undefined) view.setBigUint64(8, data.hws === null ? 0n : util.toBigInt(util.toPointer(data.hws)), true);
  // 0x10: pointer
  if (data?.clsidConfig !== undefined) view.setBigUint64(16, data.clsidConfig === null ? 0n : util.toBigInt(util.toPointer(data.clsidConfig)), true);
  // 0x18: pointer
  if (data?.wszDisplayName !== undefined) view.setBigUint64(24, data.wszDisplayName === null ? 0n : util.toBigInt(util.toPointer(data.wszDisplayName)), true);
  // 0x20: pointer
  if (data?.wszCallout !== undefined) view.setBigUint64(32, data.wszCallout === null ? 0n : util.toBigInt(util.toPointer(data.wszCallout)), true);
  // 0x28: pointer
  if (data?.wszHardwareId !== undefined) view.setBigUint64(40, data.wszHardwareId === null ? 0n : util.toBigInt(util.toPointer(data.wszHardwareId)), true);
  // 0x30: u32
  if (data?.dwFlags1 !== undefined) view.setUint32(48, Number(data.dwFlags1), true);
  // 0x34: pad4
  return buf;
}

export class DIJOYTYPEINFO_DX6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hws(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get clsidConfig(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wszCallout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wszHardwareId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwFlags1(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hws(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set clsidConfig(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wszCallout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wszHardwareId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwFlags1(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYTYPEINFO (size: 64)
 */
export interface DIJOYTYPEINFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWSETTINGS */
  hws: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clsidConfig: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszDisplayName: Deno.PointerValue | null;
  /** array */
  wszCallout: Deno.PointerValue | null;
  /** array */
  wszHardwareId: Deno.PointerValue | null;
  /** u32 */
  dwFlags1: number;
  /** u32 */
  dwFlags2: number;
  /** array */
  wszMapFile: Deno.PointerValue | null;
}

export const sizeofDIJOYTYPEINFO = 64;

export function allocDIJOYTYPEINFO(data?: Partial<DIJOYTYPEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYTYPEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hws !== undefined) view.setBigUint64(8, data.hws === null ? 0n : util.toBigInt(util.toPointer(data.hws)), true);
  // 0x10: pointer
  if (data?.clsidConfig !== undefined) view.setBigUint64(16, data.clsidConfig === null ? 0n : util.toBigInt(util.toPointer(data.clsidConfig)), true);
  // 0x18: pointer
  if (data?.wszDisplayName !== undefined) view.setBigUint64(24, data.wszDisplayName === null ? 0n : util.toBigInt(util.toPointer(data.wszDisplayName)), true);
  // 0x20: pointer
  if (data?.wszCallout !== undefined) view.setBigUint64(32, data.wszCallout === null ? 0n : util.toBigInt(util.toPointer(data.wszCallout)), true);
  // 0x28: pointer
  if (data?.wszHardwareId !== undefined) view.setBigUint64(40, data.wszHardwareId === null ? 0n : util.toBigInt(util.toPointer(data.wszHardwareId)), true);
  // 0x30: u32
  if (data?.dwFlags1 !== undefined) view.setUint32(48, Number(data.dwFlags1), true);
  // 0x34: u32
  if (data?.dwFlags2 !== undefined) view.setUint32(52, Number(data.dwFlags2), true);
  // 0x38: pointer
  if (data?.wszMapFile !== undefined) view.setBigUint64(56, data.wszMapFile === null ? 0n : util.toBigInt(util.toPointer(data.wszMapFile)), true);
  return buf;
}

export class DIJOYTYPEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hws(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get clsidConfig(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get wszCallout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wszHardwareId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwFlags1(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwFlags2(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get wszMapFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hws(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set clsidConfig(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set wszCallout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wszHardwareId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwFlags1(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwFlags2(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set wszMapFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYCONFIG_DX5 (size: 48)
 */
export interface DIJOYCONFIG_DX5 {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWCONFIG */
  hwc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwGain: number;
  /** array */
  wszType: Deno.PointerValue | null;
  /** array */
  wszCallout: Deno.PointerValue | null;
}

export const sizeofDIJOYCONFIG_DX5 = 48;

export function allocDIJOYCONFIG_DX5(data?: Partial<DIJOYCONFIG_DX5>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYCONFIG_DX5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(8, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x10: pointer
  if (data?.hwc !== undefined) view.setBigUint64(16, data.hwc === null ? 0n : util.toBigInt(util.toPointer(data.hwc)), true);
  // 0x18: u32
  if (data?.dwGain !== undefined) view.setUint32(24, Number(data.dwGain), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.wszType !== undefined) view.setBigUint64(32, data.wszType === null ? 0n : util.toBigInt(util.toPointer(data.wszType)), true);
  // 0x28: pointer
  if (data?.wszCallout !== undefined) view.setBigUint64(40, data.wszCallout === null ? 0n : util.toBigInt(util.toPointer(data.wszCallout)), true);
  return buf;
}

export class DIJOYCONFIG_DX5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hwc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwGain(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get wszType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wszCallout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hwc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwGain(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set wszType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wszCallout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYCONFIG (size: 56)
 */
export interface DIJOYCONFIG {
  /** u32 */
  dwSize: number;
  /** System.Guid */
  guidInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGHWCONFIG */
  hwc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwGain: number;
  /** array */
  wszType: Deno.PointerValue | null;
  /** array */
  wszCallout: Deno.PointerValue | null;
  /** System.Guid */
  guidGameport: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDIJOYCONFIG = 56;

export function allocDIJOYCONFIG(data?: Partial<DIJOYCONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYCONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidInstance !== undefined) view.setBigUint64(8, data.guidInstance === null ? 0n : util.toBigInt(util.toPointer(data.guidInstance)), true);
  // 0x10: pointer
  if (data?.hwc !== undefined) view.setBigUint64(16, data.hwc === null ? 0n : util.toBigInt(util.toPointer(data.hwc)), true);
  // 0x18: u32
  if (data?.dwGain !== undefined) view.setUint32(24, Number(data.dwGain), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.wszType !== undefined) view.setBigUint64(32, data.wszType === null ? 0n : util.toBigInt(util.toPointer(data.wszType)), true);
  // 0x28: pointer
  if (data?.wszCallout !== undefined) view.setBigUint64(40, data.wszCallout === null ? 0n : util.toBigInt(util.toPointer(data.wszCallout)), true);
  // 0x30: pointer
  if (data?.guidGameport !== undefined) view.setBigUint64(48, data.guidGameport === null ? 0n : util.toBigInt(util.toPointer(data.guidGameport)), true);
  return buf;
}

export class DIJOYCONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hwc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwGain(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get wszType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wszCallout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get guidGameport(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hwc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwGain(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set wszType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wszCallout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set guidGameport(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.DIJOYUSERVALUES (size: 32)
 */
export interface DIJOYUSERVALUES {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.JOYREGUSERVALUES */
  ruv: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszGlobalDriver: Deno.PointerValue | null;
  /** array */
  wszGameportEmulator: Deno.PointerValue | null;
}

export const sizeofDIJOYUSERVALUES = 32;

export function allocDIJOYUSERVALUES(data?: Partial<DIJOYUSERVALUES>): Uint8Array {
  const buf = new Uint8Array(sizeofDIJOYUSERVALUES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ruv !== undefined) view.setBigUint64(8, data.ruv === null ? 0n : util.toBigInt(util.toPointer(data.ruv)), true);
  // 0x10: pointer
  if (data?.wszGlobalDriver !== undefined) view.setBigUint64(16, data.wszGlobalDriver === null ? 0n : util.toBigInt(util.toPointer(data.wszGlobalDriver)), true);
  // 0x18: pointer
  if (data?.wszGameportEmulator !== undefined) view.setBigUint64(24, data.wszGameportEmulator === null ? 0n : util.toBigInt(util.toPointer(data.wszGameportEmulator)), true);
  return buf;
}

export class DIJOYUSERVALUESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ruv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wszGlobalDriver(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get wszGameportEmulator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ruv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wszGlobalDriver(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set wszGameportEmulator(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_INPUT_DATA (size: 16)
 */
export interface KEYBOARD_INPUT_DATA {
  /** u16 */
  UnitId: number;
  /** u16 */
  MakeCode: number;
  /** u16 */
  Flags: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  ExtraInformation: number;
}

export const sizeofKEYBOARD_INPUT_DATA = 16;

export function allocKEYBOARD_INPUT_DATA(data?: Partial<KEYBOARD_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: u16
  if (data?.MakeCode !== undefined) view.setUint16(2, Number(data.MakeCode), true);
  // 0x04: u16
  if (data?.Flags !== undefined) view.setUint16(4, Number(data.Flags), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.ExtraInformation !== undefined) view.setUint32(8, Number(data.ExtraInformation), true);
  // 0x0c: pad4
  return buf;
}

export class KEYBOARD_INPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MakeCode(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Flags(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Reserved(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get ExtraInformation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MakeCode(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Flags(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Reserved(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set ExtraInformation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_TYPEMATIC_PARAMETERS (size: 8)
 */
export interface KEYBOARD_TYPEMATIC_PARAMETERS {
  /** u16 */
  UnitId: number;
  /** u16 */
  Rate: number;
  /** u16 */
  Delay: number;
}

export const sizeofKEYBOARD_TYPEMATIC_PARAMETERS = 8;

export function allocKEYBOARD_TYPEMATIC_PARAMETERS(data?: Partial<KEYBOARD_TYPEMATIC_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_TYPEMATIC_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: u16
  if (data?.Rate !== undefined) view.setUint16(2, Number(data.Rate), true);
  // 0x04: u16
  if (data?.Delay !== undefined) view.setUint16(4, Number(data.Delay), true);
  // 0x06: pad2
  return buf;
}

export class KEYBOARD_TYPEMATIC_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Rate(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Delay(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Rate(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Delay(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_ID (size: 8)
 */
export interface KEYBOARD_ID {
  /** u8 */
  Type: number;
  /** u8 */
  Subtype: number;
}

export const sizeofKEYBOARD_ID = 8;

export function allocKEYBOARD_ID(data?: Partial<KEYBOARD_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Type !== undefined) view.setUint8(0, Number(data.Type));
  // 0x01: u8
  if (data?.Subtype !== undefined) view.setUint8(1, Number(data.Subtype));
  // 0x02: pad6
  return buf;
}

export class KEYBOARD_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Subtype(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set Type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Subtype(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_ATTRIBUTES (size: 40)
 */
export interface KEYBOARD_ATTRIBUTES {
  /** Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_ID */
  KeyboardIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  KeyboardMode: number;
  /** u16 */
  NumberOfFunctionKeys: number;
  /** u16 */
  NumberOfIndicators: number;
  /** u16 */
  NumberOfKeysTotal: number;
  /** u32 */
  InputDataQueueLength: number;
  /** Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_TYPEMATIC_PARAMETERS */
  KeyRepeatMinimum: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_TYPEMATIC_PARAMETERS */
  KeyRepeatMaximum: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKEYBOARD_ATTRIBUTES = 40;

export function allocKEYBOARD_ATTRIBUTES(data?: Partial<KEYBOARD_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyboardIdentifier !== undefined) view.setBigUint64(0, data.KeyboardIdentifier === null ? 0n : util.toBigInt(util.toPointer(data.KeyboardIdentifier)), true);
  // 0x08: u16
  if (data?.KeyboardMode !== undefined) view.setUint16(8, Number(data.KeyboardMode), true);
  // 0x0a: u16
  if (data?.NumberOfFunctionKeys !== undefined) view.setUint16(10, Number(data.NumberOfFunctionKeys), true);
  // 0x0c: u16
  if (data?.NumberOfIndicators !== undefined) view.setUint16(12, Number(data.NumberOfIndicators), true);
  // 0x0e: u16
  if (data?.NumberOfKeysTotal !== undefined) view.setUint16(14, Number(data.NumberOfKeysTotal), true);
  // 0x10: u32
  if (data?.InputDataQueueLength !== undefined) view.setUint32(16, Number(data.InputDataQueueLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.KeyRepeatMinimum !== undefined) view.setBigUint64(24, data.KeyRepeatMinimum === null ? 0n : util.toBigInt(util.toPointer(data.KeyRepeatMinimum)), true);
  // 0x20: pointer
  if (data?.KeyRepeatMaximum !== undefined) view.setBigUint64(32, data.KeyRepeatMaximum === null ? 0n : util.toBigInt(util.toPointer(data.KeyRepeatMaximum)), true);
  return buf;
}

export class KEYBOARD_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyboardIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get KeyboardMode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get NumberOfFunctionKeys(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get NumberOfIndicators(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get NumberOfKeysTotal(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get InputDataQueueLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get KeyRepeatMinimum(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get KeyRepeatMaximum(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyboardIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set KeyboardMode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set NumberOfFunctionKeys(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set NumberOfIndicators(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set NumberOfKeysTotal(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set InputDataQueueLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set KeyRepeatMinimum(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set KeyRepeatMaximum(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_EXTENDED_ATTRIBUTES (size: 8)
 */
export interface KEYBOARD_EXTENDED_ATTRIBUTES {
  /** u8 */
  Version: number;
  /** u8 */
  FormFactor: number;
  /** u8 */
  KeyType: number;
  /** u8 */
  PhysicalLayout: number;
  /** u8 */
  VendorSpecificPhysicalLayout: number;
  /** u8 */
  IETFLanguageTagIndex: number;
  /** u8 */
  ImplementedInputAssistControls: number;
}

export const sizeofKEYBOARD_EXTENDED_ATTRIBUTES = 8;

export function allocKEYBOARD_EXTENDED_ATTRIBUTES(data?: Partial<KEYBOARD_EXTENDED_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_EXTENDED_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Version !== undefined) view.setUint8(0, Number(data.Version));
  // 0x01: u8
  if (data?.FormFactor !== undefined) view.setUint8(1, Number(data.FormFactor));
  // 0x02: u8
  if (data?.KeyType !== undefined) view.setUint8(2, Number(data.KeyType));
  // 0x03: u8
  if (data?.PhysicalLayout !== undefined) view.setUint8(3, Number(data.PhysicalLayout));
  // 0x04: u8
  if (data?.VendorSpecificPhysicalLayout !== undefined) view.setUint8(4, Number(data.VendorSpecificPhysicalLayout));
  // 0x05: u8
  if (data?.IETFLanguageTagIndex !== undefined) view.setUint8(5, Number(data.IETFLanguageTagIndex));
  // 0x06: u8
  if (data?.ImplementedInputAssistControls !== undefined) view.setUint8(6, Number(data.ImplementedInputAssistControls));
  // 0x07: pad1
  return buf;
}

export class KEYBOARD_EXTENDED_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Version(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get FormFactor(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get KeyType(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get PhysicalLayout(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get VendorSpecificPhysicalLayout(): number {
    return this.view.getUint8(4);
  }

  // 0x05: u8
  get IETFLanguageTagIndex(): number {
    return this.view.getUint8(5);
  }

  // 0x06: u8
  get ImplementedInputAssistControls(): number {
    return this.view.getUint8(6);
  }

  // 0x07: pad1

  // 0x00: u8
  set Version(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set FormFactor(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set KeyType(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set PhysicalLayout(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set VendorSpecificPhysicalLayout(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: u8
  set IETFLanguageTagIndex(value: number) {
    this.view.setUint8(5, value);
  }

  // 0x06: u8
  set ImplementedInputAssistControls(value: number) {
    this.view.setUint8(6, value);
  }

  // 0x07: pad1
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_INDICATOR_PARAMETERS (size: 8)
 */
export interface KEYBOARD_INDICATOR_PARAMETERS {
  /** u16 */
  UnitId: number;
  /** u16 */
  LedFlags: number;
}

export const sizeofKEYBOARD_INDICATOR_PARAMETERS = 8;

export function allocKEYBOARD_INDICATOR_PARAMETERS(data?: Partial<KEYBOARD_INDICATOR_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_INDICATOR_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: u16
  if (data?.LedFlags !== undefined) view.setUint16(2, Number(data.LedFlags), true);
  // 0x04: pad4
  return buf;
}

export class KEYBOARD_INDICATOR_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LedFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LedFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.INDICATOR_LIST (size: 8)
 */
export interface INDICATOR_LIST {
  /** u16 */
  MakeCode: number;
  /** u16 */
  IndicatorFlags: number;
}

export const sizeofINDICATOR_LIST = 8;

export function allocINDICATOR_LIST(data?: Partial<INDICATOR_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofINDICATOR_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MakeCode !== undefined) view.setUint16(0, Number(data.MakeCode), true);
  // 0x02: u16
  if (data?.IndicatorFlags !== undefined) view.setUint16(2, Number(data.IndicatorFlags), true);
  // 0x04: pad4
  return buf;
}

export class INDICATOR_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MakeCode(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get IndicatorFlags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set MakeCode(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set IndicatorFlags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_INDICATOR_TRANSLATION (size: 16)
 */
export interface KEYBOARD_INDICATOR_TRANSLATION {
  /** u16 */
  NumberOfIndicatorKeys: number;
  /** array */
  IndicatorList: Deno.PointerValue | null;
}

export const sizeofKEYBOARD_INDICATOR_TRANSLATION = 16;

export function allocKEYBOARD_INDICATOR_TRANSLATION(data?: Partial<KEYBOARD_INDICATOR_TRANSLATION>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_INDICATOR_TRANSLATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NumberOfIndicatorKeys !== undefined) view.setUint16(0, Number(data.NumberOfIndicatorKeys), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.IndicatorList !== undefined) view.setBigUint64(8, data.IndicatorList === null ? 0n : util.toBigInt(util.toPointer(data.IndicatorList)), true);
  return buf;
}

export class KEYBOARD_INDICATOR_TRANSLATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get NumberOfIndicatorKeys(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get IndicatorList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set NumberOfIndicatorKeys(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set IndicatorList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_UNIT_ID_PARAMETER (size: 8)
 */
export interface KEYBOARD_UNIT_ID_PARAMETER {
  /** u16 */
  UnitId: number;
}

export const sizeofKEYBOARD_UNIT_ID_PARAMETER = 8;

export function allocKEYBOARD_UNIT_ID_PARAMETER(data?: Partial<KEYBOARD_UNIT_ID_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_UNIT_ID_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: pad6
  return buf;
}

export class KEYBOARD_UNIT_ID_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.KEYBOARD_IME_STATUS (size: 16)
 */
export interface KEYBOARD_IME_STATUS {
  /** u16 */
  UnitId: number;
  /** u32 */
  ImeOpen: number;
  /** u32 */
  ImeConvMode: number;
}

export const sizeofKEYBOARD_IME_STATUS = 16;

export function allocKEYBOARD_IME_STATUS(data?: Partial<KEYBOARD_IME_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBOARD_IME_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: u32
  if (data?.ImeOpen !== undefined) view.setUint32(2, Number(data.ImeOpen), true);
  // 0x06: u32
  if (data?.ImeConvMode !== undefined) view.setUint32(6, Number(data.ImeConvMode), true);
  // 0x0a: pad6
  return buf;
}

export class KEYBOARD_IME_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u32
  get ImeOpen(): number {
    return this.view.getUint32(2, true);
  }

  // 0x06: u32
  get ImeConvMode(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u32
  set ImeOpen(value: number) {
    this.view.setUint32(2, value, true);
  }

  // 0x06: u32
  set ImeConvMode(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.MOUSE_INPUT_DATA (size: 32)
 */
export interface MOUSE_INPUT_DATA {
  /** u16 */
  UnitId: number;
  /** u16 */
  Flags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RawButtons: number;
  /** i32 */
  LastX: number;
  /** i32 */
  LastY: number;
  /** u32 */
  ExtraInformation: number;
}

export const sizeofMOUSE_INPUT_DATA = 32;

export function allocMOUSE_INPUT_DATA(data?: Partial<MOUSE_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSE_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.RawButtons !== undefined) view.setUint32(16, Number(data.RawButtons), true);
  // 0x14: i32
  if (data?.LastX !== undefined) view.setInt32(20, Number(data.LastX), true);
  // 0x18: i32
  if (data?.LastY !== undefined) view.setInt32(24, Number(data.LastY), true);
  // 0x1c: u32
  if (data?.ExtraInformation !== undefined) view.setUint32(28, Number(data.ExtraInformation), true);
  return buf;
}

export class MOUSE_INPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get RawButtons(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get LastX(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get LastY(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get ExtraInformation(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set RawButtons(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set LastX(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set LastY(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set ExtraInformation(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.MOUSE_ATTRIBUTES (size: 16)
 */
export interface MOUSE_ATTRIBUTES {
  /** u16 */
  MouseIdentifier: number;
  /** u16 */
  NumberOfButtons: number;
  /** u16 */
  SampleRate: number;
  /** u32 */
  InputDataQueueLength: number;
}

export const sizeofMOUSE_ATTRIBUTES = 16;

export function allocMOUSE_ATTRIBUTES(data?: Partial<MOUSE_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSE_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MouseIdentifier !== undefined) view.setUint16(0, Number(data.MouseIdentifier), true);
  // 0x02: u16
  if (data?.NumberOfButtons !== undefined) view.setUint16(2, Number(data.NumberOfButtons), true);
  // 0x04: u16
  if (data?.SampleRate !== undefined) view.setUint16(4, Number(data.SampleRate), true);
  // 0x06: u32
  if (data?.InputDataQueueLength !== undefined) view.setUint32(6, Number(data.InputDataQueueLength), true);
  // 0x0a: pad6
  return buf;
}

export class MOUSE_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MouseIdentifier(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get NumberOfButtons(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get SampleRate(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get InputDataQueueLength(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x00: u16
  set MouseIdentifier(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set NumberOfButtons(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set SampleRate(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set InputDataQueueLength(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.MOUSE_UNIT_ID_PARAMETER (size: 8)
 */
export interface MOUSE_UNIT_ID_PARAMETER {
  /** u16 */
  UnitId: number;
}

export const sizeofMOUSE_UNIT_ID_PARAMETER = 8;

export function allocMOUSE_UNIT_ID_PARAMETER(data?: Partial<MOUSE_UNIT_ID_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSE_UNIT_ID_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitId !== undefined) view.setUint16(0, Number(data.UnitId), true);
  // 0x02: pad6
  return buf;
}

export class MOUSE_UNIT_ID_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set UnitId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.USAGE_AND_PAGE (size: 8)
 */
export interface USAGE_AND_PAGE {
  /** u16 */
  Usage: number;
  /** u16 */
  UsagePage: number;
}

export const sizeofUSAGE_AND_PAGE = 8;

export function allocUSAGE_AND_PAGE(data?: Partial<USAGE_AND_PAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUSAGE_AND_PAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Usage !== undefined) view.setUint16(0, Number(data.Usage), true);
  // 0x02: u16
  if (data?.UsagePage !== undefined) view.setUint16(2, Number(data.UsagePage), true);
  // 0x04: pad4
  return buf;
}

export class USAGE_AND_PAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Usage(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get UsagePage(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set Usage(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set UsagePage(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_BUTTON_CAPS (size: 80)
 */
export interface HIDP_BUTTON_CAPS {
  /** u16 */
  UsagePage: number;
  /** u8 */
  ReportID: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsAlias: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  BitField: number;
  /** u16 */
  LinkCollection: number;
  /** u16 */
  LinkUsage: number;
  /** u16 */
  LinkUsagePage: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsStringRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsDesignatorRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsAbsolute: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ReportCount: number;
  /** u16 */
  Reserved2: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHIDP_BUTTON_CAPS = 80;

export function allocHIDP_BUTTON_CAPS(data?: Partial<HIDP_BUTTON_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_BUTTON_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UsagePage !== undefined) view.setUint16(0, Number(data.UsagePage), true);
  // 0x02: u8
  if (data?.ReportID !== undefined) view.setUint8(2, Number(data.ReportID));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.IsAlias !== undefined) view.setBigUint64(8, data.IsAlias === null ? 0n : util.toBigInt(util.toPointer(data.IsAlias)), true);
  // 0x10: u16
  if (data?.BitField !== undefined) view.setUint16(16, Number(data.BitField), true);
  // 0x12: u16
  if (data?.LinkCollection !== undefined) view.setUint16(18, Number(data.LinkCollection), true);
  // 0x14: u16
  if (data?.LinkUsage !== undefined) view.setUint16(20, Number(data.LinkUsage), true);
  // 0x16: u16
  if (data?.LinkUsagePage !== undefined) view.setUint16(22, Number(data.LinkUsagePage), true);
  // 0x18: pointer
  if (data?.IsRange !== undefined) view.setBigUint64(24, data.IsRange === null ? 0n : util.toBigInt(util.toPointer(data.IsRange)), true);
  // 0x20: pointer
  if (data?.IsStringRange !== undefined) view.setBigUint64(32, data.IsStringRange === null ? 0n : util.toBigInt(util.toPointer(data.IsStringRange)), true);
  // 0x28: pointer
  if (data?.IsDesignatorRange !== undefined) view.setBigUint64(40, data.IsDesignatorRange === null ? 0n : util.toBigInt(util.toPointer(data.IsDesignatorRange)), true);
  // 0x30: pointer
  if (data?.IsAbsolute !== undefined) view.setBigUint64(48, data.IsAbsolute === null ? 0n : util.toBigInt(util.toPointer(data.IsAbsolute)), true);
  // 0x38: u16
  if (data?.ReportCount !== undefined) view.setUint16(56, Number(data.ReportCount), true);
  // 0x3a: u16
  if (data?.Reserved2 !== undefined) view.setUint16(58, Number(data.Reserved2), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(64, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x48: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(72, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class HIDP_BUTTON_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UsagePage(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ReportID(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get IsAlias(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get BitField(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get LinkCollection(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get LinkUsage(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get LinkUsagePage(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: pointer
  get IsRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get IsStringRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get IsDesignatorRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get IsAbsolute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get ReportCount(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get Reserved2(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set UsagePage(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ReportID(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set IsAlias(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set BitField(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set LinkCollection(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set LinkUsage(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set LinkUsagePage(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: pointer
  set IsRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set IsStringRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set IsDesignatorRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set IsAbsolute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set ReportCount(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set Reserved2(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_VALUE_CAPS (size: 112)
 */
export interface HIDP_VALUE_CAPS {
  /** u16 */
  UsagePage: number;
  /** u8 */
  ReportID: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsAlias: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  BitField: number;
  /** u16 */
  LinkCollection: number;
  /** u16 */
  LinkUsage: number;
  /** u16 */
  LinkUsagePage: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsStringRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsDesignatorRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IsAbsolute: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasNull: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Reserved: number;
  /** u16 */
  BitSize: number;
  /** u16 */
  ReportCount: number;
  /** array */
  Reserved2: Deno.PointerValue | null;
  /** u32 */
  UnitsExp: number;
  /** u32 */
  Units: number;
  /** i32 */
  LogicalMin: number;
  /** i32 */
  LogicalMax: number;
  /** i32 */
  PhysicalMin: number;
  /** i32 */
  PhysicalMax: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHIDP_VALUE_CAPS = 112;

export function allocHIDP_VALUE_CAPS(data?: Partial<HIDP_VALUE_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_VALUE_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UsagePage !== undefined) view.setUint16(0, Number(data.UsagePage), true);
  // 0x02: u8
  if (data?.ReportID !== undefined) view.setUint8(2, Number(data.ReportID));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.IsAlias !== undefined) view.setBigUint64(8, data.IsAlias === null ? 0n : util.toBigInt(util.toPointer(data.IsAlias)), true);
  // 0x10: u16
  if (data?.BitField !== undefined) view.setUint16(16, Number(data.BitField), true);
  // 0x12: u16
  if (data?.LinkCollection !== undefined) view.setUint16(18, Number(data.LinkCollection), true);
  // 0x14: u16
  if (data?.LinkUsage !== undefined) view.setUint16(20, Number(data.LinkUsage), true);
  // 0x16: u16
  if (data?.LinkUsagePage !== undefined) view.setUint16(22, Number(data.LinkUsagePage), true);
  // 0x18: pointer
  if (data?.IsRange !== undefined) view.setBigUint64(24, data.IsRange === null ? 0n : util.toBigInt(util.toPointer(data.IsRange)), true);
  // 0x20: pointer
  if (data?.IsStringRange !== undefined) view.setBigUint64(32, data.IsStringRange === null ? 0n : util.toBigInt(util.toPointer(data.IsStringRange)), true);
  // 0x28: pointer
  if (data?.IsDesignatorRange !== undefined) view.setBigUint64(40, data.IsDesignatorRange === null ? 0n : util.toBigInt(util.toPointer(data.IsDesignatorRange)), true);
  // 0x30: pointer
  if (data?.IsAbsolute !== undefined) view.setBigUint64(48, data.IsAbsolute === null ? 0n : util.toBigInt(util.toPointer(data.IsAbsolute)), true);
  // 0x38: pointer
  if (data?.HasNull !== undefined) view.setBigUint64(56, data.HasNull === null ? 0n : util.toBigInt(util.toPointer(data.HasNull)), true);
  // 0x40: u8
  if (data?.Reserved !== undefined) view.setUint8(64, Number(data.Reserved));
  // 0x41: u16
  if (data?.BitSize !== undefined) view.setUint16(65, Number(data.BitSize), true);
  // 0x43: u16
  if (data?.ReportCount !== undefined) view.setUint16(67, Number(data.ReportCount), true);
  // 0x45: pad3
  // 0x48: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(72, data.Reserved2 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved2)), true);
  // 0x50: u32
  if (data?.UnitsExp !== undefined) view.setUint32(80, Number(data.UnitsExp), true);
  // 0x54: u32
  if (data?.Units !== undefined) view.setUint32(84, Number(data.Units), true);
  // 0x58: i32
  if (data?.LogicalMin !== undefined) view.setInt32(88, Number(data.LogicalMin), true);
  // 0x5c: i32
  if (data?.LogicalMax !== undefined) view.setInt32(92, Number(data.LogicalMax), true);
  // 0x60: i32
  if (data?.PhysicalMin !== undefined) view.setInt32(96, Number(data.PhysicalMin), true);
  // 0x64: i32
  if (data?.PhysicalMax !== undefined) view.setInt32(100, Number(data.PhysicalMax), true);
  // 0x68: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(104, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class HIDP_VALUE_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UsagePage(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get ReportID(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get IsAlias(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get BitField(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get LinkCollection(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get LinkUsage(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get LinkUsagePage(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: pointer
  get IsRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get IsStringRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get IsDesignatorRange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get IsAbsolute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get HasNull(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u8
  get Reserved(): number {
    return this.view.getUint8(64);
  }

  // 0x41: u16
  get BitSize(): number {
    return this.view.getUint16(65, true);
  }

  // 0x43: u16
  get ReportCount(): number {
    return this.view.getUint16(67, true);
  }

  // 0x45: pad3

  // 0x48: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get UnitsExp(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get Units(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: i32
  get LogicalMin(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: i32
  get LogicalMax(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get PhysicalMin(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: i32
  get PhysicalMax(): number {
    return this.view.getInt32(100, true);
  }

  // 0x68: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set UsagePage(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set ReportID(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set IsAlias(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set BitField(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set LinkCollection(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set LinkUsage(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set LinkUsagePage(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: pointer
  set IsRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set IsStringRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set IsDesignatorRange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set IsAbsolute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set HasNull(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u8
  set Reserved(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: u16
  set BitSize(value: number) {
    this.view.setUint16(65, value, true);
  }

  // 0x43: u16
  set ReportCount(value: number) {
    this.view.setUint16(67, value, true);
  }

  // 0x45: pad3

  // 0x48: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set UnitsExp(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set Units(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: i32
  set LogicalMin(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: i32
  set LogicalMax(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set PhysicalMin(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: i32
  set PhysicalMax(value: number) {
    this.view.setInt32(100, value, true);
  }

  // 0x68: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_LINK_COLLECTION_NODE (size: 24)
 */
export interface HIDP_LINK_COLLECTION_NODE {
  /** u16 */
  LinkUsage: number;
  /** u16 */
  LinkUsagePage: number;
  /** u16 */
  Parent: number;
  /** u16 */
  NumberOfChildren: number;
  /** u16 */
  NextSibling: number;
  /** u16 */
  FirstChild: number;
  /** u32 */
  _bitfield: number;
  /** ptr */
  UserContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHIDP_LINK_COLLECTION_NODE = 24;

export function allocHIDP_LINK_COLLECTION_NODE(data?: Partial<HIDP_LINK_COLLECTION_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_LINK_COLLECTION_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.LinkUsage !== undefined) view.setUint16(0, Number(data.LinkUsage), true);
  // 0x02: u16
  if (data?.LinkUsagePage !== undefined) view.setUint16(2, Number(data.LinkUsagePage), true);
  // 0x04: u16
  if (data?.Parent !== undefined) view.setUint16(4, Number(data.Parent), true);
  // 0x06: u16
  if (data?.NumberOfChildren !== undefined) view.setUint16(6, Number(data.NumberOfChildren), true);
  // 0x08: u16
  if (data?.NextSibling !== undefined) view.setUint16(8, Number(data.NextSibling), true);
  // 0x0a: u16
  if (data?.FirstChild !== undefined) view.setUint16(10, Number(data.FirstChild), true);
  // 0x0c: u32
  if (data?._bitfield !== undefined) view.setUint32(12, Number(data._bitfield), true);
  // 0x10: pointer
  if (data?.UserContext !== undefined) view.setBigUint64(16, data.UserContext === null ? 0n : util.toBigInt(util.toPointer(data.UserContext)), true);
  return buf;
}

export class HIDP_LINK_COLLECTION_NODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get LinkUsage(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LinkUsagePage(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Parent(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get NumberOfChildren(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get NextSibling(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get FirstChild(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get _bitfield(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get UserContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set LinkUsage(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LinkUsagePage(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Parent(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set NumberOfChildren(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set NextSibling(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set FirstChild(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set _bitfield(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set UserContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_CAPS (size: 48)
 */
export interface HIDP_CAPS {
  /** u16 */
  Usage: number;
  /** u16 */
  UsagePage: number;
  /** u16 */
  InputReportByteLength: number;
  /** u16 */
  OutputReportByteLength: number;
  /** u16 */
  FeatureReportByteLength: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u16 */
  NumberLinkCollectionNodes: number;
  /** u16 */
  NumberInputButtonCaps: number;
  /** u16 */
  NumberInputValueCaps: number;
  /** u16 */
  NumberInputDataIndices: number;
  /** u16 */
  NumberOutputButtonCaps: number;
  /** u16 */
  NumberOutputValueCaps: number;
  /** u16 */
  NumberOutputDataIndices: number;
  /** u16 */
  NumberFeatureButtonCaps: number;
  /** u16 */
  NumberFeatureValueCaps: number;
  /** u16 */
  NumberFeatureDataIndices: number;
}

export const sizeofHIDP_CAPS = 48;

export function allocHIDP_CAPS(data?: Partial<HIDP_CAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_CAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Usage !== undefined) view.setUint16(0, Number(data.Usage), true);
  // 0x02: u16
  if (data?.UsagePage !== undefined) view.setUint16(2, Number(data.UsagePage), true);
  // 0x04: u16
  if (data?.InputReportByteLength !== undefined) view.setUint16(4, Number(data.InputReportByteLength), true);
  // 0x06: u16
  if (data?.OutputReportByteLength !== undefined) view.setUint16(6, Number(data.OutputReportByteLength), true);
  // 0x08: u16
  if (data?.FeatureReportByteLength !== undefined) view.setUint16(8, Number(data.FeatureReportByteLength), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x18: u16
  if (data?.NumberLinkCollectionNodes !== undefined) view.setUint16(24, Number(data.NumberLinkCollectionNodes), true);
  // 0x1a: u16
  if (data?.NumberInputButtonCaps !== undefined) view.setUint16(26, Number(data.NumberInputButtonCaps), true);
  // 0x1c: u16
  if (data?.NumberInputValueCaps !== undefined) view.setUint16(28, Number(data.NumberInputValueCaps), true);
  // 0x1e: u16
  if (data?.NumberInputDataIndices !== undefined) view.setUint16(30, Number(data.NumberInputDataIndices), true);
  // 0x20: u16
  if (data?.NumberOutputButtonCaps !== undefined) view.setUint16(32, Number(data.NumberOutputButtonCaps), true);
  // 0x22: u16
  if (data?.NumberOutputValueCaps !== undefined) view.setUint16(34, Number(data.NumberOutputValueCaps), true);
  // 0x24: u16
  if (data?.NumberOutputDataIndices !== undefined) view.setUint16(36, Number(data.NumberOutputDataIndices), true);
  // 0x26: u16
  if (data?.NumberFeatureButtonCaps !== undefined) view.setUint16(38, Number(data.NumberFeatureButtonCaps), true);
  // 0x28: u16
  if (data?.NumberFeatureValueCaps !== undefined) view.setUint16(40, Number(data.NumberFeatureValueCaps), true);
  // 0x2a: u16
  if (data?.NumberFeatureDataIndices !== undefined) view.setUint16(42, Number(data.NumberFeatureDataIndices), true);
  // 0x2c: pad4
  return buf;
}

export class HIDP_CAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Usage(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get UsagePage(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get InputReportByteLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get OutputReportByteLength(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get FeatureReportByteLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get NumberLinkCollectionNodes(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get NumberInputButtonCaps(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get NumberInputValueCaps(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get NumberInputDataIndices(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u16
  get NumberOutputButtonCaps(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get NumberOutputValueCaps(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: u16
  get NumberOutputDataIndices(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get NumberFeatureButtonCaps(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: u16
  get NumberFeatureValueCaps(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get NumberFeatureDataIndices(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: pad4

  // 0x00: u16
  set Usage(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set UsagePage(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set InputReportByteLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set OutputReportByteLength(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set FeatureReportByteLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set NumberLinkCollectionNodes(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set NumberInputButtonCaps(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set NumberInputValueCaps(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set NumberInputDataIndices(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u16
  set NumberOutputButtonCaps(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set NumberOutputValueCaps(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: u16
  set NumberOutputDataIndices(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set NumberFeatureButtonCaps(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: u16
  set NumberFeatureValueCaps(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set NumberFeatureDataIndices(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_DATA (size: 16)
 */
export interface HIDP_DATA {
  /** u16 */
  DataIndex: number;
  /** u16 */
  Reserved: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHIDP_DATA = 16;

export function allocHIDP_DATA(data?: Partial<HIDP_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.DataIndex !== undefined) view.setUint16(0, Number(data.DataIndex), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class HIDP_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get DataIndex(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set DataIndex(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_UNKNOWN_TOKEN (size: 24)
 */
export interface HIDP_UNKNOWN_TOKEN {
  /** u8 */
  Token: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** u32 */
  BitField: number;
}

export const sizeofHIDP_UNKNOWN_TOKEN = 24;

export function allocHIDP_UNKNOWN_TOKEN(data?: Partial<HIDP_UNKNOWN_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_UNKNOWN_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Token !== undefined) view.setUint8(0, Number(data.Token));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x10: u32
  if (data?.BitField !== undefined) view.setUint32(16, Number(data.BitField), true);
  // 0x14: pad4
  return buf;
}

export class HIDP_UNKNOWN_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Token(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BitField(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u8
  set Token(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set BitField(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_EXTENDED_ATTRIBUTES (size: 32)
 */
export interface HIDP_EXTENDED_ATTRIBUTES {
  /** u8 */
  NumGlobalUnknowns: number;
  /** array */
  Reserved: Deno.PointerValue | null;
  /** ptr */
  GlobalUnknowns: Deno.PointerValue | Uint8Array | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofHIDP_EXTENDED_ATTRIBUTES = 32;

export function allocHIDP_EXTENDED_ATTRIBUTES(data?: Partial<HIDP_EXTENDED_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_EXTENDED_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumGlobalUnknowns !== undefined) view.setUint8(0, Number(data.NumGlobalUnknowns));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : util.toBigInt(util.toPointer(data.Reserved)), true);
  // 0x10: pointer
  if (data?.GlobalUnknowns !== undefined) view.setBigUint64(16, data.GlobalUnknowns === null ? 0n : util.toBigInt(util.toPointer(data.GlobalUnknowns)), true);
  // 0x18: pointer
  if (data?.Data !== undefined) view.setBigUint64(24, data.Data === null ? 0n : util.toBigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class HIDP_EXTENDED_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NumGlobalUnknowns(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get GlobalUnknowns(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set NumGlobalUnknowns(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set GlobalUnknowns(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_BUTTON_ARRAY_DATA (size: 16)
 */
export interface HIDP_BUTTON_ARRAY_DATA {
  /** u16 */
  ArrayIndex: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  On: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHIDP_BUTTON_ARRAY_DATA = 16;

export function allocHIDP_BUTTON_ARRAY_DATA(data?: Partial<HIDP_BUTTON_ARRAY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_BUTTON_ARRAY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ArrayIndex !== undefined) view.setUint16(0, Number(data.ArrayIndex), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.On !== undefined) view.setBigUint64(8, data.On === null ? 0n : util.toBigInt(util.toPointer(data.On)), true);
  return buf;
}

export class HIDP_BUTTON_ARRAY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ArrayIndex(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get On(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ArrayIndex(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set On(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDP_KEYBOARD_MODIFIER_STATE (size: 8)
 */
export interface HIDP_KEYBOARD_MODIFIER_STATE {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHIDP_KEYBOARD_MODIFIER_STATE = 8;

export function allocHIDP_KEYBOARD_MODIFIER_STATE(data?: Partial<HIDP_KEYBOARD_MODIFIER_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDP_KEYBOARD_MODIFIER_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class HIDP_KEYBOARD_MODIFIER_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDD_CONFIGURATION (size: 16)
 */
export interface HIDD_CONFIGURATION {
  /** ptr */
  cookie: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  size: number;
  /** u32 */
  RingBufferSize: number;
}

export const sizeofHIDD_CONFIGURATION = 16;

export function allocHIDD_CONFIGURATION(data?: Partial<HIDD_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDD_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cookie !== undefined) view.setBigUint64(0, data.cookie === null ? 0n : util.toBigInt(util.toPointer(data.cookie)), true);
  // 0x08: u32
  if (data?.size !== undefined) view.setUint32(8, Number(data.size), true);
  // 0x0c: u32
  if (data?.RingBufferSize !== undefined) view.setUint32(12, Number(data.RingBufferSize), true);
  return buf;
}

export class HIDD_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get cookie(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get size(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RingBufferSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set cookie(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set size(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RingBufferSize(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HIDD_ATTRIBUTES (size: 16)
 */
export interface HIDD_ATTRIBUTES {
  /** u32 */
  Size: number;
  /** u16 */
  VendorID: number;
  /** u16 */
  ProductID: number;
  /** u16 */
  VersionNumber: number;
}

export const sizeofHIDD_ATTRIBUTES = 16;

export function allocHIDD_ATTRIBUTES(data?: Partial<HIDD_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofHIDD_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u16
  if (data?.VendorID !== undefined) view.setUint16(4, Number(data.VendorID), true);
  // 0x06: u16
  if (data?.ProductID !== undefined) view.setUint16(6, Number(data.ProductID), true);
  // 0x08: u16
  if (data?.VersionNumber !== undefined) view.setUint16(8, Number(data.VersionNumber), true);
  // 0x0a: pad6
  return buf;
}

export class HIDD_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get VendorID(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get ProductID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get VersionNumber(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set VendorID(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set ProductID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set VersionNumber(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HID_XFER_PACKET (size: 16)
 */
export interface HID_XFER_PACKET {
  /** ptr */
  reportBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  reportBufferLen: number;
  /** u8 */
  reportId: number;
}

export const sizeofHID_XFER_PACKET = 16;

export function allocHID_XFER_PACKET(data?: Partial<HID_XFER_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofHID_XFER_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.reportBuffer !== undefined) view.setBigUint64(0, data.reportBuffer === null ? 0n : util.toBigInt(util.toPointer(data.reportBuffer)), true);
  // 0x08: u32
  if (data?.reportBufferLen !== undefined) view.setUint32(8, Number(data.reportBufferLen), true);
  // 0x0c: u8
  if (data?.reportId !== undefined) view.setUint8(12, Number(data.reportId));
  // 0x0d: pad3
  return buf;
}

export class HID_XFER_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get reportBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get reportBufferLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u8
  get reportId(): number {
    return this.view.getUint8(12);
  }

  // 0x0d: pad3

  // 0x00: pointer
  set reportBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set reportBufferLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u8
  set reportId(value: number) {
    this.view.setUint8(12, value);
  }

  // 0x0d: pad3
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HID_COLLECTION_INFORMATION (size: 32)
 */
export interface HID_COLLECTION_INFORMATION {
  /** u32 */
  DescriptorSize: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  Polled: Uint8Array | Deno.PointerValue | null;
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** u16 */
  VendorID: number;
  /** u16 */
  ProductID: number;
  /** u16 */
  VersionNumber: number;
}

export const sizeofHID_COLLECTION_INFORMATION = 32;

export function allocHID_COLLECTION_INFORMATION(data?: Partial<HID_COLLECTION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofHID_COLLECTION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DescriptorSize !== undefined) view.setUint32(0, Number(data.DescriptorSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Polled !== undefined) view.setBigUint64(8, data.Polled === null ? 0n : util.toBigInt(util.toPointer(data.Polled)), true);
  // 0x10: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(16, data.Reserved1 === null ? 0n : util.toBigInt(util.toPointer(data.Reserved1)), true);
  // 0x18: u16
  if (data?.VendorID !== undefined) view.setUint16(24, Number(data.VendorID), true);
  // 0x1a: u16
  if (data?.ProductID !== undefined) view.setUint16(26, Number(data.ProductID), true);
  // 0x1c: u16
  if (data?.VersionNumber !== undefined) view.setUint16(28, Number(data.VersionNumber), true);
  // 0x1e: pad2
  return buf;
}

export class HID_COLLECTION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DescriptorSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Polled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get VendorID(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get ProductID(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get VersionNumber(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: pad2

  // 0x00: u32
  set DescriptorSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Polled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set VendorID(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set ProductID(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set VersionNumber(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: pad2
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.HID_DRIVER_CONFIG (size: 8)
 */
export interface HID_DRIVER_CONFIG {
  /** u32 */
  Size: number;
  /** u32 */
  RingBufferSize: number;
}

export const sizeofHID_DRIVER_CONFIG = 8;

export function allocHID_DRIVER_CONFIG(data?: Partial<HID_DRIVER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofHID_DRIVER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.RingBufferSize !== undefined) view.setUint32(4, Number(data.RingBufferSize), true);
  return buf;
}

export class HID_DRIVER_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get RingBufferSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set RingBufferSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Devices.HumanInterfaceDevice.INPUT_BUTTON_ENABLE_INFO (size: 16)
 */
export interface INPUT_BUTTON_ENABLE_INFO {
  /** Windows.Win32.Devices.HumanInterfaceDevice.GPIOBUTTONS_BUTTON_TYPE */
  ButtonType: GPIOBUTTONS_BUTTON_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  Enabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINPUT_BUTTON_ENABLE_INFO = 16;

export function allocINPUT_BUTTON_ENABLE_INFO(data?: Partial<INPUT_BUTTON_ENABLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_BUTTON_ENABLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ButtonType !== undefined) view.setInt32(0, Number(data.ButtonType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Enabled !== undefined) view.setBigUint64(8, data.Enabled === null ? 0n : util.toBigInt(util.toPointer(data.Enabled)), true);
  return buf;
}

export class INPUT_BUTTON_ENABLE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ButtonType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Enabled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ButtonType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Enabled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

export type NTSTATUS = number;

export type HANDLE = number | bigint;

// Native Libraries

try {
  var libDINPUT8_dll = Deno.dlopen("DINPUT8.dll", {
    DirectInput8Create: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWINMM_dll = Deno.dlopen("WINMM.dll", {
    joyConfigChanged: {
      parameters: ["u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libHID_dll = Deno.dlopen("HID.dll", {
    HidP_GetCaps: {
      parameters: ["isize", "pointer"],
      result: "pointer",
    },
    HidP_GetLinkCollectionNodes: {
      parameters: ["pointer", "pointer", "isize"],
      result: "pointer",
    },
    HidP_GetSpecificButtonCaps: {
      parameters: ["i32", "u16", "u16", "u16", "pointer", "pointer", "isize"],
      result: "pointer",
    },
    HidP_GetButtonCaps: {
      parameters: ["i32", "pointer", "pointer", "isize"],
      result: "pointer",
    },
    HidP_GetSpecificValueCaps: {
      parameters: ["i32", "u16", "u16", "u16", "pointer", "pointer", "isize"],
      result: "pointer",
    },
    HidP_GetValueCaps: {
      parameters: ["i32", "pointer", "pointer", "isize"],
      result: "pointer",
    },
    HidP_GetExtendedAttributes: {
      parameters: ["i32", "u16", "isize", "pointer", "pointer"],
      result: "pointer",
    },
    HidP_InitializeReportForID: {
      parameters: ["i32", "u8", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_SetData: {
      parameters: ["i32", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_GetData: {
      parameters: ["i32", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_MaxDataListLength: {
      parameters: ["i32", "isize"],
      result: "u32",
    },
    HidP_SetUsages: {
      parameters: ["i32", "u16", "u16", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_UnsetUsages: {
      parameters: ["i32", "u16", "u16", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_GetUsages: {
      parameters: ["i32", "u16", "u16", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_GetUsagesEx: {
      parameters: ["i32", "u16", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_MaxUsageListLength: {
      parameters: ["i32", "u16", "isize"],
      result: "u32",
    },
    HidP_SetUsageValue: {
      parameters: ["i32", "u16", "u16", "u16", "u32", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_SetScaledUsageValue: {
      parameters: ["i32", "u16", "u16", "u16", "i32", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_SetUsageValueArray: {
      parameters: ["i32", "u16", "u16", "u16", "buffer", "u16", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_GetUsageValue: {
      parameters: ["i32", "u16", "u16", "u16", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_GetScaledUsageValue: {
      parameters: ["i32", "u16", "u16", "u16", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_GetUsageValueArray: {
      parameters: ["i32", "u16", "u16", "u16", "buffer", "u16", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_UsageListDifference: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidP_GetButtonArray: {
      parameters: ["i32", "u16", "u16", "u16", "pointer", "pointer", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_SetButtonArray: {
      parameters: ["i32", "u16", "u16", "u16", "pointer", "u16", "isize", "buffer", "u32"],
      result: "pointer",
    },
    HidP_TranslateUsagesToI8042ScanCodes: {
      parameters: ["pointer", "u32", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HidD_GetAttributes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HidD_GetHidGuid: {
      parameters: ["pointer"],
      result: "void",
    },
    HidD_GetPreparsedData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HidD_FreePreparsedData: {
      parameters: ["isize"],
      result: "pointer",
    },
    HidD_FlushQueue: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HidD_GetConfiguration: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_SetConfiguration: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetFeature: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_SetFeature: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetInputReport: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_SetOutputReport: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetNumInputBuffers: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    HidD_SetNumInputBuffers: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    HidD_GetPhysicalDescriptor: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetManufacturerString: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetProductString: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetIndexedString: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetSerialNumberString: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    HidD_GetMsGenreDescriptor: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DirectInput8Create(
  hinst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  dwVersion: number /* u32 */,
  riidltf: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libDINPUT8_dll.DirectInput8Create(util.toPointer(hinst), dwVersion, util.toPointer(riidltf), util.toPointer(ppvOut), util.toPointer(punkOuter)));
}

export function joyConfigChanged(
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libWINMM_dll.joyConfigChanged(dwFlags);
}

export function HidP_GetCaps(
  PreparsedData: number | bigint /* isize */,
  Capabilities: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetCaps(util.toBigInt(util.toPointer(PreparsedData)), util.toPointer(Capabilities)));
}

export function HidP_GetLinkCollectionNodes(
  LinkCollectionNodes: Deno.PointerValue | Uint8Array | null /* ptr */,
  LinkCollectionNodesLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetLinkCollectionNodes(util.toPointer(LinkCollectionNodes), util.toPointer(LinkCollectionNodesLength), util.toBigInt(util.toPointer(PreparsedData))));
}

export function HidP_GetSpecificButtonCaps(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  ButtonCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
  ButtonCapsLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetSpecificButtonCaps(ReportType, UsagePage, LinkCollection, Usage, util.toPointer(ButtonCaps), util.toPointer(ButtonCapsLength), util.toBigInt(util.toPointer(PreparsedData))));
}

export function HidP_GetButtonCaps(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  ButtonCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
  ButtonCapsLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetButtonCaps(ReportType, util.toPointer(ButtonCaps), util.toPointer(ButtonCapsLength), util.toBigInt(util.toPointer(PreparsedData))));
}

export function HidP_GetSpecificValueCaps(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  ValueCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
  ValueCapsLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetSpecificValueCaps(ReportType, UsagePage, LinkCollection, Usage, util.toPointer(ValueCaps), util.toPointer(ValueCapsLength), util.toBigInt(util.toPointer(PreparsedData))));
}

export function HidP_GetValueCaps(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  ValueCaps: Deno.PointerValue | Uint8Array | null /* ptr */,
  ValueCapsLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetValueCaps(ReportType, util.toPointer(ValueCaps), util.toPointer(ValueCapsLength), util.toBigInt(util.toPointer(PreparsedData))));
}

export function HidP_GetExtendedAttributes(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  DataIndex: number /* u16 */,
  PreparsedData: number | bigint /* isize */,
  Attributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  LengthAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetExtendedAttributes(ReportType, DataIndex, util.toBigInt(util.toPointer(PreparsedData)), util.toPointer(Attributes), util.toPointer(LengthAttributes)));
}

export function HidP_InitializeReportForID(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  ReportID: number /* u8 */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_InitializeReportForID(ReportType, ReportID, util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_SetData(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  DataList: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_SetData(ReportType, util.toPointer(DataList), util.toPointer(DataLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_GetData(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  DataList: Deno.PointerValue | Uint8Array | null /* ptr */,
  DataLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetData(ReportType, util.toPointer(DataList), util.toPointer(DataLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_MaxDataListLength(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  PreparsedData: number | bigint /* isize */,
): number /* u32 */ {
  return libHID_dll.HidP_MaxDataListLength(ReportType, util.toBigInt(util.toPointer(PreparsedData)));
}

export function HidP_SetUsages(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  UsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UsageLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_SetUsages(ReportType, UsagePage, LinkCollection, util.toPointer(UsageList), util.toPointer(UsageLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_UnsetUsages(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  UsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UsageLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_UnsetUsages(ReportType, UsagePage, LinkCollection, util.toPointer(UsageList), util.toPointer(UsageLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_GetUsages(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  UsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UsageLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetUsages(ReportType, UsagePage, LinkCollection, util.toPointer(UsageList), util.toPointer(UsageLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_GetUsagesEx(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  LinkCollection: number /* u16 */,
  ButtonList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UsageLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetUsagesEx(ReportType, LinkCollection, util.toPointer(ButtonList), util.toPointer(UsageLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_MaxUsageListLength(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  PreparsedData: number | bigint /* isize */,
): number /* u32 */ {
  return libHID_dll.HidP_MaxUsageListLength(ReportType, UsagePage, util.toBigInt(util.toPointer(PreparsedData)));
}

export function HidP_SetUsageValue(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  UsageValue: number /* u32 */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_SetUsageValue(ReportType, UsagePage, LinkCollection, Usage, UsageValue, util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_SetScaledUsageValue(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  UsageValue: number /* i32 */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_SetScaledUsageValue(ReportType, UsagePage, LinkCollection, Usage, UsageValue, util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_SetUsageValueArray(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  UsageValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  UsageValueByteLength: number /* u16 */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_SetUsageValueArray(ReportType, UsagePage, LinkCollection, Usage, util.pstrToFfi(UsageValue), UsageValueByteLength, util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_GetUsageValue(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  UsageValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetUsageValue(ReportType, UsagePage, LinkCollection, Usage, util.toPointer(UsageValue), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_GetScaledUsageValue(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  UsageValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetScaledUsageValue(ReportType, UsagePage, LinkCollection, Usage, util.toPointer(UsageValue), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_GetUsageValueArray(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  UsageValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  UsageValueByteLength: number /* u16 */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetUsageValueArray(ReportType, UsagePage, LinkCollection, Usage, util.pstrToFfi(UsageValue), UsageValueByteLength, util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_UsageListDifference(
  PreviousUsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  CurrentUsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  BreakUsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  MakeUsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UsageListLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_UsageListDifference(util.toPointer(PreviousUsageList), util.toPointer(CurrentUsageList), util.toPointer(BreakUsageList), util.toPointer(MakeUsageList), UsageListLength));
}

export function HidP_GetButtonArray(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  ButtonData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ButtonDataLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_GetButtonArray(ReportType, UsagePage, LinkCollection, Usage, util.toPointer(ButtonData), util.toPointer(ButtonDataLength), util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_SetButtonArray(
  ReportType: HIDP_REPORT_TYPE /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_REPORT_TYPE */,
  UsagePage: number /* u16 */,
  LinkCollection: number /* u16 */,
  Usage: number /* u16 */,
  ButtonData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ButtonDataLength: number /* u16 */,
  PreparsedData: number | bigint /* isize */,
  Report: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ReportLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_SetButtonArray(ReportType, UsagePage, LinkCollection, Usage, util.toPointer(ButtonData), ButtonDataLength, util.toBigInt(util.toPointer(PreparsedData)), util.pstrToFfi(Report), ReportLength));
}

export function HidP_TranslateUsagesToI8042ScanCodes(
  ChangedUsageList: Deno.PointerValue | Uint8Array | null /* ptr */,
  UsageListLength: number /* u32 */,
  KeyAction: HIDP_KEYBOARD_DIRECTION /* Windows.Win32.Devices.HumanInterfaceDevice.HIDP_KEYBOARD_DIRECTION */,
  ModifierState: Deno.PointerValue | Uint8Array | null /* ptr */,
  InsertCodesProcedure: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.HumanInterfaceDevice.PHIDP_INSERT_SCANCODES */,
  InsertCodesContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libHID_dll.HidP_TranslateUsagesToI8042ScanCodes(util.toPointer(ChangedUsageList), UsageListLength, KeyAction, util.toPointer(ModifierState), util.toPointer(InsertCodesProcedure), util.toPointer(InsertCodesContext)));
}

export function HidD_GetAttributes(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Attributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetAttributes(util.toPointer(HidDeviceObject), util.toPointer(Attributes)));
}

export function HidD_GetHidGuid(
  HidGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libHID_dll.HidD_GetHidGuid(util.toPointer(HidGuid));
}

export function HidD_GetPreparsedData(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  PreparsedData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetPreparsedData(util.toPointer(HidDeviceObject), util.toPointer(PreparsedData)));
}

export function HidD_FreePreparsedData(
  PreparsedData: number | bigint /* isize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_FreePreparsedData(util.toBigInt(util.toPointer(PreparsedData))));
}

export function HidD_FlushQueue(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_FlushQueue(util.toPointer(HidDeviceObject)));
}

export function HidD_GetConfiguration(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Configuration: Deno.PointerValue | Uint8Array | null /* ptr */,
  ConfigurationLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetConfiguration(util.toPointer(HidDeviceObject), util.toPointer(Configuration), ConfigurationLength));
}

export function HidD_SetConfiguration(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Configuration: Deno.PointerValue | Uint8Array | null /* ptr */,
  ConfigurationLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_SetConfiguration(util.toPointer(HidDeviceObject), util.toPointer(Configuration), ConfigurationLength));
}

export function HidD_GetFeature(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReportBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReportBufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetFeature(util.toPointer(HidDeviceObject), util.toPointer(ReportBuffer), ReportBufferLength));
}

export function HidD_SetFeature(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReportBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReportBufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_SetFeature(util.toPointer(HidDeviceObject), util.toPointer(ReportBuffer), ReportBufferLength));
}

export function HidD_GetInputReport(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReportBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReportBufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetInputReport(util.toPointer(HidDeviceObject), util.toPointer(ReportBuffer), ReportBufferLength));
}

export function HidD_SetOutputReport(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ReportBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReportBufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_SetOutputReport(util.toPointer(HidDeviceObject), util.toPointer(ReportBuffer), ReportBufferLength));
}

export function HidD_GetNumInputBuffers(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberBuffers: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetNumInputBuffers(util.toPointer(HidDeviceObject), util.toPointer(NumberBuffers)));
}

export function HidD_SetNumInputBuffers(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  NumberBuffers: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_SetNumInputBuffers(util.toPointer(HidDeviceObject), NumberBuffers));
}

export function HidD_GetPhysicalDescriptor(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetPhysicalDescriptor(util.toPointer(HidDeviceObject), util.toPointer(Buffer), BufferLength));
}

export function HidD_GetManufacturerString(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetManufacturerString(util.toPointer(HidDeviceObject), util.toPointer(Buffer), BufferLength));
}

export function HidD_GetProductString(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetProductString(util.toPointer(HidDeviceObject), util.toPointer(Buffer), BufferLength));
}

export function HidD_GetIndexedString(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  StringIndex: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetIndexedString(util.toPointer(HidDeviceObject), StringIndex, util.toPointer(Buffer), BufferLength));
}

export function HidD_GetSerialNumberString(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetSerialNumberString(util.toPointer(HidDeviceObject), util.toPointer(Buffer), BufferLength));
}

export function HidD_GetMsGenreDescriptor(
  HidDeviceObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libHID_dll.HidD_GetMsGenreDescriptor(util.toPointer(HidDeviceObject), util.toPointer(Buffer), BufferLength));
}

