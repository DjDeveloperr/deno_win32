/// Auto-generated by Deno Win32: Windows.Win32.Devices.BiometricFramework.Apis

import * as util from "../../util.ts";

// Enums
export type WINBIO_SETTING_SOURCE = number;
export type WINBIO_COMPONENT = number;
export type WINBIO_POOL = number;
export type WINBIO_ANTI_SPOOF_POLICY_ACTION = number;
export type WINBIO_POLICY_SOURCE = number;
export type WINBIO_CREDENTIAL_TYPE = number;
export type WINBIO_CREDENTIAL_FORMAT = number;
export type WINBIO_CREDENTIAL_STATE = number;
export type WINBIO_ASYNC_NOTIFICATION_METHOD = number;

// Constants
export const WINBIO_SETTING_SOURCE_INVALID = 0;
export const WINBIO_SETTING_SOURCE_DEFAULT = 1;
export const WINBIO_SETTING_SOURCE_LOCAL = 3;
export const WINBIO_SETTING_SOURCE_POLICY = 2;
export const WINBIO_COMPONENT_SENSOR = 1;
export const WINBIO_COMPONENT_ENGINE = 2;
export const WINBIO_COMPONENT_STORAGE = 3;
export const WINBIO_POOL_SYSTEM = 1;
export const WINBIO_POOL_PRIVATE = 2;
export const WINBIO_MAX_STRING_LEN = 256;
export const WINBIO_SCP_VERSION_1 = 1;
export const WINBIO_SCP_RANDOM_SIZE_V1 = 32;
export const WINBIO_SCP_DIGEST_SIZE_V1 = 32;
export const WINBIO_SCP_CURVE_FIELD_SIZE_V1 = 32;
export const WINBIO_SCP_PUBLIC_KEY_SIZE_V1 = 65;
export const WINBIO_SCP_PRIVATE_KEY_SIZE_V1 = 32;
export const WINBIO_SCP_SIGNATURE_SIZE_V1 = 64;
export const WINBIO_SCP_ENCRYPTION_BLOCK_SIZE_V1 = 16;
export const WINBIO_SCP_ENCRYPTION_KEY_SIZE_V1 = 32;
export const WINBIO_BIR_ALIGN_SIZE = 8;
export const WINBIO_BIR_ALGIN_SIZE = 8;
export const FACILITY_WINBIO = 9;
export const FACILITY_NONE = 0;
export const WINBIO_E_UNSUPPORTED_FACTOR = 684549361711546369n;
export const WINBIO_E_INVALID_UNIT = 684550461223174146n;
export const WINBIO_E_UNKNOWN_ID = 684551560734801923n;
export const WINBIO_E_CANCELED = 684552660246429700n;
export const WINBIO_E_NO_MATCH = 684553759758057477n;
export const WINBIO_E_CAPTURE_ABORTED = 684554859269685254n;
export const WINBIO_E_ENROLLMENT_IN_PROGRESS = 684555958781313031n;
export const WINBIO_E_BAD_CAPTURE = 684557058292940808n;
export const WINBIO_E_INVALID_CONTROL_CODE = 684559257316196361n;
export const WINBIO_E_DATA_COLLECTION_IN_PROGRESS = 684560356827824139n;
export const WINBIO_E_UNSUPPORTED_DATA_FORMAT = 684561456339451916n;
export const WINBIO_E_UNSUPPORTED_DATA_TYPE = 684562555851079693n;
export const WINBIO_E_UNSUPPORTED_PURPOSE = 684563655362707470n;
export const WINBIO_E_INVALID_DEVICE_STATE = 684564754874335247n;
export const WINBIO_E_DEVICE_BUSY = 684565854385963024n;
export const WINBIO_E_DATABASE_CANT_CREATE = 684566953897590801n;
export const WINBIO_E_DATABASE_CANT_OPEN = 684568053409218578n;
export const WINBIO_E_DATABASE_CANT_CLOSE = 684569152920846355n;
export const WINBIO_E_DATABASE_CANT_ERASE = 684570252432474132n;
export const WINBIO_E_DATABASE_CANT_FIND = 684571351944101909n;
export const WINBIO_E_DATABASE_ALREADY_EXISTS = 684573550967357462n;
export const WINBIO_E_DATABASE_FULL = 684574650478985240n;
export const WINBIO_E_DATABASE_LOCKED = 684575749990613017n;
export const WINBIO_E_DATABASE_CORRUPTED = 684576849502240794n;
export const WINBIO_E_DATABASE_NO_SUCH_RECORD = 684577949013868571n;
export const WINBIO_E_DUPLICATE_ENROLLMENT = 684579048525496348n;
export const WINBIO_E_DATABASE_READ_ERROR = 684580148037124125n;
export const WINBIO_E_DATABASE_WRITE_ERROR = 684581247548751902n;
export const WINBIO_E_DATABASE_NO_RESULTS = 684582347060379679n;
export const WINBIO_E_DATABASE_NO_MORE_RECORDS = 684583446572007456n;
export const WINBIO_E_DATABASE_EOF = 684584546083635233n;
export const WINBIO_E_DATABASE_BAD_INDEX_VECTOR = 684586745106890786n;
export const WINBIO_E_INCORRECT_BSP = 684587844618518564n;
export const WINBIO_E_INCORRECT_SENSOR_POOL = 684588944130146341n;
export const WINBIO_E_NO_CAPTURE_DATA = 684590043641774118n;
export const WINBIO_E_INVALID_SENSOR_MODE = 684593342176657447n;
export const WINBIO_E_LOCK_VIOLATION = 684594441688285226n;
export const WINBIO_E_DUPLICATE_TEMPLATE = 684595541199913003n;
export const WINBIO_E_INVALID_OPERATION = 684596640711540780n;
export const WINBIO_E_SESSION_BUSY = 684599939246424109n;
export const WINBIO_E_CRED_PROV_DISABLED = 684601038758051888n;
export const WINBIO_E_CRED_PROV_NO_CREDENTIAL = 684602138269679665n;
export const WINBIO_E_DISABLED = 684603237781307442n;
export const WINBIO_E_CONFIGURATION_FAILURE = 684604337292935219n;
export const WINBIO_E_SENSOR_UNAVAILABLE = 684605436804562996n;
export const WINBIO_E_SAS_ENABLED = 684606536316190773n;
export const WINBIO_E_DEVICE_FAILURE = 684607635827818550n;
export const WINBIO_E_FAST_USER_SWITCH_DISABLED = 684608735339446327n;
export const WINBIO_E_NOT_ACTIVE_CONSOLE = 684609834851074104n;
export const WINBIO_E_EVENT_MONITOR_ACTIVE = 684610934362701881n;
export const WINBIO_E_INVALID_PROPERTY_TYPE = 684612033874329658n;
export const WINBIO_E_INVALID_PROPERTY_ID = 684613133385957435n;
export const WINBIO_E_UNSUPPORTED_PROPERTY = 684614232897585212n;
export const WINBIO_E_ADAPTER_INTEGRITY_FAILURE = 684615332409212989n;
export const WINBIO_E_INCORRECT_SESSION_TYPE = 684616431920840766n;
export const WINBIO_E_SESSION_HANDLE_CLOSED = 684617531432468543n;
export const WINBIO_E_DEADLOCK_DETECTED = 684618630944096320n;
export const WINBIO_E_NO_PREBOOT_IDENTITY = 684619730455724097n;
export const WINBIO_E_MAX_ERROR_COUNT_EXCEEDED = 684620829967351874n;
export const WINBIO_E_AUTO_LOGON_DISABLED = 684621929478979651n;
export const WINBIO_E_INVALID_TICKET = 684623028990607428n;
export const WINBIO_E_TICKET_QUOTA_EXCEEDED = 684624128502235205n;
export const WINBIO_E_DATA_PROTECTION_FAILURE = 684625228013862982n;
export const WINBIO_E_CRED_PROV_SECURITY_LOCKOUT = 684626327525490759n;
export const WINBIO_E_UNSUPPORTED_POOL_TYPE = 684627427037118536n;
export const WINBIO_E_SELECTION_REQUIRED = 684628526548746313n;
export const WINBIO_E_PRESENCE_MONITOR_ACTIVE = 684629626060374090n;
export const WINBIO_E_INVALID_SUBFACTOR = 684630725572001867n;
export const WINBIO_E_INVALID_CALIBRATION_FORMAT_ARRAY = 684631825083629644n;
export const WINBIO_E_NO_SUPPORTED_CALIBRATION_FORMAT = 684632924595257421n;
export const WINBIO_E_UNSUPPORTED_SENSOR_CALIBRATION_FORMAT = 684634024106885198n;
export const WINBIO_E_CALIBRATION_BUFFER_TOO_SMALL = 684635123618512975n;
export const WINBIO_E_CALIBRATION_BUFFER_TOO_LARGE = 684636223130140752n;
export const WINBIO_E_CALIBRATION_BUFFER_INVALID = 684637322641768529n;
export const WINBIO_E_INVALID_KEY_IDENTIFIER = 684638422153396306n;
export const WINBIO_E_KEY_CREATION_FAILED = 684639521665024083n;
export const WINBIO_E_KEY_IDENTIFIER_BUFFER_TOO_SMALL = 684640621176651860n;
export const WINBIO_E_PROPERTY_UNAVAILABLE = 684641720688279637n;
export const WINBIO_E_POLICY_PROTECTION_UNAVAILABLE = 684642820199907414n;
export const WINBIO_E_INSECURE_SENSOR = 684643919711535191n;
export const WINBIO_E_INVALID_BUFFER_ID = 684645019223162968n;
export const WINBIO_E_INVALID_BUFFER = 684646118734790745n;
export const WINBIO_E_TRUSTLET_INTEGRITY_FAIL = 684647218246418522n;
export const WINBIO_E_ENROLLMENT_CANCELED_BY_SUSPEND = 648519465180954715n;
export const WINBIO_I_MORE_DATA = 648520562545065985n;
export const WINBIO_I_EXTENDED_STATUS_INFORMATION = 4179341639611383810n;
export const IOCTL_BIOMETRIC_VENDOR = 4464640;
export const WINBIO_WBDI_MAJOR_VERSION = 1;
export const WINBIO_WBDI_MINOR_VERSION = 0;
export const WINBIO_ANTI_SPOOF_DISABLE = 0;
export const WINBIO_ANTI_SPOOF_ENABLE = 1;
export const WINBIO_ANTI_SPOOF_REMOVE = 2;
export const WINBIO_POLICY_UNKNOWN = 0;
export const WINBIO_POLICY_DEFAULT = 1;
export const WINBIO_POLICY_LOCAL = 2;
export const WINBIO_POLICY_ADMIN = 3;
export const WINBIO_CREDENTIAL_PASSWORD = 1;
export const WINBIO_CREDENTIAL_ALL = "-1";
export const WINBIO_PASSWORD_GENERIC = 1;
export const WINBIO_PASSWORD_PACKED = 2;
export const WINBIO_PASSWORD_PROTECTED = 3;
export const WINBIO_CREDENTIAL_NOT_SET = 1;
export const WINBIO_CREDENTIAL_SET = 2;
export const WINBIO_ASYNC_NOTIFY_NONE = 0;
export const WINBIO_ASYNC_NOTIFY_CALLBACK = 1;
export const WINBIO_ASYNC_NOTIFY_MESSAGE = 2;
export const WINBIO_ASYNC_NOTIFY_MAXIMUM_VALUE = 3;

// Structs

/**
 * Windows.Win32.Devices.BiometricFramework.Apis (size: 8)
 */
export interface Apis {
  /** System.Guid */
  GUID_DEVINTERFACE_BIOMETRIC_READER: Uint8Array | Deno.PointerValue | null;
}

export const sizeofApis = 8;

export function allocApis(data?: Partial<Apis>): Uint8Array {
  const buf = new Uint8Array(sizeofApis);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.GUID_DEVINTERFACE_BIOMETRIC_READER !== undefined) view.setBigUint64(0, data.GUID_DEVINTERFACE_BIOMETRIC_READER === null ? 0n : BigInt(util.toPointer(data.GUID_DEVINTERFACE_BIOMETRIC_READER)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_VERSION (size: 8)
 */
export interface WINBIO_VERSION {
  /** u32 */
  MajorVersion: number;
  /** u32 */
  MinorVersion: number;
}

export const sizeofWINBIO_VERSION = 8;

export function allocWINBIO_VERSION(data?: Partial<WINBIO_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MajorVersion !== undefined) view.setUint32(0, Number(data.MajorVersion), true);
  // 0x04: u32
  if (data?.MinorVersion !== undefined) view.setUint32(4, Number(data.MinorVersion), true);
  return buf;
}

/**
 * _AccountSid_e__Struct (size: 16)
 */
export interface _AccountSid_e__Struct {
  /** u32 */
  Size: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeof_AccountSid_e__Struct = 16;

export function alloc_AccountSid_e__Struct(data?: Partial<_AccountSid_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_AccountSid_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * _Value_e__Union (size: 32)
 */
export interface _Value_e__Union {
  /** u32 */
  Null: number;
  /** u32 */
  Wildcard: number;
  /** System.Guid */
  TemplateGuid: Uint8Array | Deno.PointerValue | null;
  /** _AccountSid_e__Struct */
  AccountSid: Uint8Array | Deno.PointerValue | null;
  /** array */
  SecureId: Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 32;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Null !== undefined) view.setUint32(0, Number(data.Null), true);
  // 0x04: u32
  if (data?.Wildcard !== undefined) view.setUint32(4, Number(data.Wildcard), true);
  // 0x08: pointer
  if (data?.TemplateGuid !== undefined) view.setBigUint64(8, data.TemplateGuid === null ? 0n : BigInt(util.toPointer(data.TemplateGuid)), true);
  // 0x10: pointer
  if (data?.AccountSid !== undefined) view.setBigUint64(16, data.AccountSid === null ? 0n : BigInt(util.toPointer(data.AccountSid)), true);
  // 0x18: pointer
  if (data?.SecureId !== undefined) view.setBigUint64(24, data.SecureId === null ? 0n : BigInt(util.toPointer(data.SecureId)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY (size: 16)
 */
export interface WINBIO_IDENTITY {
  /** u32 */
  Type: number;
  /** _Value_e__Union */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_IDENTITY = 16;

export function allocWINBIO_IDENTITY(data?: Partial<WINBIO_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SECURE_CONNECTION_PARAMS (size: 8)
 */
export interface WINBIO_SECURE_CONNECTION_PARAMS {
  /** u32 */
  PayloadSize: number;
  /** u16 */
  Version: number;
  /** u16 */
  Flags: number;
}

export const sizeofWINBIO_SECURE_CONNECTION_PARAMS = 8;

export function allocWINBIO_SECURE_CONNECTION_PARAMS(data?: Partial<WINBIO_SECURE_CONNECTION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SECURE_CONNECTION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: u16
  if (data?.Version !== undefined) view.setUint16(4, Number(data.Version), true);
  // 0x06: u16
  if (data?.Flags !== undefined) view.setUint16(6, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SECURE_CONNECTION_DATA (size: 24)
 */
export interface WINBIO_SECURE_CONNECTION_DATA {
  /** u32 */
  Size: number;
  /** u16 */
  Version: number;
  /** u16 */
  Flags: number;
  /** u32 */
  ModelCertificateSize: number;
  /** u32 */
  IntermediateCA1Size: number;
  /** u32 */
  IntermediateCA2Size: number;
}

export const sizeofWINBIO_SECURE_CONNECTION_DATA = 24;

export function allocWINBIO_SECURE_CONNECTION_DATA(data?: Partial<WINBIO_SECURE_CONNECTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SECURE_CONNECTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u16
  if (data?.Version !== undefined) view.setUint16(4, Number(data.Version), true);
  // 0x06: u16
  if (data?.Flags !== undefined) view.setUint16(6, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ModelCertificateSize !== undefined) view.setUint32(8, Number(data.ModelCertificateSize), true);
  // 0x0c: u32
  if (data?.IntermediateCA1Size !== undefined) view.setUint32(12, Number(data.IntermediateCA1Size), true);
  // 0x10: u32
  if (data?.IntermediateCA2Size !== undefined) view.setUint32(16, Number(data.IntermediateCA2Size), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BIR_DATA (size: 8)
 */
export interface WINBIO_BIR_DATA {
  /** u32 */
  Size: number;
  /** u32 */
  Offset: number;
}

export const sizeofWINBIO_BIR_DATA = 8;

export function allocWINBIO_BIR_DATA(data?: Partial<WINBIO_BIR_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BIR_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Offset !== undefined) view.setUint32(4, Number(data.Offset), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BIR (size: 32)
 */
export interface WINBIO_BIR {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_BIR_DATA */
  HeaderBlock: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_BIR_DATA */
  StandardDataBlock: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_BIR_DATA */
  VendorDataBlock: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_BIR_DATA */
  SignatureBlock: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_BIR = 32;

export function allocWINBIO_BIR(data?: Partial<WINBIO_BIR>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HeaderBlock !== undefined) view.setBigUint64(0, data.HeaderBlock === null ? 0n : BigInt(util.toPointer(data.HeaderBlock)), true);
  // 0x08: pointer
  if (data?.StandardDataBlock !== undefined) view.setBigUint64(8, data.StandardDataBlock === null ? 0n : BigInt(util.toPointer(data.StandardDataBlock)), true);
  // 0x10: pointer
  if (data?.VendorDataBlock !== undefined) view.setBigUint64(16, data.VendorDataBlock === null ? 0n : BigInt(util.toPointer(data.VendorDataBlock)), true);
  // 0x18: pointer
  if (data?.SignatureBlock !== undefined) view.setBigUint64(24, data.SignatureBlock === null ? 0n : BigInt(util.toPointer(data.SignatureBlock)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_REGISTERED_FORMAT (size: 8)
 */
export interface WINBIO_REGISTERED_FORMAT {
  /** u16 */
  Owner: number;
  /** u16 */
  Type: number;
}

export const sizeofWINBIO_REGISTERED_FORMAT = 8;

export function allocWINBIO_REGISTERED_FORMAT(data?: Partial<WINBIO_REGISTERED_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_REGISTERED_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Owner !== undefined) view.setUint16(0, Number(data.Owner), true);
  // 0x02: u16
  if (data?.Type !== undefined) view.setUint16(2, Number(data.Type), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * _ValidityPeriod_e__Struct (size: 16)
 */
export interface _ValidityPeriod_e__Struct {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  BeginDate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndDate: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ValidityPeriod_e__Struct = 16;

export function alloc_ValidityPeriod_e__Struct(data?: Partial<_ValidityPeriod_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_ValidityPeriod_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BeginDate !== undefined) view.setBigUint64(0, data.BeginDate === null ? 0n : BigInt(util.toPointer(data.BeginDate)), true);
  // 0x08: pointer
  if (data?.EndDate !== undefined) view.setBigUint64(8, data.EndDate === null ? 0n : BigInt(util.toPointer(data.EndDate)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BIR_HEADER (size: 48)
 */
export interface WINBIO_BIR_HEADER {
  /** u16 */
  ValidFields: number;
  /** u8 */
  HeaderVersion: number;
  /** u8 */
  PatronHeaderVersion: number;
  /** u8 */
  DataFlags: number;
  /** u32 */
  Type: number;
  /** u8 */
  Subtype: number;
  /** u8 */
  Purpose: number;
  /** i8 */
  DataQuality: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  CreationDate: Uint8Array | Deno.PointerValue | null;
  /** _ValidityPeriod_e__Struct */
  ValidityPeriod: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_REGISTERED_FORMAT */
  BiometricDataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_REGISTERED_FORMAT */
  ProductId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_BIR_HEADER = 48;

export function allocWINBIO_BIR_HEADER(data?: Partial<WINBIO_BIR_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BIR_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ValidFields !== undefined) view.setUint16(0, Number(data.ValidFields), true);
  // 0x02: u8
  if (data?.HeaderVersion !== undefined) view.setUint8(2, Number(data.HeaderVersion));
  // 0x03: u8
  if (data?.PatronHeaderVersion !== undefined) view.setUint8(3, Number(data.PatronHeaderVersion));
  // 0x04: u8
  if (data?.DataFlags !== undefined) view.setUint8(4, Number(data.DataFlags));
  // 0x05: u32
  if (data?.Type !== undefined) view.setUint32(5, Number(data.Type), true);
  // 0x09: u8
  if (data?.Subtype !== undefined) view.setUint8(9, Number(data.Subtype));
  // 0x0a: u8
  if (data?.Purpose !== undefined) view.setUint8(10, Number(data.Purpose));
  // 0x0b: i8
  if (data?.DataQuality !== undefined) view.setInt8(11, Number(data.DataQuality));
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CreationDate !== undefined) view.setBigUint64(16, data.CreationDate === null ? 0n : BigInt(util.toPointer(data.CreationDate)), true);
  // 0x18: pointer
  if (data?.ValidityPeriod !== undefined) view.setBigUint64(24, data.ValidityPeriod === null ? 0n : BigInt(util.toPointer(data.ValidityPeriod)), true);
  // 0x20: pointer
  if (data?.BiometricDataFormat !== undefined) view.setBigUint64(32, data.BiometricDataFormat === null ? 0n : BigInt(util.toPointer(data.BiometricDataFormat)), true);
  // 0x28: pointer
  if (data?.ProductId !== undefined) view.setBigUint64(40, data.ProductId === null ? 0n : BigInt(util.toPointer(data.ProductId)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BDB_ANSI_381_HEADER (size: 48)
 */
export interface WINBIO_BDB_ANSI_381_HEADER {
  /** u64 */
  RecordLength: Deno.PointerValue;
  /** u32 */
  FormatIdentifier: number;
  /** u32 */
  VersionNumber: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_REGISTERED_FORMAT */
  ProductId: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  CaptureDeviceId: number;
  /** u16 */
  ImageAcquisitionLevel: number;
  /** u16 */
  HorizontalScanResolution: number;
  /** u16 */
  VerticalScanResolution: number;
  /** u16 */
  HorizontalImageResolution: number;
  /** u16 */
  VerticalImageResolution: number;
  /** u8 */
  ElementCount: number;
  /** u8 */
  ScaleUnits: number;
  /** u8 */
  PixelDepth: number;
  /** u8 */
  ImageCompressionAlg: number;
  /** u16 */
  Reserved: number;
}

export const sizeofWINBIO_BDB_ANSI_381_HEADER = 48;

export function allocWINBIO_BDB_ANSI_381_HEADER(data?: Partial<WINBIO_BDB_ANSI_381_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BDB_ANSI_381_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.RecordLength !== undefined) view.setBigUint64(0, BigInt(data.RecordLength), true);
  // 0x08: u32
  if (data?.FormatIdentifier !== undefined) view.setUint32(8, Number(data.FormatIdentifier), true);
  // 0x0c: u32
  if (data?.VersionNumber !== undefined) view.setUint32(12, Number(data.VersionNumber), true);
  // 0x10: pointer
  if (data?.ProductId !== undefined) view.setBigUint64(16, data.ProductId === null ? 0n : BigInt(util.toPointer(data.ProductId)), true);
  // 0x18: u16
  if (data?.CaptureDeviceId !== undefined) view.setUint16(24, Number(data.CaptureDeviceId), true);
  // 0x1a: u16
  if (data?.ImageAcquisitionLevel !== undefined) view.setUint16(26, Number(data.ImageAcquisitionLevel), true);
  // 0x1c: u16
  if (data?.HorizontalScanResolution !== undefined) view.setUint16(28, Number(data.HorizontalScanResolution), true);
  // 0x1e: u16
  if (data?.VerticalScanResolution !== undefined) view.setUint16(30, Number(data.VerticalScanResolution), true);
  // 0x20: u16
  if (data?.HorizontalImageResolution !== undefined) view.setUint16(32, Number(data.HorizontalImageResolution), true);
  // 0x22: u16
  if (data?.VerticalImageResolution !== undefined) view.setUint16(34, Number(data.VerticalImageResolution), true);
  // 0x24: u8
  if (data?.ElementCount !== undefined) view.setUint8(36, Number(data.ElementCount));
  // 0x25: u8
  if (data?.ScaleUnits !== undefined) view.setUint8(37, Number(data.ScaleUnits));
  // 0x26: u8
  if (data?.PixelDepth !== undefined) view.setUint8(38, Number(data.PixelDepth));
  // 0x27: u8
  if (data?.ImageCompressionAlg !== undefined) view.setUint8(39, Number(data.ImageCompressionAlg));
  // 0x28: u16
  if (data?.Reserved !== undefined) view.setUint16(40, Number(data.Reserved), true);
  // 0x2a: pad6
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BDB_ANSI_381_RECORD (size: 16)
 */
export interface WINBIO_BDB_ANSI_381_RECORD {
  /** u32 */
  BlockLength: number;
  /** u16 */
  HorizontalLineLength: number;
  /** u16 */
  VerticalLineLength: number;
  /** u8 */
  Position: number;
  /** u8 */
  CountOfViews: number;
  /** u8 */
  ViewNumber: number;
  /** u8 */
  ImageQuality: number;
  /** u8 */
  ImpressionType: number;
  /** u8 */
  Reserved: number;
}

export const sizeofWINBIO_BDB_ANSI_381_RECORD = 16;

export function allocWINBIO_BDB_ANSI_381_RECORD(data?: Partial<WINBIO_BDB_ANSI_381_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BDB_ANSI_381_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BlockLength !== undefined) view.setUint32(0, Number(data.BlockLength), true);
  // 0x04: u16
  if (data?.HorizontalLineLength !== undefined) view.setUint16(4, Number(data.HorizontalLineLength), true);
  // 0x06: u16
  if (data?.VerticalLineLength !== undefined) view.setUint16(6, Number(data.VerticalLineLength), true);
  // 0x08: u8
  if (data?.Position !== undefined) view.setUint8(8, Number(data.Position));
  // 0x09: u8
  if (data?.CountOfViews !== undefined) view.setUint8(9, Number(data.CountOfViews));
  // 0x0a: u8
  if (data?.ViewNumber !== undefined) view.setUint8(10, Number(data.ViewNumber));
  // 0x0b: u8
  if (data?.ImageQuality !== undefined) view.setUint8(11, Number(data.ImageQuality));
  // 0x0c: u8
  if (data?.ImpressionType !== undefined) view.setUint8(12, Number(data.ImpressionType));
  // 0x0d: u8
  if (data?.Reserved !== undefined) view.setUint8(13, Number(data.Reserved));
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SECURE_BUFFER_HEADER_V1 (size: 24)
 */
export interface WINBIO_SECURE_BUFFER_HEADER_V1 {
  /** u32 */
  Type: number;
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** u64 */
  ValidationTag: Deno.PointerValue;
}

export const sizeofWINBIO_SECURE_BUFFER_HEADER_V1 = 24;

export function allocWINBIO_SECURE_BUFFER_HEADER_V1(data?: Partial<WINBIO_SECURE_BUFFER_HEADER_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SECURE_BUFFER_HEADER_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ValidationTag !== undefined) view.setBigUint64(16, BigInt(data.ValidationTag), true);
  return buf;
}

/**
 * _Unclaimed_e__Struct (size: 8)
 */
export interface _Unclaimed_e__Struct {
  /** u32 */
  UnitId: number;
  /** u32 */
  RejectDetail: number;
}

export const sizeof_Unclaimed_e__Struct = 8;

export function alloc_Unclaimed_e__Struct(data?: Partial<_Unclaimed_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Unclaimed_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnitId !== undefined) view.setUint32(0, Number(data.UnitId), true);
  // 0x04: u32
  if (data?.RejectDetail !== undefined) view.setUint32(4, Number(data.RejectDetail), true);
  return buf;
}

/**
 * _UnclaimedIdentify_e__Struct (size: 24)
 */
export interface _UnclaimedIdentify_e__Struct {
  /** u32 */
  UnitId: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  SubFactor: number;
  /** u32 */
  RejectDetail: number;
}

export const sizeof_UnclaimedIdentify_e__Struct = 24;

export function alloc_UnclaimedIdentify_e__Struct(data?: Partial<_UnclaimedIdentify_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_UnclaimedIdentify_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnitId !== undefined) view.setUint32(0, Number(data.UnitId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Identity !== undefined) view.setBigUint64(8, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x10: u8
  if (data?.SubFactor !== undefined) view.setUint8(16, Number(data.SubFactor));
  // 0x11: u32
  if (data?.RejectDetail !== undefined) view.setUint32(17, Number(data.RejectDetail), true);
  // 0x15: pad3
  return buf;
}

export type HRESULT = number;

/**
 * _Error_e__Struct (size: 8)
 */
export interface _Error_e__Struct {
  /** Windows.Win32.Foundation.HRESULT */
  ErrorCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Error_e__Struct = 8;

export function alloc_Error_e__Struct(data?: Partial<_Error_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Error_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ErrorCode !== undefined) view.setBigUint64(0, data.ErrorCode === null ? 0n : BigInt(util.toPointer(data.ErrorCode)), true);
  return buf;
}

/**
 * _Parameters_e__Union (size: 24)
 */
export interface _Parameters_e__Union {
  /** _Unclaimed_e__Struct */
  Unclaimed: Uint8Array | Deno.PointerValue | null;
  /** _UnclaimedIdentify_e__Struct */
  UnclaimedIdentify: Uint8Array | Deno.PointerValue | null;
  /** _Error_e__Struct */
  Error: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Parameters_e__Union = 24;

export function alloc_Parameters_e__Union(data?: Partial<_Parameters_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Parameters_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Unclaimed !== undefined) view.setBigUint64(0, data.Unclaimed === null ? 0n : BigInt(util.toPointer(data.Unclaimed)), true);
  // 0x08: pointer
  if (data?.UnclaimedIdentify !== undefined) view.setBigUint64(8, data.UnclaimedIdentify === null ? 0n : BigInt(util.toPointer(data.UnclaimedIdentify)), true);
  // 0x10: pointer
  if (data?.Error !== undefined) view.setBigUint64(16, data.Error === null ? 0n : BigInt(util.toPointer(data.Error)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EVENT (size: 16)
 */
export interface WINBIO_EVENT {
  /** u32 */
  Type: number;
  /** _Parameters_e__Union */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_EVENT = 16;

export function allocWINBIO_EVENT(data?: Partial<WINBIO_EVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * _OpaqueEngineData_e__Struct (size: 16)
 */
export interface _OpaqueEngineData_e__Struct {
  /** System.Guid */
  AdapterId: Uint8Array | Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeof_OpaqueEngineData_e__Struct = 16;

export function alloc_OpaqueEngineData_e__Struct(data?: Partial<_OpaqueEngineData_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_OpaqueEngineData_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AdapterId !== undefined) view.setBigUint64(0, data.AdapterId === null ? 0n : BigInt(util.toPointer(data.AdapterId)), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * _FacialFeatures_e__Struct (size: 24)
 */
export interface _FacialFeatures_e__Struct {
  /** Windows.Win32.Foundation.RECT */
  BoundingBox: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Distance: number;
  /** _OpaqueEngineData_e__Struct */
  OpaqueEngineData: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_FacialFeatures_e__Struct = 24;

export function alloc_FacialFeatures_e__Struct(data?: Partial<_FacialFeatures_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_FacialFeatures_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BoundingBox !== undefined) view.setBigUint64(0, data.BoundingBox === null ? 0n : BigInt(util.toPointer(data.BoundingBox)), true);
  // 0x08: i32
  if (data?.Distance !== undefined) view.setInt32(8, Number(data.Distance), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.OpaqueEngineData !== undefined) view.setBigUint64(16, data.OpaqueEngineData === null ? 0n : BigInt(util.toPointer(data.OpaqueEngineData)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * _Iris_e__Struct (size: 40)
 */
export interface _Iris_e__Struct {
  /** Windows.Win32.Foundation.RECT */
  EyeBoundingBox_1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  EyeBoundingBox_2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  PupilCenter_1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  PupilCenter_2: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  Distance: number;
}

export const sizeof_Iris_e__Struct = 40;

export function alloc_Iris_e__Struct(data?: Partial<_Iris_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Iris_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EyeBoundingBox_1 !== undefined) view.setBigUint64(0, data.EyeBoundingBox_1 === null ? 0n : BigInt(util.toPointer(data.EyeBoundingBox_1)), true);
  // 0x08: pointer
  if (data?.EyeBoundingBox_2 !== undefined) view.setBigUint64(8, data.EyeBoundingBox_2 === null ? 0n : BigInt(util.toPointer(data.EyeBoundingBox_2)), true);
  // 0x10: pointer
  if (data?.PupilCenter_1 !== undefined) view.setBigUint64(16, data.PupilCenter_1 === null ? 0n : BigInt(util.toPointer(data.PupilCenter_1)), true);
  // 0x18: pointer
  if (data?.PupilCenter_2 !== undefined) view.setBigUint64(24, data.PupilCenter_2 === null ? 0n : BigInt(util.toPointer(data.PupilCenter_2)), true);
  // 0x20: i32
  if (data?.Distance !== undefined) view.setInt32(32, Number(data.Distance), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_PRESENCE_PROPERTIES (size: 16)
 */
export interface WINBIO_PRESENCE_PROPERTIES {
  /** _FacialFeatures_e__Struct */
  FacialFeatures: Uint8Array | Deno.PointerValue | null;
  /** _Iris_e__Struct */
  Iris: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_PRESENCE_PROPERTIES = 16;

export function allocWINBIO_PRESENCE_PROPERTIES(data?: Partial<WINBIO_PRESENCE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_PRESENCE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FacialFeatures !== undefined) view.setBigUint64(0, data.FacialFeatures === null ? 0n : BigInt(util.toPointer(data.FacialFeatures)), true);
  // 0x08: pointer
  if (data?.Iris !== undefined) view.setBigUint64(8, data.Iris === null ? 0n : BigInt(util.toPointer(data.Iris)), true);
  return buf;
}

/**
 * _Authorization_e__Struct (size: 16)
 */
export interface _Authorization_e__Struct {
  /** u32 */
  Size: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeof_Authorization_e__Struct = 16;

export function alloc_Authorization_e__Struct(data?: Partial<_Authorization_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Authorization_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_PRESENCE (size: 64)
 */
export interface WINBIO_PRESENCE {
  /** u32 */
  Factor: number;
  /** u8 */
  SubFactor: number;
  /** Windows.Win32.Foundation.HRESULT */
  Status: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RejectDetail: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  TrackingId: Deno.PointerValue;
  /** u64 */
  Ticket: Deno.PointerValue;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_PRESENCE_PROPERTIES */
  Properties: Uint8Array | Deno.PointerValue | null;
  /** _Authorization_e__Struct */
  Authorization: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_PRESENCE = 64;

export function allocWINBIO_PRESENCE(data?: Partial<WINBIO_PRESENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_PRESENCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Factor !== undefined) view.setUint32(0, Number(data.Factor), true);
  // 0x04: u8
  if (data?.SubFactor !== undefined) view.setUint8(4, Number(data.SubFactor));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.Status !== undefined) view.setBigUint64(8, data.Status === null ? 0n : BigInt(util.toPointer(data.Status)), true);
  // 0x10: u32
  if (data?.RejectDetail !== undefined) view.setUint32(16, Number(data.RejectDetail), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Identity !== undefined) view.setBigUint64(24, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x20: u64
  if (data?.TrackingId !== undefined) view.setBigUint64(32, BigInt(data.TrackingId), true);
  // 0x28: u64
  if (data?.Ticket !== undefined) view.setBigUint64(40, BigInt(data.Ticket), true);
  // 0x30: pointer
  if (data?.Properties !== undefined) view.setBigUint64(48, data.Properties === null ? 0n : BigInt(util.toPointer(data.Properties)), true);
  // 0x38: pointer
  if (data?.Authorization !== undefined) view.setBigUint64(56, data.Authorization === null ? 0n : BigInt(util.toPointer(data.Authorization)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BSP_SCHEMA (size: 40)
 */
export interface WINBIO_BSP_SCHEMA {
  /** u32 */
  BiometricFactor: number;
  /** System.Guid */
  BspId: Uint8Array | Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  Vendor: Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_BSP_SCHEMA = 40;

export function allocWINBIO_BSP_SCHEMA(data?: Partial<WINBIO_BSP_SCHEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BSP_SCHEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BiometricFactor !== undefined) view.setUint32(0, Number(data.BiometricFactor), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.BspId !== undefined) view.setBigUint64(8, data.BspId === null ? 0n : BigInt(util.toPointer(data.BspId)), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x18: pointer
  if (data?.Vendor !== undefined) view.setBigUint64(24, data.Vendor === null ? 0n : BigInt(util.toPointer(data.Vendor)), true);
  // 0x20: pointer
  if (data?.Version !== undefined) view.setBigUint64(32, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_UNIT_SCHEMA (size: 72)
 */
export interface WINBIO_UNIT_SCHEMA {
  /** u32 */
  UnitId: number;
  /** u32 */
  PoolType: number;
  /** u32 */
  BiometricFactor: number;
  /** u32 */
  SensorSubType: number;
  /** u32 */
  Capabilities: number;
  /** array */
  DeviceInstanceId: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  Manufacturer: Deno.PointerValue | null;
  /** array */
  Model: Deno.PointerValue | null;
  /** array */
  SerialNumber: Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_VERSION */
  FirmwareVersion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_UNIT_SCHEMA = 72;

export function allocWINBIO_UNIT_SCHEMA(data?: Partial<WINBIO_UNIT_SCHEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_UNIT_SCHEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnitId !== undefined) view.setUint32(0, Number(data.UnitId), true);
  // 0x04: u32
  if (data?.PoolType !== undefined) view.setUint32(4, Number(data.PoolType), true);
  // 0x08: u32
  if (data?.BiometricFactor !== undefined) view.setUint32(8, Number(data.BiometricFactor), true);
  // 0x0c: u32
  if (data?.SensorSubType !== undefined) view.setUint32(12, Number(data.SensorSubType), true);
  // 0x10: u32
  if (data?.Capabilities !== undefined) view.setUint32(16, Number(data.Capabilities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DeviceInstanceId !== undefined) view.setBigUint64(24, data.DeviceInstanceId === null ? 0n : BigInt(util.toPointer(data.DeviceInstanceId)), true);
  // 0x20: pointer
  if (data?.Description !== undefined) view.setBigUint64(32, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x28: pointer
  if (data?.Manufacturer !== undefined) view.setBigUint64(40, data.Manufacturer === null ? 0n : BigInt(util.toPointer(data.Manufacturer)), true);
  // 0x30: pointer
  if (data?.Model !== undefined) view.setBigUint64(48, data.Model === null ? 0n : BigInt(util.toPointer(data.Model)), true);
  // 0x38: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(56, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x40: pointer
  if (data?.FirmwareVersion !== undefined) view.setBigUint64(64, data.FirmwareVersion === null ? 0n : BigInt(util.toPointer(data.FirmwareVersion)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_STORAGE_SCHEMA (size: 48)
 */
export interface WINBIO_STORAGE_SCHEMA {
  /** u32 */
  BiometricFactor: number;
  /** System.Guid */
  DatabaseId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DataFormat: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Attributes: number;
  /** array */
  FilePath: Deno.PointerValue | null;
  /** array */
  ConnectionString: Deno.PointerValue | null;
}

export const sizeofWINBIO_STORAGE_SCHEMA = 48;

export function allocWINBIO_STORAGE_SCHEMA(data?: Partial<WINBIO_STORAGE_SCHEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_STORAGE_SCHEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BiometricFactor !== undefined) view.setUint32(0, Number(data.BiometricFactor), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DatabaseId !== undefined) view.setBigUint64(8, data.DatabaseId === null ? 0n : BigInt(util.toPointer(data.DatabaseId)), true);
  // 0x10: pointer
  if (data?.DataFormat !== undefined) view.setBigUint64(16, data.DataFormat === null ? 0n : BigInt(util.toPointer(data.DataFormat)), true);
  // 0x18: u32
  if (data?.Attributes !== undefined) view.setUint32(24, Number(data.Attributes), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.FilePath !== undefined) view.setBigUint64(32, data.FilePath === null ? 0n : BigInt(util.toPointer(data.FilePath)), true);
  // 0x28: pointer
  if (data?.ConnectionString !== undefined) view.setBigUint64(40, data.ConnectionString === null ? 0n : BigInt(util.toPointer(data.ConnectionString)), true);
  return buf;
}

/**
 * _Fingerprint_e__Struct (size: 8)
 */
export interface _Fingerprint_e__Struct {
  /** u32 */
  Reserved: number;
}

export const sizeof_Fingerprint_e__Struct = 8;

export function alloc_Fingerprint_e__Struct(data?: Partial<_Fingerprint_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Fingerprint_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reserved !== undefined) view.setUint32(0, Number(data.Reserved), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Voice_e__Struct (size: 8)
 */
export interface _Voice_e__Struct {
  /** u32 */
  Reserved: number;
}

export const sizeof_Voice_e__Struct = 8;

export function alloc_Voice_e__Struct(data?: Partial<_Voice_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Voice_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Reserved !== undefined) view.setUint32(0, Number(data.Reserved), true);
  // 0x04: pad4
  return buf;
}

/**
 * _Specific_e__Union (size: 40)
 */
export interface _Specific_e__Union {
  /** u32 */
  Null: number;
  /** _FacialFeatures_e__Struct */
  FacialFeatures: Uint8Array | Deno.PointerValue | null;
  /** _Fingerprint_e__Struct */
  Fingerprint: Uint8Array | Deno.PointerValue | null;
  /** _Iris_e__Struct */
  Iris: Uint8Array | Deno.PointerValue | null;
  /** _Voice_e__Struct */
  Voice: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Specific_e__Union = 40;

export function alloc_Specific_e__Union(data?: Partial<_Specific_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Specific_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Null !== undefined) view.setUint32(0, Number(data.Null), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FacialFeatures !== undefined) view.setBigUint64(8, data.FacialFeatures === null ? 0n : BigInt(util.toPointer(data.FacialFeatures)), true);
  // 0x10: pointer
  if (data?.Fingerprint !== undefined) view.setBigUint64(16, data.Fingerprint === null ? 0n : BigInt(util.toPointer(data.Fingerprint)), true);
  // 0x18: pointer
  if (data?.Iris !== undefined) view.setBigUint64(24, data.Iris === null ? 0n : BigInt(util.toPointer(data.Iris)), true);
  // 0x20: pointer
  if (data?.Voice !== undefined) view.setBigUint64(32, data.Voice === null ? 0n : BigInt(util.toPointer(data.Voice)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EXTENDED_SENSOR_INFO (size: 16)
 */
export interface WINBIO_EXTENDED_SENSOR_INFO {
  /** u32 */
  GenericSensorCapabilities: number;
  /** u32 */
  Factor: number;
  /** _Specific_e__Union */
  Specific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_EXTENDED_SENSOR_INFO = 16;

export function allocWINBIO_EXTENDED_SENSOR_INFO(data?: Partial<WINBIO_EXTENDED_SENSOR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EXTENDED_SENSOR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GenericSensorCapabilities !== undefined) view.setUint32(0, Number(data.GenericSensorCapabilities), true);
  // 0x04: u32
  if (data?.Factor !== undefined) view.setUint32(4, Number(data.Factor), true);
  // 0x08: pointer
  if (data?.Specific !== undefined) view.setBigUint64(8, data.Specific === null ? 0n : BigInt(util.toPointer(data.Specific)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EXTENDED_ENGINE_INFO (size: 16)
 */
export interface WINBIO_EXTENDED_ENGINE_INFO {
  /** u32 */
  GenericEngineCapabilities: number;
  /** u32 */
  Factor: number;
  /** _Specific_e__Union */
  Specific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_EXTENDED_ENGINE_INFO = 16;

export function allocWINBIO_EXTENDED_ENGINE_INFO(data?: Partial<WINBIO_EXTENDED_ENGINE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EXTENDED_ENGINE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GenericEngineCapabilities !== undefined) view.setUint32(0, Number(data.GenericEngineCapabilities), true);
  // 0x04: u32
  if (data?.Factor !== undefined) view.setUint32(4, Number(data.Factor), true);
  // 0x08: pointer
  if (data?.Specific !== undefined) view.setBigUint64(8, data.Specific === null ? 0n : BigInt(util.toPointer(data.Specific)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EXTENDED_STORAGE_INFO (size: 16)
 */
export interface WINBIO_EXTENDED_STORAGE_INFO {
  /** u32 */
  GenericStorageCapabilities: number;
  /** u32 */
  Factor: number;
  /** _Specific_e__Union */
  Specific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_EXTENDED_STORAGE_INFO = 16;

export function allocWINBIO_EXTENDED_STORAGE_INFO(data?: Partial<WINBIO_EXTENDED_STORAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EXTENDED_STORAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GenericStorageCapabilities !== undefined) view.setUint32(0, Number(data.GenericStorageCapabilities), true);
  // 0x04: u32
  if (data?.Factor !== undefined) view.setUint32(4, Number(data.Factor), true);
  // 0x08: pointer
  if (data?.Specific !== undefined) view.setBigUint64(8, data.Specific === null ? 0n : BigInt(util.toPointer(data.Specific)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EXTENDED_ENROLLMENT_STATUS (size: 32)
 */
export interface WINBIO_EXTENDED_ENROLLMENT_STATUS {
  /** Windows.Win32.Foundation.HRESULT */
  TemplateStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RejectDetail: number;
  /** u32 */
  PercentComplete: number;
  /** u32 */
  Factor: number;
  /** u8 */
  SubFactor: number;
  /** _Specific_e__Union */
  Specific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_EXTENDED_ENROLLMENT_STATUS = 32;

export function allocWINBIO_EXTENDED_ENROLLMENT_STATUS(data?: Partial<WINBIO_EXTENDED_ENROLLMENT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EXTENDED_ENROLLMENT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TemplateStatus !== undefined) view.setBigUint64(0, data.TemplateStatus === null ? 0n : BigInt(util.toPointer(data.TemplateStatus)), true);
  // 0x08: u32
  if (data?.RejectDetail !== undefined) view.setUint32(8, Number(data.RejectDetail), true);
  // 0x0c: u32
  if (data?.PercentComplete !== undefined) view.setUint32(12, Number(data.PercentComplete), true);
  // 0x10: u32
  if (data?.Factor !== undefined) view.setUint32(16, Number(data.Factor), true);
  // 0x14: u8
  if (data?.SubFactor !== undefined) view.setUint8(20, Number(data.SubFactor));
  // 0x15: pad3
  // 0x18: pointer
  if (data?.Specific !== undefined) view.setBigUint64(24, data.Specific === null ? 0n : BigInt(util.toPointer(data.Specific)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EXTENDED_UNIT_STATUS (size: 8)
 */
export interface WINBIO_EXTENDED_UNIT_STATUS {
  /** u32 */
  Availability: number;
  /** u32 */
  ReasonCode: number;
}

export const sizeofWINBIO_EXTENDED_UNIT_STATUS = 8;

export function allocWINBIO_EXTENDED_UNIT_STATUS(data?: Partial<WINBIO_EXTENDED_UNIT_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EXTENDED_UNIT_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Availability !== undefined) view.setUint32(0, Number(data.Availability), true);
  // 0x04: u32
  if (data?.ReasonCode !== undefined) view.setUint32(4, Number(data.ReasonCode), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_FP_BU_STATE (size: 16)
 */
export interface WINBIO_FP_BU_STATE {
  /** Windows.Win32.Foundation.BOOL */
  SensorAttached: boolean;
  /** Windows.Win32.Foundation.HRESULT */
  CreationResult: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_FP_BU_STATE = 16;

export function allocWINBIO_FP_BU_STATE(data?: Partial<WINBIO_FP_BU_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_FP_BU_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SensorAttached !== undefined) view.setInt32(0, Number(data.SensorAttached), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CreationResult !== undefined) view.setBigUint64(8, data.CreationResult === null ? 0n : BigInt(util.toPointer(data.CreationResult)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_ANTI_SPOOF_POLICY (size: 8)
 */
export interface WINBIO_ANTI_SPOOF_POLICY {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_ANTI_SPOOF_POLICY_ACTION */
  Action: WINBIO_ANTI_SPOOF_POLICY_ACTION;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_POLICY_SOURCE */
  Source: WINBIO_POLICY_SOURCE;
}

export const sizeofWINBIO_ANTI_SPOOF_POLICY = 8;

export function allocWINBIO_ANTI_SPOOF_POLICY(data?: Partial<WINBIO_ANTI_SPOOF_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_ANTI_SPOOF_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Action !== undefined) view.setInt32(0, Number(data.Action), true);
  // 0x04: i32
  if (data?.Source !== undefined) view.setInt32(4, Number(data.Source), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_EXTENDED_ENROLLMENT_PARAMETERS (size: 16)
 */
export interface WINBIO_EXTENDED_ENROLLMENT_PARAMETERS {
  /** usize */
  Size: Deno.PointerValue;
  /** u8 */
  SubFactor: number;
}

export const sizeofWINBIO_EXTENDED_ENROLLMENT_PARAMETERS = 16;

export function allocWINBIO_EXTENDED_ENROLLMENT_PARAMETERS(data?: Partial<WINBIO_EXTENDED_ENROLLMENT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_EXTENDED_ENROLLMENT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, BigInt(data.Size), true);
  // 0x08: u8
  if (data?.SubFactor !== undefined) view.setUint8(8, Number(data.SubFactor));
  // 0x09: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_ACCOUNT_POLICY (size: 16)
 */
export interface WINBIO_ACCOUNT_POLICY {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_ANTI_SPOOF_POLICY_ACTION */
  AntiSpoofBehavior: WINBIO_ANTI_SPOOF_POLICY_ACTION;
}

export const sizeofWINBIO_ACCOUNT_POLICY = 16;

export function allocWINBIO_ACCOUNT_POLICY(data?: Partial<WINBIO_ACCOUNT_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_ACCOUNT_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x08: i32
  if (data?.AntiSpoofBehavior !== undefined) view.setInt32(8, Number(data.AntiSpoofBehavior), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_PROTECTION_POLICY (size: 48)
 */
export interface WINBIO_PROTECTION_POLICY {
  /** u32 */
  Version: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DatabaseId: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  UserState: Deno.PointerValue;
  /** usize */
  PolicySize: Deno.PointerValue;
  /** array */
  Policy: Deno.PointerValue | null;
}

export const sizeofWINBIO_PROTECTION_POLICY = 48;

export function allocWINBIO_PROTECTION_POLICY(data?: Partial<WINBIO_PROTECTION_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_PROTECTION_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Identity !== undefined) view.setBigUint64(8, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x10: pointer
  if (data?.DatabaseId !== undefined) view.setBigUint64(16, data.DatabaseId === null ? 0n : BigInt(util.toPointer(data.DatabaseId)), true);
  // 0x18: u64
  if (data?.UserState !== undefined) view.setBigUint64(24, BigInt(data.UserState), true);
  // 0x20: usize
  if (data?.PolicySize !== undefined) view.setBigUint64(32, BigInt(data.PolicySize), true);
  // 0x28: pointer
  if (data?.Policy !== undefined) view.setBigUint64(40, data.Policy === null ? 0n : BigInt(util.toPointer(data.Policy)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_GESTURE_METADATA (size: 24)
 */
export interface WINBIO_GESTURE_METADATA {
  /** usize */
  Size: Deno.PointerValue;
  /** u32 */
  BiometricType: number;
  /** u32 */
  MatchType: number;
  /** u32 */
  ProtectionType: number;
}

export const sizeofWINBIO_GESTURE_METADATA = 24;

export function allocWINBIO_GESTURE_METADATA(data?: Partial<WINBIO_GESTURE_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_GESTURE_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, BigInt(data.Size), true);
  // 0x08: u32
  if (data?.BiometricType !== undefined) view.setUint32(8, Number(data.BiometricType), true);
  // 0x0c: u32
  if (data?.MatchType !== undefined) view.setUint32(12, Number(data.MatchType), true);
  // 0x10: u32
  if (data?.ProtectionType !== undefined) view.setUint32(16, Number(data.ProtectionType), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_ASYNC_RESULT (size: 56)
 */
export interface WINBIO_ASYNC_RESULT {
  /** u32 */
  SessionHandle: number;
  /** u32 */
  Operation: number;
  /** u64 */
  SequenceNumber: Deno.PointerValue;
  /** i64 */
  TimeStamp: Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ApiStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UnitId: number;
  /** ptr */
  UserData: Deno.PointerValue | Uint8Array | null;
  /** _Parameters_e__Union */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_ASYNC_RESULT = 56;

export function allocWINBIO_ASYNC_RESULT(data?: Partial<WINBIO_ASYNC_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_ASYNC_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionHandle !== undefined) view.setUint32(0, Number(data.SessionHandle), true);
  // 0x04: u32
  if (data?.Operation !== undefined) view.setUint32(4, Number(data.Operation), true);
  // 0x08: u64
  if (data?.SequenceNumber !== undefined) view.setBigUint64(8, BigInt(data.SequenceNumber), true);
  // 0x10: i64
  if (data?.TimeStamp !== undefined) view.setBigInt64(16, BigInt(data.TimeStamp), true);
  // 0x18: pointer
  if (data?.ApiStatus !== undefined) view.setBigUint64(24, data.ApiStatus === null ? 0n : BigInt(util.toPointer(data.ApiStatus)), true);
  // 0x20: u32
  if (data?.UnitId !== undefined) view.setUint32(32, Number(data.UnitId), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.UserData !== undefined) view.setBigUint64(40, data.UserData === null ? 0n : BigInt(util.toPointer(data.UserData)), true);
  // 0x30: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(48, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_STORAGE_RECORD (size: 64)
 */
export interface WINBIO_STORAGE_RECORD {
  /** ptr */
  Identity: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  SubFactor: number;
  /** ptr */
  IndexVector: Deno.PointerValue | Uint8Array | null;
  /** usize */
  IndexElementCount: Deno.PointerValue;
  /** ptr */
  TemplateBlob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  TemplateBlobSize: Deno.PointerValue;
  /** ptr */
  PayloadBlob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  PayloadBlobSize: Deno.PointerValue;
}

export const sizeofWINBIO_STORAGE_RECORD = 64;

export function allocWINBIO_STORAGE_RECORD(data?: Partial<WINBIO_STORAGE_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_STORAGE_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x08: u8
  if (data?.SubFactor !== undefined) view.setUint8(8, Number(data.SubFactor));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.IndexVector !== undefined) view.setBigUint64(16, data.IndexVector === null ? 0n : BigInt(util.toPointer(data.IndexVector)), true);
  // 0x18: usize
  if (data?.IndexElementCount !== undefined) view.setBigUint64(24, BigInt(data.IndexElementCount), true);
  // 0x20: pointer
  if (data?.TemplateBlob !== undefined) view.setBigUint64(32, data.TemplateBlob === null ? 0n : BigInt(util.toPointer(data.TemplateBlob)), true);
  // 0x28: usize
  if (data?.TemplateBlobSize !== undefined) view.setBigUint64(40, BigInt(data.TemplateBlobSize), true);
  // 0x30: pointer
  if (data?.PayloadBlob !== undefined) view.setBigUint64(48, data.PayloadBlob === null ? 0n : BigInt(util.toPointer(data.PayloadBlob)), true);
  // 0x38: usize
  if (data?.PayloadBlobSize !== undefined) view.setBigUint64(56, BigInt(data.PayloadBlobSize), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_PIPELINE (size: 80)
 */
export interface WINBIO_PIPELINE {
  /** Windows.Win32.Foundation.HANDLE */
  SensorHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  EngineHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  StorageHandle: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SensorInterface: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  EngineInterface: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StorageInterface: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SensorContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  EngineContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  StorageContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  FrameworkInterface: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINBIO_PIPELINE = 80;

export function allocWINBIO_PIPELINE(data?: Partial<WINBIO_PIPELINE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_PIPELINE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SensorHandle !== undefined) view.setBigUint64(0, data.SensorHandle === null ? 0n : BigInt(util.toPointer(data.SensorHandle)), true);
  // 0x08: pointer
  if (data?.EngineHandle !== undefined) view.setBigUint64(8, data.EngineHandle === null ? 0n : BigInt(util.toPointer(data.EngineHandle)), true);
  // 0x10: pointer
  if (data?.StorageHandle !== undefined) view.setBigUint64(16, data.StorageHandle === null ? 0n : BigInt(util.toPointer(data.StorageHandle)), true);
  // 0x18: pointer
  if (data?.SensorInterface !== undefined) view.setBigUint64(24, data.SensorInterface === null ? 0n : BigInt(util.toPointer(data.SensorInterface)), true);
  // 0x20: pointer
  if (data?.EngineInterface !== undefined) view.setBigUint64(32, data.EngineInterface === null ? 0n : BigInt(util.toPointer(data.EngineInterface)), true);
  // 0x28: pointer
  if (data?.StorageInterface !== undefined) view.setBigUint64(40, data.StorageInterface === null ? 0n : BigInt(util.toPointer(data.StorageInterface)), true);
  // 0x30: pointer
  if (data?.SensorContext !== undefined) view.setBigUint64(48, data.SensorContext === null ? 0n : BigInt(util.toPointer(data.SensorContext)), true);
  // 0x38: pointer
  if (data?.EngineContext !== undefined) view.setBigUint64(56, data.EngineContext === null ? 0n : BigInt(util.toPointer(data.EngineContext)), true);
  // 0x40: pointer
  if (data?.StorageContext !== undefined) view.setBigUint64(64, data.StorageContext === null ? 0n : BigInt(util.toPointer(data.StorageContext)), true);
  // 0x48: pointer
  if (data?.FrameworkInterface !== undefined) view.setBigUint64(72, data.FrameworkInterface === null ? 0n : BigInt(util.toPointer(data.FrameworkInterface)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_ADAPTER_INTERFACE_VERSION (size: 8)
 */
export interface WINBIO_ADAPTER_INTERFACE_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofWINBIO_ADAPTER_INTERFACE_VERSION = 8;

export function allocWINBIO_ADAPTER_INTERFACE_VERSION(data?: Partial<WINBIO_ADAPTER_INTERFACE_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_ADAPTER_INTERFACE_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SENSOR_INTERFACE (size: 280)
 */
export interface WINBIO_SENSOR_INTERFACE {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_ADAPTER_INTERFACE_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Type: number;
  /** usize */
  Size: Deno.PointerValue;
  /** System.Guid */
  AdapterId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ATTACH_FN */
  Attach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_DETACH_FN */
  Detach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_CLEAR_CONTEXT_FN */
  ClearContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_QUERY_STATUS_FN */
  QueryStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_RESET_FN */
  Reset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_SET_MODE_FN */
  SetMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_SET_INDICATOR_STATUS_FN */
  SetIndicatorStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_GET_INDICATOR_STATUS_FN */
  GetIndicatorStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_START_CAPTURE_FN */
  StartCapture: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_FINISH_CAPTURE_FN */
  FinishCapture: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_EXPORT_SENSOR_DATA_FN */
  ExportSensorData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_CANCEL_FN */
  Cancel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_PUSH_DATA_TO_ENGINE_FN */
  PushDataToEngine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_CONTROL_UNIT_FN */
  ControlUnit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_CONTROL_UNIT_PRIVILEGED_FN */
  ControlUnitPrivileged: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_NOTIFY_POWER_CHANGE_FN */
  NotifyPowerChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_PIPELINE_INIT_FN */
  PipelineInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_PIPELINE_CLEANUP_FN */
  PipelineCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ACTIVATE_FN */
  Activate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_DEACTIVATE_FN */
  Deactivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_QUERY_EXTENDED_INFO_FN */
  QueryExtendedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_QUERY_CALIBRATION_FORMATS_FN */
  QueryCalibrationFormats: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_SET_CALIBRATION_FORMAT_FN */
  SetCalibrationFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ACCEPT_CALIBRATION_DATA_FN */
  AcceptCalibrationData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ASYNC_IMPORT_RAW_BUFFER_FN */
  AsyncImportRawBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ASYNC_IMPORT_SECURE_BUFFER_FN */
  AsyncImportSecureBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_QUERY_PRIVATE_SENSOR_TYPE_FN */
  QueryPrivateSensorType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_CONNECT_SECURE_FN */
  ConnectSecure: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_START_CAPTURE_EX_FN */
  StartCaptureEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_START_NOTIFY_WAKE_FN */
  StartNotifyWake: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_FINISH_NOTIFY_WAKE_FN */
  FinishNotifyWake: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_SENSOR_INTERFACE = 280;

export function allocWINBIO_SENSOR_INTERFACE(data?: Partial<WINBIO_SENSOR_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SENSOR_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Version !== undefined) view.setBigUint64(0, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x08: u32
  if (data?.Type !== undefined) view.setUint32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  // 0x18: pointer
  if (data?.AdapterId !== undefined) view.setBigUint64(24, data.AdapterId === null ? 0n : BigInt(util.toPointer(data.AdapterId)), true);
  // 0x20: pointer
  if (data?.Attach !== undefined) view.setBigUint64(32, data.Attach === null ? 0n : BigInt(util.toPointer(data.Attach)), true);
  // 0x28: pointer
  if (data?.Detach !== undefined) view.setBigUint64(40, data.Detach === null ? 0n : BigInt(util.toPointer(data.Detach)), true);
  // 0x30: pointer
  if (data?.ClearContext !== undefined) view.setBigUint64(48, data.ClearContext === null ? 0n : BigInt(util.toPointer(data.ClearContext)), true);
  // 0x38: pointer
  if (data?.QueryStatus !== undefined) view.setBigUint64(56, data.QueryStatus === null ? 0n : BigInt(util.toPointer(data.QueryStatus)), true);
  // 0x40: pointer
  if (data?.Reset !== undefined) view.setBigUint64(64, data.Reset === null ? 0n : BigInt(util.toPointer(data.Reset)), true);
  // 0x48: pointer
  if (data?.SetMode !== undefined) view.setBigUint64(72, data.SetMode === null ? 0n : BigInt(util.toPointer(data.SetMode)), true);
  // 0x50: pointer
  if (data?.SetIndicatorStatus !== undefined) view.setBigUint64(80, data.SetIndicatorStatus === null ? 0n : BigInt(util.toPointer(data.SetIndicatorStatus)), true);
  // 0x58: pointer
  if (data?.GetIndicatorStatus !== undefined) view.setBigUint64(88, data.GetIndicatorStatus === null ? 0n : BigInt(util.toPointer(data.GetIndicatorStatus)), true);
  // 0x60: pointer
  if (data?.StartCapture !== undefined) view.setBigUint64(96, data.StartCapture === null ? 0n : BigInt(util.toPointer(data.StartCapture)), true);
  // 0x68: pointer
  if (data?.FinishCapture !== undefined) view.setBigUint64(104, data.FinishCapture === null ? 0n : BigInt(util.toPointer(data.FinishCapture)), true);
  // 0x70: pointer
  if (data?.ExportSensorData !== undefined) view.setBigUint64(112, data.ExportSensorData === null ? 0n : BigInt(util.toPointer(data.ExportSensorData)), true);
  // 0x78: pointer
  if (data?.Cancel !== undefined) view.setBigUint64(120, data.Cancel === null ? 0n : BigInt(util.toPointer(data.Cancel)), true);
  // 0x80: pointer
  if (data?.PushDataToEngine !== undefined) view.setBigUint64(128, data.PushDataToEngine === null ? 0n : BigInt(util.toPointer(data.PushDataToEngine)), true);
  // 0x88: pointer
  if (data?.ControlUnit !== undefined) view.setBigUint64(136, data.ControlUnit === null ? 0n : BigInt(util.toPointer(data.ControlUnit)), true);
  // 0x90: pointer
  if (data?.ControlUnitPrivileged !== undefined) view.setBigUint64(144, data.ControlUnitPrivileged === null ? 0n : BigInt(util.toPointer(data.ControlUnitPrivileged)), true);
  // 0x98: pointer
  if (data?.NotifyPowerChange !== undefined) view.setBigUint64(152, data.NotifyPowerChange === null ? 0n : BigInt(util.toPointer(data.NotifyPowerChange)), true);
  // 0xa0: pointer
  if (data?.PipelineInit !== undefined) view.setBigUint64(160, data.PipelineInit === null ? 0n : BigInt(util.toPointer(data.PipelineInit)), true);
  // 0xa8: pointer
  if (data?.PipelineCleanup !== undefined) view.setBigUint64(168, data.PipelineCleanup === null ? 0n : BigInt(util.toPointer(data.PipelineCleanup)), true);
  // 0xb0: pointer
  if (data?.Activate !== undefined) view.setBigUint64(176, data.Activate === null ? 0n : BigInt(util.toPointer(data.Activate)), true);
  // 0xb8: pointer
  if (data?.Deactivate !== undefined) view.setBigUint64(184, data.Deactivate === null ? 0n : BigInt(util.toPointer(data.Deactivate)), true);
  // 0xc0: pointer
  if (data?.QueryExtendedInfo !== undefined) view.setBigUint64(192, data.QueryExtendedInfo === null ? 0n : BigInt(util.toPointer(data.QueryExtendedInfo)), true);
  // 0xc8: pointer
  if (data?.QueryCalibrationFormats !== undefined) view.setBigUint64(200, data.QueryCalibrationFormats === null ? 0n : BigInt(util.toPointer(data.QueryCalibrationFormats)), true);
  // 0xd0: pointer
  if (data?.SetCalibrationFormat !== undefined) view.setBigUint64(208, data.SetCalibrationFormat === null ? 0n : BigInt(util.toPointer(data.SetCalibrationFormat)), true);
  // 0xd8: pointer
  if (data?.AcceptCalibrationData !== undefined) view.setBigUint64(216, data.AcceptCalibrationData === null ? 0n : BigInt(util.toPointer(data.AcceptCalibrationData)), true);
  // 0xe0: pointer
  if (data?.AsyncImportRawBuffer !== undefined) view.setBigUint64(224, data.AsyncImportRawBuffer === null ? 0n : BigInt(util.toPointer(data.AsyncImportRawBuffer)), true);
  // 0xe8: pointer
  if (data?.AsyncImportSecureBuffer !== undefined) view.setBigUint64(232, data.AsyncImportSecureBuffer === null ? 0n : BigInt(util.toPointer(data.AsyncImportSecureBuffer)), true);
  // 0xf0: pointer
  if (data?.QueryPrivateSensorType !== undefined) view.setBigUint64(240, data.QueryPrivateSensorType === null ? 0n : BigInt(util.toPointer(data.QueryPrivateSensorType)), true);
  // 0xf8: pointer
  if (data?.ConnectSecure !== undefined) view.setBigUint64(248, data.ConnectSecure === null ? 0n : BigInt(util.toPointer(data.ConnectSecure)), true);
  // 0x100: pointer
  if (data?.StartCaptureEx !== undefined) view.setBigUint64(256, data.StartCaptureEx === null ? 0n : BigInt(util.toPointer(data.StartCaptureEx)), true);
  // 0x108: pointer
  if (data?.StartNotifyWake !== undefined) view.setBigUint64(264, data.StartNotifyWake === null ? 0n : BigInt(util.toPointer(data.StartNotifyWake)), true);
  // 0x110: pointer
  if (data?.FinishNotifyWake !== undefined) view.setBigUint64(272, data.FinishNotifyWake === null ? 0n : BigInt(util.toPointer(data.FinishNotifyWake)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_ENGINE_INTERFACE (size: 360)
 */
export interface WINBIO_ENGINE_INTERFACE {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_ADAPTER_INTERFACE_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Type: number;
  /** usize */
  Size: Deno.PointerValue;
  /** System.Guid */
  AdapterId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_ATTACH_FN */
  Attach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_DETACH_FN */
  Detach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CLEAR_CONTEXT_FN */
  ClearContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_PREFERRED_FORMAT_FN */
  QueryPreferredFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_INDEX_VECTOR_SIZE_FN */
  QueryIndexVectorSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_HASH_ALGORITHMS_FN */
  QueryHashAlgorithms: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_SET_HASH_ALGORITHM_FN */
  SetHashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_SAMPLE_HINT_FN */
  QuerySampleHint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_ACCEPT_SAMPLE_DATA_FN */
  AcceptSampleData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_EXPORT_ENGINE_DATA_FN */
  ExportEngineData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_VERIFY_FEATURE_SET_FN */
  VerifyFeatureSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_IDENTIFY_FEATURE_SET_FN */
  IdentifyFeatureSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CREATE_ENROLLMENT_FN */
  CreateEnrollment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_UPDATE_ENROLLMENT_FN */
  UpdateEnrollment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_GET_ENROLLMENT_STATUS_FN */
  GetEnrollmentStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_GET_ENROLLMENT_HASH_FN */
  GetEnrollmentHash: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CHECK_FOR_DUPLICATE_FN */
  CheckForDuplicate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_COMMIT_ENROLLMENT_FN */
  CommitEnrollment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_DISCARD_ENROLLMENT_FN */
  DiscardEnrollment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CONTROL_UNIT_FN */
  ControlUnit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CONTROL_UNIT_PRIVILEGED_FN */
  ControlUnitPrivileged: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_NOTIFY_POWER_CHANGE_FN */
  NotifyPowerChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_RESERVED_1_FN */
  Reserved_1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_PIPELINE_INIT_FN */
  PipelineInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_PIPELINE_CLEANUP_FN */
  PipelineCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_ACTIVATE_FN */
  Activate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_DEACTIVATE_FN */
  Deactivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_EXTENDED_INFO_FN */
  QueryExtendedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_IDENTIFY_ALL_FN */
  IdentifyAll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_SET_ENROLLMENT_SELECTOR_FN */
  SetEnrollmentSelector: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_SET_ENROLLMENT_PARAMETERS_FN */
  SetEnrollmentParameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_EXTENDED_ENROLLMENT_STATUS_FN */
  QueryExtendedEnrollmentStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_REFRESH_CACHE_FN */
  RefreshCache: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_SELECT_CALIBRATION_FORMAT_FN */
  SelectCalibrationFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_QUERY_CALIBRATION_DATA_FN */
  QueryCalibrationData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_SET_ACCOUNT_POLICY_FN */
  SetAccountPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CREATE_KEY_FN */
  CreateKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_IDENTIFY_FEATURE_SET_SECURE_FN */
  IdentifyFeatureSetSecure: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_ACCEPT_PRIVATE_SENSOR_TYPE_INFO_FN */
  AcceptPrivateSensorTypeInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_CREATE_ENROLLMENT_AUTHENTICATED_FN */
  CreateEnrollmentAuthenticated: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_ENGINE_IDENTIFY_FEATURE_SET_AUTHENTICATED_FN */
  IdentifyFeatureSetAuthenticated: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_ENGINE_INTERFACE = 360;

export function allocWINBIO_ENGINE_INTERFACE(data?: Partial<WINBIO_ENGINE_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_ENGINE_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Version !== undefined) view.setBigUint64(0, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x08: u32
  if (data?.Type !== undefined) view.setUint32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  // 0x18: pointer
  if (data?.AdapterId !== undefined) view.setBigUint64(24, data.AdapterId === null ? 0n : BigInt(util.toPointer(data.AdapterId)), true);
  // 0x20: pointer
  if (data?.Attach !== undefined) view.setBigUint64(32, data.Attach === null ? 0n : BigInt(util.toPointer(data.Attach)), true);
  // 0x28: pointer
  if (data?.Detach !== undefined) view.setBigUint64(40, data.Detach === null ? 0n : BigInt(util.toPointer(data.Detach)), true);
  // 0x30: pointer
  if (data?.ClearContext !== undefined) view.setBigUint64(48, data.ClearContext === null ? 0n : BigInt(util.toPointer(data.ClearContext)), true);
  // 0x38: pointer
  if (data?.QueryPreferredFormat !== undefined) view.setBigUint64(56, data.QueryPreferredFormat === null ? 0n : BigInt(util.toPointer(data.QueryPreferredFormat)), true);
  // 0x40: pointer
  if (data?.QueryIndexVectorSize !== undefined) view.setBigUint64(64, data.QueryIndexVectorSize === null ? 0n : BigInt(util.toPointer(data.QueryIndexVectorSize)), true);
  // 0x48: pointer
  if (data?.QueryHashAlgorithms !== undefined) view.setBigUint64(72, data.QueryHashAlgorithms === null ? 0n : BigInt(util.toPointer(data.QueryHashAlgorithms)), true);
  // 0x50: pointer
  if (data?.SetHashAlgorithm !== undefined) view.setBigUint64(80, data.SetHashAlgorithm === null ? 0n : BigInt(util.toPointer(data.SetHashAlgorithm)), true);
  // 0x58: pointer
  if (data?.QuerySampleHint !== undefined) view.setBigUint64(88, data.QuerySampleHint === null ? 0n : BigInt(util.toPointer(data.QuerySampleHint)), true);
  // 0x60: pointer
  if (data?.AcceptSampleData !== undefined) view.setBigUint64(96, data.AcceptSampleData === null ? 0n : BigInt(util.toPointer(data.AcceptSampleData)), true);
  // 0x68: pointer
  if (data?.ExportEngineData !== undefined) view.setBigUint64(104, data.ExportEngineData === null ? 0n : BigInt(util.toPointer(data.ExportEngineData)), true);
  // 0x70: pointer
  if (data?.VerifyFeatureSet !== undefined) view.setBigUint64(112, data.VerifyFeatureSet === null ? 0n : BigInt(util.toPointer(data.VerifyFeatureSet)), true);
  // 0x78: pointer
  if (data?.IdentifyFeatureSet !== undefined) view.setBigUint64(120, data.IdentifyFeatureSet === null ? 0n : BigInt(util.toPointer(data.IdentifyFeatureSet)), true);
  // 0x80: pointer
  if (data?.CreateEnrollment !== undefined) view.setBigUint64(128, data.CreateEnrollment === null ? 0n : BigInt(util.toPointer(data.CreateEnrollment)), true);
  // 0x88: pointer
  if (data?.UpdateEnrollment !== undefined) view.setBigUint64(136, data.UpdateEnrollment === null ? 0n : BigInt(util.toPointer(data.UpdateEnrollment)), true);
  // 0x90: pointer
  if (data?.GetEnrollmentStatus !== undefined) view.setBigUint64(144, data.GetEnrollmentStatus === null ? 0n : BigInt(util.toPointer(data.GetEnrollmentStatus)), true);
  // 0x98: pointer
  if (data?.GetEnrollmentHash !== undefined) view.setBigUint64(152, data.GetEnrollmentHash === null ? 0n : BigInt(util.toPointer(data.GetEnrollmentHash)), true);
  // 0xa0: pointer
  if (data?.CheckForDuplicate !== undefined) view.setBigUint64(160, data.CheckForDuplicate === null ? 0n : BigInt(util.toPointer(data.CheckForDuplicate)), true);
  // 0xa8: pointer
  if (data?.CommitEnrollment !== undefined) view.setBigUint64(168, data.CommitEnrollment === null ? 0n : BigInt(util.toPointer(data.CommitEnrollment)), true);
  // 0xb0: pointer
  if (data?.DiscardEnrollment !== undefined) view.setBigUint64(176, data.DiscardEnrollment === null ? 0n : BigInt(util.toPointer(data.DiscardEnrollment)), true);
  // 0xb8: pointer
  if (data?.ControlUnit !== undefined) view.setBigUint64(184, data.ControlUnit === null ? 0n : BigInt(util.toPointer(data.ControlUnit)), true);
  // 0xc0: pointer
  if (data?.ControlUnitPrivileged !== undefined) view.setBigUint64(192, data.ControlUnitPrivileged === null ? 0n : BigInt(util.toPointer(data.ControlUnitPrivileged)), true);
  // 0xc8: pointer
  if (data?.NotifyPowerChange !== undefined) view.setBigUint64(200, data.NotifyPowerChange === null ? 0n : BigInt(util.toPointer(data.NotifyPowerChange)), true);
  // 0xd0: pointer
  if (data?.Reserved_1 !== undefined) view.setBigUint64(208, data.Reserved_1 === null ? 0n : BigInt(util.toPointer(data.Reserved_1)), true);
  // 0xd8: pointer
  if (data?.PipelineInit !== undefined) view.setBigUint64(216, data.PipelineInit === null ? 0n : BigInt(util.toPointer(data.PipelineInit)), true);
  // 0xe0: pointer
  if (data?.PipelineCleanup !== undefined) view.setBigUint64(224, data.PipelineCleanup === null ? 0n : BigInt(util.toPointer(data.PipelineCleanup)), true);
  // 0xe8: pointer
  if (data?.Activate !== undefined) view.setBigUint64(232, data.Activate === null ? 0n : BigInt(util.toPointer(data.Activate)), true);
  // 0xf0: pointer
  if (data?.Deactivate !== undefined) view.setBigUint64(240, data.Deactivate === null ? 0n : BigInt(util.toPointer(data.Deactivate)), true);
  // 0xf8: pointer
  if (data?.QueryExtendedInfo !== undefined) view.setBigUint64(248, data.QueryExtendedInfo === null ? 0n : BigInt(util.toPointer(data.QueryExtendedInfo)), true);
  // 0x100: pointer
  if (data?.IdentifyAll !== undefined) view.setBigUint64(256, data.IdentifyAll === null ? 0n : BigInt(util.toPointer(data.IdentifyAll)), true);
  // 0x108: pointer
  if (data?.SetEnrollmentSelector !== undefined) view.setBigUint64(264, data.SetEnrollmentSelector === null ? 0n : BigInt(util.toPointer(data.SetEnrollmentSelector)), true);
  // 0x110: pointer
  if (data?.SetEnrollmentParameters !== undefined) view.setBigUint64(272, data.SetEnrollmentParameters === null ? 0n : BigInt(util.toPointer(data.SetEnrollmentParameters)), true);
  // 0x118: pointer
  if (data?.QueryExtendedEnrollmentStatus !== undefined) view.setBigUint64(280, data.QueryExtendedEnrollmentStatus === null ? 0n : BigInt(util.toPointer(data.QueryExtendedEnrollmentStatus)), true);
  // 0x120: pointer
  if (data?.RefreshCache !== undefined) view.setBigUint64(288, data.RefreshCache === null ? 0n : BigInt(util.toPointer(data.RefreshCache)), true);
  // 0x128: pointer
  if (data?.SelectCalibrationFormat !== undefined) view.setBigUint64(296, data.SelectCalibrationFormat === null ? 0n : BigInt(util.toPointer(data.SelectCalibrationFormat)), true);
  // 0x130: pointer
  if (data?.QueryCalibrationData !== undefined) view.setBigUint64(304, data.QueryCalibrationData === null ? 0n : BigInt(util.toPointer(data.QueryCalibrationData)), true);
  // 0x138: pointer
  if (data?.SetAccountPolicy !== undefined) view.setBigUint64(312, data.SetAccountPolicy === null ? 0n : BigInt(util.toPointer(data.SetAccountPolicy)), true);
  // 0x140: pointer
  if (data?.CreateKey !== undefined) view.setBigUint64(320, data.CreateKey === null ? 0n : BigInt(util.toPointer(data.CreateKey)), true);
  // 0x148: pointer
  if (data?.IdentifyFeatureSetSecure !== undefined) view.setBigUint64(328, data.IdentifyFeatureSetSecure === null ? 0n : BigInt(util.toPointer(data.IdentifyFeatureSetSecure)), true);
  // 0x150: pointer
  if (data?.AcceptPrivateSensorTypeInfo !== undefined) view.setBigUint64(336, data.AcceptPrivateSensorTypeInfo === null ? 0n : BigInt(util.toPointer(data.AcceptPrivateSensorTypeInfo)), true);
  // 0x158: pointer
  if (data?.CreateEnrollmentAuthenticated !== undefined) view.setBigUint64(344, data.CreateEnrollmentAuthenticated === null ? 0n : BigInt(util.toPointer(data.CreateEnrollmentAuthenticated)), true);
  // 0x160: pointer
  if (data?.IdentifyFeatureSetAuthenticated !== undefined) view.setBigUint64(352, data.IdentifyFeatureSetAuthenticated === null ? 0n : BigInt(util.toPointer(data.IdentifyFeatureSetAuthenticated)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_STORAGE_INTERFACE (size: 272)
 */
export interface WINBIO_STORAGE_INTERFACE {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_ADAPTER_INTERFACE_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Type: number;
  /** usize */
  Size: Deno.PointerValue;
  /** System.Guid */
  AdapterId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_ATTACH_FN */
  Attach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_DETACH_FN */
  Detach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CLEAR_CONTEXT_FN */
  ClearContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CREATE_DATABASE_FN */
  CreateDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_ERASE_DATABASE_FN */
  EraseDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_OPEN_DATABASE_FN */
  OpenDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CLOSE_DATABASE_FN */
  CloseDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_GET_DATA_FORMAT_FN */
  GetDataFormat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_GET_DATABASE_SIZE_FN */
  GetDatabaseSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_ADD_RECORD_FN */
  AddRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_DELETE_RECORD_FN */
  DeleteRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_QUERY_BY_SUBJECT_FN */
  QueryBySubject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_QUERY_BY_CONTENT_FN */
  QueryByContent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_GET_RECORD_COUNT_FN */
  GetRecordCount: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_FIRST_RECORD_FN */
  FirstRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_NEXT_RECORD_FN */
  NextRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_GET_CURRENT_RECORD_FN */
  GetCurrentRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CONTROL_UNIT_FN */
  ControlUnit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CONTROL_UNIT_PRIVILEGED_FN */
  ControlUnitPrivileged: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_NOTIFY_POWER_CHANGE_FN */
  NotifyPowerChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_PIPELINE_INIT_FN */
  PipelineInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_PIPELINE_CLEANUP_FN */
  PipelineCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_ACTIVATE_FN */
  Activate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_DEACTIVATE_FN */
  Deactivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_QUERY_EXTENDED_INFO_FN */
  QueryExtendedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_NOTIFY_DATABASE_CHANGE_FN */
  NotifyDatabaseChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_RESERVED_1_FN */
  Reserved1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_RESERVED_2_FN */
  Reserved2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_UPDATE_RECORD_BEGIN_FN */
  UpdateRecordBegin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_UPDATE_RECORD_COMMIT_FN */
  UpdateRecordCommit: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_STORAGE_INTERFACE = 272;

export function allocWINBIO_STORAGE_INTERFACE(data?: Partial<WINBIO_STORAGE_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_STORAGE_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Version !== undefined) view.setBigUint64(0, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x08: u32
  if (data?.Type !== undefined) view.setUint32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  // 0x18: pointer
  if (data?.AdapterId !== undefined) view.setBigUint64(24, data.AdapterId === null ? 0n : BigInt(util.toPointer(data.AdapterId)), true);
  // 0x20: pointer
  if (data?.Attach !== undefined) view.setBigUint64(32, data.Attach === null ? 0n : BigInt(util.toPointer(data.Attach)), true);
  // 0x28: pointer
  if (data?.Detach !== undefined) view.setBigUint64(40, data.Detach === null ? 0n : BigInt(util.toPointer(data.Detach)), true);
  // 0x30: pointer
  if (data?.ClearContext !== undefined) view.setBigUint64(48, data.ClearContext === null ? 0n : BigInt(util.toPointer(data.ClearContext)), true);
  // 0x38: pointer
  if (data?.CreateDatabase !== undefined) view.setBigUint64(56, data.CreateDatabase === null ? 0n : BigInt(util.toPointer(data.CreateDatabase)), true);
  // 0x40: pointer
  if (data?.EraseDatabase !== undefined) view.setBigUint64(64, data.EraseDatabase === null ? 0n : BigInt(util.toPointer(data.EraseDatabase)), true);
  // 0x48: pointer
  if (data?.OpenDatabase !== undefined) view.setBigUint64(72, data.OpenDatabase === null ? 0n : BigInt(util.toPointer(data.OpenDatabase)), true);
  // 0x50: pointer
  if (data?.CloseDatabase !== undefined) view.setBigUint64(80, data.CloseDatabase === null ? 0n : BigInt(util.toPointer(data.CloseDatabase)), true);
  // 0x58: pointer
  if (data?.GetDataFormat !== undefined) view.setBigUint64(88, data.GetDataFormat === null ? 0n : BigInt(util.toPointer(data.GetDataFormat)), true);
  // 0x60: pointer
  if (data?.GetDatabaseSize !== undefined) view.setBigUint64(96, data.GetDatabaseSize === null ? 0n : BigInt(util.toPointer(data.GetDatabaseSize)), true);
  // 0x68: pointer
  if (data?.AddRecord !== undefined) view.setBigUint64(104, data.AddRecord === null ? 0n : BigInt(util.toPointer(data.AddRecord)), true);
  // 0x70: pointer
  if (data?.DeleteRecord !== undefined) view.setBigUint64(112, data.DeleteRecord === null ? 0n : BigInt(util.toPointer(data.DeleteRecord)), true);
  // 0x78: pointer
  if (data?.QueryBySubject !== undefined) view.setBigUint64(120, data.QueryBySubject === null ? 0n : BigInt(util.toPointer(data.QueryBySubject)), true);
  // 0x80: pointer
  if (data?.QueryByContent !== undefined) view.setBigUint64(128, data.QueryByContent === null ? 0n : BigInt(util.toPointer(data.QueryByContent)), true);
  // 0x88: pointer
  if (data?.GetRecordCount !== undefined) view.setBigUint64(136, data.GetRecordCount === null ? 0n : BigInt(util.toPointer(data.GetRecordCount)), true);
  // 0x90: pointer
  if (data?.FirstRecord !== undefined) view.setBigUint64(144, data.FirstRecord === null ? 0n : BigInt(util.toPointer(data.FirstRecord)), true);
  // 0x98: pointer
  if (data?.NextRecord !== undefined) view.setBigUint64(152, data.NextRecord === null ? 0n : BigInt(util.toPointer(data.NextRecord)), true);
  // 0xa0: pointer
  if (data?.GetCurrentRecord !== undefined) view.setBigUint64(160, data.GetCurrentRecord === null ? 0n : BigInt(util.toPointer(data.GetCurrentRecord)), true);
  // 0xa8: pointer
  if (data?.ControlUnit !== undefined) view.setBigUint64(168, data.ControlUnit === null ? 0n : BigInt(util.toPointer(data.ControlUnit)), true);
  // 0xb0: pointer
  if (data?.ControlUnitPrivileged !== undefined) view.setBigUint64(176, data.ControlUnitPrivileged === null ? 0n : BigInt(util.toPointer(data.ControlUnitPrivileged)), true);
  // 0xb8: pointer
  if (data?.NotifyPowerChange !== undefined) view.setBigUint64(184, data.NotifyPowerChange === null ? 0n : BigInt(util.toPointer(data.NotifyPowerChange)), true);
  // 0xc0: pointer
  if (data?.PipelineInit !== undefined) view.setBigUint64(192, data.PipelineInit === null ? 0n : BigInt(util.toPointer(data.PipelineInit)), true);
  // 0xc8: pointer
  if (data?.PipelineCleanup !== undefined) view.setBigUint64(200, data.PipelineCleanup === null ? 0n : BigInt(util.toPointer(data.PipelineCleanup)), true);
  // 0xd0: pointer
  if (data?.Activate !== undefined) view.setBigUint64(208, data.Activate === null ? 0n : BigInt(util.toPointer(data.Activate)), true);
  // 0xd8: pointer
  if (data?.Deactivate !== undefined) view.setBigUint64(216, data.Deactivate === null ? 0n : BigInt(util.toPointer(data.Deactivate)), true);
  // 0xe0: pointer
  if (data?.QueryExtendedInfo !== undefined) view.setBigUint64(224, data.QueryExtendedInfo === null ? 0n : BigInt(util.toPointer(data.QueryExtendedInfo)), true);
  // 0xe8: pointer
  if (data?.NotifyDatabaseChange !== undefined) view.setBigUint64(232, data.NotifyDatabaseChange === null ? 0n : BigInt(util.toPointer(data.NotifyDatabaseChange)), true);
  // 0xf0: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(240, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0xf8: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(248, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x100: pointer
  if (data?.UpdateRecordBegin !== undefined) view.setBigUint64(256, data.UpdateRecordBegin === null ? 0n : BigInt(util.toPointer(data.UpdateRecordBegin)), true);
  // 0x108: pointer
  if (data?.UpdateRecordCommit !== undefined) view.setBigUint64(264, data.UpdateRecordCommit === null ? 0n : BigInt(util.toPointer(data.UpdateRecordCommit)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_FRAMEWORK_INTERFACE (size: 384)
 */
export interface WINBIO_FRAMEWORK_INTERFACE {
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_ADAPTER_INTERFACE_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Type: number;
  /** usize */
  Size: Deno.PointerValue;
  /** System.Guid */
  AdapterId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_SET_UNIT_STATUS_FN */
  SetUnitStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_ATTACH_FN */
  VsmStorageAttach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_DETACH_FN */
  VsmStorageDetach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CLEAR_CONTEXT_FN */
  VsmStorageClearContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CREATE_DATABASE_FN */
  VsmStorageCreateDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_OPEN_DATABASE_FN */
  VsmStorageOpenDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_CLOSE_DATABASE_FN */
  VsmStorageCloseDatabase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_DELETE_RECORD_FN */
  VsmStorageDeleteRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_NOTIFY_POWER_CHANGE_FN */
  VsmStorageNotifyPowerChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_PIPELINE_INIT_FN */
  VsmStoragePipelineInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_PIPELINE_CLEANUP_FN */
  VsmStoragePipelineCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_ACTIVATE_FN */
  VsmStorageActivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_DEACTIVATE_FN */
  VsmStorageDeactivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_QUERY_EXTENDED_INFO_FN */
  VsmStorageQueryExtendedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_CLEAR_FN */
  VsmStorageCacheClear: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_IMPORT_BEGIN_FN */
  VsmStorageCacheImportBegin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_IMPORT_NEXT_FN */
  VsmStorageCacheImportNext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_IMPORT_END_FN */
  VsmStorageCacheImportEnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_EXPORT_BEGIN_FN */
  VsmStorageCacheExportBegin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_EXPORT_NEXT_FN */
  VsmStorageCacheExportNext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_CACHE_EXPORT_END_FN */
  VsmStorageCacheExportEnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ATTACH_FN */
  VsmSensorAttach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_DETACH_FN */
  VsmSensorDetach: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_CLEAR_CONTEXT_FN */
  VsmSensorClearContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_PUSH_DATA_TO_ENGINE_FN */
  VsmSensorPushDataToEngine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_NOTIFY_POWER_CHANGE_FN */
  VsmSensorNotifyPowerChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_PIPELINE_INIT_FN */
  VsmSensorPipelineInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_PIPELINE_CLEANUP_FN */
  VsmSensorPipelineCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ACTIVATE_FN */
  VsmSensorActivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_DEACTIVATE_FN */
  VsmSensorDeactivate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ASYNC_IMPORT_RAW_BUFFER_FN */
  VsmSensorAsyncImportRawBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_SENSOR_ASYNC_IMPORT_SECURE_BUFFER_FN */
  VsmSensorAsyncImportSecureBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_STORAGE_RESERVED_1_FN */
  Reserved1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_STORAGE_RESERVED_2_FN */
  Reserved2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_STORAGE_RESERVED_3_FN */
  Reserved3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_RESERVED_1_FN */
  Reserved4: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_STORAGE_RESERVED_2_FN */
  Reserved5: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_ALLOCATE_MEMORY_FN */
  AllocateMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_FREE_MEMORY_FN */
  FreeMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_GET_PROPERTY_FN */
  GetProperty: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_LOCK_AND_VALIDATE_SECURE_BUFFER_FN */
  LockAndValidateSecureBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_RELEASE_SECURE_BUFFER_FN */
  ReleaseSecureBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_QUERY_AUTHORIZED_ENROLLMENTS_FN */
  QueryAuthorizedEnrollments: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.PIBIO_FRAMEWORK_VSM_DECRYPT_SAMPLE_FN */
  DecryptSample: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_FRAMEWORK_INTERFACE = 384;

export function allocWINBIO_FRAMEWORK_INTERFACE(data?: Partial<WINBIO_FRAMEWORK_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_FRAMEWORK_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Version !== undefined) view.setBigUint64(0, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x08: u32
  if (data?.Type !== undefined) view.setUint32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.Size !== undefined) view.setBigUint64(16, BigInt(data.Size), true);
  // 0x18: pointer
  if (data?.AdapterId !== undefined) view.setBigUint64(24, data.AdapterId === null ? 0n : BigInt(util.toPointer(data.AdapterId)), true);
  // 0x20: pointer
  if (data?.SetUnitStatus !== undefined) view.setBigUint64(32, data.SetUnitStatus === null ? 0n : BigInt(util.toPointer(data.SetUnitStatus)), true);
  // 0x28: pointer
  if (data?.VsmStorageAttach !== undefined) view.setBigUint64(40, data.VsmStorageAttach === null ? 0n : BigInt(util.toPointer(data.VsmStorageAttach)), true);
  // 0x30: pointer
  if (data?.VsmStorageDetach !== undefined) view.setBigUint64(48, data.VsmStorageDetach === null ? 0n : BigInt(util.toPointer(data.VsmStorageDetach)), true);
  // 0x38: pointer
  if (data?.VsmStorageClearContext !== undefined) view.setBigUint64(56, data.VsmStorageClearContext === null ? 0n : BigInt(util.toPointer(data.VsmStorageClearContext)), true);
  // 0x40: pointer
  if (data?.VsmStorageCreateDatabase !== undefined) view.setBigUint64(64, data.VsmStorageCreateDatabase === null ? 0n : BigInt(util.toPointer(data.VsmStorageCreateDatabase)), true);
  // 0x48: pointer
  if (data?.VsmStorageOpenDatabase !== undefined) view.setBigUint64(72, data.VsmStorageOpenDatabase === null ? 0n : BigInt(util.toPointer(data.VsmStorageOpenDatabase)), true);
  // 0x50: pointer
  if (data?.VsmStorageCloseDatabase !== undefined) view.setBigUint64(80, data.VsmStorageCloseDatabase === null ? 0n : BigInt(util.toPointer(data.VsmStorageCloseDatabase)), true);
  // 0x58: pointer
  if (data?.VsmStorageDeleteRecord !== undefined) view.setBigUint64(88, data.VsmStorageDeleteRecord === null ? 0n : BigInt(util.toPointer(data.VsmStorageDeleteRecord)), true);
  // 0x60: pointer
  if (data?.VsmStorageNotifyPowerChange !== undefined) view.setBigUint64(96, data.VsmStorageNotifyPowerChange === null ? 0n : BigInt(util.toPointer(data.VsmStorageNotifyPowerChange)), true);
  // 0x68: pointer
  if (data?.VsmStoragePipelineInit !== undefined) view.setBigUint64(104, data.VsmStoragePipelineInit === null ? 0n : BigInt(util.toPointer(data.VsmStoragePipelineInit)), true);
  // 0x70: pointer
  if (data?.VsmStoragePipelineCleanup !== undefined) view.setBigUint64(112, data.VsmStoragePipelineCleanup === null ? 0n : BigInt(util.toPointer(data.VsmStoragePipelineCleanup)), true);
  // 0x78: pointer
  if (data?.VsmStorageActivate !== undefined) view.setBigUint64(120, data.VsmStorageActivate === null ? 0n : BigInt(util.toPointer(data.VsmStorageActivate)), true);
  // 0x80: pointer
  if (data?.VsmStorageDeactivate !== undefined) view.setBigUint64(128, data.VsmStorageDeactivate === null ? 0n : BigInt(util.toPointer(data.VsmStorageDeactivate)), true);
  // 0x88: pointer
  if (data?.VsmStorageQueryExtendedInfo !== undefined) view.setBigUint64(136, data.VsmStorageQueryExtendedInfo === null ? 0n : BigInt(util.toPointer(data.VsmStorageQueryExtendedInfo)), true);
  // 0x90: pointer
  if (data?.VsmStorageCacheClear !== undefined) view.setBigUint64(144, data.VsmStorageCacheClear === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheClear)), true);
  // 0x98: pointer
  if (data?.VsmStorageCacheImportBegin !== undefined) view.setBigUint64(152, data.VsmStorageCacheImportBegin === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheImportBegin)), true);
  // 0xa0: pointer
  if (data?.VsmStorageCacheImportNext !== undefined) view.setBigUint64(160, data.VsmStorageCacheImportNext === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheImportNext)), true);
  // 0xa8: pointer
  if (data?.VsmStorageCacheImportEnd !== undefined) view.setBigUint64(168, data.VsmStorageCacheImportEnd === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheImportEnd)), true);
  // 0xb0: pointer
  if (data?.VsmStorageCacheExportBegin !== undefined) view.setBigUint64(176, data.VsmStorageCacheExportBegin === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheExportBegin)), true);
  // 0xb8: pointer
  if (data?.VsmStorageCacheExportNext !== undefined) view.setBigUint64(184, data.VsmStorageCacheExportNext === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheExportNext)), true);
  // 0xc0: pointer
  if (data?.VsmStorageCacheExportEnd !== undefined) view.setBigUint64(192, data.VsmStorageCacheExportEnd === null ? 0n : BigInt(util.toPointer(data.VsmStorageCacheExportEnd)), true);
  // 0xc8: pointer
  if (data?.VsmSensorAttach !== undefined) view.setBigUint64(200, data.VsmSensorAttach === null ? 0n : BigInt(util.toPointer(data.VsmSensorAttach)), true);
  // 0xd0: pointer
  if (data?.VsmSensorDetach !== undefined) view.setBigUint64(208, data.VsmSensorDetach === null ? 0n : BigInt(util.toPointer(data.VsmSensorDetach)), true);
  // 0xd8: pointer
  if (data?.VsmSensorClearContext !== undefined) view.setBigUint64(216, data.VsmSensorClearContext === null ? 0n : BigInt(util.toPointer(data.VsmSensorClearContext)), true);
  // 0xe0: pointer
  if (data?.VsmSensorPushDataToEngine !== undefined) view.setBigUint64(224, data.VsmSensorPushDataToEngine === null ? 0n : BigInt(util.toPointer(data.VsmSensorPushDataToEngine)), true);
  // 0xe8: pointer
  if (data?.VsmSensorNotifyPowerChange !== undefined) view.setBigUint64(232, data.VsmSensorNotifyPowerChange === null ? 0n : BigInt(util.toPointer(data.VsmSensorNotifyPowerChange)), true);
  // 0xf0: pointer
  if (data?.VsmSensorPipelineInit !== undefined) view.setBigUint64(240, data.VsmSensorPipelineInit === null ? 0n : BigInt(util.toPointer(data.VsmSensorPipelineInit)), true);
  // 0xf8: pointer
  if (data?.VsmSensorPipelineCleanup !== undefined) view.setBigUint64(248, data.VsmSensorPipelineCleanup === null ? 0n : BigInt(util.toPointer(data.VsmSensorPipelineCleanup)), true);
  // 0x100: pointer
  if (data?.VsmSensorActivate !== undefined) view.setBigUint64(256, data.VsmSensorActivate === null ? 0n : BigInt(util.toPointer(data.VsmSensorActivate)), true);
  // 0x108: pointer
  if (data?.VsmSensorDeactivate !== undefined) view.setBigUint64(264, data.VsmSensorDeactivate === null ? 0n : BigInt(util.toPointer(data.VsmSensorDeactivate)), true);
  // 0x110: pointer
  if (data?.VsmSensorAsyncImportRawBuffer !== undefined) view.setBigUint64(272, data.VsmSensorAsyncImportRawBuffer === null ? 0n : BigInt(util.toPointer(data.VsmSensorAsyncImportRawBuffer)), true);
  // 0x118: pointer
  if (data?.VsmSensorAsyncImportSecureBuffer !== undefined) view.setBigUint64(280, data.VsmSensorAsyncImportSecureBuffer === null ? 0n : BigInt(util.toPointer(data.VsmSensorAsyncImportSecureBuffer)), true);
  // 0x120: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(288, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x128: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(296, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x130: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(304, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x138: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(312, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0x140: pointer
  if (data?.Reserved5 !== undefined) view.setBigUint64(320, data.Reserved5 === null ? 0n : BigInt(util.toPointer(data.Reserved5)), true);
  // 0x148: pointer
  if (data?.AllocateMemory !== undefined) view.setBigUint64(328, data.AllocateMemory === null ? 0n : BigInt(util.toPointer(data.AllocateMemory)), true);
  // 0x150: pointer
  if (data?.FreeMemory !== undefined) view.setBigUint64(336, data.FreeMemory === null ? 0n : BigInt(util.toPointer(data.FreeMemory)), true);
  // 0x158: pointer
  if (data?.GetProperty !== undefined) view.setBigUint64(344, data.GetProperty === null ? 0n : BigInt(util.toPointer(data.GetProperty)), true);
  // 0x160: pointer
  if (data?.LockAndValidateSecureBuffer !== undefined) view.setBigUint64(352, data.LockAndValidateSecureBuffer === null ? 0n : BigInt(util.toPointer(data.LockAndValidateSecureBuffer)), true);
  // 0x168: pointer
  if (data?.ReleaseSecureBuffer !== undefined) view.setBigUint64(360, data.ReleaseSecureBuffer === null ? 0n : BigInt(util.toPointer(data.ReleaseSecureBuffer)), true);
  // 0x170: pointer
  if (data?.QueryAuthorizedEnrollments !== undefined) view.setBigUint64(368, data.QueryAuthorizedEnrollments === null ? 0n : BigInt(util.toPointer(data.QueryAuthorizedEnrollments)), true);
  // 0x178: pointer
  if (data?.DecryptSample !== undefined) view.setBigUint64(376, data.DecryptSample === null ? 0n : BigInt(util.toPointer(data.DecryptSample)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SENSOR_ATTRIBUTES (size: 88)
 */
export interface WINBIO_SENSOR_ATTRIBUTES {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_VERSION */
  WinBioVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SensorType: number;
  /** u32 */
  SensorSubType: number;
  /** u32 */
  Capabilities: number;
  /** array */
  ManufacturerName: Deno.PointerValue | null;
  /** array */
  ModelName: Deno.PointerValue | null;
  /** array */
  SerialNumber: Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_VERSION */
  FirmwareVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SupportedFormatEntries: number;
  /** array */
  SupportedFormat: Deno.PointerValue | null;
}

export const sizeofWINBIO_SENSOR_ATTRIBUTES = 88;

export function allocWINBIO_SENSOR_ATTRIBUTES(data?: Partial<WINBIO_SENSOR_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SENSOR_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: pointer
  if (data?.WinBioVersion !== undefined) view.setBigUint64(16, data.WinBioVersion === null ? 0n : BigInt(util.toPointer(data.WinBioVersion)), true);
  // 0x18: u32
  if (data?.SensorType !== undefined) view.setUint32(24, Number(data.SensorType), true);
  // 0x1c: u32
  if (data?.SensorSubType !== undefined) view.setUint32(28, Number(data.SensorSubType), true);
  // 0x20: u32
  if (data?.Capabilities !== undefined) view.setUint32(32, Number(data.Capabilities), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ManufacturerName !== undefined) view.setBigUint64(40, data.ManufacturerName === null ? 0n : BigInt(util.toPointer(data.ManufacturerName)), true);
  // 0x30: pointer
  if (data?.ModelName !== undefined) view.setBigUint64(48, data.ModelName === null ? 0n : BigInt(util.toPointer(data.ModelName)), true);
  // 0x38: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(56, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x40: pointer
  if (data?.FirmwareVersion !== undefined) view.setBigUint64(64, data.FirmwareVersion === null ? 0n : BigInt(util.toPointer(data.FirmwareVersion)), true);
  // 0x48: u32
  if (data?.SupportedFormatEntries !== undefined) view.setUint32(72, Number(data.SupportedFormatEntries), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.SupportedFormat !== undefined) view.setBigUint64(80, data.SupportedFormat === null ? 0n : BigInt(util.toPointer(data.SupportedFormat)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_DATA (size: 16)
 */
export interface WINBIO_DATA {
  /** u32 */
  Size: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofWINBIO_DATA = 16;

export function allocWINBIO_DATA(data?: Partial<WINBIO_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_UPDATE_FIRMWARE (size: 16)
 */
export interface WINBIO_UPDATE_FIRMWARE {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_DATA */
  FirmwareData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_UPDATE_FIRMWARE = 16;

export function allocWINBIO_UPDATE_FIRMWARE(data?: Partial<WINBIO_UPDATE_FIRMWARE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_UPDATE_FIRMWARE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.FirmwareData !== undefined) view.setBigUint64(8, data.FirmwareData === null ? 0n : BigInt(util.toPointer(data.FirmwareData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_CALIBRATION_INFO (size: 24)
 */
export interface WINBIO_CALIBRATION_INFO {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_DATA */
  CalibrationData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_CALIBRATION_INFO = 24;

export function allocWINBIO_CALIBRATION_INFO(data?: Partial<WINBIO_CALIBRATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_CALIBRATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: pointer
  if (data?.CalibrationData !== undefined) view.setBigUint64(16, data.CalibrationData === null ? 0n : BigInt(util.toPointer(data.CalibrationData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_DIAGNOSTICS (size: 32)
 */
export interface WINBIO_DIAGNOSTICS {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SensorStatus: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_DATA */
  VendorDiagnostics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_DIAGNOSTICS = 32;

export function allocWINBIO_DIAGNOSTICS(data?: Partial<WINBIO_DIAGNOSTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_DIAGNOSTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: u32
  if (data?.SensorStatus !== undefined) view.setUint32(16, Number(data.SensorStatus), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.VendorDiagnostics !== undefined) view.setBigUint64(24, data.VendorDiagnostics === null ? 0n : BigInt(util.toPointer(data.VendorDiagnostics)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_BLANK_PAYLOAD (size: 16)
 */
export interface WINBIO_BLANK_PAYLOAD {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_BLANK_PAYLOAD = 16;

export function allocWINBIO_BLANK_PAYLOAD(data?: Partial<WINBIO_BLANK_PAYLOAD>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_BLANK_PAYLOAD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_CAPTURE_PARAMETERS (size: 32)
 */
export interface WINBIO_CAPTURE_PARAMETERS {
  /** u32 */
  PayloadSize: number;
  /** u8 */
  Purpose: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_REGISTERED_FORMAT */
  Format: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  VendorFormat: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Flags: number;
}

export const sizeofWINBIO_CAPTURE_PARAMETERS = 32;

export function allocWINBIO_CAPTURE_PARAMETERS(data?: Partial<WINBIO_CAPTURE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_CAPTURE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: u8
  if (data?.Purpose !== undefined) view.setUint8(4, Number(data.Purpose));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.Format !== undefined) view.setBigUint64(8, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  // 0x10: pointer
  if (data?.VendorFormat !== undefined) view.setBigUint64(16, data.VendorFormat === null ? 0n : BigInt(util.toPointer(data.VendorFormat)), true);
  // 0x18: u8
  if (data?.Flags !== undefined) view.setUint8(24, Number(data.Flags));
  // 0x19: pad7
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_CAPTURE_DATA (size: 32)
 */
export interface WINBIO_CAPTURE_DATA {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SensorStatus: number;
  /** u32 */
  RejectDetail: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_DATA */
  CaptureData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_CAPTURE_DATA = 32;

export function allocWINBIO_CAPTURE_DATA(data?: Partial<WINBIO_CAPTURE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_CAPTURE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: u32
  if (data?.SensorStatus !== undefined) view.setUint32(16, Number(data.SensorStatus), true);
  // 0x14: u32
  if (data?.RejectDetail !== undefined) view.setUint32(20, Number(data.RejectDetail), true);
  // 0x18: pointer
  if (data?.CaptureData !== undefined) view.setBigUint64(24, data.CaptureData === null ? 0n : BigInt(util.toPointer(data.CaptureData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SUPPORTED_ALGORITHMS (size: 32)
 */
export interface WINBIO_SUPPORTED_ALGORITHMS {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumberOfAlgorithms: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_DATA */
  AlgorithmData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_SUPPORTED_ALGORITHMS = 32;

export function allocWINBIO_SUPPORTED_ALGORITHMS(data?: Partial<WINBIO_SUPPORTED_ALGORITHMS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SUPPORTED_ALGORITHMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: u32
  if (data?.NumberOfAlgorithms !== undefined) view.setUint32(16, Number(data.NumberOfAlgorithms), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AlgorithmData !== undefined) view.setBigUint64(24, data.AlgorithmData === null ? 0n : BigInt(util.toPointer(data.AlgorithmData)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_GET_INDICATOR (size: 24)
 */
export interface WINBIO_GET_INDICATOR {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  IndicatorStatus: number;
}

export const sizeofWINBIO_GET_INDICATOR = 24;

export function allocWINBIO_GET_INDICATOR(data?: Partial<WINBIO_GET_INDICATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_GET_INDICATOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: u32
  if (data?.IndicatorStatus !== undefined) view.setUint32(16, Number(data.IndicatorStatus), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_SET_INDICATOR (size: 8)
 */
export interface WINBIO_SET_INDICATOR {
  /** u32 */
  PayloadSize: number;
  /** u32 */
  IndicatorStatus: number;
}

export const sizeofWINBIO_SET_INDICATOR = 8;

export function allocWINBIO_SET_INDICATOR(data?: Partial<WINBIO_SET_INDICATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_SET_INDICATOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: u32
  if (data?.IndicatorStatus !== undefined) view.setUint32(4, Number(data.IndicatorStatus), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_PRIVATE_SENSOR_TYPE_INFO (size: 24)
 */
export interface WINBIO_PRIVATE_SENSOR_TYPE_INFO {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_DATA */
  PrivateSensorTypeInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_PRIVATE_SENSOR_TYPE_INFO = 24;

export function allocWINBIO_PRIVATE_SENSOR_TYPE_INFO(data?: Partial<WINBIO_PRIVATE_SENSOR_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_PRIVATE_SENSOR_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: pointer
  if (data?.PrivateSensorTypeInfo !== undefined) view.setBigUint64(16, data.PrivateSensorTypeInfo === null ? 0n : BigInt(util.toPointer(data.PrivateSensorTypeInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_ENCRYPTED_CAPTURE_PARAMS (size: 32)
 */
export interface WINBIO_ENCRYPTED_CAPTURE_PARAMS {
  /** u32 */
  PayloadSize: number;
  /** u8 */
  Purpose: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_REGISTERED_FORMAT */
  Format: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  VendorFormat: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Flags: number;
  /** u32 */
  NonceSize: number;
}

export const sizeofWINBIO_ENCRYPTED_CAPTURE_PARAMS = 32;

export function allocWINBIO_ENCRYPTED_CAPTURE_PARAMS(data?: Partial<WINBIO_ENCRYPTED_CAPTURE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_ENCRYPTED_CAPTURE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: u8
  if (data?.Purpose !== undefined) view.setUint8(4, Number(data.Purpose));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.Format !== undefined) view.setBigUint64(8, data.Format === null ? 0n : BigInt(util.toPointer(data.Format)), true);
  // 0x10: pointer
  if (data?.VendorFormat !== undefined) view.setBigUint64(16, data.VendorFormat === null ? 0n : BigInt(util.toPointer(data.VendorFormat)), true);
  // 0x18: u8
  if (data?.Flags !== undefined) view.setUint8(24, Number(data.Flags));
  // 0x19: u32
  if (data?.NonceSize !== undefined) view.setUint32(25, Number(data.NonceSize), true);
  // 0x1d: pad3
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_NOTIFY_WAKE (size: 24)
 */
export interface WINBIO_NOTIFY_WAKE {
  /** u32 */
  PayloadSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  WinBioHresult: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reason: number;
}

export const sizeofWINBIO_NOTIFY_WAKE = 24;

export function allocWINBIO_NOTIFY_WAKE(data?: Partial<WINBIO_NOTIFY_WAKE>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_NOTIFY_WAKE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PayloadSize !== undefined) view.setUint32(0, Number(data.PayloadSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.WinBioHresult !== undefined) view.setBigUint64(8, data.WinBioHresult === null ? 0n : BigInt(util.toPointer(data.WinBioHresult)), true);
  // 0x10: u32
  if (data?.Reason !== undefined) view.setUint32(16, Number(data.Reason), true);
  // 0x14: pad4
  return buf;
}

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libwinbio = Deno.dlopen("winbio", {
    WinBioEnumServiceProviders: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioEnumBiometricUnits: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioEnumDatabases: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioAsyncOpenFramework: {
      parameters: ["i32", "pointer", "u32", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    WinBioCloseFramework: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioAsyncEnumServiceProviders: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioAsyncEnumBiometricUnits: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioAsyncEnumDatabases: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioAsyncMonitorFrameworkChanges: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioOpenSession: {
      parameters: ["u32", "u32", "u32", "pointer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioAsyncOpenSession: {
      parameters: ["u32", "u32", "u32", "pointer", "usize", "pointer", "i32", "pointer", "u32", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    WinBioCloseSession: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioVerify: {
      parameters: ["u32", "pointer", "u8", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioVerifyWithCallback: {
      parameters: ["u32", "pointer", "u8", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioIdentify: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioIdentifyWithCallback: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioWait: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioCancel: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioLocateSensor: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    WinBioLocateSensorWithCallback: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioEnrollBegin: {
      parameters: ["u32", "u8", "u32"],
      result: "pointer",
    },
    WinBioEnrollSelect: {
      parameters: ["u32", "u64"],
      result: "pointer",
    },
    WinBioEnrollCapture: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    WinBioEnrollCaptureWithCallback: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioEnrollCommit: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioEnrollDiscard: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioEnumEnrollments: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioImproveBegin: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioImproveEnd: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioRegisterEventMonitor: {
      parameters: ["u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioUnregisterEventMonitor: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioMonitorPresence: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioCaptureSample: {
      parameters: ["u32", "u8", "u8", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioCaptureSampleWithCallback: {
      parameters: ["u32", "u8", "u8", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioDeleteTemplate: {
      parameters: ["u32", "u32", "pointer", "u8"],
      result: "pointer",
    },
    WinBioLockUnit: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioUnlockUnit: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    WinBioControlUnit: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "usize", "pointer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioControlUnitPrivileged: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "usize", "pointer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioGetProperty: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "u8", "pointer", "pointer"],
      result: "pointer",
    },
    WinBioSetProperty: {
      parameters: ["u32", "u32", "u32", "u32", "pointer", "u8", "pointer", "usize"],
      result: "pointer",
    },
    WinBioFree: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WinBioSetCredential: {
      parameters: ["i32", "pointer", "usize", "i32"],
      result: "pointer",
    },
    WinBioRemoveCredential: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    WinBioRemoveAllCredentials: {
      parameters: [],
      result: "pointer",
    },
    WinBioRemoveAllDomainCredentials: {
      parameters: [],
      result: "pointer",
    },
    WinBioGetCredentialState: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    WinBioLogonIdentifiedUser: {
      parameters: ["u32"],
      result: "pointer",
    },
    WinBioGetEnrolledFactors: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WinBioGetEnabledSetting: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    WinBioGetLogonSetting: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    WinBioGetDomainLogonSetting: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    WinBioAcquireFocus: {
      parameters: [],
      result: "pointer",
    },
    WinBioReleaseFocus: {
      parameters: [],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WinBioEnumServiceProviders(
  Factor: number /* u32 */,
  BspSchemaArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  BspCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnumServiceProviders(Factor, util.toPointer(BspSchemaArray), util.toPointer(BspCount)));
}

export function WinBioEnumBiometricUnits(
  Factor: number /* u32 */,
  UnitSchemaArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnitCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnumBiometricUnits(Factor, util.toPointer(UnitSchemaArray), util.toPointer(UnitCount)));
}

export function WinBioEnumDatabases(
  Factor: number /* u32 */,
  StorageSchemaArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  StorageCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnumDatabases(Factor, util.toPointer(StorageSchemaArray), util.toPointer(StorageCount)));
}

export function WinBioAsyncOpenFramework(
  NotificationMethod: WINBIO_ASYNC_NOTIFICATION_METHOD /* Windows.Win32.Devices.BiometricFramework.WINBIO_ASYNC_NOTIFICATION_METHOD */,
  TargetWindow: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  MessageCode: number /* u32 */,
  CallbackRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_ASYNC_COMPLETION_CALLBACK */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  AsynchronousOpen: boolean /* Windows.Win32.Foundation.BOOL */,
  FrameworkHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAsyncOpenFramework(NotificationMethod, util.hwndToFfi(TargetWindow), MessageCode, util.toPointer(CallbackRoutine), util.toPointer(UserData), util.boolToFfi(AsynchronousOpen), util.toPointer(FrameworkHandle)));
}

export function WinBioCloseFramework(
  FrameworkHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioCloseFramework(FrameworkHandle));
}

export function WinBioAsyncEnumServiceProviders(
  FrameworkHandle: number /* u32 */,
  Factor: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAsyncEnumServiceProviders(FrameworkHandle, Factor));
}

export function WinBioAsyncEnumBiometricUnits(
  FrameworkHandle: number /* u32 */,
  Factor: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAsyncEnumBiometricUnits(FrameworkHandle, Factor));
}

export function WinBioAsyncEnumDatabases(
  FrameworkHandle: number /* u32 */,
  Factor: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAsyncEnumDatabases(FrameworkHandle, Factor));
}

export function WinBioAsyncMonitorFrameworkChanges(
  FrameworkHandle: number /* u32 */,
  ChangeTypes: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAsyncMonitorFrameworkChanges(FrameworkHandle, ChangeTypes));
}

export function WinBioOpenSession(
  Factor: number /* u32 */,
  PoolType: WINBIO_POOL /* Windows.Win32.Devices.BiometricFramework.WINBIO_POOL */,
  Flags: number /* u32 */,
  UnitArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnitCount: Deno.PointerValue /* usize */,
  DatabaseId: Deno.PointerValue | Uint8Array | null /* ptr */,
  SessionHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioOpenSession(Factor, PoolType, Flags, util.toPointer(UnitArray), UnitCount, util.toPointer(DatabaseId), util.toPointer(SessionHandle)));
}

export function WinBioAsyncOpenSession(
  Factor: number /* u32 */,
  PoolType: WINBIO_POOL /* Windows.Win32.Devices.BiometricFramework.WINBIO_POOL */,
  Flags: number /* u32 */,
  UnitArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  UnitCount: Deno.PointerValue /* usize */,
  DatabaseId: Deno.PointerValue | Uint8Array | null /* ptr */,
  NotificationMethod: WINBIO_ASYNC_NOTIFICATION_METHOD /* Windows.Win32.Devices.BiometricFramework.WINBIO_ASYNC_NOTIFICATION_METHOD */,
  TargetWindow: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  MessageCode: number /* u32 */,
  CallbackRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_ASYNC_COMPLETION_CALLBACK */,
  UserData: Deno.PointerValue | Uint8Array | null /* ptr */,
  AsynchronousOpen: boolean /* Windows.Win32.Foundation.BOOL */,
  SessionHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAsyncOpenSession(Factor, PoolType, Flags, util.toPointer(UnitArray), UnitCount, util.toPointer(DatabaseId), NotificationMethod, util.hwndToFfi(TargetWindow), MessageCode, util.toPointer(CallbackRoutine), util.toPointer(UserData), util.boolToFfi(AsynchronousOpen), util.toPointer(SessionHandle)));
}

export function WinBioCloseSession(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioCloseSession(SessionHandle));
}

export function WinBioVerify(
  SessionHandle: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactor: number /* u8 */,
  UnitId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Match: Deno.PointerValue | Uint8Array | null /* ptr */,
  RejectDetail: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioVerify(SessionHandle, util.toPointer(Identity), SubFactor, util.toPointer(UnitId), util.toPointer(Match), util.toPointer(RejectDetail)));
}

export function WinBioVerifyWithCallback(
  SessionHandle: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactor: number /* u8 */,
  VerifyCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_VERIFY_CALLBACK */,
  VerifyCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioVerifyWithCallback(SessionHandle, util.toPointer(Identity), SubFactor, util.toPointer(VerifyCallback), util.toPointer(VerifyCallbackContext)));
}

export function WinBioIdentify(
  SessionHandle: number /* u32 */,
  UnitId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactor: Deno.PointerValue | Uint8Array | null /* ptr */,
  RejectDetail: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioIdentify(SessionHandle, util.toPointer(UnitId), util.toPointer(Identity), util.toPointer(SubFactor), util.toPointer(RejectDetail)));
}

export function WinBioIdentifyWithCallback(
  SessionHandle: number /* u32 */,
  IdentifyCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_IDENTIFY_CALLBACK */,
  IdentifyCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioIdentifyWithCallback(SessionHandle, util.toPointer(IdentifyCallback), util.toPointer(IdentifyCallbackContext)));
}

export function WinBioWait(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioWait(SessionHandle));
}

export function WinBioCancel(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioCancel(SessionHandle));
}

export function WinBioLocateSensor(
  SessionHandle: number /* u32 */,
  UnitId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioLocateSensor(SessionHandle, util.toPointer(UnitId)));
}

export function WinBioLocateSensorWithCallback(
  SessionHandle: number /* u32 */,
  LocateCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_LOCATE_SENSOR_CALLBACK */,
  LocateCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioLocateSensorWithCallback(SessionHandle, util.toPointer(LocateCallback), util.toPointer(LocateCallbackContext)));
}

export function WinBioEnrollBegin(
  SessionHandle: number /* u32 */,
  SubFactor: number /* u8 */,
  UnitId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnrollBegin(SessionHandle, SubFactor, UnitId));
}

export function WinBioEnrollSelect(
  SessionHandle: number /* u32 */,
  SelectorValue: Deno.PointerValue /* u64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnrollSelect(SessionHandle, SelectorValue));
}

export function WinBioEnrollCapture(
  SessionHandle: number /* u32 */,
  RejectDetail: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnrollCapture(SessionHandle, util.toPointer(RejectDetail)));
}

export function WinBioEnrollCaptureWithCallback(
  SessionHandle: number /* u32 */,
  EnrollCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_ENROLL_CAPTURE_CALLBACK */,
  EnrollCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnrollCaptureWithCallback(SessionHandle, util.toPointer(EnrollCallback), util.toPointer(EnrollCallbackContext)));
}

export function WinBioEnrollCommit(
  SessionHandle: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  IsNewTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnrollCommit(SessionHandle, util.toPointer(Identity), util.toPointer(IsNewTemplate)));
}

export function WinBioEnrollDiscard(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnrollDiscard(SessionHandle));
}

export function WinBioEnumEnrollments(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactorArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactorCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioEnumEnrollments(SessionHandle, UnitId, util.toPointer(Identity), util.toPointer(SubFactorArray), util.toPointer(SubFactorCount)));
}

export function WinBioImproveBegin(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioImproveBegin(SessionHandle, UnitId));
}

export function WinBioImproveEnd(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioImproveEnd(SessionHandle));
}

export function WinBioRegisterEventMonitor(
  SessionHandle: number /* u32 */,
  EventMask: number /* u32 */,
  EventCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_EVENT_CALLBACK */,
  EventCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioRegisterEventMonitor(SessionHandle, EventMask, util.toPointer(EventCallback), util.toPointer(EventCallbackContext)));
}

export function WinBioUnregisterEventMonitor(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioUnregisterEventMonitor(SessionHandle));
}

export function WinBioMonitorPresence(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioMonitorPresence(SessionHandle, UnitId));
}

export function WinBioCaptureSample(
  SessionHandle: number /* u32 */,
  Purpose: number /* u8 */,
  Flags: number /* u8 */,
  UnitId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Sample: Deno.PointerValue | Uint8Array | null /* ptr */,
  SampleSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  RejectDetail: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioCaptureSample(SessionHandle, Purpose, Flags, util.toPointer(UnitId), util.toPointer(Sample), util.toPointer(SampleSize), util.toPointer(RejectDetail)));
}

export function WinBioCaptureSampleWithCallback(
  SessionHandle: number /* u32 */,
  Purpose: number /* u8 */,
  Flags: number /* u8 */,
  CaptureCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.PWINBIO_CAPTURE_CALLBACK */,
  CaptureCallbackContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioCaptureSampleWithCallback(SessionHandle, Purpose, Flags, util.toPointer(CaptureCallback), util.toPointer(CaptureCallbackContext)));
}

export function WinBioDeleteTemplate(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactor: number /* u8 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioDeleteTemplate(SessionHandle, UnitId, util.toPointer(Identity), SubFactor));
}

export function WinBioLockUnit(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioLockUnit(SessionHandle, UnitId));
}

export function WinBioUnlockUnit(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioUnlockUnit(SessionHandle, UnitId));
}

export function WinBioControlUnit(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
  Component: WINBIO_COMPONENT /* Windows.Win32.Devices.BiometricFramework.WINBIO_COMPONENT */,
  ControlCode: number /* u32 */,
  SendBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  SendBufferSize: Deno.PointerValue /* usize */,
  ReceiveBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReceiveBufferSize: Deno.PointerValue /* usize */,
  ReceiveDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  OperationStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioControlUnit(SessionHandle, UnitId, Component, ControlCode, util.toPointer(SendBuffer), SendBufferSize, util.toPointer(ReceiveBuffer), ReceiveBufferSize, util.toPointer(ReceiveDataSize), util.toPointer(OperationStatus)));
}

export function WinBioControlUnitPrivileged(
  SessionHandle: number /* u32 */,
  UnitId: number /* u32 */,
  Component: WINBIO_COMPONENT /* Windows.Win32.Devices.BiometricFramework.WINBIO_COMPONENT */,
  ControlCode: number /* u32 */,
  SendBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  SendBufferSize: Deno.PointerValue /* usize */,
  ReceiveBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReceiveBufferSize: Deno.PointerValue /* usize */,
  ReceiveDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  OperationStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioControlUnitPrivileged(SessionHandle, UnitId, Component, ControlCode, util.toPointer(SendBuffer), SendBufferSize, util.toPointer(ReceiveBuffer), ReceiveBufferSize, util.toPointer(ReceiveDataSize), util.toPointer(OperationStatus)));
}

export function WinBioGetProperty(
  SessionHandle: number /* u32 */,
  PropertyType: number /* u32 */,
  PropertyId: number /* u32 */,
  UnitId: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactor: number /* u8 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioGetProperty(SessionHandle, PropertyType, PropertyId, UnitId, util.toPointer(Identity), SubFactor, util.toPointer(PropertyBuffer), util.toPointer(PropertyBufferSize)));
}

export function WinBioSetProperty(
  SessionHandle: number /* u32 */,
  PropertyType: number /* u32 */,
  PropertyId: number /* u32 */,
  UnitId: number /* u32 */,
  Identity: Deno.PointerValue | Uint8Array | null /* ptr */,
  SubFactor: number /* u8 */,
  PropertyBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyBufferSize: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioSetProperty(SessionHandle, PropertyType, PropertyId, UnitId, util.toPointer(Identity), SubFactor, util.toPointer(PropertyBuffer), PropertyBufferSize));
}

export function WinBioFree(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioFree(util.toPointer(Address)));
}

export function WinBioSetCredential(
  Type: WINBIO_CREDENTIAL_TYPE /* Windows.Win32.Devices.BiometricFramework.WINBIO_CREDENTIAL_TYPE */,
  Credential: Deno.PointerValue | Uint8Array | null /* ptr */,
  CredentialSize: Deno.PointerValue /* usize */,
  Format: WINBIO_CREDENTIAL_FORMAT /* Windows.Win32.Devices.BiometricFramework.WINBIO_CREDENTIAL_FORMAT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioSetCredential(Type, util.toPointer(Credential), CredentialSize, Format));
}

export function WinBioRemoveCredential(
  Identity: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */,
  Type: WINBIO_CREDENTIAL_TYPE /* Windows.Win32.Devices.BiometricFramework.WINBIO_CREDENTIAL_TYPE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioRemoveCredential(util.toPointer(Identity), Type));
}

export function WinBioRemoveAllCredentials(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioRemoveAllCredentials());
}

export function WinBioRemoveAllDomainCredentials(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioRemoveAllDomainCredentials());
}

export function WinBioGetCredentialState(
  Identity: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */,
  Type: WINBIO_CREDENTIAL_TYPE /* Windows.Win32.Devices.BiometricFramework.WINBIO_CREDENTIAL_TYPE */,
  CredentialState: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioGetCredentialState(util.toPointer(Identity), Type, util.toPointer(CredentialState)));
}

export function WinBioLogonIdentifiedUser(
  SessionHandle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioLogonIdentifiedUser(SessionHandle));
}

export function WinBioGetEnrolledFactors(
  AccountOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  EnrolledFactors: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioGetEnrolledFactors(util.toPointer(AccountOwner), util.toPointer(EnrolledFactors)));
}

export function WinBioGetEnabledSetting(
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinbio.WinBioGetEnabledSetting(util.toPointer(Value), util.toPointer(Source));
}

export function WinBioGetLogonSetting(
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinbio.WinBioGetLogonSetting(util.toPointer(Value), util.toPointer(Source));
}

export function WinBioGetDomainLogonSetting(
  Value: Deno.PointerValue | Uint8Array | null /* ptr */,
  Source: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwinbio.WinBioGetDomainLogonSetting(util.toPointer(Value), util.toPointer(Source));
}

export function WinBioAcquireFocus(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioAcquireFocus());
}

export function WinBioReleaseFocus(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwinbio.WinBioReleaseFocus());
}

