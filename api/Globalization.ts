/// Auto-generated by Deno Win32: Windows.Win32.Globalization.Apis

import * as util from "../util.ts";

// Enums
export type FOLD_STRING_MAP_FLAGS = number;
export type ENUM_DATE_FORMATS_FLAGS = number;
export type TRANSLATE_CHARSET_INFO_FLAGS = number;
export type TIME_FORMAT_FLAGS = number;
export type ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS = number;
export type MULTI_BYTE_TO_WIDE_CHAR_FLAGS = number;
export type COMPARE_STRING_FLAGS = number;
export type IS_VALID_LOCALE_FLAGS = number;
export type ENUM_SYSTEM_CODE_PAGES_FLAGS = number;
export type SCRIPT_IS_COMPLEX_FLAGS = number;
export type IS_TEXT_UNICODE_RESULT = number;
export type TMPF_FLAGS = number;
export type SYSNLS_FUNCTION = number;
export type SYSGEOTYPE = number;
export type SYSGEOCLASS = number;
export type NORM_FORM = number;
export type WORDLIST_TYPE = number;
export type CORRECTIVE_ACTION = number;
export type SCRIPT_JUSTIFY = number;
export type UErrorCode = number;
export type UTraceLevel = number;
export type UTraceFunctionNumber = number;
export type UStringTrieResult = number;
export type UScriptCode = number;
export type UScriptUsage = number;
export type UCharIteratorOrigin = number;
export type ULocDataLocaleType = number;
export type ULocAvailableType = number;
export type ULayoutType = number;
export type UAcceptResult = number;
export type UResType = number;
export type UDisplayContextType = number;
export type UDisplayContext = number;
export type UDialectHandling = number;
export type UCurrencyUsage = number;
export type UCurrNameStyle = number;
export type UCurrCurrencyType = number;
export type UCPMapRangeOption = number;
export type UCPTrieType = number;
export type UCPTrieValueWidth = number;
export type UConverterCallbackReason = number;
export type UConverterType = number;
export type UConverterPlatform = number;
export type UConverterUnicodeSet = number;
export type UProperty = number;
export type UCharCategory = number;
export type UCharDirection = number;
export type UBidiPairedBracketType = number;
export type UBlockCode = number;
export type UEastAsianWidth = number;
export type UCharNameChoice = number;
export type UPropertyNameChoice = number;
export type UDecompositionType = number;
export type UJoiningType = number;
export type UJoiningGroup = number;
export type UGraphemeClusterBreak = number;
export type UWordBreakValues = number;
export type USentenceBreak = number;
export type ULineBreak = number;
export type UNumericType = number;
export type UHangulSyllableType = number;
export type UIndicPositionalCategory = number;
export type UIndicSyllabicCategory = number;
export type UVerticalOrientation = number;
export type UBiDiDirection = number;
export type UBiDiReorderingMode = number;
export type UBiDiReorderingOption = number;
export type UBiDiOrder = number;
export type UBiDiMirroring = number;
export type USetSpanCondition = number;
export type UNormalization2Mode = number;
export type UNormalizationCheckResult = number;
export type UNormalizationMode = number;
export type UStringPrepProfileType = number;
export type UBreakIteratorType = number;
export type UWordBreak = number;
export type ULineBreakTag = number;
export type USentenceBreakTag = number;
export type UCalendarType = number;
export type UCalendarDateFields = number;
export type UCalendarDaysOfWeek = number;
export type UCalendarMonths = number;
export type UCalendarAMPMs = number;
export type USystemTimeZoneType = number;
export type UCalendarDisplayNameType = number;
export type UCalendarAttribute = number;
export type UCalendarWallTimeOption = number;
export type UCalendarLimitType = number;
export type UCalendarWeekdayType = number;
export type UTimeZoneTransitionType = number;
export type UCollationResult = number;
export type UColAttributeValue = number;
export type UColReorderCode = number;
export type UColAttribute = number;
export type UColRuleOption = number;
export type UColBoundMode = number;
export type UFormattableType = number;
export type UFieldCategory = number;
export type UGender = number;
export type UListFormatterField = number;
export type UListFormatterType = number;
export type UListFormatterWidth = number;
export type ULocaleDataExemplarSetType = number;
export type ULocaleDataDelimiterType = number;
export type UMeasurementSystem = number;
export type UNumberFormatStyle = number;
export type UNumberFormatRoundingMode = number;
export type UNumberFormatPadPosition = number;
export type UNumberCompactStyle = number;
export type UCurrencySpacing = number;
export type UNumberFormatFields = number;
export type UNumberFormatAttributeValue = number;
export type UNumberFormatAttribute = number;
export type UNumberFormatTextAttribute = number;
export type UNumberFormatSymbol = number;
export type UDateFormatStyle = number;
export type UDateFormatField = number;
export type UDateFormatBooleanAttribute = number;
export type UDateFormatSymbolType = number;
export type UDateTimePatternField = number;
export type UDateTimePGDisplayWidth = number;
export type UDateTimePatternMatchOptions = number;
export type UDateTimePatternConflict = number;
export type UNumberUnitWidth = number;
export type UNumberGroupingStrategy = number;
export type UNumberSignDisplay = number;
export type UNumberDecimalSeparatorDisplay = number;
export type UNumberRangeCollapse = number;
export type UNumberRangeIdentityFallback = number;
export type UNumberRangeIdentityResult = number;
export type UPluralType = number;
export type URegexpFlag = number;
export type URegionType = number;
export type UDateRelativeDateTimeFormatterStyle = number;
export type URelativeDateTimeUnit = number;
export type URelativeDateTimeFormatterField = number;
export type USearchAttribute = number;
export type USearchAttributeValue = number;
export type USpoofChecks = number;
export type URestrictionLevel = number;
export type UDateTimeScale = number;
export type UTimeScaleValue = number;
export type UTransDirection = number;
export type UStringTrieBuildOption = number;
export type UMessagePatternApostropheMode = number;
export type UMessagePatternPartType = number;
export type UMessagePatternArgType = number;
export type UAlphabeticIndexLabelType = number;
export type UTimeZoneNameType = number;
export type UTimeZoneFormatStyle = number;
export type UTimeZoneFormatGMTOffsetPatternType = number;
export type UTimeZoneFormatTimeType = number;
export type UTimeZoneFormatParseOption = number;
export type UMeasureFormatWidth = number;
export type UDateRelativeUnit = number;
export type UDateAbsoluteUnit = number;
export type UDateDirection = number;
export type MIMECONTF = number;
export type SCRIPTCONTF = number;
export type MLCONVCHAR = number;
export type MLCP = number;
export type MLDETECTCP = number;
export type SCRIPTFONTCONTF = number;
export type MLSTR_FLAGS = number;
export type ETO_OPTIONS = number;

// Constants
export const MAP_COMPOSITE = 64;
export const MAP_EXPAND_LIGATURES = 8192;
export const MAP_FOLDCZONE = 16;
export const MAP_FOLDDIGITS = 128;
export const MAP_PRECOMPOSED = 32;
export const DATE_SHORTDATE = 1;
export const DATE_LONGDATE = 2;
export const DATE_YEARMONTH = 8;
export const DATE_MONTHDAY = 128;
export const DATE_AUTOLAYOUT = 64;
export const DATE_LTRREADING = 16;
export const DATE_RTLREADING = 32;
export const DATE_USE_ALT_CALENDAR = 4;
export const TCI_SRCCHARSET = 1;
export const TCI_SRCCODEPAGE = 2;
export const TCI_SRCFONTSIG = 3;
export const TCI_SRCLOCALE = 4096;
export const TIME_NOMINUTESORSECONDS = 1;
export const TIME_NOSECONDS = 2;
export const TIME_NOTIMEMARKER = 4;
export const TIME_FORCE24HOURFORMAT = 8;
export const LGRPID_INSTALLED = 1;
export const LGRPID_SUPPORTED = 2;
export const MB_COMPOSITE = 2;
export const MB_ERR_INVALID_CHARS = 8;
export const MB_PRECOMPOSED = 1;
export const MB_USEGLYPHCHARS = 4;
export const LINGUISTIC_IGNORECASE = 16;
export const LINGUISTIC_IGNOREDIACRITIC = 32;
export const NORM_IGNORECASE = 1;
export const NORM_IGNOREKANATYPE = 65536;
export const NORM_IGNORENONSPACE = 2;
export const NORM_IGNORESYMBOLS = 4;
export const NORM_IGNOREWIDTH = 131072;
export const NORM_LINGUISTIC_CASING = 134217728;
export const SORT_DIGITSASNUMBERS = 8;
export const SORT_STRINGSORT = 4096;
export const LCID_INSTALLED = 1;
export const LCID_SUPPORTED = 2;
export const CP_INSTALLED = 1;
export const CP_SUPPORTED = 2;
export const SIC_ASCIIDIGIT = 2;
export const SIC_COMPLEX = 1;
export const SIC_NEUTRAL = 4;
export const IS_TEXT_UNICODE_ASCII16 = 1;
export const IS_TEXT_UNICODE_REVERSE_ASCII16 = 16;
export const IS_TEXT_UNICODE_STATISTICS = 2;
export const IS_TEXT_UNICODE_REVERSE_STATISTICS = 32;
export const IS_TEXT_UNICODE_CONTROLS = 4;
export const IS_TEXT_UNICODE_REVERSE_CONTROLS = 64;
export const IS_TEXT_UNICODE_SIGNATURE = 8;
export const IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128;
export const IS_TEXT_UNICODE_ILLEGAL_CHARS = 256;
export const IS_TEXT_UNICODE_ODD_LENGTH = 512;
export const IS_TEXT_UNICODE_NULL_BYTES = 4096;
export const IS_TEXT_UNICODE_UNICODE_MASK = 15;
export const IS_TEXT_UNICODE_REVERSE_MASK = 240;
export const IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840;
export const IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440;
export const ALL_SERVICE_TYPES = 0;
export const HIGHLEVEL_SERVICE_TYPES = 1;
export const LOWLEVEL_SERVICE_TYPES = 2;
export const ALL_SERVICES = 0;
export const ONLINE_SERVICES = 1;
export const OFFLINE_SERVICES = 2;
export const MAX_LEADBYTES = 12;
export const MAX_DEFAULTCHAR = 2;
export const HIGH_SURROGATE_START = 55296;
export const HIGH_SURROGATE_END = 56319;
export const LOW_SURROGATE_START = 56320;
export const LOW_SURROGATE_END = 57343;
export const WC_COMPOSITECHECK = 512;
export const WC_DISCARDNS = 16;
export const WC_SEPCHARS = 32;
export const WC_DEFAULTCHAR = 64;
export const WC_ERR_INVALID_CHARS = 128;
export const WC_NO_BEST_FIT_CHARS = 1024;
export const CT_CTYPE1 = 1;
export const CT_CTYPE2 = 2;
export const CT_CTYPE3 = 4;
export const C1_UPPER = 1;
export const C1_LOWER = 2;
export const C1_DIGIT = 4;
export const C1_SPACE = 8;
export const C1_PUNCT = 16;
export const C1_CNTRL = 32;
export const C1_BLANK = 64;
export const C1_XDIGIT = 128;
export const C1_ALPHA = 256;
export const C1_DEFINED = 512;
export const C2_LEFTTORIGHT = 1;
export const C2_RIGHTTOLEFT = 2;
export const C2_EUROPENUMBER = 3;
export const C2_EUROPESEPARATOR = 4;
export const C2_EUROPETERMINATOR = 5;
export const C2_ARABICNUMBER = 6;
export const C2_COMMONSEPARATOR = 7;
export const C2_BLOCKSEPARATOR = 8;
export const C2_SEGMENTSEPARATOR = 9;
export const C2_WHITESPACE = 10;
export const C2_OTHERNEUTRAL = 11;
export const C2_NOTAPPLICABLE = 0;
export const C3_NONSPACING = 1;
export const C3_DIACRITIC = 2;
export const C3_VOWELMARK = 4;
export const C3_SYMBOL = 8;
export const C3_KATAKANA = 16;
export const C3_HIRAGANA = 32;
export const C3_HALFWIDTH = 64;
export const C3_FULLWIDTH = 128;
export const C3_IDEOGRAPH = 256;
export const C3_KASHIDA = 512;
export const C3_LEXICAL = 1024;
export const C3_HIGHSURROGATE = 2048;
export const C3_LOWSURROGATE = 4096;
export const C3_ALPHA = 32768;
export const C3_NOTAPPLICABLE = 0;
export const LCMAP_LOWERCASE = 256;
export const LCMAP_UPPERCASE = 512;
export const LCMAP_TITLECASE = 768;
export const LCMAP_SORTKEY = 1024;
export const LCMAP_BYTEREV = 2048;
export const LCMAP_HIRAGANA = 1048576;
export const LCMAP_KATAKANA = 2097152;
export const LCMAP_HALFWIDTH = 4194304;
export const LCMAP_FULLWIDTH = 8388608;
export const LCMAP_LINGUISTIC_CASING = 16777216;
export const LCMAP_SIMPLIFIED_CHINESE = 33554432;
export const LCMAP_TRADITIONAL_CHINESE = 67108864;
export const LCMAP_SORTHANDLE = 536870912;
export const LCMAP_HASH = 262144;
export const FIND_STARTSWITH = 1048576;
export const FIND_ENDSWITH = 2097152;
export const FIND_FROMSTART = 4194304;
export const FIND_FROMEND = 8388608;
export const LCID_ALTERNATE_SORTS = 4;
export const LOCALE_ALL = 0;
export const LOCALE_WINDOWS = 1;
export const LOCALE_SUPPLEMENTAL = 2;
export const LOCALE_ALTERNATE_SORTS = 4;
export const LOCALE_REPLACEMENT = 8;
export const LOCALE_NEUTRALDATA = 16;
export const LOCALE_SPECIFICDATA = 32;
export const CSTR_LESS_THAN = 1;
export const CSTR_EQUAL = 2;
export const CSTR_GREATER_THAN = 3;
export const CP_ACP = 0;
export const CP_OEMCP = 1;
export const CP_MACCP = 2;
export const CP_THREAD_ACP = 3;
export const CP_SYMBOL = 42;
export const CP_UTF7 = 65000;
export const CP_UTF8 = 65001;
export const CTRY_DEFAULT = 0;
export const CTRY_ALBANIA = 355;
export const CTRY_ALGERIA = 213;
export const CTRY_ARGENTINA = 54;
export const CTRY_ARMENIA = 374;
export const CTRY_AUSTRALIA = 61;
export const CTRY_AUSTRIA = 43;
export const CTRY_AZERBAIJAN = 994;
export const CTRY_BAHRAIN = 973;
export const CTRY_BELARUS = 375;
export const CTRY_BELGIUM = 32;
export const CTRY_BELIZE = 501;
export const CTRY_BOLIVIA = 591;
export const CTRY_BRAZIL = 55;
export const CTRY_BRUNEI_DARUSSALAM = 673;
export const CTRY_BULGARIA = 359;
export const CTRY_CANADA = 2;
export const CTRY_CARIBBEAN = 1;
export const CTRY_CHILE = 56;
export const CTRY_COLOMBIA = 57;
export const CTRY_COSTA_RICA = 506;
export const CTRY_CROATIA = 385;
export const CTRY_CZECH = 420;
export const CTRY_DENMARK = 45;
export const CTRY_DOMINICAN_REPUBLIC = 1;
export const CTRY_ECUADOR = 593;
export const CTRY_EGYPT = 20;
export const CTRY_EL_SALVADOR = 503;
export const CTRY_ESTONIA = 372;
export const CTRY_FAEROE_ISLANDS = 298;
export const CTRY_FINLAND = 358;
export const CTRY_FRANCE = 33;
export const CTRY_GEORGIA = 995;
export const CTRY_GERMANY = 49;
export const CTRY_GREECE = 30;
export const CTRY_GUATEMALA = 502;
export const CTRY_HONDURAS = 504;
export const CTRY_HONG_KONG = 852;
export const CTRY_HUNGARY = 36;
export const CTRY_ICELAND = 354;
export const CTRY_INDIA = 91;
export const CTRY_INDONESIA = 62;
export const CTRY_IRAN = 981;
export const CTRY_IRAQ = 964;
export const CTRY_IRELAND = 353;
export const CTRY_ISRAEL = 972;
export const CTRY_ITALY = 39;
export const CTRY_JAMAICA = 1;
export const CTRY_JAPAN = 81;
export const CTRY_JORDAN = 962;
export const CTRY_KAZAKSTAN = 7;
export const CTRY_KENYA = 254;
export const CTRY_KUWAIT = 965;
export const CTRY_KYRGYZSTAN = 996;
export const CTRY_LATVIA = 371;
export const CTRY_LEBANON = 961;
export const CTRY_LIBYA = 218;
export const CTRY_LIECHTENSTEIN = 41;
export const CTRY_LITHUANIA = 370;
export const CTRY_LUXEMBOURG = 352;
export const CTRY_MACAU = 853;
export const CTRY_MACEDONIA = 389;
export const CTRY_MALAYSIA = 60;
export const CTRY_MALDIVES = 960;
export const CTRY_MEXICO = 52;
export const CTRY_MONACO = 33;
export const CTRY_MONGOLIA = 976;
export const CTRY_MOROCCO = 212;
export const CTRY_NETHERLANDS = 31;
export const CTRY_NEW_ZEALAND = 64;
export const CTRY_NICARAGUA = 505;
export const CTRY_NORWAY = 47;
export const CTRY_OMAN = 968;
export const CTRY_PAKISTAN = 92;
export const CTRY_PANAMA = 507;
export const CTRY_PARAGUAY = 595;
export const CTRY_PERU = 51;
export const CTRY_PHILIPPINES = 63;
export const CTRY_POLAND = 48;
export const CTRY_PORTUGAL = 351;
export const CTRY_PRCHINA = 86;
export const CTRY_PUERTO_RICO = 1;
export const CTRY_QATAR = 974;
export const CTRY_ROMANIA = 40;
export const CTRY_RUSSIA = 7;
export const CTRY_SAUDI_ARABIA = 966;
export const CTRY_SERBIA = 381;
export const CTRY_SINGAPORE = 65;
export const CTRY_SLOVAK = 421;
export const CTRY_SLOVENIA = 386;
export const CTRY_SOUTH_AFRICA = 27;
export const CTRY_SOUTH_KOREA = 82;
export const CTRY_SPAIN = 34;
export const CTRY_SWEDEN = 46;
export const CTRY_SWITZERLAND = 41;
export const CTRY_SYRIA = 963;
export const CTRY_TAIWAN = 886;
export const CTRY_TATARSTAN = 7;
export const CTRY_THAILAND = 66;
export const CTRY_TRINIDAD_Y_TOBAGO = 1;
export const CTRY_TUNISIA = 216;
export const CTRY_TURKEY = 90;
export const CTRY_UAE = 971;
export const CTRY_UKRAINE = 380;
export const CTRY_UNITED_KINGDOM = 44;
export const CTRY_UNITED_STATES = 1;
export const CTRY_URUGUAY = 598;
export const CTRY_UZBEKISTAN = 7;
export const CTRY_VENEZUELA = 58;
export const CTRY_VIET_NAM = 84;
export const CTRY_YEMEN = 967;
export const CTRY_ZIMBABWE = 263;
export const LOCALE_NOUSEROVERRIDE = 2147483648;
export const LOCALE_USE_CP_ACP = 1073741824;
export const LOCALE_RETURN_NUMBER = 536870912;
export const LOCALE_RETURN_GENITIVE_NAMES = 268435456;
export const LOCALE_ALLOW_NEUTRAL_NAMES = 134217728;
export const LOCALE_SLOCALIZEDDISPLAYNAME = 2;
export const LOCALE_SENGLISHDISPLAYNAME = 114;
export const LOCALE_SNATIVEDISPLAYNAME = 115;
export const LOCALE_SLOCALIZEDLANGUAGENAME = 111;
export const LOCALE_SENGLISHLANGUAGENAME = 4097;
export const LOCALE_SNATIVELANGUAGENAME = 4;
export const LOCALE_SLOCALIZEDCOUNTRYNAME = 6;
export const LOCALE_SENGLISHCOUNTRYNAME = 4098;
export const LOCALE_SNATIVECOUNTRYNAME = 8;
export const LOCALE_IDIALINGCODE = 5;
export const LOCALE_SLIST = 12;
export const LOCALE_IMEASURE = 13;
export const LOCALE_SDECIMAL = 14;
export const LOCALE_STHOUSAND = 15;
export const LOCALE_SGROUPING = 16;
export const LOCALE_IDIGITS = 17;
export const LOCALE_ILZERO = 18;
export const LOCALE_INEGNUMBER = 4112;
export const LOCALE_SNATIVEDIGITS = 19;
export const LOCALE_SCURRENCY = 20;
export const LOCALE_SINTLSYMBOL = 21;
export const LOCALE_SMONDECIMALSEP = 22;
export const LOCALE_SMONTHOUSANDSEP = 23;
export const LOCALE_SMONGROUPING = 24;
export const LOCALE_ICURRDIGITS = 25;
export const LOCALE_ICURRENCY = 27;
export const LOCALE_INEGCURR = 28;
export const LOCALE_SSHORTDATE = 31;
export const LOCALE_SLONGDATE = 32;
export const LOCALE_STIMEFORMAT = 4099;
export const LOCALE_SAM = 40;
export const LOCALE_SPM = 41;
export const LOCALE_ICALENDARTYPE = 4105;
export const LOCALE_IOPTIONALCALENDAR = 4107;
export const LOCALE_IFIRSTDAYOFWEEK = 4108;
export const LOCALE_IFIRSTWEEKOFYEAR = 4109;
export const LOCALE_SDAYNAME1 = 42;
export const LOCALE_SDAYNAME2 = 43;
export const LOCALE_SDAYNAME3 = 44;
export const LOCALE_SDAYNAME4 = 45;
export const LOCALE_SDAYNAME5 = 46;
export const LOCALE_SDAYNAME6 = 47;
export const LOCALE_SDAYNAME7 = 48;
export const LOCALE_SABBREVDAYNAME1 = 49;
export const LOCALE_SABBREVDAYNAME2 = 50;
export const LOCALE_SABBREVDAYNAME3 = 51;
export const LOCALE_SABBREVDAYNAME4 = 52;
export const LOCALE_SABBREVDAYNAME5 = 53;
export const LOCALE_SABBREVDAYNAME6 = 54;
export const LOCALE_SABBREVDAYNAME7 = 55;
export const LOCALE_SMONTHNAME1 = 56;
export const LOCALE_SMONTHNAME2 = 57;
export const LOCALE_SMONTHNAME3 = 58;
export const LOCALE_SMONTHNAME4 = 59;
export const LOCALE_SMONTHNAME5 = 60;
export const LOCALE_SMONTHNAME6 = 61;
export const LOCALE_SMONTHNAME7 = 62;
export const LOCALE_SMONTHNAME8 = 63;
export const LOCALE_SMONTHNAME9 = 64;
export const LOCALE_SMONTHNAME10 = 65;
export const LOCALE_SMONTHNAME11 = 66;
export const LOCALE_SMONTHNAME12 = 67;
export const LOCALE_SMONTHNAME13 = 4110;
export const LOCALE_SABBREVMONTHNAME1 = 68;
export const LOCALE_SABBREVMONTHNAME2 = 69;
export const LOCALE_SABBREVMONTHNAME3 = 70;
export const LOCALE_SABBREVMONTHNAME4 = 71;
export const LOCALE_SABBREVMONTHNAME5 = 72;
export const LOCALE_SABBREVMONTHNAME6 = 73;
export const LOCALE_SABBREVMONTHNAME7 = 74;
export const LOCALE_SABBREVMONTHNAME8 = 75;
export const LOCALE_SABBREVMONTHNAME9 = 76;
export const LOCALE_SABBREVMONTHNAME10 = 77;
export const LOCALE_SABBREVMONTHNAME11 = 78;
export const LOCALE_SABBREVMONTHNAME12 = 79;
export const LOCALE_SABBREVMONTHNAME13 = 4111;
export const LOCALE_SPOSITIVESIGN = 80;
export const LOCALE_SNEGATIVESIGN = 81;
export const LOCALE_IPOSSIGNPOSN = 82;
export const LOCALE_INEGSIGNPOSN = 83;
export const LOCALE_IPOSSYMPRECEDES = 84;
export const LOCALE_IPOSSEPBYSPACE = 85;
export const LOCALE_INEGSYMPRECEDES = 86;
export const LOCALE_INEGSEPBYSPACE = 87;
export const LOCALE_FONTSIGNATURE = 88;
export const LOCALE_SISO639LANGNAME = 89;
export const LOCALE_SISO3166CTRYNAME = 90;
export const LOCALE_IPAPERSIZE = 4106;
export const LOCALE_SENGCURRNAME = 4103;
export const LOCALE_SNATIVECURRNAME = 4104;
export const LOCALE_SYEARMONTH = 4102;
export const LOCALE_SSORTNAME = 4115;
export const LOCALE_IDIGITSUBSTITUTION = 4116;
export const LOCALE_SNAME = 92;
export const LOCALE_SDURATION = 93;
export const LOCALE_SSHORTESTDAYNAME1 = 96;
export const LOCALE_SSHORTESTDAYNAME2 = 97;
export const LOCALE_SSHORTESTDAYNAME3 = 98;
export const LOCALE_SSHORTESTDAYNAME4 = 99;
export const LOCALE_SSHORTESTDAYNAME5 = 100;
export const LOCALE_SSHORTESTDAYNAME6 = 101;
export const LOCALE_SSHORTESTDAYNAME7 = 102;
export const LOCALE_SISO639LANGNAME2 = 103;
export const LOCALE_SISO3166CTRYNAME2 = 104;
export const LOCALE_SNAN = 105;
export const LOCALE_SPOSINFINITY = 106;
export const LOCALE_SNEGINFINITY = 107;
export const LOCALE_SSCRIPTS = 108;
export const LOCALE_SPARENT = 109;
export const LOCALE_SCONSOLEFALLBACKNAME = 110;
export const LOCALE_IREADINGLAYOUT = 112;
export const LOCALE_INEUTRAL = 113;
export const LOCALE_INEGATIVEPERCENT = 116;
export const LOCALE_IPOSITIVEPERCENT = 117;
export const LOCALE_SPERCENT = 118;
export const LOCALE_SPERMILLE = 119;
export const LOCALE_SMONTHDAY = 120;
export const LOCALE_SSHORTTIME = 121;
export const LOCALE_SOPENTYPELANGUAGETAG = 122;
export const LOCALE_SSORTLOCALE = 123;
export const LOCALE_SRELATIVELONGDATE = 124;
export const LOCALE_ICONSTRUCTEDLOCALE = 125;
export const LOCALE_SSHORTESTAM = 126;
export const LOCALE_SSHORTESTPM = 127;
export const LOCALE_IUSEUTF8LEGACYACP = 1638;
export const LOCALE_IUSEUTF8LEGACYOEMCP = 2457;
export const LOCALE_IDEFAULTCODEPAGE = 11;
export const LOCALE_IDEFAULTANSICODEPAGE = 4100;
export const LOCALE_IDEFAULTMACCODEPAGE = 4113;
export const LOCALE_IDEFAULTEBCDICCODEPAGE = 4114;
export const LOCALE_ILANGUAGE = 1;
export const LOCALE_SABBREVLANGNAME = 3;
export const LOCALE_SABBREVCTRYNAME = 7;
export const LOCALE_IGEOID = 91;
export const LOCALE_IDEFAULTLANGUAGE = 9;
export const LOCALE_IDEFAULTCOUNTRY = 10;
export const LOCALE_IINTLCURRDIGITS = 26;
export const LOCALE_SDATE = 29;
export const LOCALE_STIME = 30;
export const LOCALE_IDATE = 33;
export const LOCALE_ILDATE = 34;
export const LOCALE_ITIME = 35;
export const LOCALE_ITIMEMARKPOSN = 4101;
export const LOCALE_ICENTURY = 36;
export const LOCALE_ITLZERO = 37;
export const LOCALE_IDAYLZERO = 38;
export const LOCALE_IMONLZERO = 39;
export const LOCALE_SKEYBOARDSTOINSTALL = 94;
export const LOCALE_SLANGUAGE = 2;
export const LOCALE_SLANGDISPLAYNAME = 111;
export const LOCALE_SENGLANGUAGE = 4097;
export const LOCALE_SNATIVELANGNAME = 4;
export const LOCALE_SCOUNTRY = 6;
export const LOCALE_SENGCOUNTRY = 4098;
export const LOCALE_SNATIVECTRYNAME = 8;
export const LOCALE_ICOUNTRY = 5;
export const LOCALE_S1159 = 40;
export const LOCALE_S2359 = 41;
export const CAL_NOUSEROVERRIDE = 2147483648;
export const CAL_USE_CP_ACP = 1073741824;
export const CAL_RETURN_NUMBER = 536870912;
export const CAL_RETURN_GENITIVE_NAMES = 268435456;
export const CAL_ICALINTVALUE = 1;
export const CAL_SCALNAME = 2;
export const CAL_IYEAROFFSETRANGE = 3;
export const CAL_SERASTRING = 4;
export const CAL_SSHORTDATE = 5;
export const CAL_SLONGDATE = 6;
export const CAL_SDAYNAME1 = 7;
export const CAL_SDAYNAME2 = 8;
export const CAL_SDAYNAME3 = 9;
export const CAL_SDAYNAME4 = 10;
export const CAL_SDAYNAME5 = 11;
export const CAL_SDAYNAME6 = 12;
export const CAL_SDAYNAME7 = 13;
export const CAL_SABBREVDAYNAME1 = 14;
export const CAL_SABBREVDAYNAME2 = 15;
export const CAL_SABBREVDAYNAME3 = 16;
export const CAL_SABBREVDAYNAME4 = 17;
export const CAL_SABBREVDAYNAME5 = 18;
export const CAL_SABBREVDAYNAME6 = 19;
export const CAL_SABBREVDAYNAME7 = 20;
export const CAL_SMONTHNAME1 = 21;
export const CAL_SMONTHNAME2 = 22;
export const CAL_SMONTHNAME3 = 23;
export const CAL_SMONTHNAME4 = 24;
export const CAL_SMONTHNAME5 = 25;
export const CAL_SMONTHNAME6 = 26;
export const CAL_SMONTHNAME7 = 27;
export const CAL_SMONTHNAME8 = 28;
export const CAL_SMONTHNAME9 = 29;
export const CAL_SMONTHNAME10 = 30;
export const CAL_SMONTHNAME11 = 31;
export const CAL_SMONTHNAME12 = 32;
export const CAL_SMONTHNAME13 = 33;
export const CAL_SABBREVMONTHNAME1 = 34;
export const CAL_SABBREVMONTHNAME2 = 35;
export const CAL_SABBREVMONTHNAME3 = 36;
export const CAL_SABBREVMONTHNAME4 = 37;
export const CAL_SABBREVMONTHNAME5 = 38;
export const CAL_SABBREVMONTHNAME6 = 39;
export const CAL_SABBREVMONTHNAME7 = 40;
export const CAL_SABBREVMONTHNAME8 = 41;
export const CAL_SABBREVMONTHNAME9 = 42;
export const CAL_SABBREVMONTHNAME10 = 43;
export const CAL_SABBREVMONTHNAME11 = 44;
export const CAL_SABBREVMONTHNAME12 = 45;
export const CAL_SABBREVMONTHNAME13 = 46;
export const CAL_SYEARMONTH = 47;
export const CAL_ITWODIGITYEARMAX = 48;
export const CAL_SSHORTESTDAYNAME1 = 49;
export const CAL_SSHORTESTDAYNAME2 = 50;
export const CAL_SSHORTESTDAYNAME3 = 51;
export const CAL_SSHORTESTDAYNAME4 = 52;
export const CAL_SSHORTESTDAYNAME5 = 53;
export const CAL_SSHORTESTDAYNAME6 = 54;
export const CAL_SSHORTESTDAYNAME7 = 55;
export const CAL_SMONTHDAY = 56;
export const CAL_SABBREVERASTRING = 57;
export const CAL_SRELATIVELONGDATE = 58;
export const CAL_SENGLISHERANAME = 59;
export const CAL_SENGLISHABBREVERANAME = 60;
export const CAL_SJAPANESEERAFIRSTYEAR = 61;
export const ENUM_ALL_CALENDARS = 4294967295;
export const CAL_GREGORIAN = 1;
export const CAL_GREGORIAN_US = 2;
export const CAL_JAPAN = 3;
export const CAL_TAIWAN = 4;
export const CAL_KOREA = 5;
export const CAL_HIJRI = 6;
export const CAL_THAI = 7;
export const CAL_HEBREW = 8;
export const CAL_GREGORIAN_ME_FRENCH = 9;
export const CAL_GREGORIAN_ARABIC = 10;
export const CAL_GREGORIAN_XLIT_ENGLISH = 11;
export const CAL_GREGORIAN_XLIT_FRENCH = 12;
export const CAL_PERSIAN = 22;
export const CAL_UMALQURA = 23;
export const LGRPID_WESTERN_EUROPE = 1;
export const LGRPID_CENTRAL_EUROPE = 2;
export const LGRPID_BALTIC = 3;
export const LGRPID_GREEK = 4;
export const LGRPID_CYRILLIC = 5;
export const LGRPID_TURKIC = 6;
export const LGRPID_TURKISH = 6;
export const LGRPID_JAPANESE = 7;
export const LGRPID_KOREAN = 8;
export const LGRPID_TRADITIONAL_CHINESE = 9;
export const LGRPID_SIMPLIFIED_CHINESE = 10;
export const LGRPID_THAI = 11;
export const LGRPID_HEBREW = 12;
export const LGRPID_ARABIC = 13;
export const LGRPID_VIETNAMESE = 14;
export const LGRPID_INDIC = 15;
export const LGRPID_GEORGIAN = 16;
export const LGRPID_ARMENIAN = 17;
export const MUI_LANGUAGE_ID = 4;
export const MUI_LANGUAGE_NAME = 8;
export const MUI_MERGE_SYSTEM_FALLBACK = 16;
export const MUI_MERGE_USER_FALLBACK = 32;
export const MUI_THREAD_LANGUAGES = 64;
export const MUI_CONSOLE_FILTER = 256;
export const MUI_COMPLEX_SCRIPT_FILTER = 512;
export const MUI_RESET_FILTERS = 1;
export const MUI_USER_PREFERRED_UI_LANGUAGES = 16;
export const MUI_USE_INSTALLED_LANGUAGES = 32;
export const MUI_USE_SEARCH_ALL_LANGUAGES = 64;
export const MUI_LANG_NEUTRAL_PE_FILE = 256;
export const MUI_NON_LANG_NEUTRAL_FILE = 512;
export const MUI_MACHINE_LANGUAGE_SETTINGS = 1024;
export const MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1;
export const MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2;
export const MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4;
export const MUI_QUERY_TYPE = 1;
export const MUI_QUERY_CHECKSUM = 2;
export const MUI_QUERY_LANGUAGE_NAME = 4;
export const MUI_QUERY_RESOURCE_TYPES = 8;
export const MUI_FILEINFO_VERSION = 1;
export const MUI_FULL_LANGUAGE = 1;
export const MUI_PARTIAL_LANGUAGE = 2;
export const MUI_LIP_LANGUAGE = 4;
export const MUI_LANGUAGE_INSTALLED = 32;
export const MUI_LANGUAGE_LICENSED = 64;
export const GEOID_NOT_AVAILABLE = `-1`;
export const SORTING_PARADIGM_NLS = 0;
export const SORTING_PARADIGM_ICU = 16777216;
export const IDN_ALLOW_UNASSIGNED = 1;
export const IDN_USE_STD3_ASCII_RULES = 2;
export const IDN_EMAIL_ADDRESS = 4;
export const IDN_RAW_PUNYCODE = 8;
export const VS_ALLOW_LATIN = 1;
export const GSS_ALLOW_INHERITED_COMMON = 1;
export const MUI_FORMAT_REG_COMPAT = 1;
export const MUI_FORMAT_INF_COMPAT = 2;
export const MUI_VERIFY_FILE_EXISTS = 4;
export const MUI_SKIP_STRING_CACHE = 8;
export const MUI_IMMUTABLE_LOOKUP = 16;
export const LOCALE_NAME_INVARIANT = ``;
export const LOCALE_NAME_SYSTEM_DEFAULT = `!x-sys-default-locale`;
export const MIN_SPELLING_NTDDI = 100794368;
export const SCRIPT_UNDEFINED = 0;
export const USP_E_SCRIPT_NOT_IN_FONT = 288827430293209600n;
export const SGCM_RTL = 1;
export const SSA_PASSWORD = 1;
export const SSA_TAB = 2;
export const SSA_CLIP = 4;
export const SSA_FIT = 8;
export const SSA_DZWG = 16;
export const SSA_FALLBACK = 32;
export const SSA_BREAK = 64;
export const SSA_GLYPHS = 128;
export const SSA_RTL = 256;
export const SSA_GCP = 512;
export const SSA_HOTKEY = 1024;
export const SSA_METAFILE = 2048;
export const SSA_LINK = 4096;
export const SSA_HIDEHOTKEY = 8192;
export const SSA_HOTKEYONLY = 9216;
export const SSA_FULLMEASURE = 67108864;
export const SSA_LPKANSIFALLBACK = 134217728;
export const SSA_PIDX = 268435456;
export const SSA_LAYOUTRTL = 536870912;
export const SSA_DONTGLYPH = 1073741824;
export const SSA_NOKASHIDA = 2147483648;
export const SCRIPT_DIGITSUBSTITUTE_CONTEXT = 0;
export const SCRIPT_DIGITSUBSTITUTE_NONE = 1;
export const SCRIPT_DIGITSUBSTITUTE_NATIONAL = 2;
export const SCRIPT_DIGITSUBSTITUTE_TRADITIONAL = 3;
export const UNISCRIBE_OPENTYPE = 256;
export const SCRIPT_TAG_UNKNOWN = 0;
export const MUI_LANGUAGE_EXACT = 16;
export const NLS_CP_CPINFO = 268435456;
export const NLS_CP_MBTOWC = 1073741824;
export const NLS_CP_WCTOMB = 2147483648;
export const U_DISABLE_RENAMING = 1;
export const U_SHOW_CPLUSPLUS_API = 0;
export const U_DEFAULT_SHOW_DRAFT = 0;
export const U_HIDE_DRAFT_API = 1;
export const U_HIDE_DEPRECATED_API = 1;
export const U_HIDE_OBSOLETE_API = 1;
export const U_HIDE_INTERNAL_API = 1;
export const U_NO_DEFAULT_INCLUDE_UTF_HEADERS = 1;
export const U_DEBUG = 1;
export const UCLN_NO_AUTO_CLEANUP = 1;
export const U_OVERRIDE_CXX_ALLOCATION = 1;
export const U_ENABLE_TRACING = 0;
export const UCONFIG_ENABLE_PLUGINS = 0;
export const U_ENABLE_DYLOAD = 1;
export const U_CHECK_DYLOAD = 1;
export const U_HAVE_LIB_SUFFIX = 1;
export const U_LIB_SUFFIX_C_NAME_STRING = ``;
export const UCONFIG_ONLY_COLLATION = 0;
export const UCONFIG_NO_BREAK_ITERATION = 1;
export const UCONFIG_NO_IDNA = 1;
export const UCONFIG_NO_FORMATTING = 1;
export const UCONFIG_NO_TRANSLITERATION = 1;
export const UCONFIG_NO_REGULAR_EXPRESSIONS = 1;
export const UCONFIG_NO_FILE_IO = 0;
export const UCONFIG_NO_CONVERSION = 0;
export const UCONFIG_NO_LEGACY_CONVERSION = 1;
export const UCONFIG_ONLY_HTML_CONVERSION = 0;
export const UCONFIG_NO_NORMALIZATION = 0;
export const UCONFIG_NO_COLLATION = 1;
export const UCONFIG_NO_SERVICE = 0;
export const UCONFIG_HAVE_PARSEALLINPUT = 1;
export const UCONFIG_NO_FILTERED_BREAK_ITERATION = 0;
export const U_PF_UNKNOWN = 0;
export const U_PF_WINDOWS = 1000;
export const U_PF_MINGW = 1800;
export const U_PF_CYGWIN = 1900;
export const U_PF_HPUX = 2100;
export const U_PF_SOLARIS = 2600;
export const U_PF_BSD = 3000;
export const U_PF_AIX = 3100;
export const U_PF_IRIX = 3200;
export const U_PF_DARWIN = 3500;
export const U_PF_IPHONE = 3550;
export const U_PF_QNX = 3700;
export const U_PF_LINUX = 4000;
export const U_PF_BROWSER_NATIVE_CLIENT = 4020;
export const U_PF_ANDROID = 4050;
export const U_PF_FUCHSIA = 4100;
export const U_PF_EMSCRIPTEN = 5010;
export const U_PF_OS390 = 9000;
export const U_PF_OS400 = 9400;
export const U_PLATFORM = 1800;
export const U_PLATFORM_USES_ONLY_WIN32_API = 1;
export const U_PLATFORM_HAS_WIN32_API = 1;
export const U_PLATFORM_IMPLEMENTS_POSIX = 0;
export const U_PLATFORM_IS_LINUX_BASED = 1;
export const U_PLATFORM_IS_DARWIN_BASED = 1;
export const U_HAVE_STDINT_H = 1;
export const U_HAVE_INTTYPES_H = 1;
export const U_GCC_MAJOR_MINOR = 0;
export const U_IS_BIG_ENDIAN = 0;
export const U_HAVE_PLACEMENT_NEW = 0;
export const U_HAVE_DEBUG_LOCATION_NEW = 1;
export const U_CPLUSPLUS_VERSION = 0;
export const U_ASCII_FAMILY = 0;
export const U_EBCDIC_FAMILY = 1;
export const U_CHARSET_FAMILY = 1;
export const U_CHARSET_IS_UTF8 = 1;
export const U_HAVE_WCHAR_H = 0;
export const U_SIZEOF_WCHAR_T = 1;
export const U_HAVE_WCSCPY = 0;
export const U_HAVE_CHAR16_T = 1;
export const U_DEFINE_FALSE_AND_TRUE = 1;
export const U_SIZEOF_UCHAR = 2;
export const U_CHAR16_IS_TYPEDEF = 1;
export const U_SENTINEL = `-1`;
export const U8_LEAD3_T1_BITS = ` 000000000000\x1000`;
export const U8_LEAD4_T1_BITS = `\0\0\0\0\0\0\0\0\x1e\x0f\x0f\x0f\0\0\0\0`;
export const U8_MAX_LENGTH = 4;
export const U16_MAX_LENGTH = 2;
export const U_HIDE_OBSOLETE_UTF_OLD_H = 0;
export const UTF_SIZE = 16;
export const UTF8_ERROR_VALUE_1 = 21;
export const UTF8_ERROR_VALUE_2 = 159;
export const UTF_ERROR_VALUE = 65535;
export const UTF8_MAX_CHAR_LENGTH = 4;
export const UTF16_MAX_CHAR_LENGTH = 2;
export const UTF32_MAX_CHAR_LENGTH = 1;
export const UTF_MAX_CHAR_LENGTH = 2;
export const U_COPYRIGHT_STRING_LENGTH = 128;
export const U_MAX_VERSION_LENGTH = 4;
export const U_MAX_VERSION_STRING_LENGTH = 20;
export const U_MILLIS_PER_SECOND = 1000;
export const U_MILLIS_PER_MINUTE = 60000;
export const U_MILLIS_PER_HOUR = 3600000;
export const U_MILLIS_PER_DAY = 86400000;
export const U_COMBINED_IMPLEMENTATION = 1;
export const U_SHAPE_LENGTH_GROW_SHRINK = 0;
export const U_SHAPE_LAMALEF_RESIZE = 0;
export const U_SHAPE_LENGTH_FIXED_SPACES_NEAR = 1;
export const U_SHAPE_LAMALEF_NEAR = 1;
export const U_SHAPE_LENGTH_FIXED_SPACES_AT_END = 2;
export const U_SHAPE_LAMALEF_END = 2;
export const U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING = 3;
export const U_SHAPE_LAMALEF_BEGIN = 3;
export const U_SHAPE_LAMALEF_AUTO = 65536;
export const U_SHAPE_LENGTH_MASK = 65539;
export const U_SHAPE_LAMALEF_MASK = 65539;
export const U_SHAPE_TEXT_DIRECTION_LOGICAL = 0;
export const U_SHAPE_TEXT_DIRECTION_VISUAL_RTL = 0;
export const U_SHAPE_TEXT_DIRECTION_VISUAL_LTR = 4;
export const U_SHAPE_TEXT_DIRECTION_MASK = 4;
export const U_SHAPE_LETTERS_NOOP = 0;
export const U_SHAPE_LETTERS_SHAPE = 8;
export const U_SHAPE_LETTERS_UNSHAPE = 16;
export const U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED = 24;
export const U_SHAPE_LETTERS_MASK = 24;
export const U_SHAPE_DIGITS_NOOP = 0;
export const U_SHAPE_DIGITS_EN2AN = 32;
export const U_SHAPE_DIGITS_AN2EN = 64;
export const U_SHAPE_DIGITS_ALEN2AN_INIT_LR = 96;
export const U_SHAPE_DIGITS_ALEN2AN_INIT_AL = 128;
export const U_SHAPE_DIGITS_RESERVED = 160;
export const U_SHAPE_DIGITS_MASK = 224;
export const U_SHAPE_DIGIT_TYPE_AN = 0;
export const U_SHAPE_DIGIT_TYPE_AN_EXTENDED = 256;
export const U_SHAPE_DIGIT_TYPE_RESERVED = 512;
export const U_SHAPE_DIGIT_TYPE_MASK = 768;
export const U_SHAPE_AGGREGATE_TASHKEEL = 16384;
export const U_SHAPE_AGGREGATE_TASHKEEL_NOOP = 0;
export const U_SHAPE_AGGREGATE_TASHKEEL_MASK = 16384;
export const U_SHAPE_PRESERVE_PRESENTATION = 32768;
export const U_SHAPE_PRESERVE_PRESENTATION_NOOP = 0;
export const U_SHAPE_PRESERVE_PRESENTATION_MASK = 32768;
export const U_SHAPE_SEEN_TWOCELL_NEAR = 2097152;
export const U_SHAPE_SEEN_MASK = 7340032;
export const U_SHAPE_YEHHAMZA_TWOCELL_NEAR = 16777216;
export const U_SHAPE_YEHHAMZA_MASK = 58720256;
export const U_SHAPE_TASHKEEL_BEGIN = 262144;
export const U_SHAPE_TASHKEEL_END = 393216;
export const U_SHAPE_TASHKEEL_RESIZE = 524288;
export const U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL = 786432;
export const U_SHAPE_TASHKEEL_MASK = 917504;
export const U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END = 67108864;
export const U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK = 67108864;
export const U_SHAPE_TAIL_NEW_UNICODE = 134217728;
export const U_SHAPE_TAIL_TYPE_MASK = 134217728;
export const ULOC_CHINESE = `zh`;
export const ULOC_ENGLISH = `en`;
export const ULOC_FRENCH = `fr`;
export const ULOC_GERMAN = `de`;
export const ULOC_ITALIAN = `it`;
export const ULOC_JAPANESE = `ja`;
export const ULOC_KOREAN = `ko`;
export const ULOC_SIMPLIFIED_CHINESE = `zh_CN`;
export const ULOC_TRADITIONAL_CHINESE = `zh_TW`;
export const ULOC_CANADA = `en_CA`;
export const ULOC_CANADA_FRENCH = `fr_CA`;
export const ULOC_CHINA = `zh_CN`;
export const ULOC_PRC = `zh_CN`;
export const ULOC_FRANCE = `fr_FR`;
export const ULOC_GERMANY = `de_DE`;
export const ULOC_ITALY = `it_IT`;
export const ULOC_JAPAN = `ja_JP`;
export const ULOC_KOREA = `ko_KR`;
export const ULOC_TAIWAN = `zh_TW`;
export const ULOC_UK = `en_GB`;
export const ULOC_US = `en_US`;
export const ULOC_LANG_CAPACITY = 12;
export const ULOC_COUNTRY_CAPACITY = 4;
export const ULOC_FULLNAME_CAPACITY = 157;
export const ULOC_SCRIPT_CAPACITY = 6;
export const ULOC_KEYWORDS_CAPACITY = 96;
export const ULOC_KEYWORD_AND_VALUES_CAPACITY = 100;
export const ULOC_KEYWORD_SEPARATOR_UNICODE = 64;
export const ULOC_KEYWORD_ASSIGN_UNICODE = 61;
export const ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE = 59;
export const UCNV_SUB_STOP_ON_ILLEGAL = `i`;
export const UCNV_SKIP_STOP_ON_ILLEGAL = `i`;
export const UCNV_ESCAPE_JAVA = `J`;
export const UCNV_ESCAPE_C = `C`;
export const UCNV_ESCAPE_XML_DEC = `D`;
export const UCNV_ESCAPE_XML_HEX = `X`;
export const UCNV_ESCAPE_UNICODE = `U`;
export const UCNV_ESCAPE_CSS2 = `S`;
export const UCNV_MAX_CONVERTER_NAME_LENGTH = 60;
export const UCNV_SI = 15;
export const UCNV_SO = 14;
export const UCNV_OPTION_SEP_STRING = `,`;
export const UCNV_VALUE_SEP_STRING = `=`;
export const UCNV_LOCALE_OPTION_STRING = `,locale=`;
export const UCNV_VERSION_OPTION_STRING = `,version=`;
export const UCNV_SWAP_LFNL_OPTION_STRING = `,swaplfnl`;
export const U_FOLD_CASE_DEFAULT = 0;
export const U_FOLD_CASE_EXCLUDE_SPECIAL_I = 1;
export const U_TITLECASE_WHOLE_STRING = 32;
export const U_TITLECASE_SENTENCES = 64;
export const U_TITLECASE_NO_LOWERCASE = 256;
export const U_TITLECASE_NO_BREAK_ADJUSTMENT = 512;
export const U_TITLECASE_ADJUST_TO_CASED = 1024;
export const U_EDITS_NO_RESET = 8192;
export const U_OMIT_UNCHANGED_TEXT = 16384;
export const U_COMPARE_CODE_POINT_ORDER = 32768;
export const U_COMPARE_IGNORE_CASE = 65536;
export const UNORM_INPUT_IS_FCD = 131072;
export const UCHAR_MIN_VALUE = 0;
export const UCHAR_MAX_VALUE = 1114111;
export const UBIDI_DEFAULT_LTR = 254;
export const UBIDI_DEFAULT_RTL = 255;
export const UBIDI_MAX_EXPLICIT_LEVEL = 125;
export const UBIDI_LEVEL_OVERRIDE = 128;
export const UBIDI_MAP_NOWHERE = `-1`;
export const UBIDI_KEEP_BASE_COMBINING = 1;
export const UBIDI_DO_MIRRORING = 2;
export const UBIDI_INSERT_LRM_FOR_NUMERIC = 4;
export const UBIDI_REMOVE_BIDI_CONTROLS = 8;
export const UBIDI_OUTPUT_REVERSE = 16;
export const USPREP_DEFAULT = 0;
export const USPREP_ALLOW_UNASSIGNED = 1;
export const U_ICU_VERSION_BUNDLE = `icuver`;
export const U_ICU_DATA_KEY = `DataVersion`;
export const UCAL_UNKNOWN_ZONE_ID = `Etc/Unknown`;
export const UDAT_YEAR = `y`;
export const UDAT_QUARTER = `QQQQ`;
export const UDAT_ABBR_QUARTER = `QQQ`;
export const UDAT_YEAR_QUARTER = `yQQQQ`;
export const UDAT_YEAR_ABBR_QUARTER = `yQQQ`;
export const UDAT_MONTH = `MMMM`;
export const UDAT_ABBR_MONTH = `MMM`;
export const UDAT_NUM_MONTH = `M`;
export const UDAT_YEAR_MONTH = `yMMMM`;
export const UDAT_YEAR_ABBR_MONTH = `yMMM`;
export const UDAT_YEAR_NUM_MONTH = `yM`;
export const UDAT_DAY = `d`;
export const UDAT_YEAR_MONTH_DAY = `yMMMMd`;
export const UDAT_YEAR_ABBR_MONTH_DAY = `yMMMd`;
export const UDAT_YEAR_NUM_MONTH_DAY = `yMd`;
export const UDAT_WEEKDAY = `EEEE`;
export const UDAT_ABBR_WEEKDAY = `E`;
export const UDAT_YEAR_MONTH_WEEKDAY_DAY = `yMMMMEEEEd`;
export const UDAT_YEAR_ABBR_MONTH_WEEKDAY_DAY = `yMMMEd`;
export const UDAT_YEAR_NUM_MONTH_WEEKDAY_DAY = `yMEd`;
export const UDAT_MONTH_DAY = `MMMMd`;
export const UDAT_ABBR_MONTH_DAY = `MMMd`;
export const UDAT_NUM_MONTH_DAY = `Md`;
export const UDAT_MONTH_WEEKDAY_DAY = `MMMMEEEEd`;
export const UDAT_ABBR_MONTH_WEEKDAY_DAY = `MMMEd`;
export const UDAT_NUM_MONTH_WEEKDAY_DAY = `MEd`;
export const UDAT_HOUR = `j`;
export const UDAT_HOUR24 = `H`;
export const UDAT_MINUTE = `m`;
export const UDAT_HOUR_MINUTE = `jm`;
export const UDAT_HOUR24_MINUTE = `Hm`;
export const UDAT_SECOND = `s`;
export const UDAT_HOUR_MINUTE_SECOND = `jms`;
export const UDAT_HOUR24_MINUTE_SECOND = `Hms`;
export const UDAT_MINUTE_SECOND = `ms`;
export const UDAT_LOCATION_TZ = `VVVV`;
export const UDAT_GENERIC_TZ = `vvvv`;
export const UDAT_ABBR_GENERIC_TZ = `v`;
export const UDAT_SPECIFIC_TZ = `zzzz`;
export const UDAT_ABBR_SPECIFIC_TZ = `z`;
export const UDAT_ABBR_UTC_TZ = `ZZZZ`;
export const USEARCH_DONE = `-1`;
export const U_HAVE_STD_STRING = 0;
export const UCONFIG_FORMAT_FASTPATHS_49 = 1;
export const U_PLATFORM_HAS_WINUWP_API = 0;
export const U_IOSTREAM_SOURCE = 199711;
export const U_HAVE_RVALUE_REFERENCES = 1;
export const U_USING_ICU_NAMESPACE = 1;
export const U_ICUDATA_TYPE_LETTER = `e`;
export const U_UNICODE_VERSION = `8.0`;
export const CANITER_SKIP_ZEROES = 1;
export const NUMSYS_NAME_CAPACITY = 8;
export const U_HAVE_RBNF = 0;
export const MAX_MIMECP_NAME = 64;
export const MAX_MIMECSET_NAME = 50;
export const MAX_MIMEFACE_NAME = 32;
export const MAX_RFC1766_NAME = 6;
export const MAX_LOCALE_NAME = 32;
export const MAX_SCRIPT_NAME = 48;
export const CPIOD_PEEK = 1073741824;
export const CPIOD_FORCE_PROMPT = `-2147483648`;
export const UITER_UNKNOWN_INDEX = `-2`;
export const UCPTRIE_FAST_SHIFT = 6;
export const UCPTRIE_FAST_DATA_BLOCK_LENGTH = 64;
export const UCPTRIE_FAST_DATA_MASK = 63;
export const UCPTRIE_SMALL_MAX = 4095;
export const UCPTRIE_ERROR_VALUE_NEG_DATA_OFFSET = 1;
export const UCPTRIE_HIGH_VALUE_NEG_DATA_OFFSET = 2;
export const UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1;
export const UTEXT_PROVIDER_STABLE_CHUNKS = 2;
export const UTEXT_PROVIDER_WRITABLE = 3;
export const UTEXT_PROVIDER_HAS_META_DATA = 4;
export const UTEXT_PROVIDER_OWNS_TEXT = 5;
export const UTEXT_MAGIC = 878368812;
export const USET_IGNORE_SPACE = 1;
export const USET_CASE_INSENSITIVE = 2;
export const USET_ADD_CASE_MAPPINGS = 4;
export const USET_SERIALIZED_STATIC_ARRAY_CAPACITY = 8;
export const U_PARSE_CONTEXT_LEN = 16;
export const UIDNA_DEFAULT = 0;
export const UIDNA_USE_STD3_RULES = 2;
export const UIDNA_CHECK_BIDI = 4;
export const UIDNA_CHECK_CONTEXTJ = 8;
export const UIDNA_NONTRANSITIONAL_TO_ASCII = 16;
export const UIDNA_NONTRANSITIONAL_TO_UNICODE = 32;
export const UIDNA_CHECK_CONTEXTO = 64;
export const UIDNA_ERROR_EMPTY_LABEL = 1;
export const UIDNA_ERROR_LABEL_TOO_LONG = 2;
export const UIDNA_ERROR_DOMAIN_NAME_TOO_LONG = 4;
export const UIDNA_ERROR_LEADING_HYPHEN = 8;
export const UIDNA_ERROR_TRAILING_HYPHEN = 16;
export const UIDNA_ERROR_HYPHEN_3_4 = 32;
export const UIDNA_ERROR_LEADING_COMBINING_MARK = 64;
export const UIDNA_ERROR_DISALLOWED = 128;
export const UIDNA_ERROR_PUNYCODE = 256;
export const UIDNA_ERROR_LABEL_HAS_DOT = 512;
export const UIDNA_ERROR_INVALID_ACE_LABEL = 1024;
export const UIDNA_ERROR_BIDI = 2048;
export const UIDNA_ERROR_CONTEXTJ = 4096;
export const UIDNA_ERROR_CONTEXTO_PUNCTUATION = 8192;
export const UIDNA_ERROR_CONTEXTO_DIGITS = 16384;
export const UMSGPAT_ARG_NAME_NOT_NUMBER = `-1`;
export const UMSGPAT_ARG_NAME_NOT_VALID = `-2`;
export const TMPF_FIXED_PITCH = 1;
export const TMPF_VECTOR = 2;
export const TMPF_DEVICE = 8;
export const TMPF_TRUETYPE = 4;
export const COMPARE_STRING = 1;
export const GEO_NATION = 1;
export const GEO_LATITUDE = 2;
export const GEO_LONGITUDE = 3;
export const GEO_ISO2 = 4;
export const GEO_ISO3 = 5;
export const GEO_RFC1766 = 6;
export const GEO_LCID = 7;
export const GEO_FRIENDLYNAME = 8;
export const GEO_OFFICIALNAME = 9;
export const GEO_TIMEZONES = 10;
export const GEO_OFFICIALLANGUAGES = 11;
export const GEO_ISO_UN_NUMBER = 12;
export const GEO_PARENT = 13;
export const GEO_DIALINGCODE = 14;
export const GEO_CURRENCYCODE = 15;
export const GEO_CURRENCYSYMBOL = 16;
export const GEO_NAME = 17;
export const GEO_ID = 18;
export const GEOCLASS_NATION = 16;
export const GEOCLASS_REGION = 14;
export const GEOCLASS_ALL = 0;
export const NormalizationOther = 0;
export const NormalizationC = 1;
export const NormalizationD = 2;
export const NormalizationKC = 5;
export const NormalizationKD = 6;
export const WORDLIST_TYPE_IGNORE = 0;
export const WORDLIST_TYPE_ADD = 1;
export const WORDLIST_TYPE_EXCLUDE = 2;
export const WORDLIST_TYPE_AUTOCORRECT = 3;
export const CORRECTIVE_ACTION_NONE = 0;
export const CORRECTIVE_ACTION_GET_SUGGESTIONS = 1;
export const CORRECTIVE_ACTION_REPLACE = 2;
export const CORRECTIVE_ACTION_DELETE = 3;
export const SCRIPT_JUSTIFY_NONE = 0;
export const SCRIPT_JUSTIFY_ARABIC_BLANK = 1;
export const SCRIPT_JUSTIFY_CHARACTER = 2;
export const SCRIPT_JUSTIFY_RESERVED1 = 3;
export const SCRIPT_JUSTIFY_BLANK = 4;
export const SCRIPT_JUSTIFY_RESERVED2 = 5;
export const SCRIPT_JUSTIFY_RESERVED3 = 6;
export const SCRIPT_JUSTIFY_ARABIC_NORMAL = 7;
export const SCRIPT_JUSTIFY_ARABIC_KASHIDA = 8;
export const SCRIPT_JUSTIFY_ARABIC_ALEF = 9;
export const SCRIPT_JUSTIFY_ARABIC_HA = 10;
export const SCRIPT_JUSTIFY_ARABIC_RA = 11;
export const SCRIPT_JUSTIFY_ARABIC_BA = 12;
export const SCRIPT_JUSTIFY_ARABIC_BARA = 13;
export const SCRIPT_JUSTIFY_ARABIC_SEEN = 14;
export const SCRIPT_JUSTIFY_ARABIC_SEEN_M = 15;
export const U_USING_FALLBACK_WARNING = `-128`;
export const U_ERROR_WARNING_START = `-128`;
export const U_USING_DEFAULT_WARNING = `-127`;
export const U_SAFECLONE_ALLOCATED_WARNING = `-126`;
export const U_STATE_OLD_WARNING = `-125`;
export const U_STRING_NOT_TERMINATED_WARNING = `-124`;
export const U_SORT_KEY_TOO_SHORT_WARNING = `-123`;
export const U_AMBIGUOUS_ALIAS_WARNING = `-122`;
export const U_DIFFERENT_UCA_VERSION = `-121`;
export const U_PLUGIN_CHANGED_LEVEL_WARNING = `-120`;
export const U_ZERO_ERROR = 0;
export const U_ILLEGAL_ARGUMENT_ERROR = 1;
export const U_MISSING_RESOURCE_ERROR = 2;
export const U_INVALID_FORMAT_ERROR = 3;
export const U_FILE_ACCESS_ERROR = 4;
export const U_INTERNAL_PROGRAM_ERROR = 5;
export const U_MESSAGE_PARSE_ERROR = 6;
export const U_MEMORY_ALLOCATION_ERROR = 7;
export const U_INDEX_OUTOFBOUNDS_ERROR = 8;
export const U_PARSE_ERROR = 9;
export const U_INVALID_CHAR_FOUND = 10;
export const U_TRUNCATED_CHAR_FOUND = 11;
export const U_ILLEGAL_CHAR_FOUND = 12;
export const U_INVALID_TABLE_FORMAT = 13;
export const U_INVALID_TABLE_FILE = 14;
export const U_BUFFER_OVERFLOW_ERROR = 15;
export const U_UNSUPPORTED_ERROR = 16;
export const U_RESOURCE_TYPE_MISMATCH = 17;
export const U_ILLEGAL_ESCAPE_SEQUENCE = 18;
export const U_UNSUPPORTED_ESCAPE_SEQUENCE = 19;
export const U_NO_SPACE_AVAILABLE = 20;
export const U_CE_NOT_FOUND_ERROR = 21;
export const U_PRIMARY_TOO_LONG_ERROR = 22;
export const U_STATE_TOO_OLD_ERROR = 23;
export const U_TOO_MANY_ALIASES_ERROR = 24;
export const U_ENUM_OUT_OF_SYNC_ERROR = 25;
export const U_INVARIANT_CONVERSION_ERROR = 26;
export const U_INVALID_STATE_ERROR = 27;
export const U_COLLATOR_VERSION_MISMATCH = 28;
export const U_USELESS_COLLATOR_ERROR = 29;
export const U_NO_WRITE_PERMISSION = 30;
export const U_BAD_VARIABLE_DEFINITION = 65536;
export const U_PARSE_ERROR_START = 65536;
export const U_MALFORMED_RULE = 65537;
export const U_MALFORMED_SET = 65538;
export const U_MALFORMED_SYMBOL_REFERENCE = 65539;
export const U_MALFORMED_UNICODE_ESCAPE = 65540;
export const U_MALFORMED_VARIABLE_DEFINITION = 65541;
export const U_MALFORMED_VARIABLE_REFERENCE = 65542;
export const U_MISMATCHED_SEGMENT_DELIMITERS = 65543;
export const U_MISPLACED_ANCHOR_START = 65544;
export const U_MISPLACED_CURSOR_OFFSET = 65545;
export const U_MISPLACED_QUANTIFIER = 65546;
export const U_MISSING_OPERATOR = 65547;
export const U_MISSING_SEGMENT_CLOSE = 65548;
export const U_MULTIPLE_ANTE_CONTEXTS = 65549;
export const U_MULTIPLE_CURSORS = 65550;
export const U_MULTIPLE_POST_CONTEXTS = 65551;
export const U_TRAILING_BACKSLASH = 65552;
export const U_UNDEFINED_SEGMENT_REFERENCE = 65553;
export const U_UNDEFINED_VARIABLE = 65554;
export const U_UNQUOTED_SPECIAL = 65555;
export const U_UNTERMINATED_QUOTE = 65556;
export const U_RULE_MASK_ERROR = 65557;
export const U_MISPLACED_COMPOUND_FILTER = 65558;
export const U_MULTIPLE_COMPOUND_FILTERS = 65559;
export const U_INVALID_RBT_SYNTAX = 65560;
export const U_INVALID_PROPERTY_PATTERN = 65561;
export const U_MALFORMED_PRAGMA = 65562;
export const U_UNCLOSED_SEGMENT = 65563;
export const U_ILLEGAL_CHAR_IN_SEGMENT = 65564;
export const U_VARIABLE_RANGE_EXHAUSTED = 65565;
export const U_VARIABLE_RANGE_OVERLAP = 65566;
export const U_ILLEGAL_CHARACTER = 65567;
export const U_INTERNAL_TRANSLITERATOR_ERROR = 65568;
export const U_INVALID_ID = 65569;
export const U_INVALID_FUNCTION = 65570;
export const U_UNEXPECTED_TOKEN = 65792;
export const U_FMT_PARSE_ERROR_START = 65792;
export const U_MULTIPLE_DECIMAL_SEPARATORS = 65793;
export const U_MULTIPLE_DECIMAL_SEPERATORS = 65793;
export const U_MULTIPLE_EXPONENTIAL_SYMBOLS = 65794;
export const U_MALFORMED_EXPONENTIAL_PATTERN = 65795;
export const U_MULTIPLE_PERCENT_SYMBOLS = 65796;
export const U_MULTIPLE_PERMILL_SYMBOLS = 65797;
export const U_MULTIPLE_PAD_SPECIFIERS = 65798;
export const U_PATTERN_SYNTAX_ERROR = 65799;
export const U_ILLEGAL_PAD_POSITION = 65800;
export const U_UNMATCHED_BRACES = 65801;
export const U_UNSUPPORTED_PROPERTY = 65802;
export const U_UNSUPPORTED_ATTRIBUTE = 65803;
export const U_ARGUMENT_TYPE_MISMATCH = 65804;
export const U_DUPLICATE_KEYWORD = 65805;
export const U_UNDEFINED_KEYWORD = 65806;
export const U_DEFAULT_KEYWORD_MISSING = 65807;
export const U_DECIMAL_NUMBER_SYNTAX_ERROR = 65808;
export const U_FORMAT_INEXACT_ERROR = 65809;
export const U_NUMBER_ARG_OUTOFBOUNDS_ERROR = 65810;
export const U_NUMBER_SKELETON_SYNTAX_ERROR = 65811;
export const U_BRK_INTERNAL_ERROR = 66048;
export const U_BRK_ERROR_START = 66048;
export const U_BRK_HEX_DIGITS_EXPECTED = 66049;
export const U_BRK_SEMICOLON_EXPECTED = 66050;
export const U_BRK_RULE_SYNTAX = 66051;
export const U_BRK_UNCLOSED_SET = 66052;
export const U_BRK_ASSIGN_ERROR = 66053;
export const U_BRK_VARIABLE_REDFINITION = 66054;
export const U_BRK_MISMATCHED_PAREN = 66055;
export const U_BRK_NEW_LINE_IN_QUOTED_STRING = 66056;
export const U_BRK_UNDEFINED_VARIABLE = 66057;
export const U_BRK_INIT_ERROR = 66058;
export const U_BRK_RULE_EMPTY_SET = 66059;
export const U_BRK_UNRECOGNIZED_OPTION = 66060;
export const U_BRK_MALFORMED_RULE_TAG = 66061;
export const U_REGEX_INTERNAL_ERROR = 66304;
export const U_REGEX_ERROR_START = 66304;
export const U_REGEX_RULE_SYNTAX = 66305;
export const U_REGEX_INVALID_STATE = 66306;
export const U_REGEX_BAD_ESCAPE_SEQUENCE = 66307;
export const U_REGEX_PROPERTY_SYNTAX = 66308;
export const U_REGEX_UNIMPLEMENTED = 66309;
export const U_REGEX_MISMATCHED_PAREN = 66310;
export const U_REGEX_NUMBER_TOO_BIG = 66311;
export const U_REGEX_BAD_INTERVAL = 66312;
export const U_REGEX_MAX_LT_MIN = 66313;
export const U_REGEX_INVALID_BACK_REF = 66314;
export const U_REGEX_INVALID_FLAG = 66315;
export const U_REGEX_LOOK_BEHIND_LIMIT = 66316;
export const U_REGEX_SET_CONTAINS_STRING = 66317;
export const U_REGEX_MISSING_CLOSE_BRACKET = 66319;
export const U_REGEX_INVALID_RANGE = 66320;
export const U_REGEX_STACK_OVERFLOW = 66321;
export const U_REGEX_TIME_OUT = 66322;
export const U_REGEX_STOPPED_BY_CALLER = 66323;
export const U_REGEX_PATTERN_TOO_BIG = 66324;
export const U_REGEX_INVALID_CAPTURE_GROUP_NAME = 66325;
export const U_IDNA_PROHIBITED_ERROR = 66560;
export const U_IDNA_ERROR_START = 66560;
export const U_IDNA_UNASSIGNED_ERROR = 66561;
export const U_IDNA_CHECK_BIDI_ERROR = 66562;
export const U_IDNA_STD3_ASCII_RULES_ERROR = 66563;
export const U_IDNA_ACE_PREFIX_ERROR = 66564;
export const U_IDNA_VERIFICATION_ERROR = 66565;
export const U_IDNA_LABEL_TOO_LONG_ERROR = 66566;
export const U_IDNA_ZERO_LENGTH_LABEL_ERROR = 66567;
export const U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR = 66568;
export const U_STRINGPREP_PROHIBITED_ERROR = 66560;
export const U_STRINGPREP_UNASSIGNED_ERROR = 66561;
export const U_STRINGPREP_CHECK_BIDI_ERROR = 66562;
export const U_PLUGIN_ERROR_START = 66816;
export const U_PLUGIN_TOO_HIGH = 66816;
export const U_PLUGIN_DIDNT_SET_LEVEL = 66817;
export const UTRACE_OFF = `-1`;
export const UTRACE_ERROR = 0;
export const UTRACE_WARNING = 3;
export const UTRACE_OPEN_CLOSE = 5;
export const UTRACE_INFO = 7;
export const UTRACE_VERBOSE = 9;
export const UTRACE_FUNCTION_START = 0;
export const UTRACE_U_INIT = 0;
export const UTRACE_U_CLEANUP = 1;
export const UTRACE_CONVERSION_START = 4096;
export const UTRACE_UCNV_OPEN = 4096;
export const UTRACE_UCNV_OPEN_PACKAGE = 4097;
export const UTRACE_UCNV_OPEN_ALGORITHMIC = 4098;
export const UTRACE_UCNV_CLONE = 4099;
export const UTRACE_UCNV_CLOSE = 4100;
export const UTRACE_UCNV_FLUSH_CACHE = 4101;
export const UTRACE_UCNV_LOAD = 4102;
export const UTRACE_UCNV_UNLOAD = 4103;
export const UTRACE_COLLATION_START = 8192;
export const UTRACE_UCOL_OPEN = 8192;
export const UTRACE_UCOL_CLOSE = 8193;
export const UTRACE_UCOL_STRCOLL = 8194;
export const UTRACE_UCOL_GET_SORTKEY = 8195;
export const UTRACE_UCOL_GETLOCALE = 8196;
export const UTRACE_UCOL_NEXTSORTKEYPART = 8197;
export const UTRACE_UCOL_STRCOLLITER = 8198;
export const UTRACE_UCOL_OPEN_FROM_SHORT_STRING = 8199;
export const UTRACE_UCOL_STRCOLLUTF8 = 8200;
export const UTRACE_UDATA_START = 12288;
export const UTRACE_UDATA_RESOURCE = 12288;
export const UTRACE_UDATA_BUNDLE = 12289;
export const UTRACE_UDATA_DATA_FILE = 12290;
export const UTRACE_UDATA_RES_FILE = 12291;
export const USTRINGTRIE_NO_MATCH = 0;
export const USTRINGTRIE_NO_VALUE = 1;
export const USTRINGTRIE_FINAL_VALUE = 2;
export const USTRINGTRIE_INTERMEDIATE_VALUE = 3;
export const USCRIPT_INVALID_CODE = `-1`;
export const USCRIPT_COMMON = 0;
export const USCRIPT_INHERITED = 1;
export const USCRIPT_ARABIC = 2;
export const USCRIPT_ARMENIAN = 3;
export const USCRIPT_BENGALI = 4;
export const USCRIPT_BOPOMOFO = 5;
export const USCRIPT_CHEROKEE = 6;
export const USCRIPT_COPTIC = 7;
export const USCRIPT_CYRILLIC = 8;
export const USCRIPT_DESERET = 9;
export const USCRIPT_DEVANAGARI = 10;
export const USCRIPT_ETHIOPIC = 11;
export const USCRIPT_GEORGIAN = 12;
export const USCRIPT_GOTHIC = 13;
export const USCRIPT_GREEK = 14;
export const USCRIPT_GUJARATI = 15;
export const USCRIPT_GURMUKHI = 16;
export const USCRIPT_HAN = 17;
export const USCRIPT_HANGUL = 18;
export const USCRIPT_HEBREW = 19;
export const USCRIPT_HIRAGANA = 20;
export const USCRIPT_KANNADA = 21;
export const USCRIPT_KATAKANA = 22;
export const USCRIPT_KHMER = 23;
export const USCRIPT_LAO = 24;
export const USCRIPT_LATIN = 25;
export const USCRIPT_MALAYALAM = 26;
export const USCRIPT_MONGOLIAN = 27;
export const USCRIPT_MYANMAR = 28;
export const USCRIPT_OGHAM = 29;
export const USCRIPT_OLD_ITALIC = 30;
export const USCRIPT_ORIYA = 31;
export const USCRIPT_RUNIC = 32;
export const USCRIPT_SINHALA = 33;
export const USCRIPT_SYRIAC = 34;
export const USCRIPT_TAMIL = 35;
export const USCRIPT_TELUGU = 36;
export const USCRIPT_THAANA = 37;
export const USCRIPT_THAI = 38;
export const USCRIPT_TIBETAN = 39;
export const USCRIPT_CANADIAN_ABORIGINAL = 40;
export const USCRIPT_UCAS = 40;
export const USCRIPT_YI = 41;
export const USCRIPT_TAGALOG = 42;
export const USCRIPT_HANUNOO = 43;
export const USCRIPT_BUHID = 44;
export const USCRIPT_TAGBANWA = 45;
export const USCRIPT_BRAILLE = 46;
export const USCRIPT_CYPRIOT = 47;
export const USCRIPT_LIMBU = 48;
export const USCRIPT_LINEAR_B = 49;
export const USCRIPT_OSMANYA = 50;
export const USCRIPT_SHAVIAN = 51;
export const USCRIPT_TAI_LE = 52;
export const USCRIPT_UGARITIC = 53;
export const USCRIPT_KATAKANA_OR_HIRAGANA = 54;
export const USCRIPT_BUGINESE = 55;
export const USCRIPT_GLAGOLITIC = 56;
export const USCRIPT_KHAROSHTHI = 57;
export const USCRIPT_SYLOTI_NAGRI = 58;
export const USCRIPT_NEW_TAI_LUE = 59;
export const USCRIPT_TIFINAGH = 60;
export const USCRIPT_OLD_PERSIAN = 61;
export const USCRIPT_BALINESE = 62;
export const USCRIPT_BATAK = 63;
export const USCRIPT_BLISSYMBOLS = 64;
export const USCRIPT_BRAHMI = 65;
export const USCRIPT_CHAM = 66;
export const USCRIPT_CIRTH = 67;
export const USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC = 68;
export const USCRIPT_DEMOTIC_EGYPTIAN = 69;
export const USCRIPT_HIERATIC_EGYPTIAN = 70;
export const USCRIPT_EGYPTIAN_HIEROGLYPHS = 71;
export const USCRIPT_KHUTSURI = 72;
export const USCRIPT_SIMPLIFIED_HAN = 73;
export const USCRIPT_TRADITIONAL_HAN = 74;
export const USCRIPT_PAHAWH_HMONG = 75;
export const USCRIPT_OLD_HUNGARIAN = 76;
export const USCRIPT_HARAPPAN_INDUS = 77;
export const USCRIPT_JAVANESE = 78;
export const USCRIPT_KAYAH_LI = 79;
export const USCRIPT_LATIN_FRAKTUR = 80;
export const USCRIPT_LATIN_GAELIC = 81;
export const USCRIPT_LEPCHA = 82;
export const USCRIPT_LINEAR_A = 83;
export const USCRIPT_MANDAIC = 84;
export const USCRIPT_MANDAEAN = 84;
export const USCRIPT_MAYAN_HIEROGLYPHS = 85;
export const USCRIPT_MEROITIC_HIEROGLYPHS = 86;
export const USCRIPT_MEROITIC = 86;
export const USCRIPT_NKO = 87;
export const USCRIPT_ORKHON = 88;
export const USCRIPT_OLD_PERMIC = 89;
export const USCRIPT_PHAGS_PA = 90;
export const USCRIPT_PHOENICIAN = 91;
export const USCRIPT_MIAO = 92;
export const USCRIPT_PHONETIC_POLLARD = 92;
export const USCRIPT_RONGORONGO = 93;
export const USCRIPT_SARATI = 94;
export const USCRIPT_ESTRANGELO_SYRIAC = 95;
export const USCRIPT_WESTERN_SYRIAC = 96;
export const USCRIPT_EASTERN_SYRIAC = 97;
export const USCRIPT_TENGWAR = 98;
export const USCRIPT_VAI = 99;
export const USCRIPT_VISIBLE_SPEECH = 100;
export const USCRIPT_CUNEIFORM = 101;
export const USCRIPT_UNWRITTEN_LANGUAGES = 102;
export const USCRIPT_UNKNOWN = 103;
export const USCRIPT_CARIAN = 104;
export const USCRIPT_JAPANESE = 105;
export const USCRIPT_LANNA = 106;
export const USCRIPT_LYCIAN = 107;
export const USCRIPT_LYDIAN = 108;
export const USCRIPT_OL_CHIKI = 109;
export const USCRIPT_REJANG = 110;
export const USCRIPT_SAURASHTRA = 111;
export const USCRIPT_SIGN_WRITING = 112;
export const USCRIPT_SUNDANESE = 113;
export const USCRIPT_MOON = 114;
export const USCRIPT_MEITEI_MAYEK = 115;
export const USCRIPT_IMPERIAL_ARAMAIC = 116;
export const USCRIPT_AVESTAN = 117;
export const USCRIPT_CHAKMA = 118;
export const USCRIPT_KOREAN = 119;
export const USCRIPT_KAITHI = 120;
export const USCRIPT_MANICHAEAN = 121;
export const USCRIPT_INSCRIPTIONAL_PAHLAVI = 122;
export const USCRIPT_PSALTER_PAHLAVI = 123;
export const USCRIPT_BOOK_PAHLAVI = 124;
export const USCRIPT_INSCRIPTIONAL_PARTHIAN = 125;
export const USCRIPT_SAMARITAN = 126;
export const USCRIPT_TAI_VIET = 127;
export const USCRIPT_MATHEMATICAL_NOTATION = 128;
export const USCRIPT_SYMBOLS = 129;
export const USCRIPT_BAMUM = 130;
export const USCRIPT_LISU = 131;
export const USCRIPT_NAKHI_GEBA = 132;
export const USCRIPT_OLD_SOUTH_ARABIAN = 133;
export const USCRIPT_BASSA_VAH = 134;
export const USCRIPT_DUPLOYAN = 135;
export const USCRIPT_ELBASAN = 136;
export const USCRIPT_GRANTHA = 137;
export const USCRIPT_KPELLE = 138;
export const USCRIPT_LOMA = 139;
export const USCRIPT_MENDE = 140;
export const USCRIPT_MEROITIC_CURSIVE = 141;
export const USCRIPT_OLD_NORTH_ARABIAN = 142;
export const USCRIPT_NABATAEAN = 143;
export const USCRIPT_PALMYRENE = 144;
export const USCRIPT_KHUDAWADI = 145;
export const USCRIPT_SINDHI = 145;
export const USCRIPT_WARANG_CITI = 146;
export const USCRIPT_AFAKA = 147;
export const USCRIPT_JURCHEN = 148;
export const USCRIPT_MRO = 149;
export const USCRIPT_NUSHU = 150;
export const USCRIPT_SHARADA = 151;
export const USCRIPT_SORA_SOMPENG = 152;
export const USCRIPT_TAKRI = 153;
export const USCRIPT_TANGUT = 154;
export const USCRIPT_WOLEAI = 155;
export const USCRIPT_ANATOLIAN_HIEROGLYPHS = 156;
export const USCRIPT_KHOJKI = 157;
export const USCRIPT_TIRHUTA = 158;
export const USCRIPT_CAUCASIAN_ALBANIAN = 159;
export const USCRIPT_MAHAJANI = 160;
export const USCRIPT_AHOM = 161;
export const USCRIPT_HATRAN = 162;
export const USCRIPT_MODI = 163;
export const USCRIPT_MULTANI = 164;
export const USCRIPT_PAU_CIN_HAU = 165;
export const USCRIPT_SIDDHAM = 166;
export const USCRIPT_ADLAM = 167;
export const USCRIPT_BHAIKSUKI = 168;
export const USCRIPT_MARCHEN = 169;
export const USCRIPT_NEWA = 170;
export const USCRIPT_OSAGE = 171;
export const USCRIPT_HAN_WITH_BOPOMOFO = 172;
export const USCRIPT_JAMO = 173;
export const USCRIPT_SYMBOLS_EMOJI = 174;
export const USCRIPT_MASARAM_GONDI = 175;
export const USCRIPT_SOYOMBO = 176;
export const USCRIPT_ZANABAZAR_SQUARE = 177;
export const USCRIPT_DOGRA = 178;
export const USCRIPT_GUNJALA_GONDI = 179;
export const USCRIPT_MAKASAR = 180;
export const USCRIPT_MEDEFAIDRIN = 181;
export const USCRIPT_HANIFI_ROHINGYA = 182;
export const USCRIPT_SOGDIAN = 183;
export const USCRIPT_OLD_SOGDIAN = 184;
export const USCRIPT_ELYMAIC = 185;
export const USCRIPT_NYIAKENG_PUACHUE_HMONG = 186;
export const USCRIPT_NANDINAGARI = 187;
export const USCRIPT_WANCHO = 188;
export const USCRIPT_CHORASMIAN = 189;
export const USCRIPT_DIVES_AKURU = 190;
export const USCRIPT_KHITAN_SMALL_SCRIPT = 191;
export const USCRIPT_YEZIDI = 192;
export const USCRIPT_USAGE_NOT_ENCODED = 0;
export const USCRIPT_USAGE_UNKNOWN = 1;
export const USCRIPT_USAGE_EXCLUDED = 2;
export const USCRIPT_USAGE_LIMITED_USE = 3;
export const USCRIPT_USAGE_ASPIRATIONAL = 4;
export const USCRIPT_USAGE_RECOMMENDED = 5;
export const UITER_START = 0;
export const UITER_CURRENT = 1;
export const UITER_LIMIT = 2;
export const UITER_ZERO = 3;
export const UITER_LENGTH = 4;
export const ULOC_ACTUAL_LOCALE = 0;
export const ULOC_VALID_LOCALE = 1;
export const ULOC_AVAILABLE_DEFAULT = 0;
export const ULOC_AVAILABLE_ONLY_LEGACY_ALIASES = 1;
export const ULOC_AVAILABLE_WITH_LEGACY_ALIASES = 2;
export const ULOC_LAYOUT_LTR = 0;
export const ULOC_LAYOUT_RTL = 1;
export const ULOC_LAYOUT_TTB = 2;
export const ULOC_LAYOUT_BTT = 3;
export const ULOC_LAYOUT_UNKNOWN = 4;
export const ULOC_ACCEPT_FAILED = 0;
export const ULOC_ACCEPT_VALID = 1;
export const ULOC_ACCEPT_FALLBACK = 2;
export const URES_NONE = `-1`;
export const URES_STRING = 0;
export const URES_BINARY = 1;
export const URES_TABLE = 2;
export const URES_ALIAS = 3;
export const URES_INT = 7;
export const URES_ARRAY = 8;
export const URES_INT_VECTOR = 14;
export const UDISPCTX_TYPE_DIALECT_HANDLING = 0;
export const UDISPCTX_TYPE_CAPITALIZATION = 1;
export const UDISPCTX_TYPE_DISPLAY_LENGTH = 2;
export const UDISPCTX_TYPE_SUBSTITUTE_HANDLING = 3;
export const UDISPCTX_STANDARD_NAMES = 0;
export const UDISPCTX_DIALECT_NAMES = 1;
export const UDISPCTX_CAPITALIZATION_NONE = 256;
export const UDISPCTX_CAPITALIZATION_FOR_MIDDLE_OF_SENTENCE = 257;
export const UDISPCTX_CAPITALIZATION_FOR_BEGINNING_OF_SENTENCE = 258;
export const UDISPCTX_CAPITALIZATION_FOR_UI_LIST_OR_MENU = 259;
export const UDISPCTX_CAPITALIZATION_FOR_STANDALONE = 260;
export const UDISPCTX_LENGTH_FULL = 512;
export const UDISPCTX_LENGTH_SHORT = 513;
export const UDISPCTX_SUBSTITUTE = 768;
export const UDISPCTX_NO_SUBSTITUTE = 769;
export const ULDN_STANDARD_NAMES = 0;
export const ULDN_DIALECT_NAMES = 1;
export const UCURR_USAGE_STANDARD = 0;
export const UCURR_USAGE_CASH = 1;
export const UCURR_SYMBOL_NAME = 0;
export const UCURR_LONG_NAME = 1;
export const UCURR_NARROW_SYMBOL_NAME = 2;
export const UCURR_ALL = 2147483647;
export const UCURR_COMMON = 1;
export const UCURR_UNCOMMON = 2;
export const UCURR_DEPRECATED = 4;
export const UCURR_NON_DEPRECATED = 8;
export const UCPMAP_RANGE_NORMAL = 0;
export const UCPMAP_RANGE_FIXED_LEAD_SURROGATES = 1;
export const UCPMAP_RANGE_FIXED_ALL_SURROGATES = 2;
export const UCPTRIE_TYPE_ANY = `-1`;
export const UCPTRIE_TYPE_FAST = 0;
export const UCPTRIE_TYPE_SMALL = 1;
export const UCPTRIE_VALUE_BITS_ANY = `-1`;
export const UCPTRIE_VALUE_BITS_16 = 0;
export const UCPTRIE_VALUE_BITS_32 = 1;
export const UCPTRIE_VALUE_BITS_8 = 2;
export const UCNV_UNASSIGNED = 0;
export const UCNV_ILLEGAL = 1;
export const UCNV_IRREGULAR = 2;
export const UCNV_RESET = 3;
export const UCNV_CLOSE = 4;
export const UCNV_CLONE = 5;
export const UCNV_UNSUPPORTED_CONVERTER = `-1`;
export const UCNV_SBCS = 0;
export const UCNV_DBCS = 1;
export const UCNV_MBCS = 2;
export const UCNV_LATIN_1 = 3;
export const UCNV_UTF8 = 4;
export const UCNV_UTF16_BigEndian = 5;
export const UCNV_UTF16_LittleEndian = 6;
export const UCNV_UTF32_BigEndian = 7;
export const UCNV_UTF32_LittleEndian = 8;
export const UCNV_EBCDIC_STATEFUL = 9;
export const UCNV_ISO_2022 = 10;
export const UCNV_LMBCS_1 = 11;
export const UCNV_LMBCS_2 = 12;
export const UCNV_LMBCS_3 = 13;
export const UCNV_LMBCS_4 = 14;
export const UCNV_LMBCS_5 = 15;
export const UCNV_LMBCS_6 = 16;
export const UCNV_LMBCS_8 = 17;
export const UCNV_LMBCS_11 = 18;
export const UCNV_LMBCS_16 = 19;
export const UCNV_LMBCS_17 = 20;
export const UCNV_LMBCS_18 = 21;
export const UCNV_LMBCS_19 = 22;
export const UCNV_LMBCS_LAST = 22;
export const UCNV_HZ = 23;
export const UCNV_SCSU = 24;
export const UCNV_ISCII = 25;
export const UCNV_US_ASCII = 26;
export const UCNV_UTF7 = 27;
export const UCNV_BOCU1 = 28;
export const UCNV_UTF16 = 29;
export const UCNV_UTF32 = 30;
export const UCNV_CESU8 = 31;
export const UCNV_IMAP_MAILBOX = 32;
export const UCNV_COMPOUND_TEXT = 33;
export const UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES = 34;
export const UCNV_UNKNOWN = `-1`;
export const UCNV_IBM = 0;
export const UCNV_ROUNDTRIP_SET = 0;
export const UCNV_ROUNDTRIP_AND_FALLBACK_SET = 1;
export const UCHAR_ALPHABETIC = 0;
export const UCHAR_BINARY_START = 0;
export const UCHAR_ASCII_HEX_DIGIT = 1;
export const UCHAR_BIDI_CONTROL = 2;
export const UCHAR_BIDI_MIRRORED = 3;
export const UCHAR_DASH = 4;
export const UCHAR_DEFAULT_IGNORABLE_CODE_POINT = 5;
export const UCHAR_DEPRECATED = 6;
export const UCHAR_DIACRITIC = 7;
export const UCHAR_EXTENDER = 8;
export const UCHAR_FULL_COMPOSITION_EXCLUSION = 9;
export const UCHAR_GRAPHEME_BASE = 10;
export const UCHAR_GRAPHEME_EXTEND = 11;
export const UCHAR_GRAPHEME_LINK = 12;
export const UCHAR_HEX_DIGIT = 13;
export const UCHAR_HYPHEN = 14;
export const UCHAR_ID_CONTINUE = 15;
export const UCHAR_ID_START = 16;
export const UCHAR_IDEOGRAPHIC = 17;
export const UCHAR_IDS_BINARY_OPERATOR = 18;
export const UCHAR_IDS_TRINARY_OPERATOR = 19;
export const UCHAR_JOIN_CONTROL = 20;
export const UCHAR_LOGICAL_ORDER_EXCEPTION = 21;
export const UCHAR_LOWERCASE = 22;
export const UCHAR_MATH = 23;
export const UCHAR_NONCHARACTER_CODE_POINT = 24;
export const UCHAR_QUOTATION_MARK = 25;
export const UCHAR_RADICAL = 26;
export const UCHAR_SOFT_DOTTED = 27;
export const UCHAR_TERMINAL_PUNCTUATION = 28;
export const UCHAR_UNIFIED_IDEOGRAPH = 29;
export const UCHAR_UPPERCASE = 30;
export const UCHAR_WHITE_SPACE = 31;
export const UCHAR_XID_CONTINUE = 32;
export const UCHAR_XID_START = 33;
export const UCHAR_CASE_SENSITIVE = 34;
export const UCHAR_S_TERM = 35;
export const UCHAR_VARIATION_SELECTOR = 36;
export const UCHAR_NFD_INERT = 37;
export const UCHAR_NFKD_INERT = 38;
export const UCHAR_NFC_INERT = 39;
export const UCHAR_NFKC_INERT = 40;
export const UCHAR_SEGMENT_STARTER = 41;
export const UCHAR_PATTERN_SYNTAX = 42;
export const UCHAR_PATTERN_WHITE_SPACE = 43;
export const UCHAR_POSIX_ALNUM = 44;
export const UCHAR_POSIX_BLANK = 45;
export const UCHAR_POSIX_GRAPH = 46;
export const UCHAR_POSIX_PRINT = 47;
export const UCHAR_POSIX_XDIGIT = 48;
export const UCHAR_CASED = 49;
export const UCHAR_CASE_IGNORABLE = 50;
export const UCHAR_CHANGES_WHEN_LOWERCASED = 51;
export const UCHAR_CHANGES_WHEN_UPPERCASED = 52;
export const UCHAR_CHANGES_WHEN_TITLECASED = 53;
export const UCHAR_CHANGES_WHEN_CASEFOLDED = 54;
export const UCHAR_CHANGES_WHEN_CASEMAPPED = 55;
export const UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED = 56;
export const UCHAR_EMOJI = 57;
export const UCHAR_EMOJI_PRESENTATION = 58;
export const UCHAR_EMOJI_MODIFIER = 59;
export const UCHAR_EMOJI_MODIFIER_BASE = 60;
export const UCHAR_EMOJI_COMPONENT = 61;
export const UCHAR_REGIONAL_INDICATOR = 62;
export const UCHAR_PREPENDED_CONCATENATION_MARK = 63;
export const UCHAR_EXTENDED_PICTOGRAPHIC = 64;
export const UCHAR_BIDI_CLASS = 4096;
export const UCHAR_INT_START = 4096;
export const UCHAR_BLOCK = 4097;
export const UCHAR_CANONICAL_COMBINING_CLASS = 4098;
export const UCHAR_DECOMPOSITION_TYPE = 4099;
export const UCHAR_EAST_ASIAN_WIDTH = 4100;
export const UCHAR_GENERAL_CATEGORY = 4101;
export const UCHAR_JOINING_GROUP = 4102;
export const UCHAR_JOINING_TYPE = 4103;
export const UCHAR_LINE_BREAK = 4104;
export const UCHAR_NUMERIC_TYPE = 4105;
export const UCHAR_SCRIPT = 4106;
export const UCHAR_HANGUL_SYLLABLE_TYPE = 4107;
export const UCHAR_NFD_QUICK_CHECK = 4108;
export const UCHAR_NFKD_QUICK_CHECK = 4109;
export const UCHAR_NFC_QUICK_CHECK = 4110;
export const UCHAR_NFKC_QUICK_CHECK = 4111;
export const UCHAR_LEAD_CANONICAL_COMBINING_CLASS = 4112;
export const UCHAR_TRAIL_CANONICAL_COMBINING_CLASS = 4113;
export const UCHAR_GRAPHEME_CLUSTER_BREAK = 4114;
export const UCHAR_SENTENCE_BREAK = 4115;
export const UCHAR_WORD_BREAK = 4116;
export const UCHAR_BIDI_PAIRED_BRACKET_TYPE = 4117;
export const UCHAR_INDIC_POSITIONAL_CATEGORY = 4118;
export const UCHAR_INDIC_SYLLABIC_CATEGORY = 4119;
export const UCHAR_VERTICAL_ORIENTATION = 4120;
export const UCHAR_GENERAL_CATEGORY_MASK = 8192;
export const UCHAR_MASK_START = 8192;
export const UCHAR_NUMERIC_VALUE = 12288;
export const UCHAR_DOUBLE_START = 12288;
export const UCHAR_AGE = 16384;
export const UCHAR_STRING_START = 16384;
export const UCHAR_BIDI_MIRRORING_GLYPH = 16385;
export const UCHAR_CASE_FOLDING = 16386;
export const UCHAR_LOWERCASE_MAPPING = 16388;
export const UCHAR_NAME = 16389;
export const UCHAR_SIMPLE_CASE_FOLDING = 16390;
export const UCHAR_SIMPLE_LOWERCASE_MAPPING = 16391;
export const UCHAR_SIMPLE_TITLECASE_MAPPING = 16392;
export const UCHAR_SIMPLE_UPPERCASE_MAPPING = 16393;
export const UCHAR_TITLECASE_MAPPING = 16394;
export const UCHAR_UPPERCASE_MAPPING = 16396;
export const UCHAR_BIDI_PAIRED_BRACKET = 16397;
export const UCHAR_SCRIPT_EXTENSIONS = 28672;
export const UCHAR_OTHER_PROPERTY_START = 28672;
export const UCHAR_INVALID_CODE = `-1`;
export const U_UNASSIGNED = 0;
export const U_GENERAL_OTHER_TYPES = 0;
export const U_UPPERCASE_LETTER = 1;
export const U_LOWERCASE_LETTER = 2;
export const U_TITLECASE_LETTER = 3;
export const U_MODIFIER_LETTER = 4;
export const U_OTHER_LETTER = 5;
export const U_NON_SPACING_MARK = 6;
export const U_ENCLOSING_MARK = 7;
export const U_COMBINING_SPACING_MARK = 8;
export const U_DECIMAL_DIGIT_NUMBER = 9;
export const U_LETTER_NUMBER = 10;
export const U_OTHER_NUMBER = 11;
export const U_SPACE_SEPARATOR = 12;
export const U_LINE_SEPARATOR = 13;
export const U_PARAGRAPH_SEPARATOR = 14;
export const U_CONTROL_CHAR = 15;
export const U_FORMAT_CHAR = 16;
export const U_PRIVATE_USE_CHAR = 17;
export const U_SURROGATE = 18;
export const U_DASH_PUNCTUATION = 19;
export const U_START_PUNCTUATION = 20;
export const U_END_PUNCTUATION = 21;
export const U_CONNECTOR_PUNCTUATION = 22;
export const U_OTHER_PUNCTUATION = 23;
export const U_MATH_SYMBOL = 24;
export const U_CURRENCY_SYMBOL = 25;
export const U_MODIFIER_SYMBOL = 26;
export const U_OTHER_SYMBOL = 27;
export const U_INITIAL_PUNCTUATION = 28;
export const U_FINAL_PUNCTUATION = 29;
export const U_CHAR_CATEGORY_COUNT = 30;
export const U_LEFT_TO_RIGHT = 0;
export const U_RIGHT_TO_LEFT = 1;
export const U_EUROPEAN_NUMBER = 2;
export const U_EUROPEAN_NUMBER_SEPARATOR = 3;
export const U_EUROPEAN_NUMBER_TERMINATOR = 4;
export const U_ARABIC_NUMBER = 5;
export const U_COMMON_NUMBER_SEPARATOR = 6;
export const U_BLOCK_SEPARATOR = 7;
export const U_SEGMENT_SEPARATOR = 8;
export const U_WHITE_SPACE_NEUTRAL = 9;
export const U_OTHER_NEUTRAL = 10;
export const U_LEFT_TO_RIGHT_EMBEDDING = 11;
export const U_LEFT_TO_RIGHT_OVERRIDE = 12;
export const U_RIGHT_TO_LEFT_ARABIC = 13;
export const U_RIGHT_TO_LEFT_EMBEDDING = 14;
export const U_RIGHT_TO_LEFT_OVERRIDE = 15;
export const U_POP_DIRECTIONAL_FORMAT = 16;
export const U_DIR_NON_SPACING_MARK = 17;
export const U_BOUNDARY_NEUTRAL = 18;
export const U_FIRST_STRONG_ISOLATE = 19;
export const U_LEFT_TO_RIGHT_ISOLATE = 20;
export const U_RIGHT_TO_LEFT_ISOLATE = 21;
export const U_POP_DIRECTIONAL_ISOLATE = 22;
export const U_BPT_NONE = 0;
export const U_BPT_OPEN = 1;
export const U_BPT_CLOSE = 2;
export const UBLOCK_NO_BLOCK = 0;
export const UBLOCK_BASIC_LATIN = 1;
export const UBLOCK_LATIN_1_SUPPLEMENT = 2;
export const UBLOCK_LATIN_EXTENDED_A = 3;
export const UBLOCK_LATIN_EXTENDED_B = 4;
export const UBLOCK_IPA_EXTENSIONS = 5;
export const UBLOCK_SPACING_MODIFIER_LETTERS = 6;
export const UBLOCK_COMBINING_DIACRITICAL_MARKS = 7;
export const UBLOCK_GREEK = 8;
export const UBLOCK_CYRILLIC = 9;
export const UBLOCK_ARMENIAN = 10;
export const UBLOCK_HEBREW = 11;
export const UBLOCK_ARABIC = 12;
export const UBLOCK_SYRIAC = 13;
export const UBLOCK_THAANA = 14;
export const UBLOCK_DEVANAGARI = 15;
export const UBLOCK_BENGALI = 16;
export const UBLOCK_GURMUKHI = 17;
export const UBLOCK_GUJARATI = 18;
export const UBLOCK_ORIYA = 19;
export const UBLOCK_TAMIL = 20;
export const UBLOCK_TELUGU = 21;
export const UBLOCK_KANNADA = 22;
export const UBLOCK_MALAYALAM = 23;
export const UBLOCK_SINHALA = 24;
export const UBLOCK_THAI = 25;
export const UBLOCK_LAO = 26;
export const UBLOCK_TIBETAN = 27;
export const UBLOCK_MYANMAR = 28;
export const UBLOCK_GEORGIAN = 29;
export const UBLOCK_HANGUL_JAMO = 30;
export const UBLOCK_ETHIOPIC = 31;
export const UBLOCK_CHEROKEE = 32;
export const UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = 33;
export const UBLOCK_OGHAM = 34;
export const UBLOCK_RUNIC = 35;
export const UBLOCK_KHMER = 36;
export const UBLOCK_MONGOLIAN = 37;
export const UBLOCK_LATIN_EXTENDED_ADDITIONAL = 38;
export const UBLOCK_GREEK_EXTENDED = 39;
export const UBLOCK_GENERAL_PUNCTUATION = 40;
export const UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS = 41;
export const UBLOCK_CURRENCY_SYMBOLS = 42;
export const UBLOCK_COMBINING_MARKS_FOR_SYMBOLS = 43;
export const UBLOCK_LETTERLIKE_SYMBOLS = 44;
export const UBLOCK_NUMBER_FORMS = 45;
export const UBLOCK_ARROWS = 46;
export const UBLOCK_MATHEMATICAL_OPERATORS = 47;
export const UBLOCK_MISCELLANEOUS_TECHNICAL = 48;
export const UBLOCK_CONTROL_PICTURES = 49;
export const UBLOCK_OPTICAL_CHARACTER_RECOGNITION = 50;
export const UBLOCK_ENCLOSED_ALPHANUMERICS = 51;
export const UBLOCK_BOX_DRAWING = 52;
export const UBLOCK_BLOCK_ELEMENTS = 53;
export const UBLOCK_GEOMETRIC_SHAPES = 54;
export const UBLOCK_MISCELLANEOUS_SYMBOLS = 55;
export const UBLOCK_DINGBATS = 56;
export const UBLOCK_BRAILLE_PATTERNS = 57;
export const UBLOCK_CJK_RADICALS_SUPPLEMENT = 58;
export const UBLOCK_KANGXI_RADICALS = 59;
export const UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS = 60;
export const UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION = 61;
export const UBLOCK_HIRAGANA = 62;
export const UBLOCK_KATAKANA = 63;
export const UBLOCK_BOPOMOFO = 64;
export const UBLOCK_HANGUL_COMPATIBILITY_JAMO = 65;
export const UBLOCK_KANBUN = 66;
export const UBLOCK_BOPOMOFO_EXTENDED = 67;
export const UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS = 68;
export const UBLOCK_CJK_COMPATIBILITY = 69;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = 70;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS = 71;
export const UBLOCK_YI_SYLLABLES = 72;
export const UBLOCK_YI_RADICALS = 73;
export const UBLOCK_HANGUL_SYLLABLES = 74;
export const UBLOCK_HIGH_SURROGATES = 75;
export const UBLOCK_HIGH_PRIVATE_USE_SURROGATES = 76;
export const UBLOCK_LOW_SURROGATES = 77;
export const UBLOCK_PRIVATE_USE_AREA = 78;
export const UBLOCK_PRIVATE_USE = 78;
export const UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS = 79;
export const UBLOCK_ALPHABETIC_PRESENTATION_FORMS = 80;
export const UBLOCK_ARABIC_PRESENTATION_FORMS_A = 81;
export const UBLOCK_COMBINING_HALF_MARKS = 82;
export const UBLOCK_CJK_COMPATIBILITY_FORMS = 83;
export const UBLOCK_SMALL_FORM_VARIANTS = 84;
export const UBLOCK_ARABIC_PRESENTATION_FORMS_B = 85;
export const UBLOCK_SPECIALS = 86;
export const UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS = 87;
export const UBLOCK_OLD_ITALIC = 88;
export const UBLOCK_GOTHIC = 89;
export const UBLOCK_DESERET = 90;
export const UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 91;
export const UBLOCK_MUSICAL_SYMBOLS = 92;
export const UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 93;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = 94;
export const UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 95;
export const UBLOCK_TAGS = 96;
export const UBLOCK_CYRILLIC_SUPPLEMENT = 97;
export const UBLOCK_CYRILLIC_SUPPLEMENTARY = 97;
export const UBLOCK_TAGALOG = 98;
export const UBLOCK_HANUNOO = 99;
export const UBLOCK_BUHID = 100;
export const UBLOCK_TAGBANWA = 101;
export const UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 102;
export const UBLOCK_SUPPLEMENTAL_ARROWS_A = 103;
export const UBLOCK_SUPPLEMENTAL_ARROWS_B = 104;
export const UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 105;
export const UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 106;
export const UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 107;
export const UBLOCK_VARIATION_SELECTORS = 108;
export const UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 109;
export const UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 110;
export const UBLOCK_LIMBU = 111;
export const UBLOCK_TAI_LE = 112;
export const UBLOCK_KHMER_SYMBOLS = 113;
export const UBLOCK_PHONETIC_EXTENSIONS = 114;
export const UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 115;
export const UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 116;
export const UBLOCK_LINEAR_B_SYLLABARY = 117;
export const UBLOCK_LINEAR_B_IDEOGRAMS = 118;
export const UBLOCK_AEGEAN_NUMBERS = 119;
export const UBLOCK_UGARITIC = 120;
export const UBLOCK_SHAVIAN = 121;
export const UBLOCK_OSMANYA = 122;
export const UBLOCK_CYPRIOT_SYLLABARY = 123;
export const UBLOCK_TAI_XUAN_JING_SYMBOLS = 124;
export const UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 125;
export const UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 126;
export const UBLOCK_ANCIENT_GREEK_NUMBERS = 127;
export const UBLOCK_ARABIC_SUPPLEMENT = 128;
export const UBLOCK_BUGINESE = 129;
export const UBLOCK_CJK_STROKES = 130;
export const UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 131;
export const UBLOCK_COPTIC = 132;
export const UBLOCK_ETHIOPIC_EXTENDED = 133;
export const UBLOCK_ETHIOPIC_SUPPLEMENT = 134;
export const UBLOCK_GEORGIAN_SUPPLEMENT = 135;
export const UBLOCK_GLAGOLITIC = 136;
export const UBLOCK_KHAROSHTHI = 137;
export const UBLOCK_MODIFIER_TONE_LETTERS = 138;
export const UBLOCK_NEW_TAI_LUE = 139;
export const UBLOCK_OLD_PERSIAN = 140;
export const UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 141;
export const UBLOCK_SUPPLEMENTAL_PUNCTUATION = 142;
export const UBLOCK_SYLOTI_NAGRI = 143;
export const UBLOCK_TIFINAGH = 144;
export const UBLOCK_VERTICAL_FORMS = 145;
export const UBLOCK_NKO = 146;
export const UBLOCK_BALINESE = 147;
export const UBLOCK_LATIN_EXTENDED_C = 148;
export const UBLOCK_LATIN_EXTENDED_D = 149;
export const UBLOCK_PHAGS_PA = 150;
export const UBLOCK_PHOENICIAN = 151;
export const UBLOCK_CUNEIFORM = 152;
export const UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 153;
export const UBLOCK_COUNTING_ROD_NUMERALS = 154;
export const UBLOCK_SUNDANESE = 155;
export const UBLOCK_LEPCHA = 156;
export const UBLOCK_OL_CHIKI = 157;
export const UBLOCK_CYRILLIC_EXTENDED_A = 158;
export const UBLOCK_VAI = 159;
export const UBLOCK_CYRILLIC_EXTENDED_B = 160;
export const UBLOCK_SAURASHTRA = 161;
export const UBLOCK_KAYAH_LI = 162;
export const UBLOCK_REJANG = 163;
export const UBLOCK_CHAM = 164;
export const UBLOCK_ANCIENT_SYMBOLS = 165;
export const UBLOCK_PHAISTOS_DISC = 166;
export const UBLOCK_LYCIAN = 167;
export const UBLOCK_CARIAN = 168;
export const UBLOCK_LYDIAN = 169;
export const UBLOCK_MAHJONG_TILES = 170;
export const UBLOCK_DOMINO_TILES = 171;
export const UBLOCK_SAMARITAN = 172;
export const UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 173;
export const UBLOCK_TAI_THAM = 174;
export const UBLOCK_VEDIC_EXTENSIONS = 175;
export const UBLOCK_LISU = 176;
export const UBLOCK_BAMUM = 177;
export const UBLOCK_COMMON_INDIC_NUMBER_FORMS = 178;
export const UBLOCK_DEVANAGARI_EXTENDED = 179;
export const UBLOCK_HANGUL_JAMO_EXTENDED_A = 180;
export const UBLOCK_JAVANESE = 181;
export const UBLOCK_MYANMAR_EXTENDED_A = 182;
export const UBLOCK_TAI_VIET = 183;
export const UBLOCK_MEETEI_MAYEK = 184;
export const UBLOCK_HANGUL_JAMO_EXTENDED_B = 185;
export const UBLOCK_IMPERIAL_ARAMAIC = 186;
export const UBLOCK_OLD_SOUTH_ARABIAN = 187;
export const UBLOCK_AVESTAN = 188;
export const UBLOCK_INSCRIPTIONAL_PARTHIAN = 189;
export const UBLOCK_INSCRIPTIONAL_PAHLAVI = 190;
export const UBLOCK_OLD_TURKIC = 191;
export const UBLOCK_RUMI_NUMERAL_SYMBOLS = 192;
export const UBLOCK_KAITHI = 193;
export const UBLOCK_EGYPTIAN_HIEROGLYPHS = 194;
export const UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 195;
export const UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 196;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 197;
export const UBLOCK_MANDAIC = 198;
export const UBLOCK_BATAK = 199;
export const UBLOCK_ETHIOPIC_EXTENDED_A = 200;
export const UBLOCK_BRAHMI = 201;
export const UBLOCK_BAMUM_SUPPLEMENT = 202;
export const UBLOCK_KANA_SUPPLEMENT = 203;
export const UBLOCK_PLAYING_CARDS = 204;
export const UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 205;
export const UBLOCK_EMOTICONS = 206;
export const UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 207;
export const UBLOCK_ALCHEMICAL_SYMBOLS = 208;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 209;
export const UBLOCK_ARABIC_EXTENDED_A = 210;
export const UBLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = 211;
export const UBLOCK_CHAKMA = 212;
export const UBLOCK_MEETEI_MAYEK_EXTENSIONS = 213;
export const UBLOCK_MEROITIC_CURSIVE = 214;
export const UBLOCK_MEROITIC_HIEROGLYPHS = 215;
export const UBLOCK_MIAO = 216;
export const UBLOCK_SHARADA = 217;
export const UBLOCK_SORA_SOMPENG = 218;
export const UBLOCK_SUNDANESE_SUPPLEMENT = 219;
export const UBLOCK_TAKRI = 220;
export const UBLOCK_BASSA_VAH = 221;
export const UBLOCK_CAUCASIAN_ALBANIAN = 222;
export const UBLOCK_COPTIC_EPACT_NUMBERS = 223;
export const UBLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED = 224;
export const UBLOCK_DUPLOYAN = 225;
export const UBLOCK_ELBASAN = 226;
export const UBLOCK_GEOMETRIC_SHAPES_EXTENDED = 227;
export const UBLOCK_GRANTHA = 228;
export const UBLOCK_KHOJKI = 229;
export const UBLOCK_KHUDAWADI = 230;
export const UBLOCK_LATIN_EXTENDED_E = 231;
export const UBLOCK_LINEAR_A = 232;
export const UBLOCK_MAHAJANI = 233;
export const UBLOCK_MANICHAEAN = 234;
export const UBLOCK_MENDE_KIKAKUI = 235;
export const UBLOCK_MODI = 236;
export const UBLOCK_MRO = 237;
export const UBLOCK_MYANMAR_EXTENDED_B = 238;
export const UBLOCK_NABATAEAN = 239;
export const UBLOCK_OLD_NORTH_ARABIAN = 240;
export const UBLOCK_OLD_PERMIC = 241;
export const UBLOCK_ORNAMENTAL_DINGBATS = 242;
export const UBLOCK_PAHAWH_HMONG = 243;
export const UBLOCK_PALMYRENE = 244;
export const UBLOCK_PAU_CIN_HAU = 245;
export const UBLOCK_PSALTER_PAHLAVI = 246;
export const UBLOCK_SHORTHAND_FORMAT_CONTROLS = 247;
export const UBLOCK_SIDDHAM = 248;
export const UBLOCK_SINHALA_ARCHAIC_NUMBERS = 249;
export const UBLOCK_SUPPLEMENTAL_ARROWS_C = 250;
export const UBLOCK_TIRHUTA = 251;
export const UBLOCK_WARANG_CITI = 252;
export const UBLOCK_AHOM = 253;
export const UBLOCK_ANATOLIAN_HIEROGLYPHS = 254;
export const UBLOCK_CHEROKEE_SUPPLEMENT = 255;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E = 256;
export const UBLOCK_EARLY_DYNASTIC_CUNEIFORM = 257;
export const UBLOCK_HATRAN = 258;
export const UBLOCK_MULTANI = 259;
export const UBLOCK_OLD_HUNGARIAN = 260;
export const UBLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS = 261;
export const UBLOCK_SUTTON_SIGNWRITING = 262;
export const UBLOCK_ADLAM = 263;
export const UBLOCK_BHAIKSUKI = 264;
export const UBLOCK_CYRILLIC_EXTENDED_C = 265;
export const UBLOCK_GLAGOLITIC_SUPPLEMENT = 266;
export const UBLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION = 267;
export const UBLOCK_MARCHEN = 268;
export const UBLOCK_MONGOLIAN_SUPPLEMENT = 269;
export const UBLOCK_NEWA = 270;
export const UBLOCK_OSAGE = 271;
export const UBLOCK_TANGUT = 272;
export const UBLOCK_TANGUT_COMPONENTS = 273;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F = 274;
export const UBLOCK_KANA_EXTENDED_A = 275;
export const UBLOCK_MASARAM_GONDI = 276;
export const UBLOCK_NUSHU = 277;
export const UBLOCK_SOYOMBO = 278;
export const UBLOCK_SYRIAC_SUPPLEMENT = 279;
export const UBLOCK_ZANABAZAR_SQUARE = 280;
export const UBLOCK_CHESS_SYMBOLS = 281;
export const UBLOCK_DOGRA = 282;
export const UBLOCK_GEORGIAN_EXTENDED = 283;
export const UBLOCK_GUNJALA_GONDI = 284;
export const UBLOCK_HANIFI_ROHINGYA = 285;
export const UBLOCK_INDIC_SIYAQ_NUMBERS = 286;
export const UBLOCK_MAKASAR = 287;
export const UBLOCK_MAYAN_NUMERALS = 288;
export const UBLOCK_MEDEFAIDRIN = 289;
export const UBLOCK_OLD_SOGDIAN = 290;
export const UBLOCK_SOGDIAN = 291;
export const UBLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS = 292;
export const UBLOCK_ELYMAIC = 293;
export const UBLOCK_NANDINAGARI = 294;
export const UBLOCK_NYIAKENG_PUACHUE_HMONG = 295;
export const UBLOCK_OTTOMAN_SIYAQ_NUMBERS = 296;
export const UBLOCK_SMALL_KANA_EXTENSION = 297;
export const UBLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A = 298;
export const UBLOCK_TAMIL_SUPPLEMENT = 299;
export const UBLOCK_WANCHO = 300;
export const UBLOCK_CHORASMIAN = 301;
export const UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G = 302;
export const UBLOCK_DIVES_AKURU = 303;
export const UBLOCK_KHITAN_SMALL_SCRIPT = 304;
export const UBLOCK_LISU_SUPPLEMENT = 305;
export const UBLOCK_SYMBOLS_FOR_LEGACY_COMPUTING = 306;
export const UBLOCK_TANGUT_SUPPLEMENT = 307;
export const UBLOCK_YEZIDI = 308;
export const UBLOCK_INVALID_CODE = `-1`;
export const U_EA_NEUTRAL = 0;
export const U_EA_AMBIGUOUS = 1;
export const U_EA_HALFWIDTH = 2;
export const U_EA_FULLWIDTH = 3;
export const U_EA_NARROW = 4;
export const U_EA_WIDE = 5;
export const U_UNICODE_CHAR_NAME = 0;
export const U_EXTENDED_CHAR_NAME = 2;
export const U_CHAR_NAME_ALIAS = 3;
export const U_SHORT_PROPERTY_NAME = 0;
export const U_LONG_PROPERTY_NAME = 1;
export const U_DT_NONE = 0;
export const U_DT_CANONICAL = 1;
export const U_DT_COMPAT = 2;
export const U_DT_CIRCLE = 3;
export const U_DT_FINAL = 4;
export const U_DT_FONT = 5;
export const U_DT_FRACTION = 6;
export const U_DT_INITIAL = 7;
export const U_DT_ISOLATED = 8;
export const U_DT_MEDIAL = 9;
export const U_DT_NARROW = 10;
export const U_DT_NOBREAK = 11;
export const U_DT_SMALL = 12;
export const U_DT_SQUARE = 13;
export const U_DT_SUB = 14;
export const U_DT_SUPER = 15;
export const U_DT_VERTICAL = 16;
export const U_DT_WIDE = 17;
export const U_JT_NON_JOINING = 0;
export const U_JT_JOIN_CAUSING = 1;
export const U_JT_DUAL_JOINING = 2;
export const U_JT_LEFT_JOINING = 3;
export const U_JT_RIGHT_JOINING = 4;
export const U_JT_TRANSPARENT = 5;
export const U_JG_NO_JOINING_GROUP = 0;
export const U_JG_AIN = 1;
export const U_JG_ALAPH = 2;
export const U_JG_ALEF = 3;
export const U_JG_BEH = 4;
export const U_JG_BETH = 5;
export const U_JG_DAL = 6;
export const U_JG_DALATH_RISH = 7;
export const U_JG_E = 8;
export const U_JG_FEH = 9;
export const U_JG_FINAL_SEMKATH = 10;
export const U_JG_GAF = 11;
export const U_JG_GAMAL = 12;
export const U_JG_HAH = 13;
export const U_JG_TEH_MARBUTA_GOAL = 14;
export const U_JG_HAMZA_ON_HEH_GOAL = 14;
export const U_JG_HE = 15;
export const U_JG_HEH = 16;
export const U_JG_HEH_GOAL = 17;
export const U_JG_HETH = 18;
export const U_JG_KAF = 19;
export const U_JG_KAPH = 20;
export const U_JG_KNOTTED_HEH = 21;
export const U_JG_LAM = 22;
export const U_JG_LAMADH = 23;
export const U_JG_MEEM = 24;
export const U_JG_MIM = 25;
export const U_JG_NOON = 26;
export const U_JG_NUN = 27;
export const U_JG_PE = 28;
export const U_JG_QAF = 29;
export const U_JG_QAPH = 30;
export const U_JG_REH = 31;
export const U_JG_REVERSED_PE = 32;
export const U_JG_SAD = 33;
export const U_JG_SADHE = 34;
export const U_JG_SEEN = 35;
export const U_JG_SEMKATH = 36;
export const U_JG_SHIN = 37;
export const U_JG_SWASH_KAF = 38;
export const U_JG_SYRIAC_WAW = 39;
export const U_JG_TAH = 40;
export const U_JG_TAW = 41;
export const U_JG_TEH_MARBUTA = 42;
export const U_JG_TETH = 43;
export const U_JG_WAW = 44;
export const U_JG_YEH = 45;
export const U_JG_YEH_BARREE = 46;
export const U_JG_YEH_WITH_TAIL = 47;
export const U_JG_YUDH = 48;
export const U_JG_YUDH_HE = 49;
export const U_JG_ZAIN = 50;
export const U_JG_FE = 51;
export const U_JG_KHAPH = 52;
export const U_JG_ZHAIN = 53;
export const U_JG_BURUSHASKI_YEH_BARREE = 54;
export const U_JG_FARSI_YEH = 55;
export const U_JG_NYA = 56;
export const U_JG_ROHINGYA_YEH = 57;
export const U_JG_MANICHAEAN_ALEPH = 58;
export const U_JG_MANICHAEAN_AYIN = 59;
export const U_JG_MANICHAEAN_BETH = 60;
export const U_JG_MANICHAEAN_DALETH = 61;
export const U_JG_MANICHAEAN_DHAMEDH = 62;
export const U_JG_MANICHAEAN_FIVE = 63;
export const U_JG_MANICHAEAN_GIMEL = 64;
export const U_JG_MANICHAEAN_HETH = 65;
export const U_JG_MANICHAEAN_HUNDRED = 66;
export const U_JG_MANICHAEAN_KAPH = 67;
export const U_JG_MANICHAEAN_LAMEDH = 68;
export const U_JG_MANICHAEAN_MEM = 69;
export const U_JG_MANICHAEAN_NUN = 70;
export const U_JG_MANICHAEAN_ONE = 71;
export const U_JG_MANICHAEAN_PE = 72;
export const U_JG_MANICHAEAN_QOPH = 73;
export const U_JG_MANICHAEAN_RESH = 74;
export const U_JG_MANICHAEAN_SADHE = 75;
export const U_JG_MANICHAEAN_SAMEKH = 76;
export const U_JG_MANICHAEAN_TAW = 77;
export const U_JG_MANICHAEAN_TEN = 78;
export const U_JG_MANICHAEAN_TETH = 79;
export const U_JG_MANICHAEAN_THAMEDH = 80;
export const U_JG_MANICHAEAN_TWENTY = 81;
export const U_JG_MANICHAEAN_WAW = 82;
export const U_JG_MANICHAEAN_YODH = 83;
export const U_JG_MANICHAEAN_ZAYIN = 84;
export const U_JG_STRAIGHT_WAW = 85;
export const U_JG_AFRICAN_FEH = 86;
export const U_JG_AFRICAN_NOON = 87;
export const U_JG_AFRICAN_QAF = 88;
export const U_JG_MALAYALAM_BHA = 89;
export const U_JG_MALAYALAM_JA = 90;
export const U_JG_MALAYALAM_LLA = 91;
export const U_JG_MALAYALAM_LLLA = 92;
export const U_JG_MALAYALAM_NGA = 93;
export const U_JG_MALAYALAM_NNA = 94;
export const U_JG_MALAYALAM_NNNA = 95;
export const U_JG_MALAYALAM_NYA = 96;
export const U_JG_MALAYALAM_RA = 97;
export const U_JG_MALAYALAM_SSA = 98;
export const U_JG_MALAYALAM_TTA = 99;
export const U_JG_HANIFI_ROHINGYA_KINNA_YA = 100;
export const U_JG_HANIFI_ROHINGYA_PA = 101;
export const U_GCB_OTHER = 0;
export const U_GCB_CONTROL = 1;
export const U_GCB_CR = 2;
export const U_GCB_EXTEND = 3;
export const U_GCB_L = 4;
export const U_GCB_LF = 5;
export const U_GCB_LV = 6;
export const U_GCB_LVT = 7;
export const U_GCB_T = 8;
export const U_GCB_V = 9;
export const U_GCB_SPACING_MARK = 10;
export const U_GCB_PREPEND = 11;
export const U_GCB_REGIONAL_INDICATOR = 12;
export const U_GCB_E_BASE = 13;
export const U_GCB_E_BASE_GAZ = 14;
export const U_GCB_E_MODIFIER = 15;
export const U_GCB_GLUE_AFTER_ZWJ = 16;
export const U_GCB_ZWJ = 17;
export const U_WB_OTHER = 0;
export const U_WB_ALETTER = 1;
export const U_WB_FORMAT = 2;
export const U_WB_KATAKANA = 3;
export const U_WB_MIDLETTER = 4;
export const U_WB_MIDNUM = 5;
export const U_WB_NUMERIC = 6;
export const U_WB_EXTENDNUMLET = 7;
export const U_WB_CR = 8;
export const U_WB_EXTEND = 9;
export const U_WB_LF = 10;
export const U_WB_MIDNUMLET = 11;
export const U_WB_NEWLINE = 12;
export const U_WB_REGIONAL_INDICATOR = 13;
export const U_WB_HEBREW_LETTER = 14;
export const U_WB_SINGLE_QUOTE = 15;
export const U_WB_DOUBLE_QUOTE = 16;
export const U_WB_E_BASE = 17;
export const U_WB_E_BASE_GAZ = 18;
export const U_WB_E_MODIFIER = 19;
export const U_WB_GLUE_AFTER_ZWJ = 20;
export const U_WB_ZWJ = 21;
export const U_WB_WSEGSPACE = 22;
export const U_SB_OTHER = 0;
export const U_SB_ATERM = 1;
export const U_SB_CLOSE = 2;
export const U_SB_FORMAT = 3;
export const U_SB_LOWER = 4;
export const U_SB_NUMERIC = 5;
export const U_SB_OLETTER = 6;
export const U_SB_SEP = 7;
export const U_SB_SP = 8;
export const U_SB_STERM = 9;
export const U_SB_UPPER = 10;
export const U_SB_CR = 11;
export const U_SB_EXTEND = 12;
export const U_SB_LF = 13;
export const U_SB_SCONTINUE = 14;
export const U_LB_UNKNOWN = 0;
export const U_LB_AMBIGUOUS = 1;
export const U_LB_ALPHABETIC = 2;
export const U_LB_BREAK_BOTH = 3;
export const U_LB_BREAK_AFTER = 4;
export const U_LB_BREAK_BEFORE = 5;
export const U_LB_MANDATORY_BREAK = 6;
export const U_LB_CONTINGENT_BREAK = 7;
export const U_LB_CLOSE_PUNCTUATION = 8;
export const U_LB_COMBINING_MARK = 9;
export const U_LB_CARRIAGE_RETURN = 10;
export const U_LB_EXCLAMATION = 11;
export const U_LB_GLUE = 12;
export const U_LB_HYPHEN = 13;
export const U_LB_IDEOGRAPHIC = 14;
export const U_LB_INSEPARABLE = 15;
export const U_LB_INSEPERABLE = 15;
export const U_LB_INFIX_NUMERIC = 16;
export const U_LB_LINE_FEED = 17;
export const U_LB_NONSTARTER = 18;
export const U_LB_NUMERIC = 19;
export const U_LB_OPEN_PUNCTUATION = 20;
export const U_LB_POSTFIX_NUMERIC = 21;
export const U_LB_PREFIX_NUMERIC = 22;
export const U_LB_QUOTATION = 23;
export const U_LB_COMPLEX_CONTEXT = 24;
export const U_LB_SURROGATE = 25;
export const U_LB_SPACE = 26;
export const U_LB_BREAK_SYMBOLS = 27;
export const U_LB_ZWSPACE = 28;
export const U_LB_NEXT_LINE = 29;
export const U_LB_WORD_JOINER = 30;
export const U_LB_H2 = 31;
export const U_LB_H3 = 32;
export const U_LB_JL = 33;
export const U_LB_JT = 34;
export const U_LB_JV = 35;
export const U_LB_CLOSE_PARENTHESIS = 36;
export const U_LB_CONDITIONAL_JAPANESE_STARTER = 37;
export const U_LB_HEBREW_LETTER = 38;
export const U_LB_REGIONAL_INDICATOR = 39;
export const U_LB_E_BASE = 40;
export const U_LB_E_MODIFIER = 41;
export const U_LB_ZWJ = 42;
export const U_NT_NONE = 0;
export const U_NT_DECIMAL = 1;
export const U_NT_DIGIT = 2;
export const U_NT_NUMERIC = 3;
export const U_HST_NOT_APPLICABLE = 0;
export const U_HST_LEADING_JAMO = 1;
export const U_HST_VOWEL_JAMO = 2;
export const U_HST_TRAILING_JAMO = 3;
export const U_HST_LV_SYLLABLE = 4;
export const U_HST_LVT_SYLLABLE = 5;
export const U_INPC_NA = 0;
export const U_INPC_BOTTOM = 1;
export const U_INPC_BOTTOM_AND_LEFT = 2;
export const U_INPC_BOTTOM_AND_RIGHT = 3;
export const U_INPC_LEFT = 4;
export const U_INPC_LEFT_AND_RIGHT = 5;
export const U_INPC_OVERSTRUCK = 6;
export const U_INPC_RIGHT = 7;
export const U_INPC_TOP = 8;
export const U_INPC_TOP_AND_BOTTOM = 9;
export const U_INPC_TOP_AND_BOTTOM_AND_RIGHT = 10;
export const U_INPC_TOP_AND_LEFT = 11;
export const U_INPC_TOP_AND_LEFT_AND_RIGHT = 12;
export const U_INPC_TOP_AND_RIGHT = 13;
export const U_INPC_VISUAL_ORDER_LEFT = 14;
export const U_INPC_TOP_AND_BOTTOM_AND_LEFT = 15;
export const U_INSC_OTHER = 0;
export const U_INSC_AVAGRAHA = 1;
export const U_INSC_BINDU = 2;
export const U_INSC_BRAHMI_JOINING_NUMBER = 3;
export const U_INSC_CANTILLATION_MARK = 4;
export const U_INSC_CONSONANT = 5;
export const U_INSC_CONSONANT_DEAD = 6;
export const U_INSC_CONSONANT_FINAL = 7;
export const U_INSC_CONSONANT_HEAD_LETTER = 8;
export const U_INSC_CONSONANT_INITIAL_POSTFIXED = 9;
export const U_INSC_CONSONANT_KILLER = 10;
export const U_INSC_CONSONANT_MEDIAL = 11;
export const U_INSC_CONSONANT_PLACEHOLDER = 12;
export const U_INSC_CONSONANT_PRECEDING_REPHA = 13;
export const U_INSC_CONSONANT_PREFIXED = 14;
export const U_INSC_CONSONANT_SUBJOINED = 15;
export const U_INSC_CONSONANT_SUCCEEDING_REPHA = 16;
export const U_INSC_CONSONANT_WITH_STACKER = 17;
export const U_INSC_GEMINATION_MARK = 18;
export const U_INSC_INVISIBLE_STACKER = 19;
export const U_INSC_JOINER = 20;
export const U_INSC_MODIFYING_LETTER = 21;
export const U_INSC_NON_JOINER = 22;
export const U_INSC_NUKTA = 23;
export const U_INSC_NUMBER = 24;
export const U_INSC_NUMBER_JOINER = 25;
export const U_INSC_PURE_KILLER = 26;
export const U_INSC_REGISTER_SHIFTER = 27;
export const U_INSC_SYLLABLE_MODIFIER = 28;
export const U_INSC_TONE_LETTER = 29;
export const U_INSC_TONE_MARK = 30;
export const U_INSC_VIRAMA = 31;
export const U_INSC_VISARGA = 32;
export const U_INSC_VOWEL = 33;
export const U_INSC_VOWEL_DEPENDENT = 34;
export const U_INSC_VOWEL_INDEPENDENT = 35;
export const U_VO_ROTATED = 0;
export const U_VO_TRANSFORMED_ROTATED = 1;
export const U_VO_TRANSFORMED_UPRIGHT = 2;
export const U_VO_UPRIGHT = 3;
export const UBIDI_LTR = 0;
export const UBIDI_RTL = 1;
export const UBIDI_MIXED = 2;
export const UBIDI_NEUTRAL = 3;
export const UBIDI_REORDER_DEFAULT = 0;
export const UBIDI_REORDER_NUMBERS_SPECIAL = 1;
export const UBIDI_REORDER_GROUP_NUMBERS_WITH_R = 2;
export const UBIDI_REORDER_RUNS_ONLY = 3;
export const UBIDI_REORDER_INVERSE_NUMBERS_AS_L = 4;
export const UBIDI_REORDER_INVERSE_LIKE_DIRECT = 5;
export const UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL = 6;
export const UBIDI_OPTION_DEFAULT = 0;
export const UBIDI_OPTION_INSERT_MARKS = 1;
export const UBIDI_OPTION_REMOVE_CONTROLS = 2;
export const UBIDI_OPTION_STREAMING = 4;
export const UBIDI_LOGICAL = 0;
export const UBIDI_VISUAL = 1;
export const UBIDI_MIRRORING_OFF = 0;
export const UBIDI_MIRRORING_ON = 1;
export const USET_SPAN_NOT_CONTAINED = 0;
export const USET_SPAN_CONTAINED = 1;
export const USET_SPAN_SIMPLE = 2;
export const UNORM2_COMPOSE = 0;
export const UNORM2_DECOMPOSE = 1;
export const UNORM2_FCD = 2;
export const UNORM2_COMPOSE_CONTIGUOUS = 3;
export const UNORM_NO = 0;
export const UNORM_YES = 1;
export const UNORM_MAYBE = 2;
export const UNORM_NONE = 1;
export const UNORM_NFD = 2;
export const UNORM_NFKD = 3;
export const UNORM_NFC = 4;
export const UNORM_DEFAULT = 4;
export const UNORM_NFKC = 5;
export const UNORM_FCD = 6;
export const UNORM_MODE_COUNT = 7;
export const USPREP_RFC3491_NAMEPREP = 0;
export const USPREP_RFC3530_NFS4_CS_PREP = 1;
export const USPREP_RFC3530_NFS4_CS_PREP_CI = 2;
export const USPREP_RFC3530_NFS4_CIS_PREP = 3;
export const USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX = 4;
export const USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX = 5;
export const USPREP_RFC3722_ISCSI = 6;
export const USPREP_RFC3920_NODEPREP = 7;
export const USPREP_RFC3920_RESOURCEPREP = 8;
export const USPREP_RFC4011_MIB = 9;
export const USPREP_RFC4013_SASLPREP = 10;
export const USPREP_RFC4505_TRACE = 11;
export const USPREP_RFC4518_LDAP = 12;
export const USPREP_RFC4518_LDAP_CI = 13;
export const UBRK_CHARACTER = 0;
export const UBRK_WORD = 1;
export const UBRK_LINE = 2;
export const UBRK_SENTENCE = 3;
export const UBRK_WORD_NONE = 0;
export const UBRK_WORD_NONE_LIMIT = 100;
export const UBRK_WORD_NUMBER = 100;
export const UBRK_WORD_NUMBER_LIMIT = 200;
export const UBRK_WORD_LETTER = 200;
export const UBRK_WORD_LETTER_LIMIT = 300;
export const UBRK_WORD_KANA = 300;
export const UBRK_WORD_KANA_LIMIT = 400;
export const UBRK_WORD_IDEO = 400;
export const UBRK_WORD_IDEO_LIMIT = 500;
export const UBRK_LINE_SOFT = 0;
export const UBRK_LINE_SOFT_LIMIT = 100;
export const UBRK_LINE_HARD = 100;
export const UBRK_LINE_HARD_LIMIT = 200;
export const UBRK_SENTENCE_TERM = 0;
export const UBRK_SENTENCE_TERM_LIMIT = 100;
export const UBRK_SENTENCE_SEP = 100;
export const UBRK_SENTENCE_SEP_LIMIT = 200;
export const UCAL_TRADITIONAL = 0;
export const UCAL_DEFAULT = 0;
export const UCAL_GREGORIAN = 1;
export const UCAL_ERA = 0;
export const UCAL_YEAR = 1;
export const UCAL_MONTH = 2;
export const UCAL_WEEK_OF_YEAR = 3;
export const UCAL_WEEK_OF_MONTH = 4;
export const UCAL_DATE = 5;
export const UCAL_DAY_OF_YEAR = 6;
export const UCAL_DAY_OF_WEEK = 7;
export const UCAL_DAY_OF_WEEK_IN_MONTH = 8;
export const UCAL_AM_PM = 9;
export const UCAL_HOUR = 10;
export const UCAL_HOUR_OF_DAY = 11;
export const UCAL_MINUTE = 12;
export const UCAL_SECOND = 13;
export const UCAL_MILLISECOND = 14;
export const UCAL_ZONE_OFFSET = 15;
export const UCAL_DST_OFFSET = 16;
export const UCAL_YEAR_WOY = 17;
export const UCAL_DOW_LOCAL = 18;
export const UCAL_EXTENDED_YEAR = 19;
export const UCAL_JULIAN_DAY = 20;
export const UCAL_MILLISECONDS_IN_DAY = 21;
export const UCAL_IS_LEAP_MONTH = 22;
export const UCAL_FIELD_COUNT = 23;
export const UCAL_DAY_OF_MONTH = 5;
export const UCAL_SUNDAY = 1;
export const UCAL_MONDAY = 2;
export const UCAL_TUESDAY = 3;
export const UCAL_WEDNESDAY = 4;
export const UCAL_THURSDAY = 5;
export const UCAL_FRIDAY = 6;
export const UCAL_SATURDAY = 7;
export const UCAL_JANUARY = 0;
export const UCAL_FEBRUARY = 1;
export const UCAL_MARCH = 2;
export const UCAL_APRIL = 3;
export const UCAL_MAY = 4;
export const UCAL_JUNE = 5;
export const UCAL_JULY = 6;
export const UCAL_AUGUST = 7;
export const UCAL_SEPTEMBER = 8;
export const UCAL_OCTOBER = 9;
export const UCAL_NOVEMBER = 10;
export const UCAL_DECEMBER = 11;
export const UCAL_UNDECIMBER = 12;
export const UCAL_AM = 0;
export const UCAL_PM = 1;
export const UCAL_ZONE_TYPE_ANY = 0;
export const UCAL_ZONE_TYPE_CANONICAL = 1;
export const UCAL_ZONE_TYPE_CANONICAL_LOCATION = 2;
export const UCAL_STANDARD = 0;
export const UCAL_SHORT_STANDARD = 1;
export const UCAL_DST = 2;
export const UCAL_SHORT_DST = 3;
export const UCAL_LENIENT = 0;
export const UCAL_FIRST_DAY_OF_WEEK = 1;
export const UCAL_MINIMAL_DAYS_IN_FIRST_WEEK = 2;
export const UCAL_REPEATED_WALL_TIME = 3;
export const UCAL_SKIPPED_WALL_TIME = 4;
export const UCAL_WALLTIME_LAST = 0;
export const UCAL_WALLTIME_FIRST = 1;
export const UCAL_WALLTIME_NEXT_VALID = 2;
export const UCAL_MINIMUM = 0;
export const UCAL_MAXIMUM = 1;
export const UCAL_GREATEST_MINIMUM = 2;
export const UCAL_LEAST_MAXIMUM = 3;
export const UCAL_ACTUAL_MINIMUM = 4;
export const UCAL_ACTUAL_MAXIMUM = 5;
export const UCAL_WEEKDAY = 0;
export const UCAL_WEEKEND = 1;
export const UCAL_WEEKEND_ONSET = 2;
export const UCAL_WEEKEND_CEASE = 3;
export const UCAL_TZ_TRANSITION_NEXT = 0;
export const UCAL_TZ_TRANSITION_NEXT_INCLUSIVE = 1;
export const UCAL_TZ_TRANSITION_PREVIOUS = 2;
export const UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE = 3;
export const UCOL_EQUAL = 0;
export const UCOL_GREATER = 1;
export const UCOL_LESS = `-1`;
export const UCOL_DEFAULT = `-1`;
export const UCOL_PRIMARY = 0;
export const UCOL_SECONDARY = 1;
export const UCOL_TERTIARY = 2;
export const UCOL_DEFAULT_STRENGTH = 2;
export const UCOL_CE_STRENGTH_LIMIT = 3;
export const UCOL_QUATERNARY = 3;
export const UCOL_IDENTICAL = 15;
export const UCOL_STRENGTH_LIMIT = 16;
export const UCOL_OFF = 16;
export const UCOL_ON = 17;
export const UCOL_SHIFTED = 20;
export const UCOL_NON_IGNORABLE = 21;
export const UCOL_LOWER_FIRST = 24;
export const UCOL_UPPER_FIRST = 25;
export const UCOL_REORDER_CODE_DEFAULT = `-1`;
export const UCOL_REORDER_CODE_NONE = 103;
export const UCOL_REORDER_CODE_OTHERS = 103;
export const UCOL_REORDER_CODE_SPACE = 4096;
export const UCOL_REORDER_CODE_FIRST = 4096;
export const UCOL_REORDER_CODE_PUNCTUATION = 4097;
export const UCOL_REORDER_CODE_SYMBOL = 4098;
export const UCOL_REORDER_CODE_CURRENCY = 4099;
export const UCOL_REORDER_CODE_DIGIT = 4100;
export const UCOL_FRENCH_COLLATION = 0;
export const UCOL_ALTERNATE_HANDLING = 1;
export const UCOL_CASE_FIRST = 2;
export const UCOL_CASE_LEVEL = 3;
export const UCOL_NORMALIZATION_MODE = 4;
export const UCOL_DECOMPOSITION_MODE = 4;
export const UCOL_STRENGTH = 5;
export const UCOL_NUMERIC_COLLATION = 7;
export const UCOL_ATTRIBUTE_COUNT = 8;
export const UCOL_TAILORING_ONLY = 0;
export const UCOL_FULL_RULES = 1;
export const UCOL_BOUND_LOWER = 0;
export const UCOL_BOUND_UPPER = 1;
export const UCOL_BOUND_UPPER_LONG = 2;
export const UFMT_DATE = 0;
export const UFMT_DOUBLE = 1;
export const UFMT_LONG = 2;
export const UFMT_STRING = 3;
export const UFMT_ARRAY = 4;
export const UFMT_INT64 = 5;
export const UFMT_OBJECT = 6;
export const UFIELD_CATEGORY_UNDEFINED = 0;
export const UFIELD_CATEGORY_DATE = 1;
export const UFIELD_CATEGORY_NUMBER = 2;
export const UFIELD_CATEGORY_LIST = 3;
export const UFIELD_CATEGORY_RELATIVE_DATETIME = 4;
export const UFIELD_CATEGORY_DATE_INTERVAL = 5;
export const UFIELD_CATEGORY_LIST_SPAN = 4099;
export const UFIELD_CATEGORY_DATE_INTERVAL_SPAN = 4101;
export const UGENDER_MALE = 0;
export const UGENDER_FEMALE = 1;
export const UGENDER_OTHER = 2;
export const ULISTFMT_LITERAL_FIELD = 0;
export const ULISTFMT_ELEMENT_FIELD = 1;
export const ULISTFMT_TYPE_AND = 0;
export const ULISTFMT_TYPE_OR = 1;
export const ULISTFMT_TYPE_UNITS = 2;
export const ULISTFMT_WIDTH_WIDE = 0;
export const ULISTFMT_WIDTH_SHORT = 1;
export const ULISTFMT_WIDTH_NARROW = 2;
export const ULOCDATA_ES_STANDARD = 0;
export const ULOCDATA_ES_AUXILIARY = 1;
export const ULOCDATA_ES_INDEX = 2;
export const ULOCDATA_ES_PUNCTUATION = 3;
export const ULOCDATA_QUOTATION_START = 0;
export const ULOCDATA_QUOTATION_END = 1;
export const ULOCDATA_ALT_QUOTATION_START = 2;
export const ULOCDATA_ALT_QUOTATION_END = 3;
export const UMS_SI = 0;
export const UMS_US = 1;
export const UMS_UK = 2;
export const UNUM_PATTERN_DECIMAL = 0;
export const UNUM_DECIMAL = 1;
export const UNUM_CURRENCY = 2;
export const UNUM_PERCENT = 3;
export const UNUM_SCIENTIFIC = 4;
export const UNUM_SPELLOUT = 5;
export const UNUM_ORDINAL = 6;
export const UNUM_DURATION = 7;
export const UNUM_NUMBERING_SYSTEM = 8;
export const UNUM_PATTERN_RULEBASED = 9;
export const UNUM_CURRENCY_ISO = 10;
export const UNUM_CURRENCY_PLURAL = 11;
export const UNUM_CURRENCY_ACCOUNTING = 12;
export const UNUM_CASH_CURRENCY = 13;
export const UNUM_DECIMAL_COMPACT_SHORT = 14;
export const UNUM_DECIMAL_COMPACT_LONG = 15;
export const UNUM_CURRENCY_STANDARD = 16;
export const UNUM_DEFAULT = 1;
export const UNUM_IGNORE = 0;
export const UNUM_ROUND_CEILING = 0;
export const UNUM_ROUND_FLOOR = 1;
export const UNUM_ROUND_DOWN = 2;
export const UNUM_ROUND_UP = 3;
export const UNUM_ROUND_HALFEVEN = 4;
export const UNUM_ROUND_HALFDOWN = 5;
export const UNUM_ROUND_HALFUP = 6;
export const UNUM_ROUND_UNNECESSARY = 7;
export const UNUM_PAD_BEFORE_PREFIX = 0;
export const UNUM_PAD_AFTER_PREFIX = 1;
export const UNUM_PAD_BEFORE_SUFFIX = 2;
export const UNUM_PAD_AFTER_SUFFIX = 3;
export const UNUM_SHORT = 0;
export const UNUM_LONG = 1;
export const UNUM_CURRENCY_MATCH = 0;
export const UNUM_CURRENCY_SURROUNDING_MATCH = 1;
export const UNUM_CURRENCY_INSERT = 2;
export const UNUM_CURRENCY_SPACING_COUNT = 3;
export const UNUM_INTEGER_FIELD = 0;
export const UNUM_FRACTION_FIELD = 1;
export const UNUM_DECIMAL_SEPARATOR_FIELD = 2;
export const UNUM_EXPONENT_SYMBOL_FIELD = 3;
export const UNUM_EXPONENT_SIGN_FIELD = 4;
export const UNUM_EXPONENT_FIELD = 5;
export const UNUM_GROUPING_SEPARATOR_FIELD = 6;
export const UNUM_CURRENCY_FIELD = 7;
export const UNUM_PERCENT_FIELD = 8;
export const UNUM_PERMILL_FIELD = 9;
export const UNUM_SIGN_FIELD = 10;
export const UNUM_MEASURE_UNIT_FIELD = 11;
export const UNUM_COMPACT_FIELD = 12;
export const UNUM_FORMAT_ATTRIBUTE_VALUE_HIDDEN = 0;
export const UNUM_PARSE_INT_ONLY = 0;
export const UNUM_GROUPING_USED = 1;
export const UNUM_DECIMAL_ALWAYS_SHOWN = 2;
export const UNUM_MAX_INTEGER_DIGITS = 3;
export const UNUM_MIN_INTEGER_DIGITS = 4;
export const UNUM_INTEGER_DIGITS = 5;
export const UNUM_MAX_FRACTION_DIGITS = 6;
export const UNUM_MIN_FRACTION_DIGITS = 7;
export const UNUM_FRACTION_DIGITS = 8;
export const UNUM_MULTIPLIER = 9;
export const UNUM_GROUPING_SIZE = 10;
export const UNUM_ROUNDING_MODE = 11;
export const UNUM_ROUNDING_INCREMENT = 12;
export const UNUM_FORMAT_WIDTH = 13;
export const UNUM_PADDING_POSITION = 14;
export const UNUM_SECONDARY_GROUPING_SIZE = 15;
export const UNUM_SIGNIFICANT_DIGITS_USED = 16;
export const UNUM_MIN_SIGNIFICANT_DIGITS = 17;
export const UNUM_MAX_SIGNIFICANT_DIGITS = 18;
export const UNUM_LENIENT_PARSE = 19;
export const UNUM_PARSE_ALL_INPUT = 20;
export const UNUM_SCALE = 21;
export const UNUM_MINIMUM_GROUPING_DIGITS = 22;
export const UNUM_CURRENCY_USAGE = 23;
export const UNUM_FORMAT_FAIL_IF_MORE_THAN_MAX_DIGITS = 4096;
export const UNUM_PARSE_NO_EXPONENT = 4097;
export const UNUM_PARSE_DECIMAL_MARK_REQUIRED = 4098;
export const UNUM_PARSE_CASE_SENSITIVE = 4099;
export const UNUM_SIGN_ALWAYS_SHOWN = 4100;
export const UNUM_POSITIVE_PREFIX = 0;
export const UNUM_POSITIVE_SUFFIX = 1;
export const UNUM_NEGATIVE_PREFIX = 2;
export const UNUM_NEGATIVE_SUFFIX = 3;
export const UNUM_PADDING_CHARACTER = 4;
export const UNUM_CURRENCY_CODE = 5;
export const UNUM_DEFAULT_RULESET = 6;
export const UNUM_PUBLIC_RULESETS = 7;
export const UNUM_DECIMAL_SEPARATOR_SYMBOL = 0;
export const UNUM_GROUPING_SEPARATOR_SYMBOL = 1;
export const UNUM_PATTERN_SEPARATOR_SYMBOL = 2;
export const UNUM_PERCENT_SYMBOL = 3;
export const UNUM_ZERO_DIGIT_SYMBOL = 4;
export const UNUM_DIGIT_SYMBOL = 5;
export const UNUM_MINUS_SIGN_SYMBOL = 6;
export const UNUM_PLUS_SIGN_SYMBOL = 7;
export const UNUM_CURRENCY_SYMBOL = 8;
export const UNUM_INTL_CURRENCY_SYMBOL = 9;
export const UNUM_MONETARY_SEPARATOR_SYMBOL = 10;
export const UNUM_EXPONENTIAL_SYMBOL = 11;
export const UNUM_PERMILL_SYMBOL = 12;
export const UNUM_PAD_ESCAPE_SYMBOL = 13;
export const UNUM_INFINITY_SYMBOL = 14;
export const UNUM_NAN_SYMBOL = 15;
export const UNUM_SIGNIFICANT_DIGIT_SYMBOL = 16;
export const UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL = 17;
export const UNUM_ONE_DIGIT_SYMBOL = 18;
export const UNUM_TWO_DIGIT_SYMBOL = 19;
export const UNUM_THREE_DIGIT_SYMBOL = 20;
export const UNUM_FOUR_DIGIT_SYMBOL = 21;
export const UNUM_FIVE_DIGIT_SYMBOL = 22;
export const UNUM_SIX_DIGIT_SYMBOL = 23;
export const UNUM_SEVEN_DIGIT_SYMBOL = 24;
export const UNUM_EIGHT_DIGIT_SYMBOL = 25;
export const UNUM_NINE_DIGIT_SYMBOL = 26;
export const UNUM_EXPONENT_MULTIPLICATION_SYMBOL = 27;
export const UDAT_FULL = 0;
export const UDAT_LONG = 1;
export const UDAT_MEDIUM = 2;
export const UDAT_SHORT = 3;
export const UDAT_DEFAULT = 2;
export const UDAT_RELATIVE = 128;
export const UDAT_FULL_RELATIVE = 128;
export const UDAT_LONG_RELATIVE = 129;
export const UDAT_MEDIUM_RELATIVE = 130;
export const UDAT_SHORT_RELATIVE = 131;
export const UDAT_NONE = `-1`;
export const UDAT_PATTERN = `-2`;
export const UDAT_ERA_FIELD = 0;
export const UDAT_YEAR_FIELD = 1;
export const UDAT_MONTH_FIELD = 2;
export const UDAT_DATE_FIELD = 3;
export const UDAT_HOUR_OF_DAY1_FIELD = 4;
export const UDAT_HOUR_OF_DAY0_FIELD = 5;
export const UDAT_MINUTE_FIELD = 6;
export const UDAT_SECOND_FIELD = 7;
export const UDAT_FRACTIONAL_SECOND_FIELD = 8;
export const UDAT_DAY_OF_WEEK_FIELD = 9;
export const UDAT_DAY_OF_YEAR_FIELD = 10;
export const UDAT_DAY_OF_WEEK_IN_MONTH_FIELD = 11;
export const UDAT_WEEK_OF_YEAR_FIELD = 12;
export const UDAT_WEEK_OF_MONTH_FIELD = 13;
export const UDAT_AM_PM_FIELD = 14;
export const UDAT_HOUR1_FIELD = 15;
export const UDAT_HOUR0_FIELD = 16;
export const UDAT_TIMEZONE_FIELD = 17;
export const UDAT_YEAR_WOY_FIELD = 18;
export const UDAT_DOW_LOCAL_FIELD = 19;
export const UDAT_EXTENDED_YEAR_FIELD = 20;
export const UDAT_JULIAN_DAY_FIELD = 21;
export const UDAT_MILLISECONDS_IN_DAY_FIELD = 22;
export const UDAT_TIMEZONE_RFC_FIELD = 23;
export const UDAT_TIMEZONE_GENERIC_FIELD = 24;
export const UDAT_STANDALONE_DAY_FIELD = 25;
export const UDAT_STANDALONE_MONTH_FIELD = 26;
export const UDAT_QUARTER_FIELD = 27;
export const UDAT_STANDALONE_QUARTER_FIELD = 28;
export const UDAT_TIMEZONE_SPECIAL_FIELD = 29;
export const UDAT_YEAR_NAME_FIELD = 30;
export const UDAT_TIMEZONE_LOCALIZED_GMT_OFFSET_FIELD = 31;
export const UDAT_TIMEZONE_ISO_FIELD = 32;
export const UDAT_TIMEZONE_ISO_LOCAL_FIELD = 33;
export const UDAT_AM_PM_MIDNIGHT_NOON_FIELD = 35;
export const UDAT_FLEXIBLE_DAY_PERIOD_FIELD = 36;
export const UDAT_PARSE_ALLOW_WHITESPACE = 0;
export const UDAT_PARSE_ALLOW_NUMERIC = 1;
export const UDAT_PARSE_PARTIAL_LITERAL_MATCH = 2;
export const UDAT_PARSE_MULTIPLE_PATTERNS_FOR_MATCH = 3;
export const UDAT_BOOLEAN_ATTRIBUTE_COUNT = 4;
export const UDAT_ERAS = 0;
export const UDAT_MONTHS = 1;
export const UDAT_SHORT_MONTHS = 2;
export const UDAT_WEEKDAYS = 3;
export const UDAT_SHORT_WEEKDAYS = 4;
export const UDAT_AM_PMS = 5;
export const UDAT_LOCALIZED_CHARS = 6;
export const UDAT_ERA_NAMES = 7;
export const UDAT_NARROW_MONTHS = 8;
export const UDAT_NARROW_WEEKDAYS = 9;
export const UDAT_STANDALONE_MONTHS = 10;
export const UDAT_STANDALONE_SHORT_MONTHS = 11;
export const UDAT_STANDALONE_NARROW_MONTHS = 12;
export const UDAT_STANDALONE_WEEKDAYS = 13;
export const UDAT_STANDALONE_SHORT_WEEKDAYS = 14;
export const UDAT_STANDALONE_NARROW_WEEKDAYS = 15;
export const UDAT_QUARTERS = 16;
export const UDAT_SHORT_QUARTERS = 17;
export const UDAT_STANDALONE_QUARTERS = 18;
export const UDAT_STANDALONE_SHORT_QUARTERS = 19;
export const UDAT_SHORTER_WEEKDAYS = 20;
export const UDAT_STANDALONE_SHORTER_WEEKDAYS = 21;
export const UDAT_CYCLIC_YEARS_WIDE = 22;
export const UDAT_CYCLIC_YEARS_ABBREVIATED = 23;
export const UDAT_CYCLIC_YEARS_NARROW = 24;
export const UDAT_ZODIAC_NAMES_WIDE = 25;
export const UDAT_ZODIAC_NAMES_ABBREVIATED = 26;
export const UDAT_ZODIAC_NAMES_NARROW = 27;
export const UDATPG_ERA_FIELD = 0;
export const UDATPG_YEAR_FIELD = 1;
export const UDATPG_QUARTER_FIELD = 2;
export const UDATPG_MONTH_FIELD = 3;
export const UDATPG_WEEK_OF_YEAR_FIELD = 4;
export const UDATPG_WEEK_OF_MONTH_FIELD = 5;
export const UDATPG_WEEKDAY_FIELD = 6;
export const UDATPG_DAY_OF_YEAR_FIELD = 7;
export const UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD = 8;
export const UDATPG_DAY_FIELD = 9;
export const UDATPG_DAYPERIOD_FIELD = 10;
export const UDATPG_HOUR_FIELD = 11;
export const UDATPG_MINUTE_FIELD = 12;
export const UDATPG_SECOND_FIELD = 13;
export const UDATPG_FRACTIONAL_SECOND_FIELD = 14;
export const UDATPG_ZONE_FIELD = 15;
export const UDATPG_FIELD_COUNT = 16;
export const UDATPG_WIDE = 0;
export const UDATPG_ABBREVIATED = 1;
export const UDATPG_NARROW = 2;
export const UDATPG_MATCH_NO_OPTIONS = 0;
export const UDATPG_MATCH_HOUR_FIELD_LENGTH = 2048;
export const UDATPG_MATCH_ALL_FIELDS_LENGTH = 65535;
export const UDATPG_NO_CONFLICT = 0;
export const UDATPG_BASE_CONFLICT = 1;
export const UDATPG_CONFLICT = 2;
export const UNUM_UNIT_WIDTH_NARROW = 0;
export const UNUM_UNIT_WIDTH_SHORT = 1;
export const UNUM_UNIT_WIDTH_FULL_NAME = 2;
export const UNUM_UNIT_WIDTH_ISO_CODE = 3;
export const UNUM_UNIT_WIDTH_HIDDEN = 4;
export const UNUM_UNIT_WIDTH_COUNT = 5;
export const UNUM_GROUPING_OFF = 0;
export const UNUM_GROUPING_MIN2 = 1;
export const UNUM_GROUPING_AUTO = 2;
export const UNUM_GROUPING_ON_ALIGNED = 3;
export const UNUM_GROUPING_THOUSANDS = 4;
export const UNUM_SIGN_AUTO = 0;
export const UNUM_SIGN_ALWAYS = 1;
export const UNUM_SIGN_NEVER = 2;
export const UNUM_SIGN_ACCOUNTING = 3;
export const UNUM_SIGN_ACCOUNTING_ALWAYS = 4;
export const UNUM_SIGN_EXCEPT_ZERO = 5;
export const UNUM_SIGN_ACCOUNTING_EXCEPT_ZERO = 6;
export const UNUM_SIGN_COUNT = 7;
export const UNUM_DECIMAL_SEPARATOR_AUTO = 0;
export const UNUM_DECIMAL_SEPARATOR_ALWAYS = 1;
export const UNUM_DECIMAL_SEPARATOR_COUNT = 2;
export const UNUM_RANGE_COLLAPSE_AUTO = 0;
export const UNUM_RANGE_COLLAPSE_NONE = 1;
export const UNUM_RANGE_COLLAPSE_UNIT = 2;
export const UNUM_RANGE_COLLAPSE_ALL = 3;
export const UNUM_IDENTITY_FALLBACK_SINGLE_VALUE = 0;
export const UNUM_IDENTITY_FALLBACK_APPROXIMATELY_OR_SINGLE_VALUE = 1;
export const UNUM_IDENTITY_FALLBACK_APPROXIMATELY = 2;
export const UNUM_IDENTITY_FALLBACK_RANGE = 3;
export const UNUM_IDENTITY_RESULT_EQUAL_BEFORE_ROUNDING = 0;
export const UNUM_IDENTITY_RESULT_EQUAL_AFTER_ROUNDING = 1;
export const UNUM_IDENTITY_RESULT_NOT_EQUAL = 2;
export const UPLURAL_TYPE_CARDINAL = 0;
export const UPLURAL_TYPE_ORDINAL = 1;
export const UREGEX_CASE_INSENSITIVE = 2;
export const UREGEX_COMMENTS = 4;
export const UREGEX_DOTALL = 32;
export const UREGEX_LITERAL = 16;
export const UREGEX_MULTILINE = 8;
export const UREGEX_UNIX_LINES = 1;
export const UREGEX_UWORD = 256;
export const UREGEX_ERROR_ON_UNKNOWN_ESCAPES = 512;
export const URGN_UNKNOWN = 0;
export const URGN_TERRITORY = 1;
export const URGN_WORLD = 2;
export const URGN_CONTINENT = 3;
export const URGN_SUBCONTINENT = 4;
export const URGN_GROUPING = 5;
export const URGN_DEPRECATED = 6;
export const UDAT_STYLE_LONG = 0;
export const UDAT_STYLE_SHORT = 1;
export const UDAT_STYLE_NARROW = 2;
export const UDAT_REL_UNIT_YEAR = 0;
export const UDAT_REL_UNIT_QUARTER = 1;
export const UDAT_REL_UNIT_MONTH = 2;
export const UDAT_REL_UNIT_WEEK = 3;
export const UDAT_REL_UNIT_DAY = 4;
export const UDAT_REL_UNIT_HOUR = 5;
export const UDAT_REL_UNIT_MINUTE = 6;
export const UDAT_REL_UNIT_SECOND = 7;
export const UDAT_REL_UNIT_SUNDAY = 8;
export const UDAT_REL_UNIT_MONDAY = 9;
export const UDAT_REL_UNIT_TUESDAY = 10;
export const UDAT_REL_UNIT_WEDNESDAY = 11;
export const UDAT_REL_UNIT_THURSDAY = 12;
export const UDAT_REL_UNIT_FRIDAY = 13;
export const UDAT_REL_UNIT_SATURDAY = 14;
export const UDAT_REL_LITERAL_FIELD = 0;
export const UDAT_REL_NUMERIC_FIELD = 1;
export const USEARCH_OVERLAP = 0;
export const USEARCH_ELEMENT_COMPARISON = 2;
export const USEARCH_DEFAULT = `-1`;
export const USEARCH_OFF = 0;
export const USEARCH_ON = 1;
export const USEARCH_STANDARD_ELEMENT_COMPARISON = 2;
export const USEARCH_PATTERN_BASE_WEIGHT_IS_WILDCARD = 3;
export const USEARCH_ANY_BASE_WEIGHT_IS_WILDCARD = 4;
export const USPOOF_SINGLE_SCRIPT_CONFUSABLE = 1;
export const USPOOF_MIXED_SCRIPT_CONFUSABLE = 2;
export const USPOOF_WHOLE_SCRIPT_CONFUSABLE = 4;
export const USPOOF_CONFUSABLE = 7;
export const USPOOF_RESTRICTION_LEVEL = 16;
export const USPOOF_INVISIBLE = 32;
export const USPOOF_CHAR_LIMIT = 64;
export const USPOOF_MIXED_NUMBERS = 128;
export const USPOOF_HIDDEN_OVERLAY = 256;
export const USPOOF_ALL_CHECKS = 65535;
export const USPOOF_AUX_INFO = 1073741824;
export const USPOOF_ASCII = 268435456;
export const USPOOF_SINGLE_SCRIPT_RESTRICTIVE = 536870912;
export const USPOOF_HIGHLY_RESTRICTIVE = 805306368;
export const USPOOF_MODERATELY_RESTRICTIVE = 1073741824;
export const USPOOF_MINIMALLY_RESTRICTIVE = 1342177280;
export const USPOOF_UNRESTRICTIVE = 1610612736;
export const USPOOF_RESTRICTION_LEVEL_MASK = 2130706432;
export const UDTS_JAVA_TIME = 0;
export const UDTS_UNIX_TIME = 1;
export const UDTS_ICU4C_TIME = 2;
export const UDTS_WINDOWS_FILE_TIME = 3;
export const UDTS_DOTNET_DATE_TIME = 4;
export const UDTS_MAC_OLD_TIME = 5;
export const UDTS_MAC_TIME = 6;
export const UDTS_EXCEL_TIME = 7;
export const UDTS_DB2_TIME = 8;
export const UDTS_UNIX_MICROSECONDS_TIME = 9;
export const UTSV_UNITS_VALUE = 0;
export const UTSV_EPOCH_OFFSET_VALUE = 1;
export const UTSV_FROM_MIN_VALUE = 2;
export const UTSV_FROM_MAX_VALUE = 3;
export const UTSV_TO_MIN_VALUE = 4;
export const UTSV_TO_MAX_VALUE = 5;
export const UTRANS_FORWARD = 0;
export const UTRANS_REVERSE = 1;
export const USTRINGTRIE_BUILD_FAST = 0;
export const USTRINGTRIE_BUILD_SMALL = 1;
export const UMSGPAT_APOS_DOUBLE_OPTIONAL = 0;
export const UMSGPAT_APOS_DOUBLE_REQUIRED = 1;
export const UMSGPAT_PART_TYPE_MSG_START = 0;
export const UMSGPAT_PART_TYPE_MSG_LIMIT = 1;
export const UMSGPAT_PART_TYPE_SKIP_SYNTAX = 2;
export const UMSGPAT_PART_TYPE_INSERT_CHAR = 3;
export const UMSGPAT_PART_TYPE_REPLACE_NUMBER = 4;
export const UMSGPAT_PART_TYPE_ARG_START = 5;
export const UMSGPAT_PART_TYPE_ARG_LIMIT = 6;
export const UMSGPAT_PART_TYPE_ARG_NUMBER = 7;
export const UMSGPAT_PART_TYPE_ARG_NAME = 8;
export const UMSGPAT_PART_TYPE_ARG_TYPE = 9;
export const UMSGPAT_PART_TYPE_ARG_STYLE = 10;
export const UMSGPAT_PART_TYPE_ARG_SELECTOR = 11;
export const UMSGPAT_PART_TYPE_ARG_INT = 12;
export const UMSGPAT_PART_TYPE_ARG_DOUBLE = 13;
export const UMSGPAT_ARG_TYPE_NONE = 0;
export const UMSGPAT_ARG_TYPE_SIMPLE = 1;
export const UMSGPAT_ARG_TYPE_CHOICE = 2;
export const UMSGPAT_ARG_TYPE_PLURAL = 3;
export const UMSGPAT_ARG_TYPE_SELECT = 4;
export const UMSGPAT_ARG_TYPE_SELECTORDINAL = 5;
export const U_ALPHAINDEX_NORMAL = 0;
export const U_ALPHAINDEX_UNDERFLOW = 1;
export const U_ALPHAINDEX_INFLOW = 2;
export const U_ALPHAINDEX_OVERFLOW = 3;
export const UTZNM_UNKNOWN = 0;
export const UTZNM_LONG_GENERIC = 1;
export const UTZNM_LONG_STANDARD = 2;
export const UTZNM_LONG_DAYLIGHT = 4;
export const UTZNM_SHORT_GENERIC = 8;
export const UTZNM_SHORT_STANDARD = 16;
export const UTZNM_SHORT_DAYLIGHT = 32;
export const UTZNM_EXEMPLAR_LOCATION = 64;
export const UTZFMT_STYLE_GENERIC_LOCATION = 0;
export const UTZFMT_STYLE_GENERIC_LONG = 1;
export const UTZFMT_STYLE_GENERIC_SHORT = 2;
export const UTZFMT_STYLE_SPECIFIC_LONG = 3;
export const UTZFMT_STYLE_SPECIFIC_SHORT = 4;
export const UTZFMT_STYLE_LOCALIZED_GMT = 5;
export const UTZFMT_STYLE_LOCALIZED_GMT_SHORT = 6;
export const UTZFMT_STYLE_ISO_BASIC_SHORT = 7;
export const UTZFMT_STYLE_ISO_BASIC_LOCAL_SHORT = 8;
export const UTZFMT_STYLE_ISO_BASIC_FIXED = 9;
export const UTZFMT_STYLE_ISO_BASIC_LOCAL_FIXED = 10;
export const UTZFMT_STYLE_ISO_BASIC_FULL = 11;
export const UTZFMT_STYLE_ISO_BASIC_LOCAL_FULL = 12;
export const UTZFMT_STYLE_ISO_EXTENDED_FIXED = 13;
export const UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FIXED = 14;
export const UTZFMT_STYLE_ISO_EXTENDED_FULL = 15;
export const UTZFMT_STYLE_ISO_EXTENDED_LOCAL_FULL = 16;
export const UTZFMT_STYLE_ZONE_ID = 17;
export const UTZFMT_STYLE_ZONE_ID_SHORT = 18;
export const UTZFMT_STYLE_EXEMPLAR_LOCATION = 19;
export const UTZFMT_PAT_POSITIVE_HM = 0;
export const UTZFMT_PAT_POSITIVE_HMS = 1;
export const UTZFMT_PAT_NEGATIVE_HM = 2;
export const UTZFMT_PAT_NEGATIVE_HMS = 3;
export const UTZFMT_PAT_POSITIVE_H = 4;
export const UTZFMT_PAT_NEGATIVE_H = 5;
export const UTZFMT_PAT_COUNT = 6;
export const UTZFMT_TIME_TYPE_UNKNOWN = 0;
export const UTZFMT_TIME_TYPE_STANDARD = 1;
export const UTZFMT_TIME_TYPE_DAYLIGHT = 2;
export const UTZFMT_PARSE_OPTION_NONE = 0;
export const UTZFMT_PARSE_OPTION_ALL_STYLES = 1;
export const UTZFMT_PARSE_OPTION_TZ_DATABASE_ABBREVIATIONS = 2;
export const UMEASFMT_WIDTH_WIDE = 0;
export const UMEASFMT_WIDTH_SHORT = 1;
export const UMEASFMT_WIDTH_NARROW = 2;
export const UMEASFMT_WIDTH_NUMERIC = 3;
export const UMEASFMT_WIDTH_COUNT = 4;
export const UDAT_RELATIVE_SECONDS = 0;
export const UDAT_RELATIVE_MINUTES = 1;
export const UDAT_RELATIVE_HOURS = 2;
export const UDAT_RELATIVE_DAYS = 3;
export const UDAT_RELATIVE_WEEKS = 4;
export const UDAT_RELATIVE_MONTHS = 5;
export const UDAT_RELATIVE_YEARS = 6;
export const UDAT_RELATIVE_UNIT_COUNT = 7;
export const UDAT_ABSOLUTE_SUNDAY = 0;
export const UDAT_ABSOLUTE_MONDAY = 1;
export const UDAT_ABSOLUTE_TUESDAY = 2;
export const UDAT_ABSOLUTE_WEDNESDAY = 3;
export const UDAT_ABSOLUTE_THURSDAY = 4;
export const UDAT_ABSOLUTE_FRIDAY = 5;
export const UDAT_ABSOLUTE_SATURDAY = 6;
export const UDAT_ABSOLUTE_DAY = 7;
export const UDAT_ABSOLUTE_WEEK = 8;
export const UDAT_ABSOLUTE_MONTH = 9;
export const UDAT_ABSOLUTE_YEAR = 10;
export const UDAT_ABSOLUTE_NOW = 11;
export const UDAT_ABSOLUTE_UNIT_COUNT = 12;
export const UDAT_DIRECTION_LAST_2 = 0;
export const UDAT_DIRECTION_LAST = 1;
export const UDAT_DIRECTION_THIS = 2;
export const UDAT_DIRECTION_NEXT = 3;
export const UDAT_DIRECTION_NEXT_2 = 4;
export const UDAT_DIRECTION_PLAIN = 5;
export const UDAT_DIRECTION_COUNT = 6;
export const MIMECONTF_MAILNEWS = 1;
export const MIMECONTF_BROWSER = 2;
export const MIMECONTF_MINIMAL = 4;
export const MIMECONTF_IMPORT = 8;
export const MIMECONTF_SAVABLE_MAILNEWS = 256;
export const MIMECONTF_SAVABLE_BROWSER = 512;
export const MIMECONTF_EXPORT = 1024;
export const MIMECONTF_PRIVCONVERTER = 65536;
export const MIMECONTF_VALID = 131072;
export const MIMECONTF_VALID_NLS = 262144;
export const MIMECONTF_MIME_IE4 = 268435456;
export const MIMECONTF_MIME_LATEST = 536870912;
export const MIMECONTF_MIME_REGISTRY = 1073741824;
export const sidDefault = 0;
export const sidMerge = 1;
export const sidAsciiSym = 2;
export const sidAsciiLatin = 3;
export const sidLatin = 4;
export const sidGreek = 5;
export const sidCyrillic = 6;
export const sidArmenian = 7;
export const sidHebrew = 8;
export const sidArabic = 9;
export const sidDevanagari = 10;
export const sidBengali = 11;
export const sidGurmukhi = 12;
export const sidGujarati = 13;
export const sidOriya = 14;
export const sidTamil = 15;
export const sidTelugu = 16;
export const sidKannada = 17;
export const sidMalayalam = 18;
export const sidThai = 19;
export const sidLao = 20;
export const sidTibetan = 21;
export const sidGeorgian = 22;
export const sidHangul = 23;
export const sidKana = 24;
export const sidBopomofo = 25;
export const sidHan = 26;
export const sidEthiopic = 27;
export const sidCanSyllabic = 28;
export const sidCherokee = 29;
export const sidYi = 30;
export const sidBraille = 31;
export const sidRunic = 32;
export const sidOgham = 33;
export const sidSinhala = 34;
export const sidSyriac = 35;
export const sidBurmese = 36;
export const sidKhmer = 37;
export const sidThaana = 38;
export const sidMongolian = 39;
export const sidUserDefined = 40;
export const sidLim = 41;
export const sidFEFirst = 23;
export const sidFELast = 26;
export const MLCONVCHARF_AUTODETECT = 1;
export const MLCONVCHARF_ENTITIZE = 2;
export const MLCONVCHARF_NCR_ENTITIZE = 2;
export const MLCONVCHARF_NAME_ENTITIZE = 4;
export const MLCONVCHARF_USEDEFCHAR = 8;
export const MLCONVCHARF_NOBESTFITCHARS = 16;
export const MLCONVCHARF_DETECTJPN = 32;
export const MLDETECTF_MAILNEWS = 1;
export const MLDETECTF_BROWSER = 2;
export const MLDETECTF_VALID = 4;
export const MLDETECTF_VALID_NLS = 8;
export const MLDETECTF_PRESERVE_ORDER = 16;
export const MLDETECTF_PREFERRED_ONLY = 32;
export const MLDETECTF_FILTER_SPECIALCHAR = 64;
export const MLDETECTF_EURO_UTF8 = 128;
export const MLDETECTCP_NONE = 0;
export const MLDETECTCP_7BIT = 1;
export const MLDETECTCP_8BIT = 2;
export const MLDETECTCP_DBCS = 4;
export const MLDETECTCP_HTML = 8;
export const MLDETECTCP_NUMBER = 16;
export const SCRIPTCONTF_FIXED_FONT = 1;
export const SCRIPTCONTF_PROPORTIONAL_FONT = 2;
export const SCRIPTCONTF_SCRIPT_USER = 65536;
export const SCRIPTCONTF_SCRIPT_HIDE = 131072;
export const SCRIPTCONTF_SCRIPT_SYSTEM = 262144;
export const MLSTR_READ = 1;
export const MLSTR_WRITE = 2;
export const ETO_OPAQUE = 2;
export const ETO_CLIPPED = 4;
export const ETO_GLYPH_INDEX = 16;
export const ETO_RTLREADING = 128;
export const ETO_NUMERICSLOCAL = 1024;
export const ETO_NUMERICSLATIN = 2048;
export const ETO_IGNORELANGUAGE = 4096;
export const ETO_PDY = 8192;
export const ETO_REVERSE_INDEX_MAP = 65536;

// Structs

export type HIMC = Deno.PointerValue;

export type HIMCC = Deno.PointerValue;

export type HSAVEDUILANGUAGES = Deno.PointerValue;

/**
 * Windows.Win32.Globalization.FONTSIGNATURE (size: 16)
 */
export interface FONTSIGNATURE {
  /** array */
  fsUsb: Deno.PointerValue;
  /** array */
  fsCsb: Deno.PointerValue;
}

export const sizeofFONTSIGNATURE = 16;

export function allocFONTSIGNATURE(data?: Partial<FONTSIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofFONTSIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fsUsb !== undefined) view.setBigUint64(0, data.fsUsb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fsUsb))), true);
  // 0x08: pointer
  if (data?.fsCsb !== undefined) view.setBigUint64(8, data.fsCsb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fsCsb))), true);
  return buf;
}

export class FONTSIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fsUsb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get fsCsb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set fsUsb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set fsCsb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.CHARSETINFO (size: 16)
 */
export interface CHARSETINFO {
  /** u32 */
  ciCharset: number;
  /** u32 */
  ciACP: number;
  /** Windows.Win32.Globalization.FONTSIGNATURE */
  fs: Uint8Array | Deno.PointerValue;
}

export const sizeofCHARSETINFO = 16;

export function allocCHARSETINFO(data?: Partial<CHARSETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARSETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ciCharset !== undefined) view.setUint32(0, Number(data.ciCharset), true);
  // 0x04: u32
  if (data?.ciACP !== undefined) view.setUint32(4, Number(data.ciACP), true);
  // 0x08: pointer
  if (data?.fs !== undefined) view.setBigUint64(8, data.fs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fs))), true);
  return buf;
}

export class CHARSETINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ciCharset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ciACP(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get fs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set ciCharset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ciACP(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set fs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.LOCALESIGNATURE (size: 24)
 */
export interface LOCALESIGNATURE {
  /** array */
  lsUsb: Deno.PointerValue;
  /** array */
  lsCsbDefault: Deno.PointerValue;
  /** array */
  lsCsbSupported: Deno.PointerValue;
}

export const sizeofLOCALESIGNATURE = 24;

export function allocLOCALESIGNATURE(data?: Partial<LOCALESIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofLOCALESIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lsUsb !== undefined) view.setBigUint64(0, data.lsUsb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lsUsb))), true);
  // 0x08: pointer
  if (data?.lsCsbDefault !== undefined) view.setBigUint64(8, data.lsCsbDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lsCsbDefault))), true);
  // 0x10: pointer
  if (data?.lsCsbSupported !== undefined) view.setBigUint64(16, data.lsCsbSupported === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lsCsbSupported))), true);
  return buf;
}

export class LOCALESIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lsUsb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lsCsbDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lsCsbSupported(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lsUsb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lsCsbDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lsCsbSupported(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.NEWTEXTMETRICA (size: 72)
 */
export interface NEWTEXTMETRICA {
  /** i32 */
  tmHeight: number;
  /** i32 */
  tmAscent: number;
  /** i32 */
  tmDescent: number;
  /** i32 */
  tmInternalLeading: number;
  /** i32 */
  tmExternalLeading: number;
  /** i32 */
  tmAveCharWidth: number;
  /** i32 */
  tmMaxCharWidth: number;
  /** i32 */
  tmWeight: number;
  /** i32 */
  tmOverhang: number;
  /** i32 */
  tmDigitizedAspectX: number;
  /** i32 */
  tmDigitizedAspectY: number;
  /** u8 */
  tmFirstChar: number;
  /** u8 */
  tmLastChar: number;
  /** u8 */
  tmDefaultChar: number;
  /** u8 */
  tmBreakChar: number;
  /** u8 */
  tmItalic: number;
  /** u8 */
  tmUnderlined: number;
  /** u8 */
  tmStruckOut: number;
  /** Windows.Win32.Graphics.Gdi.TMPF_FLAGS */
  tmPitchAndFamily: TMPF_FLAGS;
  /** u8 */
  tmCharSet: number;
  /** u32 */
  ntmFlags: number;
  /** u32 */
  ntmSizeEM: number;
  /** u32 */
  ntmCellHeight: number;
  /** u32 */
  ntmAvgWidth: number;
}

export const sizeofNEWTEXTMETRICA = 72;

export function allocNEWTEXTMETRICA(data?: Partial<NEWTEXTMETRICA>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWTEXTMETRICA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tmHeight !== undefined) view.setInt32(0, Number(data.tmHeight), true);
  // 0x04: i32
  if (data?.tmAscent !== undefined) view.setInt32(4, Number(data.tmAscent), true);
  // 0x08: i32
  if (data?.tmDescent !== undefined) view.setInt32(8, Number(data.tmDescent), true);
  // 0x0c: i32
  if (data?.tmInternalLeading !== undefined) view.setInt32(12, Number(data.tmInternalLeading), true);
  // 0x10: i32
  if (data?.tmExternalLeading !== undefined) view.setInt32(16, Number(data.tmExternalLeading), true);
  // 0x14: i32
  if (data?.tmAveCharWidth !== undefined) view.setInt32(20, Number(data.tmAveCharWidth), true);
  // 0x18: i32
  if (data?.tmMaxCharWidth !== undefined) view.setInt32(24, Number(data.tmMaxCharWidth), true);
  // 0x1c: i32
  if (data?.tmWeight !== undefined) view.setInt32(28, Number(data.tmWeight), true);
  // 0x20: i32
  if (data?.tmOverhang !== undefined) view.setInt32(32, Number(data.tmOverhang), true);
  // 0x24: i32
  if (data?.tmDigitizedAspectX !== undefined) view.setInt32(36, Number(data.tmDigitizedAspectX), true);
  // 0x28: i32
  if (data?.tmDigitizedAspectY !== undefined) view.setInt32(40, Number(data.tmDigitizedAspectY), true);
  // 0x2c: u8
  if (data?.tmFirstChar !== undefined) view.setUint8(44, Number(data.tmFirstChar));
  // 0x2d: u8
  if (data?.tmLastChar !== undefined) view.setUint8(45, Number(data.tmLastChar));
  // 0x2e: u8
  if (data?.tmDefaultChar !== undefined) view.setUint8(46, Number(data.tmDefaultChar));
  // 0x2f: u8
  if (data?.tmBreakChar !== undefined) view.setUint8(47, Number(data.tmBreakChar));
  // 0x30: u8
  if (data?.tmItalic !== undefined) view.setUint8(48, Number(data.tmItalic));
  // 0x31: u8
  if (data?.tmUnderlined !== undefined) view.setUint8(49, Number(data.tmUnderlined));
  // 0x32: u8
  if (data?.tmStruckOut !== undefined) view.setUint8(50, Number(data.tmStruckOut));
  // 0x33: u8
  if (data?.tmPitchAndFamily !== undefined) view.setUint8(51, Number(data.tmPitchAndFamily));
  // 0x34: u8
  if (data?.tmCharSet !== undefined) view.setUint8(52, Number(data.tmCharSet));
  // 0x35: u32
  if (data?.ntmFlags !== undefined) view.setUint32(53, Number(data.ntmFlags), true);
  // 0x39: u32
  if (data?.ntmSizeEM !== undefined) view.setUint32(57, Number(data.ntmSizeEM), true);
  // 0x3d: u32
  if (data?.ntmCellHeight !== undefined) view.setUint32(61, Number(data.ntmCellHeight), true);
  // 0x41: u32
  if (data?.ntmAvgWidth !== undefined) view.setUint32(65, Number(data.ntmAvgWidth), true);
  // 0x45: pad3
  return buf;
}

export class NEWTEXTMETRICAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tmHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get tmAscent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get tmDescent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get tmInternalLeading(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get tmExternalLeading(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get tmAveCharWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get tmMaxCharWidth(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tmWeight(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get tmOverhang(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get tmDigitizedAspectX(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get tmDigitizedAspectY(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u8
  get tmFirstChar(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get tmLastChar(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get tmDefaultChar(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get tmBreakChar(): number {
    return this.view.getUint8(47);
  }

  // 0x30: u8
  get tmItalic(): number {
    return this.view.getUint8(48);
  }

  // 0x31: u8
  get tmUnderlined(): number {
    return this.view.getUint8(49);
  }

  // 0x32: u8
  get tmStruckOut(): number {
    return this.view.getUint8(50);
  }

  // 0x33: u8
  get tmPitchAndFamily(): number {
    return this.view.getUint8(51);
  }

  // 0x34: u8
  get tmCharSet(): number {
    return this.view.getUint8(52);
  }

  // 0x35: u32
  get ntmFlags(): number {
    return this.view.getUint32(53, true);
  }

  // 0x39: u32
  get ntmSizeEM(): number {
    return this.view.getUint32(57, true);
  }

  // 0x3d: u32
  get ntmCellHeight(): number {
    return this.view.getUint32(61, true);
  }

  // 0x41: u32
  get ntmAvgWidth(): number {
    return this.view.getUint32(65, true);
  }

  // 0x45: pad3

  // 0x00: i32
  set tmHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set tmAscent(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set tmDescent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set tmInternalLeading(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set tmExternalLeading(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set tmAveCharWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set tmMaxCharWidth(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tmWeight(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set tmOverhang(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set tmDigitizedAspectX(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set tmDigitizedAspectY(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u8
  set tmFirstChar(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set tmLastChar(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set tmDefaultChar(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set tmBreakChar(value: number) {
    this.view.setUint8(47, value);
  }

  // 0x30: u8
  set tmItalic(value: number) {
    this.view.setUint8(48, value);
  }

  // 0x31: u8
  set tmUnderlined(value: number) {
    this.view.setUint8(49, value);
  }

  // 0x32: u8
  set tmStruckOut(value: number) {
    this.view.setUint8(50, value);
  }

  // 0x33: u8
  set tmPitchAndFamily(value: number) {
    this.view.setUint8(51, value);
  }

  // 0x34: u8
  set tmCharSet(value: number) {
    this.view.setUint8(52, value);
  }

  // 0x35: u32
  set ntmFlags(value: number) {
    this.view.setUint32(53, value, true);
  }

  // 0x39: u32
  set ntmSizeEM(value: number) {
    this.view.setUint32(57, value, true);
  }

  // 0x3d: u32
  set ntmCellHeight(value: number) {
    this.view.setUint32(61, value, true);
  }

  // 0x41: u32
  set ntmAvgWidth(value: number) {
    this.view.setUint32(65, value, true);
  }

  // 0x45: pad3
}

/**
 * Windows.Win32.Globalization.NEWTEXTMETRICEXA (size: 16)
 */
export interface NEWTEXTMETRICEXA {
  /** Windows.Win32.Graphics.Gdi.NEWTEXTMETRICA */
  ntmTm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.FONTSIGNATURE */
  ntmFontSig: Uint8Array | Deno.PointerValue;
}

export const sizeofNEWTEXTMETRICEXA = 16;

export function allocNEWTEXTMETRICEXA(data?: Partial<NEWTEXTMETRICEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWTEXTMETRICEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ntmTm !== undefined) view.setBigUint64(0, data.ntmTm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ntmTm))), true);
  // 0x08: pointer
  if (data?.ntmFontSig !== undefined) view.setBigUint64(8, data.ntmFontSig === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ntmFontSig))), true);
  return buf;
}

export class NEWTEXTMETRICEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ntmTm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ntmFontSig(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ntmTm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ntmFontSig(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.NEWTEXTMETRICW (size: 104)
 */
export interface NEWTEXTMETRICW {
  /** i32 */
  tmHeight: number;
  /** i32 */
  tmAscent: number;
  /** i32 */
  tmDescent: number;
  /** i32 */
  tmInternalLeading: number;
  /** i32 */
  tmExternalLeading: number;
  /** i32 */
  tmAveCharWidth: number;
  /** i32 */
  tmMaxCharWidth: number;
  /** i32 */
  tmWeight: number;
  /** i32 */
  tmOverhang: number;
  /** i32 */
  tmDigitizedAspectX: number;
  /** i32 */
  tmDigitizedAspectY: number;
  /** char */
  tmFirstChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmLastChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmDefaultChar: Uint8Array | Deno.PointerValue;
  /** char */
  tmBreakChar: Uint8Array | Deno.PointerValue;
  /** u8 */
  tmItalic: number;
  /** u8 */
  tmUnderlined: number;
  /** u8 */
  tmStruckOut: number;
  /** Windows.Win32.Graphics.Gdi.TMPF_FLAGS */
  tmPitchAndFamily: TMPF_FLAGS;
  /** u8 */
  tmCharSet: number;
  /** u32 */
  ntmFlags: number;
  /** u32 */
  ntmSizeEM: number;
  /** u32 */
  ntmCellHeight: number;
  /** u32 */
  ntmAvgWidth: number;
}

export const sizeofNEWTEXTMETRICW = 104;

export function allocNEWTEXTMETRICW(data?: Partial<NEWTEXTMETRICW>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWTEXTMETRICW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tmHeight !== undefined) view.setInt32(0, Number(data.tmHeight), true);
  // 0x04: i32
  if (data?.tmAscent !== undefined) view.setInt32(4, Number(data.tmAscent), true);
  // 0x08: i32
  if (data?.tmDescent !== undefined) view.setInt32(8, Number(data.tmDescent), true);
  // 0x0c: i32
  if (data?.tmInternalLeading !== undefined) view.setInt32(12, Number(data.tmInternalLeading), true);
  // 0x10: i32
  if (data?.tmExternalLeading !== undefined) view.setInt32(16, Number(data.tmExternalLeading), true);
  // 0x14: i32
  if (data?.tmAveCharWidth !== undefined) view.setInt32(20, Number(data.tmAveCharWidth), true);
  // 0x18: i32
  if (data?.tmMaxCharWidth !== undefined) view.setInt32(24, Number(data.tmMaxCharWidth), true);
  // 0x1c: i32
  if (data?.tmWeight !== undefined) view.setInt32(28, Number(data.tmWeight), true);
  // 0x20: i32
  if (data?.tmOverhang !== undefined) view.setInt32(32, Number(data.tmOverhang), true);
  // 0x24: i32
  if (data?.tmDigitizedAspectX !== undefined) view.setInt32(36, Number(data.tmDigitizedAspectX), true);
  // 0x28: i32
  if (data?.tmDigitizedAspectY !== undefined) view.setInt32(40, Number(data.tmDigitizedAspectY), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.tmFirstChar !== undefined) view.setBigUint64(48, data.tmFirstChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmFirstChar))), true);
  // 0x38: pointer
  if (data?.tmLastChar !== undefined) view.setBigUint64(56, data.tmLastChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmLastChar))), true);
  // 0x40: pointer
  if (data?.tmDefaultChar !== undefined) view.setBigUint64(64, data.tmDefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmDefaultChar))), true);
  // 0x48: pointer
  if (data?.tmBreakChar !== undefined) view.setBigUint64(72, data.tmBreakChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tmBreakChar))), true);
  // 0x50: u8
  if (data?.tmItalic !== undefined) view.setUint8(80, Number(data.tmItalic));
  // 0x51: u8
  if (data?.tmUnderlined !== undefined) view.setUint8(81, Number(data.tmUnderlined));
  // 0x52: u8
  if (data?.tmStruckOut !== undefined) view.setUint8(82, Number(data.tmStruckOut));
  // 0x53: u8
  if (data?.tmPitchAndFamily !== undefined) view.setUint8(83, Number(data.tmPitchAndFamily));
  // 0x54: u8
  if (data?.tmCharSet !== undefined) view.setUint8(84, Number(data.tmCharSet));
  // 0x55: u32
  if (data?.ntmFlags !== undefined) view.setUint32(85, Number(data.ntmFlags), true);
  // 0x59: u32
  if (data?.ntmSizeEM !== undefined) view.setUint32(89, Number(data.ntmSizeEM), true);
  // 0x5d: u32
  if (data?.ntmCellHeight !== undefined) view.setUint32(93, Number(data.ntmCellHeight), true);
  // 0x61: u32
  if (data?.ntmAvgWidth !== undefined) view.setUint32(97, Number(data.ntmAvgWidth), true);
  // 0x65: pad3
  return buf;
}

export class NEWTEXTMETRICWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tmHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get tmAscent(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get tmDescent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get tmInternalLeading(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get tmExternalLeading(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get tmAveCharWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get tmMaxCharWidth(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tmWeight(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get tmOverhang(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get tmDigitizedAspectX(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get tmDigitizedAspectY(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get tmFirstChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get tmLastChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get tmDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get tmBreakChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u8
  get tmItalic(): number {
    return this.view.getUint8(80);
  }

  // 0x51: u8
  get tmUnderlined(): number {
    return this.view.getUint8(81);
  }

  // 0x52: u8
  get tmStruckOut(): number {
    return this.view.getUint8(82);
  }

  // 0x53: u8
  get tmPitchAndFamily(): number {
    return this.view.getUint8(83);
  }

  // 0x54: u8
  get tmCharSet(): number {
    return this.view.getUint8(84);
  }

  // 0x55: u32
  get ntmFlags(): number {
    return this.view.getUint32(85, true);
  }

  // 0x59: u32
  get ntmSizeEM(): number {
    return this.view.getUint32(89, true);
  }

  // 0x5d: u32
  get ntmCellHeight(): number {
    return this.view.getUint32(93, true);
  }

  // 0x61: u32
  get ntmAvgWidth(): number {
    return this.view.getUint32(97, true);
  }

  // 0x65: pad3

  // 0x00: i32
  set tmHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set tmAscent(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set tmDescent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set tmInternalLeading(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set tmExternalLeading(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set tmAveCharWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set tmMaxCharWidth(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tmWeight(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set tmOverhang(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set tmDigitizedAspectX(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set tmDigitizedAspectY(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set tmFirstChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set tmLastChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set tmDefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set tmBreakChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u8
  set tmItalic(value: number) {
    this.view.setUint8(80, value);
  }

  // 0x51: u8
  set tmUnderlined(value: number) {
    this.view.setUint8(81, value);
  }

  // 0x52: u8
  set tmStruckOut(value: number) {
    this.view.setUint8(82, value);
  }

  // 0x53: u8
  set tmPitchAndFamily(value: number) {
    this.view.setUint8(83, value);
  }

  // 0x54: u8
  set tmCharSet(value: number) {
    this.view.setUint8(84, value);
  }

  // 0x55: u32
  set ntmFlags(value: number) {
    this.view.setUint32(85, value, true);
  }

  // 0x59: u32
  set ntmSizeEM(value: number) {
    this.view.setUint32(89, value, true);
  }

  // 0x5d: u32
  set ntmCellHeight(value: number) {
    this.view.setUint32(93, value, true);
  }

  // 0x61: u32
  set ntmAvgWidth(value: number) {
    this.view.setUint32(97, value, true);
  }

  // 0x65: pad3
}

/**
 * Windows.Win32.Globalization.NEWTEXTMETRICEXW (size: 16)
 */
export interface NEWTEXTMETRICEXW {
  /** Windows.Win32.Graphics.Gdi.NEWTEXTMETRICW */
  ntmTm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.FONTSIGNATURE */
  ntmFontSig: Uint8Array | Deno.PointerValue;
}

export const sizeofNEWTEXTMETRICEXW = 16;

export function allocNEWTEXTMETRICEXW(data?: Partial<NEWTEXTMETRICEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWTEXTMETRICEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ntmTm !== undefined) view.setBigUint64(0, data.ntmTm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ntmTm))), true);
  // 0x08: pointer
  if (data?.ntmFontSig !== undefined) view.setBigUint64(8, data.ntmFontSig === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ntmFontSig))), true);
  return buf;
}

export class NEWTEXTMETRICEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ntmTm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ntmFontSig(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ntmTm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ntmFontSig(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.AXESLISTA (size: 16)
 */
export interface AXESLISTA {
  /** u32 */
  axlReserved: number;
  /** u32 */
  axlNumAxes: number;
  /** array */
  axlAxisInfo: Deno.PointerValue;
}

export const sizeofAXESLISTA = 16;

export function allocAXESLISTA(data?: Partial<AXESLISTA>): Uint8Array {
  const buf = new Uint8Array(sizeofAXESLISTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.axlReserved !== undefined) view.setUint32(0, Number(data.axlReserved), true);
  // 0x04: u32
  if (data?.axlNumAxes !== undefined) view.setUint32(4, Number(data.axlNumAxes), true);
  // 0x08: pointer
  if (data?.axlAxisInfo !== undefined) view.setBigUint64(8, data.axlAxisInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.axlAxisInfo))), true);
  return buf;
}

export class AXESLISTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get axlReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get axlNumAxes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get axlAxisInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set axlReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set axlNumAxes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set axlAxisInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.ENUMTEXTMETRICA (size: 16)
 */
export interface ENUMTEXTMETRICA {
  /** Windows.Win32.Globalization.NEWTEXTMETRICEXA */
  etmNewTextMetricEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.AXESLISTA */
  etmAxesList: Uint8Array | Deno.PointerValue;
}

export const sizeofENUMTEXTMETRICA = 16;

export function allocENUMTEXTMETRICA(data?: Partial<ENUMTEXTMETRICA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMTEXTMETRICA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.etmNewTextMetricEx !== undefined) view.setBigUint64(0, data.etmNewTextMetricEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.etmNewTextMetricEx))), true);
  // 0x08: pointer
  if (data?.etmAxesList !== undefined) view.setBigUint64(8, data.etmAxesList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.etmAxesList))), true);
  return buf;
}

export class ENUMTEXTMETRICAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get etmNewTextMetricEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get etmAxesList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set etmNewTextMetricEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set etmAxesList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.AXESLISTW (size: 16)
 */
export interface AXESLISTW {
  /** u32 */
  axlReserved: number;
  /** u32 */
  axlNumAxes: number;
  /** array */
  axlAxisInfo: Deno.PointerValue;
}

export const sizeofAXESLISTW = 16;

export function allocAXESLISTW(data?: Partial<AXESLISTW>): Uint8Array {
  const buf = new Uint8Array(sizeofAXESLISTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.axlReserved !== undefined) view.setUint32(0, Number(data.axlReserved), true);
  // 0x04: u32
  if (data?.axlNumAxes !== undefined) view.setUint32(4, Number(data.axlNumAxes), true);
  // 0x08: pointer
  if (data?.axlAxisInfo !== undefined) view.setBigUint64(8, data.axlAxisInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.axlAxisInfo))), true);
  return buf;
}

export class AXESLISTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get axlReserved(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get axlNumAxes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get axlAxisInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set axlReserved(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set axlNumAxes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set axlAxisInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.ENUMTEXTMETRICW (size: 16)
 */
export interface ENUMTEXTMETRICW {
  /** Windows.Win32.Globalization.NEWTEXTMETRICEXW */
  etmNewTextMetricEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.AXESLISTW */
  etmAxesList: Uint8Array | Deno.PointerValue;
}

export const sizeofENUMTEXTMETRICW = 16;

export function allocENUMTEXTMETRICW(data?: Partial<ENUMTEXTMETRICW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMTEXTMETRICW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.etmNewTextMetricEx !== undefined) view.setBigUint64(0, data.etmNewTextMetricEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.etmNewTextMetricEx))), true);
  // 0x08: pointer
  if (data?.etmAxesList !== undefined) view.setBigUint64(8, data.etmAxesList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.etmAxesList))), true);
  return buf;
}

export class ENUMTEXTMETRICWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get etmNewTextMetricEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get etmAxesList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set etmNewTextMetricEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set etmAxesList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.CPINFO (size: 24)
 */
export interface CPINFO {
  /** u32 */
  MaxCharSize: number;
  /** array */
  DefaultChar: Deno.PointerValue;
  /** array */
  LeadByte: Deno.PointerValue;
}

export const sizeofCPINFO = 24;

export function allocCPINFO(data?: Partial<CPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxCharSize !== undefined) view.setUint32(0, Number(data.MaxCharSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DefaultChar !== undefined) view.setBigUint64(8, data.DefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultChar))), true);
  // 0x10: pointer
  if (data?.LeadByte !== undefined) view.setBigUint64(16, data.LeadByte === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LeadByte))), true);
  return buf;
}

export class CPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxCharSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LeadByte(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MaxCharSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LeadByte(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.CPINFOEXA (size: 48)
 */
export interface CPINFOEXA {
  /** u32 */
  MaxCharSize: number;
  /** array */
  DefaultChar: Deno.PointerValue;
  /** array */
  LeadByte: Deno.PointerValue;
  /** char */
  UnicodeDefaultChar: Uint8Array | Deno.PointerValue;
  /** u32 */
  CodePage: number;
  /** array */
  CodePageName: Deno.PointerValue;
}

export const sizeofCPINFOEXA = 48;

export function allocCPINFOEXA(data?: Partial<CPINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofCPINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxCharSize !== undefined) view.setUint32(0, Number(data.MaxCharSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DefaultChar !== undefined) view.setBigUint64(8, data.DefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultChar))), true);
  // 0x10: pointer
  if (data?.LeadByte !== undefined) view.setBigUint64(16, data.LeadByte === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LeadByte))), true);
  // 0x18: pointer
  if (data?.UnicodeDefaultChar !== undefined) view.setBigUint64(24, data.UnicodeDefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnicodeDefaultChar))), true);
  // 0x20: u32
  if (data?.CodePage !== undefined) view.setUint32(32, Number(data.CodePage), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CodePageName !== undefined) view.setBigUint64(40, data.CodePageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodePageName))), true);
  return buf;
}

export class CPINFOEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxCharSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LeadByte(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get UnicodeDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get CodePage(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CodePageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MaxCharSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LeadByte(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set UnicodeDefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set CodePage(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CodePageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.CPINFOEXW (size: 48)
 */
export interface CPINFOEXW {
  /** u32 */
  MaxCharSize: number;
  /** array */
  DefaultChar: Deno.PointerValue;
  /** array */
  LeadByte: Deno.PointerValue;
  /** char */
  UnicodeDefaultChar: Uint8Array | Deno.PointerValue;
  /** u32 */
  CodePage: number;
  /** array */
  CodePageName: Deno.PointerValue;
}

export const sizeofCPINFOEXW = 48;

export function allocCPINFOEXW(data?: Partial<CPINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofCPINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxCharSize !== undefined) view.setUint32(0, Number(data.MaxCharSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DefaultChar !== undefined) view.setBigUint64(8, data.DefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DefaultChar))), true);
  // 0x10: pointer
  if (data?.LeadByte !== undefined) view.setBigUint64(16, data.LeadByte === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LeadByte))), true);
  // 0x18: pointer
  if (data?.UnicodeDefaultChar !== undefined) view.setBigUint64(24, data.UnicodeDefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnicodeDefaultChar))), true);
  // 0x20: u32
  if (data?.CodePage !== undefined) view.setUint32(32, Number(data.CodePage), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CodePageName !== undefined) view.setBigUint64(40, data.CodePageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CodePageName))), true);
  return buf;
}

export class CPINFOEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaxCharSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LeadByte(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get UnicodeDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get CodePage(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CodePageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set MaxCharSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LeadByte(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set UnicodeDefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set CodePage(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CodePageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Globalization.NUMBERFMTA (size: 40)
 */
export interface NUMBERFMTA {
  /** u32 */
  NumDigits: number;
  /** u32 */
  LeadingZero: number;
  /** u32 */
  Grouping: number;
  /** Windows.Win32.Foundation.PSTR */
  lpDecimalSep: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpThousandSep: string | null | Uint8Array;
  /** u32 */
  NegativeOrder: number;
}

export const sizeofNUMBERFMTA = 40;

export function allocNUMBERFMTA(data?: Partial<NUMBERFMTA>): Uint8Array {
  const buf = new Uint8Array(sizeofNUMBERFMTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDigits !== undefined) view.setUint32(0, Number(data.NumDigits), true);
  // 0x04: u32
  if (data?.LeadingZero !== undefined) view.setUint32(4, Number(data.LeadingZero), true);
  // 0x08: u32
  if (data?.Grouping !== undefined) view.setUint32(8, Number(data.Grouping), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpDecimalSep !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpDecimalSep);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpThousandSep !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpThousandSep);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.NegativeOrder !== undefined) view.setUint32(32, Number(data.NegativeOrder), true);
  // 0x24: pad4
  return buf;
}

export class NUMBERFMTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDigits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LeadingZero(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Grouping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpDecimalSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpThousandSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NegativeOrder(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set NumDigits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LeadingZero(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Grouping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpDecimalSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpThousandSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set NegativeOrder(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Globalization.NUMBERFMTW (size: 40)
 */
export interface NUMBERFMTW {
  /** u32 */
  NumDigits: number;
  /** u32 */
  LeadingZero: number;
  /** u32 */
  Grouping: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpDecimalSep: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpThousandSep: string | null | Uint8Array | Uint16Array;
  /** u32 */
  NegativeOrder: number;
}

export const sizeofNUMBERFMTW = 40;

export function allocNUMBERFMTW(data?: Partial<NUMBERFMTW>): Uint8Array {
  const buf = new Uint8Array(sizeofNUMBERFMTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDigits !== undefined) view.setUint32(0, Number(data.NumDigits), true);
  // 0x04: u32
  if (data?.LeadingZero !== undefined) view.setUint32(4, Number(data.LeadingZero), true);
  // 0x08: u32
  if (data?.Grouping !== undefined) view.setUint32(8, Number(data.Grouping), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpDecimalSep !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpDecimalSep);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpThousandSep !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpThousandSep);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.NegativeOrder !== undefined) view.setUint32(32, Number(data.NegativeOrder), true);
  // 0x24: pad4
  return buf;
}

export class NUMBERFMTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDigits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LeadingZero(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Grouping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpDecimalSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpThousandSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NegativeOrder(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set NumDigits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LeadingZero(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Grouping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpDecimalSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpThousandSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set NegativeOrder(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Globalization.CURRENCYFMTA (size: 48)
 */
export interface CURRENCYFMTA {
  /** u32 */
  NumDigits: number;
  /** u32 */
  LeadingZero: number;
  /** u32 */
  Grouping: number;
  /** Windows.Win32.Foundation.PSTR */
  lpDecimalSep: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpThousandSep: string | null | Uint8Array;
  /** u32 */
  NegativeOrder: number;
  /** u32 */
  PositiveOrder: number;
  /** Windows.Win32.Foundation.PSTR */
  lpCurrencySymbol: string | null | Uint8Array;
}

export const sizeofCURRENCYFMTA = 48;

export function allocCURRENCYFMTA(data?: Partial<CURRENCYFMTA>): Uint8Array {
  const buf = new Uint8Array(sizeofCURRENCYFMTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDigits !== undefined) view.setUint32(0, Number(data.NumDigits), true);
  // 0x04: u32
  if (data?.LeadingZero !== undefined) view.setUint32(4, Number(data.LeadingZero), true);
  // 0x08: u32
  if (data?.Grouping !== undefined) view.setUint32(8, Number(data.Grouping), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpDecimalSep !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpDecimalSep);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpThousandSep !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpThousandSep);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.NegativeOrder !== undefined) view.setUint32(32, Number(data.NegativeOrder), true);
  // 0x24: u32
  if (data?.PositiveOrder !== undefined) view.setUint32(36, Number(data.PositiveOrder), true);
  // 0x28: buffer
  if (data?.lpCurrencySymbol !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpCurrencySymbol);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class CURRENCYFMTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDigits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LeadingZero(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Grouping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpDecimalSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpThousandSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NegativeOrder(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PositiveOrder(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: buffer
  get lpCurrencySymbol(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumDigits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LeadingZero(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Grouping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpDecimalSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpThousandSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set NegativeOrder(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PositiveOrder(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: buffer
  set lpCurrencySymbol(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Globalization.CURRENCYFMTW (size: 48)
 */
export interface CURRENCYFMTW {
  /** u32 */
  NumDigits: number;
  /** u32 */
  LeadingZero: number;
  /** u32 */
  Grouping: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpDecimalSep: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpThousandSep: string | null | Uint8Array | Uint16Array;
  /** u32 */
  NegativeOrder: number;
  /** u32 */
  PositiveOrder: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpCurrencySymbol: string | null | Uint8Array | Uint16Array;
}

export const sizeofCURRENCYFMTW = 48;

export function allocCURRENCYFMTW(data?: Partial<CURRENCYFMTW>): Uint8Array {
  const buf = new Uint8Array(sizeofCURRENCYFMTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDigits !== undefined) view.setUint32(0, Number(data.NumDigits), true);
  // 0x04: u32
  if (data?.LeadingZero !== undefined) view.setUint32(4, Number(data.LeadingZero), true);
  // 0x08: u32
  if (data?.Grouping !== undefined) view.setUint32(8, Number(data.Grouping), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpDecimalSep !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpDecimalSep);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpThousandSep !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpThousandSep);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.NegativeOrder !== undefined) view.setUint32(32, Number(data.NegativeOrder), true);
  // 0x24: u32
  if (data?.PositiveOrder !== undefined) view.setUint32(36, Number(data.PositiveOrder), true);
  // 0x28: buffer
  if (data?.lpCurrencySymbol !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpCurrencySymbol);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class CURRENCYFMTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get NumDigits(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get LeadingZero(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Grouping(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpDecimalSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpThousandSep(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NegativeOrder(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PositiveOrder(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: buffer
  get lpCurrencySymbol(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set NumDigits(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set LeadingZero(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Grouping(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpDecimalSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpThousandSep(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set NegativeOrder(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PositiveOrder(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: buffer
  set lpCurrencySymbol(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Globalization.NLSVERSIONINFO (size: 24)
 */
export interface NLSVERSIONINFO {
  /** u32 */
  dwNLSVersionInfoSize: number;
  /** u32 */
  dwNLSVersion: number;
  /** u32 */
  dwDefinedVersion: number;
  /** u32 */
  dwEffectiveId: number;
  /** System.Guid */
  guidCustomVersion: Uint8Array | Deno.PointerValue;
}

export const sizeofNLSVERSIONINFO = 24;

export function allocNLSVERSIONINFO(data?: Partial<NLSVERSIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNLSVERSIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNLSVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwNLSVersionInfoSize), true);
  // 0x04: u32
  if (data?.dwNLSVersion !== undefined) view.setUint32(4, Number(data.dwNLSVersion), true);
  // 0x08: u32
  if (data?.dwDefinedVersion !== undefined) view.setUint32(8, Number(data.dwDefinedVersion), true);
  // 0x0c: u32
  if (data?.dwEffectiveId !== undefined) view.setUint32(12, Number(data.dwEffectiveId), true);
  // 0x10: pointer
  if (data?.guidCustomVersion !== undefined) view.setBigUint64(16, data.guidCustomVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidCustomVersion))), true);
  return buf;
}

export class NLSVERSIONINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNLSVersionInfoSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNLSVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDefinedVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwEffectiveId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get guidCustomVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNLSVersionInfoSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNLSVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDefinedVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwEffectiveId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set guidCustomVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.NLSVERSIONINFOEX (size: 24)
 */
export interface NLSVERSIONINFOEX {
  /** u32 */
  dwNLSVersionInfoSize: number;
  /** u32 */
  dwNLSVersion: number;
  /** u32 */
  dwDefinedVersion: number;
  /** u32 */
  dwEffectiveId: number;
  /** System.Guid */
  guidCustomVersion: Uint8Array | Deno.PointerValue;
}

export const sizeofNLSVERSIONINFOEX = 24;

export function allocNLSVERSIONINFOEX(data?: Partial<NLSVERSIONINFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofNLSVERSIONINFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNLSVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwNLSVersionInfoSize), true);
  // 0x04: u32
  if (data?.dwNLSVersion !== undefined) view.setUint32(4, Number(data.dwNLSVersion), true);
  // 0x08: u32
  if (data?.dwDefinedVersion !== undefined) view.setUint32(8, Number(data.dwDefinedVersion), true);
  // 0x0c: u32
  if (data?.dwEffectiveId !== undefined) view.setUint32(12, Number(data.dwEffectiveId), true);
  // 0x10: pointer
  if (data?.guidCustomVersion !== undefined) view.setBigUint64(16, data.guidCustomVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidCustomVersion))), true);
  return buf;
}

export class NLSVERSIONINFOEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNLSVersionInfoSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNLSVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwDefinedVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwEffectiveId(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get guidCustomVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwNLSVersionInfoSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNLSVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwDefinedVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwEffectiveId(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set guidCustomVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.FILEMUIINFO (size: 72)
 */
export interface FILEMUIINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFileType: number;
  /** array */
  pChecksum: Deno.PointerValue;
  /** array */
  pServiceChecksum: Deno.PointerValue;
  /** u32 */
  dwLanguageNameOffset: number;
  /** u32 */
  dwTypeIDMainSize: number;
  /** u32 */
  dwTypeIDMainOffset: number;
  /** u32 */
  dwTypeNameMainOffset: number;
  /** u32 */
  dwTypeIDMUISize: number;
  /** u32 */
  dwTypeIDMUIOffset: number;
  /** u32 */
  dwTypeNameMUIOffset: number;
  /** array */
  abBuffer: Deno.PointerValue;
}

export const sizeofFILEMUIINFO = 72;

export function allocFILEMUIINFO(data?: Partial<FILEMUIINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEMUIINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwFileType !== undefined) view.setUint32(8, Number(data.dwFileType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pChecksum !== undefined) view.setBigUint64(16, data.pChecksum === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pChecksum))), true);
  // 0x18: pointer
  if (data?.pServiceChecksum !== undefined) view.setBigUint64(24, data.pServiceChecksum === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pServiceChecksum))), true);
  // 0x20: u32
  if (data?.dwLanguageNameOffset !== undefined) view.setUint32(32, Number(data.dwLanguageNameOffset), true);
  // 0x24: u32
  if (data?.dwTypeIDMainSize !== undefined) view.setUint32(36, Number(data.dwTypeIDMainSize), true);
  // 0x28: u32
  if (data?.dwTypeIDMainOffset !== undefined) view.setUint32(40, Number(data.dwTypeIDMainOffset), true);
  // 0x2c: u32
  if (data?.dwTypeNameMainOffset !== undefined) view.setUint32(44, Number(data.dwTypeNameMainOffset), true);
  // 0x30: u32
  if (data?.dwTypeIDMUISize !== undefined) view.setUint32(48, Number(data.dwTypeIDMUISize), true);
  // 0x34: u32
  if (data?.dwTypeIDMUIOffset !== undefined) view.setUint32(52, Number(data.dwTypeIDMUIOffset), true);
  // 0x38: u32
  if (data?.dwTypeNameMUIOffset !== undefined) view.setUint32(56, Number(data.dwTypeNameMUIOffset), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.abBuffer !== undefined) view.setBigUint64(64, data.abBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.abBuffer))), true);
  return buf;
}

export class FILEMUIINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFileType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pChecksum(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pServiceChecksum(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwLanguageNameOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwTypeIDMainSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwTypeIDMainOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwTypeNameMainOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwTypeIDMUISize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwTypeIDMUIOffset(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwTypeNameMUIOffset(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get abBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFileType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pChecksum(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pServiceChecksum(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwLanguageNameOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwTypeIDMainSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwTypeIDMainOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwTypeNameMainOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwTypeIDMUISize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwTypeIDMUIOffset(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwTypeNameMUIOffset(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set abBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.MAPPING_SERVICE_INFO (size: 176)
 */
export interface MAPPING_SERVICE_INFO {
  /** usize */
  Size: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCopyright: string | null | Uint8Array | Uint16Array;
  /** u16 */
  wMajorVersion: number;
  /** u16 */
  wMinorVersion: number;
  /** u16 */
  wBuildVersion: number;
  /** u16 */
  wStepVersion: number;
  /** u32 */
  dwInputContentTypesCount: number;
  /** ptr */
  prgInputContentTypes: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputContentTypesCount: number;
  /** ptr */
  prgOutputContentTypes: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputLanguagesCount: number;
  /** ptr */
  prgInputLanguages: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputLanguagesCount: number;
  /** ptr */
  prgOutputLanguages: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputScriptsCount: number;
  /** ptr */
  prgInputScripts: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputScriptsCount: number;
  /** ptr */
  prgOutputScripts: Deno.PointerValue | Uint8Array;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCategory: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPrivateDataSize: number;
  /** ptr */
  pPrivateData: Deno.PointerValue | Uint8Array;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array;
  /** u32 */
  _bitfield: number;
}

export const sizeofMAPPING_SERVICE_INFO = 176;

export function allocMAPPING_SERVICE_INFO(data?: Partial<MAPPING_SERVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPPING_SERVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, BigInt(data.Size), true);
  // 0x08: buffer
  if (data?.pszCopyright !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszCopyright);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u16
  if (data?.wMajorVersion !== undefined) view.setUint16(16, Number(data.wMajorVersion), true);
  // 0x12: u16
  if (data?.wMinorVersion !== undefined) view.setUint16(18, Number(data.wMinorVersion), true);
  // 0x14: u16
  if (data?.wBuildVersion !== undefined) view.setUint16(20, Number(data.wBuildVersion), true);
  // 0x16: u16
  if (data?.wStepVersion !== undefined) view.setUint16(22, Number(data.wStepVersion), true);
  // 0x18: u32
  if (data?.dwInputContentTypesCount !== undefined) view.setUint32(24, Number(data.dwInputContentTypesCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.prgInputContentTypes !== undefined) view.setBigUint64(32, data.prgInputContentTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgInputContentTypes))), true);
  // 0x28: u32
  if (data?.dwOutputContentTypesCount !== undefined) view.setUint32(40, Number(data.dwOutputContentTypesCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.prgOutputContentTypes !== undefined) view.setBigUint64(48, data.prgOutputContentTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgOutputContentTypes))), true);
  // 0x38: u32
  if (data?.dwInputLanguagesCount !== undefined) view.setUint32(56, Number(data.dwInputLanguagesCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.prgInputLanguages !== undefined) view.setBigUint64(64, data.prgInputLanguages === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgInputLanguages))), true);
  // 0x48: u32
  if (data?.dwOutputLanguagesCount !== undefined) view.setUint32(72, Number(data.dwOutputLanguagesCount), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.prgOutputLanguages !== undefined) view.setBigUint64(80, data.prgOutputLanguages === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgOutputLanguages))), true);
  // 0x58: u32
  if (data?.dwInputScriptsCount !== undefined) view.setUint32(88, Number(data.dwInputScriptsCount), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.prgInputScripts !== undefined) view.setBigUint64(96, data.prgInputScripts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgInputScripts))), true);
  // 0x68: u32
  if (data?.dwOutputScriptsCount !== undefined) view.setUint32(104, Number(data.dwOutputScriptsCount), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.prgOutputScripts !== undefined) view.setBigUint64(112, data.prgOutputScripts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgOutputScripts))), true);
  // 0x78: pointer
  if (data?.guid !== undefined) view.setBigUint64(120, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x80: buffer
  if (data?.pszCategory !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.pszCategory);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f136))), true);
  }
  // 0x90: u32
  if (data?.dwPrivateDataSize !== undefined) view.setUint32(144, Number(data.dwPrivateDataSize), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.pPrivateData !== undefined) view.setBigUint64(152, data.pPrivateData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrivateData))), true);
  // 0xa0: pointer
  if (data?.pContext !== undefined) view.setBigUint64(160, data.pContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContext))), true);
  // 0xa8: u32
  if (data?._bitfield !== undefined) view.setUint32(168, Number(data._bitfield), true);
  // 0xac: pad4
  return buf;
}

export class MAPPING_SERVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get pszCopyright(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get wMajorVersion(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wMinorVersion(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get wBuildVersion(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get wStepVersion(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get dwInputContentTypesCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get prgInputContentTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwOutputContentTypesCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get prgOutputContentTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwInputLanguagesCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get prgInputLanguages(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwOutputLanguagesCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get prgOutputLanguages(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwInputScriptsCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get prgInputScripts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwOutputScriptsCount(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get prgOutputScripts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get pszCategory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: buffer
  get pszDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get dwPrivateDataSize(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  get pPrivateData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get pContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get _bitfield(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: pad4

  // 0x00: usize
  set Size(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set pszCopyright(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u16
  set wMajorVersion(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wMinorVersion(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set wBuildVersion(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set wStepVersion(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set dwInputContentTypesCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set prgInputContentTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwOutputContentTypesCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set prgOutputContentTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwInputLanguagesCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set prgInputLanguages(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set dwOutputLanguagesCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set prgOutputLanguages(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwInputScriptsCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set prgInputScripts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set dwOutputScriptsCount(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set prgOutputScripts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set pszCategory(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: buffer
  set pszDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f136 = value;
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f136))), true);
  }

  // 0x90: u32
  set dwPrivateDataSize(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  set pPrivateData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set pContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u32
  set _bitfield(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: pad4
}

/**
 * Windows.Win32.Globalization.MAPPING_ENUM_OPTIONS (size: 80)
 */
export interface MAPPING_ENUM_OPTIONS {
  /** usize */
  Size: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCategory: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInputLanguage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOutputLanguage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInputScript: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOutputScript: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInputContentType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOutputContentType: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  _bitfield: number;
}

export const sizeofMAPPING_ENUM_OPTIONS = 80;

export function allocMAPPING_ENUM_OPTIONS(data?: Partial<MAPPING_ENUM_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPPING_ENUM_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, BigInt(data.Size), true);
  // 0x08: buffer
  if (data?.pszCategory !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszCategory);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszInputLanguage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszInputLanguage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszOutputLanguage !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszOutputLanguage);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszInputScript !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszInputScript);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pszOutputScript !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszOutputScript);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pszInputContentType !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszInputContentType);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pszOutputContentType !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszOutputContentType);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: pointer
  if (data?.pGuid !== undefined) view.setBigUint64(64, data.pGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pGuid))), true);
  // 0x48: u32
  if (data?._bitfield !== undefined) view.setUint32(72, Number(data._bitfield), true);
  // 0x4c: pad4
  return buf;
}

export class MAPPING_ENUM_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get pszCategory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszInputLanguage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszOutputLanguage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszInputScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszOutputScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pszInputContentType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pszOutputContentType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get _bitfield(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: usize
  set Size(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set pszCategory(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszInputLanguage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszOutputLanguage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszInputScript(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pszOutputScript(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pszInputContentType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pszOutputContentType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: pointer
  set pGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set _bitfield(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Globalization.MAPPING_OPTIONS (size: 120)
 */
export interface MAPPING_OPTIONS {
  /** usize */
  Size: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszInputLanguage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOutputLanguage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInputScript: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOutputScript: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInputContentType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOutputContentType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszUILanguage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Globalization.PFN_MAPPINGCALLBACKPROC */
  pfnRecognizeCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pRecognizeCallerData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwRecognizeCallerDataSize: number;
  /** Windows.Win32.Globalization.PFN_MAPPINGCALLBACKPROC */
  pfnActionCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pActionCallerData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwActionCallerDataSize: number;
  /** u32 */
  dwServiceFlag: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofMAPPING_OPTIONS = 120;

export function allocMAPPING_OPTIONS(data?: Partial<MAPPING_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPPING_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, BigInt(data.Size), true);
  // 0x08: buffer
  if (data?.pszInputLanguage !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszInputLanguage);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszOutputLanguage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszOutputLanguage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszInputScript !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszInputScript);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszOutputScript !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszOutputScript);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pszInputContentType !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszInputContentType);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pszOutputContentType !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszOutputContentType);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pszUILanguage !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszUILanguage);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: pointer
  if (data?.pfnRecognizeCallback !== undefined) view.setBigUint64(64, data.pfnRecognizeCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnRecognizeCallback))), true);
  // 0x48: pointer
  if (data?.pRecognizeCallerData !== undefined) view.setBigUint64(72, data.pRecognizeCallerData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRecognizeCallerData))), true);
  // 0x50: u32
  if (data?.dwRecognizeCallerDataSize !== undefined) view.setUint32(80, Number(data.dwRecognizeCallerDataSize), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pfnActionCallback !== undefined) view.setBigUint64(88, data.pfnActionCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnActionCallback))), true);
  // 0x60: pointer
  if (data?.pActionCallerData !== undefined) view.setBigUint64(96, data.pActionCallerData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pActionCallerData))), true);
  // 0x68: u32
  if (data?.dwActionCallerDataSize !== undefined) view.setUint32(104, Number(data.dwActionCallerDataSize), true);
  // 0x6c: u32
  if (data?.dwServiceFlag !== undefined) view.setUint32(108, Number(data.dwServiceFlag), true);
  // 0x70: u32
  if (data?._bitfield !== undefined) view.setUint32(112, Number(data._bitfield), true);
  // 0x74: pad4
  return buf;
}

export class MAPPING_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get pszInputLanguage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszOutputLanguage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszInputScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszOutputScript(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszInputContentType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pszOutputContentType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pszUILanguage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pfnRecognizeCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get pRecognizeCallerData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwRecognizeCallerDataSize(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pfnActionCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pActionCallerData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwActionCallerDataSize(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get dwServiceFlag(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get _bitfield(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: usize
  set Size(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set pszInputLanguage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszOutputLanguage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszInputScript(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszOutputScript(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pszInputContentType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pszOutputContentType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pszUILanguage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: pointer
  set pfnRecognizeCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set pRecognizeCallerData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwRecognizeCallerDataSize(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pfnActionCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set pActionCallerData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set dwActionCallerDataSize(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set dwServiceFlag(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set _bitfield(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Globalization.MAPPING_DATA_RANGE (size: 72)
 */
export interface MAPPING_DATA_RANGE {
  /** u32 */
  dwStartIndex: number;
  /** u32 */
  dwEndIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwDescriptionLength: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDataSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszContentType: string | null | Uint8Array | Uint16Array;
  /** ptr */
  prgActionIds: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwActionsCount: number;
  /** ptr */
  prgActionDisplayNames: Deno.PointerValue | Uint8Array;
}

export const sizeofMAPPING_DATA_RANGE = 72;

export function allocMAPPING_DATA_RANGE(data?: Partial<MAPPING_DATA_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPPING_DATA_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStartIndex !== undefined) view.setUint32(0, Number(data.dwStartIndex), true);
  // 0x04: u32
  if (data?.dwEndIndex !== undefined) view.setUint32(4, Number(data.dwEndIndex), true);
  // 0x08: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.dwDescriptionLength !== undefined) view.setUint32(16, Number(data.dwDescriptionLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pData !== undefined) view.setBigUint64(24, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x20: u32
  if (data?.dwDataSize !== undefined) view.setUint32(32, Number(data.dwDataSize), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pszContentType !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszContentType);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.prgActionIds !== undefined) view.setBigUint64(48, data.prgActionIds === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgActionIds))), true);
  // 0x38: u32
  if (data?.dwActionsCount !== undefined) view.setUint32(56, Number(data.dwActionsCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.prgActionDisplayNames !== undefined) view.setBigUint64(64, data.prgActionDisplayNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgActionDisplayNames))), true);
  return buf;
}

export class MAPPING_DATA_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStartIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEndIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDescriptionLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDataSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pszContentType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get prgActionIds(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwActionsCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get prgActionDisplayNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwStartIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEndIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set dwDescriptionLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDataSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pszContentType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set prgActionIds(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwActionsCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set prgActionDisplayNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.MAPPING_PROPERTY_BAG (size: 64)
 */
export interface MAPPING_PROPERTY_BAG {
  /** usize */
  Size: Deno.PointerValue;
  /** ptr */
  prgResultRanges: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwRangesCount: number;
  /** ptr */
  pServiceData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwServiceDataSize: number;
  /** ptr */
  pCallerData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwCallerDataSize: number;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array;
}

export const sizeofMAPPING_PROPERTY_BAG = 64;

export function allocMAPPING_PROPERTY_BAG(data?: Partial<MAPPING_PROPERTY_BAG>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPPING_PROPERTY_BAG);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Size !== undefined) view.setBigUint64(0, BigInt(data.Size), true);
  // 0x08: pointer
  if (data?.prgResultRanges !== undefined) view.setBigUint64(8, data.prgResultRanges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgResultRanges))), true);
  // 0x10: u32
  if (data?.dwRangesCount !== undefined) view.setUint32(16, Number(data.dwRangesCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pServiceData !== undefined) view.setBigUint64(24, data.pServiceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pServiceData))), true);
  // 0x20: u32
  if (data?.dwServiceDataSize !== undefined) view.setUint32(32, Number(data.dwServiceDataSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pCallerData !== undefined) view.setBigUint64(40, data.pCallerData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCallerData))), true);
  // 0x30: u32
  if (data?.dwCallerDataSize !== undefined) view.setUint32(48, Number(data.dwCallerDataSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pContext !== undefined) view.setBigUint64(56, data.pContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContext))), true);
  return buf;
}

export class MAPPING_PROPERTY_BAGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get prgResultRanges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwRangesCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pServiceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwServiceDataSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pCallerData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwCallerDataSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Size(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set prgResultRanges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwRangesCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pServiceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwServiceDataSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pCallerData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwCallerDataSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPT_CONTROL (size: 8)
 */
export interface SCRIPT_CONTROL {
  /** u32 */
  _bitfield: number;
}

export const sizeofSCRIPT_CONTROL = 8;

export function allocSCRIPT_CONTROL(data?: Partial<SCRIPT_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class SCRIPT_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Globalization.SCRIPT_STATE (size: 8)
 */
export interface SCRIPT_STATE {
  /** u16 */
  _bitfield: number;
}

export const sizeofSCRIPT_STATE = 8;

export function allocSCRIPT_STATE(data?: Partial<SCRIPT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class SCRIPT_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Globalization.SCRIPT_ANALYSIS (size: 16)
 */
export interface SCRIPT_ANALYSIS {
  /** u16 */
  _bitfield: number;
  /** Windows.Win32.Globalization.SCRIPT_STATE */
  s: Uint8Array | Deno.PointerValue;
}

export const sizeofSCRIPT_ANALYSIS = 16;

export function allocSCRIPT_ANALYSIS(data?: Partial<SCRIPT_ANALYSIS>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_ANALYSIS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.s !== undefined) view.setBigUint64(8, data.s === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.s))), true);
  return buf;
}

export class SCRIPT_ANALYSISView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get s(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set s(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPT_ITEM (size: 16)
 */
export interface SCRIPT_ITEM {
  /** i32 */
  iCharPos: number;
  /** Windows.Win32.Globalization.SCRIPT_ANALYSIS */
  a: Uint8Array | Deno.PointerValue;
}

export const sizeofSCRIPT_ITEM = 16;

export function allocSCRIPT_ITEM(data?: Partial<SCRIPT_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iCharPos !== undefined) view.setInt32(0, Number(data.iCharPos), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.a !== undefined) view.setBigUint64(8, data.a === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.a))), true);
  return buf;
}

export class SCRIPT_ITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iCharPos(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get a(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set iCharPos(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set a(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPT_VISATTR (size: 8)
 */
export interface SCRIPT_VISATTR {
  /** u16 */
  _bitfield: number;
}

export const sizeofSCRIPT_VISATTR = 8;

export function allocSCRIPT_VISATTR(data?: Partial<SCRIPT_VISATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_VISATTR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class SCRIPT_VISATTRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Globalization.GOFFSET (size: 8)
 */
export interface GOFFSET {
  /** i32 */
  du: number;
  /** i32 */
  dv: number;
}

export const sizeofGOFFSET = 8;

export function allocGOFFSET(data?: Partial<GOFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofGOFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.du !== undefined) view.setInt32(0, Number(data.du), true);
  // 0x04: i32
  if (data?.dv !== undefined) view.setInt32(4, Number(data.dv), true);
  return buf;
}

export class GOFFSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get du(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get dv(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set du(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set dv(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPT_LOGATTR (size: 8)
 */
export interface SCRIPT_LOGATTR {
  /** u8 */
  _bitfield: number;
}

export const sizeofSCRIPT_LOGATTR = 8;

export function allocSCRIPT_LOGATTR(data?: Partial<SCRIPT_LOGATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_LOGATTR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

export class SCRIPT_LOGATTRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get _bitfield(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set _bitfield(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Globalization.SCRIPT_PROPERTIES (size: 8)
 */
export interface SCRIPT_PROPERTIES {
  /** u32 */
  _bitfield1: number;
  /** u32 */
  _bitfield2: number;
}

export const sizeofSCRIPT_PROPERTIES = 8;

export function allocSCRIPT_PROPERTIES(data?: Partial<SCRIPT_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield1 !== undefined) view.setUint32(0, Number(data._bitfield1), true);
  // 0x04: u32
  if (data?._bitfield2 !== undefined) view.setUint32(4, Number(data._bitfield2), true);
  return buf;
}

export class SCRIPT_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield1(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get _bitfield2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set _bitfield1(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set _bitfield2(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPT_FONTPROPERTIES (size: 16)
 */
export interface SCRIPT_FONTPROPERTIES {
  /** i32 */
  cBytes: number;
  /** u16 */
  wgBlank: number;
  /** u16 */
  wgDefault: number;
  /** u16 */
  wgInvalid: number;
  /** u16 */
  wgKashida: number;
  /** i32 */
  iKashidaWidth: number;
}

export const sizeofSCRIPT_FONTPROPERTIES = 16;

export function allocSCRIPT_FONTPROPERTIES(data?: Partial<SCRIPT_FONTPROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_FONTPROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cBytes !== undefined) view.setInt32(0, Number(data.cBytes), true);
  // 0x04: u16
  if (data?.wgBlank !== undefined) view.setUint16(4, Number(data.wgBlank), true);
  // 0x06: u16
  if (data?.wgDefault !== undefined) view.setUint16(6, Number(data.wgDefault), true);
  // 0x08: u16
  if (data?.wgInvalid !== undefined) view.setUint16(8, Number(data.wgInvalid), true);
  // 0x0a: u16
  if (data?.wgKashida !== undefined) view.setUint16(10, Number(data.wgKashida), true);
  // 0x0c: i32
  if (data?.iKashidaWidth !== undefined) view.setInt32(12, Number(data.iKashidaWidth), true);
  return buf;
}

export class SCRIPT_FONTPROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cBytes(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get wgBlank(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wgDefault(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wgInvalid(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wgKashida(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: i32
  get iKashidaWidth(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set cBytes(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set wgBlank(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wgDefault(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wgInvalid(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wgKashida(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: i32
  set iKashidaWidth(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPT_TABDEF (size: 24)
 */
export interface SCRIPT_TABDEF {
  /** i32 */
  cTabStops: number;
  /** i32 */
  iScale: number;
  /** ptr */
  pTabStops: Deno.PointerValue | Uint8Array;
  /** i32 */
  iTabOrigin: number;
}

export const sizeofSCRIPT_TABDEF = 24;

export function allocSCRIPT_TABDEF(data?: Partial<SCRIPT_TABDEF>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_TABDEF);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cTabStops !== undefined) view.setInt32(0, Number(data.cTabStops), true);
  // 0x04: i32
  if (data?.iScale !== undefined) view.setInt32(4, Number(data.iScale), true);
  // 0x08: pointer
  if (data?.pTabStops !== undefined) view.setBigUint64(8, data.pTabStops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTabStops))), true);
  // 0x10: i32
  if (data?.iTabOrigin !== undefined) view.setInt32(16, Number(data.iTabOrigin), true);
  // 0x14: pad4
  return buf;
}

export class SCRIPT_TABDEFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cTabStops(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iScale(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pTabStops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get iTabOrigin(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set cTabStops(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iScale(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pTabStops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set iTabOrigin(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Globalization.SCRIPT_DIGITSUBSTITUTE (size: 16)
 */
export interface SCRIPT_DIGITSUBSTITUTE {
  /** u32 */
  _bitfield1: number;
  /** u32 */
  _bitfield2: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofSCRIPT_DIGITSUBSTITUTE = 16;

export function allocSCRIPT_DIGITSUBSTITUTE(data?: Partial<SCRIPT_DIGITSUBSTITUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_DIGITSUBSTITUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield1 !== undefined) view.setUint32(0, Number(data._bitfield1), true);
  // 0x04: u32
  if (data?._bitfield2 !== undefined) view.setUint32(4, Number(data._bitfield2), true);
  // 0x08: u32
  if (data?.dwReserved !== undefined) view.setUint32(8, Number(data.dwReserved), true);
  // 0x0c: pad4
  return buf;
}

export class SCRIPT_DIGITSUBSTITUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield1(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get _bitfield2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwReserved(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set _bitfield1(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set _bitfield2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwReserved(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Globalization.OPENTYPE_FEATURE_RECORD (size: 8)
 */
export interface OPENTYPE_FEATURE_RECORD {
  /** u32 */
  tagFeature: number;
  /** i32 */
  lParameter: number;
}

export const sizeofOPENTYPE_FEATURE_RECORD = 8;

export function allocOPENTYPE_FEATURE_RECORD(data?: Partial<OPENTYPE_FEATURE_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENTYPE_FEATURE_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tagFeature !== undefined) view.setUint32(0, Number(data.tagFeature), true);
  // 0x04: i32
  if (data?.lParameter !== undefined) view.setInt32(4, Number(data.lParameter), true);
  return buf;
}

export class OPENTYPE_FEATURE_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get tagFeature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get lParameter(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set tagFeature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set lParameter(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Globalization.TEXTRANGE_PROPERTIES (size: 16)
 */
export interface TEXTRANGE_PROPERTIES {
  /** ptr */
  potfRecords: Deno.PointerValue | Uint8Array;
  /** i32 */
  cotfRecords: number;
}

export const sizeofTEXTRANGE_PROPERTIES = 16;

export function allocTEXTRANGE_PROPERTIES(data?: Partial<TEXTRANGE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTRANGE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.potfRecords !== undefined) view.setBigUint64(0, data.potfRecords === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.potfRecords))), true);
  // 0x08: i32
  if (data?.cotfRecords !== undefined) view.setInt32(8, Number(data.cotfRecords), true);
  // 0x0c: pad4
  return buf;
}

export class TEXTRANGE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get potfRecords(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get cotfRecords(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set potfRecords(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set cotfRecords(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Globalization.SCRIPT_CHARPROP (size: 8)
 */
export interface SCRIPT_CHARPROP {
  /** u16 */
  _bitfield: number;
}

export const sizeofSCRIPT_CHARPROP = 8;

export function allocSCRIPT_CHARPROP(data?: Partial<SCRIPT_CHARPROP>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_CHARPROP);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?._bitfield !== undefined) view.setUint16(0, Number(data._bitfield), true);
  // 0x02: pad6
  return buf;
}

export class SCRIPT_CHARPROPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get _bitfield(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set _bitfield(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Globalization.SCRIPT_GLYPHPROP (size: 16)
 */
export interface SCRIPT_GLYPHPROP {
  /** Windows.Win32.Globalization.SCRIPT_VISATTR */
  sva: Uint8Array | Deno.PointerValue;
  /** u16 */
  reserved: number;
}

export const sizeofSCRIPT_GLYPHPROP = 16;

export function allocSCRIPT_GLYPHPROP(data?: Partial<SCRIPT_GLYPHPROP>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPT_GLYPHPROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sva !== undefined) view.setBigUint64(0, data.sva === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sva))), true);
  // 0x08: u16
  if (data?.reserved !== undefined) view.setUint16(8, Number(data.reserved), true);
  // 0x0a: pad6
  return buf;
}

export class SCRIPT_GLYPHPROPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sva(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get reserved(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set sva(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set reserved(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Globalization.UReplaceableCallbacks (size: 48)
 */
export interface UReplaceableCallbacks {
  /** isize */
  length: Deno.PointerValue;
  /** isize */
  charAt: Deno.PointerValue;
  /** isize */
  char32At: Deno.PointerValue;
  /** isize */
  replace: Deno.PointerValue;
  /** isize */
  extract: Deno.PointerValue;
  /** isize */
  copy: Deno.PointerValue;
}

export const sizeofUReplaceableCallbacks = 48;

export function allocUReplaceableCallbacks(data?: Partial<UReplaceableCallbacks>): Uint8Array {
  const buf = new Uint8Array(sizeofUReplaceableCallbacks);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.length !== undefined) view.setBigInt64(0, BigInt(data.length), true);
  // 0x08: isize
  if (data?.charAt !== undefined) view.setBigInt64(8, BigInt(data.charAt), true);
  // 0x10: isize
  if (data?.char32At !== undefined) view.setBigInt64(16, BigInt(data.char32At), true);
  // 0x18: isize
  if (data?.replace !== undefined) view.setBigInt64(24, BigInt(data.replace), true);
  // 0x20: isize
  if (data?.extract !== undefined) view.setBigInt64(32, BigInt(data.extract), true);
  // 0x28: isize
  if (data?.copy !== undefined) view.setBigInt64(40, BigInt(data.copy), true);
  return buf;
}

export class UReplaceableCallbacksView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get length(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get charAt(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get char32At(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get replace(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get extract(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get copy(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x00: isize
  set length(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set charAt(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set char32At(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set replace(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set extract(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set copy(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Globalization.UFieldPosition (size: 16)
 */
export interface UFieldPosition {
  /** i32 */
  field: number;
  /** i32 */
  beginIndex: number;
  /** i32 */
  endIndex: number;
}

export const sizeofUFieldPosition = 16;

export function allocUFieldPosition(data?: Partial<UFieldPosition>): Uint8Array {
  const buf = new Uint8Array(sizeofUFieldPosition);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.field !== undefined) view.setInt32(0, Number(data.field), true);
  // 0x04: i32
  if (data?.beginIndex !== undefined) view.setInt32(4, Number(data.beginIndex), true);
  // 0x08: i32
  if (data?.endIndex !== undefined) view.setInt32(8, Number(data.endIndex), true);
  // 0x0c: pad4
  return buf;
}

export class UFieldPositionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get field(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get beginIndex(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get endIndex(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set field(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set beginIndex(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set endIndex(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Globalization.UCharIterator (size: 112)
 */
export interface UCharIterator {
  /** ptr */
  context: Deno.PointerValue | Uint8Array;
  /** i32 */
  length: number;
  /** i32 */
  start: number;
  /** i32 */
  index: number;
  /** i32 */
  limit: number;
  /** i32 */
  reservedField: number;
  /** Windows.Win32.Globalization.UCharIteratorGetIndex */
  getIndex: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorMove */
  move: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorHasNext */
  hasNext: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorHasPrevious */
  hasPrevious: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorCurrent */
  current: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorNext */
  next: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorPrevious */
  previous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorReserved */
  reservedFn: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorGetState */
  getState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UCharIteratorSetState */
  setState: Uint8Array | Deno.PointerValue;
}

export const sizeofUCharIterator = 112;

export function allocUCharIterator(data?: Partial<UCharIterator>): Uint8Array {
  const buf = new Uint8Array(sizeofUCharIterator);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.context !== undefined) view.setBigUint64(0, data.context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.context))), true);
  // 0x08: i32
  if (data?.length !== undefined) view.setInt32(8, Number(data.length), true);
  // 0x0c: i32
  if (data?.start !== undefined) view.setInt32(12, Number(data.start), true);
  // 0x10: i32
  if (data?.index !== undefined) view.setInt32(16, Number(data.index), true);
  // 0x14: i32
  if (data?.limit !== undefined) view.setInt32(20, Number(data.limit), true);
  // 0x18: i32
  if (data?.reservedField !== undefined) view.setInt32(24, Number(data.reservedField), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.getIndex !== undefined) view.setBigUint64(32, data.getIndex === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.getIndex))), true);
  // 0x28: pointer
  if (data?.move !== undefined) view.setBigUint64(40, data.move === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.move))), true);
  // 0x30: pointer
  if (data?.hasNext !== undefined) view.setBigUint64(48, data.hasNext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hasNext))), true);
  // 0x38: pointer
  if (data?.hasPrevious !== undefined) view.setBigUint64(56, data.hasPrevious === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hasPrevious))), true);
  // 0x40: pointer
  if (data?.current !== undefined) view.setBigUint64(64, data.current === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.current))), true);
  // 0x48: pointer
  if (data?.next !== undefined) view.setBigUint64(72, data.next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.next))), true);
  // 0x50: pointer
  if (data?.previous !== undefined) view.setBigUint64(80, data.previous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.previous))), true);
  // 0x58: pointer
  if (data?.reservedFn !== undefined) view.setBigUint64(88, data.reservedFn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reservedFn))), true);
  // 0x60: pointer
  if (data?.getState !== undefined) view.setBigUint64(96, data.getState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.getState))), true);
  // 0x68: pointer
  if (data?.setState !== undefined) view.setBigUint64(104, data.setState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.setState))), true);
  return buf;
}

export class UCharIteratorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get length(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get start(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get index(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get limit(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get reservedField(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get getIndex(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get move(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get hasNext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get hasPrevious(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get current(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get previous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get reservedFn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get getState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get setState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set length(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set start(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set index(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set limit(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set reservedField(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set getIndex(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set move(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set hasNext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set hasPrevious(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set current(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set previous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set reservedFn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set getState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set setState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UCPTrieData (size: 32)
 */
export interface UCPTrieData {
  /** ptr */
  ptr0: Deno.PointerValue | Uint8Array;
  /** ptr */
  ptr16: Deno.PointerValue | Uint8Array;
  /** ptr */
  ptr32: Deno.PointerValue | Uint8Array;
  /** ptr */
  ptr8: Deno.PointerValue | Uint8Array;
}

export const sizeofUCPTrieData = 32;

export function allocUCPTrieData(data?: Partial<UCPTrieData>): Uint8Array {
  const buf = new Uint8Array(sizeofUCPTrieData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ptr0 !== undefined) view.setBigUint64(0, data.ptr0 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr0))), true);
  // 0x08: pointer
  if (data?.ptr16 !== undefined) view.setBigUint64(8, data.ptr16 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr16))), true);
  // 0x10: pointer
  if (data?.ptr32 !== undefined) view.setBigUint64(16, data.ptr32 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr32))), true);
  // 0x18: pointer
  if (data?.ptr8 !== undefined) view.setBigUint64(24, data.ptr8 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptr8))), true);
  return buf;
}

export class UCPTrieDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ptr0(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ptr16(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ptr32(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ptr8(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ptr0(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ptr16(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ptr32(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ptr8(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UCPTrie (size: 48)
 */
export interface UCPTrie {
  /** ptr */
  index: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Globalization.UCPTrieData */
  data: Uint8Array | Deno.PointerValue;
  /** i32 */
  indexLength: number;
  /** i32 */
  dataLength: number;
  /** i32 */
  highStart: number;
  /** u16 */
  shifted12HighStart: number;
  /** i8 */
  type: number;
  /** i8 */
  valueWidth: number;
  /** u32 */
  reserved32: number;
  /** u16 */
  reserved16: number;
  /** u16 */
  index3NullOffset: number;
  /** i32 */
  dataNullOffset: number;
  /** u32 */
  nullValue: number;
}

export const sizeofUCPTrie = 48;

export function allocUCPTrie(data?: Partial<UCPTrie>): Uint8Array {
  const buf = new Uint8Array(sizeofUCPTrie);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.index !== undefined) view.setBigUint64(0, data.index === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.index))), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  // 0x10: i32
  if (data?.indexLength !== undefined) view.setInt32(16, Number(data.indexLength), true);
  // 0x14: i32
  if (data?.dataLength !== undefined) view.setInt32(20, Number(data.dataLength), true);
  // 0x18: i32
  if (data?.highStart !== undefined) view.setInt32(24, Number(data.highStart), true);
  // 0x1c: u16
  if (data?.shifted12HighStart !== undefined) view.setUint16(28, Number(data.shifted12HighStart), true);
  // 0x1e: i8
  if (data?.type !== undefined) view.setInt8(30, Number(data.type));
  // 0x1f: i8
  if (data?.valueWidth !== undefined) view.setInt8(31, Number(data.valueWidth));
  // 0x20: u32
  if (data?.reserved32 !== undefined) view.setUint32(32, Number(data.reserved32), true);
  // 0x24: u16
  if (data?.reserved16 !== undefined) view.setUint16(36, Number(data.reserved16), true);
  // 0x26: u16
  if (data?.index3NullOffset !== undefined) view.setUint16(38, Number(data.index3NullOffset), true);
  // 0x28: i32
  if (data?.dataNullOffset !== undefined) view.setInt32(40, Number(data.dataNullOffset), true);
  // 0x2c: u32
  if (data?.nullValue !== undefined) view.setUint32(44, Number(data.nullValue), true);
  return buf;
}

export class UCPTrieView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get index(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get indexLength(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get dataLength(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get highStart(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u16
  get shifted12HighStart(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: i8
  get type(): number {
    return this.view.getInt8(30);
  }

  // 0x1f: i8
  get valueWidth(): number {
    return this.view.getInt8(31);
  }

  // 0x20: u32
  get reserved32(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get reserved16(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get index3NullOffset(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: i32
  get dataNullOffset(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get nullValue(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set index(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set indexLength(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set dataLength(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set highStart(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u16
  set shifted12HighStart(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: i8
  set type(value: number) {
    this.view.setInt8(30, value);
  }

  // 0x1f: i8
  set valueWidth(value: number) {
    this.view.setInt8(31, value);
  }

  // 0x20: u32
  set reserved32(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set reserved16(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set index3NullOffset(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: i32
  set dataNullOffset(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set nullValue(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Globalization.UConverterFromUnicodeArgs (size: 56)
 */
export interface UConverterFromUnicodeArgs {
  /** u16 */
  size: number;
  /** i8 */
  flush: number;
  /** ptr */
  converter: Deno.PointerValue | Uint8Array;
  /** ptr */
  source: Deno.PointerValue | Uint8Array;
  /** ptr */
  sourceLimit: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  target: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  targetLimit: string | null | Uint8Array;
  /** ptr */
  offsets: Deno.PointerValue | Uint8Array;
}

export const sizeofUConverterFromUnicodeArgs = 56;

export function allocUConverterFromUnicodeArgs(data?: Partial<UConverterFromUnicodeArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUConverterFromUnicodeArgs);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.size !== undefined) view.setUint16(0, Number(data.size), true);
  // 0x02: i8
  if (data?.flush !== undefined) view.setInt8(2, Number(data.flush));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.converter !== undefined) view.setBigUint64(8, data.converter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.converter))), true);
  // 0x10: pointer
  if (data?.source !== undefined) view.setBigUint64(16, data.source === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.source))), true);
  // 0x18: pointer
  if (data?.sourceLimit !== undefined) view.setBigUint64(24, data.sourceLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sourceLimit))), true);
  // 0x20: buffer
  if (data?.target !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.target);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.targetLimit !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.targetLimit);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.offsets !== undefined) view.setBigUint64(48, data.offsets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.offsets))), true);
  return buf;
}

export class UConverterFromUnicodeArgsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: i8
  get flush(): number {
    return this.view.getInt8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get converter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get sourceLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get target(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get targetLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get offsets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: i8
  set flush(value: number) {
    this.view.setInt8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set converter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set source(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set sourceLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set target(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set targetLimit(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set offsets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UConverterToUnicodeArgs (size: 56)
 */
export interface UConverterToUnicodeArgs {
  /** u16 */
  size: number;
  /** i8 */
  flush: number;
  /** ptr */
  converter: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  source: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  sourceLimit: string | null | Uint8Array;
  /** ptr */
  target: Deno.PointerValue | Uint8Array;
  /** ptr */
  targetLimit: Deno.PointerValue | Uint8Array;
  /** ptr */
  offsets: Deno.PointerValue | Uint8Array;
}

export const sizeofUConverterToUnicodeArgs = 56;

export function allocUConverterToUnicodeArgs(data?: Partial<UConverterToUnicodeArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUConverterToUnicodeArgs);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.size !== undefined) view.setUint16(0, Number(data.size), true);
  // 0x02: i8
  if (data?.flush !== undefined) view.setInt8(2, Number(data.flush));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.converter !== undefined) view.setBigUint64(8, data.converter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.converter))), true);
  // 0x10: buffer
  if (data?.source !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.source);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.sourceLimit !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.sourceLimit);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.target !== undefined) view.setBigUint64(32, data.target === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.target))), true);
  // 0x28: pointer
  if (data?.targetLimit !== undefined) view.setBigUint64(40, data.targetLimit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.targetLimit))), true);
  // 0x30: pointer
  if (data?.offsets !== undefined) view.setBigUint64(48, data.offsets === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.offsets))), true);
  return buf;
}

export class UConverterToUnicodeArgsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: i8
  get flush(): number {
    return this.view.getInt8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get converter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get sourceLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get target(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get targetLimit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get offsets(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: i8
  set flush(value: number) {
    this.view.setInt8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set converter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set source(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set sourceLimit(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set target(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set targetLimit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set offsets(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UTextFuncs (size: 112)
 */
export interface UTextFuncs {
  /** i32 */
  tableSize: number;
  /** i32 */
  reserved1: number;
  /** i32 */
  reserved2: number;
  /** i32 */
  reserved3: number;
  /** Windows.Win32.Globalization.UTextClone */
  clone: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextNativeLength */
  nativeLength: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextAccess */
  access: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextExtract */
  extract: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextReplace */
  replace: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextCopy */
  copy: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextMapOffsetToNative */
  mapOffsetToNative: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextMapNativeIndexToUTF16 */
  mapNativeIndexToUTF16: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextClose */
  close: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextClose */
  spare1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextClose */
  spare2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Globalization.UTextClose */
  spare3: Uint8Array | Deno.PointerValue;
}

export const sizeofUTextFuncs = 112;

export function allocUTextFuncs(data?: Partial<UTextFuncs>): Uint8Array {
  const buf = new Uint8Array(sizeofUTextFuncs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tableSize !== undefined) view.setInt32(0, Number(data.tableSize), true);
  // 0x04: i32
  if (data?.reserved1 !== undefined) view.setInt32(4, Number(data.reserved1), true);
  // 0x08: i32
  if (data?.reserved2 !== undefined) view.setInt32(8, Number(data.reserved2), true);
  // 0x0c: i32
  if (data?.reserved3 !== undefined) view.setInt32(12, Number(data.reserved3), true);
  // 0x10: pointer
  if (data?.clone !== undefined) view.setBigUint64(16, data.clone === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clone))), true);
  // 0x18: pointer
  if (data?.nativeLength !== undefined) view.setBigUint64(24, data.nativeLength === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nativeLength))), true);
  // 0x20: pointer
  if (data?.access !== undefined) view.setBigUint64(32, data.access === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.access))), true);
  // 0x28: pointer
  if (data?.extract !== undefined) view.setBigUint64(40, data.extract === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.extract))), true);
  // 0x30: pointer
  if (data?.replace !== undefined) view.setBigUint64(48, data.replace === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.replace))), true);
  // 0x38: pointer
  if (data?.copy !== undefined) view.setBigUint64(56, data.copy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.copy))), true);
  // 0x40: pointer
  if (data?.mapOffsetToNative !== undefined) view.setBigUint64(64, data.mapOffsetToNative === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mapOffsetToNative))), true);
  // 0x48: pointer
  if (data?.mapNativeIndexToUTF16 !== undefined) view.setBigUint64(72, data.mapNativeIndexToUTF16 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mapNativeIndexToUTF16))), true);
  // 0x50: pointer
  if (data?.close !== undefined) view.setBigUint64(80, data.close === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.close))), true);
  // 0x58: pointer
  if (data?.spare1 !== undefined) view.setBigUint64(88, data.spare1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.spare1))), true);
  // 0x60: pointer
  if (data?.spare2 !== undefined) view.setBigUint64(96, data.spare2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.spare2))), true);
  // 0x68: pointer
  if (data?.spare3 !== undefined) view.setBigUint64(104, data.spare3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.spare3))), true);
  return buf;
}

export class UTextFuncsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get tableSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get reserved1(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get reserved2(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get reserved3(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get clone(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get nativeLength(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get access(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get extract(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get replace(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get copy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get mapOffsetToNative(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get mapNativeIndexToUTF16(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get close(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get spare1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get spare2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get spare3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set tableSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set reserved1(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set reserved2(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set reserved3(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set clone(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set nativeLength(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set access(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set extract(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set replace(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set copy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set mapOffsetToNative(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set mapNativeIndexToUTF16(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set close(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set spare1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set spare2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set spare3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UText (size: 144)
 */
export interface UText {
  /** u32 */
  magic: number;
  /** i32 */
  flags: number;
  /** i32 */
  providerProperties: number;
  /** i32 */
  sizeOfStruct: number;
  /** i64 */
  chunkNativeLimit: Deno.PointerValue;
  /** i32 */
  extraSize: number;
  /** i32 */
  nativeIndexingLimit: number;
  /** i64 */
  chunkNativeStart: Deno.PointerValue;
  /** i32 */
  chunkOffset: number;
  /** i32 */
  chunkLength: number;
  /** ptr */
  chunkContents: Deno.PointerValue | Uint8Array;
  /** ptr */
  pFuncs: Deno.PointerValue | Uint8Array;
  /** ptr */
  pExtra: Deno.PointerValue | Uint8Array;
  /** ptr */
  context: Deno.PointerValue | Uint8Array;
  /** ptr */
  p: Deno.PointerValue | Uint8Array;
  /** ptr */
  q: Deno.PointerValue | Uint8Array;
  /** ptr */
  r: Deno.PointerValue | Uint8Array;
  /** ptr */
  privP: Deno.PointerValue | Uint8Array;
  /** i64 */
  a: Deno.PointerValue;
  /** i32 */
  b: number;
  /** i32 */
  c: number;
  /** i64 */
  privA: Deno.PointerValue;
  /** i32 */
  privB: number;
  /** i32 */
  privC: number;
}

export const sizeofUText = 144;

export function allocUText(data?: Partial<UText>): Uint8Array {
  const buf = new Uint8Array(sizeofUText);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: i32
  if (data?.flags !== undefined) view.setInt32(4, Number(data.flags), true);
  // 0x08: i32
  if (data?.providerProperties !== undefined) view.setInt32(8, Number(data.providerProperties), true);
  // 0x0c: i32
  if (data?.sizeOfStruct !== undefined) view.setInt32(12, Number(data.sizeOfStruct), true);
  // 0x10: i64
  if (data?.chunkNativeLimit !== undefined) view.setBigInt64(16, BigInt(data.chunkNativeLimit), true);
  // 0x18: i32
  if (data?.extraSize !== undefined) view.setInt32(24, Number(data.extraSize), true);
  // 0x1c: i32
  if (data?.nativeIndexingLimit !== undefined) view.setInt32(28, Number(data.nativeIndexingLimit), true);
  // 0x20: i64
  if (data?.chunkNativeStart !== undefined) view.setBigInt64(32, BigInt(data.chunkNativeStart), true);
  // 0x28: i32
  if (data?.chunkOffset !== undefined) view.setInt32(40, Number(data.chunkOffset), true);
  // 0x2c: i32
  if (data?.chunkLength !== undefined) view.setInt32(44, Number(data.chunkLength), true);
  // 0x30: pointer
  if (data?.chunkContents !== undefined) view.setBigUint64(48, data.chunkContents === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chunkContents))), true);
  // 0x38: pointer
  if (data?.pFuncs !== undefined) view.setBigUint64(56, data.pFuncs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pFuncs))), true);
  // 0x40: pointer
  if (data?.pExtra !== undefined) view.setBigUint64(64, data.pExtra === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pExtra))), true);
  // 0x48: pointer
  if (data?.context !== undefined) view.setBigUint64(72, data.context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.context))), true);
  // 0x50: pointer
  if (data?.p !== undefined) view.setBigUint64(80, data.p === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.p))), true);
  // 0x58: pointer
  if (data?.q !== undefined) view.setBigUint64(88, data.q === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.q))), true);
  // 0x60: pointer
  if (data?.r !== undefined) view.setBigUint64(96, data.r === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.r))), true);
  // 0x68: pointer
  if (data?.privP !== undefined) view.setBigUint64(104, data.privP === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.privP))), true);
  // 0x70: i64
  if (data?.a !== undefined) view.setBigInt64(112, BigInt(data.a), true);
  // 0x78: i32
  if (data?.b !== undefined) view.setInt32(120, Number(data.b), true);
  // 0x7c: i32
  if (data?.c !== undefined) view.setInt32(124, Number(data.c), true);
  // 0x80: i64
  if (data?.privA !== undefined) view.setBigInt64(128, BigInt(data.privA), true);
  // 0x88: i32
  if (data?.privB !== undefined) view.setInt32(136, Number(data.privB), true);
  // 0x8c: i32
  if (data?.privC !== undefined) view.setInt32(140, Number(data.privC), true);
  return buf;
}

export class UTextView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get flags(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get providerProperties(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get sizeOfStruct(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i64
  get chunkNativeLimit(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: i32
  get extraSize(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get nativeIndexingLimit(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i64
  get chunkNativeStart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i32
  get chunkOffset(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get chunkLength(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get chunkContents(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pFuncs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pExtra(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get p(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get q(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get r(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get privP(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: i64
  get a(): Deno.PointerValue {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: i32
  get b(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: i32
  get c(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: i64
  get privA(): Deno.PointerValue {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x88: i32
  get privB(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: i32
  get privC(): number {
    return this.view.getInt32(140, true);
  }

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set flags(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set providerProperties(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set sizeOfStruct(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i64
  set chunkNativeLimit(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: i32
  set extraSize(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set nativeIndexingLimit(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i64
  set chunkNativeStart(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i32
  set chunkOffset(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set chunkLength(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set chunkContents(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pFuncs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pExtra(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set p(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set q(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set r(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set privP(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: i64
  set a(value: Deno.PointerValue) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: i32
  set b(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: i32
  set c(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: i64
  set privA(value: Deno.PointerValue) {
    this.view.setBigInt64(128, BigInt(value), true);
  }

  // 0x88: i32
  set privB(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: i32
  set privC(value: number) {
    this.view.setInt32(140, value, true);
  }
}

/**
 * Windows.Win32.Globalization.USerializedSet (size: 24)
 */
export interface USerializedSet {
  /** ptr */
  array: Deno.PointerValue | Uint8Array;
  /** i32 */
  bmpLength: number;
  /** i32 */
  length: number;
  /** array */
  staticArray: Deno.PointerValue;
}

export const sizeofUSerializedSet = 24;

export function allocUSerializedSet(data?: Partial<USerializedSet>): Uint8Array {
  const buf = new Uint8Array(sizeofUSerializedSet);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.array !== undefined) view.setBigUint64(0, data.array === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.array))), true);
  // 0x08: i32
  if (data?.bmpLength !== undefined) view.setInt32(8, Number(data.bmpLength), true);
  // 0x0c: i32
  if (data?.length !== undefined) view.setInt32(12, Number(data.length), true);
  // 0x10: pointer
  if (data?.staticArray !== undefined) view.setBigUint64(16, data.staticArray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.staticArray))), true);
  return buf;
}

export class USerializedSetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get array(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get bmpLength(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get length(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get staticArray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set array(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set bmpLength(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set length(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set staticArray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UParseError (size: 24)
 */
export interface UParseError {
  /** i32 */
  line: number;
  /** i32 */
  offset: number;
  /** array */
  preContext: Deno.PointerValue;
  /** array */
  postContext: Deno.PointerValue;
}

export const sizeofUParseError = 24;

export function allocUParseError(data?: Partial<UParseError>): Uint8Array {
  const buf = new Uint8Array(sizeofUParseError);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.line !== undefined) view.setInt32(0, Number(data.line), true);
  // 0x04: i32
  if (data?.offset !== undefined) view.setInt32(4, Number(data.offset), true);
  // 0x08: pointer
  if (data?.preContext !== undefined) view.setBigUint64(8, data.preContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.preContext))), true);
  // 0x10: pointer
  if (data?.postContext !== undefined) view.setBigUint64(16, data.postContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.postContext))), true);
  return buf;
}

export class UParseErrorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get line(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get offset(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get preContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get postContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set line(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set offset(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set preContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set postContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UIDNAInfo (size: 16)
 */
export interface UIDNAInfo {
  /** i16 */
  size: number;
  /** i8 */
  isTransitionalDifferent: number;
  /** i8 */
  reservedB3: number;
  /** u32 */
  errors: number;
  /** i32 */
  reservedI2: number;
  /** i32 */
  reservedI3: number;
}

export const sizeofUIDNAInfo = 16;

export function allocUIDNAInfo(data?: Partial<UIDNAInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofUIDNAInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.size !== undefined) view.setInt16(0, Number(data.size), true);
  // 0x02: i8
  if (data?.isTransitionalDifferent !== undefined) view.setInt8(2, Number(data.isTransitionalDifferent));
  // 0x03: i8
  if (data?.reservedB3 !== undefined) view.setInt8(3, Number(data.reservedB3));
  // 0x04: u32
  if (data?.errors !== undefined) view.setUint32(4, Number(data.errors), true);
  // 0x08: i32
  if (data?.reservedI2 !== undefined) view.setInt32(8, Number(data.reservedI2), true);
  // 0x0c: i32
  if (data?.reservedI3 !== undefined) view.setInt32(12, Number(data.reservedI3), true);
  return buf;
}

export class UIDNAInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get size(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i8
  get isTransitionalDifferent(): number {
    return this.view.getInt8(2);
  }

  // 0x03: i8
  get reservedB3(): number {
    return this.view.getInt8(3);
  }

  // 0x04: u32
  get errors(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get reservedI2(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get reservedI3(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i16
  set size(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i8
  set isTransitionalDifferent(value: number) {
    this.view.setInt8(2, value);
  }

  // 0x03: i8
  set reservedB3(value: number) {
    this.view.setInt8(3, value);
  }

  // 0x04: u32
  set errors(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set reservedI2(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set reservedI3(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Globalization.UTransPosition (size: 16)
 */
export interface UTransPosition {
  /** i32 */
  contextStart: number;
  /** i32 */
  contextLimit: number;
  /** i32 */
  start: number;
  /** i32 */
  limit: number;
}

export const sizeofUTransPosition = 16;

export function allocUTransPosition(data?: Partial<UTransPosition>): Uint8Array {
  const buf = new Uint8Array(sizeofUTransPosition);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.contextStart !== undefined) view.setInt32(0, Number(data.contextStart), true);
  // 0x04: i32
  if (data?.contextLimit !== undefined) view.setInt32(4, Number(data.contextLimit), true);
  // 0x08: i32
  if (data?.start !== undefined) view.setInt32(8, Number(data.start), true);
  // 0x0c: i32
  if (data?.limit !== undefined) view.setInt32(12, Number(data.limit), true);
  return buf;
}

export class UTransPositionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get contextStart(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get contextLimit(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get start(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get limit(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set contextStart(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set contextLimit(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set start(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set limit(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Globalization.MIMECPINFO (size: 72)
 */
export interface MIMECPINFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  uiCodePage: number;
  /** u32 */
  uiFamilyCodePage: number;
  /** array */
  wszDescription: Deno.PointerValue;
  /** array */
  wszWebCharset: Deno.PointerValue;
  /** array */
  wszHeaderCharset: Deno.PointerValue;
  /** array */
  wszBodyCharset: Deno.PointerValue;
  /** array */
  wszFixedWidthFont: Deno.PointerValue;
  /** array */
  wszProportionalFont: Deno.PointerValue;
  /** u8 */
  bGDICharset: number;
}

export const sizeofMIMECPINFO = 72;

export function allocMIMECPINFO(data?: Partial<MIMECPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIMECPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.uiCodePage !== undefined) view.setUint32(4, Number(data.uiCodePage), true);
  // 0x08: u32
  if (data?.uiFamilyCodePage !== undefined) view.setUint32(8, Number(data.uiFamilyCodePage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(16, data.wszDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszDescription))), true);
  // 0x18: pointer
  if (data?.wszWebCharset !== undefined) view.setBigUint64(24, data.wszWebCharset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszWebCharset))), true);
  // 0x20: pointer
  if (data?.wszHeaderCharset !== undefined) view.setBigUint64(32, data.wszHeaderCharset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszHeaderCharset))), true);
  // 0x28: pointer
  if (data?.wszBodyCharset !== undefined) view.setBigUint64(40, data.wszBodyCharset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszBodyCharset))), true);
  // 0x30: pointer
  if (data?.wszFixedWidthFont !== undefined) view.setBigUint64(48, data.wszFixedWidthFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszFixedWidthFont))), true);
  // 0x38: pointer
  if (data?.wszProportionalFont !== undefined) view.setBigUint64(56, data.wszProportionalFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszProportionalFont))), true);
  // 0x40: u8
  if (data?.bGDICharset !== undefined) view.setUint8(64, Number(data.bGDICharset));
  // 0x41: pad7
  return buf;
}

export class MIMECPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uiCodePage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get uiFamilyCodePage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get wszDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get wszWebCharset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get wszHeaderCharset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get wszBodyCharset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get wszFixedWidthFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get wszProportionalFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u8
  get bGDICharset(): number {
    return this.view.getUint8(64);
  }

  // 0x41: pad7

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uiCodePage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set uiFamilyCodePage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set wszDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set wszWebCharset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set wszHeaderCharset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set wszBodyCharset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set wszFixedWidthFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set wszProportionalFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u8
  set bGDICharset(value: number) {
    this.view.setUint8(64, value);
  }

  // 0x41: pad7
}

/**
 * Windows.Win32.Globalization.MIMECSETINFO (size: 16)
 */
export interface MIMECSETINFO {
  /** u32 */
  uiCodePage: number;
  /** u32 */
  uiInternetEncoding: number;
  /** array */
  wszCharset: Deno.PointerValue;
}

export const sizeofMIMECSETINFO = 16;

export function allocMIMECSETINFO(data?: Partial<MIMECSETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMIMECSETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uiCodePage !== undefined) view.setUint32(0, Number(data.uiCodePage), true);
  // 0x04: u32
  if (data?.uiInternetEncoding !== undefined) view.setUint32(4, Number(data.uiInternetEncoding), true);
  // 0x08: pointer
  if (data?.wszCharset !== undefined) view.setBigUint64(8, data.wszCharset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszCharset))), true);
  return buf;
}

export class MIMECSETINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uiCodePage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uiInternetEncoding(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get wszCharset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uiCodePage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uiInternetEncoding(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set wszCharset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.RFC1766INFO (size: 24)
 */
export interface RFC1766INFO {
  /** u32 */
  lcid: number;
  /** array */
  wszRfc1766: Deno.PointerValue;
  /** array */
  wszLocaleName: Deno.PointerValue;
}

export const sizeofRFC1766INFO = 24;

export function allocRFC1766INFO(data?: Partial<RFC1766INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRFC1766INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lcid !== undefined) view.setUint32(0, Number(data.lcid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszRfc1766 !== undefined) view.setBigUint64(8, data.wszRfc1766 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszRfc1766))), true);
  // 0x10: pointer
  if (data?.wszLocaleName !== undefined) view.setBigUint64(16, data.wszLocaleName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszLocaleName))), true);
  return buf;
}

export class RFC1766INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lcid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wszRfc1766(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get wszLocaleName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lcid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wszRfc1766(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set wszLocaleName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPTINFO (size: 32)
 */
export interface SCRIPTINFO {
  /** u8 */
  ScriptId: number;
  /** u32 */
  uiCodePage: number;
  /** array */
  wszDescription: Deno.PointerValue;
  /** array */
  wszFixedWidthFont: Deno.PointerValue;
  /** array */
  wszProportionalFont: Deno.PointerValue;
}

export const sizeofSCRIPTINFO = 32;

export function allocSCRIPTINFO(data?: Partial<SCRIPTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ScriptId !== undefined) view.setUint8(0, Number(data.ScriptId));
  // 0x01: u32
  if (data?.uiCodePage !== undefined) view.setUint32(1, Number(data.uiCodePage), true);
  // 0x05: pad3
  // 0x08: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(8, data.wszDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszDescription))), true);
  // 0x10: pointer
  if (data?.wszFixedWidthFont !== undefined) view.setBigUint64(16, data.wszFixedWidthFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszFixedWidthFont))), true);
  // 0x18: pointer
  if (data?.wszProportionalFont !== undefined) view.setBigUint64(24, data.wszProportionalFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszProportionalFont))), true);
  return buf;
}

export class SCRIPTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ScriptId(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get uiCodePage(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: pad3

  // 0x08: pointer
  get wszDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get wszFixedWidthFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get wszProportionalFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set ScriptId(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set uiCodePage(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: pad3

  // 0x08: pointer
  set wszDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set wszFixedWidthFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set wszProportionalFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.DetectEncodingInfo (size: 16)
 */
export interface DetectEncodingInfo {
  /** u32 */
  nLangID: number;
  /** u32 */
  nCodePage: number;
  /** i32 */
  nDocPercent: number;
  /** i32 */
  nConfidence: number;
}

export const sizeofDetectEncodingInfo = 16;

export function allocDetectEncodingInfo(data?: Partial<DetectEncodingInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofDetectEncodingInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nLangID !== undefined) view.setUint32(0, Number(data.nLangID), true);
  // 0x04: u32
  if (data?.nCodePage !== undefined) view.setUint32(4, Number(data.nCodePage), true);
  // 0x08: i32
  if (data?.nDocPercent !== undefined) view.setInt32(8, Number(data.nDocPercent), true);
  // 0x0c: i32
  if (data?.nConfidence !== undefined) view.setInt32(12, Number(data.nConfidence), true);
  return buf;
}

export class DetectEncodingInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nLangID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nCodePage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get nDocPercent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get nConfidence(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set nLangID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nCodePage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set nDocPercent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set nConfidence(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Globalization.SCRIPTFONTINFO (size: 16)
 */
export interface SCRIPTFONTINFO {
  /** i64 */
  scripts: Deno.PointerValue;
  /** array */
  wszFont: Deno.PointerValue;
}

export const sizeofSCRIPTFONTINFO = 16;

export function allocSCRIPTFONTINFO(data?: Partial<SCRIPTFONTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCRIPTFONTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.scripts !== undefined) view.setBigInt64(0, BigInt(data.scripts), true);
  // 0x08: pointer
  if (data?.wszFont !== undefined) view.setBigUint64(8, data.wszFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszFont))), true);
  return buf;
}

export class SCRIPTFONTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get scripts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: pointer
  get wszFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i64
  set scripts(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set wszFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Globalization.UNICODERANGE (size: 16)
 */
export interface UNICODERANGE {
  /** char */
  wcFrom: Uint8Array | Deno.PointerValue;
  /** char */
  wcTo: Uint8Array | Deno.PointerValue;
}

export const sizeofUNICODERANGE = 16;

export function allocUNICODERANGE(data?: Partial<UNICODERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wcFrom !== undefined) view.setBigUint64(0, data.wcFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcFrom))), true);
  // 0x08: pointer
  if (data?.wcTo !== undefined) view.setBigUint64(8, data.wcTo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcTo))), true);
  return buf;
}

export class UNICODERANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wcFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get wcTo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set wcFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set wcTo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HDC = Deno.PointerValue;

export type BOOL = number;

export type LPARAM = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    GetTextCharset: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetTextCharsetInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    TranslateCharsetInfo: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    GetDateFormatA: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer", "i32"],
      result: "i32",
    },
    GetDateFormatW: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer", "i32"],
      result: "i32",
    },
    GetTimeFormatA: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer", "i32"],
      result: "i32",
    },
    GetTimeFormatW: {
      parameters: ["u32", "u32", "pointer", "buffer", "buffer", "i32"],
      result: "i32",
    },
    GetTimeFormatEx: {
      parameters: ["buffer", "u32", "pointer", "buffer", "buffer", "i32"],
      result: "i32",
    },
    GetDateFormatEx: {
      parameters: ["buffer", "u32", "pointer", "buffer", "buffer", "i32", "buffer"],
      result: "i32",
    },
    GetDurationFormatEx: {
      parameters: ["buffer", "u32", "pointer", "u64", "buffer", "buffer", "i32"],
      result: "i32",
    },
    CompareStringEx: {
      parameters: ["buffer", "u32", "buffer", "i32", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    CompareStringOrdinal: {
      parameters: ["buffer", "i32", "buffer", "i32", "i32"],
      result: "i32",
    },
    CompareStringW: {
      parameters: ["u32", "u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    FoldStringW: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    GetStringTypeExW: {
      parameters: ["u32", "u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetStringTypeW: {
      parameters: ["u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    MultiByteToWideChar: {
      parameters: ["u32", "u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    WideCharToMultiByte: {
      parameters: ["u32", "u32", "buffer", "i32", "buffer", "i32", "buffer", "pointer"],
      result: "i32",
    },
    IsValidCodePage: {
      parameters: ["u32"],
      result: "i32",
    },
    GetACP: {
      parameters: [],
      result: "u32",
    },
    GetOEMCP: {
      parameters: [],
      result: "u32",
    },
    GetCPInfo: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetCPInfoExA: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    GetCPInfoExW: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    CompareStringA: {
      parameters: ["u32", "u32", "pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    FindNLSString: {
      parameters: ["u32", "u32", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    LCMapStringW: {
      parameters: ["u32", "u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    LCMapStringA: {
      parameters: ["u32", "u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    GetLocaleInfoW: {
      parameters: ["u32", "u32", "buffer", "i32"],
      result: "i32",
    },
    GetLocaleInfoA: {
      parameters: ["u32", "u32", "buffer", "i32"],
      result: "i32",
    },
    SetLocaleInfoA: {
      parameters: ["u32", "u32", "buffer"],
      result: "i32",
    },
    SetLocaleInfoW: {
      parameters: ["u32", "u32", "buffer"],
      result: "i32",
    },
    GetCalendarInfoA: {
      parameters: ["u32", "u32", "u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetCalendarInfoW: {
      parameters: ["u32", "u32", "u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    SetCalendarInfoA: {
      parameters: ["u32", "u32", "u32", "buffer"],
      result: "i32",
    },
    SetCalendarInfoW: {
      parameters: ["u32", "u32", "u32", "buffer"],
      result: "i32",
    },
    IsDBCSLeadByte: {
      parameters: ["u8"],
      result: "i32",
    },
    IsDBCSLeadByteEx: {
      parameters: ["u32", "u8"],
      result: "i32",
    },
    LocaleNameToLCID: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    LCIDToLocaleName: {
      parameters: ["u32", "buffer", "i32", "u32"],
      result: "i32",
    },
    GetDurationFormat: {
      parameters: ["u32", "u32", "pointer", "u64", "buffer", "buffer", "i32"],
      result: "i32",
    },
    GetNumberFormatA: {
      parameters: ["u32", "u32", "buffer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    GetNumberFormatW: {
      parameters: ["u32", "u32", "buffer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    GetCurrencyFormatA: {
      parameters: ["u32", "u32", "buffer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    GetCurrencyFormatW: {
      parameters: ["u32", "u32", "buffer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    EnumCalendarInfoA: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    EnumCalendarInfoW: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    EnumCalendarInfoExA: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    EnumCalendarInfoExW: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    EnumTimeFormatsA: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    EnumTimeFormatsW: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    EnumDateFormatsA: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    EnumDateFormatsW: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    EnumDateFormatsExA: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    EnumDateFormatsExW: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    IsValidLanguageGroup: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    GetNLSVersion: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    IsValidLocale: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    GetGeoInfoA: {
      parameters: ["i32", "u32", "buffer", "i32", "u16"],
      result: "i32",
    },
    GetGeoInfoW: {
      parameters: ["i32", "u32", "buffer", "i32", "u16"],
      result: "i32",
    },
    GetGeoInfoEx: {
      parameters: ["buffer", "u32", "buffer", "i32"],
      result: "i32",
    },
    EnumSystemGeoID: {
      parameters: ["u32", "i32", "pointer"],
      result: "i32",
    },
    EnumSystemGeoNames: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetUserGeoID: {
      parameters: ["u32"],
      result: "i32",
    },
    GetUserDefaultGeoName: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    SetUserGeoID: {
      parameters: ["i32"],
      result: "i32",
    },
    SetUserGeoName: {
      parameters: ["buffer"],
      result: "i32",
    },
    ConvertDefaultLocale: {
      parameters: ["u32"],
      result: "u32",
    },
    GetSystemDefaultUILanguage: {
      parameters: [],
      result: "u16",
    },
    GetThreadLocale: {
      parameters: [],
      result: "u32",
    },
    SetThreadLocale: {
      parameters: ["u32"],
      result: "i32",
    },
    GetUserDefaultUILanguage: {
      parameters: [],
      result: "u16",
    },
    GetUserDefaultLangID: {
      parameters: [],
      result: "u16",
    },
    GetSystemDefaultLangID: {
      parameters: [],
      result: "u16",
    },
    GetSystemDefaultLCID: {
      parameters: [],
      result: "u32",
    },
    GetUserDefaultLCID: {
      parameters: [],
      result: "u32",
    },
    SetThreadUILanguage: {
      parameters: ["u16"],
      result: "u16",
    },
    GetThreadUILanguage: {
      parameters: [],
      result: "u16",
    },
    GetProcessPreferredUILanguages: {
      parameters: ["u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetProcessPreferredUILanguages: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    GetUserPreferredUILanguages: {
      parameters: ["u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    GetSystemPreferredUILanguages: {
      parameters: ["u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    GetThreadPreferredUILanguages: {
      parameters: ["u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetThreadPreferredUILanguages: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    GetFileMUIInfo: {
      parameters: ["u32", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetFileMUIPath: {
      parameters: ["u32", "buffer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetUILanguageInfo: {
      parameters: ["u32", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    SetThreadPreferredUILanguages2: {
      parameters: ["u32", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    RestoreThreadPreferredUILanguages: {
      parameters: ["pointer"],
      result: "void",
    },
    NotifyUILanguageChange: {
      parameters: ["u32", "buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    GetStringTypeExA: {
      parameters: ["u32", "u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetStringTypeA: {
      parameters: ["u32", "u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    FoldStringA: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    EnumSystemLocalesA: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    EnumSystemLocalesW: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    EnumSystemLanguageGroupsA: {
      parameters: ["pointer", "u32", "isize"],
      result: "i32",
    },
    EnumSystemLanguageGroupsW: {
      parameters: ["pointer", "u32", "isize"],
      result: "i32",
    },
    EnumLanguageGroupLocalesA: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "i32",
    },
    EnumLanguageGroupLocalesW: {
      parameters: ["pointer", "u32", "u32", "isize"],
      result: "i32",
    },
    EnumUILanguagesA: {
      parameters: ["pointer", "u32", "isize"],
      result: "i32",
    },
    EnumUILanguagesW: {
      parameters: ["pointer", "u32", "isize"],
      result: "i32",
    },
    EnumSystemCodePagesA: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    EnumSystemCodePagesW: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    IdnToNameprepUnicode: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    NormalizeString: {
      parameters: ["i32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    IsNormalizedString: {
      parameters: ["i32", "buffer", "i32"],
      result: "i32",
    },
    VerifyScripts: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    GetStringScripts: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    GetLocaleInfoEx: {
      parameters: ["buffer", "u32", "buffer", "i32"],
      result: "i32",
    },
    GetCalendarInfoEx: {
      parameters: ["buffer", "u32", "buffer", "u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    GetNumberFormatEx: {
      parameters: ["buffer", "u32", "buffer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    GetCurrencyFormatEx: {
      parameters: ["buffer", "u32", "buffer", "pointer", "buffer", "i32"],
      result: "i32",
    },
    GetUserDefaultLocaleName: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    GetSystemDefaultLocaleName: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    IsNLSDefinedString: {
      parameters: ["u32", "u32", "pointer", "buffer", "i32"],
      result: "i32",
    },
    GetNLSVersionEx: {
      parameters: ["u32", "buffer", "pointer"],
      result: "i32",
    },
    IsValidNLSVersion: {
      parameters: ["u32", "buffer", "pointer"],
      result: "u32",
    },
    FindNLSStringEx: {
      parameters: ["buffer", "u32", "buffer", "i32", "buffer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    LCMapStringEx: {
      parameters: ["buffer", "u32", "buffer", "i32", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    IsValidLocaleName: {
      parameters: ["buffer"],
      result: "i32",
    },
    EnumCalendarInfoExEx: {
      parameters: ["pointer", "buffer", "u32", "buffer", "u32", "pointer"],
      result: "i32",
    },
    EnumDateFormatsExEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    EnumTimeFormatsEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    EnumSystemLocalesEx: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ResolveLocaleName: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    FindStringOrdinal: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32", "i32"],
      result: "i32",
    },
    lstrcmpA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    lstrcmpW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    lstrcmpiA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    lstrcmpiW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    lstrcpynA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    lstrcpynW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    lstrcpyA: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    lstrcpyW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    lstrcatA: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    lstrcatW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    lstrlenA: {
      parameters: ["buffer"],
      result: "i32",
    },
    lstrlenW: {
      parameters: ["buffer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libNORMALIZ_dll = Deno.dlopen("NORMALIZ.dll", {
    IdnToAscii: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
    IdnToUnicode: {
      parameters: ["u32", "buffer", "i32", "buffer", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libelscore_dll = Deno.dlopen("elscore.dll", {
    MappingGetServices: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    MappingFreeServices: {
      parameters: ["pointer"],
      result: "pointer",
    },
    MappingRecognizeText: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    MappingDoAction: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    MappingFreePropertyBag: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSP10_dll = Deno.dlopen("USP10.dll", {
    ScriptFreeCache: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScriptItemize: {
      parameters: ["buffer", "i32", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptLayout: {
      parameters: ["i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptShape: {
      parameters: ["pointer", "pointer", "buffer", "i32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptPlace: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptTextOut: {
      parameters: ["pointer", "pointer", "i32", "i32", "u32", "pointer", "pointer", "buffer", "i32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptJustify: {
      parameters: ["pointer", "pointer", "i32", "i32", "i32", "pointer"],
      result: "pointer",
    },
    ScriptBreak: {
      parameters: ["buffer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptCPtoX: {
      parameters: ["i32", "i32", "i32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptXtoCP: {
      parameters: ["i32", "i32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetLogicalWidths: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptApplyLogicalWidth: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetCMap: {
      parameters: ["pointer", "pointer", "buffer", "i32", "u32", "pointer"],
      result: "pointer",
    },
    ScriptGetGlyphABCWidth: {
      parameters: ["pointer", "pointer", "u16", "pointer"],
      result: "pointer",
    },
    ScriptGetProperties: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetFontProperties: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptCacheGetHeight: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptStringAnalyse: {
      parameters: ["pointer", "pointer", "i32", "i32", "i32", "u32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptStringFree: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScriptString_pSize: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScriptString_pcOutChars: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScriptString_pLogAttr: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScriptStringGetOrder: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ScriptStringCPtoX: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    ScriptStringXtoCP: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptStringGetLogicalWidths: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ScriptStringValidate: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScriptStringOut: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "i32", "i32", "i32"],
      result: "pointer",
    },
    ScriptIsComplex: {
      parameters: ["buffer", "i32", "u32"],
      result: "pointer",
    },
    ScriptRecordDigitSubstitution: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    ScriptApplyDigitSubstitution: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptShapeOpenType: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer", "pointer", "i32", "buffer", "i32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptPlaceOpenType: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "pointer", "pointer", "i32", "buffer", "pointer", "pointer", "i32", "pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptItemizeOpenType: {
      parameters: ["buffer", "i32", "i32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetFontScriptTags: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetFontLanguageTags: {
      parameters: ["pointer", "pointer", "pointer", "u32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetFontFeatureTags: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptGetFontAlternateGlyphs: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "u16", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ScriptSubstituteSingleGlyph: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "i32", "u16", "pointer"],
      result: "pointer",
    },
    ScriptPositionSingleGlyph: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "i32", "u16", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libicu_dll = Deno.dlopen("icu.dll", {
    utf8_nextCharSafeBody: {
      parameters: ["pointer", "pointer", "i32", "i32", "i8"],
      result: "i32",
    },
    utf8_appendCharSafeBody: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer"],
      result: "i32",
    },
    utf8_prevCharSafeBody: {
      parameters: ["pointer", "i32", "pointer", "i32", "i8"],
      result: "i32",
    },
    utf8_back1SafeBody: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    u_versionFromString: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    u_versionFromUString: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    u_versionToString: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    u_getVersion: {
      parameters: ["pointer"],
      result: "void",
    },
    u_errorName: {
      parameters: ["i32"],
      result: "buffer",
    },
    utrace_setLevel: {
      parameters: ["i32"],
      result: "void",
    },
    utrace_getLevel: {
      parameters: [],
      result: "i32",
    },
    utrace_setFunctions: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    utrace_getFunctions: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    utrace_vformat: {
      parameters: ["buffer", "i32", "i32", "buffer", "pointer"],
      result: "i32",
    },
    utrace_format: {
      parameters: ["buffer", "i32", "i32", "buffer"],
      result: "i32",
    },
    utrace_functionName: {
      parameters: ["i32"],
      result: "buffer",
    },
    u_shapeArabic: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32", "pointer"],
      result: "i32",
    },
    uscript_getCode: {
      parameters: ["buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uscript_getName: {
      parameters: ["i32"],
      result: "buffer",
    },
    uscript_getShortName: {
      parameters: ["i32"],
      result: "buffer",
    },
    uscript_getScript: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    uscript_hasScript: {
      parameters: ["i32", "i32"],
      result: "i8",
    },
    uscript_getScriptExtensions: {
      parameters: ["i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uscript_getSampleString: {
      parameters: ["i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uscript_getUsage: {
      parameters: ["i32"],
      result: "i32",
    },
    uscript_isRightToLeft: {
      parameters: ["i32"],
      result: "i8",
    },
    uscript_breaksBetweenLetters: {
      parameters: ["i32"],
      result: "i8",
    },
    uscript_isCased: {
      parameters: ["i32"],
      result: "i8",
    },
    uiter_current32: {
      parameters: ["pointer"],
      result: "i32",
    },
    uiter_next32: {
      parameters: ["pointer"],
      result: "i32",
    },
    uiter_previous32: {
      parameters: ["pointer"],
      result: "i32",
    },
    uiter_getState: {
      parameters: ["pointer"],
      result: "u32",
    },
    uiter_setState: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    uiter_setString: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    uiter_setUTF16BE: {
      parameters: ["pointer", "buffer", "i32"],
      result: "void",
    },
    uiter_setUTF8: {
      parameters: ["pointer", "buffer", "i32"],
      result: "void",
    },
    uenum_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uenum_count: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uenum_unext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uenum_next: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "buffer",
    },
    uenum_reset: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    uenum_openUCharStringsEnumeration: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    uenum_openCharStringsEnumeration: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    uloc_getDefault: {
      parameters: [],
      result: "buffer",
    },
    uloc_setDefault: {
      parameters: ["buffer", "pointer"],
      result: "void",
    },
    uloc_getLanguage: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getScript: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getCountry: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getVariant: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getName: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_canonicalize: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getISO3Language: {
      parameters: ["buffer"],
      result: "buffer",
    },
    uloc_getISO3Country: {
      parameters: ["buffer"],
      result: "buffer",
    },
    uloc_getLCID: {
      parameters: ["buffer"],
      result: "u32",
    },
    uloc_getDisplayLanguage: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getDisplayScript: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getDisplayCountry: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getDisplayVariant: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getDisplayKeyword: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getDisplayKeywordValue: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getDisplayName: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getAvailable: {
      parameters: ["i32"],
      result: "buffer",
    },
    uloc_countAvailable: {
      parameters: [],
      result: "i32",
    },
    uloc_openAvailableByType: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    uloc_getISOLanguages: {
      parameters: [],
      result: "pointer",
    },
    uloc_getISOCountries: {
      parameters: [],
      result: "pointer",
    },
    uloc_getParent: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_getBaseName: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_openKeywords: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    uloc_getKeywordValue: {
      parameters: ["buffer", "buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_setKeywordValue: {
      parameters: ["buffer", "buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_isRightToLeft: {
      parameters: ["buffer"],
      result: "i8",
    },
    uloc_getCharacterOrientation: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    uloc_getLineOrientation: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    uloc_acceptLanguageFromHTTP: {
      parameters: ["buffer", "i32", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    uloc_acceptLanguage: {
      parameters: ["buffer", "i32", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uloc_getLocaleForLCID: {
      parameters: ["u32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_addLikelySubtags: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_minimizeSubtags: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uloc_forLanguageTag: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uloc_toLanguageTag: {
      parameters: ["buffer", "buffer", "i32", "i8", "pointer"],
      result: "i32",
    },
    uloc_toUnicodeLocaleKey: {
      parameters: ["buffer"],
      result: "buffer",
    },
    uloc_toUnicodeLocaleType: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    uloc_toLegacyKey: {
      parameters: ["buffer"],
      result: "buffer",
    },
    uloc_toLegacyType: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    ures_open: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    ures_openDirect: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    ures_openU: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ures_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ures_getVersion: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ures_getLocaleByType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "buffer",
    },
    ures_getString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getUTF8String: {
      parameters: ["pointer", "buffer", "pointer", "i8", "pointer"],
      result: "buffer",
    },
    ures_getBinary: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getIntVector: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getUInt: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ures_getInt: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ures_getSize: {
      parameters: ["pointer"],
      result: "i32",
    },
    ures_getType: {
      parameters: ["pointer"],
      result: "i32",
    },
    ures_getKey: {
      parameters: ["pointer"],
      result: "buffer",
    },
    ures_resetIterator: {
      parameters: ["pointer"],
      result: "void",
    },
    ures_hasNext: {
      parameters: ["pointer"],
      result: "i8",
    },
    ures_getNextResource: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getNextString: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getByIndex: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getStringByIndex: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getUTF8StringByIndex: {
      parameters: ["pointer", "i32", "buffer", "pointer", "i8", "pointer"],
      result: "buffer",
    },
    ures_getByKey: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getStringByKey: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ures_getUTF8StringByKey: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "i8", "pointer"],
      result: "buffer",
    },
    ures_openAvailableLocales: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    uldn_open: {
      parameters: ["buffer", "i32", "pointer"],
      result: "pointer",
    },
    uldn_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uldn_getLocale: {
      parameters: ["pointer"],
      result: "buffer",
    },
    uldn_getDialectHandling: {
      parameters: ["pointer"],
      result: "i32",
    },
    uldn_localeDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_languageDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_scriptDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_scriptCodeDisplayName: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_regionDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_variantDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_keyDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_keyValueDisplayName: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uldn_openForContext: {
      parameters: ["buffer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    uldn_getContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucurr_forLocale: {
      parameters: ["buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucurr_register: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ucurr_unregister: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    ucurr_getName: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ucurr_getPluralName: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ucurr_getDefaultFractionDigits: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucurr_getDefaultFractionDigitsForUsage: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucurr_getRoundingIncrement: {
      parameters: ["pointer", "pointer"],
      result: "f64",
    },
    ucurr_getRoundingIncrementForUsage: {
      parameters: ["pointer", "i32", "pointer"],
      result: "f64",
    },
    ucurr_openISOCurrencies: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    ucurr_isAvailable: {
      parameters: ["pointer", "f64", "f64", "pointer"],
      result: "i8",
    },
    ucurr_countCurrencies: {
      parameters: ["buffer", "f64", "pointer"],
      result: "i32",
    },
    ucurr_forLocaleAndDate: {
      parameters: ["buffer", "f64", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucurr_getKeywordValuesForLocale: {
      parameters: ["buffer", "buffer", "i8", "pointer"],
      result: "pointer",
    },
    ucurr_getNumericCode: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucpmap_get: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    ucpmap_getRange: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ucptrie_openFromBinary: {
      parameters: ["i32", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ucptrie_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucptrie_getType: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucptrie_getValueWidth: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucptrie_get: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    ucptrie_getRange: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ucptrie_toBinary: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucptrie_internalSmallIndex: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ucptrie_internalSmallU8Index: {
      parameters: ["pointer", "i32", "u8", "u8"],
      result: "i32",
    },
    ucptrie_internalU8PrevIndex: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    umutablecptrie_open: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
    },
    umutablecptrie_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    umutablecptrie_close: {
      parameters: ["pointer"],
      result: "void",
    },
    umutablecptrie_fromUCPMap: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    umutablecptrie_fromUCPTrie: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    umutablecptrie_get: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    umutablecptrie_getRange: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    umutablecptrie_set: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "void",
    },
    umutablecptrie_setRange: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer"],
      result: "void",
    },
    umutablecptrie_buildImmutable: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    UCNV_FROM_U_CALLBACK_STOP: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_TO_U_CALLBACK_STOP: {
      parameters: ["pointer", "pointer", "buffer", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_FROM_U_CALLBACK_SKIP: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_FROM_U_CALLBACK_SUBSTITUTE: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_FROM_U_CALLBACK_ESCAPE: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_TO_U_CALLBACK_SKIP: {
      parameters: ["pointer", "pointer", "buffer", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_TO_U_CALLBACK_SUBSTITUTE: {
      parameters: ["pointer", "pointer", "buffer", "i32", "i32", "pointer"],
      result: "void",
    },
    UCNV_TO_U_CALLBACK_ESCAPE: {
      parameters: ["pointer", "pointer", "buffer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucnv_compareNames: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    ucnv_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ucnv_openU: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ucnv_openCCSID: {
      parameters: ["i32", "i32", "pointer"],
      result: "pointer",
    },
    ucnv_openPackage: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    ucnv_safeClone: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ucnv_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucnv_getSubstChars: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_setSubstChars: {
      parameters: ["pointer", "buffer", "i8", "pointer"],
      result: "void",
    },
    ucnv_setSubstString: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ucnv_getInvalidChars: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_getInvalidUChars: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_reset: {
      parameters: ["pointer"],
      result: "void",
    },
    ucnv_resetToUnicode: {
      parameters: ["pointer"],
      result: "void",
    },
    ucnv_resetFromUnicode: {
      parameters: ["pointer"],
      result: "void",
    },
    ucnv_getMaxCharSize: {
      parameters: ["pointer"],
      result: "i8",
    },
    ucnv_getMinCharSize: {
      parameters: ["pointer"],
      result: "i8",
    },
    ucnv_getDisplayName: {
      parameters: ["pointer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucnv_getName: {
      parameters: ["pointer", "pointer"],
      result: "buffer",
    },
    ucnv_getCCSID: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucnv_getPlatform: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucnv_getType: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucnv_getStarters: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_getUnicodeSet: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ucnv_getToUCallBack: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_getFromUCallBack: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_setToUCallBack: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_setFromUCallBack: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_fromUnicode: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "pointer", "i8", "pointer"],
      result: "void",
    },
    ucnv_toUnicode: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "buffer", "pointer", "i8", "pointer"],
      result: "void",
    },
    ucnv_fromUChars: {
      parameters: ["pointer", "buffer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucnv_toUChars: {
      parameters: ["pointer", "pointer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucnv_getNextUChar: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    ucnv_convertEx: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer", "pointer", "pointer", "i8", "i8", "pointer"],
      result: "void",
    },
    ucnv_convert: {
      parameters: ["buffer", "buffer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucnv_toAlgorithmic: {
      parameters: ["i32", "pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucnv_fromAlgorithmic: {
      parameters: ["pointer", "i32", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucnv_flushCache: {
      parameters: [],
      result: "i32",
    },
    ucnv_countAvailable: {
      parameters: [],
      result: "i32",
    },
    ucnv_getAvailableName: {
      parameters: ["i32"],
      result: "buffer",
    },
    ucnv_openAllNames: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucnv_countAliases: {
      parameters: ["buffer", "pointer"],
      result: "u16",
    },
    ucnv_getAlias: {
      parameters: ["buffer", "u16", "pointer"],
      result: "buffer",
    },
    ucnv_getAliases: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "void",
    },
    ucnv_openStandardNames: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    ucnv_countStandards: {
      parameters: [],
      result: "u16",
    },
    ucnv_getStandard: {
      parameters: ["u16", "pointer"],
      result: "buffer",
    },
    ucnv_getStandardName: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "buffer",
    },
    ucnv_getCanonicalName: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "buffer",
    },
    ucnv_getDefaultName: {
      parameters: [],
      result: "buffer",
    },
    ucnv_setDefaultName: {
      parameters: ["buffer"],
      result: "void",
    },
    ucnv_fixFileSeparator: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    ucnv_isAmbiguous: {
      parameters: ["pointer"],
      result: "i8",
    },
    ucnv_setFallback: {
      parameters: ["pointer", "i8"],
      result: "void",
    },
    ucnv_usesFallback: {
      parameters: ["pointer"],
      result: "i8",
    },
    ucnv_detectUnicodeSignature: {
      parameters: ["buffer", "i32", "pointer", "pointer"],
      result: "buffer",
    },
    ucnv_fromUCountPending: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucnv_toUCountPending: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucnv_isFixedWidth: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    ucnv_cbFromUWriteBytes: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucnv_cbFromUWriteSub: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    ucnv_cbFromUWriteUChars: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ucnv_cbToUWriteUChars: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucnv_cbToUWriteSub: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    u_init: {
      parameters: ["pointer"],
      result: "void",
    },
    u_cleanup: {
      parameters: [],
      result: "void",
    },
    u_setMemoryFunctions: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    u_catopen: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    u_catclose: {
      parameters: ["pointer"],
      result: "void",
    },
    u_catgets: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    u_hasBinaryProperty: {
      parameters: ["i32", "i32"],
      result: "i8",
    },
    u_getBinaryPropertySet: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    u_isUAlphabetic: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isULowercase: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isUUppercase: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isUWhiteSpace: {
      parameters: ["i32"],
      result: "i8",
    },
    u_getIntPropertyValue: {
      parameters: ["i32", "i32"],
      result: "i32",
    },
    u_getIntPropertyMinValue: {
      parameters: ["i32"],
      result: "i32",
    },
    u_getIntPropertyMaxValue: {
      parameters: ["i32"],
      result: "i32",
    },
    u_getIntPropertyMap: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    u_getNumericValue: {
      parameters: ["i32"],
      result: "f64",
    },
    u_islower: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isupper: {
      parameters: ["i32"],
      result: "i8",
    },
    u_istitle: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isdigit: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isalpha: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isalnum: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isxdigit: {
      parameters: ["i32"],
      result: "i8",
    },
    u_ispunct: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isgraph: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isblank: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isdefined: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isspace: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isJavaSpaceChar: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isWhitespace: {
      parameters: ["i32"],
      result: "i8",
    },
    u_iscntrl: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isISOControl: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isprint: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isbase: {
      parameters: ["i32"],
      result: "i8",
    },
    u_charDirection: {
      parameters: ["i32"],
      result: "i32",
    },
    u_isMirrored: {
      parameters: ["i32"],
      result: "i8",
    },
    u_charMirror: {
      parameters: ["i32"],
      result: "i32",
    },
    u_getBidiPairedBracket: {
      parameters: ["i32"],
      result: "i32",
    },
    u_charType: {
      parameters: ["i32"],
      result: "i8",
    },
    u_enumCharTypes: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    u_getCombiningClass: {
      parameters: ["i32"],
      result: "u8",
    },
    u_charDigitValue: {
      parameters: ["i32"],
      result: "i32",
    },
    ublock_getCode: {
      parameters: ["i32"],
      result: "i32",
    },
    u_charName: {
      parameters: ["i32", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    u_charFromName: {
      parameters: ["i32", "buffer", "pointer"],
      result: "i32",
    },
    u_enumCharNames: {
      parameters: ["i32", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    u_getPropertyName: {
      parameters: ["i32", "i32"],
      result: "buffer",
    },
    u_getPropertyEnum: {
      parameters: ["buffer"],
      result: "i32",
    },
    u_getPropertyValueName: {
      parameters: ["i32", "i32", "i32"],
      result: "buffer",
    },
    u_getPropertyValueEnum: {
      parameters: ["i32", "buffer"],
      result: "i32",
    },
    u_isIDStart: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isIDPart: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isIDIgnorable: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isJavaIDStart: {
      parameters: ["i32"],
      result: "i8",
    },
    u_isJavaIDPart: {
      parameters: ["i32"],
      result: "i8",
    },
    u_tolower: {
      parameters: ["i32"],
      result: "i32",
    },
    u_toupper: {
      parameters: ["i32"],
      result: "i32",
    },
    u_totitle: {
      parameters: ["i32"],
      result: "i32",
    },
    u_foldCase: {
      parameters: ["i32", "u32"],
      result: "i32",
    },
    u_digit: {
      parameters: ["i32", "i8"],
      result: "i32",
    },
    u_forDigit: {
      parameters: ["i32", "i8"],
      result: "i32",
    },
    u_charAge: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    u_getUnicodeVersion: {
      parameters: ["pointer"],
      result: "void",
    },
    u_getFC_NFKC_Closure: {
      parameters: ["i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ubidi_open: {
      parameters: [],
      result: "pointer",
    },
    ubidi_openSized: {
      parameters: ["i32", "i32", "pointer"],
      result: "pointer",
    },
    ubidi_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ubidi_setInverse: {
      parameters: ["pointer", "i8"],
      result: "void",
    },
    ubidi_isInverse: {
      parameters: ["pointer"],
      result: "i8",
    },
    ubidi_orderParagraphsLTR: {
      parameters: ["pointer", "i8"],
      result: "void",
    },
    ubidi_isOrderParagraphsLTR: {
      parameters: ["pointer"],
      result: "i8",
    },
    ubidi_setReorderingMode: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    ubidi_getReorderingMode: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubidi_setReorderingOptions: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    ubidi_getReorderingOptions: {
      parameters: ["pointer"],
      result: "u32",
    },
    ubidi_setContext: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "void",
    },
    ubidi_setPara: {
      parameters: ["pointer", "pointer", "i32", "u8", "pointer", "pointer"],
      result: "void",
    },
    ubidi_setLine: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer"],
      result: "void",
    },
    ubidi_getDirection: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubidi_getBaseDirection: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ubidi_getText: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ubidi_getLength: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubidi_getParaLevel: {
      parameters: ["pointer"],
      result: "u8",
    },
    ubidi_countParagraphs: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubidi_getParagraph: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ubidi_getParagraphByIndex: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ubidi_getLevelAt: {
      parameters: ["pointer", "i32"],
      result: "u8",
    },
    ubidi_getLevels: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ubidi_getLogicalRun: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    ubidi_countRuns: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ubidi_getVisualRun: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    ubidi_getVisualIndex: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ubidi_getLogicalIndex: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ubidi_getLogicalMap: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ubidi_getVisualMap: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ubidi_reorderLogical: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    ubidi_reorderVisual: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    ubidi_invertMap: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    ubidi_getProcessedLength: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubidi_getResultLength: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubidi_getCustomizedClass: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ubidi_setClassCallback: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ubidi_getClassCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ubidi_writeReordered: {
      parameters: ["pointer", "pointer", "i32", "u16", "pointer"],
      result: "i32",
    },
    ubidi_writeReverse: {
      parameters: ["pointer", "i32", "pointer", "i32", "u16", "pointer"],
      result: "i32",
    },
    ubiditransform_transform: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "u8", "i32", "u8", "i32", "i32", "u32", "pointer"],
      result: "u32",
    },
    ubiditransform_open: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ubiditransform_close: {
      parameters: ["pointer"],
      result: "void",
    },
    utext_close: {
      parameters: ["pointer"],
      result: "pointer",
    },
    utext_openUTF8: {
      parameters: ["pointer", "buffer", "i64", "pointer"],
      result: "pointer",
    },
    utext_openUChars: {
      parameters: ["pointer", "pointer", "i64", "pointer"],
      result: "pointer",
    },
    utext_clone: {
      parameters: ["pointer", "pointer", "i8", "i8", "pointer"],
      result: "pointer",
    },
    utext_equals: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    utext_nativeLength: {
      parameters: ["pointer"],
      result: "i64",
    },
    utext_isLengthExpensive: {
      parameters: ["pointer"],
      result: "i8",
    },
    utext_char32At: {
      parameters: ["pointer", "i64"],
      result: "i32",
    },
    utext_current32: {
      parameters: ["pointer"],
      result: "i32",
    },
    utext_next32: {
      parameters: ["pointer"],
      result: "i32",
    },
    utext_previous32: {
      parameters: ["pointer"],
      result: "i32",
    },
    utext_next32From: {
      parameters: ["pointer", "i64"],
      result: "i32",
    },
    utext_previous32From: {
      parameters: ["pointer", "i64"],
      result: "i32",
    },
    utext_getNativeIndex: {
      parameters: ["pointer"],
      result: "i64",
    },
    utext_setNativeIndex: {
      parameters: ["pointer", "i64"],
      result: "void",
    },
    utext_moveIndex32: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    utext_getPreviousNativeIndex: {
      parameters: ["pointer"],
      result: "i64",
    },
    utext_extract: {
      parameters: ["pointer", "i64", "i64", "pointer", "i32", "pointer"],
      result: "i32",
    },
    utext_isWritable: {
      parameters: ["pointer"],
      result: "i8",
    },
    utext_hasMetaData: {
      parameters: ["pointer"],
      result: "i8",
    },
    utext_replace: {
      parameters: ["pointer", "i64", "i64", "pointer", "i32", "pointer"],
      result: "i32",
    },
    utext_copy: {
      parameters: ["pointer", "i64", "i64", "i64", "i8", "pointer"],
      result: "void",
    },
    utext_freeze: {
      parameters: ["pointer"],
      result: "void",
    },
    utext_setup: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    uset_openEmpty: {
      parameters: [],
      result: "pointer",
    },
    uset_open: {
      parameters: ["i32", "i32"],
      result: "pointer",
    },
    uset_openPattern: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    uset_openPatternOptions: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "pointer",
    },
    uset_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uset_clone: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uset_isFrozen: {
      parameters: ["pointer"],
      result: "i8",
    },
    uset_freeze: {
      parameters: ["pointer"],
      result: "void",
    },
    uset_cloneAsThawed: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uset_set: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    uset_applyPattern: {
      parameters: ["pointer", "pointer", "i32", "u32", "pointer"],
      result: "i32",
    },
    uset_applyIntPropertyValue: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    uset_applyPropertyAlias: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "void",
    },
    uset_resemblesPattern: {
      parameters: ["pointer", "i32", "i32"],
      result: "i8",
    },
    uset_toPattern: {
      parameters: ["pointer", "pointer", "i32", "i8", "pointer"],
      result: "i32",
    },
    uset_add: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    uset_addAll: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    uset_addRange: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    uset_addString: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    uset_addAllCodePoints: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    uset_remove: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    uset_removeRange: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    uset_removeString: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    uset_removeAll: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    uset_retain: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    uset_retainAll: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    uset_compact: {
      parameters: ["pointer"],
      result: "void",
    },
    uset_complement: {
      parameters: ["pointer"],
      result: "void",
    },
    uset_complementAll: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    uset_clear: {
      parameters: ["pointer"],
      result: "void",
    },
    uset_closeOver: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    uset_removeAllStrings: {
      parameters: ["pointer"],
      result: "void",
    },
    uset_isEmpty: {
      parameters: ["pointer"],
      result: "i8",
    },
    uset_contains: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    uset_containsRange: {
      parameters: ["pointer", "i32", "i32"],
      result: "i8",
    },
    uset_containsString: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i8",
    },
    uset_indexOf: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    uset_charAt: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    uset_size: {
      parameters: ["pointer"],
      result: "i32",
    },
    uset_getItemCount: {
      parameters: ["pointer"],
      result: "i32",
    },
    uset_getItem: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uset_containsAll: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uset_containsAllCodePoints: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i8",
    },
    uset_containsNone: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uset_containsSome: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uset_span: {
      parameters: ["pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    uset_spanBack: {
      parameters: ["pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    uset_spanUTF8: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    uset_spanBackUTF8: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    uset_equals: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uset_serialize: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uset_getSerializedSet: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i8",
    },
    uset_setSerializedToOne: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    uset_serializedContains: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    uset_getSerializedRangeCount: {
      parameters: ["pointer"],
      result: "i32",
    },
    uset_getSerializedRange: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i8",
    },
    unorm2_getNFCInstance: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unorm2_getNFDInstance: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unorm2_getNFKCInstance: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unorm2_getNFKDInstance: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unorm2_getNFKCCasefoldInstance: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unorm2_getInstance: {
      parameters: ["buffer", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    unorm2_openFiltered: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    unorm2_close: {
      parameters: ["pointer"],
      result: "void",
    },
    unorm2_normalize: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_normalizeSecondAndAppend: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_append: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_getDecomposition: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_getRawDecomposition: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_composePair: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    unorm2_getCombiningClass: {
      parameters: ["pointer", "i32"],
      result: "u8",
    },
    unorm2_isNormalized: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i8",
    },
    unorm2_quickCheck: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_spanQuickCheckYes: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unorm2_hasBoundaryBefore: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    unorm2_hasBoundaryAfter: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    unorm2_isInert: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    unorm_compare: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32", "pointer"],
      result: "i32",
    },
    ucnvsel_open: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    ucnvsel_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucnvsel_openFromSerialized: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    ucnvsel_serialize: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucnvsel_selectForString: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    ucnvsel_selectForUTF8: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    u_charsToUChars: {
      parameters: ["buffer", "pointer", "i32"],
      result: "void",
    },
    u_UCharsToChars: {
      parameters: ["pointer", "buffer", "i32"],
      result: "void",
    },
    u_strlen: {
      parameters: ["pointer"],
      result: "i32",
    },
    u_countChar32: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    u_strHasMoreChar32Than: {
      parameters: ["pointer", "i32", "i32"],
      result: "i8",
    },
    u_strcat: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    u_strncat: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    u_strstr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    u_strFindFirst: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    u_strchr: {
      parameters: ["pointer", "u16"],
      result: "pointer",
    },
    u_strchr32: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    u_strrstr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    u_strFindLast: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    u_strrchr: {
      parameters: ["pointer", "u16"],
      result: "pointer",
    },
    u_strrchr32: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    u_strpbrk: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    u_strcspn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    u_strspn: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    u_strtok_r: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    u_strcmp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    u_strcmpCodePointOrder: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    u_strCompare: {
      parameters: ["pointer", "i32", "pointer", "i32", "i8"],
      result: "i32",
    },
    u_strCompareIter: {
      parameters: ["pointer", "pointer", "i8"],
      result: "i32",
    },
    u_strCaseCompare: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32", "pointer"],
      result: "i32",
    },
    u_strncmp: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    u_strncmpCodePointOrder: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    u_strcasecmp: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    u_strncasecmp: {
      parameters: ["pointer", "pointer", "i32", "u32"],
      result: "i32",
    },
    u_memcasecmp: {
      parameters: ["pointer", "pointer", "i32", "u32"],
      result: "i32",
    },
    u_strcpy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    u_strncpy: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    u_uastrcpy: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    u_uastrncpy: {
      parameters: ["pointer", "buffer", "i32"],
      result: "pointer",
    },
    u_austrcpy: {
      parameters: ["buffer", "pointer"],
      result: "buffer",
    },
    u_austrncpy: {
      parameters: ["buffer", "pointer", "i32"],
      result: "buffer",
    },
    u_memcpy: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    u_memmove: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    u_memset: {
      parameters: ["pointer", "u16", "i32"],
      result: "pointer",
    },
    u_memcmp: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    u_memcmpCodePointOrder: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    u_memchr: {
      parameters: ["pointer", "u16", "i32"],
      result: "pointer",
    },
    u_memchr32: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    u_memrchr: {
      parameters: ["pointer", "u16", "i32"],
      result: "pointer",
    },
    u_memrchr32: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    u_unescape: {
      parameters: ["buffer", "pointer", "i32"],
      result: "i32",
    },
    u_unescapeAt: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    u_strToUpper: {
      parameters: ["pointer", "i32", "pointer", "i32", "buffer", "pointer"],
      result: "i32",
    },
    u_strToLower: {
      parameters: ["pointer", "i32", "pointer", "i32", "buffer", "pointer"],
      result: "i32",
    },
    u_strToTitle: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    u_strFoldCase: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32", "pointer"],
      result: "i32",
    },
    u_strToWCS: {
      parameters: ["buffer", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "buffer",
    },
    u_strFromWCS: {
      parameters: ["pointer", "i32", "pointer", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    u_strToUTF8: {
      parameters: ["buffer", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "buffer",
    },
    u_strFromUTF8: {
      parameters: ["pointer", "i32", "pointer", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    u_strToUTF8WithSub: {
      parameters: ["buffer", "i32", "pointer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "buffer",
    },
    u_strFromUTF8WithSub: {
      parameters: ["pointer", "i32", "pointer", "buffer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    u_strFromUTF8Lenient: {
      parameters: ["pointer", "i32", "pointer", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    u_strToUTF32: {
      parameters: ["pointer", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    u_strFromUTF32: {
      parameters: ["pointer", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    u_strToUTF32WithSub: {
      parameters: ["pointer", "i32", "pointer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    u_strFromUTF32WithSub: {
      parameters: ["pointer", "i32", "pointer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    u_strToJavaModifiedUTF8: {
      parameters: ["buffer", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "buffer",
    },
    u_strFromJavaModifiedUTF8WithSub: {
      parameters: ["pointer", "i32", "pointer", "buffer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ucasemap_open: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    ucasemap_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucasemap_getLocale: {
      parameters: ["pointer"],
      result: "buffer",
    },
    ucasemap_getOptions: {
      parameters: ["pointer"],
      result: "u32",
    },
    ucasemap_setLocale: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "void",
    },
    ucasemap_setOptions: {
      parameters: ["pointer", "u32", "pointer"],
      result: "void",
    },
    ucasemap_getBreakIterator: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucasemap_setBreakIterator: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ucasemap_toTitle: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucasemap_utf8ToLower: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucasemap_utf8ToUpper: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucasemap_utf8ToTitle: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucasemap_utf8FoldCase: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    usprep_open: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    usprep_openByType: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    usprep_close: {
      parameters: ["pointer"],
      result: "void",
    },
    usprep_prepare: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_openUTS46: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    uidna_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uidna_labelToASCII: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_labelToUnicode: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_nameToASCII: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_nameToUnicode: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_labelToASCII_UTF8: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_labelToUnicodeUTF8: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_nameToASCII_UTF8: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uidna_nameToUnicodeUTF8: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    ubrk_open: {
      parameters: ["i32", "buffer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    ubrk_openRules: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ubrk_openBinaryRules: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    ubrk_safeClone: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ubrk_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ubrk_setText: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ubrk_setUText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ubrk_current: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubrk_next: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubrk_previous: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubrk_first: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubrk_last: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubrk_preceding: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ubrk_following: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ubrk_getAvailable: {
      parameters: ["i32"],
      result: "buffer",
    },
    ubrk_countAvailable: {
      parameters: [],
      result: "i32",
    },
    ubrk_isBoundary: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    ubrk_getRuleStatus: {
      parameters: ["pointer"],
      result: "i32",
    },
    ubrk_getRuleStatusVec: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ubrk_getLocaleByType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "buffer",
    },
    ubrk_refreshUText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ubrk_getBinaryRules: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    u_getDataVersion: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ucal_openTimeZoneIDEnumeration: {
      parameters: ["i32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ucal_openTimeZones: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucal_openCountryTimeZones: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ucal_getDefaultTimeZone: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_setDefaultTimeZone: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ucal_getHostTimeZone: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_getDSTSavings: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucal_getNow: {
      parameters: [],
      result: "f64",
    },
    ucal_open: {
      parameters: ["pointer", "i32", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    ucal_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucal_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ucal_setTimeZone: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ucal_getTimeZoneID: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_getTimeZoneDisplayName: {
      parameters: ["pointer", "i32", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_inDaylightTime: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    ucal_setGregorianChange: {
      parameters: ["pointer", "f64", "pointer"],
      result: "void",
    },
    ucal_getGregorianChange: {
      parameters: ["pointer", "pointer"],
      result: "f64",
    },
    ucal_getAttribute: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ucal_setAttribute: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    ucal_getAvailable: {
      parameters: ["i32"],
      result: "buffer",
    },
    ucal_countAvailable: {
      parameters: [],
      result: "i32",
    },
    ucal_getMillis: {
      parameters: ["pointer", "pointer"],
      result: "f64",
    },
    ucal_setMillis: {
      parameters: ["pointer", "f64", "pointer"],
      result: "void",
    },
    ucal_setDate: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    ucal_setDateTime: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    ucal_equivalentTo: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    ucal_add: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucal_roll: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucal_get: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_set: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    ucal_isSet: {
      parameters: ["pointer", "i32"],
      result: "i8",
    },
    ucal_clearField: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    ucal_clear: {
      parameters: ["pointer"],
      result: "void",
    },
    ucal_getLimit: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    ucal_getLocaleByType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "buffer",
    },
    ucal_getTZDataVersion: {
      parameters: ["pointer"],
      result: "buffer",
    },
    ucal_getCanonicalTimeZoneID: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    ucal_getType: {
      parameters: ["pointer", "pointer"],
      result: "buffer",
    },
    ucal_getKeywordValuesForLocale: {
      parameters: ["buffer", "buffer", "i8", "pointer"],
      result: "pointer",
    },
    ucal_getDayOfWeekType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_getWeekendTransition: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_isWeekend: {
      parameters: ["pointer", "f64", "pointer"],
      result: "i8",
    },
    ucal_getFieldDifference: {
      parameters: ["pointer", "f64", "i32", "pointer"],
      result: "i32",
    },
    ucal_getTimeZoneTransitionDate: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i8",
    },
    ucal_getWindowsTimeZoneID: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucal_getTimeZoneIDForWindowsID: {
      parameters: ["pointer", "i32", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ucol_openRules: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ucol_getContractionsAndExpansions: {
      parameters: ["pointer", "pointer", "pointer", "i8", "pointer"],
      result: "void",
    },
    ucol_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucol_strcoll: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    ucol_strcollUTF8: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    ucol_greater: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "i8",
    },
    ucol_greaterOrEqual: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "i8",
    },
    ucol_equal: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "i8",
    },
    ucol_strcollIter: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ucol_getStrength: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucol_setStrength: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    ucol_getReorderCodes: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_setReorderCodes: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ucol_getEquivalentReorderCodes: {
      parameters: ["i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_getDisplayName: {
      parameters: ["buffer", "buffer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_getAvailable: {
      parameters: ["i32"],
      result: "buffer",
    },
    ucol_countAvailable: {
      parameters: [],
      result: "i32",
    },
    ucol_openAvailableLocales: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucol_getKeywords: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucol_getKeywordValues: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ucol_getKeywordValuesForLocale: {
      parameters: ["buffer", "buffer", "i8", "pointer"],
      result: "pointer",
    },
    ucol_getFunctionalEquivalent: {
      parameters: ["buffer", "i32", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    ucol_getRules: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ucol_getSortKey: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    ucol_nextSortKeyPart: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_getBound: {
      parameters: ["pointer", "i32", "i32", "u32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_getVersion: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ucol_getUCAVersion: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ucol_mergeSortkeys: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    ucol_setAttribute: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucol_getAttribute: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_setMaxVariable: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    ucol_getMaxVariable: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucol_getVariableTop: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ucol_safeClone: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ucol_getRulesEx: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    ucol_getLocaleByType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "buffer",
    },
    ucol_getTailoredSet: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ucol_cloneBinary: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucol_openBinary: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    ucol_openElements: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    ucol_keyHashCode: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ucol_closeElements: {
      parameters: ["pointer"],
      result: "void",
    },
    ucol_reset: {
      parameters: ["pointer"],
      result: "void",
    },
    ucol_next: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucol_previous: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucol_getMaxExpansion: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ucol_setText: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    ucol_getOffset: {
      parameters: ["pointer"],
      result: "i32",
    },
    ucol_setOffset: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    ucol_primaryOrder: {
      parameters: ["i32"],
      result: "i32",
    },
    ucol_secondaryOrder: {
      parameters: ["i32"],
      result: "i32",
    },
    ucol_tertiaryOrder: {
      parameters: ["i32"],
      result: "i32",
    },
    ucsdet_open: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucsdet_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucsdet_setText: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "void",
    },
    ucsdet_setDeclaredEncoding: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "void",
    },
    ucsdet_detect: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ucsdet_detectAll: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ucsdet_getName: {
      parameters: ["pointer", "pointer"],
      result: "buffer",
    },
    ucsdet_getConfidence: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucsdet_getLanguage: {
      parameters: ["pointer", "pointer"],
      result: "buffer",
    },
    ucsdet_getUChars: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ucsdet_getAllDetectableCharsets: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ucsdet_isInputFilterEnabled: {
      parameters: ["pointer"],
      result: "i8",
    },
    ucsdet_enableInputFilter: {
      parameters: ["pointer", "i8"],
      result: "i8",
    },
    ufieldpositer_open: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ufieldpositer_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ufieldpositer_next: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ufmt_open: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ufmt_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ufmt_getType: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ufmt_isNumeric: {
      parameters: ["pointer"],
      result: "i8",
    },
    ufmt_getDate: {
      parameters: ["pointer", "pointer"],
      result: "f64",
    },
    ufmt_getDouble: {
      parameters: ["pointer", "pointer"],
      result: "f64",
    },
    ufmt_getLong: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ufmt_getInt64: {
      parameters: ["pointer", "pointer"],
      result: "i64",
    },
    ufmt_getObject: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ufmt_getUChars: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ufmt_getArrayLength: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ufmt_getArrayItemByIndex: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    ufmt_getDecNumChars: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "buffer",
    },
    ucfpos_open: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ucfpos_reset: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ucfpos_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ucfpos_constrainCategory: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    ucfpos_constrainField: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    ucfpos_getCategory: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucfpos_getField: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ucfpos_getIndexes: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ucfpos_getInt64IterationContext: {
      parameters: ["pointer", "pointer"],
      result: "i64",
    },
    ucfpos_setInt64IterationContext: {
      parameters: ["pointer", "i64", "pointer"],
      result: "void",
    },
    ucfpos_matchesField: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "i8",
    },
    ucfpos_setState: {
      parameters: ["pointer", "i32", "i32", "i32", "i32", "pointer"],
      result: "void",
    },
    ufmtval_getString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ufmtval_nextPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i8",
    },
    udtitvfmt_open: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    udtitvfmt_close: {
      parameters: ["pointer"],
      result: "void",
    },
    udtitvfmt_openResult: {
      parameters: ["pointer"],
      result: "pointer",
    },
    udtitvfmt_resultAsValue: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udtitvfmt_closeResult: {
      parameters: ["pointer"],
      result: "void",
    },
    udtitvfmt_format: {
      parameters: ["pointer", "f64", "f64", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    ugender_getInstance: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ugender_getListGender: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ulistfmt_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ulistfmt_openForType: {
      parameters: ["buffer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    ulistfmt_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ulistfmt_openResult: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ulistfmt_resultAsValue: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ulistfmt_closeResult: {
      parameters: ["pointer"],
      result: "void",
    },
    ulistfmt_format: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ulistfmt_formatStringsToResult: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    ulocdata_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ulocdata_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ulocdata_setNoSubstitute: {
      parameters: ["pointer", "i8"],
      result: "void",
    },
    ulocdata_getNoSubstitute: {
      parameters: ["pointer"],
      result: "i8",
    },
    ulocdata_getExemplarSet: {
      parameters: ["pointer", "pointer", "u32", "i32", "pointer"],
      result: "pointer",
    },
    ulocdata_getDelimiter: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ulocdata_getMeasurementSystem: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    ulocdata_getPaperSize: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ulocdata_getCLDRVersion: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ulocdata_getLocaleDisplayPattern: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ulocdata_getLocaleSeparator: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    u_formatMessage: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    u_vformatMessage: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    u_parseMessage: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "void",
    },
    u_vparseMessage: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    u_formatMessageWithError: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    u_vformatMessageWithError: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    u_parseMessageWithError: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    u_vparseMessageWithError: {
      parameters: ["buffer", "pointer", "i32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "void",
    },
    umsg_open: {
      parameters: ["pointer", "i32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    umsg_close: {
      parameters: ["pointer"],
      result: "void",
    },
    umsg_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    umsg_setLocale: {
      parameters: ["pointer", "buffer"],
      result: "void",
    },
    umsg_getLocale: {
      parameters: ["pointer"],
      result: "buffer",
    },
    umsg_applyPattern: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    umsg_toPattern: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    umsg_format: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    umsg_vformat: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    umsg_parse: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    umsg_vparse: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "void",
    },
    umsg_autoQuoteApostrophe: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unum_open: {
      parameters: ["i32", "pointer", "i32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    unum_close: {
      parameters: ["pointer"],
      result: "void",
    },
    unum_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    unum_format: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_formatInt64: {
      parameters: ["pointer", "i64", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_formatDouble: {
      parameters: ["pointer", "f64", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_formatDoubleForFields: {
      parameters: ["pointer", "f64", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_formatDecimal: {
      parameters: ["pointer", "buffer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_formatDoubleCurrency: {
      parameters: ["pointer", "f64", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_formatUFormattable: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_parse: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    unum_parseInt64: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i64",
    },
    unum_parseDouble: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "f64",
    },
    unum_parseDecimal: {
      parameters: ["pointer", "pointer", "i32", "pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    unum_parseDoubleCurrency: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "f64",
    },
    unum_parseToUFormattable: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    unum_applyPattern: {
      parameters: ["pointer", "i8", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    unum_getAvailable: {
      parameters: ["i32"],
      result: "buffer",
    },
    unum_countAvailable: {
      parameters: [],
      result: "i32",
    },
    unum_getAttribute: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    unum_setAttribute: {
      parameters: ["pointer", "i32", "i32"],
      result: "void",
    },
    unum_getDoubleAttribute: {
      parameters: ["pointer", "i32"],
      result: "f64",
    },
    unum_setDoubleAttribute: {
      parameters: ["pointer", "i32", "f64"],
      result: "void",
    },
    unum_getTextAttribute: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unum_setTextAttribute: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "void",
    },
    unum_toPattern: {
      parameters: ["pointer", "i8", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unum_getSymbol: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unum_setSymbol: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "void",
    },
    unum_getLocaleByType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "buffer",
    },
    unum_setContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    unum_getContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    udat_toCalendarDateField: {
      parameters: ["i32"],
      result: "i32",
    },
    udat_open: {
      parameters: ["i32", "i32", "buffer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    udat_close: {
      parameters: ["pointer"],
      result: "void",
    },
    udat_getBooleanAttribute: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i8",
    },
    udat_setBooleanAttribute: {
      parameters: ["pointer", "i32", "i8", "pointer"],
      result: "void",
    },
    udat_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udat_format: {
      parameters: ["pointer", "f64", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    udat_formatCalendar: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    udat_formatForFields: {
      parameters: ["pointer", "f64", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    udat_formatCalendarForFields: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    udat_parse: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "f64",
    },
    udat_parseCalendar: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    udat_isLenient: {
      parameters: ["pointer"],
      result: "i8",
    },
    udat_setLenient: {
      parameters: ["pointer", "i8"],
      result: "void",
    },
    udat_getCalendar: {
      parameters: ["pointer"],
      result: "pointer",
    },
    udat_setCalendar: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    udat_getNumberFormat: {
      parameters: ["pointer"],
      result: "pointer",
    },
    udat_getNumberFormatForField: {
      parameters: ["pointer", "u16"],
      result: "pointer",
    },
    udat_adoptNumberFormatForFields: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    udat_setNumberFormat: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    udat_adoptNumberFormat: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    udat_getAvailable: {
      parameters: ["i32"],
      result: "buffer",
    },
    udat_countAvailable: {
      parameters: [],
      result: "i32",
    },
    udat_get2DigitYearStart: {
      parameters: ["pointer", "pointer"],
      result: "f64",
    },
    udat_set2DigitYearStart: {
      parameters: ["pointer", "f64", "pointer"],
      result: "void",
    },
    udat_toPattern: {
      parameters: ["pointer", "i8", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udat_applyPattern: {
      parameters: ["pointer", "i8", "pointer", "i32"],
      result: "void",
    },
    udat_getSymbols: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udat_countSymbols: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    udat_setSymbols: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "void",
    },
    udat_getLocaleByType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "buffer",
    },
    udat_setContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    udat_getContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    udatpg_openEmpty: {
      parameters: ["pointer"],
      result: "pointer",
    },
    udatpg_close: {
      parameters: ["pointer"],
      result: "void",
    },
    udatpg_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udatpg_getBestPattern: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_getBestPatternWithOptions: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_getSkeleton: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_getBaseSkeleton: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_addPattern: {
      parameters: ["pointer", "pointer", "i32", "i8", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    udatpg_setAppendItemFormat: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "void",
    },
    udatpg_getAppendItemFormat: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    udatpg_setAppendItemName: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "void",
    },
    udatpg_getAppendItemName: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    udatpg_getFieldDisplayName: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_setDateTimeFormat: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    udatpg_getDateTimeFormat: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udatpg_setDecimal: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    udatpg_getDecimal: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udatpg_replaceFieldTypes: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_replaceFieldTypesWithOptions: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    udatpg_openSkeletons: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udatpg_openBaseSkeletons: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    udatpg_getPatternForSkeleton: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    unumf_openForSkeletonAndLocale: {
      parameters: ["pointer", "i32", "buffer", "pointer"],
      result: "pointer",
    },
    unumf_openForSkeletonAndLocaleWithError: {
      parameters: ["pointer", "i32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    unumf_openResult: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unumf_formatInt: {
      parameters: ["pointer", "i64", "pointer", "pointer"],
      result: "void",
    },
    unumf_formatDouble: {
      parameters: ["pointer", "f64", "pointer", "pointer"],
      result: "void",
    },
    unumf_formatDecimal: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "void",
    },
    unumf_resultAsValue: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    unumf_resultToString: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    unumf_resultNextFieldPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i8",
    },
    unumf_resultGetAllFieldPositions: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    unumf_close: {
      parameters: ["pointer"],
      result: "void",
    },
    unumf_closeResult: {
      parameters: ["pointer"],
      result: "void",
    },
    unumsys_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    unumsys_openByName: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    unumsys_close: {
      parameters: ["pointer"],
      result: "void",
    },
    unumsys_openAvailableNames: {
      parameters: ["pointer"],
      result: "pointer",
    },
    unumsys_getName: {
      parameters: ["pointer"],
      result: "buffer",
    },
    unumsys_isAlgorithmic: {
      parameters: ["pointer"],
      result: "i8",
    },
    unumsys_getRadix: {
      parameters: ["pointer"],
      result: "i32",
    },
    unumsys_getDescription: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uplrules_open: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    uplrules_openForType: {
      parameters: ["buffer", "i32", "pointer"],
      result: "pointer",
    },
    uplrules_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uplrules_select: {
      parameters: ["pointer", "f64", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uplrules_selectFormatted: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uplrules_getKeywords: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uregex_open: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_openUText: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_openC: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uregex_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uregex_pattern: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_patternUText: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uregex_flags: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uregex_setText: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    uregex_setUText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    uregex_getText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_getUText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_refreshUText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    uregex_matches: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i8",
    },
    uregex_matches64: {
      parameters: ["pointer", "i64", "pointer"],
      result: "i8",
    },
    uregex_lookingAt: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i8",
    },
    uregex_lookingAt64: {
      parameters: ["pointer", "i64", "pointer"],
      result: "i8",
    },
    uregex_find: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i8",
    },
    uregex_find64: {
      parameters: ["pointer", "i64", "pointer"],
      result: "i8",
    },
    uregex_findNext: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregex_groupCount: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uregex_groupNumberFromName: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_groupNumberFromCName: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uregex_group: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_groupUText: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_start: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_start64: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i64",
    },
    uregex_end: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_end64: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i64",
    },
    uregex_reset: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    uregex_reset64: {
      parameters: ["pointer", "i64", "pointer"],
      result: "void",
    },
    uregex_setRegion: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    uregex_setRegion64: {
      parameters: ["pointer", "i64", "i64", "pointer"],
      result: "void",
    },
    uregex_setRegionAndStart: {
      parameters: ["pointer", "i64", "i64", "i64", "pointer"],
      result: "void",
    },
    uregex_regionStart: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uregex_regionStart64: {
      parameters: ["pointer", "pointer"],
      result: "i64",
    },
    uregex_regionEnd: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uregex_regionEnd64: {
      parameters: ["pointer", "pointer"],
      result: "i64",
    },
    uregex_hasTransparentBounds: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregex_useTransparentBounds: {
      parameters: ["pointer", "i8", "pointer"],
      result: "void",
    },
    uregex_hasAnchoringBounds: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregex_useAnchoringBounds: {
      parameters: ["pointer", "i8", "pointer"],
      result: "void",
    },
    uregex_hitEnd: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregex_requireEnd: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregex_replaceAll: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_replaceAllUText: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_replaceFirst: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_replaceFirstUText: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_appendReplacement: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    uregex_appendReplacementUText: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    uregex_appendTail: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    uregex_appendTailUText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uregex_split: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_splitUText: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uregex_setTimeLimit: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    uregex_getTimeLimit: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uregex_setStackLimit: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    uregex_getStackLimit: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uregex_setMatchCallback: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    uregex_getMatchCallback: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    uregex_setFindProgressCallback: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    uregex_getFindProgressCallback: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    uregion_getRegionFromCode: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    uregion_getRegionFromNumericCode: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    uregion_getAvailable: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    uregion_areEqual: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregion_getContainingRegion: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uregion_getContainingRegionOfType: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    uregion_getContainedRegions: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uregion_getContainedRegionsOfType: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    uregion_contains: {
      parameters: ["pointer", "pointer"],
      result: "i8",
    },
    uregion_getPreferredValues: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uregion_getRegionCode: {
      parameters: ["pointer"],
      result: "buffer",
    },
    uregion_getNumericCode: {
      parameters: ["pointer"],
      result: "i32",
    },
    uregion_getType: {
      parameters: ["pointer"],
      result: "i32",
    },
    ureldatefmt_open: {
      parameters: ["buffer", "pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    ureldatefmt_close: {
      parameters: ["pointer"],
      result: "void",
    },
    ureldatefmt_openResult: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ureldatefmt_resultAsValue: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ureldatefmt_closeResult: {
      parameters: ["pointer"],
      result: "void",
    },
    ureldatefmt_formatNumeric: {
      parameters: ["pointer", "f64", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ureldatefmt_formatNumericToResult: {
      parameters: ["pointer", "f64", "i32", "pointer", "pointer"],
      result: "void",
    },
    ureldatefmt_format: {
      parameters: ["pointer", "f64", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    ureldatefmt_formatToResult: {
      parameters: ["pointer", "f64", "i32", "pointer", "pointer"],
      result: "void",
    },
    ureldatefmt_combineDateAndTime: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    usearch_open: {
      parameters: ["pointer", "i32", "pointer", "i32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    usearch_openFromCollator: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    usearch_close: {
      parameters: ["pointer"],
      result: "void",
    },
    usearch_setOffset: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    usearch_getOffset: {
      parameters: ["pointer"],
      result: "i32",
    },
    usearch_setAttribute: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "void",
    },
    usearch_getAttribute: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    usearch_getMatchedStart: {
      parameters: ["pointer"],
      result: "i32",
    },
    usearch_getMatchedLength: {
      parameters: ["pointer"],
      result: "i32",
    },
    usearch_getMatchedText: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    usearch_setBreakIterator: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    usearch_getBreakIterator: {
      parameters: ["pointer"],
      result: "pointer",
    },
    usearch_setText: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    usearch_getText: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    usearch_getCollator: {
      parameters: ["pointer"],
      result: "pointer",
    },
    usearch_setCollator: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    usearch_setPattern: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    usearch_getPattern: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    usearch_first: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    usearch_following: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    usearch_last: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    usearch_preceding: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    usearch_next: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    usearch_previous: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    usearch_reset: {
      parameters: ["pointer"],
      result: "void",
    },
    uspoof_open: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uspoof_openFromSerialized: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    uspoof_openFromSource: {
      parameters: ["buffer", "i32", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    uspoof_close: {
      parameters: ["pointer"],
      result: "void",
    },
    uspoof_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uspoof_setChecks: {
      parameters: ["pointer", "i32", "pointer"],
      result: "void",
    },
    uspoof_getChecks: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uspoof_setRestrictionLevel: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    uspoof_getRestrictionLevel: {
      parameters: ["pointer"],
      result: "i32",
    },
    uspoof_setAllowedLocales: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "void",
    },
    uspoof_getAllowedLocales: {
      parameters: ["pointer", "pointer"],
      result: "buffer",
    },
    uspoof_setAllowedChars: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    uspoof_getAllowedChars: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uspoof_check: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uspoof_checkUTF8: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uspoof_check2: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uspoof_check2UTF8: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    uspoof_openCheckResult: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uspoof_closeCheckResult: {
      parameters: ["pointer"],
      result: "void",
    },
    uspoof_getCheckResultChecks: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uspoof_getCheckResultRestrictionLevel: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    uspoof_getCheckResultNumerics: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    uspoof_areConfusable: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uspoof_areConfusableUTF8: {
      parameters: ["pointer", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uspoof_getSkeleton: {
      parameters: ["pointer", "u32", "pointer", "i32", "pointer", "i32", "pointer"],
      result: "i32",
    },
    uspoof_getSkeletonUTF8: {
      parameters: ["pointer", "u32", "buffer", "i32", "buffer", "i32", "pointer"],
      result: "i32",
    },
    uspoof_getInclusionSet: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uspoof_getRecommendedSet: {
      parameters: ["pointer"],
      result: "pointer",
    },
    uspoof_serialize: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    utmscale_getTimeScaleValue: {
      parameters: ["i32", "i32", "pointer"],
      result: "i64",
    },
    utmscale_fromInt64: {
      parameters: ["i64", "i32", "pointer"],
      result: "i64",
    },
    utmscale_toInt64: {
      parameters: ["i64", "i32", "pointer"],
      result: "i64",
    },
    utrans_openU: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    utrans_openInverse: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    utrans_clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    utrans_close: {
      parameters: ["pointer"],
      result: "void",
    },
    utrans_getUnicodeID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    utrans_register: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    utrans_unregisterID: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    utrans_setFilter: {
      parameters: ["pointer", "pointer", "i32", "pointer"],
      result: "void",
    },
    utrans_countAvailableIDs: {
      parameters: [],
      result: "i32",
    },
    utrans_openIDs: {
      parameters: ["pointer"],
      result: "pointer",
    },
    utrans_trans: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    utrans_transIncremental: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    utrans_transUChars: {
      parameters: ["pointer", "pointer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "void",
    },
    utrans_transIncrementalUChars: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "void",
    },
    utrans_toRules: {
      parameters: ["pointer", "i8", "pointer", "i32", "pointer"],
      result: "i32",
    },
    utrans_getSourceSet: {
      parameters: ["pointer", "i8", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libbcp47mrm_dll = Deno.dlopen("bcp47mrm.dll", {
    GetDistanceOfClosestLanguageInList: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    IsWellFormedTag: {
      parameters: ["buffer"],
      result: "u8",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    IsTextUnicode: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetTextCharset(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): number /* i32 */ {
  return libGDI32_dll.GetTextCharset(util.toPointer(hdc));
}

export function GetTextCharsetInfo(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpSig: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libGDI32_dll.GetTextCharsetInfo(util.toPointer(hdc), util.toPointer(lpSig), dwFlags);
}

export function TranslateCharsetInfo(
  lpSrc: Deno.PointerValue | Uint8Array /* ptr */,
  lpCs: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: TRANSLATE_CHARSET_INFO_FLAGS /* Windows.Win32.Globalization.TRANSLATE_CHARSET_INFO_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.TranslateCharsetInfo(util.toPointer(lpSrc), util.toPointer(lpCs), dwFlags));
}

export function GetDateFormatA(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpDate: Deno.PointerValue | Uint8Array /* ptr */,
  lpFormat: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDateStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchDate: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetDateFormatA(Locale, dwFlags, util.toPointer(lpDate), util.pstrToFfi(lpFormat), util.pstrToFfi(lpDateStr), cchDate);
}

export function GetDateFormatW(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpDate: Deno.PointerValue | Uint8Array /* ptr */,
  lpFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDateStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDate: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetDateFormatW(Locale, dwFlags, util.toPointer(lpDate), util.pwstrToFfi(lpFormat), util.pwstrToFfi(lpDateStr), cchDate);
}

export function GetTimeFormatA(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpTime: Deno.PointerValue | Uint8Array /* ptr */,
  lpFormat: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpTimeStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchTime: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetTimeFormatA(Locale, dwFlags, util.toPointer(lpTime), util.pstrToFfi(lpFormat), util.pstrToFfi(lpTimeStr), cchTime);
}

export function GetTimeFormatW(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpTime: Deno.PointerValue | Uint8Array /* ptr */,
  lpFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpTimeStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchTime: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetTimeFormatW(Locale, dwFlags, util.toPointer(lpTime), util.pwstrToFfi(lpFormat), util.pwstrToFfi(lpTimeStr), cchTime);
}

export function GetTimeFormatEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: TIME_FORMAT_FLAGS /* Windows.Win32.Globalization.TIME_FORMAT_FLAGS */,
  lpTime: Deno.PointerValue | Uint8Array /* ptr */,
  lpFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpTimeStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchTime: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetTimeFormatEx(util.pwstrToFfi(lpLocaleName), dwFlags, util.toPointer(lpTime), util.pwstrToFfi(lpFormat), util.pwstrToFfi(lpTimeStr), cchTime);
}

export function GetDateFormatEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: ENUM_DATE_FORMATS_FLAGS /* Windows.Win32.Globalization.ENUM_DATE_FORMATS_FLAGS */,
  lpDate: Deno.PointerValue | Uint8Array /* ptr */,
  lpFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDateStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDate: number /* i32 */,
  lpCalendar: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.GetDateFormatEx(util.pwstrToFfi(lpLocaleName), dwFlags, util.toPointer(lpDate), util.pwstrToFfi(lpFormat), util.pwstrToFfi(lpDateStr), cchDate, util.pwstrToFfi(lpCalendar));
}

export function GetDurationFormatEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  lpDuration: Deno.PointerValue | Uint8Array /* ptr */,
  ullDuration: Deno.PointerValue /* u64 */,
  lpFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDurationStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDuration: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetDurationFormatEx(util.pwstrToFfi(lpLocaleName), dwFlags, util.toPointer(lpDuration), ullDuration, util.pwstrToFfi(lpFormat), util.pwstrToFfi(lpDurationStr), cchDuration);
}

export function CompareStringEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwCmpFlags: COMPARE_STRING_FLAGS /* Windows.Win32.Globalization.COMPARE_STRING_FLAGS */,
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCount1: number /* i32 */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCount2: number /* i32 */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libKERNEL32_dll.CompareStringEx(util.pwstrToFfi(lpLocaleName), dwCmpFlags, util.pwstrToFfi(lpString1), cchCount1, util.pwstrToFfi(lpString2), cchCount2, util.toPointer(lpVersionInformation), util.toPointer(lpReserved), util.toPointer(lParam));
}

export function CompareStringOrdinal(
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCount1: number /* i32 */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCount2: number /* i32 */,
  bIgnoreCase: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libKERNEL32_dll.CompareStringOrdinal(util.pwstrToFfi(lpString1), cchCount1, util.pwstrToFfi(lpString2), cchCount2, util.boolToFfi(bIgnoreCase));
}

export function CompareStringW(
  Locale: number /* u32 */,
  dwCmpFlags: number /* u32 */,
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCount1: number /* i32 */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCount2: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.CompareStringW(Locale, dwCmpFlags, util.pwstrToFfi(lpString1), cchCount1, util.pwstrToFfi(lpString2), cchCount2);
}

export function FoldStringW(
  dwMapFlags: FOLD_STRING_MAP_FLAGS /* Windows.Win32.Globalization.FOLD_STRING_MAP_FLAGS */,
  lpSrcStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSrc: number /* i32 */,
  lpDestStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDest: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.FoldStringW(dwMapFlags, util.pwstrToFfi(lpSrcStr), cchSrc, util.pwstrToFfi(lpDestStr), cchDest);
}

export function GetStringTypeExW(
  Locale: number /* u32 */,
  dwInfoType: number /* u32 */,
  lpSrcStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSrc: number /* i32 */,
  lpCharType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetStringTypeExW(Locale, dwInfoType, util.pwstrToFfi(lpSrcStr), cchSrc, util.toPointer(lpCharType)));
}

export function GetStringTypeW(
  dwInfoType: number /* u32 */,
  lpSrcStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSrc: number /* i32 */,
  lpCharType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetStringTypeW(dwInfoType, util.pwstrToFfi(lpSrcStr), cchSrc, util.toPointer(lpCharType)));
}

export function MultiByteToWideChar(
  CodePage: number /* u32 */,
  dwFlags: MULTI_BYTE_TO_WIDE_CHAR_FLAGS /* Windows.Win32.Globalization.MULTI_BYTE_TO_WIDE_CHAR_FLAGS */,
  lpMultiByteStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbMultiByte: number /* i32 */,
  lpWideCharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchWideChar: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.MultiByteToWideChar(CodePage, dwFlags, util.pstrToFfi(lpMultiByteStr), cbMultiByte, util.pwstrToFfi(lpWideCharStr), cchWideChar);
}

export function WideCharToMultiByte(
  CodePage: number /* u32 */,
  dwFlags: number /* u32 */,
  lpWideCharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchWideChar: number /* i32 */,
  lpMultiByteStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbMultiByte: number /* i32 */,
  lpDefaultChar: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpUsedDefaultChar: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.WideCharToMultiByte(CodePage, dwFlags, util.pwstrToFfi(lpWideCharStr), cchWideChar, util.pstrToFfi(lpMultiByteStr), cbMultiByte, util.pstrToFfi(lpDefaultChar), util.toPointer(lpUsedDefaultChar));
}

export function IsValidCodePage(
  CodePage: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsValidCodePage(CodePage));
}

export function GetACP(): number /* u32 */ {
  return libKERNEL32_dll.GetACP();
}

export function GetOEMCP(): number /* u32 */ {
  return libKERNEL32_dll.GetOEMCP();
}

export function GetCPInfo(
  CodePage: number /* u32 */,
  lpCPInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetCPInfo(CodePage, util.toPointer(lpCPInfo)));
}

export function GetCPInfoExA(
  CodePage: number /* u32 */,
  dwFlags: number /* u32 */,
  lpCPInfoEx: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetCPInfoExA(CodePage, dwFlags, util.toPointer(lpCPInfoEx)));
}

export function GetCPInfoExW(
  CodePage: number /* u32 */,
  dwFlags: number /* u32 */,
  lpCPInfoEx: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetCPInfoExW(CodePage, dwFlags, util.toPointer(lpCPInfoEx)));
}

export function CompareStringA(
  Locale: number /* u32 */,
  dwCmpFlags: number /* u32 */,
  lpString1: Deno.PointerValue | Uint8Array /* ptr */,
  cchCount1: number /* i32 */,
  lpString2: Deno.PointerValue | Uint8Array /* ptr */,
  cchCount2: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.CompareStringA(Locale, dwCmpFlags, util.toPointer(lpString1), cchCount1, util.toPointer(lpString2), cchCount2);
}

export function FindNLSString(
  Locale: number /* u32 */,
  dwFindNLSStringFlags: number /* u32 */,
  lpStringSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSource: number /* i32 */,
  lpStringValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchValue: number /* i32 */,
  pcchFound: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.FindNLSString(Locale, dwFindNLSStringFlags, util.pwstrToFfi(lpStringSource), cchSource, util.pwstrToFfi(lpStringValue), cchValue, util.toPointer(pcchFound));
}

export function LCMapStringW(
  Locale: number /* u32 */,
  dwMapFlags: number /* u32 */,
  lpSrcStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSrc: number /* i32 */,
  lpDestStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDest: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.LCMapStringW(Locale, dwMapFlags, util.pwstrToFfi(lpSrcStr), cchSrc, util.pwstrToFfi(lpDestStr), cchDest);
}

export function LCMapStringA(
  Locale: number /* u32 */,
  dwMapFlags: number /* u32 */,
  lpSrcStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchSrc: number /* i32 */,
  lpDestStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchDest: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.LCMapStringA(Locale, dwMapFlags, util.pstrToFfi(lpSrcStr), cchSrc, util.pstrToFfi(lpDestStr), cchDest);
}

export function GetLocaleInfoW(
  Locale: number /* u32 */,
  LCType: number /* u32 */,
  lpLCData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchData: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetLocaleInfoW(Locale, LCType, util.pwstrToFfi(lpLCData), cchData);
}

export function GetLocaleInfoA(
  Locale: number /* u32 */,
  LCType: number /* u32 */,
  lpLCData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchData: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetLocaleInfoA(Locale, LCType, util.pstrToFfi(lpLCData), cchData);
}

export function SetLocaleInfoA(
  Locale: number /* u32 */,
  LCType: number /* u32 */,
  lpLCData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetLocaleInfoA(Locale, LCType, util.pstrToFfi(lpLCData)));
}

export function SetLocaleInfoW(
  Locale: number /* u32 */,
  LCType: number /* u32 */,
  lpLCData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetLocaleInfoW(Locale, LCType, util.pwstrToFfi(lpLCData)));
}

export function GetCalendarInfoA(
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
  lpCalData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchData: number /* i32 */,
  lpValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.GetCalendarInfoA(Locale, Calendar, CalType, util.pstrToFfi(lpCalData), cchData, util.toPointer(lpValue));
}

export function GetCalendarInfoW(
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
  lpCalData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchData: number /* i32 */,
  lpValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.GetCalendarInfoW(Locale, Calendar, CalType, util.pwstrToFfi(lpCalData), cchData, util.toPointer(lpValue));
}

export function SetCalendarInfoA(
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
  lpCalData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetCalendarInfoA(Locale, Calendar, CalType, util.pstrToFfi(lpCalData)));
}

export function SetCalendarInfoW(
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
  lpCalData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetCalendarInfoW(Locale, Calendar, CalType, util.pwstrToFfi(lpCalData)));
}

export function IsDBCSLeadByte(
  TestChar: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsDBCSLeadByte(TestChar));
}

export function IsDBCSLeadByteEx(
  CodePage: number /* u32 */,
  TestChar: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsDBCSLeadByteEx(CodePage, TestChar));
}

export function LocaleNameToLCID(
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.LocaleNameToLCID(util.pwstrToFfi(lpName), dwFlags);
}

export function LCIDToLocaleName(
  Locale: number /* u32 */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchName: number /* i32 */,
  dwFlags: number /* u32 */,
): number /* i32 */ {
  return libKERNEL32_dll.LCIDToLocaleName(Locale, util.pwstrToFfi(lpName), cchName, dwFlags);
}

export function GetDurationFormat(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpDuration: Deno.PointerValue | Uint8Array /* ptr */,
  ullDuration: Deno.PointerValue /* u64 */,
  lpFormat: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDurationStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDuration: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetDurationFormat(Locale, dwFlags, util.toPointer(lpDuration), ullDuration, util.pwstrToFfi(lpFormat), util.pwstrToFfi(lpDurationStr), cchDuration);
}

export function GetNumberFormatA(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFormat: Deno.PointerValue | Uint8Array /* ptr */,
  lpNumberStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchNumber: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetNumberFormatA(Locale, dwFlags, util.pstrToFfi(lpValue), util.toPointer(lpFormat), util.pstrToFfi(lpNumberStr), cchNumber);
}

export function GetNumberFormatW(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFormat: Deno.PointerValue | Uint8Array /* ptr */,
  lpNumberStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchNumber: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetNumberFormatW(Locale, dwFlags, util.pwstrToFfi(lpValue), util.toPointer(lpFormat), util.pwstrToFfi(lpNumberStr), cchNumber);
}

export function GetCurrencyFormatA(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFormat: Deno.PointerValue | Uint8Array /* ptr */,
  lpCurrencyStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchCurrency: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetCurrencyFormatA(Locale, dwFlags, util.pstrToFfi(lpValue), util.toPointer(lpFormat), util.pstrToFfi(lpCurrencyStr), cchCurrency);
}

export function GetCurrencyFormatW(
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
  lpValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFormat: Deno.PointerValue | Uint8Array /* ptr */,
  lpCurrencyStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCurrency: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetCurrencyFormatW(Locale, dwFlags, util.pwstrToFfi(lpValue), util.toPointer(lpFormat), util.pwstrToFfi(lpCurrencyStr), cchCurrency);
}

export function EnumCalendarInfoA(
  lpCalInfoEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CALINFO_ENUMPROCA */,
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumCalendarInfoA(util.toPointer(lpCalInfoEnumProc), Locale, Calendar, CalType));
}

export function EnumCalendarInfoW(
  lpCalInfoEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CALINFO_ENUMPROCW */,
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumCalendarInfoW(util.toPointer(lpCalInfoEnumProc), Locale, Calendar, CalType));
}

export function EnumCalendarInfoExA(
  lpCalInfoEnumProcEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CALINFO_ENUMPROCEXA */,
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumCalendarInfoExA(util.toPointer(lpCalInfoEnumProcEx), Locale, Calendar, CalType));
}

export function EnumCalendarInfoExW(
  lpCalInfoEnumProcEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CALINFO_ENUMPROCEXW */,
  Locale: number /* u32 */,
  Calendar: number /* u32 */,
  CalType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumCalendarInfoExW(util.toPointer(lpCalInfoEnumProcEx), Locale, Calendar, CalType));
}

export function EnumTimeFormatsA(
  lpTimeFmtEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.TIMEFMT_ENUMPROCA */,
  Locale: number /* u32 */,
  dwFlags: TIME_FORMAT_FLAGS /* Windows.Win32.Globalization.TIME_FORMAT_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumTimeFormatsA(util.toPointer(lpTimeFmtEnumProc), Locale, dwFlags));
}

export function EnumTimeFormatsW(
  lpTimeFmtEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.TIMEFMT_ENUMPROCW */,
  Locale: number /* u32 */,
  dwFlags: TIME_FORMAT_FLAGS /* Windows.Win32.Globalization.TIME_FORMAT_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumTimeFormatsW(util.toPointer(lpTimeFmtEnumProc), Locale, dwFlags));
}

export function EnumDateFormatsA(
  lpDateFmtEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.DATEFMT_ENUMPROCA */,
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumDateFormatsA(util.toPointer(lpDateFmtEnumProc), Locale, dwFlags));
}

export function EnumDateFormatsW(
  lpDateFmtEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.DATEFMT_ENUMPROCW */,
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumDateFormatsW(util.toPointer(lpDateFmtEnumProc), Locale, dwFlags));
}

export function EnumDateFormatsExA(
  lpDateFmtEnumProcEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.DATEFMT_ENUMPROCEXA */,
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumDateFormatsExA(util.toPointer(lpDateFmtEnumProcEx), Locale, dwFlags));
}

export function EnumDateFormatsExW(
  lpDateFmtEnumProcEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.DATEFMT_ENUMPROCEXW */,
  Locale: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumDateFormatsExW(util.toPointer(lpDateFmtEnumProcEx), Locale, dwFlags));
}

export function IsValidLanguageGroup(
  LanguageGroup: number /* u32 */,
  dwFlags: ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS /* Windows.Win32.Globalization.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsValidLanguageGroup(LanguageGroup, dwFlags));
}

export function GetNLSVersion(
  Function: number /* u32 */,
  Locale: number /* u32 */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNLSVersion(Function, Locale, util.toPointer(lpVersionInformation)));
}

export function IsValidLocale(
  Locale: number /* u32 */,
  dwFlags: IS_VALID_LOCALE_FLAGS /* Windows.Win32.Globalization.IS_VALID_LOCALE_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsValidLocale(Locale, dwFlags));
}

export function GetGeoInfoA(
  Location: number /* i32 */,
  GeoType: number /* u32 */,
  lpGeoData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchData: number /* i32 */,
  LangId: number /* u16 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetGeoInfoA(Location, GeoType, util.pstrToFfi(lpGeoData), cchData, LangId);
}

export function GetGeoInfoW(
  Location: number /* i32 */,
  GeoType: number /* u32 */,
  lpGeoData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchData: number /* i32 */,
  LangId: number /* u16 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetGeoInfoW(Location, GeoType, util.pwstrToFfi(lpGeoData), cchData, LangId);
}

export function GetGeoInfoEx(
  location: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  geoType: number /* u32 */,
  geoData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  geoDataCount: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetGeoInfoEx(util.pwstrToFfi(location), geoType, util.pwstrToFfi(geoData), geoDataCount);
}

export function EnumSystemGeoID(
  GeoClass: number /* u32 */,
  ParentGeoId: number /* i32 */,
  lpGeoEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.GEO_ENUMPROC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemGeoID(GeoClass, ParentGeoId, util.toPointer(lpGeoEnumProc)));
}

export function EnumSystemGeoNames(
  geoClass: number /* u32 */,
  geoEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.GEO_ENUMNAMEPROC */,
  data: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemGeoNames(geoClass, util.toPointer(geoEnumProc), util.toPointer(data)));
}

export function GetUserGeoID(
  GeoClass: number /* u32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetUserGeoID(GeoClass);
}

export function GetUserDefaultGeoName(
  geoName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  geoNameCount: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetUserDefaultGeoName(util.pwstrToFfi(geoName), geoNameCount);
}

export function SetUserGeoID(
  GeoId: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetUserGeoID(GeoId));
}

export function SetUserGeoName(
  geoName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetUserGeoName(util.pwstrToFfi(geoName)));
}

export function ConvertDefaultLocale(
  Locale: number /* u32 */,
): number /* u32 */ {
  return libKERNEL32_dll.ConvertDefaultLocale(Locale);
}

export function GetSystemDefaultUILanguage(): number /* u16 */ {
  return libKERNEL32_dll.GetSystemDefaultUILanguage();
}

export function GetThreadLocale(): number /* u32 */ {
  return libKERNEL32_dll.GetThreadLocale();
}

export function SetThreadLocale(
  Locale: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadLocale(Locale));
}

export function GetUserDefaultUILanguage(): number /* u16 */ {
  return libKERNEL32_dll.GetUserDefaultUILanguage();
}

export function GetUserDefaultLangID(): number /* u16 */ {
  return libKERNEL32_dll.GetUserDefaultLangID();
}

export function GetSystemDefaultLangID(): number /* u16 */ {
  return libKERNEL32_dll.GetSystemDefaultLangID();
}

export function GetSystemDefaultLCID(): number /* u32 */ {
  return libKERNEL32_dll.GetSystemDefaultLCID();
}

export function GetUserDefaultLCID(): number /* u32 */ {
  return libKERNEL32_dll.GetUserDefaultLCID();
}

export function SetThreadUILanguage(
  LangId: number /* u16 */,
): number /* u16 */ {
  return libKERNEL32_dll.SetThreadUILanguage(LangId);
}

export function GetThreadUILanguage(): number /* u16 */ {
  return libKERNEL32_dll.GetThreadUILanguage();
}

export function GetProcessPreferredUILanguages(
  dwFlags: number /* u32 */,
  pulNumLanguages: Deno.PointerValue | Uint8Array /* ptr */,
  pwszLanguagesBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchLanguagesBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetProcessPreferredUILanguages(dwFlags, util.toPointer(pulNumLanguages), util.pwstrToFfi(pwszLanguagesBuffer), util.toPointer(pcchLanguagesBuffer)));
}

export function SetProcessPreferredUILanguages(
  dwFlags: number /* u32 */,
  pwszLanguagesBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pulNumLanguages: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetProcessPreferredUILanguages(dwFlags, util.pwstrToFfi(pwszLanguagesBuffer), util.toPointer(pulNumLanguages)));
}

export function GetUserPreferredUILanguages(
  dwFlags: number /* u32 */,
  pulNumLanguages: Deno.PointerValue | Uint8Array /* ptr */,
  pwszLanguagesBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchLanguagesBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetUserPreferredUILanguages(dwFlags, util.toPointer(pulNumLanguages), util.pwstrToFfi(pwszLanguagesBuffer), util.toPointer(pcchLanguagesBuffer)));
}

export function GetSystemPreferredUILanguages(
  dwFlags: number /* u32 */,
  pulNumLanguages: Deno.PointerValue | Uint8Array /* ptr */,
  pwszLanguagesBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchLanguagesBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetSystemPreferredUILanguages(dwFlags, util.toPointer(pulNumLanguages), util.pwstrToFfi(pwszLanguagesBuffer), util.toPointer(pcchLanguagesBuffer)));
}

export function GetThreadPreferredUILanguages(
  dwFlags: number /* u32 */,
  pulNumLanguages: Deno.PointerValue | Uint8Array /* ptr */,
  pwszLanguagesBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchLanguagesBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetThreadPreferredUILanguages(dwFlags, util.toPointer(pulNumLanguages), util.pwstrToFfi(pwszLanguagesBuffer), util.toPointer(pcchLanguagesBuffer)));
}

export function SetThreadPreferredUILanguages(
  dwFlags: number /* u32 */,
  pwszLanguagesBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pulNumLanguages: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadPreferredUILanguages(dwFlags, util.pwstrToFfi(pwszLanguagesBuffer), util.toPointer(pulNumLanguages)));
}

export function GetFileMUIInfo(
  dwFlags: number /* u32 */,
  pcwszFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pFileMUIInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pcbFileMUIInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetFileMUIInfo(dwFlags, util.pwstrToFfi(pcwszFilePath), util.toPointer(pFileMUIInfo), util.toPointer(pcbFileMUIInfo)));
}

export function GetFileMUIPath(
  dwFlags: number /* u32 */,
  pcwszFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszLanguage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchLanguage: Deno.PointerValue | Uint8Array /* ptr */,
  pwszFileMUIPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchFileMUIPath: Deno.PointerValue | Uint8Array /* ptr */,
  pululEnumerator: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetFileMUIPath(dwFlags, util.pwstrToFfi(pcwszFilePath), util.pwstrToFfi(pwszLanguage), util.toPointer(pcchLanguage), util.pwstrToFfi(pwszFileMUIPath), util.toPointer(pcchFileMUIPath), util.toPointer(pululEnumerator)));
}

export function GetUILanguageInfo(
  dwFlags: number /* u32 */,
  pwmszLanguage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszFallbackLanguages: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchFallbackLanguages: Deno.PointerValue | Uint8Array /* ptr */,
  pAttributes: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetUILanguageInfo(dwFlags, util.pwstrToFfi(pwmszLanguage), util.pwstrToFfi(pwszFallbackLanguages), util.toPointer(pcchFallbackLanguages), util.toPointer(pAttributes)));
}

export function SetThreadPreferredUILanguages2(
  flags: number /* u32 */,
  languages: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  numLanguagesSet: Deno.PointerValue | Uint8Array /* ptr */,
  snapshot: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetThreadPreferredUILanguages2(flags, util.pwstrToFfi(languages), util.toPointer(numLanguagesSet), util.toPointer(snapshot)));
}

export function RestoreThreadPreferredUILanguages(
  snapshot: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.HSAVEDUILANGUAGES */,
): void /* void */ {
  return libKERNEL32_dll.RestoreThreadPreferredUILanguages(util.toPointer(snapshot));
}

export function NotifyUILanguageChange(
  dwFlags: number /* u32 */,
  pcwstrNewLanguage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcwstrPreviousLanguage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
  pdwStatusRtrn: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.NotifyUILanguageChange(dwFlags, util.pwstrToFfi(pcwstrNewLanguage), util.pwstrToFfi(pcwstrPreviousLanguage), dwReserved, util.toPointer(pdwStatusRtrn)));
}

export function GetStringTypeExA(
  Locale: number /* u32 */,
  dwInfoType: number /* u32 */,
  lpSrcStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchSrc: number /* i32 */,
  lpCharType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetStringTypeExA(Locale, dwInfoType, util.pstrToFfi(lpSrcStr), cchSrc, util.toPointer(lpCharType)));
}

export function GetStringTypeA(
  Locale: number /* u32 */,
  dwInfoType: number /* u32 */,
  lpSrcStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchSrc: number /* i32 */,
  lpCharType: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetStringTypeA(Locale, dwInfoType, util.pstrToFfi(lpSrcStr), cchSrc, util.toPointer(lpCharType)));
}

export function FoldStringA(
  dwMapFlags: FOLD_STRING_MAP_FLAGS /* Windows.Win32.Globalization.FOLD_STRING_MAP_FLAGS */,
  lpSrcStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchSrc: number /* i32 */,
  lpDestStr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchDest: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.FoldStringA(dwMapFlags, util.pstrToFfi(lpSrcStr), cchSrc, util.pstrToFfi(lpDestStr), cchDest);
}

export function EnumSystemLocalesA(
  lpLocaleEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LOCALE_ENUMPROCA */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemLocalesA(util.toPointer(lpLocaleEnumProc), dwFlags));
}

export function EnumSystemLocalesW(
  lpLocaleEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LOCALE_ENUMPROCW */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemLocalesW(util.toPointer(lpLocaleEnumProc), dwFlags));
}

export function EnumSystemLanguageGroupsA(
  lpLanguageGroupEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LANGUAGEGROUP_ENUMPROCA */,
  dwFlags: ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS /* Windows.Win32.Globalization.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemLanguageGroupsA(util.toPointer(lpLanguageGroupEnumProc), dwFlags, lParam));
}

export function EnumSystemLanguageGroupsW(
  lpLanguageGroupEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LANGUAGEGROUP_ENUMPROCW */,
  dwFlags: ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS /* Windows.Win32.Globalization.ENUM_SYSTEM_LANGUAGE_GROUPS_FLAGS */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemLanguageGroupsW(util.toPointer(lpLanguageGroupEnumProc), dwFlags, lParam));
}

export function EnumLanguageGroupLocalesA(
  lpLangGroupLocaleEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LANGGROUPLOCALE_ENUMPROCA */,
  LanguageGroup: number /* u32 */,
  dwFlags: number /* u32 */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumLanguageGroupLocalesA(util.toPointer(lpLangGroupLocaleEnumProc), LanguageGroup, dwFlags, lParam));
}

export function EnumLanguageGroupLocalesW(
  lpLangGroupLocaleEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LANGGROUPLOCALE_ENUMPROCW */,
  LanguageGroup: number /* u32 */,
  dwFlags: number /* u32 */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumLanguageGroupLocalesW(util.toPointer(lpLangGroupLocaleEnumProc), LanguageGroup, dwFlags, lParam));
}

export function EnumUILanguagesA(
  lpUILanguageEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UILANGUAGE_ENUMPROCA */,
  dwFlags: number /* u32 */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumUILanguagesA(util.toPointer(lpUILanguageEnumProc), dwFlags, lParam));
}

export function EnumUILanguagesW(
  lpUILanguageEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UILANGUAGE_ENUMPROCW */,
  dwFlags: number /* u32 */,
  lParam: Deno.PointerValue /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumUILanguagesW(util.toPointer(lpUILanguageEnumProc), dwFlags, lParam));
}

export function EnumSystemCodePagesA(
  lpCodePageEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CODEPAGE_ENUMPROCA */,
  dwFlags: ENUM_SYSTEM_CODE_PAGES_FLAGS /* Windows.Win32.Globalization.ENUM_SYSTEM_CODE_PAGES_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemCodePagesA(util.toPointer(lpCodePageEnumProc), dwFlags));
}

export function EnumSystemCodePagesW(
  lpCodePageEnumProc: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CODEPAGE_ENUMPROCW */,
  dwFlags: ENUM_SYSTEM_CODE_PAGES_FLAGS /* Windows.Win32.Globalization.ENUM_SYSTEM_CODE_PAGES_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemCodePagesW(util.toPointer(lpCodePageEnumProc), dwFlags));
}

export function IdnToAscii(
  dwFlags: number /* u32 */,
  lpUnicodeCharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchUnicodeChar: number /* i32 */,
  lpASCIICharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchASCIIChar: number /* i32 */,
): number /* i32 */ {
  return libNORMALIZ_dll.IdnToAscii(dwFlags, util.pwstrToFfi(lpUnicodeCharStr), cchUnicodeChar, util.pwstrToFfi(lpASCIICharStr), cchASCIIChar);
}

export function IdnToUnicode(
  dwFlags: number /* u32 */,
  lpASCIICharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchASCIIChar: number /* i32 */,
  lpUnicodeCharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchUnicodeChar: number /* i32 */,
): number /* i32 */ {
  return libNORMALIZ_dll.IdnToUnicode(dwFlags, util.pwstrToFfi(lpASCIICharStr), cchASCIIChar, util.pwstrToFfi(lpUnicodeCharStr), cchUnicodeChar);
}

export function IdnToNameprepUnicode(
  dwFlags: number /* u32 */,
  lpUnicodeCharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchUnicodeChar: number /* i32 */,
  lpNameprepCharStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchNameprepChar: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.IdnToNameprepUnicode(dwFlags, util.pwstrToFfi(lpUnicodeCharStr), cchUnicodeChar, util.pwstrToFfi(lpNameprepCharStr), cchNameprepChar);
}

export function NormalizeString(
  NormForm: NORM_FORM /* Windows.Win32.Globalization.NORM_FORM */,
  lpSrcString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cwSrcLength: number /* i32 */,
  lpDstString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cwDstLength: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.NormalizeString(NormForm, util.pwstrToFfi(lpSrcString), cwSrcLength, util.pwstrToFfi(lpDstString), cwDstLength);
}

export function IsNormalizedString(
  NormForm: NORM_FORM /* Windows.Win32.Globalization.NORM_FORM */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cwLength: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsNormalizedString(NormForm, util.pwstrToFfi(lpString), cwLength));
}

export function VerifyScripts(
  dwFlags: number /* u32 */,
  lpLocaleScripts: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchLocaleScripts: number /* i32 */,
  lpTestScripts: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchTestScripts: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.VerifyScripts(dwFlags, util.pwstrToFfi(lpLocaleScripts), cchLocaleScripts, util.pwstrToFfi(lpTestScripts), cchTestScripts));
}

export function GetStringScripts(
  dwFlags: number /* u32 */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchString: number /* i32 */,
  lpScripts: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchScripts: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetStringScripts(dwFlags, util.pwstrToFfi(lpString), cchString, util.pwstrToFfi(lpScripts), cchScripts);
}

export function GetLocaleInfoEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  LCType: number /* u32 */,
  lpLCData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchData: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetLocaleInfoEx(util.pwstrToFfi(lpLocaleName), LCType, util.pwstrToFfi(lpLCData), cchData);
}

export function GetCalendarInfoEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Calendar: number /* u32 */,
  lpReserved: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CalType: number /* u32 */,
  lpCalData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchData: number /* i32 */,
  lpValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libKERNEL32_dll.GetCalendarInfoEx(util.pwstrToFfi(lpLocaleName), Calendar, util.pwstrToFfi(lpReserved), CalType, util.pwstrToFfi(lpCalData), cchData, util.toPointer(lpValue));
}

export function GetNumberFormatEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  lpValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFormat: Deno.PointerValue | Uint8Array /* ptr */,
  lpNumberStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchNumber: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetNumberFormatEx(util.pwstrToFfi(lpLocaleName), dwFlags, util.pwstrToFfi(lpValue), util.toPointer(lpFormat), util.pwstrToFfi(lpNumberStr), cchNumber);
}

export function GetCurrencyFormatEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  lpValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFormat: Deno.PointerValue | Uint8Array /* ptr */,
  lpCurrencyStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCurrency: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetCurrencyFormatEx(util.pwstrToFfi(lpLocaleName), dwFlags, util.pwstrToFfi(lpValue), util.toPointer(lpFormat), util.pwstrToFfi(lpCurrencyStr), cchCurrency);
}

export function GetUserDefaultLocaleName(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchLocaleName: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetUserDefaultLocaleName(util.pwstrToFfi(lpLocaleName), cchLocaleName);
}

export function GetSystemDefaultLocaleName(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchLocaleName: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.GetSystemDefaultLocaleName(util.pwstrToFfi(lpLocaleName), cchLocaleName);
}

export function IsNLSDefinedString(
  Function: number /* u32 */,
  dwFlags: number /* u32 */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchStr: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsNLSDefinedString(Function, dwFlags, util.toPointer(lpVersionInformation), util.pwstrToFfi(lpString), cchStr));
}

export function GetNLSVersionEx(
  function__: number /* u32 */,
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetNLSVersionEx(function__, util.pwstrToFfi(lpLocaleName), util.toPointer(lpVersionInformation)));
}

export function IsValidNLSVersion(
  function__: number /* u32 */,
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libKERNEL32_dll.IsValidNLSVersion(function__, util.pwstrToFfi(lpLocaleName), util.toPointer(lpVersionInformation));
}

export function FindNLSStringEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFindNLSStringFlags: number /* u32 */,
  lpStringSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSource: number /* i32 */,
  lpStringValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchValue: number /* i32 */,
  pcchFound: Deno.PointerValue | Uint8Array /* ptr */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
  sortHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libKERNEL32_dll.FindNLSStringEx(util.pwstrToFfi(lpLocaleName), dwFindNLSStringFlags, util.pwstrToFfi(lpStringSource), cchSource, util.pwstrToFfi(lpStringValue), cchValue, util.toPointer(pcchFound), util.toPointer(lpVersionInformation), util.toPointer(lpReserved), util.toPointer(sortHandle));
}

export function LCMapStringEx(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwMapFlags: number /* u32 */,
  lpSrcStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSrc: number /* i32 */,
  lpDestStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDest: number /* i32 */,
  lpVersionInformation: Deno.PointerValue | Uint8Array /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
  sortHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libKERNEL32_dll.LCMapStringEx(util.pwstrToFfi(lpLocaleName), dwMapFlags, util.pwstrToFfi(lpSrcStr), cchSrc, util.pwstrToFfi(lpDestStr), cchDest, util.toPointer(lpVersionInformation), util.toPointer(lpReserved), util.toPointer(sortHandle));
}

export function IsValidLocaleName(
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.IsValidLocaleName(util.pwstrToFfi(lpLocaleName)));
}

export function EnumCalendarInfoExEx(
  pCalInfoEnumProcExEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.CALINFO_ENUMPROCEXEX */,
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Calendar: number /* u32 */,
  lpReserved: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CalType: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumCalendarInfoExEx(util.toPointer(pCalInfoEnumProcExEx), util.pwstrToFfi(lpLocaleName), Calendar, util.pwstrToFfi(lpReserved), CalType, util.toPointer(lParam)));
}

export function EnumDateFormatsExEx(
  lpDateFmtEnumProcExEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.DATEFMT_ENUMPROCEXEX */,
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: ENUM_DATE_FORMATS_FLAGS /* Windows.Win32.Globalization.ENUM_DATE_FORMATS_FLAGS */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumDateFormatsExEx(util.toPointer(lpDateFmtEnumProcExEx), util.pwstrToFfi(lpLocaleName), dwFlags, util.toPointer(lParam)));
}

export function EnumTimeFormatsEx(
  lpTimeFmtEnumProcEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.TIMEFMT_ENUMPROCEX */,
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumTimeFormatsEx(util.toPointer(lpTimeFmtEnumProcEx), util.pwstrToFfi(lpLocaleName), dwFlags, util.toPointer(lParam)));
}

export function EnumSystemLocalesEx(
  lpLocaleEnumProcEx: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.LOCALE_ENUMPROCEX */,
  dwFlags: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.EnumSystemLocalesEx(util.toPointer(lpLocaleEnumProcEx), dwFlags, util.toPointer(lParam), util.toPointer(lpReserved)));
}

export function ResolveLocaleName(
  lpNameToResolve: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpLocaleName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchLocaleName: number /* i32 */,
): number /* i32 */ {
  return libKERNEL32_dll.ResolveLocaleName(util.pwstrToFfi(lpNameToResolve), util.pwstrToFfi(lpLocaleName), cchLocaleName);
}

export function MappingGetServices(
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
  prgServices: Deno.PointerValue | Uint8Array /* ptr */,
  pdwServicesCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libelscore_dll.MappingGetServices(util.toPointer(pOptions), util.toPointer(prgServices), util.toPointer(pdwServicesCount));
}

export function MappingFreeServices(
  pServiceInfo: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libelscore_dll.MappingFreeServices(util.toPointer(pServiceInfo));
}

export function MappingRecognizeText(
  pServiceInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLength: number /* u32 */,
  dwIndex: number /* u32 */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
  pbag: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libelscore_dll.MappingRecognizeText(util.toPointer(pServiceInfo), util.pwstrToFfi(pszText), dwLength, dwIndex, util.toPointer(pOptions), util.toPointer(pbag));
}

export function MappingDoAction(
  pBag: Deno.PointerValue | Uint8Array /* ptr */,
  dwRangeIndex: number /* u32 */,
  pszActionId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libelscore_dll.MappingDoAction(util.toPointer(pBag), dwRangeIndex, util.pwstrToFfi(pszActionId));
}

export function MappingFreePropertyBag(
  pBag: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libelscore_dll.MappingFreePropertyBag(util.toPointer(pBag));
}

export function ScriptFreeCache(
  psc: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptFreeCache(util.toPointer(psc));
}

export function ScriptItemize(
  pwcInChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cInChars: number /* i32 */,
  cMaxItems: number /* i32 */,
  psControl: Deno.PointerValue | Uint8Array /* ptr */,
  psState: Deno.PointerValue | Uint8Array /* ptr */,
  pItems: Deno.PointerValue | Uint8Array /* ptr */,
  pcItems: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptItemize(util.pwstrToFfi(pwcInChars), cInChars, cMaxItems, util.toPointer(psControl), util.toPointer(psState), util.toPointer(pItems), util.toPointer(pcItems));
}

export function ScriptLayout(
  cRuns: number /* i32 */,
  pbLevel: Deno.PointerValue | Uint8Array /* ptr */,
  piVisualToLogical: Deno.PointerValue | Uint8Array /* ptr */,
  piLogicalToVisual: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptLayout(cRuns, util.toPointer(pbLevel), util.toPointer(piVisualToLogical), util.toPointer(piLogicalToVisual));
}

export function ScriptShape(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  pwcChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cChars: number /* i32 */,
  cMaxGlyphs: number /* i32 */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  pwOutGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  pcGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptShape(util.toPointer(hdc), util.toPointer(psc), util.pwstrToFfi(pwcChars), cChars, cMaxGlyphs, util.toPointer(psa), util.toPointer(pwOutGlyphs), util.toPointer(pwLogClust), util.toPointer(psva), util.toPointer(pcGlyphs));
}

export function ScriptPlace(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  pwGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
  cGlyphs: number /* i32 */,
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  pGoffset: Deno.PointerValue | Uint8Array /* ptr */,
  pABC: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptPlace(util.toPointer(hdc), util.toPointer(psc), util.toPointer(pwGlyphs), cGlyphs, util.toPointer(psva), util.toPointer(psa), util.toPointer(piAdvance), util.toPointer(pGoffset), util.toPointer(pABC));
}

export function ScriptTextOut(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  x: number /* i32 */,
  y: number /* i32 */,
  fuOptions: number /* u32 */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  pwcReserved: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iReserved: number /* i32 */,
  pwGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
  cGlyphs: number /* i32 */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  piJustify: Deno.PointerValue | Uint8Array /* ptr */,
  pGoffset: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptTextOut(util.toPointer(hdc), util.toPointer(psc), x, y, fuOptions, util.toPointer(lprc), util.toPointer(psa), util.pwstrToFfi(pwcReserved), iReserved, util.toPointer(pwGlyphs), cGlyphs, util.toPointer(piAdvance), util.toPointer(piJustify), util.toPointer(pGoffset));
}

export function ScriptJustify(
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  cGlyphs: number /* i32 */,
  iDx: number /* i32 */,
  iMinKashida: number /* i32 */,
  piJustify: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptJustify(util.toPointer(psva), util.toPointer(piAdvance), cGlyphs, iDx, iMinKashida, util.toPointer(piJustify));
}

export function ScriptBreak(
  pwcChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cChars: number /* i32 */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  psla: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptBreak(util.pwstrToFfi(pwcChars), cChars, util.toPointer(psa), util.toPointer(psla));
}

export function ScriptCPtoX(
  iCP: number /* i32 */,
  fTrailing: boolean /* Windows.Win32.Foundation.BOOL */,
  cChars: number /* i32 */,
  cGlyphs: number /* i32 */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  piX: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptCPtoX(iCP, util.boolToFfi(fTrailing), cChars, cGlyphs, util.toPointer(pwLogClust), util.toPointer(psva), util.toPointer(piAdvance), util.toPointer(psa), util.toPointer(piX));
}

export function ScriptXtoCP(
  iX: number /* i32 */,
  cChars: number /* i32 */,
  cGlyphs: number /* i32 */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  piCP: Deno.PointerValue | Uint8Array /* ptr */,
  piTrailing: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptXtoCP(iX, cChars, cGlyphs, util.toPointer(pwLogClust), util.toPointer(psva), util.toPointer(piAdvance), util.toPointer(psa), util.toPointer(piCP), util.toPointer(piTrailing));
}

export function ScriptGetLogicalWidths(
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  cChars: number /* i32 */,
  cGlyphs: number /* i32 */,
  piGlyphWidth: Deno.PointerValue | Uint8Array /* ptr */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  piDx: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetLogicalWidths(util.toPointer(psa), cChars, cGlyphs, util.toPointer(piGlyphWidth), util.toPointer(pwLogClust), util.toPointer(psva), util.toPointer(piDx));
}

export function ScriptApplyLogicalWidth(
  piDx: Deno.PointerValue | Uint8Array /* ptr */,
  cChars: number /* i32 */,
  cGlyphs: number /* i32 */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  psva: Deno.PointerValue | Uint8Array /* ptr */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  pABC: Deno.PointerValue | Uint8Array /* ptr */,
  piJustify: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptApplyLogicalWidth(util.toPointer(piDx), cChars, cGlyphs, util.toPointer(pwLogClust), util.toPointer(psva), util.toPointer(piAdvance), util.toPointer(psa), util.toPointer(pABC), util.toPointer(piJustify));
}

export function ScriptGetCMap(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  pwcInChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cChars: number /* i32 */,
  dwFlags: number /* u32 */,
  pwOutGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetCMap(util.toPointer(hdc), util.toPointer(psc), util.pwstrToFfi(pwcInChars), cChars, dwFlags, util.toPointer(pwOutGlyphs));
}

export function ScriptGetGlyphABCWidth(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  wGlyph: number /* u16 */,
  pABC: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetGlyphABCWidth(util.toPointer(hdc), util.toPointer(psc), wGlyph, util.toPointer(pABC));
}

export function ScriptGetProperties(
  ppSp: Deno.PointerValue | Uint8Array /* ptr */,
  piNumScripts: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetProperties(util.toPointer(ppSp), util.toPointer(piNumScripts));
}

export function ScriptGetFontProperties(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  sfp: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetFontProperties(util.toPointer(hdc), util.toPointer(psc), util.toPointer(sfp));
}

export function ScriptCacheGetHeight(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  tmHeight: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptCacheGetHeight(util.toPointer(hdc), util.toPointer(psc), util.toPointer(tmHeight));
}

export function ScriptStringAnalyse(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pString: Deno.PointerValue | Uint8Array /* ptr */,
  cString: number /* i32 */,
  cGlyphs: number /* i32 */,
  iCharset: number /* i32 */,
  dwFlags: number /* u32 */,
  iReqWidth: number /* i32 */,
  psControl: Deno.PointerValue | Uint8Array /* ptr */,
  psState: Deno.PointerValue | Uint8Array /* ptr */,
  piDx: Deno.PointerValue | Uint8Array /* ptr */,
  pTabdef: Deno.PointerValue | Uint8Array /* ptr */,
  pbInClass: Deno.PointerValue | Uint8Array /* ptr */,
  pssa: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringAnalyse(util.toPointer(hdc), util.toPointer(pString), cString, cGlyphs, iCharset, dwFlags, iReqWidth, util.toPointer(psControl), util.toPointer(psState), util.toPointer(piDx), util.toPointer(pTabdef), util.toPointer(pbInClass), util.toPointer(pssa));
}

export function ScriptStringFree(
  pssa: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringFree(util.toPointer(pssa));
}

export function ScriptString_pSize(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libUSP10_dll.ScriptString_pSize(util.toPointer(ssa));
}

export function ScriptString_pcOutChars(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libUSP10_dll.ScriptString_pcOutChars(util.toPointer(ssa));
}

export function ScriptString_pLogAttr(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libUSP10_dll.ScriptString_pLogAttr(util.toPointer(ssa));
}

export function ScriptStringGetOrder(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
  puOrder: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringGetOrder(util.toPointer(ssa), util.toPointer(puOrder));
}

export function ScriptStringCPtoX(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
  icp: number /* i32 */,
  fTrailing: boolean /* Windows.Win32.Foundation.BOOL */,
  pX: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringCPtoX(util.toPointer(ssa), icp, util.boolToFfi(fTrailing), util.toPointer(pX));
}

export function ScriptStringXtoCP(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
  iX: number /* i32 */,
  piCh: Deno.PointerValue | Uint8Array /* ptr */,
  piTrailing: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringXtoCP(util.toPointer(ssa), iX, util.toPointer(piCh), util.toPointer(piTrailing));
}

export function ScriptStringGetLogicalWidths(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
  piDx: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringGetLogicalWidths(util.toPointer(ssa), util.toPointer(piDx));
}

export function ScriptStringValidate(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringValidate(util.toPointer(ssa));
}

export function ScriptStringOut(
  ssa: Deno.PointerValue | Uint8Array /* ptr */,
  iX: number /* i32 */,
  iY: number /* i32 */,
  uOptions: ETO_OPTIONS /* Windows.Win32.Graphics.Gdi.ETO_OPTIONS */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
  iMinSel: number /* i32 */,
  iMaxSel: number /* i32 */,
  fDisabled: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptStringOut(util.toPointer(ssa), iX, iY, uOptions, util.toPointer(prc), iMinSel, iMaxSel, util.boolToFfi(fDisabled));
}

export function ScriptIsComplex(
  pwcInChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cInChars: number /* i32 */,
  dwFlags: SCRIPT_IS_COMPLEX_FLAGS /* Windows.Win32.Globalization.SCRIPT_IS_COMPLEX_FLAGS */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptIsComplex(util.pwstrToFfi(pwcInChars), cInChars, dwFlags);
}

export function ScriptRecordDigitSubstitution(
  Locale: number /* u32 */,
  psds: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptRecordDigitSubstitution(Locale, util.toPointer(psds));
}

export function ScriptApplyDigitSubstitution(
  psds: Deno.PointerValue | Uint8Array /* ptr */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  pss: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptApplyDigitSubstitution(util.toPointer(psds), util.toPointer(psc), util.toPointer(pss));
}

export function ScriptShapeOpenType(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  tagLangSys: number /* u32 */,
  rcRangeChars: Deno.PointerValue | Uint8Array /* ptr */,
  rpRangeProperties: Deno.PointerValue | Uint8Array /* ptr */,
  cRanges: number /* i32 */,
  pwcChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cChars: number /* i32 */,
  cMaxGlyphs: number /* i32 */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  pCharProps: Deno.PointerValue | Uint8Array /* ptr */,
  pwOutGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
  pOutGlyphProps: Deno.PointerValue | Uint8Array /* ptr */,
  pcGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptShapeOpenType(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, tagLangSys, util.toPointer(rcRangeChars), util.toPointer(rpRangeProperties), cRanges, util.pwstrToFfi(pwcChars), cChars, cMaxGlyphs, util.toPointer(pwLogClust), util.toPointer(pCharProps), util.toPointer(pwOutGlyphs), util.toPointer(pOutGlyphProps), util.toPointer(pcGlyphs));
}

export function ScriptPlaceOpenType(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  tagLangSys: number /* u32 */,
  rcRangeChars: Deno.PointerValue | Uint8Array /* ptr */,
  rpRangeProperties: Deno.PointerValue | Uint8Array /* ptr */,
  cRanges: number /* i32 */,
  pwcChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwLogClust: Deno.PointerValue | Uint8Array /* ptr */,
  pCharProps: Deno.PointerValue | Uint8Array /* ptr */,
  cChars: number /* i32 */,
  pwGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
  pGlyphProps: Deno.PointerValue | Uint8Array /* ptr */,
  cGlyphs: number /* i32 */,
  piAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  pGoffset: Deno.PointerValue | Uint8Array /* ptr */,
  pABC: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptPlaceOpenType(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, tagLangSys, util.toPointer(rcRangeChars), util.toPointer(rpRangeProperties), cRanges, util.pwstrToFfi(pwcChars), util.toPointer(pwLogClust), util.toPointer(pCharProps), cChars, util.toPointer(pwGlyphs), util.toPointer(pGlyphProps), cGlyphs, util.toPointer(piAdvance), util.toPointer(pGoffset), util.toPointer(pABC));
}

export function ScriptItemizeOpenType(
  pwcInChars: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cInChars: number /* i32 */,
  cMaxItems: number /* i32 */,
  psControl: Deno.PointerValue | Uint8Array /* ptr */,
  psState: Deno.PointerValue | Uint8Array /* ptr */,
  pItems: Deno.PointerValue | Uint8Array /* ptr */,
  pScriptTags: Deno.PointerValue | Uint8Array /* ptr */,
  pcItems: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptItemizeOpenType(util.pwstrToFfi(pwcInChars), cInChars, cMaxItems, util.toPointer(psControl), util.toPointer(psState), util.toPointer(pItems), util.toPointer(pScriptTags), util.toPointer(pcItems));
}

export function ScriptGetFontScriptTags(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  cMaxTags: number /* i32 */,
  pScriptTags: Deno.PointerValue | Uint8Array /* ptr */,
  pcTags: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetFontScriptTags(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), cMaxTags, util.toPointer(pScriptTags), util.toPointer(pcTags));
}

export function ScriptGetFontLanguageTags(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  cMaxTags: number /* i32 */,
  pLangsysTags: Deno.PointerValue | Uint8Array /* ptr */,
  pcTags: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetFontLanguageTags(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, cMaxTags, util.toPointer(pLangsysTags), util.toPointer(pcTags));
}

export function ScriptGetFontFeatureTags(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  tagLangSys: number /* u32 */,
  cMaxTags: number /* i32 */,
  pFeatureTags: Deno.PointerValue | Uint8Array /* ptr */,
  pcTags: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetFontFeatureTags(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, tagLangSys, cMaxTags, util.toPointer(pFeatureTags), util.toPointer(pcTags));
}

export function ScriptGetFontAlternateGlyphs(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  tagLangSys: number /* u32 */,
  tagFeature: number /* u32 */,
  wGlyphId: number /* u16 */,
  cMaxAlternates: number /* i32 */,
  pAlternateGlyphs: Deno.PointerValue | Uint8Array /* ptr */,
  pcAlternates: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptGetFontAlternateGlyphs(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, tagLangSys, tagFeature, wGlyphId, cMaxAlternates, util.toPointer(pAlternateGlyphs), util.toPointer(pcAlternates));
}

export function ScriptSubstituteSingleGlyph(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  tagLangSys: number /* u32 */,
  tagFeature: number /* u32 */,
  lParameter: number /* i32 */,
  wGlyphId: number /* u16 */,
  pwOutGlyphId: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptSubstituteSingleGlyph(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, tagLangSys, tagFeature, lParameter, wGlyphId, util.toPointer(pwOutGlyphId));
}

export function ScriptPositionSingleGlyph(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  psc: Deno.PointerValue | Uint8Array /* ptr */,
  psa: Deno.PointerValue | Uint8Array /* ptr */,
  tagScript: number /* u32 */,
  tagLangSys: number /* u32 */,
  tagFeature: number /* u32 */,
  lParameter: number /* i32 */,
  wGlyphId: number /* u16 */,
  iAdvance: number /* i32 */,
  GOffset: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.GOFFSET */,
  piOutAdvance: Deno.PointerValue | Uint8Array /* ptr */,
  pOutGoffset: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUSP10_dll.ScriptPositionSingleGlyph(util.toPointer(hdc), util.toPointer(psc), util.toPointer(psa), tagScript, tagLangSys, tagFeature, lParameter, wGlyphId, iAdvance, util.toPointer(GOffset), util.toPointer(piOutAdvance), util.toPointer(pOutGoffset));
}

export function utf8_nextCharSafeBody(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  pi: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  c: number /* i32 */,
  strict: number /* i8 */,
): number /* i32 */ {
  return libicu_dll.utf8_nextCharSafeBody(util.toPointer(s), util.toPointer(pi), length, c, strict);
}

export function utf8_appendCharSafeBody(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  i: number /* i32 */,
  length: number /* i32 */,
  c: number /* i32 */,
  pIsError: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utf8_appendCharSafeBody(util.toPointer(s), i, length, c, util.toPointer(pIsError));
}

export function utf8_prevCharSafeBody(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  pi: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  strict: number /* i8 */,
): number /* i32 */ {
  return libicu_dll.utf8_prevCharSafeBody(util.toPointer(s), start, util.toPointer(pi), c, strict);
}

export function utf8_back1SafeBody(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  i: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.utf8_back1SafeBody(util.toPointer(s), start, i);
}

export function u_versionFromString(
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
  versionString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libicu_dll.u_versionFromString(util.toPointer(versionArray), util.pstrToFfi(versionString));
}

export function u_versionFromUString(
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
  versionString: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_versionFromUString(util.toPointer(versionArray), util.toPointer(versionString));
}

export function u_versionToString(
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
  versionString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libicu_dll.u_versionToString(util.toPointer(versionArray), util.pstrToFfi(versionString));
}

export function u_getVersion(
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_getVersion(util.toPointer(versionArray));
}

export function u_errorName(
  code: UErrorCode /* Windows.Win32.Globalization.UErrorCode */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_errorName(code));
}

export function utrace_setLevel(
  traceLevel: number /* i32 */,
): void /* void */ {
  return libicu_dll.utrace_setLevel(traceLevel);
}

export function utrace_getLevel(): number /* i32 */ {
  return libicu_dll.utrace_getLevel();
}

export function utrace_setFunctions(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  e: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UTraceEntry */,
  x: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UTraceExit */,
  d: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UTraceData */,
): void /* void */ {
  return libicu_dll.utrace_setFunctions(util.toPointer(context), util.toPointer(e), util.toPointer(x), util.toPointer(d));
}

export function utrace_getFunctions(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  e: Deno.PointerValue | Uint8Array /* ptr */,
  x: Deno.PointerValue | Uint8Array /* ptr */,
  d: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrace_getFunctions(util.toPointer(context), util.toPointer(e), util.toPointer(x), util.toPointer(d));
}

export function utrace_vformat(
  outBuf: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  capacity: number /* i32 */,
  indent: number /* i32 */,
  fmt: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  args: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utrace_vformat(util.pstrToFfi(outBuf), capacity, indent, util.pstrToFfi(fmt), util.toPointer(args));
}

export function utrace_format(
  outBuf: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  capacity: number /* i32 */,
  indent: number /* i32 */,
  fmt: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libicu_dll.utrace_format(util.pstrToFfi(outBuf), capacity, indent, util.pstrToFfi(fmt));
}

export function utrace_functionName(
  fnNumber: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.utrace_functionName(fnNumber));
}

export function u_shapeArabic(
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destSize: number /* i32 */,
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_shapeArabic(util.toPointer(source), sourceLength, util.toPointer(dest), destSize, options, util.toPointer(pErrorCode));
}

export function uscript_getCode(
  nameOrAbbrOrLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fillIn: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uscript_getCode(util.pstrToFfi(nameOrAbbrOrLocale), util.toPointer(fillIn), capacity, util.toPointer(err));
}

export function uscript_getName(
  scriptCode: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uscript_getName(scriptCode));
}

export function uscript_getShortName(
  scriptCode: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uscript_getShortName(scriptCode));
}

export function uscript_getScript(
  codepoint: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): UScriptCode /* Windows.Win32.Globalization.UScriptCode */ {
  return libicu_dll.uscript_getScript(codepoint, util.toPointer(err));
}

export function uscript_hasScript(
  c: number /* i32 */,
  sc: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): number /* i8 */ {
  return libicu_dll.uscript_hasScript(c, sc);
}

export function uscript_getScriptExtensions(
  c: number /* i32 */,
  scripts: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  errorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uscript_getScriptExtensions(c, util.toPointer(scripts), capacity, util.toPointer(errorCode));
}

export function uscript_getSampleString(
  script: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uscript_getSampleString(script, util.toPointer(dest), capacity, util.toPointer(pErrorCode));
}

export function uscript_getUsage(
  script: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): UScriptUsage /* Windows.Win32.Globalization.UScriptUsage */ {
  return libicu_dll.uscript_getUsage(script);
}

export function uscript_isRightToLeft(
  script: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): number /* i8 */ {
  return libicu_dll.uscript_isRightToLeft(script);
}

export function uscript_breaksBetweenLetters(
  script: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): number /* i8 */ {
  return libicu_dll.uscript_breaksBetweenLetters(script);
}

export function uscript_isCased(
  script: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
): number /* i8 */ {
  return libicu_dll.uscript_isCased(script);
}

export function uiter_current32(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uiter_current32(util.toPointer(iter));
}

export function uiter_next32(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uiter_next32(util.toPointer(iter));
}

export function uiter_previous32(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uiter_previous32(util.toPointer(iter));
}

export function uiter_getState(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libicu_dll.uiter_getState(util.toPointer(iter));
}

export function uiter_setState(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
  state: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uiter_setState(util.toPointer(iter), state, util.toPointer(pErrorCode));
}

export function uiter_setString(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.uiter_setString(util.toPointer(iter), util.toPointer(s), length);
}

export function uiter_setUTF16BE(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
  s: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.uiter_setUTF16BE(util.toPointer(iter), util.pstrToFfi(s), length);
}

export function uiter_setUTF8(
  iter: Deno.PointerValue | Uint8Array /* ptr */,
  s: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.uiter_setUTF8(util.toPointer(iter), util.pstrToFfi(s), length);
}

export function uenum_close(
  en: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uenum_close(util.toPointer(en));
}

export function uenum_count(
  en: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uenum_count(util.toPointer(en), util.toPointer(status));
}

export function uenum_unext(
  en: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uenum_unext(util.toPointer(en), util.toPointer(resultLength), util.toPointer(status));
}

export function uenum_next(
  en: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uenum_next(util.toPointer(en), util.toPointer(resultLength), util.toPointer(status)));
}

export function uenum_reset(
  en: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uenum_reset(util.toPointer(en), util.toPointer(status));
}

export function uenum_openUCharStringsEnumeration(
  strings: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uenum_openUCharStringsEnumeration(util.toPointer(strings), count, util.toPointer(ec));
}

export function uenum_openCharStringsEnumeration(
  strings: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uenum_openCharStringsEnumeration(util.toPointer(strings), count, util.toPointer(ec));
}

export function uloc_getDefault(): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_getDefault());
}

export function uloc_setDefault(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uloc_setDefault(util.pstrToFfi(localeID), util.toPointer(status));
}

export function uloc_getLanguage(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  language: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  languageCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getLanguage(util.pstrToFfi(localeID), util.pstrToFfi(language), languageCapacity, util.toPointer(err));
}

export function uloc_getScript(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  script: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  scriptCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getScript(util.pstrToFfi(localeID), util.pstrToFfi(script), scriptCapacity, util.toPointer(err));
}

export function uloc_getCountry(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  country: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  countryCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getCountry(util.pstrToFfi(localeID), util.pstrToFfi(country), countryCapacity, util.toPointer(err));
}

export function uloc_getVariant(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  variant: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  variantCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getVariant(util.pstrToFfi(localeID), util.pstrToFfi(variant), variantCapacity, util.toPointer(err));
}

export function uloc_getName(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nameCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getName(util.pstrToFfi(localeID), util.pstrToFfi(name), nameCapacity, util.toPointer(err));
}

export function uloc_canonicalize(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nameCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_canonicalize(util.pstrToFfi(localeID), util.pstrToFfi(name), nameCapacity, util.toPointer(err));
}

export function uloc_getISO3Language(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_getISO3Language(util.pstrToFfi(localeID)));
}

export function uloc_getISO3Country(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_getISO3Country(util.pstrToFfi(localeID)));
}

export function uloc_getLCID(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libicu_dll.uloc_getLCID(util.pstrToFfi(localeID));
}

export function uloc_getDisplayLanguage(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  language: Deno.PointerValue | Uint8Array /* ptr */,
  languageCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayLanguage(util.pstrToFfi(locale), util.pstrToFfi(displayLocale), util.toPointer(language), languageCapacity, util.toPointer(status));
}

export function uloc_getDisplayScript(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  script: Deno.PointerValue | Uint8Array /* ptr */,
  scriptCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayScript(util.pstrToFfi(locale), util.pstrToFfi(displayLocale), util.toPointer(script), scriptCapacity, util.toPointer(status));
}

export function uloc_getDisplayCountry(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  country: Deno.PointerValue | Uint8Array /* ptr */,
  countryCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayCountry(util.pstrToFfi(locale), util.pstrToFfi(displayLocale), util.toPointer(country), countryCapacity, util.toPointer(status));
}

export function uloc_getDisplayVariant(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  variant: Deno.PointerValue | Uint8Array /* ptr */,
  variantCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayVariant(util.pstrToFfi(locale), util.pstrToFfi(displayLocale), util.toPointer(variant), variantCapacity, util.toPointer(status));
}

export function uloc_getDisplayKeyword(
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayKeyword(util.pstrToFfi(keyword), util.pstrToFfi(displayLocale), util.toPointer(dest), destCapacity, util.toPointer(status));
}

export function uloc_getDisplayKeywordValue(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayKeywordValue(util.pstrToFfi(locale), util.pstrToFfi(keyword), util.pstrToFfi(displayLocale), util.toPointer(dest), destCapacity, util.toPointer(status));
}

export function uloc_getDisplayName(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  inLocaleID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getDisplayName(util.pstrToFfi(localeID), util.pstrToFfi(inLocaleID), util.toPointer(result), maxResultSize, util.toPointer(err));
}

export function uloc_getAvailable(
  n: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_getAvailable(n));
}

export function uloc_countAvailable(): number /* i32 */ {
  return libicu_dll.uloc_countAvailable();
}

export function uloc_openAvailableByType(
  type: ULocAvailableType /* Windows.Win32.Globalization.ULocAvailableType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uloc_openAvailableByType(type, util.toPointer(status));
}

export function uloc_getISOLanguages(): Deno.PointerValue /* ptr */ {
  return libicu_dll.uloc_getISOLanguages();
}

export function uloc_getISOCountries(): Deno.PointerValue /* ptr */ {
  return libicu_dll.uloc_getISOCountries();
}

export function uloc_getParent(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  parent: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  parentCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getParent(util.pstrToFfi(localeID), util.pstrToFfi(parent), parentCapacity, util.toPointer(err));
}

export function uloc_getBaseName(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nameCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getBaseName(util.pstrToFfi(localeID), util.pstrToFfi(name), nameCapacity, util.toPointer(err));
}

export function uloc_openKeywords(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uloc_openKeywords(util.pstrToFfi(localeID), util.toPointer(status));
}

export function uloc_getKeywordValue(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  keywordName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bufferCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getKeywordValue(util.pstrToFfi(localeID), util.pstrToFfi(keywordName), util.pstrToFfi(buffer), bufferCapacity, util.toPointer(status));
}

export function uloc_setKeywordValue(
  keywordName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  keywordValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bufferCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_setKeywordValue(util.pstrToFfi(keywordName), util.pstrToFfi(keywordValue), util.pstrToFfi(buffer), bufferCapacity, util.toPointer(status));
}

export function uloc_isRightToLeft(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i8 */ {
  return libicu_dll.uloc_isRightToLeft(util.pstrToFfi(locale));
}

export function uloc_getCharacterOrientation(
  localeId: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): ULayoutType /* Windows.Win32.Globalization.ULayoutType */ {
  return libicu_dll.uloc_getCharacterOrientation(util.pstrToFfi(localeId), util.toPointer(status));
}

export function uloc_getLineOrientation(
  localeId: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): ULayoutType /* Windows.Win32.Globalization.ULayoutType */ {
  return libicu_dll.uloc_getLineOrientation(util.pstrToFfi(localeId), util.toPointer(status));
}

export function uloc_acceptLanguageFromHTTP(
  result: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  resultAvailable: number /* i32 */,
  outResult: Deno.PointerValue | Uint8Array /* ptr */,
  httpAcceptLanguage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  availableLocales: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_acceptLanguageFromHTTP(util.pstrToFfi(result), resultAvailable, util.toPointer(outResult), util.pstrToFfi(httpAcceptLanguage), util.toPointer(availableLocales), util.toPointer(status));
}

export function uloc_acceptLanguage(
  result: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  resultAvailable: number /* i32 */,
  outResult: Deno.PointerValue | Uint8Array /* ptr */,
  acceptList: Deno.PointerValue | Uint8Array /* ptr */,
  acceptListCount: number /* i32 */,
  availableLocales: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_acceptLanguage(util.pstrToFfi(result), resultAvailable, util.toPointer(outResult), util.toPointer(acceptList), acceptListCount, util.toPointer(availableLocales), util.toPointer(status));
}

export function uloc_getLocaleForLCID(
  hostID: number /* u32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  localeCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_getLocaleForLCID(hostID, util.pstrToFfi(locale), localeCapacity, util.toPointer(status));
}

export function uloc_addLikelySubtags(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  maximizedLocaleID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  maximizedLocaleIDCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_addLikelySubtags(util.pstrToFfi(localeID), util.pstrToFfi(maximizedLocaleID), maximizedLocaleIDCapacity, util.toPointer(err));
}

export function uloc_minimizeSubtags(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  minimizedLocaleID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  minimizedLocaleIDCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_minimizeSubtags(util.pstrToFfi(localeID), util.pstrToFfi(minimizedLocaleID), minimizedLocaleIDCapacity, util.toPointer(err));
}

export function uloc_forLanguageTag(
  langtag: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  localeIDCapacity: number /* i32 */,
  parsedLength: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_forLanguageTag(util.pstrToFfi(langtag), util.pstrToFfi(localeID), localeIDCapacity, util.toPointer(parsedLength), util.toPointer(err));
}

export function uloc_toLanguageTag(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  langtag: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  langtagCapacity: number /* i32 */,
  strict: number /* i8 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uloc_toLanguageTag(util.pstrToFfi(localeID), util.pstrToFfi(langtag), langtagCapacity, strict, util.toPointer(err));
}

export function uloc_toUnicodeLocaleKey(
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_toUnicodeLocaleKey(util.pstrToFfi(keyword)));
}

export function uloc_toUnicodeLocaleType(
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  value: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_toUnicodeLocaleType(util.pstrToFfi(keyword), util.pstrToFfi(value)));
}

export function uloc_toLegacyKey(
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_toLegacyKey(util.pstrToFfi(keyword)));
}

export function uloc_toLegacyType(
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  value: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uloc_toLegacyType(util.pstrToFfi(keyword), util.pstrToFfi(value)));
}

export function ures_open(
  packageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_open(util.pstrToFfi(packageName), util.pstrToFfi(locale), util.toPointer(status));
}

export function ures_openDirect(
  packageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_openDirect(util.pstrToFfi(packageName), util.pstrToFfi(locale), util.toPointer(status));
}

export function ures_openU(
  packageName: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_openU(util.toPointer(packageName), util.pstrToFfi(locale), util.toPointer(status));
}

export function ures_close(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ures_close(util.toPointer(resourceBundle));
}

export function ures_getVersion(
  resB: Deno.PointerValue | Uint8Array /* ptr */,
  versionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ures_getVersion(util.toPointer(resB), util.toPointer(versionInfo));
}

export function ures_getLocaleByType(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocDataLocaleType /* Windows.Win32.Globalization.ULocDataLocaleType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ures_getLocaleByType(util.toPointer(resourceBundle), type, util.toPointer(status)));
}

export function ures_getString(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getString(util.toPointer(resourceBundle), util.toPointer(len), util.toPointer(status));
}

export function ures_getUTF8String(
  resB: Deno.PointerValue | Uint8Array /* ptr */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
  forceCopy: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ures_getUTF8String(util.toPointer(resB), util.pstrToFfi(dest), util.toPointer(length), forceCopy, util.toPointer(status)));
}

export function ures_getBinary(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getBinary(util.toPointer(resourceBundle), util.toPointer(len), util.toPointer(status));
}

export function ures_getIntVector(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getIntVector(util.toPointer(resourceBundle), util.toPointer(len), util.toPointer(status));
}

export function ures_getUInt(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libicu_dll.ures_getUInt(util.toPointer(resourceBundle), util.toPointer(status));
}

export function ures_getInt(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ures_getInt(util.toPointer(resourceBundle), util.toPointer(status));
}

export function ures_getSize(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ures_getSize(util.toPointer(resourceBundle));
}

export function ures_getType(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
): UResType /* Windows.Win32.Globalization.UResType */ {
  return libicu_dll.ures_getType(util.toPointer(resourceBundle));
}

export function ures_getKey(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ures_getKey(util.toPointer(resourceBundle)));
}

export function ures_resetIterator(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ures_resetIterator(util.toPointer(resourceBundle));
}

export function ures_hasNext(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ures_hasNext(util.toPointer(resourceBundle));
}

export function ures_getNextResource(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  fillIn: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getNextResource(util.toPointer(resourceBundle), util.toPointer(fillIn), util.toPointer(status));
}

export function ures_getNextString(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  key: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getNextString(util.toPointer(resourceBundle), util.toPointer(len), util.toPointer(key), util.toPointer(status));
}

export function ures_getByIndex(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  indexR: number /* i32 */,
  fillIn: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getByIndex(util.toPointer(resourceBundle), indexR, util.toPointer(fillIn), util.toPointer(status));
}

export function ures_getStringByIndex(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  indexS: number /* i32 */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getStringByIndex(util.toPointer(resourceBundle), indexS, util.toPointer(len), util.toPointer(status));
}

export function ures_getUTF8StringByIndex(
  resB: Deno.PointerValue | Uint8Array /* ptr */,
  stringIndex: number /* i32 */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
  forceCopy: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ures_getUTF8StringByIndex(util.toPointer(resB), stringIndex, util.pstrToFfi(dest), util.toPointer(pLength), forceCopy, util.toPointer(status)));
}

export function ures_getByKey(
  resourceBundle: Deno.PointerValue | Uint8Array /* ptr */,
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fillIn: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getByKey(util.toPointer(resourceBundle), util.pstrToFfi(key), util.toPointer(fillIn), util.toPointer(status));
}

export function ures_getStringByKey(
  resB: Deno.PointerValue | Uint8Array /* ptr */,
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_getStringByKey(util.toPointer(resB), util.pstrToFfi(key), util.toPointer(len), util.toPointer(status));
}

export function ures_getUTF8StringByKey(
  resB: Deno.PointerValue | Uint8Array /* ptr */,
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
  forceCopy: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ures_getUTF8StringByKey(util.toPointer(resB), util.pstrToFfi(key), util.pstrToFfi(dest), util.toPointer(pLength), forceCopy, util.toPointer(status)));
}

export function ures_openAvailableLocales(
  packageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ures_openAvailableLocales(util.pstrToFfi(packageName), util.toPointer(status));
}

export function uldn_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dialectHandling: UDialectHandling /* Windows.Win32.Globalization.UDialectHandling */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uldn_open(util.pstrToFfi(locale), dialectHandling, util.toPointer(pErrorCode));
}

export function uldn_close(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uldn_close(util.toPointer(ldn));
}

export function uldn_getLocale(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uldn_getLocale(util.toPointer(ldn)));
}

export function uldn_getDialectHandling(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
): UDialectHandling /* Windows.Win32.Globalization.UDialectHandling */ {
  return libicu_dll.uldn_getDialectHandling(util.toPointer(ldn));
}

export function uldn_localeDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_localeDisplayName(util.toPointer(ldn), util.pstrToFfi(locale), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_languageDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  lang: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_languageDisplayName(util.toPointer(ldn), util.pstrToFfi(lang), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_scriptDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  script: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_scriptDisplayName(util.toPointer(ldn), util.pstrToFfi(script), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_scriptCodeDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  scriptCode: UScriptCode /* Windows.Win32.Globalization.UScriptCode */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_scriptCodeDisplayName(util.toPointer(ldn), scriptCode, util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_regionDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  region: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_regionDisplayName(util.toPointer(ldn), util.pstrToFfi(region), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_variantDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  variant: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_variantDisplayName(util.toPointer(ldn), util.pstrToFfi(variant), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_keyDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_keyDisplayName(util.toPointer(ldn), util.pstrToFfi(key), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_keyValueDisplayName(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  value: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  maxResultSize: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uldn_keyValueDisplayName(util.toPointer(ldn), util.pstrToFfi(key), util.pstrToFfi(value), util.toPointer(result), maxResultSize, util.toPointer(pErrorCode));
}

export function uldn_openForContext(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  contexts: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uldn_openForContext(util.pstrToFfi(locale), util.toPointer(contexts), length, util.toPointer(pErrorCode));
}

export function uldn_getContext(
  ldn: Deno.PointerValue | Uint8Array /* ptr */,
  type: UDisplayContextType /* Windows.Win32.Globalization.UDisplayContextType */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): UDisplayContext /* Windows.Win32.Globalization.UDisplayContext */ {
  return libicu_dll.uldn_getContext(util.toPointer(ldn), type, util.toPointer(pErrorCode));
}

export function ucurr_forLocale(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  buff: Deno.PointerValue | Uint8Array /* ptr */,
  buffCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucurr_forLocale(util.pstrToFfi(locale), util.toPointer(buff), buffCapacity, util.toPointer(ec));
}

export function ucurr_register(
  isoCode: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucurr_register(util.toPointer(isoCode), util.pstrToFfi(locale), util.toPointer(status));
}

export function ucurr_unregister(
  key: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucurr_unregister(util.toPointer(key), util.toPointer(status));
}

export function ucurr_getName(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nameStyle: UCurrNameStyle /* Windows.Win32.Globalization.UCurrNameStyle */,
  isChoiceFormat: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucurr_getName(util.toPointer(currency), util.pstrToFfi(locale), nameStyle, util.toPointer(isChoiceFormat), util.toPointer(len), util.toPointer(ec));
}

export function ucurr_getPluralName(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  isChoiceFormat: Deno.PointerValue | Uint8Array /* ptr */,
  pluralCount: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucurr_getPluralName(util.toPointer(currency), util.pstrToFfi(locale), util.toPointer(isChoiceFormat), util.pstrToFfi(pluralCount), util.toPointer(len), util.toPointer(ec));
}

export function ucurr_getDefaultFractionDigits(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucurr_getDefaultFractionDigits(util.toPointer(currency), util.toPointer(ec));
}

export function ucurr_getDefaultFractionDigitsForUsage(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  usage: UCurrencyUsage /* Windows.Win32.Globalization.UCurrencyUsage */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucurr_getDefaultFractionDigitsForUsage(util.toPointer(currency), usage, util.toPointer(ec));
}

export function ucurr_getRoundingIncrement(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.ucurr_getRoundingIncrement(util.toPointer(currency), util.toPointer(ec));
}

export function ucurr_getRoundingIncrementForUsage(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  usage: UCurrencyUsage /* Windows.Win32.Globalization.UCurrencyUsage */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.ucurr_getRoundingIncrementForUsage(util.toPointer(currency), usage, util.toPointer(ec));
}

export function ucurr_openISOCurrencies(
  currType: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucurr_openISOCurrencies(currType, util.toPointer(pErrorCode));
}

export function ucurr_isAvailable(
  isoCode: Deno.PointerValue | Uint8Array /* ptr */,
  from: number /* f64 */,
  to: number /* f64 */,
  errorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucurr_isAvailable(util.toPointer(isoCode), from, to, util.toPointer(errorCode));
}

export function ucurr_countCurrencies(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  date: number /* f64 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucurr_countCurrencies(util.pstrToFfi(locale), date, util.toPointer(ec));
}

export function ucurr_forLocaleAndDate(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  date: number /* f64 */,
  index: number /* i32 */,
  buff: Deno.PointerValue | Uint8Array /* ptr */,
  buffCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucurr_forLocaleAndDate(util.pstrToFfi(locale), date, index, util.toPointer(buff), buffCapacity, util.toPointer(ec));
}

export function ucurr_getKeywordValuesForLocale(
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  commonlyUsed: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucurr_getKeywordValuesForLocale(util.pstrToFfi(key), util.pstrToFfi(locale), commonlyUsed, util.toPointer(status));
}

export function ucurr_getNumericCode(
  currency: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucurr_getNumericCode(util.toPointer(currency));
}

export function ucpmap_get(
  map: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* u32 */ {
  return libicu_dll.ucpmap_get(util.toPointer(map), c);
}

export function ucpmap_getRange(
  map: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  option: UCPMapRangeOption /* Windows.Win32.Globalization.UCPMapRangeOption */,
  surrogateValue: number /* u32 */,
  filter: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucpmap_getRange(util.toPointer(map), start, option, surrogateValue, util.toPointer(filter), util.toPointer(context), util.toPointer(pValue));
}

export function ucptrie_openFromBinary(
  type: UCPTrieType /* Windows.Win32.Globalization.UCPTrieType */,
  valueWidth: UCPTrieValueWidth /* Windows.Win32.Globalization.UCPTrieValueWidth */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  pActualLength: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucptrie_openFromBinary(type, valueWidth, util.toPointer(data), length, util.toPointer(pActualLength), util.toPointer(pErrorCode));
}

export function ucptrie_close(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucptrie_close(util.toPointer(trie));
}

export function ucptrie_getType(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
): UCPTrieType /* Windows.Win32.Globalization.UCPTrieType */ {
  return libicu_dll.ucptrie_getType(util.toPointer(trie));
}

export function ucptrie_getValueWidth(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
): UCPTrieValueWidth /* Windows.Win32.Globalization.UCPTrieValueWidth */ {
  return libicu_dll.ucptrie_getValueWidth(util.toPointer(trie));
}

export function ucptrie_get(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* u32 */ {
  return libicu_dll.ucptrie_get(util.toPointer(trie), c);
}

export function ucptrie_getRange(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  option: UCPMapRangeOption /* Windows.Win32.Globalization.UCPMapRangeOption */,
  surrogateValue: number /* u32 */,
  filter: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucptrie_getRange(util.toPointer(trie), start, option, surrogateValue, util.toPointer(filter), util.toPointer(context), util.toPointer(pValue));
}

export function ucptrie_toBinary(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucptrie_toBinary(util.toPointer(trie), util.toPointer(data), capacity, util.toPointer(pErrorCode));
}

export function ucptrie_internalSmallIndex(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucptrie_internalSmallIndex(util.toPointer(trie), c);
}

export function ucptrie_internalSmallU8Index(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  lt1: number /* i32 */,
  t2: number /* u8 */,
  t3: number /* u8 */,
): number /* i32 */ {
  return libicu_dll.ucptrie_internalSmallU8Index(util.toPointer(trie), lt1, t2, t3);
}

export function ucptrie_internalU8PrevIndex(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  start: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucptrie_internalU8PrevIndex(util.toPointer(trie), c, util.toPointer(start), util.toPointer(src));
}

export function umutablecptrie_open(
  initialValue: number /* u32 */,
  errorValue: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umutablecptrie_open(initialValue, errorValue, util.toPointer(pErrorCode));
}

export function umutablecptrie_clone(
  other: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umutablecptrie_clone(util.toPointer(other), util.toPointer(pErrorCode));
}

export function umutablecptrie_close(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umutablecptrie_close(util.toPointer(trie));
}

export function umutablecptrie_fromUCPMap(
  map: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umutablecptrie_fromUCPMap(util.toPointer(map), util.toPointer(pErrorCode));
}

export function umutablecptrie_fromUCPTrie(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umutablecptrie_fromUCPTrie(util.toPointer(trie), util.toPointer(pErrorCode));
}

export function umutablecptrie_get(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* u32 */ {
  return libicu_dll.umutablecptrie_get(util.toPointer(trie), c);
}

export function umutablecptrie_getRange(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  option: UCPMapRangeOption /* Windows.Win32.Globalization.UCPMapRangeOption */,
  surrogateValue: number /* u32 */,
  filter: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.umutablecptrie_getRange(util.toPointer(trie), start, option, surrogateValue, util.toPointer(filter), util.toPointer(context), util.toPointer(pValue));
}

export function umutablecptrie_set(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  value: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umutablecptrie_set(util.toPointer(trie), c, value, util.toPointer(pErrorCode));
}

export function umutablecptrie_setRange(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  end: number /* i32 */,
  value: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umutablecptrie_setRange(util.toPointer(trie), start, end, value, util.toPointer(pErrorCode));
}

export function umutablecptrie_buildImmutable(
  trie: Deno.PointerValue | Uint8Array /* ptr */,
  type: UCPTrieType /* Windows.Win32.Globalization.UCPTrieType */,
  valueWidth: UCPTrieValueWidth /* Windows.Win32.Globalization.UCPTrieValueWidth */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umutablecptrie_buildImmutable(util.toPointer(trie), type, valueWidth, util.toPointer(pErrorCode));
}

export function UCNV_FROM_U_CALLBACK_STOP(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  fromUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  codePoint: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_FROM_U_CALLBACK_STOP(util.toPointer(context), util.toPointer(fromUArgs), util.toPointer(codeUnits), length, codePoint, reason, util.toPointer(err));
}

export function UCNV_TO_U_CALLBACK_STOP(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  toUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_TO_U_CALLBACK_STOP(util.toPointer(context), util.toPointer(toUArgs), util.pstrToFfi(codeUnits), length, reason, util.toPointer(err));
}

export function UCNV_FROM_U_CALLBACK_SKIP(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  fromUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  codePoint: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_FROM_U_CALLBACK_SKIP(util.toPointer(context), util.toPointer(fromUArgs), util.toPointer(codeUnits), length, codePoint, reason, util.toPointer(err));
}

export function UCNV_FROM_U_CALLBACK_SUBSTITUTE(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  fromUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  codePoint: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_FROM_U_CALLBACK_SUBSTITUTE(util.toPointer(context), util.toPointer(fromUArgs), util.toPointer(codeUnits), length, codePoint, reason, util.toPointer(err));
}

export function UCNV_FROM_U_CALLBACK_ESCAPE(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  fromUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  codePoint: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_FROM_U_CALLBACK_ESCAPE(util.toPointer(context), util.toPointer(fromUArgs), util.toPointer(codeUnits), length, codePoint, reason, util.toPointer(err));
}

export function UCNV_TO_U_CALLBACK_SKIP(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  toUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_TO_U_CALLBACK_SKIP(util.toPointer(context), util.toPointer(toUArgs), util.pstrToFfi(codeUnits), length, reason, util.toPointer(err));
}

export function UCNV_TO_U_CALLBACK_SUBSTITUTE(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  toUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_TO_U_CALLBACK_SUBSTITUTE(util.toPointer(context), util.toPointer(toUArgs), util.pstrToFfi(codeUnits), length, reason, util.toPointer(err));
}

export function UCNV_TO_U_CALLBACK_ESCAPE(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  toUArgs: Deno.PointerValue | Uint8Array /* ptr */,
  codeUnits: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  reason: UConverterCallbackReason /* Windows.Win32.Globalization.UConverterCallbackReason */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.UCNV_TO_U_CALLBACK_ESCAPE(util.toPointer(context), util.toPointer(toUArgs), util.pstrToFfi(codeUnits), length, reason, util.toPointer(err));
}

export function ucnv_compareNames(
  name1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  name2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libicu_dll.ucnv_compareNames(util.pstrToFfi(name1), util.pstrToFfi(name2));
}

export function ucnv_open(
  converterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_open(util.pstrToFfi(converterName), util.toPointer(err));
}

export function ucnv_openU(
  name: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_openU(util.toPointer(name), util.toPointer(err));
}

export function ucnv_openCCSID(
  codepage: number /* i32 */,
  platform: UConverterPlatform /* Windows.Win32.Globalization.UConverterPlatform */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_openCCSID(codepage, platform, util.toPointer(err));
}

export function ucnv_openPackage(
  packageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  converterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_openPackage(util.pstrToFfi(packageName), util.pstrToFfi(converterName), util.toPointer(err));
}

export function ucnv_safeClone(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  stackBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_safeClone(util.toPointer(cnv), util.toPointer(stackBuffer), util.toPointer(pBufferSize), util.toPointer(status));
}

export function ucnv_close(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_close(util.toPointer(converter));
}

export function ucnv_getSubstChars(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  subChars: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getSubstChars(util.toPointer(converter), util.pstrToFfi(subChars), util.toPointer(len), util.toPointer(err));
}

export function ucnv_setSubstChars(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  subChars: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  len: number /* i8 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_setSubstChars(util.toPointer(converter), util.pstrToFfi(subChars), len, util.toPointer(err));
}

export function ucnv_setSubstString(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_setSubstString(util.toPointer(cnv), util.toPointer(s), length, util.toPointer(err));
}

export function ucnv_getInvalidChars(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  errBytes: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getInvalidChars(util.toPointer(converter), util.pstrToFfi(errBytes), util.toPointer(len), util.toPointer(err));
}

export function ucnv_getInvalidUChars(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  errUChars: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getInvalidUChars(util.toPointer(converter), util.toPointer(errUChars), util.toPointer(len), util.toPointer(err));
}

export function ucnv_reset(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_reset(util.toPointer(converter));
}

export function ucnv_resetToUnicode(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_resetToUnicode(util.toPointer(converter));
}

export function ucnv_resetFromUnicode(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_resetFromUnicode(util.toPointer(converter));
}

export function ucnv_getMaxCharSize(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucnv_getMaxCharSize(util.toPointer(converter));
}

export function ucnv_getMinCharSize(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucnv_getMinCharSize(util.toPointer(converter));
}

export function ucnv_getDisplayName(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  displayLocale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  displayName: Deno.PointerValue | Uint8Array /* ptr */,
  displayNameCapacity: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_getDisplayName(util.toPointer(converter), util.pstrToFfi(displayLocale), util.toPointer(displayName), displayNameCapacity, util.toPointer(err));
}

export function ucnv_getName(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getName(util.toPointer(converter), util.toPointer(err)));
}

export function ucnv_getCCSID(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_getCCSID(util.toPointer(converter), util.toPointer(err));
}

export function ucnv_getPlatform(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): UConverterPlatform /* Windows.Win32.Globalization.UConverterPlatform */ {
  return libicu_dll.ucnv_getPlatform(util.toPointer(converter), util.toPointer(err));
}

export function ucnv_getType(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
): UConverterType /* Windows.Win32.Globalization.UConverterType */ {
  return libicu_dll.ucnv_getType(util.toPointer(converter));
}

export function ucnv_getStarters(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  starters: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getStarters(util.toPointer(converter), util.toPointer(starters), util.toPointer(err));
}

export function ucnv_getUnicodeSet(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  setFillIn: Deno.PointerValue | Uint8Array /* ptr */,
  whichSet: UConverterUnicodeSet /* Windows.Win32.Globalization.UConverterUnicodeSet */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getUnicodeSet(util.toPointer(cnv), util.toPointer(setFillIn), whichSet, util.toPointer(pErrorCode));
}

export function ucnv_getToUCallBack(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  action: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getToUCallBack(util.toPointer(converter), util.toPointer(action), util.toPointer(context));
}

export function ucnv_getFromUCallBack(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  action: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getFromUCallBack(util.toPointer(converter), util.toPointer(action), util.toPointer(context));
}

export function ucnv_setToUCallBack(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  newAction: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UConverterToUCallback */,
  newContext: Deno.PointerValue | Uint8Array /* ptr */,
  oldAction: Deno.PointerValue | Uint8Array /* ptr */,
  oldContext: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_setToUCallBack(util.toPointer(converter), util.toPointer(newAction), util.toPointer(newContext), util.toPointer(oldAction), util.toPointer(oldContext), util.toPointer(err));
}

export function ucnv_setFromUCallBack(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  newAction: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UConverterFromUCallback */,
  newContext: Deno.PointerValue | Uint8Array /* ptr */,
  oldAction: Deno.PointerValue | Uint8Array /* ptr */,
  oldContext: Deno.PointerValue | Uint8Array /* ptr */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_setFromUCallBack(util.toPointer(converter), util.toPointer(newAction), util.toPointer(newContext), util.toPointer(oldAction), util.toPointer(oldContext), util.toPointer(err));
}

export function ucnv_fromUnicode(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLimit: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLimit: Deno.PointerValue | Uint8Array /* ptr */,
  offsets: Deno.PointerValue | Uint8Array /* ptr */,
  flush: number /* i8 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_fromUnicode(util.toPointer(converter), util.toPointer(target), util.pstrToFfi(targetLimit), util.toPointer(source), util.toPointer(sourceLimit), util.toPointer(offsets), flush, util.toPointer(err));
}

export function ucnv_toUnicode(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLimit: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLimit: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  offsets: Deno.PointerValue | Uint8Array /* ptr */,
  flush: number /* i8 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_toUnicode(util.toPointer(converter), util.toPointer(target), util.toPointer(targetLimit), util.toPointer(source), util.pstrToFfi(sourceLimit), util.toPointer(offsets), flush, util.toPointer(err));
}

export function ucnv_fromUChars(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_fromUChars(util.toPointer(cnv), util.pstrToFfi(dest), destCapacity, util.toPointer(src), srcLength, util.toPointer(pErrorCode));
}

export function ucnv_toUChars(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_toUChars(util.toPointer(cnv), util.toPointer(dest), destCapacity, util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function ucnv_getNextUChar(
  converter: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLimit: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_getNextUChar(util.toPointer(converter), util.toPointer(source), util.pstrToFfi(sourceLimit), util.toPointer(err));
}

export function ucnv_convertEx(
  targetCnv: Deno.PointerValue | Uint8Array /* ptr */,
  sourceCnv: Deno.PointerValue | Uint8Array /* ptr */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLimit: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLimit: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pivotStart: Deno.PointerValue | Uint8Array /* ptr */,
  pivotSource: Deno.PointerValue | Uint8Array /* ptr */,
  pivotTarget: Deno.PointerValue | Uint8Array /* ptr */,
  pivotLimit: Deno.PointerValue | Uint8Array /* ptr */,
  reset: number /* i8 */,
  flush: number /* i8 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_convertEx(util.toPointer(targetCnv), util.toPointer(sourceCnv), util.toPointer(target), util.pstrToFfi(targetLimit), util.toPointer(source), util.pstrToFfi(sourceLimit), util.toPointer(pivotStart), util.toPointer(pivotSource), util.toPointer(pivotTarget), util.toPointer(pivotLimit), reset, flush, util.toPointer(pErrorCode));
}

export function ucnv_convert(
  toConverterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fromConverterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  target: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  targetCapacity: number /* i32 */,
  source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  sourceLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_convert(util.pstrToFfi(toConverterName), util.pstrToFfi(fromConverterName), util.pstrToFfi(target), targetCapacity, util.pstrToFfi(source), sourceLength, util.toPointer(pErrorCode));
}

export function ucnv_toAlgorithmic(
  algorithmicType: UConverterType /* Windows.Win32.Globalization.UConverterType */,
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  target: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  targetCapacity: number /* i32 */,
  source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  sourceLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_toAlgorithmic(algorithmicType, util.toPointer(cnv), util.pstrToFfi(target), targetCapacity, util.pstrToFfi(source), sourceLength, util.toPointer(pErrorCode));
}

export function ucnv_fromAlgorithmic(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  algorithmicType: UConverterType /* Windows.Win32.Globalization.UConverterType */,
  target: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  targetCapacity: number /* i32 */,
  source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  sourceLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_fromAlgorithmic(util.toPointer(cnv), algorithmicType, util.pstrToFfi(target), targetCapacity, util.pstrToFfi(source), sourceLength, util.toPointer(pErrorCode));
}

export function ucnv_flushCache(): number /* i32 */ {
  return libicu_dll.ucnv_flushCache();
}

export function ucnv_countAvailable(): number /* i32 */ {
  return libicu_dll.ucnv_countAvailable();
}

export function ucnv_getAvailableName(
  n: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getAvailableName(n));
}

export function ucnv_openAllNames(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_openAllNames(util.toPointer(pErrorCode));
}

export function ucnv_countAliases(
  alias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u16 */ {
  return libicu_dll.ucnv_countAliases(util.pstrToFfi(alias), util.toPointer(pErrorCode));
}

export function ucnv_getAlias(
  alias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  n: number /* u16 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getAlias(util.pstrToFfi(alias), n, util.toPointer(pErrorCode)));
}

export function ucnv_getAliases(
  alias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  aliases: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_getAliases(util.pstrToFfi(alias), util.toPointer(aliases), util.toPointer(pErrorCode));
}

export function ucnv_openStandardNames(
  convName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  standard: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnv_openStandardNames(util.pstrToFfi(convName), util.pstrToFfi(standard), util.toPointer(pErrorCode));
}

export function ucnv_countStandards(): number /* u16 */ {
  return libicu_dll.ucnv_countStandards();
}

export function ucnv_getStandard(
  n: number /* u16 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getStandard(n, util.toPointer(pErrorCode)));
}

export function ucnv_getStandardName(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  standard: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getStandardName(util.pstrToFfi(name), util.pstrToFfi(standard), util.toPointer(pErrorCode)));
}

export function ucnv_getCanonicalName(
  alias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  standard: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getCanonicalName(util.pstrToFfi(alias), util.pstrToFfi(standard), util.toPointer(pErrorCode)));
}

export function ucnv_getDefaultName(): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_getDefaultName());
}

export function ucnv_setDefaultName(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libicu_dll.ucnv_setDefaultName(util.pstrToFfi(name));
}

export function ucnv_fixFileSeparator(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLen: number /* i32 */,
): void /* void */ {
  return libicu_dll.ucnv_fixFileSeparator(util.toPointer(cnv), util.toPointer(source), sourceLen);
}

export function ucnv_isAmbiguous(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucnv_isAmbiguous(util.toPointer(cnv));
}

export function ucnv_setFallback(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  usesFallback: number /* i8 */,
): void /* void */ {
  return libicu_dll.ucnv_setFallback(util.toPointer(cnv), usesFallback);
}

export function ucnv_usesFallback(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucnv_usesFallback(util.toPointer(cnv));
}

export function ucnv_detectUnicodeSignature(
  source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  sourceLength: number /* i32 */,
  signatureLength: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucnv_detectUnicodeSignature(util.pstrToFfi(source), sourceLength, util.toPointer(signatureLength), util.toPointer(pErrorCode)));
}

export function ucnv_fromUCountPending(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_fromUCountPending(util.toPointer(cnv), util.toPointer(status));
}

export function ucnv_toUCountPending(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnv_toUCountPending(util.toPointer(cnv), util.toPointer(status));
}

export function ucnv_isFixedWidth(
  cnv: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucnv_isFixedWidth(util.toPointer(cnv), util.toPointer(status));
}

export function ucnv_cbFromUWriteBytes(
  args: Deno.PointerValue | Uint8Array /* ptr */,
  source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  offsetIndex: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_cbFromUWriteBytes(util.toPointer(args), util.pstrToFfi(source), length, offsetIndex, util.toPointer(err));
}

export function ucnv_cbFromUWriteSub(
  args: Deno.PointerValue | Uint8Array /* ptr */,
  offsetIndex: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_cbFromUWriteSub(util.toPointer(args), offsetIndex, util.toPointer(err));
}

export function ucnv_cbFromUWriteUChars(
  args: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLimit: Deno.PointerValue | Uint8Array /* ptr */,
  offsetIndex: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_cbFromUWriteUChars(util.toPointer(args), util.toPointer(source), util.toPointer(sourceLimit), offsetIndex, util.toPointer(err));
}

export function ucnv_cbToUWriteUChars(
  args: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  offsetIndex: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_cbToUWriteUChars(util.toPointer(args), util.toPointer(source), length, offsetIndex, util.toPointer(err));
}

export function ucnv_cbToUWriteSub(
  args: Deno.PointerValue | Uint8Array /* ptr */,
  offsetIndex: number /* i32 */,
  err: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnv_cbToUWriteSub(util.toPointer(args), offsetIndex, util.toPointer(err));
}

export function u_init(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_init(util.toPointer(status));
}

export function u_cleanup(): void /* void */ {
  return libicu_dll.u_cleanup();
}

export function u_setMemoryFunctions(
  context: Deno.PointerValue | Uint8Array /* ptr */,
  a: Deno.PointerValue | Uint8Array /* ptr */,
  r: Deno.PointerValue | Uint8Array /* ptr */,
  f: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_setMemoryFunctions(util.toPointer(context), util.toPointer(a), util.toPointer(r), util.toPointer(f), util.toPointer(status));
}

export function u_catopen(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_catopen(util.pstrToFfi(name), util.pstrToFfi(locale), util.toPointer(ec));
}

export function u_catclose(
  catd: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_catclose(util.toPointer(catd));
}

export function u_catgets(
  catd: Deno.PointerValue | Uint8Array /* ptr */,
  set_num: number /* i32 */,
  msg_num: number /* i32 */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_catgets(util.toPointer(catd), set_num, msg_num, util.toPointer(s), util.toPointer(len), util.toPointer(ec));
}

export function u_hasBinaryProperty(
  c: number /* i32 */,
  which: UProperty /* Windows.Win32.Globalization.UProperty */,
): number /* i8 */ {
  return libicu_dll.u_hasBinaryProperty(c, which);
}

export function u_getBinaryPropertySet(
  property: UProperty /* Windows.Win32.Globalization.UProperty */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_getBinaryPropertySet(property, util.toPointer(pErrorCode));
}

export function u_isUAlphabetic(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isUAlphabetic(c);
}

export function u_isULowercase(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isULowercase(c);
}

export function u_isUUppercase(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isUUppercase(c);
}

export function u_isUWhiteSpace(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isUWhiteSpace(c);
}

export function u_getIntPropertyValue(
  c: number /* i32 */,
  which: UProperty /* Windows.Win32.Globalization.UProperty */,
): number /* i32 */ {
  return libicu_dll.u_getIntPropertyValue(c, which);
}

export function u_getIntPropertyMinValue(
  which: UProperty /* Windows.Win32.Globalization.UProperty */,
): number /* i32 */ {
  return libicu_dll.u_getIntPropertyMinValue(which);
}

export function u_getIntPropertyMaxValue(
  which: UProperty /* Windows.Win32.Globalization.UProperty */,
): number /* i32 */ {
  return libicu_dll.u_getIntPropertyMaxValue(which);
}

export function u_getIntPropertyMap(
  property: UProperty /* Windows.Win32.Globalization.UProperty */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_getIntPropertyMap(property, util.toPointer(pErrorCode));
}

export function u_getNumericValue(
  c: number /* i32 */,
): number /* f64 */ {
  return libicu_dll.u_getNumericValue(c);
}

export function u_islower(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_islower(c);
}

export function u_isupper(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isupper(c);
}

export function u_istitle(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_istitle(c);
}

export function u_isdigit(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isdigit(c);
}

export function u_isalpha(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isalpha(c);
}

export function u_isalnum(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isalnum(c);
}

export function u_isxdigit(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isxdigit(c);
}

export function u_ispunct(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_ispunct(c);
}

export function u_isgraph(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isgraph(c);
}

export function u_isblank(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isblank(c);
}

export function u_isdefined(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isdefined(c);
}

export function u_isspace(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isspace(c);
}

export function u_isJavaSpaceChar(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isJavaSpaceChar(c);
}

export function u_isWhitespace(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isWhitespace(c);
}

export function u_iscntrl(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_iscntrl(c);
}

export function u_isISOControl(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isISOControl(c);
}

export function u_isprint(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isprint(c);
}

export function u_isbase(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isbase(c);
}

export function u_charDirection(
  c: number /* i32 */,
): UCharDirection /* Windows.Win32.Globalization.UCharDirection */ {
  return libicu_dll.u_charDirection(c);
}

export function u_isMirrored(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isMirrored(c);
}

export function u_charMirror(
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_charMirror(c);
}

export function u_getBidiPairedBracket(
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_getBidiPairedBracket(c);
}

export function u_charType(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_charType(c);
}

export function u_enumCharTypes(
  enumRange: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_enumCharTypes(util.toPointer(enumRange), util.toPointer(context));
}

export function u_getCombiningClass(
  c: number /* i32 */,
): number /* u8 */ {
  return libicu_dll.u_getCombiningClass(c);
}

export function u_charDigitValue(
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_charDigitValue(c);
}

export function ublock_getCode(
  c: number /* i32 */,
): UBlockCode /* Windows.Win32.Globalization.UBlockCode */ {
  return libicu_dll.ublock_getCode(c);
}

export function u_charName(
  code: number /* i32 */,
  nameChoice: UCharNameChoice /* Windows.Win32.Globalization.UCharNameChoice */,
  buffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bufferLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_charName(code, nameChoice, util.pstrToFfi(buffer), bufferLength, util.toPointer(pErrorCode));
}

export function u_charFromName(
  nameChoice: UCharNameChoice /* Windows.Win32.Globalization.UCharNameChoice */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_charFromName(nameChoice, util.pstrToFfi(name), util.toPointer(pErrorCode));
}

export function u_enumCharNames(
  start: number /* i32 */,
  limit: number /* i32 */,
  fn: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  nameChoice: UCharNameChoice /* Windows.Win32.Globalization.UCharNameChoice */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_enumCharNames(start, limit, util.toPointer(fn), util.toPointer(context), nameChoice, util.toPointer(pErrorCode));
}

export function u_getPropertyName(
  property: UProperty /* Windows.Win32.Globalization.UProperty */,
  nameChoice: UPropertyNameChoice /* Windows.Win32.Globalization.UPropertyNameChoice */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_getPropertyName(property, nameChoice));
}

export function u_getPropertyEnum(
  alias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): UProperty /* Windows.Win32.Globalization.UProperty */ {
  return libicu_dll.u_getPropertyEnum(util.pstrToFfi(alias));
}

export function u_getPropertyValueName(
  property: UProperty /* Windows.Win32.Globalization.UProperty */,
  value: number /* i32 */,
  nameChoice: UPropertyNameChoice /* Windows.Win32.Globalization.UPropertyNameChoice */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_getPropertyValueName(property, value, nameChoice));
}

export function u_getPropertyValueEnum(
  property: UProperty /* Windows.Win32.Globalization.UProperty */,
  alias: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libicu_dll.u_getPropertyValueEnum(property, util.pstrToFfi(alias));
}

export function u_isIDStart(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isIDStart(c);
}

export function u_isIDPart(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isIDPart(c);
}

export function u_isIDIgnorable(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isIDIgnorable(c);
}

export function u_isJavaIDStart(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isJavaIDStart(c);
}

export function u_isJavaIDPart(
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_isJavaIDPart(c);
}

export function u_tolower(
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_tolower(c);
}

export function u_toupper(
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_toupper(c);
}

export function u_totitle(
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_totitle(c);
}

export function u_foldCase(
  c: number /* i32 */,
  options: number /* u32 */,
): number /* i32 */ {
  return libicu_dll.u_foldCase(c, options);
}

export function u_digit(
  ch: number /* i32 */,
  radix: number /* i8 */,
): number /* i32 */ {
  return libicu_dll.u_digit(ch, radix);
}

export function u_forDigit(
  digit: number /* i32 */,
  radix: number /* i8 */,
): number /* i32 */ {
  return libicu_dll.u_forDigit(digit, radix);
}

export function u_charAge(
  c: number /* i32 */,
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_charAge(c, util.toPointer(versionArray));
}

export function u_getUnicodeVersion(
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_getUnicodeVersion(util.toPointer(versionArray));
}

export function u_getFC_NFKC_Closure(
  c: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_getFC_NFKC_Closure(c, util.toPointer(dest), destCapacity, util.toPointer(pErrorCode));
}

export function ubidi_open(): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubidi_open();
}

export function ubidi_openSized(
  maxLength: number /* i32 */,
  maxRunCount: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubidi_openSized(maxLength, maxRunCount, util.toPointer(pErrorCode));
}

export function ubidi_close(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_close(util.toPointer(pBiDi));
}

export function ubidi_setInverse(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  isInverse: number /* i8 */,
): void /* void */ {
  return libicu_dll.ubidi_setInverse(util.toPointer(pBiDi), isInverse);
}

export function ubidi_isInverse(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ubidi_isInverse(util.toPointer(pBiDi));
}

export function ubidi_orderParagraphsLTR(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  orderParagraphsLTR: number /* i8 */,
): void /* void */ {
  return libicu_dll.ubidi_orderParagraphsLTR(util.toPointer(pBiDi), orderParagraphsLTR);
}

export function ubidi_isOrderParagraphsLTR(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ubidi_isOrderParagraphsLTR(util.toPointer(pBiDi));
}

export function ubidi_setReorderingMode(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  reorderingMode: UBiDiReorderingMode /* Windows.Win32.Globalization.UBiDiReorderingMode */,
): void /* void */ {
  return libicu_dll.ubidi_setReorderingMode(util.toPointer(pBiDi), reorderingMode);
}

export function ubidi_getReorderingMode(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): UBiDiReorderingMode /* Windows.Win32.Globalization.UBiDiReorderingMode */ {
  return libicu_dll.ubidi_getReorderingMode(util.toPointer(pBiDi));
}

export function ubidi_setReorderingOptions(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  reorderingOptions: number /* u32 */,
): void /* void */ {
  return libicu_dll.ubidi_setReorderingOptions(util.toPointer(pBiDi), reorderingOptions);
}

export function ubidi_getReorderingOptions(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libicu_dll.ubidi_getReorderingOptions(util.toPointer(pBiDi));
}

export function ubidi_setContext(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  prologue: Deno.PointerValue | Uint8Array /* ptr */,
  proLength: number /* i32 */,
  epilogue: Deno.PointerValue | Uint8Array /* ptr */,
  epiLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_setContext(util.toPointer(pBiDi), util.toPointer(prologue), proLength, util.toPointer(epilogue), epiLength, util.toPointer(pErrorCode));
}

export function ubidi_setPara(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  paraLevel: number /* u8 */,
  embeddingLevels: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_setPara(util.toPointer(pBiDi), util.toPointer(text), length, paraLevel, util.toPointer(embeddingLevels), util.toPointer(pErrorCode));
}

export function ubidi_setLine(
  pParaBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  limit: number /* i32 */,
  pLineBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_setLine(util.toPointer(pParaBiDi), start, limit, util.toPointer(pLineBiDi), util.toPointer(pErrorCode));
}

export function ubidi_getDirection(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): UBiDiDirection /* Windows.Win32.Globalization.UBiDiDirection */ {
  return libicu_dll.ubidi_getDirection(util.toPointer(pBiDi));
}

export function ubidi_getBaseDirection(
  text: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): UBiDiDirection /* Windows.Win32.Globalization.UBiDiDirection */ {
  return libicu_dll.ubidi_getBaseDirection(util.toPointer(text), length);
}

export function ubidi_getText(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubidi_getText(util.toPointer(pBiDi));
}

export function ubidi_getLength(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_getLength(util.toPointer(pBiDi));
}

export function ubidi_getParaLevel(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u8 */ {
  return libicu_dll.ubidi_getParaLevel(util.toPointer(pBiDi));
}

export function ubidi_countParagraphs(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_countParagraphs(util.toPointer(pBiDi));
}

export function ubidi_getParagraph(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  charIndex: number /* i32 */,
  pParaStart: Deno.PointerValue | Uint8Array /* ptr */,
  pParaLimit: Deno.PointerValue | Uint8Array /* ptr */,
  pParaLevel: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_getParagraph(util.toPointer(pBiDi), charIndex, util.toPointer(pParaStart), util.toPointer(pParaLimit), util.toPointer(pParaLevel), util.toPointer(pErrorCode));
}

export function ubidi_getParagraphByIndex(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  paraIndex: number /* i32 */,
  pParaStart: Deno.PointerValue | Uint8Array /* ptr */,
  pParaLimit: Deno.PointerValue | Uint8Array /* ptr */,
  pParaLevel: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_getParagraphByIndex(util.toPointer(pBiDi), paraIndex, util.toPointer(pParaStart), util.toPointer(pParaLimit), util.toPointer(pParaLevel), util.toPointer(pErrorCode));
}

export function ubidi_getLevelAt(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  charIndex: number /* i32 */,
): number /* u8 */ {
  return libicu_dll.ubidi_getLevelAt(util.toPointer(pBiDi), charIndex);
}

export function ubidi_getLevels(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubidi_getLevels(util.toPointer(pBiDi), util.toPointer(pErrorCode));
}

export function ubidi_getLogicalRun(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  logicalPosition: number /* i32 */,
  pLogicalLimit: Deno.PointerValue | Uint8Array /* ptr */,
  pLevel: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_getLogicalRun(util.toPointer(pBiDi), logicalPosition, util.toPointer(pLogicalLimit), util.toPointer(pLevel));
}

export function ubidi_countRuns(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_countRuns(util.toPointer(pBiDi), util.toPointer(pErrorCode));
}

export function ubidi_getVisualRun(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  runIndex: number /* i32 */,
  pLogicalStart: Deno.PointerValue | Uint8Array /* ptr */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
): UBiDiDirection /* Windows.Win32.Globalization.UBiDiDirection */ {
  return libicu_dll.ubidi_getVisualRun(util.toPointer(pBiDi), runIndex, util.toPointer(pLogicalStart), util.toPointer(pLength));
}

export function ubidi_getVisualIndex(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  logicalIndex: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_getVisualIndex(util.toPointer(pBiDi), logicalIndex, util.toPointer(pErrorCode));
}

export function ubidi_getLogicalIndex(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  visualIndex: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_getLogicalIndex(util.toPointer(pBiDi), visualIndex, util.toPointer(pErrorCode));
}

export function ubidi_getLogicalMap(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  indexMap: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_getLogicalMap(util.toPointer(pBiDi), util.toPointer(indexMap), util.toPointer(pErrorCode));
}

export function ubidi_getVisualMap(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  indexMap: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_getVisualMap(util.toPointer(pBiDi), util.toPointer(indexMap), util.toPointer(pErrorCode));
}

export function ubidi_reorderLogical(
  levels: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  indexMap: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_reorderLogical(util.toPointer(levels), length, util.toPointer(indexMap));
}

export function ubidi_reorderVisual(
  levels: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  indexMap: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_reorderVisual(util.toPointer(levels), length, util.toPointer(indexMap));
}

export function ubidi_invertMap(
  srcMap: Deno.PointerValue | Uint8Array /* ptr */,
  destMap: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.ubidi_invertMap(util.toPointer(srcMap), util.toPointer(destMap), length);
}

export function ubidi_getProcessedLength(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_getProcessedLength(util.toPointer(pBiDi));
}

export function ubidi_getResultLength(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_getResultLength(util.toPointer(pBiDi));
}

export function ubidi_getCustomizedClass(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): UCharDirection /* Windows.Win32.Globalization.UCharDirection */ {
  return libicu_dll.ubidi_getCustomizedClass(util.toPointer(pBiDi), c);
}

export function ubidi_setClassCallback(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  newFn: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UBiDiClassCallback */,
  newContext: Deno.PointerValue | Uint8Array /* ptr */,
  oldFn: Deno.PointerValue | Uint8Array /* ptr */,
  oldContext: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_setClassCallback(util.toPointer(pBiDi), util.toPointer(newFn), util.toPointer(newContext), util.toPointer(oldFn), util.toPointer(oldContext), util.toPointer(pErrorCode));
}

export function ubidi_getClassCallback(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  fn: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubidi_getClassCallback(util.toPointer(pBiDi), util.toPointer(fn), util.toPointer(context));
}

export function ubidi_writeReordered(
  pBiDi: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destSize: number /* i32 */,
  options: number /* u16 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_writeReordered(util.toPointer(pBiDi), util.toPointer(dest), destSize, options, util.toPointer(pErrorCode));
}

export function ubidi_writeReverse(
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destSize: number /* i32 */,
  options: number /* u16 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubidi_writeReverse(util.toPointer(src), srcLength, util.toPointer(dest), destSize, options, util.toPointer(pErrorCode));
}

export function ubiditransform_transform(
  pBiDiTransform: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destSize: number /* i32 */,
  inParaLevel: number /* u8 */,
  inOrder: UBiDiOrder /* Windows.Win32.Globalization.UBiDiOrder */,
  outParaLevel: number /* u8 */,
  outOrder: UBiDiOrder /* Windows.Win32.Globalization.UBiDiOrder */,
  doMirroring: UBiDiMirroring /* Windows.Win32.Globalization.UBiDiMirroring */,
  shapingOptions: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libicu_dll.ubiditransform_transform(util.toPointer(pBiDiTransform), util.toPointer(src), srcLength, util.toPointer(dest), destSize, inParaLevel, inOrder, outParaLevel, outOrder, doMirroring, shapingOptions, util.toPointer(pErrorCode));
}

export function ubiditransform_open(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubiditransform_open(util.toPointer(pErrorCode));
}

export function ubiditransform_close(
  pBidiTransform: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubiditransform_close(util.toPointer(pBidiTransform));
}

export function utext_close(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utext_close(util.toPointer(ut));
}

export function utext_openUTF8(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  s: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utext_openUTF8(util.toPointer(ut), util.pstrToFfi(s), length, util.toPointer(status));
}

export function utext_openUChars(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utext_openUChars(util.toPointer(ut), util.toPointer(s), length, util.toPointer(status));
}

export function utext_clone(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  deep: number /* i8 */,
  readOnly: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utext_clone(util.toPointer(dest), util.toPointer(src), deep, readOnly, util.toPointer(status));
}

export function utext_equals(
  a: Deno.PointerValue | Uint8Array /* ptr */,
  b: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.utext_equals(util.toPointer(a), util.toPointer(b));
}

export function utext_nativeLength(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.utext_nativeLength(util.toPointer(ut));
}

export function utext_isLengthExpensive(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.utext_isLengthExpensive(util.toPointer(ut));
}

export function utext_char32At(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeIndex: Deno.PointerValue /* i64 */,
): number /* i32 */ {
  return libicu_dll.utext_char32At(util.toPointer(ut), nativeIndex);
}

export function utext_current32(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utext_current32(util.toPointer(ut));
}

export function utext_next32(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utext_next32(util.toPointer(ut));
}

export function utext_previous32(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utext_previous32(util.toPointer(ut));
}

export function utext_next32From(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeIndex: Deno.PointerValue /* i64 */,
): number /* i32 */ {
  return libicu_dll.utext_next32From(util.toPointer(ut), nativeIndex);
}

export function utext_previous32From(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeIndex: Deno.PointerValue /* i64 */,
): number /* i32 */ {
  return libicu_dll.utext_previous32From(util.toPointer(ut), nativeIndex);
}

export function utext_getNativeIndex(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.utext_getNativeIndex(util.toPointer(ut));
}

export function utext_setNativeIndex(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeIndex: Deno.PointerValue /* i64 */,
): void /* void */ {
  return libicu_dll.utext_setNativeIndex(util.toPointer(ut), nativeIndex);
}

export function utext_moveIndex32(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  delta: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.utext_moveIndex32(util.toPointer(ut), delta);
}

export function utext_getPreviousNativeIndex(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.utext_getPreviousNativeIndex(util.toPointer(ut));
}

export function utext_extract(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeStart: Deno.PointerValue /* i64 */,
  nativeLimit: Deno.PointerValue /* i64 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utext_extract(util.toPointer(ut), nativeStart, nativeLimit, util.toPointer(dest), destCapacity, util.toPointer(status));
}

export function utext_isWritable(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.utext_isWritable(util.toPointer(ut));
}

export function utext_hasMetaData(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.utext_hasMetaData(util.toPointer(ut));
}

export function utext_replace(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeStart: Deno.PointerValue /* i64 */,
  nativeLimit: Deno.PointerValue /* i64 */,
  replacementText: Deno.PointerValue | Uint8Array /* ptr */,
  replacementLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utext_replace(util.toPointer(ut), nativeStart, nativeLimit, util.toPointer(replacementText), replacementLength, util.toPointer(status));
}

export function utext_copy(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  nativeStart: Deno.PointerValue /* i64 */,
  nativeLimit: Deno.PointerValue /* i64 */,
  destIndex: Deno.PointerValue /* i64 */,
  move: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utext_copy(util.toPointer(ut), nativeStart, nativeLimit, destIndex, move, util.toPointer(status));
}

export function utext_freeze(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utext_freeze(util.toPointer(ut));
}

export function utext_setup(
  ut: Deno.PointerValue | Uint8Array /* ptr */,
  extraSpace: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utext_setup(util.toPointer(ut), extraSpace, util.toPointer(status));
}

export function uset_openEmpty(): Deno.PointerValue /* ptr */ {
  return libicu_dll.uset_openEmpty();
}

export function uset_open(
  start: number /* i32 */,
  end: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uset_open(start, end);
}

export function uset_openPattern(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uset_openPattern(util.toPointer(pattern), patternLength, util.toPointer(ec));
}

export function uset_openPatternOptions(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  options: number /* u32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uset_openPatternOptions(util.toPointer(pattern), patternLength, options, util.toPointer(ec));
}

export function uset_close(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_close(util.toPointer(set));
}

export function uset_clone(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uset_clone(util.toPointer(set));
}

export function uset_isFrozen(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_isFrozen(util.toPointer(set));
}

export function uset_freeze(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_freeze(util.toPointer(set));
}

export function uset_cloneAsThawed(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uset_cloneAsThawed(util.toPointer(set));
}

export function uset_set(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  end: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_set(util.toPointer(set), start, end);
}

export function uset_applyPattern(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  options: number /* u32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_applyPattern(util.toPointer(set), util.toPointer(pattern), patternLength, options, util.toPointer(status));
}

export function uset_applyIntPropertyValue(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  prop: UProperty /* Windows.Win32.Globalization.UProperty */,
  value: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_applyIntPropertyValue(util.toPointer(set), prop, value, util.toPointer(ec));
}

export function uset_applyPropertyAlias(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  prop: Deno.PointerValue | Uint8Array /* ptr */,
  propLength: number /* i32 */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
  valueLength: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_applyPropertyAlias(util.toPointer(set), util.toPointer(prop), propLength, util.toPointer(value), valueLength, util.toPointer(ec));
}

export function uset_resemblesPattern(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  pos: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_resemblesPattern(util.toPointer(pattern), patternLength, pos);
}

export function uset_toPattern(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  escapeUnprintable: number /* i8 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_toPattern(util.toPointer(set), util.toPointer(result), resultCapacity, escapeUnprintable, util.toPointer(ec));
}

export function uset_add(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_add(util.toPointer(set), c);
}

export function uset_addAll(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  additionalSet: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_addAll(util.toPointer(set), util.toPointer(additionalSet));
}

export function uset_addRange(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  end: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_addRange(util.toPointer(set), start, end);
}

export function uset_addString(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  str: Deno.PointerValue | Uint8Array /* ptr */,
  strLen: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_addString(util.toPointer(set), util.toPointer(str), strLen);
}

export function uset_addAllCodePoints(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  str: Deno.PointerValue | Uint8Array /* ptr */,
  strLen: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_addAllCodePoints(util.toPointer(set), util.toPointer(str), strLen);
}

export function uset_remove(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_remove(util.toPointer(set), c);
}

export function uset_removeRange(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  end: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_removeRange(util.toPointer(set), start, end);
}

export function uset_removeString(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  str: Deno.PointerValue | Uint8Array /* ptr */,
  strLen: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_removeString(util.toPointer(set), util.toPointer(str), strLen);
}

export function uset_removeAll(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  removeSet: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_removeAll(util.toPointer(set), util.toPointer(removeSet));
}

export function uset_retain(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  end: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_retain(util.toPointer(set), start, end);
}

export function uset_retainAll(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  retain: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_retainAll(util.toPointer(set), util.toPointer(retain));
}

export function uset_compact(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_compact(util.toPointer(set));
}

export function uset_complement(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_complement(util.toPointer(set));
}

export function uset_complementAll(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  complement: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_complementAll(util.toPointer(set), util.toPointer(complement));
}

export function uset_clear(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_clear(util.toPointer(set));
}

export function uset_closeOver(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  attributes: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_closeOver(util.toPointer(set), attributes);
}

export function uset_removeAllStrings(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uset_removeAllStrings(util.toPointer(set));
}

export function uset_isEmpty(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_isEmpty(util.toPointer(set));
}

export function uset_contains(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_contains(util.toPointer(set), c);
}

export function uset_containsRange(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  end: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_containsRange(util.toPointer(set), start, end);
}

export function uset_containsString(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  str: Deno.PointerValue | Uint8Array /* ptr */,
  strLen: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_containsString(util.toPointer(set), util.toPointer(str), strLen);
}

export function uset_indexOf(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.uset_indexOf(util.toPointer(set), c);
}

export function uset_charAt(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  charIndex: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.uset_charAt(util.toPointer(set), charIndex);
}

export function uset_size(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_size(util.toPointer(set));
}

export function uset_getItemCount(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_getItemCount(util.toPointer(set));
}

export function uset_getItem(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  itemIndex: number /* i32 */,
  start: Deno.PointerValue | Uint8Array /* ptr */,
  end: Deno.PointerValue | Uint8Array /* ptr */,
  str: Deno.PointerValue | Uint8Array /* ptr */,
  strCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_getItem(util.toPointer(set), itemIndex, util.toPointer(start), util.toPointer(end), util.toPointer(str), strCapacity, util.toPointer(ec));
}

export function uset_containsAll(
  set1: Deno.PointerValue | Uint8Array /* ptr */,
  set2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_containsAll(util.toPointer(set1), util.toPointer(set2));
}

export function uset_containsAllCodePoints(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  str: Deno.PointerValue | Uint8Array /* ptr */,
  strLen: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_containsAllCodePoints(util.toPointer(set), util.toPointer(str), strLen);
}

export function uset_containsNone(
  set1: Deno.PointerValue | Uint8Array /* ptr */,
  set2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_containsNone(util.toPointer(set1), util.toPointer(set2));
}

export function uset_containsSome(
  set1: Deno.PointerValue | Uint8Array /* ptr */,
  set2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_containsSome(util.toPointer(set1), util.toPointer(set2));
}

export function uset_span(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  spanCondition: USetSpanCondition /* Windows.Win32.Globalization.USetSpanCondition */,
): number /* i32 */ {
  return libicu_dll.uset_span(util.toPointer(set), util.toPointer(s), length, spanCondition);
}

export function uset_spanBack(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  spanCondition: USetSpanCondition /* Windows.Win32.Globalization.USetSpanCondition */,
): number /* i32 */ {
  return libicu_dll.uset_spanBack(util.toPointer(set), util.toPointer(s), length, spanCondition);
}

export function uset_spanUTF8(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  s: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  spanCondition: USetSpanCondition /* Windows.Win32.Globalization.USetSpanCondition */,
): number /* i32 */ {
  return libicu_dll.uset_spanUTF8(util.toPointer(set), util.pstrToFfi(s), length, spanCondition);
}

export function uset_spanBackUTF8(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  s: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  spanCondition: USetSpanCondition /* Windows.Win32.Globalization.USetSpanCondition */,
): number /* i32 */ {
  return libicu_dll.uset_spanBackUTF8(util.toPointer(set), util.pstrToFfi(s), length, spanCondition);
}

export function uset_equals(
  set1: Deno.PointerValue | Uint8Array /* ptr */,
  set2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_equals(util.toPointer(set1), util.toPointer(set2));
}

export function uset_serialize(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_serialize(util.toPointer(set), util.toPointer(dest), destCapacity, util.toPointer(pErrorCode));
}

export function uset_getSerializedSet(
  fillSet: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_getSerializedSet(util.toPointer(fillSet), util.toPointer(src), srcLength);
}

export function uset_setSerializedToOne(
  fillSet: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): void /* void */ {
  return libicu_dll.uset_setSerializedToOne(util.toPointer(fillSet), c);
}

export function uset_serializedContains(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.uset_serializedContains(util.toPointer(set), c);
}

export function uset_getSerializedRangeCount(
  set: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uset_getSerializedRangeCount(util.toPointer(set));
}

export function uset_getSerializedRange(
  set: Deno.PointerValue | Uint8Array /* ptr */,
  rangeIndex: number /* i32 */,
  pStart: Deno.PointerValue | Uint8Array /* ptr */,
  pEnd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uset_getSerializedRange(util.toPointer(set), rangeIndex, util.toPointer(pStart), util.toPointer(pEnd));
}

export function unorm2_getNFCInstance(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_getNFCInstance(util.toPointer(pErrorCode));
}

export function unorm2_getNFDInstance(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_getNFDInstance(util.toPointer(pErrorCode));
}

export function unorm2_getNFKCInstance(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_getNFKCInstance(util.toPointer(pErrorCode));
}

export function unorm2_getNFKDInstance(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_getNFKDInstance(util.toPointer(pErrorCode));
}

export function unorm2_getNFKCCasefoldInstance(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_getNFKCCasefoldInstance(util.toPointer(pErrorCode));
}

export function unorm2_getInstance(
  packageName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  mode: UNormalization2Mode /* Windows.Win32.Globalization.UNormalization2Mode */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_getInstance(util.pstrToFfi(packageName), util.pstrToFfi(name), mode, util.toPointer(pErrorCode));
}

export function unorm2_openFiltered(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  filterSet: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unorm2_openFiltered(util.toPointer(norm2), util.toPointer(filterSet), util.toPointer(pErrorCode));
}

export function unorm2_close(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unorm2_close(util.toPointer(norm2));
}

export function unorm2_normalize(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm2_normalize(util.toPointer(norm2), util.toPointer(src), length, util.toPointer(dest), capacity, util.toPointer(pErrorCode));
}

export function unorm2_normalizeSecondAndAppend(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  first: Deno.PointerValue | Uint8Array /* ptr */,
  firstLength: number /* i32 */,
  firstCapacity: number /* i32 */,
  second: Deno.PointerValue | Uint8Array /* ptr */,
  secondLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm2_normalizeSecondAndAppend(util.toPointer(norm2), util.toPointer(first), firstLength, firstCapacity, util.toPointer(second), secondLength, util.toPointer(pErrorCode));
}

export function unorm2_append(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  first: Deno.PointerValue | Uint8Array /* ptr */,
  firstLength: number /* i32 */,
  firstCapacity: number /* i32 */,
  second: Deno.PointerValue | Uint8Array /* ptr */,
  secondLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm2_append(util.toPointer(norm2), util.toPointer(first), firstLength, firstCapacity, util.toPointer(second), secondLength, util.toPointer(pErrorCode));
}

export function unorm2_getDecomposition(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  decomposition: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm2_getDecomposition(util.toPointer(norm2), c, util.toPointer(decomposition), capacity, util.toPointer(pErrorCode));
}

export function unorm2_getRawDecomposition(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  decomposition: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm2_getRawDecomposition(util.toPointer(norm2), c, util.toPointer(decomposition), capacity, util.toPointer(pErrorCode));
}

export function unorm2_composePair(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  a: number /* i32 */,
  b: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.unorm2_composePair(util.toPointer(norm2), a, b);
}

export function unorm2_getCombiningClass(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* u8 */ {
  return libicu_dll.unorm2_getCombiningClass(util.toPointer(norm2), c);
}

export function unorm2_isNormalized(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.unorm2_isNormalized(util.toPointer(norm2), util.toPointer(s), length, util.toPointer(pErrorCode));
}

export function unorm2_quickCheck(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): UNormalizationCheckResult /* Windows.Win32.Globalization.UNormalizationCheckResult */ {
  return libicu_dll.unorm2_quickCheck(util.toPointer(norm2), util.toPointer(s), length, util.toPointer(pErrorCode));
}

export function unorm2_spanQuickCheckYes(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm2_spanQuickCheckYes(util.toPointer(norm2), util.toPointer(s), length, util.toPointer(pErrorCode));
}

export function unorm2_hasBoundaryBefore(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.unorm2_hasBoundaryBefore(util.toPointer(norm2), c);
}

export function unorm2_hasBoundaryAfter(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.unorm2_hasBoundaryAfter(util.toPointer(norm2), c);
}

export function unorm2_isInert(
  norm2: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.unorm2_isInert(util.toPointer(norm2), c);
}

export function unorm_compare(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  length1: number /* i32 */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  length2: number /* i32 */,
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unorm_compare(util.toPointer(s1), length1, util.toPointer(s2), length2, options, util.toPointer(pErrorCode));
}

export function ucnvsel_open(
  converterList: Deno.PointerValue | Uint8Array /* ptr */,
  converterListSize: number /* i32 */,
  excludedCodePoints: Deno.PointerValue | Uint8Array /* ptr */,
  whichSet: UConverterUnicodeSet /* Windows.Win32.Globalization.UConverterUnicodeSet */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnvsel_open(util.toPointer(converterList), converterListSize, util.toPointer(excludedCodePoints), whichSet, util.toPointer(status));
}

export function ucnvsel_close(
  sel: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucnvsel_close(util.toPointer(sel));
}

export function ucnvsel_openFromSerialized(
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnvsel_openFromSerialized(util.toPointer(buffer), length, util.toPointer(status));
}

export function ucnvsel_serialize(
  sel: Deno.PointerValue | Uint8Array /* ptr */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  bufferCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucnvsel_serialize(util.toPointer(sel), util.toPointer(buffer), bufferCapacity, util.toPointer(status));
}

export function ucnvsel_selectForString(
  sel: Deno.PointerValue | Uint8Array /* ptr */,
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnvsel_selectForString(util.toPointer(sel), util.toPointer(s), length, util.toPointer(status));
}

export function ucnvsel_selectForUTF8(
  sel: Deno.PointerValue | Uint8Array /* ptr */,
  s: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucnvsel_selectForUTF8(util.toPointer(sel), util.pstrToFfi(s), length, util.toPointer(status));
}

export function u_charsToUChars(
  cs: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  us: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.u_charsToUChars(util.pstrToFfi(cs), util.toPointer(us), length);
}

export function u_UCharsToChars(
  us: Deno.PointerValue | Uint8Array /* ptr */,
  cs: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.u_UCharsToChars(util.toPointer(us), util.pstrToFfi(cs), length);
}

export function u_strlen(
  s: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strlen(util.toPointer(s));
}

export function u_countChar32(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_countChar32(util.toPointer(s), length);
}

export function u_strHasMoreChar32Than(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  number: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.u_strHasMoreChar32Than(util.toPointer(s), length, number);
}

export function u_strcat(
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strcat(util.toPointer(dst), util.toPointer(src));
}

export function u_strncat(
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strncat(util.toPointer(dst), util.toPointer(src), n);
}

export function u_strstr(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  substring: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strstr(util.toPointer(s), util.toPointer(substring));
}

export function u_strFindFirst(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  substring: Deno.PointerValue | Uint8Array /* ptr */,
  subLength: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFindFirst(util.toPointer(s), length, util.toPointer(substring), subLength);
}

export function u_strchr(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* u16 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strchr(util.toPointer(s), c);
}

export function u_strchr32(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strchr32(util.toPointer(s), c);
}

export function u_strrstr(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  substring: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strrstr(util.toPointer(s), util.toPointer(substring));
}

export function u_strFindLast(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  substring: Deno.PointerValue | Uint8Array /* ptr */,
  subLength: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFindLast(util.toPointer(s), length, util.toPointer(substring), subLength);
}

export function u_strrchr(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* u16 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strrchr(util.toPointer(s), c);
}

export function u_strrchr32(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strrchr32(util.toPointer(s), c);
}

export function u_strpbrk(
  string: Deno.PointerValue | Uint8Array /* ptr */,
  matchSet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strpbrk(util.toPointer(string), util.toPointer(matchSet));
}

export function u_strcspn(
  string: Deno.PointerValue | Uint8Array /* ptr */,
  matchSet: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strcspn(util.toPointer(string), util.toPointer(matchSet));
}

export function u_strspn(
  string: Deno.PointerValue | Uint8Array /* ptr */,
  matchSet: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strspn(util.toPointer(string), util.toPointer(matchSet));
}

export function u_strtok_r(
  src: Deno.PointerValue | Uint8Array /* ptr */,
  delim: Deno.PointerValue | Uint8Array /* ptr */,
  saveState: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strtok_r(util.toPointer(src), util.toPointer(delim), util.toPointer(saveState));
}

export function u_strcmp(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strcmp(util.toPointer(s1), util.toPointer(s2));
}

export function u_strcmpCodePointOrder(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strcmpCodePointOrder(util.toPointer(s1), util.toPointer(s2));
}

export function u_strCompare(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  length1: number /* i32 */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  length2: number /* i32 */,
  codePointOrder: number /* i8 */,
): number /* i32 */ {
  return libicu_dll.u_strCompare(util.toPointer(s1), length1, util.toPointer(s2), length2, codePointOrder);
}

export function u_strCompareIter(
  iter1: Deno.PointerValue | Uint8Array /* ptr */,
  iter2: Deno.PointerValue | Uint8Array /* ptr */,
  codePointOrder: number /* i8 */,
): number /* i32 */ {
  return libicu_dll.u_strCompareIter(util.toPointer(iter1), util.toPointer(iter2), codePointOrder);
}

export function u_strCaseCompare(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  length1: number /* i32 */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  length2: number /* i32 */,
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strCaseCompare(util.toPointer(s1), length1, util.toPointer(s2), length2, options, util.toPointer(pErrorCode));
}

export function u_strncmp(
  ucs1: Deno.PointerValue | Uint8Array /* ptr */,
  ucs2: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_strncmp(util.toPointer(ucs1), util.toPointer(ucs2), n);
}

export function u_strncmpCodePointOrder(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_strncmpCodePointOrder(util.toPointer(s1), util.toPointer(s2), n);
}

export function u_strcasecmp(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  options: number /* u32 */,
): number /* i32 */ {
  return libicu_dll.u_strcasecmp(util.toPointer(s1), util.toPointer(s2), options);
}

export function u_strncasecmp(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
  options: number /* u32 */,
): number /* i32 */ {
  return libicu_dll.u_strncasecmp(util.toPointer(s1), util.toPointer(s2), n, options);
}

export function u_memcasecmp(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  options: number /* u32 */,
): number /* i32 */ {
  return libicu_dll.u_memcasecmp(util.toPointer(s1), util.toPointer(s2), length, options);
}

export function u_strcpy(
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strcpy(util.toPointer(dst), util.toPointer(src));
}

export function u_strncpy(
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strncpy(util.toPointer(dst), util.toPointer(src), n);
}

export function u_uastrcpy(
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_uastrcpy(util.toPointer(dst), util.pstrToFfi(src));
}

export function u_uastrncpy(
  dst: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  n: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_uastrncpy(util.toPointer(dst), util.pstrToFfi(src), n);
}

export function u_austrcpy(
  dst: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_austrcpy(util.pstrToFfi(dst), util.toPointer(src)));
}

export function u_austrncpy(
  dst: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_austrncpy(util.pstrToFfi(dst), util.toPointer(src), n));
}

export function u_memcpy(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memcpy(util.toPointer(dest), util.toPointer(src), count);
}

export function u_memmove(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memmove(util.toPointer(dest), util.toPointer(src), count);
}

export function u_memset(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* u16 */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memset(util.toPointer(dest), c, count);
}

export function u_memcmp(
  buf1: Deno.PointerValue | Uint8Array /* ptr */,
  buf2: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_memcmp(util.toPointer(buf1), util.toPointer(buf2), count);
}

export function u_memcmpCodePointOrder(
  s1: Deno.PointerValue | Uint8Array /* ptr */,
  s2: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_memcmpCodePointOrder(util.toPointer(s1), util.toPointer(s2), count);
}

export function u_memchr(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* u16 */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memchr(util.toPointer(s), c, count);
}

export function u_memchr32(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memchr32(util.toPointer(s), c, count);
}

export function u_memrchr(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* u16 */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memrchr(util.toPointer(s), c, count);
}

export function u_memrchr32(
  s: Deno.PointerValue | Uint8Array /* ptr */,
  c: number /* i32 */,
  count: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_memrchr32(util.toPointer(s), c, count);
}

export function u_unescape(
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.u_unescape(util.pstrToFfi(src), util.toPointer(dest), destCapacity);
}

export function u_unescapeAt(
  charAt: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.UNESCAPE_CHAR_AT */,
  offset: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_unescapeAt(util.toPointer(charAt), util.toPointer(offset), length, util.toPointer(context));
}

export function u_strToUpper(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strToUpper(util.toPointer(dest), destCapacity, util.toPointer(src), srcLength, util.pstrToFfi(locale), util.toPointer(pErrorCode));
}

export function u_strToLower(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strToLower(util.toPointer(dest), destCapacity, util.toPointer(src), srcLength, util.pstrToFfi(locale), util.toPointer(pErrorCode));
}

export function u_strToTitle(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  titleIter: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strToTitle(util.toPointer(dest), destCapacity, util.toPointer(src), srcLength, util.toPointer(titleIter), util.pstrToFfi(locale), util.toPointer(pErrorCode));
}

export function u_strFoldCase(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_strFoldCase(util.toPointer(dest), destCapacity, util.toPointer(src), srcLength, options, util.toPointer(pErrorCode));
}

export function u_strToWCS(
  dest: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libicu_dll.u_strToWCS(util.pwstrToFfi(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, util.toPointer(pErrorCode)));
}

export function u_strFromWCS(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromWCS(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.pwstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function u_strToUTF8(
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_strToUTF8(util.pstrToFfi(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, util.toPointer(pErrorCode)));
}

export function u_strFromUTF8(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromUTF8(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function u_strToUTF8WithSub(
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  subchar: number /* i32 */,
  pNumSubstitutions: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_strToUTF8WithSub(util.pstrToFfi(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, subchar, util.toPointer(pNumSubstitutions), util.toPointer(pErrorCode)));
}

export function u_strFromUTF8WithSub(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  subchar: number /* i32 */,
  pNumSubstitutions: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromUTF8WithSub(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.pstrToFfi(src), srcLength, subchar, util.toPointer(pNumSubstitutions), util.toPointer(pErrorCode));
}

export function u_strFromUTF8Lenient(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromUTF8Lenient(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function u_strToUTF32(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strToUTF32(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, util.toPointer(pErrorCode));
}

export function u_strFromUTF32(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromUTF32(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, util.toPointer(pErrorCode));
}

export function u_strToUTF32WithSub(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  subchar: number /* i32 */,
  pNumSubstitutions: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strToUTF32WithSub(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, subchar, util.toPointer(pNumSubstitutions), util.toPointer(pErrorCode));
}

export function u_strFromUTF32WithSub(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  subchar: number /* i32 */,
  pNumSubstitutions: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromUTF32WithSub(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, subchar, util.toPointer(pNumSubstitutions), util.toPointer(pErrorCode));
}

export function u_strToJavaModifiedUTF8(
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.u_strToJavaModifiedUTF8(util.pstrToFfi(dest), destCapacity, util.toPointer(pDestLength), util.toPointer(src), srcLength, util.toPointer(pErrorCode)));
}

export function u_strFromJavaModifiedUTF8WithSub(
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pDestLength: Deno.PointerValue | Uint8Array /* ptr */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  subchar: number /* i32 */,
  pNumSubstitutions: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.u_strFromJavaModifiedUTF8WithSub(util.toPointer(dest), destCapacity, util.toPointer(pDestLength), util.pstrToFfi(src), srcLength, subchar, util.toPointer(pNumSubstitutions), util.toPointer(pErrorCode));
}

export function ucasemap_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucasemap_open(util.pstrToFfi(locale), options, util.toPointer(pErrorCode));
}

export function ucasemap_close(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucasemap_close(util.toPointer(csm));
}

export function ucasemap_getLocale(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucasemap_getLocale(util.toPointer(csm)));
}

export function ucasemap_getOptions(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libicu_dll.ucasemap_getOptions(util.toPointer(csm));
}

export function ucasemap_setLocale(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucasemap_setLocale(util.toPointer(csm), util.pstrToFfi(locale), util.toPointer(pErrorCode));
}

export function ucasemap_setOptions(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucasemap_setOptions(util.toPointer(csm), options, util.toPointer(pErrorCode));
}

export function ucasemap_getBreakIterator(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucasemap_getBreakIterator(util.toPointer(csm));
}

export function ucasemap_setBreakIterator(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  iterToAdopt: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucasemap_setBreakIterator(util.toPointer(csm), util.toPointer(iterToAdopt), util.toPointer(pErrorCode));
}

export function ucasemap_toTitle(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucasemap_toTitle(util.toPointer(csm), util.toPointer(dest), destCapacity, util.toPointer(src), srcLength, util.toPointer(pErrorCode));
}

export function ucasemap_utf8ToLower(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucasemap_utf8ToLower(util.toPointer(csm), util.pstrToFfi(dest), destCapacity, util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function ucasemap_utf8ToUpper(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucasemap_utf8ToUpper(util.toPointer(csm), util.pstrToFfi(dest), destCapacity, util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function ucasemap_utf8ToTitle(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucasemap_utf8ToTitle(util.toPointer(csm), util.pstrToFfi(dest), destCapacity, util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function ucasemap_utf8FoldCase(
  csm: Deno.PointerValue | Uint8Array /* ptr */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  src: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  srcLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucasemap_utf8FoldCase(util.toPointer(csm), util.pstrToFfi(dest), destCapacity, util.pstrToFfi(src), srcLength, util.toPointer(pErrorCode));
}

export function usprep_open(
  path: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usprep_open(util.pstrToFfi(path), util.pstrToFfi(fileName), util.toPointer(status));
}

export function usprep_openByType(
  type: UStringPrepProfileType /* Windows.Win32.Globalization.UStringPrepProfileType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usprep_openByType(type, util.toPointer(status));
}

export function usprep_close(
  profile: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usprep_close(util.toPointer(profile));
}

export function usprep_prepare(
  prep: Deno.PointerValue | Uint8Array /* ptr */,
  src: Deno.PointerValue | Uint8Array /* ptr */,
  srcLength: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  options: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usprep_prepare(util.toPointer(prep), util.toPointer(src), srcLength, util.toPointer(dest), destCapacity, options, util.toPointer(parseError), util.toPointer(status));
}

export function uidna_openUTS46(
  options: number /* u32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uidna_openUTS46(options, util.toPointer(pErrorCode));
}

export function uidna_close(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uidna_close(util.toPointer(idna));
}

export function uidna_labelToASCII(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  label: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_labelToASCII(util.toPointer(idna), util.toPointer(label), length, util.toPointer(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_labelToUnicode(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  label: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_labelToUnicode(util.toPointer(idna), util.toPointer(label), length, util.toPointer(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_nameToASCII(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  name: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_nameToASCII(util.toPointer(idna), util.toPointer(name), length, util.toPointer(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_nameToUnicode(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  name: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_nameToUnicode(util.toPointer(idna), util.toPointer(name), length, util.toPointer(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_labelToASCII_UTF8(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  label: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_labelToASCII_UTF8(util.toPointer(idna), util.pstrToFfi(label), length, util.pstrToFfi(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_labelToUnicodeUTF8(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  label: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_labelToUnicodeUTF8(util.toPointer(idna), util.pstrToFfi(label), length, util.pstrToFfi(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_nameToASCII_UTF8(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_nameToASCII_UTF8(util.toPointer(idna), util.pstrToFfi(name), length, util.pstrToFfi(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function uidna_nameToUnicodeUTF8(
  idna: Deno.PointerValue | Uint8Array /* ptr */,
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  capacity: number /* i32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uidna_nameToUnicodeUTF8(util.toPointer(idna), util.pstrToFfi(name), length, util.pstrToFfi(dest), capacity, util.toPointer(pInfo), util.toPointer(pErrorCode));
}

export function ubrk_open(
  type: UBreakIteratorType /* Windows.Win32.Globalization.UBreakIteratorType */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubrk_open(type, util.pstrToFfi(locale), util.toPointer(text), textLength, util.toPointer(status));
}

export function ubrk_openRules(
  rules: Deno.PointerValue | Uint8Array /* ptr */,
  rulesLength: number /* i32 */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parseErr: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubrk_openRules(util.toPointer(rules), rulesLength, util.toPointer(text), textLength, util.toPointer(parseErr), util.toPointer(status));
}

export function ubrk_openBinaryRules(
  binaryRules: Deno.PointerValue | Uint8Array /* ptr */,
  rulesLength: number /* i32 */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubrk_openBinaryRules(util.toPointer(binaryRules), rulesLength, util.toPointer(text), textLength, util.toPointer(status));
}

export function ubrk_safeClone(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  stackBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ubrk_safeClone(util.toPointer(bi), util.toPointer(stackBuffer), util.toPointer(pBufferSize), util.toPointer(status));
}

export function ubrk_close(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubrk_close(util.toPointer(bi));
}

export function ubrk_setText(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubrk_setText(util.toPointer(bi), util.toPointer(text), textLength, util.toPointer(status));
}

export function ubrk_setUText(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubrk_setUText(util.toPointer(bi), util.toPointer(text), util.toPointer(status));
}

export function ubrk_current(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_current(util.toPointer(bi));
}

export function ubrk_next(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_next(util.toPointer(bi));
}

export function ubrk_previous(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_previous(util.toPointer(bi));
}

export function ubrk_first(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_first(util.toPointer(bi));
}

export function ubrk_last(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_last(util.toPointer(bi));
}

export function ubrk_preceding(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ubrk_preceding(util.toPointer(bi), offset);
}

export function ubrk_following(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ubrk_following(util.toPointer(bi), offset);
}

export function ubrk_getAvailable(
  index: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ubrk_getAvailable(index));
}

export function ubrk_countAvailable(): number /* i32 */ {
  return libicu_dll.ubrk_countAvailable();
}

export function ubrk_isBoundary(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.ubrk_isBoundary(util.toPointer(bi), offset);
}

export function ubrk_getRuleStatus(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_getRuleStatus(util.toPointer(bi));
}

export function ubrk_getRuleStatusVec(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  fillInVec: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_getRuleStatusVec(util.toPointer(bi), util.toPointer(fillInVec), capacity, util.toPointer(status));
}

export function ubrk_getLocaleByType(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocDataLocaleType /* Windows.Win32.Globalization.ULocDataLocaleType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ubrk_getLocaleByType(util.toPointer(bi), type, util.toPointer(status)));
}

export function ubrk_refreshUText(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ubrk_refreshUText(util.toPointer(bi), util.toPointer(text), util.toPointer(status));
}

export function ubrk_getBinaryRules(
  bi: Deno.PointerValue | Uint8Array /* ptr */,
  binaryRules: Deno.PointerValue | Uint8Array /* ptr */,
  rulesCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ubrk_getBinaryRules(util.toPointer(bi), util.toPointer(binaryRules), rulesCapacity, util.toPointer(status));
}

export function u_getDataVersion(
  dataVersionFillin: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_getDataVersion(util.toPointer(dataVersionFillin), util.toPointer(status));
}

export function ucal_openTimeZoneIDEnumeration(
  zoneType: USystemTimeZoneType /* Windows.Win32.Globalization.USystemTimeZoneType */,
  region: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  rawOffset: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucal_openTimeZoneIDEnumeration(zoneType, util.pstrToFfi(region), util.toPointer(rawOffset), util.toPointer(ec));
}

export function ucal_openTimeZones(
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucal_openTimeZones(util.toPointer(ec));
}

export function ucal_openCountryTimeZones(
  country: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucal_openCountryTimeZones(util.pstrToFfi(country), util.toPointer(ec));
}

export function ucal_getDefaultTimeZone(
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getDefaultTimeZone(util.toPointer(result), resultCapacity, util.toPointer(ec));
}

export function ucal_setDefaultTimeZone(
  zoneID: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_setDefaultTimeZone(util.toPointer(zoneID), util.toPointer(ec));
}

export function ucal_getHostTimeZone(
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getHostTimeZone(util.toPointer(result), resultCapacity, util.toPointer(ec));
}

export function ucal_getDSTSavings(
  zoneID: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getDSTSavings(util.toPointer(zoneID), util.toPointer(ec));
}

export function ucal_getNow(): number /* f64 */ {
  return libicu_dll.ucal_getNow();
}

export function ucal_open(
  zoneID: Deno.PointerValue | Uint8Array /* ptr */,
  len: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  type: UCalendarType /* Windows.Win32.Globalization.UCalendarType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucal_open(util.toPointer(zoneID), len, util.pstrToFfi(locale), type, util.toPointer(status));
}

export function ucal_close(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_close(util.toPointer(cal));
}

export function ucal_clone(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucal_clone(util.toPointer(cal), util.toPointer(status));
}

export function ucal_setTimeZone(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  zoneID: Deno.PointerValue | Uint8Array /* ptr */,
  len: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_setTimeZone(util.toPointer(cal), util.toPointer(zoneID), len, util.toPointer(status));
}

export function ucal_getTimeZoneID(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getTimeZoneID(util.toPointer(cal), util.toPointer(result), resultLength, util.toPointer(status));
}

export function ucal_getTimeZoneDisplayName(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  type: UCalendarDisplayNameType /* Windows.Win32.Globalization.UCalendarDisplayNameType */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getTimeZoneDisplayName(util.toPointer(cal), type, util.pstrToFfi(locale), util.toPointer(result), resultLength, util.toPointer(status));
}

export function ucal_inDaylightTime(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucal_inDaylightTime(util.toPointer(cal), util.toPointer(status));
}

export function ucal_setGregorianChange(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  date: number /* f64 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_setGregorianChange(util.toPointer(cal), date, util.toPointer(pErrorCode));
}

export function ucal_getGregorianChange(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.ucal_getGregorianChange(util.toPointer(cal), util.toPointer(pErrorCode));
}

export function ucal_getAttribute(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UCalendarAttribute /* Windows.Win32.Globalization.UCalendarAttribute */,
): number /* i32 */ {
  return libicu_dll.ucal_getAttribute(util.toPointer(cal), attr);
}

export function ucal_setAttribute(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UCalendarAttribute /* Windows.Win32.Globalization.UCalendarAttribute */,
  newValue: number /* i32 */,
): void /* void */ {
  return libicu_dll.ucal_setAttribute(util.toPointer(cal), attr, newValue);
}

export function ucal_getAvailable(
  localeIndex: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucal_getAvailable(localeIndex));
}

export function ucal_countAvailable(): number /* i32 */ {
  return libicu_dll.ucal_countAvailable();
}

export function ucal_getMillis(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.ucal_getMillis(util.toPointer(cal), util.toPointer(status));
}

export function ucal_setMillis(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  dateTime: number /* f64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_setMillis(util.toPointer(cal), dateTime, util.toPointer(status));
}

export function ucal_setDate(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  year: number /* i32 */,
  month: number /* i32 */,
  date: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_setDate(util.toPointer(cal), year, month, date, util.toPointer(status));
}

export function ucal_setDateTime(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  year: number /* i32 */,
  month: number /* i32 */,
  date: number /* i32 */,
  hour: number /* i32 */,
  minute: number /* i32 */,
  second: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_setDateTime(util.toPointer(cal), year, month, date, hour, minute, second, util.toPointer(status));
}

export function ucal_equivalentTo(
  cal1: Deno.PointerValue | Uint8Array /* ptr */,
  cal2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucal_equivalentTo(util.toPointer(cal1), util.toPointer(cal2));
}

export function ucal_add(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
  amount: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_add(util.toPointer(cal), field, amount, util.toPointer(status));
}

export function ucal_roll(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
  amount: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_roll(util.toPointer(cal), field, amount, util.toPointer(status));
}

export function ucal_get(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_get(util.toPointer(cal), field, util.toPointer(status));
}

export function ucal_set(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
  value: number /* i32 */,
): void /* void */ {
  return libicu_dll.ucal_set(util.toPointer(cal), field, value);
}

export function ucal_isSet(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
): number /* i8 */ {
  return libicu_dll.ucal_isSet(util.toPointer(cal), field);
}

export function ucal_clearField(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
): void /* void */ {
  return libicu_dll.ucal_clearField(util.toPointer(cal), field);
}

export function ucal_clear(
  calendar: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucal_clear(util.toPointer(calendar));
}

export function ucal_getLimit(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
  type: UCalendarLimitType /* Windows.Win32.Globalization.UCalendarLimitType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getLimit(util.toPointer(cal), field, type, util.toPointer(status));
}

export function ucal_getLocaleByType(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocDataLocaleType /* Windows.Win32.Globalization.ULocDataLocaleType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucal_getLocaleByType(util.toPointer(cal), type, util.toPointer(status)));
}

export function ucal_getTZDataVersion(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucal_getTZDataVersion(util.toPointer(status)));
}

export function ucal_getCanonicalTimeZoneID(
  id: Deno.PointerValue | Uint8Array /* ptr */,
  len: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  isSystemID: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getCanonicalTimeZoneID(util.toPointer(id), len, util.toPointer(result), resultCapacity, util.toPointer(isSystemID), util.toPointer(status));
}

export function ucal_getType(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucal_getType(util.toPointer(cal), util.toPointer(status)));
}

export function ucal_getKeywordValuesForLocale(
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  commonlyUsed: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucal_getKeywordValuesForLocale(util.pstrToFfi(key), util.pstrToFfi(locale), commonlyUsed, util.toPointer(status));
}

export function ucal_getDayOfWeekType(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  dayOfWeek: UCalendarDaysOfWeek /* Windows.Win32.Globalization.UCalendarDaysOfWeek */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UCalendarWeekdayType /* Windows.Win32.Globalization.UCalendarWeekdayType */ {
  return libicu_dll.ucal_getDayOfWeekType(util.toPointer(cal), dayOfWeek, util.toPointer(status));
}

export function ucal_getWeekendTransition(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  dayOfWeek: UCalendarDaysOfWeek /* Windows.Win32.Globalization.UCalendarDaysOfWeek */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getWeekendTransition(util.toPointer(cal), dayOfWeek, util.toPointer(status));
}

export function ucal_isWeekend(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  date: number /* f64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucal_isWeekend(util.toPointer(cal), date, util.toPointer(status));
}

export function ucal_getFieldDifference(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  target: number /* f64 */,
  field: UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getFieldDifference(util.toPointer(cal), target, field, util.toPointer(status));
}

export function ucal_getTimeZoneTransitionDate(
  cal: Deno.PointerValue | Uint8Array /* ptr */,
  type: UTimeZoneTransitionType /* Windows.Win32.Globalization.UTimeZoneTransitionType */,
  transition: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucal_getTimeZoneTransitionDate(util.toPointer(cal), type, util.toPointer(transition), util.toPointer(status));
}

export function ucal_getWindowsTimeZoneID(
  id: Deno.PointerValue | Uint8Array /* ptr */,
  len: number /* i32 */,
  winid: Deno.PointerValue | Uint8Array /* ptr */,
  winidCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getWindowsTimeZoneID(util.toPointer(id), len, util.toPointer(winid), winidCapacity, util.toPointer(status));
}

export function ucal_getTimeZoneIDForWindowsID(
  winid: Deno.PointerValue | Uint8Array /* ptr */,
  len: number /* i32 */,
  region: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  id: Deno.PointerValue | Uint8Array /* ptr */,
  idCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucal_getTimeZoneIDForWindowsID(util.toPointer(winid), len, util.pstrToFfi(region), util.toPointer(id), idCapacity, util.toPointer(status));
}

export function ucol_open(
  loc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_open(util.pstrToFfi(loc), util.toPointer(status));
}

export function ucol_openRules(
  rules: Deno.PointerValue | Uint8Array /* ptr */,
  rulesLength: number /* i32 */,
  normalizationMode: UColAttributeValue /* Windows.Win32.Globalization.UColAttributeValue */,
  strength: UColAttributeValue /* Windows.Win32.Globalization.UColAttributeValue */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_openRules(util.toPointer(rules), rulesLength, normalizationMode, strength, util.toPointer(parseError), util.toPointer(status));
}

export function ucol_getContractionsAndExpansions(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  contractions: Deno.PointerValue | Uint8Array /* ptr */,
  expansions: Deno.PointerValue | Uint8Array /* ptr */,
  addPrefixes: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_getContractionsAndExpansions(util.toPointer(coll), util.toPointer(contractions), util.toPointer(expansions), addPrefixes, util.toPointer(status));
}

export function ucol_close(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_close(util.toPointer(coll));
}

export function ucol_strcoll(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLength: number /* i32 */,
): UCollationResult /* Windows.Win32.Globalization.UCollationResult */ {
  return libicu_dll.ucol_strcoll(util.toPointer(coll), util.toPointer(source), sourceLength, util.toPointer(target), targetLength);
}

export function ucol_strcollUTF8(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  source: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  sourceLength: number /* i32 */,
  target: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  targetLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UCollationResult /* Windows.Win32.Globalization.UCollationResult */ {
  return libicu_dll.ucol_strcollUTF8(util.toPointer(coll), util.pstrToFfi(source), sourceLength, util.pstrToFfi(target), targetLength, util.toPointer(status));
}

export function ucol_greater(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLength: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.ucol_greater(util.toPointer(coll), util.toPointer(source), sourceLength, util.toPointer(target), targetLength);
}

export function ucol_greaterOrEqual(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLength: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.ucol_greaterOrEqual(util.toPointer(coll), util.toPointer(source), sourceLength, util.toPointer(target), targetLength);
}

export function ucol_equal(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  target: Deno.PointerValue | Uint8Array /* ptr */,
  targetLength: number /* i32 */,
): number /* i8 */ {
  return libicu_dll.ucol_equal(util.toPointer(coll), util.toPointer(source), sourceLength, util.toPointer(target), targetLength);
}

export function ucol_strcollIter(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  sIter: Deno.PointerValue | Uint8Array /* ptr */,
  tIter: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UCollationResult /* Windows.Win32.Globalization.UCollationResult */ {
  return libicu_dll.ucol_strcollIter(util.toPointer(coll), util.toPointer(sIter), util.toPointer(tIter), util.toPointer(status));
}

export function ucol_getStrength(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
): UColAttributeValue /* Windows.Win32.Globalization.UColAttributeValue */ {
  return libicu_dll.ucol_getStrength(util.toPointer(coll));
}

export function ucol_setStrength(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  strength: UColAttributeValue /* Windows.Win32.Globalization.UColAttributeValue */,
): void /* void */ {
  return libicu_dll.ucol_setStrength(util.toPointer(coll), strength);
}

export function ucol_getReorderCodes(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_getReorderCodes(util.toPointer(coll), util.toPointer(dest), destCapacity, util.toPointer(pErrorCode));
}

export function ucol_setReorderCodes(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  reorderCodes: Deno.PointerValue | Uint8Array /* ptr */,
  reorderCodesLength: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_setReorderCodes(util.toPointer(coll), util.toPointer(reorderCodes), reorderCodesLength, util.toPointer(pErrorCode));
}

export function ucol_getEquivalentReorderCodes(
  reorderCode: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_getEquivalentReorderCodes(reorderCode, util.toPointer(dest), destCapacity, util.toPointer(pErrorCode));
}

export function ucol_getDisplayName(
  objLoc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dispLoc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_getDisplayName(util.pstrToFfi(objLoc), util.pstrToFfi(dispLoc), util.toPointer(result), resultLength, util.toPointer(status));
}

export function ucol_getAvailable(
  localeIndex: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucol_getAvailable(localeIndex));
}

export function ucol_countAvailable(): number /* i32 */ {
  return libicu_dll.ucol_countAvailable();
}

export function ucol_openAvailableLocales(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_openAvailableLocales(util.toPointer(status));
}

export function ucol_getKeywords(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_getKeywords(util.toPointer(status));
}

export function ucol_getKeywordValues(
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_getKeywordValues(util.pstrToFfi(keyword), util.toPointer(status));
}

export function ucol_getKeywordValuesForLocale(
  key: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  commonlyUsed: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_getKeywordValuesForLocale(util.pstrToFfi(key), util.pstrToFfi(locale), commonlyUsed, util.toPointer(status));
}

export function ucol_getFunctionalEquivalent(
  result: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  resultCapacity: number /* i32 */,
  keyword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  isAvailable: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_getFunctionalEquivalent(util.pstrToFfi(result), resultCapacity, util.pstrToFfi(keyword), util.pstrToFfi(locale), util.toPointer(isAvailable), util.toPointer(status));
}

export function ucol_getRules(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_getRules(util.toPointer(coll), util.toPointer(length));
}

export function ucol_getSortKey(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_getSortKey(util.toPointer(coll), util.toPointer(source), sourceLength, util.toPointer(result), resultLength);
}

export function ucol_nextSortKeyPart(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  iter: Deno.PointerValue | Uint8Array /* ptr */,
  state: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  count: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_nextSortKeyPart(util.toPointer(coll), util.toPointer(iter), util.toPointer(state), util.toPointer(dest), count, util.toPointer(status));
}

export function ucol_getBound(
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  boundType: UColBoundMode /* Windows.Win32.Globalization.UColBoundMode */,
  noOfLevels: number /* u32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_getBound(util.toPointer(source), sourceLength, boundType, noOfLevels, util.toPointer(result), resultLength, util.toPointer(status));
}

export function ucol_getVersion(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  info: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_getVersion(util.toPointer(coll), util.toPointer(info));
}

export function ucol_getUCAVersion(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  info: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_getUCAVersion(util.toPointer(coll), util.toPointer(info));
}

export function ucol_mergeSortkeys(
  src1: Deno.PointerValue | Uint8Array /* ptr */,
  src1Length: number /* i32 */,
  src2: Deno.PointerValue | Uint8Array /* ptr */,
  src2Length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_mergeSortkeys(util.toPointer(src1), src1Length, util.toPointer(src2), src2Length, util.toPointer(dest), destCapacity);
}

export function ucol_setAttribute(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UColAttribute /* Windows.Win32.Globalization.UColAttribute */,
  value: UColAttributeValue /* Windows.Win32.Globalization.UColAttributeValue */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_setAttribute(util.toPointer(coll), attr, value, util.toPointer(status));
}

export function ucol_getAttribute(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UColAttribute /* Windows.Win32.Globalization.UColAttribute */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UColAttributeValue /* Windows.Win32.Globalization.UColAttributeValue */ {
  return libicu_dll.ucol_getAttribute(util.toPointer(coll), attr, util.toPointer(status));
}

export function ucol_setMaxVariable(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  group: UColReorderCode /* Windows.Win32.Globalization.UColReorderCode */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_setMaxVariable(util.toPointer(coll), group, util.toPointer(pErrorCode));
}

export function ucol_getMaxVariable(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
): UColReorderCode /* Windows.Win32.Globalization.UColReorderCode */ {
  return libicu_dll.ucol_getMaxVariable(util.toPointer(coll));
}

export function ucol_getVariableTop(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libicu_dll.ucol_getVariableTop(util.toPointer(coll), util.toPointer(status));
}

export function ucol_safeClone(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  stackBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferSize: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_safeClone(util.toPointer(coll), util.toPointer(stackBuffer), util.toPointer(pBufferSize), util.toPointer(status));
}

export function ucol_getRulesEx(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  delta: UColRuleOption /* Windows.Win32.Globalization.UColRuleOption */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  bufferLen: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_getRulesEx(util.toPointer(coll), delta, util.toPointer(buffer), bufferLen);
}

export function ucol_getLocaleByType(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocDataLocaleType /* Windows.Win32.Globalization.ULocDataLocaleType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucol_getLocaleByType(util.toPointer(coll), type, util.toPointer(status)));
}

export function ucol_getTailoredSet(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_getTailoredSet(util.toPointer(coll), util.toPointer(status));
}

export function ucol_cloneBinary(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_cloneBinary(util.toPointer(coll), util.toPointer(buffer), capacity, util.toPointer(status));
}

export function ucol_openBinary(
  bin: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  base: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_openBinary(util.toPointer(bin), length, util.toPointer(base), util.toPointer(status));
}

export function ucol_openElements(
  coll: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucol_openElements(util.toPointer(coll), util.toPointer(text), textLength, util.toPointer(status));
}

export function ucol_keyHashCode(
  key: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_keyHashCode(util.toPointer(key), length);
}

export function ucol_closeElements(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_closeElements(util.toPointer(elems));
}

export function ucol_reset(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_reset(util.toPointer(elems));
}

export function ucol_next(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_next(util.toPointer(elems), util.toPointer(status));
}

export function ucol_previous(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_previous(util.toPointer(elems), util.toPointer(status));
}

export function ucol_getMaxExpansion(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
  order: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_getMaxExpansion(util.toPointer(elems), order);
}

export function ucol_setText(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_setText(util.toPointer(elems), util.toPointer(text), textLength, util.toPointer(status));
}

export function ucol_getOffset(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucol_getOffset(util.toPointer(elems));
}

export function ucol_setOffset(
  elems: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucol_setOffset(util.toPointer(elems), offset, util.toPointer(status));
}

export function ucol_primaryOrder(
  order: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_primaryOrder(order);
}

export function ucol_secondaryOrder(
  order: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_secondaryOrder(order);
}

export function ucol_tertiaryOrder(
  order: number /* i32 */,
): number /* i32 */ {
  return libicu_dll.ucol_tertiaryOrder(order);
}

export function ucsdet_open(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucsdet_open(util.toPointer(status));
}

export function ucsdet_close(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucsdet_close(util.toPointer(ucsd));
}

export function ucsdet_setText(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
  textIn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucsdet_setText(util.toPointer(ucsd), util.pstrToFfi(textIn), len, util.toPointer(status));
}

export function ucsdet_setDeclaredEncoding(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
  encoding: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucsdet_setDeclaredEncoding(util.toPointer(ucsd), util.pstrToFfi(encoding), length, util.toPointer(status));
}

export function ucsdet_detect(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucsdet_detect(util.toPointer(ucsd), util.toPointer(status));
}

export function ucsdet_detectAll(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
  matchesFound: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucsdet_detectAll(util.toPointer(ucsd), util.toPointer(matchesFound), util.toPointer(status));
}

export function ucsdet_getName(
  ucsm: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucsdet_getName(util.toPointer(ucsm), util.toPointer(status)));
}

export function ucsdet_getConfidence(
  ucsm: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucsdet_getConfidence(util.toPointer(ucsm), util.toPointer(status));
}

export function ucsdet_getLanguage(
  ucsm: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ucsdet_getLanguage(util.toPointer(ucsm), util.toPointer(status)));
}

export function ucsdet_getUChars(
  ucsm: Deno.PointerValue | Uint8Array /* ptr */,
  buf: Deno.PointerValue | Uint8Array /* ptr */,
  cap: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucsdet_getUChars(util.toPointer(ucsm), util.toPointer(buf), cap, util.toPointer(status));
}

export function ucsdet_getAllDetectableCharsets(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucsdet_getAllDetectableCharsets(util.toPointer(ucsd), util.toPointer(status));
}

export function ucsdet_isInputFilterEnabled(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucsdet_isInputFilterEnabled(util.toPointer(ucsd));
}

export function ucsdet_enableInputFilter(
  ucsd: Deno.PointerValue | Uint8Array /* ptr */,
  filter: number /* i8 */,
): number /* i8 */ {
  return libicu_dll.ucsdet_enableInputFilter(util.toPointer(ucsd), filter);
}

export function ufieldpositer_open(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ufieldpositer_open(util.toPointer(status));
}

export function ufieldpositer_close(
  fpositer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ufieldpositer_close(util.toPointer(fpositer));
}

export function ufieldpositer_next(
  fpositer: Deno.PointerValue | Uint8Array /* ptr */,
  beginIndex: Deno.PointerValue | Uint8Array /* ptr */,
  endIndex: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ufieldpositer_next(util.toPointer(fpositer), util.toPointer(beginIndex), util.toPointer(endIndex));
}

export function ufmt_open(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ufmt_open(util.toPointer(status));
}

export function ufmt_close(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ufmt_close(util.toPointer(fmt));
}

export function ufmt_getType(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UFormattableType /* Windows.Win32.Globalization.UFormattableType */ {
  return libicu_dll.ufmt_getType(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_isNumeric(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ufmt_isNumeric(util.toPointer(fmt));
}

export function ufmt_getDate(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.ufmt_getDate(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_getDouble(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.ufmt_getDouble(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_getLong(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ufmt_getLong(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_getInt64(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.ufmt_getInt64(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_getObject(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ufmt_getObject(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_getUChars(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ufmt_getUChars(util.toPointer(fmt), util.toPointer(len), util.toPointer(status));
}

export function ufmt_getArrayLength(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ufmt_getArrayLength(util.toPointer(fmt), util.toPointer(status));
}

export function ufmt_getArrayItemByIndex(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  n: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ufmt_getArrayItemByIndex(util.toPointer(fmt), n, util.toPointer(status));
}

export function ufmt_getDecNumChars(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  len: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.ufmt_getDecNumChars(util.toPointer(fmt), util.toPointer(len), util.toPointer(status)));
}

export function ucfpos_open(
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ucfpos_open(util.toPointer(ec));
}

export function ucfpos_reset(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_reset(util.toPointer(ucfpos), util.toPointer(ec));
}

export function ucfpos_close(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_close(util.toPointer(ucfpos));
}

export function ucfpos_constrainCategory(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  category: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_constrainCategory(util.toPointer(ucfpos), category, util.toPointer(ec));
}

export function ucfpos_constrainField(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  category: number /* i32 */,
  field: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_constrainField(util.toPointer(ucfpos), category, field, util.toPointer(ec));
}

export function ucfpos_getCategory(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucfpos_getCategory(util.toPointer(ucfpos), util.toPointer(ec));
}

export function ucfpos_getField(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ucfpos_getField(util.toPointer(ucfpos), util.toPointer(ec));
}

export function ucfpos_getIndexes(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  pStart: Deno.PointerValue | Uint8Array /* ptr */,
  pLimit: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_getIndexes(util.toPointer(ucfpos), util.toPointer(pStart), util.toPointer(pLimit), util.toPointer(ec));
}

export function ucfpos_getInt64IterationContext(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.ucfpos_getInt64IterationContext(util.toPointer(ucfpos), util.toPointer(ec));
}

export function ucfpos_setInt64IterationContext(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue /* i64 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_setInt64IterationContext(util.toPointer(ucfpos), context, util.toPointer(ec));
}

export function ucfpos_matchesField(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  category: number /* i32 */,
  field: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ucfpos_matchesField(util.toPointer(ucfpos), category, field, util.toPointer(ec));
}

export function ucfpos_setState(
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  category: number /* i32 */,
  field: number /* i32 */,
  start: number /* i32 */,
  limit: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ucfpos_setState(util.toPointer(ucfpos), category, field, start, limit, util.toPointer(ec));
}

export function ufmtval_getString(
  ufmtval: Deno.PointerValue | Uint8Array /* ptr */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ufmtval_getString(util.toPointer(ufmtval), util.toPointer(pLength), util.toPointer(ec));
}

export function ufmtval_nextPosition(
  ufmtval: Deno.PointerValue | Uint8Array /* ptr */,
  ucfpos: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ufmtval_nextPosition(util.toPointer(ufmtval), util.toPointer(ucfpos), util.toPointer(ec));
}

export function udtitvfmt_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  skeletonLength: number /* i32 */,
  tzID: Deno.PointerValue | Uint8Array /* ptr */,
  tzIDLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udtitvfmt_open(util.pstrToFfi(locale), util.toPointer(skeleton), skeletonLength, util.toPointer(tzID), tzIDLength, util.toPointer(status));
}

export function udtitvfmt_close(
  formatter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udtitvfmt_close(util.toPointer(formatter));
}

export function udtitvfmt_openResult(
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udtitvfmt_openResult(util.toPointer(ec));
}

export function udtitvfmt_resultAsValue(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udtitvfmt_resultAsValue(util.toPointer(uresult), util.toPointer(ec));
}

export function udtitvfmt_closeResult(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udtitvfmt_closeResult(util.toPointer(uresult));
}

export function udtitvfmt_format(
  formatter: Deno.PointerValue | Uint8Array /* ptr */,
  fromDate: number /* f64 */,
  toDate: number /* f64 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  position: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udtitvfmt_format(util.toPointer(formatter), fromDate, toDate, util.toPointer(result), resultCapacity, util.toPointer(position), util.toPointer(status));
}

export function ugender_getInstance(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ugender_getInstance(util.pstrToFfi(locale), util.toPointer(status));
}

export function ugender_getListGender(
  genderInfo: Deno.PointerValue | Uint8Array /* ptr */,
  genders: Deno.PointerValue | Uint8Array /* ptr */,
  size: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UGender /* Windows.Win32.Globalization.UGender */ {
  return libicu_dll.ugender_getListGender(util.toPointer(genderInfo), util.toPointer(genders), size, util.toPointer(status));
}

export function ulistfmt_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ulistfmt_open(util.pstrToFfi(locale), util.toPointer(status));
}

export function ulistfmt_openForType(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  type: UListFormatterType /* Windows.Win32.Globalization.UListFormatterType */,
  width: UListFormatterWidth /* Windows.Win32.Globalization.UListFormatterWidth */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ulistfmt_openForType(util.pstrToFfi(locale), type, width, util.toPointer(status));
}

export function ulistfmt_close(
  listfmt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ulistfmt_close(util.toPointer(listfmt));
}

export function ulistfmt_openResult(
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ulistfmt_openResult(util.toPointer(ec));
}

export function ulistfmt_resultAsValue(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ulistfmt_resultAsValue(util.toPointer(uresult), util.toPointer(ec));
}

export function ulistfmt_closeResult(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ulistfmt_closeResult(util.toPointer(uresult));
}

export function ulistfmt_format(
  listfmt: Deno.PointerValue | Uint8Array /* ptr */,
  strings: Deno.PointerValue | Uint8Array /* ptr */,
  stringLengths: Deno.PointerValue | Uint8Array /* ptr */,
  stringCount: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ulistfmt_format(util.toPointer(listfmt), util.toPointer(strings), util.toPointer(stringLengths), stringCount, util.toPointer(result), resultCapacity, util.toPointer(status));
}

export function ulistfmt_formatStringsToResult(
  listfmt: Deno.PointerValue | Uint8Array /* ptr */,
  strings: Deno.PointerValue | Uint8Array /* ptr */,
  stringLengths: Deno.PointerValue | Uint8Array /* ptr */,
  stringCount: number /* i32 */,
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ulistfmt_formatStringsToResult(util.toPointer(listfmt), util.toPointer(strings), util.toPointer(stringLengths), stringCount, util.toPointer(uresult), util.toPointer(status));
}

export function ulocdata_open(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ulocdata_open(util.pstrToFfi(localeID), util.toPointer(status));
}

export function ulocdata_close(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ulocdata_close(util.toPointer(uld));
}

export function ulocdata_setNoSubstitute(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
  setting: number /* i8 */,
): void /* void */ {
  return libicu_dll.ulocdata_setNoSubstitute(util.toPointer(uld), setting);
}

export function ulocdata_getNoSubstitute(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.ulocdata_getNoSubstitute(util.toPointer(uld));
}

export function ulocdata_getExemplarSet(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
  fillIn: Deno.PointerValue | Uint8Array /* ptr */,
  options: number /* u32 */,
  extype: ULocaleDataExemplarSetType /* Windows.Win32.Globalization.ULocaleDataExemplarSetType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ulocdata_getExemplarSet(util.toPointer(uld), util.toPointer(fillIn), options, extype, util.toPointer(status));
}

export function ulocdata_getDelimiter(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocaleDataDelimiterType /* Windows.Win32.Globalization.ULocaleDataDelimiterType */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ulocdata_getDelimiter(util.toPointer(uld), type, util.toPointer(result), resultLength, util.toPointer(status));
}

export function ulocdata_getMeasurementSystem(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UMeasurementSystem /* Windows.Win32.Globalization.UMeasurementSystem */ {
  return libicu_dll.ulocdata_getMeasurementSystem(util.pstrToFfi(localeID), util.toPointer(status));
}

export function ulocdata_getPaperSize(
  localeID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  height: Deno.PointerValue | Uint8Array /* ptr */,
  width: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ulocdata_getPaperSize(util.pstrToFfi(localeID), util.toPointer(height), util.toPointer(width), util.toPointer(status));
}

export function ulocdata_getCLDRVersion(
  versionArray: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ulocdata_getCLDRVersion(util.toPointer(versionArray), util.toPointer(status));
}

export function ulocdata_getLocaleDisplayPattern(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ulocdata_getLocaleDisplayPattern(util.toPointer(uld), util.toPointer(pattern), patternCapacity, util.toPointer(status));
}

export function ulocdata_getLocaleSeparator(
  uld: Deno.PointerValue | Uint8Array /* ptr */,
  separator: Deno.PointerValue | Uint8Array /* ptr */,
  separatorCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ulocdata_getLocaleSeparator(util.toPointer(uld), util.toPointer(separator), separatorCapacity, util.toPointer(status));
}

export function u_formatMessage(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_formatMessage(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(result), resultLength, util.toPointer(status));
}

export function u_vformatMessage(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  ap: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_vformatMessage(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(result), resultLength, util.toPointer(ap), util.toPointer(status));
}

export function u_parseMessage(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_parseMessage(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(source), sourceLength, util.toPointer(status));
}

export function u_vparseMessage(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  ap: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_vparseMessage(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(source), sourceLength, util.toPointer(ap), util.toPointer(status));
}

export function u_formatMessageWithError(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_formatMessageWithError(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(result), resultLength, util.toPointer(parseError), util.toPointer(status));
}

export function u_vformatMessageWithError(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  ap: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.u_vformatMessageWithError(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(result), resultLength, util.toPointer(parseError), util.toPointer(ap), util.toPointer(status));
}

export function u_parseMessageWithError(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_parseMessageWithError(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(source), sourceLength, util.toPointer(parseError), util.toPointer(status));
}

export function u_vparseMessageWithError(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  ap: Deno.PointerValue | Uint8Array /* ptr */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.u_vparseMessageWithError(util.pstrToFfi(locale), util.toPointer(pattern), patternLength, util.toPointer(source), sourceLength, util.toPointer(ap), util.toPointer(parseError), util.toPointer(status));
}

export function umsg_open(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umsg_open(util.toPointer(pattern), patternLength, util.pstrToFfi(locale), util.toPointer(parseError), util.toPointer(status));
}

export function umsg_close(
  format: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umsg_close(util.toPointer(format));
}

export function umsg_clone(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.umsg_clone(util.toPointer(fmt), util.toPointer(status));
}

export function umsg_setLocale(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libicu_dll.umsg_setLocale(util.toPointer(fmt), util.pstrToFfi(locale));
}

export function umsg_getLocale(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.umsg_getLocale(util.toPointer(fmt)));
}

export function umsg_applyPattern(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umsg_applyPattern(util.toPointer(fmt), util.toPointer(pattern), patternLength, util.toPointer(parseError), util.toPointer(status));
}

export function umsg_toPattern(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.umsg_toPattern(util.toPointer(fmt), util.toPointer(result), resultLength, util.toPointer(status));
}

export function umsg_format(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.umsg_format(util.toPointer(fmt), util.toPointer(result), resultLength, util.toPointer(status));
}

export function umsg_vformat(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  ap: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.umsg_vformat(util.toPointer(fmt), util.toPointer(result), resultLength, util.toPointer(ap), util.toPointer(status));
}

export function umsg_parse(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  count: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umsg_parse(util.toPointer(fmt), util.toPointer(source), sourceLength, util.toPointer(count), util.toPointer(status));
}

export function umsg_vparse(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  source: Deno.PointerValue | Uint8Array /* ptr */,
  sourceLength: number /* i32 */,
  count: Deno.PointerValue | Uint8Array /* ptr */,
  ap: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.umsg_vparse(util.toPointer(fmt), util.toPointer(source), sourceLength, util.toPointer(count), util.toPointer(ap), util.toPointer(status));
}

export function umsg_autoQuoteApostrophe(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.umsg_autoQuoteApostrophe(util.toPointer(pattern), patternLength, util.toPointer(dest), destCapacity, util.toPointer(ec));
}

export function unum_open(
  style: UNumberFormatStyle /* Windows.Win32.Globalization.UNumberFormatStyle */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  parseErr: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unum_open(style, util.toPointer(pattern), patternLength, util.pstrToFfi(locale), util.toPointer(parseErr), util.toPointer(status));
}

export function unum_close(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unum_close(util.toPointer(fmt));
}

export function unum_clone(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unum_clone(util.toPointer(fmt), util.toPointer(status));
}

export function unum_format(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  number: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_format(util.toPointer(fmt), number, util.toPointer(result), resultLength, util.toPointer(pos), util.toPointer(status));
}

export function unum_formatInt64(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  number: Deno.PointerValue /* i64 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_formatInt64(util.toPointer(fmt), number, util.toPointer(result), resultLength, util.toPointer(pos), util.toPointer(status));
}

export function unum_formatDouble(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  number: number /* f64 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_formatDouble(util.toPointer(fmt), number, util.toPointer(result), resultLength, util.toPointer(pos), util.toPointer(status));
}

export function unum_formatDoubleForFields(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  number: number /* f64 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  fpositer: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_formatDoubleForFields(util.toPointer(format), number, util.toPointer(result), resultLength, util.toPointer(fpositer), util.toPointer(status));
}

export function unum_formatDecimal(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  number: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_formatDecimal(util.toPointer(fmt), util.pstrToFfi(number), length, util.toPointer(result), resultLength, util.toPointer(pos), util.toPointer(status));
}

export function unum_formatDoubleCurrency(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  number: number /* f64 */,
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_formatDoubleCurrency(util.toPointer(fmt), number, util.toPointer(currency), util.toPointer(result), resultLength, util.toPointer(pos), util.toPointer(status));
}

export function unum_formatUFormattable(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  number: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_formatUFormattable(util.toPointer(fmt), util.toPointer(number), util.toPointer(result), resultLength, util.toPointer(pos), util.toPointer(status));
}

export function unum_parse(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_parse(util.toPointer(fmt), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(status));
}

export function unum_parseInt64(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.unum_parseInt64(util.toPointer(fmt), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(status));
}

export function unum_parseDouble(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.unum_parseDouble(util.toPointer(fmt), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(status));
}

export function unum_parseDecimal(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  outBuf: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  outBufLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_parseDecimal(util.toPointer(fmt), util.toPointer(text), textLength, util.toPointer(parsePos), util.pstrToFfi(outBuf), outBufLength, util.toPointer(status));
}

export function unum_parseDoubleCurrency(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  currency: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.unum_parseDoubleCurrency(util.toPointer(fmt), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(currency), util.toPointer(status));
}

export function unum_parseToUFormattable(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unum_parseToUFormattable(util.toPointer(fmt), util.toPointer(result), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(status));
}

export function unum_applyPattern(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  localized: number /* i8 */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unum_applyPattern(util.toPointer(format), localized, util.toPointer(pattern), patternLength, util.toPointer(parseError), util.toPointer(status));
}

export function unum_getAvailable(
  localeIndex: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.unum_getAvailable(localeIndex));
}

export function unum_countAvailable(): number /* i32 */ {
  return libicu_dll.unum_countAvailable();
}

export function unum_getAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UNumberFormatAttribute /* Windows.Win32.Globalization.UNumberFormatAttribute */,
): number /* i32 */ {
  return libicu_dll.unum_getAttribute(util.toPointer(fmt), attr);
}

export function unum_setAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UNumberFormatAttribute /* Windows.Win32.Globalization.UNumberFormatAttribute */,
  newValue: number /* i32 */,
): void /* void */ {
  return libicu_dll.unum_setAttribute(util.toPointer(fmt), attr, newValue);
}

export function unum_getDoubleAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UNumberFormatAttribute /* Windows.Win32.Globalization.UNumberFormatAttribute */,
): number /* f64 */ {
  return libicu_dll.unum_getDoubleAttribute(util.toPointer(fmt), attr);
}

export function unum_setDoubleAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UNumberFormatAttribute /* Windows.Win32.Globalization.UNumberFormatAttribute */,
  newValue: number /* f64 */,
): void /* void */ {
  return libicu_dll.unum_setDoubleAttribute(util.toPointer(fmt), attr, newValue);
}

export function unum_getTextAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  tag: UNumberFormatTextAttribute /* Windows.Win32.Globalization.UNumberFormatTextAttribute */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_getTextAttribute(util.toPointer(fmt), tag, util.toPointer(result), resultLength, util.toPointer(status));
}

export function unum_setTextAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  tag: UNumberFormatTextAttribute /* Windows.Win32.Globalization.UNumberFormatTextAttribute */,
  newValue: Deno.PointerValue | Uint8Array /* ptr */,
  newValueLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unum_setTextAttribute(util.toPointer(fmt), tag, util.toPointer(newValue), newValueLength, util.toPointer(status));
}

export function unum_toPattern(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  isPatternLocalized: number /* i8 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_toPattern(util.toPointer(fmt), isPatternLocalized, util.toPointer(result), resultLength, util.toPointer(status));
}

export function unum_getSymbol(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  symbol: UNumberFormatSymbol /* Windows.Win32.Globalization.UNumberFormatSymbol */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  size: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unum_getSymbol(util.toPointer(fmt), symbol, util.toPointer(buffer), size, util.toPointer(status));
}

export function unum_setSymbol(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  symbol: UNumberFormatSymbol /* Windows.Win32.Globalization.UNumberFormatSymbol */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unum_setSymbol(util.toPointer(fmt), symbol, util.toPointer(value), length, util.toPointer(status));
}

export function unum_getLocaleByType(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocDataLocaleType /* Windows.Win32.Globalization.ULocDataLocaleType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.unum_getLocaleByType(util.toPointer(fmt), type, util.toPointer(status)));
}

export function unum_setContext(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  value: UDisplayContext /* Windows.Win32.Globalization.UDisplayContext */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unum_setContext(util.toPointer(fmt), value, util.toPointer(status));
}

export function unum_getContext(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  type: UDisplayContextType /* Windows.Win32.Globalization.UDisplayContextType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UDisplayContext /* Windows.Win32.Globalization.UDisplayContext */ {
  return libicu_dll.unum_getContext(util.toPointer(fmt), type, util.toPointer(status));
}

export function udat_toCalendarDateField(
  field: UDateFormatField /* Windows.Win32.Globalization.UDateFormatField */,
): UCalendarDateFields /* Windows.Win32.Globalization.UCalendarDateFields */ {
  return libicu_dll.udat_toCalendarDateField(field);
}

export function udat_open(
  timeStyle: UDateFormatStyle /* Windows.Win32.Globalization.UDateFormatStyle */,
  dateStyle: UDateFormatStyle /* Windows.Win32.Globalization.UDateFormatStyle */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  tzID: Deno.PointerValue | Uint8Array /* ptr */,
  tzIDLength: number /* i32 */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udat_open(timeStyle, dateStyle, util.pstrToFfi(locale), util.toPointer(tzID), tzIDLength, util.toPointer(pattern), patternLength, util.toPointer(status));
}

export function udat_close(
  format: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_close(util.toPointer(format));
}

export function udat_getBooleanAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UDateFormatBooleanAttribute /* Windows.Win32.Globalization.UDateFormatBooleanAttribute */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.udat_getBooleanAttribute(util.toPointer(fmt), attr, util.toPointer(status));
}

export function udat_setBooleanAttribute(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  attr: UDateFormatBooleanAttribute /* Windows.Win32.Globalization.UDateFormatBooleanAttribute */,
  newValue: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_setBooleanAttribute(util.toPointer(fmt), attr, newValue, util.toPointer(status));
}

export function udat_clone(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udat_clone(util.toPointer(fmt), util.toPointer(status));
}

export function udat_format(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  dateToFormat: number /* f64 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  position: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udat_format(util.toPointer(format), dateToFormat, util.toPointer(result), resultLength, util.toPointer(position), util.toPointer(status));
}

export function udat_formatCalendar(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  calendar: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  position: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udat_formatCalendar(util.toPointer(format), util.toPointer(calendar), util.toPointer(result), capacity, util.toPointer(position), util.toPointer(status));
}

export function udat_formatForFields(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  dateToFormat: number /* f64 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  fpositer: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udat_formatForFields(util.toPointer(format), dateToFormat, util.toPointer(result), resultLength, util.toPointer(fpositer), util.toPointer(status));
}

export function udat_formatCalendarForFields(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  calendar: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  fpositer: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udat_formatCalendarForFields(util.toPointer(format), util.toPointer(calendar), util.toPointer(result), capacity, util.toPointer(fpositer), util.toPointer(status));
}

export function udat_parse(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.udat_parse(util.toPointer(format), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(status));
}

export function udat_parseCalendar(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  calendar: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  parsePos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_parseCalendar(util.toPointer(format), util.toPointer(calendar), util.toPointer(text), textLength, util.toPointer(parsePos), util.toPointer(status));
}

export function udat_isLenient(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.udat_isLenient(util.toPointer(fmt));
}

export function udat_setLenient(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  isLenient: number /* i8 */,
): void /* void */ {
  return libicu_dll.udat_setLenient(util.toPointer(fmt), isLenient);
}

export function udat_getCalendar(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udat_getCalendar(util.toPointer(fmt));
}

export function udat_setCalendar(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  calendarToSet: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_setCalendar(util.toPointer(fmt), util.toPointer(calendarToSet));
}

export function udat_getNumberFormat(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udat_getNumberFormat(util.toPointer(fmt));
}

export function udat_getNumberFormatForField(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  field: number /* u16 */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udat_getNumberFormatForField(util.toPointer(fmt), field);
}

export function udat_adoptNumberFormatForFields(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  fields: Deno.PointerValue | Uint8Array /* ptr */,
  numberFormatToSet: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_adoptNumberFormatForFields(util.toPointer(fmt), util.toPointer(fields), util.toPointer(numberFormatToSet), util.toPointer(status));
}

export function udat_setNumberFormat(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  numberFormatToSet: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_setNumberFormat(util.toPointer(fmt), util.toPointer(numberFormatToSet));
}

export function udat_adoptNumberFormat(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  numberFormatToAdopt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_adoptNumberFormat(util.toPointer(fmt), util.toPointer(numberFormatToAdopt));
}

export function udat_getAvailable(
  localeIndex: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.udat_getAvailable(localeIndex));
}

export function udat_countAvailable(): number /* i32 */ {
  return libicu_dll.udat_countAvailable();
}

export function udat_get2DigitYearStart(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* f64 */ {
  return libicu_dll.udat_get2DigitYearStart(util.toPointer(fmt), util.toPointer(status));
}

export function udat_set2DigitYearStart(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  d: number /* f64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_set2DigitYearStart(util.toPointer(fmt), d, util.toPointer(status));
}

export function udat_toPattern(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  localized: number /* i8 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udat_toPattern(util.toPointer(fmt), localized, util.toPointer(result), resultLength, util.toPointer(status));
}

export function udat_applyPattern(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  localized: number /* i8 */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
): void /* void */ {
  return libicu_dll.udat_applyPattern(util.toPointer(format), localized, util.toPointer(pattern), patternLength);
}

export function udat_getSymbols(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  type: UDateFormatSymbolType /* Windows.Win32.Globalization.UDateFormatSymbolType */,
  symbolIndex: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udat_getSymbols(util.toPointer(fmt), type, symbolIndex, util.toPointer(result), resultLength, util.toPointer(status));
}

export function udat_countSymbols(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  type: UDateFormatSymbolType /* Windows.Win32.Globalization.UDateFormatSymbolType */,
): number /* i32 */ {
  return libicu_dll.udat_countSymbols(util.toPointer(fmt), type);
}

export function udat_setSymbols(
  format: Deno.PointerValue | Uint8Array /* ptr */,
  type: UDateFormatSymbolType /* Windows.Win32.Globalization.UDateFormatSymbolType */,
  symbolIndex: number /* i32 */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
  valueLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_setSymbols(util.toPointer(format), type, symbolIndex, util.toPointer(value), valueLength, util.toPointer(status));
}

export function udat_getLocaleByType(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  type: ULocDataLocaleType /* Windows.Win32.Globalization.ULocDataLocaleType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.udat_getLocaleByType(util.toPointer(fmt), type, util.toPointer(status)));
}

export function udat_setContext(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  value: UDisplayContext /* Windows.Win32.Globalization.UDisplayContext */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udat_setContext(util.toPointer(fmt), value, util.toPointer(status));
}

export function udat_getContext(
  fmt: Deno.PointerValue | Uint8Array /* ptr */,
  type: UDisplayContextType /* Windows.Win32.Globalization.UDisplayContextType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): UDisplayContext /* Windows.Win32.Globalization.UDisplayContext */ {
  return libicu_dll.udat_getContext(util.toPointer(fmt), type, util.toPointer(status));
}

export function udatpg_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_open(util.pstrToFfi(locale), util.toPointer(pErrorCode));
}

export function udatpg_openEmpty(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_openEmpty(util.toPointer(pErrorCode));
}

export function udatpg_close(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.udatpg_close(util.toPointer(dtpg));
}

export function udatpg_clone(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_clone(util.toPointer(dtpg), util.toPointer(pErrorCode));
}

export function udatpg_getBestPattern(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  bestPattern: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_getBestPattern(util.toPointer(dtpg), util.toPointer(skeleton), length, util.toPointer(bestPattern), capacity, util.toPointer(pErrorCode));
}

export function udatpg_getBestPatternWithOptions(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  options: UDateTimePatternMatchOptions /* Windows.Win32.Globalization.UDateTimePatternMatchOptions */,
  bestPattern: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_getBestPatternWithOptions(util.toPointer(dtpg), util.toPointer(skeleton), length, options, util.toPointer(bestPattern), capacity, util.toPointer(pErrorCode));
}

export function udatpg_getSkeleton(
  unusedDtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_getSkeleton(util.toPointer(unusedDtpg), util.toPointer(pattern), length, util.toPointer(skeleton), capacity, util.toPointer(pErrorCode));
}

export function udatpg_getBaseSkeleton(
  unusedDtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  baseSkeleton: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_getBaseSkeleton(util.toPointer(unusedDtpg), util.toPointer(pattern), length, util.toPointer(baseSkeleton), capacity, util.toPointer(pErrorCode));
}

export function udatpg_addPattern(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  override: number /* i8 */,
  conflictingPattern: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): UDateTimePatternConflict /* Windows.Win32.Globalization.UDateTimePatternConflict */ {
  return libicu_dll.udatpg_addPattern(util.toPointer(dtpg), util.toPointer(pattern), patternLength, override, util.toPointer(conflictingPattern), capacity, util.toPointer(pLength), util.toPointer(pErrorCode));
}

export function udatpg_setAppendItemFormat(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  field: UDateTimePatternField /* Windows.Win32.Globalization.UDateTimePatternField */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.udatpg_setAppendItemFormat(util.toPointer(dtpg), field, util.toPointer(value), length);
}

export function udatpg_getAppendItemFormat(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  field: UDateTimePatternField /* Windows.Win32.Globalization.UDateTimePatternField */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_getAppendItemFormat(util.toPointer(dtpg), field, util.toPointer(pLength));
}

export function udatpg_setAppendItemName(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  field: UDateTimePatternField /* Windows.Win32.Globalization.UDateTimePatternField */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.udatpg_setAppendItemName(util.toPointer(dtpg), field, util.toPointer(value), length);
}

export function udatpg_getAppendItemName(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  field: UDateTimePatternField /* Windows.Win32.Globalization.UDateTimePatternField */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_getAppendItemName(util.toPointer(dtpg), field, util.toPointer(pLength));
}

export function udatpg_getFieldDisplayName(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  field: UDateTimePatternField /* Windows.Win32.Globalization.UDateTimePatternField */,
  width: UDateTimePGDisplayWidth /* Windows.Win32.Globalization.UDateTimePGDisplayWidth */,
  fieldName: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_getFieldDisplayName(util.toPointer(dtpg), field, width, util.toPointer(fieldName), capacity, util.toPointer(pErrorCode));
}

export function udatpg_setDateTimeFormat(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  dtFormat: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.udatpg_setDateTimeFormat(util.toPointer(dtpg), util.toPointer(dtFormat), length);
}

export function udatpg_getDateTimeFormat(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_getDateTimeFormat(util.toPointer(dtpg), util.toPointer(pLength));
}

export function udatpg_setDecimal(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  decimal: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
): void /* void */ {
  return libicu_dll.udatpg_setDecimal(util.toPointer(dtpg), util.toPointer(decimal), length);
}

export function udatpg_getDecimal(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_getDecimal(util.toPointer(dtpg), util.toPointer(pLength));
}

export function udatpg_replaceFieldTypes(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  skeletonLength: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_replaceFieldTypes(util.toPointer(dtpg), util.toPointer(pattern), patternLength, util.toPointer(skeleton), skeletonLength, util.toPointer(dest), destCapacity, util.toPointer(pErrorCode));
}

export function udatpg_replaceFieldTypesWithOptions(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  skeletonLength: number /* i32 */,
  options: UDateTimePatternMatchOptions /* Windows.Win32.Globalization.UDateTimePatternMatchOptions */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.udatpg_replaceFieldTypesWithOptions(util.toPointer(dtpg), util.toPointer(pattern), patternLength, util.toPointer(skeleton), skeletonLength, options, util.toPointer(dest), destCapacity, util.toPointer(pErrorCode));
}

export function udatpg_openSkeletons(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_openSkeletons(util.toPointer(dtpg), util.toPointer(pErrorCode));
}

export function udatpg_openBaseSkeletons(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_openBaseSkeletons(util.toPointer(dtpg), util.toPointer(pErrorCode));
}

export function udatpg_getPatternForSkeleton(
  dtpg: Deno.PointerValue | Uint8Array /* ptr */,
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  skeletonLength: number /* i32 */,
  pLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.udatpg_getPatternForSkeleton(util.toPointer(dtpg), util.toPointer(skeleton), skeletonLength, util.toPointer(pLength));
}

export function unumf_openForSkeletonAndLocale(
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  skeletonLen: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumf_openForSkeletonAndLocale(util.toPointer(skeleton), skeletonLen, util.pstrToFfi(locale), util.toPointer(ec));
}

export function unumf_openForSkeletonAndLocaleWithError(
  skeleton: Deno.PointerValue | Uint8Array /* ptr */,
  skeletonLen: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  perror: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumf_openForSkeletonAndLocaleWithError(util.toPointer(skeleton), skeletonLen, util.pstrToFfi(locale), util.toPointer(perror), util.toPointer(ec));
}

export function unumf_openResult(
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumf_openResult(util.toPointer(ec));
}

export function unumf_formatInt(
  uformatter: Deno.PointerValue | Uint8Array /* ptr */,
  value: Deno.PointerValue /* i64 */,
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumf_formatInt(util.toPointer(uformatter), value, util.toPointer(uresult), util.toPointer(ec));
}

export function unumf_formatDouble(
  uformatter: Deno.PointerValue | Uint8Array /* ptr */,
  value: number /* f64 */,
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumf_formatDouble(util.toPointer(uformatter), value, util.toPointer(uresult), util.toPointer(ec));
}

export function unumf_formatDecimal(
  uformatter: Deno.PointerValue | Uint8Array /* ptr */,
  value: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  valueLen: number /* i32 */,
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumf_formatDecimal(util.toPointer(uformatter), util.pstrToFfi(value), valueLen, util.toPointer(uresult), util.toPointer(ec));
}

export function unumf_resultAsValue(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumf_resultAsValue(util.toPointer(uresult), util.toPointer(ec));
}

export function unumf_resultToString(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  buffer: Deno.PointerValue | Uint8Array /* ptr */,
  bufferCapacity: number /* i32 */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unumf_resultToString(util.toPointer(uresult), util.toPointer(buffer), bufferCapacity, util.toPointer(ec));
}

export function unumf_resultNextFieldPosition(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ufpos: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.unumf_resultNextFieldPosition(util.toPointer(uresult), util.toPointer(ufpos), util.toPointer(ec));
}

export function unumf_resultGetAllFieldPositions(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
  ufpositer: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumf_resultGetAllFieldPositions(util.toPointer(uresult), util.toPointer(ufpositer), util.toPointer(ec));
}

export function unumf_close(
  uformatter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumf_close(util.toPointer(uformatter));
}

export function unumf_closeResult(
  uresult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumf_closeResult(util.toPointer(uresult));
}

export function unumsys_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumsys_open(util.pstrToFfi(locale), util.toPointer(status));
}

export function unumsys_openByName(
  name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumsys_openByName(util.pstrToFfi(name), util.toPointer(status));
}

export function unumsys_close(
  unumsys: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.unumsys_close(util.toPointer(unumsys));
}

export function unumsys_openAvailableNames(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.unumsys_openAvailableNames(util.toPointer(status));
}

export function unumsys_getName(
  unumsys: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.unumsys_getName(util.toPointer(unumsys)));
}

export function unumsys_isAlgorithmic(
  unumsys: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.unumsys_isAlgorithmic(util.toPointer(unumsys));
}

export function unumsys_getRadix(
  unumsys: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unumsys_getRadix(util.toPointer(unumsys));
}

export function unumsys_getDescription(
  unumsys: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.unumsys_getDescription(util.toPointer(unumsys), util.toPointer(result), resultLength, util.toPointer(status));
}

export function uplrules_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uplrules_open(util.pstrToFfi(locale), util.toPointer(status));
}

export function uplrules_openForType(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  type: UPluralType /* Windows.Win32.Globalization.UPluralType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uplrules_openForType(util.pstrToFfi(locale), type, util.toPointer(status));
}

export function uplrules_close(
  uplrules: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uplrules_close(util.toPointer(uplrules));
}

export function uplrules_select(
  uplrules: Deno.PointerValue | Uint8Array /* ptr */,
  number: number /* f64 */,
  keyword: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uplrules_select(util.toPointer(uplrules), number, util.toPointer(keyword), capacity, util.toPointer(status));
}

export function uplrules_selectFormatted(
  uplrules: Deno.PointerValue | Uint8Array /* ptr */,
  number: Deno.PointerValue | Uint8Array /* ptr */,
  keyword: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uplrules_selectFormatted(util.toPointer(uplrules), util.toPointer(number), util.toPointer(keyword), capacity, util.toPointer(status));
}

export function uplrules_getKeywords(
  uplrules: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uplrules_getKeywords(util.toPointer(uplrules), util.toPointer(status));
}

export function uregex_open(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternLength: number /* i32 */,
  flags: number /* u32 */,
  pe: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_open(util.toPointer(pattern), patternLength, flags, util.toPointer(pe), util.toPointer(status));
}

export function uregex_openUText(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  flags: number /* u32 */,
  pe: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_openUText(util.toPointer(pattern), flags, util.toPointer(pe), util.toPointer(status));
}

export function uregex_openC(
  pattern: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  flags: number /* u32 */,
  pe: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_openC(util.pstrToFfi(pattern), flags, util.toPointer(pe), util.toPointer(status));
}

export function uregex_close(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_close(util.toPointer(regexp));
}

export function uregex_clone(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_clone(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_pattern(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  patLength: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_pattern(util.toPointer(regexp), util.toPointer(patLength), util.toPointer(status));
}

export function uregex_patternUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_patternUText(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_flags(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_flags(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_setText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setText(util.toPointer(regexp), util.toPointer(text), textLength, util.toPointer(status));
}

export function uregex_setUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setUText(util.toPointer(regexp), util.toPointer(text), util.toPointer(status));
}

export function uregex_getText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_getText(util.toPointer(regexp), util.toPointer(textLength), util.toPointer(status));
}

export function uregex_getUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_getUText(util.toPointer(regexp), util.toPointer(dest), util.toPointer(status));
}

export function uregex_refreshUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_refreshUText(util.toPointer(regexp), util.toPointer(text), util.toPointer(status));
}

export function uregex_matches(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  startIndex: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_matches(util.toPointer(regexp), startIndex, util.toPointer(status));
}

export function uregex_matches64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  startIndex: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_matches64(util.toPointer(regexp), startIndex, util.toPointer(status));
}

export function uregex_lookingAt(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  startIndex: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_lookingAt(util.toPointer(regexp), startIndex, util.toPointer(status));
}

export function uregex_lookingAt64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  startIndex: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_lookingAt64(util.toPointer(regexp), startIndex, util.toPointer(status));
}

export function uregex_find(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  startIndex: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_find(util.toPointer(regexp), startIndex, util.toPointer(status));
}

export function uregex_find64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  startIndex: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_find64(util.toPointer(regexp), startIndex, util.toPointer(status));
}

export function uregex_findNext(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_findNext(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_groupCount(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_groupCount(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_groupNumberFromName(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupName: Deno.PointerValue | Uint8Array /* ptr */,
  nameLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_groupNumberFromName(util.toPointer(regexp), util.toPointer(groupName), nameLength, util.toPointer(status));
}

export function uregex_groupNumberFromCName(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nameLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_groupNumberFromCName(util.toPointer(regexp), util.pstrToFfi(groupName), nameLength, util.toPointer(status));
}

export function uregex_group(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupNum: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_group(util.toPointer(regexp), groupNum, util.toPointer(dest), destCapacity, util.toPointer(status));
}

export function uregex_groupUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupNum: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  groupLength: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_groupUText(util.toPointer(regexp), groupNum, util.toPointer(dest), util.toPointer(groupLength), util.toPointer(status));
}

export function uregex_start(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupNum: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_start(util.toPointer(regexp), groupNum, util.toPointer(status));
}

export function uregex_start64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupNum: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.uregex_start64(util.toPointer(regexp), groupNum, util.toPointer(status));
}

export function uregex_end(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupNum: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_end(util.toPointer(regexp), groupNum, util.toPointer(status));
}

export function uregex_end64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  groupNum: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.uregex_end64(util.toPointer(regexp), groupNum, util.toPointer(status));
}

export function uregex_reset(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  index: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_reset(util.toPointer(regexp), index, util.toPointer(status));
}

export function uregex_reset64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  index: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_reset64(util.toPointer(regexp), index, util.toPointer(status));
}

export function uregex_setRegion(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  regionStart: number /* i32 */,
  regionLimit: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setRegion(util.toPointer(regexp), regionStart, regionLimit, util.toPointer(status));
}

export function uregex_setRegion64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  regionStart: Deno.PointerValue /* i64 */,
  regionLimit: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setRegion64(util.toPointer(regexp), regionStart, regionLimit, util.toPointer(status));
}

export function uregex_setRegionAndStart(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  regionStart: Deno.PointerValue /* i64 */,
  regionLimit: Deno.PointerValue /* i64 */,
  startIndex: Deno.PointerValue /* i64 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setRegionAndStart(util.toPointer(regexp), regionStart, regionLimit, startIndex, util.toPointer(status));
}

export function uregex_regionStart(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_regionStart(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_regionStart64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.uregex_regionStart64(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_regionEnd(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_regionEnd(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_regionEnd64(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.uregex_regionEnd64(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_hasTransparentBounds(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_hasTransparentBounds(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_useTransparentBounds(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  b: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_useTransparentBounds(util.toPointer(regexp), b, util.toPointer(status));
}

export function uregex_hasAnchoringBounds(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_hasAnchoringBounds(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_useAnchoringBounds(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  b: number /* i8 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_useAnchoringBounds(util.toPointer(regexp), b, util.toPointer(status));
}

export function uregex_hitEnd(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_hitEnd(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_requireEnd(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregex_requireEnd(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_replaceAll(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  replacementText: Deno.PointerValue | Uint8Array /* ptr */,
  replacementLength: number /* i32 */,
  destBuf: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_replaceAll(util.toPointer(regexp), util.toPointer(replacementText), replacementLength, util.toPointer(destBuf), destCapacity, util.toPointer(status));
}

export function uregex_replaceAllUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  replacement: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_replaceAllUText(util.toPointer(regexp), util.toPointer(replacement), util.toPointer(dest), util.toPointer(status));
}

export function uregex_replaceFirst(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  replacementText: Deno.PointerValue | Uint8Array /* ptr */,
  replacementLength: number /* i32 */,
  destBuf: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_replaceFirst(util.toPointer(regexp), util.toPointer(replacementText), replacementLength, util.toPointer(destBuf), destCapacity, util.toPointer(status));
}

export function uregex_replaceFirstUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  replacement: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_replaceFirstUText(util.toPointer(regexp), util.toPointer(replacement), util.toPointer(dest), util.toPointer(status));
}

export function uregex_appendReplacement(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  replacementText: Deno.PointerValue | Uint8Array /* ptr */,
  replacementLength: number /* i32 */,
  destBuf: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_appendReplacement(util.toPointer(regexp), util.toPointer(replacementText), replacementLength, util.toPointer(destBuf), util.toPointer(destCapacity), util.toPointer(status));
}

export function uregex_appendReplacementUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  replacementText: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_appendReplacementUText(util.toPointer(regexp), util.toPointer(replacementText), util.toPointer(dest), util.toPointer(status));
}

export function uregex_appendTail(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  destBuf: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_appendTail(util.toPointer(regexp), util.toPointer(destBuf), util.toPointer(destCapacity), util.toPointer(status));
}

export function uregex_appendTailUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregex_appendTailUText(util.toPointer(regexp), util.toPointer(dest), util.toPointer(status));
}

export function uregex_split(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  destBuf: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  requiredCapacity: Deno.PointerValue | Uint8Array /* ptr */,
  destFields: Deno.PointerValue | Uint8Array /* ptr */,
  destFieldsCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_split(util.toPointer(regexp), util.toPointer(destBuf), destCapacity, util.toPointer(requiredCapacity), util.toPointer(destFields), destFieldsCapacity, util.toPointer(status));
}

export function uregex_splitUText(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  destFields: Deno.PointerValue | Uint8Array /* ptr */,
  destFieldsCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_splitUText(util.toPointer(regexp), util.toPointer(destFields), destFieldsCapacity, util.toPointer(status));
}

export function uregex_setTimeLimit(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  limit: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setTimeLimit(util.toPointer(regexp), limit, util.toPointer(status));
}

export function uregex_getTimeLimit(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_getTimeLimit(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_setStackLimit(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  limit: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setStackLimit(util.toPointer(regexp), limit, util.toPointer(status));
}

export function uregex_getStackLimit(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregex_getStackLimit(util.toPointer(regexp), util.toPointer(status));
}

export function uregex_setMatchCallback(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.URegexMatchCallback */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setMatchCallback(util.toPointer(regexp), util.toPointer(callback), util.toPointer(context), util.toPointer(status));
}

export function uregex_getMatchCallback(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_getMatchCallback(util.toPointer(regexp), util.toPointer(callback), util.toPointer(context), util.toPointer(status));
}

export function uregex_setFindProgressCallback(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Uint8Array | Deno.PointerValue /* Windows.Win32.Globalization.URegexFindProgressCallback */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_setFindProgressCallback(util.toPointer(regexp), util.toPointer(callback), util.toPointer(context), util.toPointer(status));
}

export function uregex_getFindProgressCallback(
  regexp: Deno.PointerValue | Uint8Array /* ptr */,
  callback: Deno.PointerValue | Uint8Array /* ptr */,
  context: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uregex_getFindProgressCallback(util.toPointer(regexp), util.toPointer(callback), util.toPointer(context), util.toPointer(status));
}

export function uregion_getRegionFromCode(
  regionCode: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getRegionFromCode(util.pstrToFfi(regionCode), util.toPointer(status));
}

export function uregion_getRegionFromNumericCode(
  code: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getRegionFromNumericCode(code, util.toPointer(status));
}

export function uregion_getAvailable(
  type: URegionType /* Windows.Win32.Globalization.URegionType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getAvailable(type, util.toPointer(status));
}

export function uregion_areEqual(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
  otherRegion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregion_areEqual(util.toPointer(uregion), util.toPointer(otherRegion));
}

export function uregion_getContainingRegion(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getContainingRegion(util.toPointer(uregion));
}

export function uregion_getContainingRegionOfType(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
  type: URegionType /* Windows.Win32.Globalization.URegionType */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getContainingRegionOfType(util.toPointer(uregion), type);
}

export function uregion_getContainedRegions(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getContainedRegions(util.toPointer(uregion), util.toPointer(status));
}

export function uregion_getContainedRegionsOfType(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
  type: URegionType /* Windows.Win32.Globalization.URegionType */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getContainedRegionsOfType(util.toPointer(uregion), type, util.toPointer(status));
}

export function uregion_contains(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
  otherRegion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i8 */ {
  return libicu_dll.uregion_contains(util.toPointer(uregion), util.toPointer(otherRegion));
}

export function uregion_getPreferredValues(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uregion_getPreferredValues(util.toPointer(uregion), util.toPointer(status));
}

export function uregion_getRegionCode(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uregion_getRegionCode(util.toPointer(uregion)));
}

export function uregion_getNumericCode(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uregion_getNumericCode(util.toPointer(uregion));
}

export function uregion_getType(
  uregion: Deno.PointerValue | Uint8Array /* ptr */,
): URegionType /* Windows.Win32.Globalization.URegionType */ {
  return libicu_dll.uregion_getType(util.toPointer(uregion));
}

export function ureldatefmt_open(
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nfToAdopt: Deno.PointerValue | Uint8Array /* ptr */,
  width: UDateRelativeDateTimeFormatterStyle /* Windows.Win32.Globalization.UDateRelativeDateTimeFormatterStyle */,
  capitalizationContext: UDisplayContext /* Windows.Win32.Globalization.UDisplayContext */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ureldatefmt_open(util.pstrToFfi(locale), util.toPointer(nfToAdopt), width, capitalizationContext, util.toPointer(status));
}

export function ureldatefmt_close(
  reldatefmt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ureldatefmt_close(util.toPointer(reldatefmt));
}

export function ureldatefmt_openResult(
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ureldatefmt_openResult(util.toPointer(ec));
}

export function ureldatefmt_resultAsValue(
  ufrdt: Deno.PointerValue | Uint8Array /* ptr */,
  ec: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.ureldatefmt_resultAsValue(util.toPointer(ufrdt), util.toPointer(ec));
}

export function ureldatefmt_closeResult(
  ufrdt: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ureldatefmt_closeResult(util.toPointer(ufrdt));
}

export function ureldatefmt_formatNumeric(
  reldatefmt: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* f64 */,
  unit: URelativeDateTimeUnit /* Windows.Win32.Globalization.URelativeDateTimeUnit */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ureldatefmt_formatNumeric(util.toPointer(reldatefmt), offset, unit, util.toPointer(result), resultCapacity, util.toPointer(status));
}

export function ureldatefmt_formatNumericToResult(
  reldatefmt: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* f64 */,
  unit: URelativeDateTimeUnit /* Windows.Win32.Globalization.URelativeDateTimeUnit */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ureldatefmt_formatNumericToResult(util.toPointer(reldatefmt), offset, unit, util.toPointer(result), util.toPointer(status));
}

export function ureldatefmt_format(
  reldatefmt: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* f64 */,
  unit: URelativeDateTimeUnit /* Windows.Win32.Globalization.URelativeDateTimeUnit */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ureldatefmt_format(util.toPointer(reldatefmt), offset, unit, util.toPointer(result), resultCapacity, util.toPointer(status));
}

export function ureldatefmt_formatToResult(
  reldatefmt: Deno.PointerValue | Uint8Array /* ptr */,
  offset: number /* f64 */,
  unit: URelativeDateTimeUnit /* Windows.Win32.Globalization.URelativeDateTimeUnit */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.ureldatefmt_formatToResult(util.toPointer(reldatefmt), offset, unit, util.toPointer(result), util.toPointer(status));
}

export function ureldatefmt_combineDateAndTime(
  reldatefmt: Deno.PointerValue | Uint8Array /* ptr */,
  relativeDateString: Deno.PointerValue | Uint8Array /* ptr */,
  relativeDateStringLen: number /* i32 */,
  timeString: Deno.PointerValue | Uint8Array /* ptr */,
  timeStringLen: number /* i32 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.ureldatefmt_combineDateAndTime(util.toPointer(reldatefmt), util.toPointer(relativeDateString), relativeDateStringLen, util.toPointer(timeString), timeStringLen, util.toPointer(result), resultCapacity, util.toPointer(status));
}

export function usearch_open(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternlength: number /* i32 */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textlength: number /* i32 */,
  locale: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  breakiter: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usearch_open(util.toPointer(pattern), patternlength, util.toPointer(text), textlength, util.pstrToFfi(locale), util.toPointer(breakiter), util.toPointer(status));
}

export function usearch_openFromCollator(
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternlength: number /* i32 */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textlength: number /* i32 */,
  collator: Deno.PointerValue | Uint8Array /* ptr */,
  breakiter: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usearch_openFromCollator(util.toPointer(pattern), patternlength, util.toPointer(text), textlength, util.toPointer(collator), util.toPointer(breakiter), util.toPointer(status));
}

export function usearch_close(
  searchiter: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_close(util.toPointer(searchiter));
}

export function usearch_setOffset(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  position: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_setOffset(util.toPointer(strsrch), position, util.toPointer(status));
}

export function usearch_getOffset(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_getOffset(util.toPointer(strsrch));
}

export function usearch_setAttribute(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  attribute: USearchAttribute /* Windows.Win32.Globalization.USearchAttribute */,
  value: USearchAttributeValue /* Windows.Win32.Globalization.USearchAttributeValue */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_setAttribute(util.toPointer(strsrch), attribute, value, util.toPointer(status));
}

export function usearch_getAttribute(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  attribute: USearchAttribute /* Windows.Win32.Globalization.USearchAttribute */,
): USearchAttributeValue /* Windows.Win32.Globalization.USearchAttributeValue */ {
  return libicu_dll.usearch_getAttribute(util.toPointer(strsrch), attribute);
}

export function usearch_getMatchedStart(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_getMatchedStart(util.toPointer(strsrch));
}

export function usearch_getMatchedLength(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_getMatchedLength(util.toPointer(strsrch));
}

export function usearch_getMatchedText(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_getMatchedText(util.toPointer(strsrch), util.toPointer(result), resultCapacity, util.toPointer(status));
}

export function usearch_setBreakIterator(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  breakiter: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_setBreakIterator(util.toPointer(strsrch), util.toPointer(breakiter), util.toPointer(status));
}

export function usearch_getBreakIterator(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usearch_getBreakIterator(util.toPointer(strsrch));
}

export function usearch_setText(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textlength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_setText(util.toPointer(strsrch), util.toPointer(text), textlength, util.toPointer(status));
}

export function usearch_getText(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usearch_getText(util.toPointer(strsrch), util.toPointer(length));
}

export function usearch_getCollator(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usearch_getCollator(util.toPointer(strsrch));
}

export function usearch_setCollator(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  collator: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_setCollator(util.toPointer(strsrch), util.toPointer(collator), util.toPointer(status));
}

export function usearch_setPattern(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  pattern: Deno.PointerValue | Uint8Array /* ptr */,
  patternlength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_setPattern(util.toPointer(strsrch), util.toPointer(pattern), patternlength, util.toPointer(status));
}

export function usearch_getPattern(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  length: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.usearch_getPattern(util.toPointer(strsrch), util.toPointer(length));
}

export function usearch_first(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_first(util.toPointer(strsrch), util.toPointer(status));
}

export function usearch_following(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  position: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_following(util.toPointer(strsrch), position, util.toPointer(status));
}

export function usearch_last(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_last(util.toPointer(strsrch), util.toPointer(status));
}

export function usearch_preceding(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  position: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_preceding(util.toPointer(strsrch), position, util.toPointer(status));
}

export function usearch_next(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_next(util.toPointer(strsrch), util.toPointer(status));
}

export function usearch_previous(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.usearch_previous(util.toPointer(strsrch), util.toPointer(status));
}

export function usearch_reset(
  strsrch: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.usearch_reset(util.toPointer(strsrch));
}

export function uspoof_open(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_open(util.toPointer(status));
}

export function uspoof_openFromSerialized(
  data: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  pActualLength: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_openFromSerialized(util.toPointer(data), length, util.toPointer(pActualLength), util.toPointer(pErrorCode));
}

export function uspoof_openFromSource(
  confusables: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  confusablesLen: number /* i32 */,
  confusablesWholeScript: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  confusablesWholeScriptLen: number /* i32 */,
  errType: Deno.PointerValue | Uint8Array /* ptr */,
  pe: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_openFromSource(util.pstrToFfi(confusables), confusablesLen, util.pstrToFfi(confusablesWholeScript), confusablesWholeScriptLen, util.toPointer(errType), util.toPointer(pe), util.toPointer(status));
}

export function uspoof_close(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uspoof_close(util.toPointer(sc));
}

export function uspoof_clone(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_clone(util.toPointer(sc), util.toPointer(status));
}

export function uspoof_setChecks(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  checks: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uspoof_setChecks(util.toPointer(sc), checks, util.toPointer(status));
}

export function uspoof_getChecks(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_getChecks(util.toPointer(sc), util.toPointer(status));
}

export function uspoof_setRestrictionLevel(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  restrictionLevel: URestrictionLevel /* Windows.Win32.Globalization.URestrictionLevel */,
): void /* void */ {
  return libicu_dll.uspoof_setRestrictionLevel(util.toPointer(sc), restrictionLevel);
}

export function uspoof_getRestrictionLevel(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
): URestrictionLevel /* Windows.Win32.Globalization.URestrictionLevel */ {
  return libicu_dll.uspoof_getRestrictionLevel(util.toPointer(sc));
}

export function uspoof_setAllowedLocales(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  localesList: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uspoof_setAllowedLocales(util.toPointer(sc), util.pstrToFfi(localesList), util.toPointer(status));
}

export function uspoof_getAllowedLocales(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libicu_dll.uspoof_getAllowedLocales(util.toPointer(sc), util.toPointer(status)));
}

export function uspoof_setAllowedChars(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  chars: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uspoof_setAllowedChars(util.toPointer(sc), util.toPointer(chars), util.toPointer(status));
}

export function uspoof_getAllowedChars(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_getAllowedChars(util.toPointer(sc), util.toPointer(status));
}

export function uspoof_check(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  id: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  position: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_check(util.toPointer(sc), util.toPointer(id), length, util.toPointer(position), util.toPointer(status));
}

export function uspoof_checkUTF8(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  id: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  position: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_checkUTF8(util.toPointer(sc), util.pstrToFfi(id), length, util.toPointer(position), util.toPointer(status));
}

export function uspoof_check2(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  id: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  checkResult: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_check2(util.toPointer(sc), util.toPointer(id), length, util.toPointer(checkResult), util.toPointer(status));
}

export function uspoof_check2UTF8(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  id: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  checkResult: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_check2UTF8(util.toPointer(sc), util.pstrToFfi(id), length, util.toPointer(checkResult), util.toPointer(status));
}

export function uspoof_openCheckResult(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_openCheckResult(util.toPointer(status));
}

export function uspoof_closeCheckResult(
  checkResult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.uspoof_closeCheckResult(util.toPointer(checkResult));
}

export function uspoof_getCheckResultChecks(
  checkResult: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_getCheckResultChecks(util.toPointer(checkResult), util.toPointer(status));
}

export function uspoof_getCheckResultRestrictionLevel(
  checkResult: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): URestrictionLevel /* Windows.Win32.Globalization.URestrictionLevel */ {
  return libicu_dll.uspoof_getCheckResultRestrictionLevel(util.toPointer(checkResult), util.toPointer(status));
}

export function uspoof_getCheckResultNumerics(
  checkResult: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_getCheckResultNumerics(util.toPointer(checkResult), util.toPointer(status));
}

export function uspoof_areConfusable(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  id1: Deno.PointerValue | Uint8Array /* ptr */,
  length1: number /* i32 */,
  id2: Deno.PointerValue | Uint8Array /* ptr */,
  length2: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_areConfusable(util.toPointer(sc), util.toPointer(id1), length1, util.toPointer(id2), length2, util.toPointer(status));
}

export function uspoof_areConfusableUTF8(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  id1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length1: number /* i32 */,
  id2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length2: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_areConfusableUTF8(util.toPointer(sc), util.pstrToFfi(id1), length1, util.pstrToFfi(id2), length2, util.toPointer(status));
}

export function uspoof_getSkeleton(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  type: number /* u32 */,
  id: Deno.PointerValue | Uint8Array /* ptr */,
  length: number /* i32 */,
  dest: Deno.PointerValue | Uint8Array /* ptr */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_getSkeleton(util.toPointer(sc), type, util.toPointer(id), length, util.toPointer(dest), destCapacity, util.toPointer(status));
}

export function uspoof_getSkeletonUTF8(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  type: number /* u32 */,
  id: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  length: number /* i32 */,
  dest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  destCapacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_getSkeletonUTF8(util.toPointer(sc), type, util.pstrToFfi(id), length, util.pstrToFfi(dest), destCapacity, util.toPointer(status));
}

export function uspoof_getInclusionSet(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_getInclusionSet(util.toPointer(status));
}

export function uspoof_getRecommendedSet(
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.uspoof_getRecommendedSet(util.toPointer(status));
}

export function uspoof_serialize(
  sc: Deno.PointerValue | Uint8Array /* ptr */,
  data: Deno.PointerValue | Uint8Array /* ptr */,
  capacity: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.uspoof_serialize(util.toPointer(sc), util.toPointer(data), capacity, util.toPointer(status));
}

export function utmscale_getTimeScaleValue(
  timeScale: UDateTimeScale /* Windows.Win32.Globalization.UDateTimeScale */,
  value: UTimeScaleValue /* Windows.Win32.Globalization.UTimeScaleValue */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.utmscale_getTimeScaleValue(timeScale, value, util.toPointer(status));
}

export function utmscale_fromInt64(
  otherTime: Deno.PointerValue /* i64 */,
  timeScale: UDateTimeScale /* Windows.Win32.Globalization.UDateTimeScale */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.utmscale_fromInt64(otherTime, timeScale, util.toPointer(status));
}

export function utmscale_toInt64(
  universalTime: Deno.PointerValue /* i64 */,
  timeScale: UDateTimeScale /* Windows.Win32.Globalization.UDateTimeScale */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libicu_dll.utmscale_toInt64(universalTime, timeScale, util.toPointer(status));
}

export function utrans_openU(
  id: Deno.PointerValue | Uint8Array /* ptr */,
  idLength: number /* i32 */,
  dir: UTransDirection /* Windows.Win32.Globalization.UTransDirection */,
  rules: Deno.PointerValue | Uint8Array /* ptr */,
  rulesLength: number /* i32 */,
  parseError: Deno.PointerValue | Uint8Array /* ptr */,
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utrans_openU(util.toPointer(id), idLength, dir, util.toPointer(rules), rulesLength, util.toPointer(parseError), util.toPointer(pErrorCode));
}

export function utrans_openInverse(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utrans_openInverse(util.toPointer(trans), util.toPointer(status));
}

export function utrans_clone(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utrans_clone(util.toPointer(trans), util.toPointer(status));
}

export function utrans_close(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_close(util.toPointer(trans));
}

export function utrans_getUnicodeID(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utrans_getUnicodeID(util.toPointer(trans), util.toPointer(resultLength));
}

export function utrans_register(
  adoptedTrans: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_register(util.toPointer(adoptedTrans), util.toPointer(status));
}

export function utrans_unregisterID(
  id: Deno.PointerValue | Uint8Array /* ptr */,
  idLength: number /* i32 */,
): void /* void */ {
  return libicu_dll.utrans_unregisterID(util.toPointer(id), idLength);
}

export function utrans_setFilter(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  filterPattern: Deno.PointerValue | Uint8Array /* ptr */,
  filterPatternLen: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_setFilter(util.toPointer(trans), util.toPointer(filterPattern), filterPatternLen, util.toPointer(status));
}

export function utrans_countAvailableIDs(): number /* i32 */ {
  return libicu_dll.utrans_countAvailableIDs();
}

export function utrans_openIDs(
  pErrorCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utrans_openIDs(util.toPointer(pErrorCode));
}

export function utrans_trans(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  rep: Deno.PointerValue | Uint8Array /* ptr */,
  repFunc: Deno.PointerValue | Uint8Array /* ptr */,
  start: number /* i32 */,
  limit: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_trans(util.toPointer(trans), util.toPointer(rep), util.toPointer(repFunc), start, util.toPointer(limit), util.toPointer(status));
}

export function utrans_transIncremental(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  rep: Deno.PointerValue | Uint8Array /* ptr */,
  repFunc: Deno.PointerValue | Uint8Array /* ptr */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_transIncremental(util.toPointer(trans), util.toPointer(rep), util.toPointer(repFunc), util.toPointer(pos), util.toPointer(status));
}

export function utrans_transUChars(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: Deno.PointerValue | Uint8Array /* ptr */,
  textCapacity: number /* i32 */,
  start: number /* i32 */,
  limit: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_transUChars(util.toPointer(trans), util.toPointer(text), util.toPointer(textLength), textCapacity, start, util.toPointer(limit), util.toPointer(status));
}

export function utrans_transIncrementalUChars(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  text: Deno.PointerValue | Uint8Array /* ptr */,
  textLength: Deno.PointerValue | Uint8Array /* ptr */,
  textCapacity: number /* i32 */,
  pos: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libicu_dll.utrans_transIncrementalUChars(util.toPointer(trans), util.toPointer(text), util.toPointer(textLength), textCapacity, util.toPointer(pos), util.toPointer(status));
}

export function utrans_toRules(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  escapeUnprintable: number /* i8 */,
  result: Deno.PointerValue | Uint8Array /* ptr */,
  resultLength: number /* i32 */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libicu_dll.utrans_toRules(util.toPointer(trans), escapeUnprintable, util.toPointer(result), resultLength, util.toPointer(status));
}

export function utrans_getSourceSet(
  trans: Deno.PointerValue | Uint8Array /* ptr */,
  ignoreFilter: number /* i8 */,
  fillIn: Deno.PointerValue | Uint8Array /* ptr */,
  status: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* ptr */ {
  return libicu_dll.utrans_getSourceSet(util.toPointer(trans), ignoreFilter, util.toPointer(fillIn), util.toPointer(status));
}

export function GetDistanceOfClosestLanguageInList(
  pszLanguage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszLanguagesList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wchListDelimiter: Uint8Array | Deno.PointerValue /* char */,
  pClosestDistance: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libbcp47mrm_dll.GetDistanceOfClosestLanguageInList(util.pwstrToFfi(pszLanguage), util.pwstrToFfi(pszLanguagesList), util.toPointer(wchListDelimiter), util.toPointer(pClosestDistance));
}

export function IsWellFormedTag(
  pszTag: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u8 */ {
  return libbcp47mrm_dll.IsWellFormedTag(util.pwstrToFfi(pszTag));
}

export function FindStringOrdinal(
  dwFindStringOrdinalFlags: number /* u32 */,
  lpStringSource: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSource: number /* i32 */,
  lpStringValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchValue: number /* i32 */,
  bIgnoreCase: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libKERNEL32_dll.FindStringOrdinal(dwFindStringOrdinalFlags, util.pwstrToFfi(lpStringSource), cchSource, util.pwstrToFfi(lpStringValue), cchValue, util.boolToFfi(bIgnoreCase));
}

export function lstrcmpA(
  lpString1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.lstrcmpA(util.pstrToFfi(lpString1), util.pstrToFfi(lpString2));
}

export function lstrcmpW(
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.lstrcmpW(util.pwstrToFfi(lpString1), util.pwstrToFfi(lpString2));
}

export function lstrcmpiA(
  lpString1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.lstrcmpiA(util.pstrToFfi(lpString1), util.pstrToFfi(lpString2));
}

export function lstrcmpiW(
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.lstrcmpiW(util.pwstrToFfi(lpString1), util.pwstrToFfi(lpString2));
}

export function lstrcpynA(
  lpString1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  iMaxLength: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libKERNEL32_dll.lstrcpynA(util.pstrToFfi(lpString1), util.pstrToFfi(lpString2), iMaxLength));
}

export function lstrcpynW(
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iMaxLength: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libKERNEL32_dll.lstrcpynW(util.pwstrToFfi(lpString1), util.pwstrToFfi(lpString2), iMaxLength));
}

export function lstrcpyA(
  lpString1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libKERNEL32_dll.lstrcpyA(util.pstrToFfi(lpString1), util.pstrToFfi(lpString2)));
}

export function lstrcpyW(
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libKERNEL32_dll.lstrcpyW(util.pwstrToFfi(lpString1), util.pwstrToFfi(lpString2)));
}

export function lstrcatA(
  lpString1: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpString2: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libKERNEL32_dll.lstrcatA(util.pstrToFfi(lpString1), util.pstrToFfi(lpString2)));
}

export function lstrcatW(
  lpString1: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpString2: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libKERNEL32_dll.lstrcatW(util.pwstrToFfi(lpString1), util.pwstrToFfi(lpString2)));
}

export function lstrlenA(
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.lstrlenA(util.pstrToFfi(lpString));
}

export function lstrlenW(
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libKERNEL32_dll.lstrlenW(util.pwstrToFfi(lpString));
}

export function IsTextUnicode(
  lpv: Deno.PointerValue | Uint8Array /* ptr */,
  iSize: number /* i32 */,
  lpiResult: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsTextUnicode(util.toPointer(lpv), iSize, util.toPointer(lpiResult)));
}

