/// Auto-generated by Deno Win32: Windows.Win32.Data.HtmlHelp.Apis

import * as util from "../../util.ts";

// Enums
export type WORD_WHEEL_OPEN_FLAGS = number;
export type HH_GPROPID = number;
export type PRIORITY = number;

// Constants
export const ITWW_OPEN_CONNECT = 0;
export const HH_DISPLAY_TOPIC = 0;
export const HH_HELP_FINDER = 0;
export const HH_DISPLAY_TOC = 1;
export const HH_DISPLAY_INDEX = 2;
export const HH_DISPLAY_SEARCH = 3;
export const HH_SET_WIN_TYPE = 4;
export const HH_GET_WIN_TYPE = 5;
export const HH_GET_WIN_HANDLE = 6;
export const HH_ENUM_INFO_TYPE = 7;
export const HH_SET_INFO_TYPE = 8;
export const HH_SYNC = 9;
export const HH_RESERVED1 = 10;
export const HH_RESERVED2 = 11;
export const HH_RESERVED3 = 12;
export const HH_KEYWORD_LOOKUP = 13;
export const HH_DISPLAY_TEXT_POPUP = 14;
export const HH_HELP_CONTEXT = 15;
export const HH_TP_HELP_CONTEXTMENU = 16;
export const HH_TP_HELP_WM_HELP = 17;
export const HH_CLOSE_ALL = 18;
export const HH_ALINK_LOOKUP = 19;
export const HH_GET_LAST_ERROR = 20;
export const HH_ENUM_CATEGORY = 21;
export const HH_ENUM_CATEGORY_IT = 22;
export const HH_RESET_IT_FILTER = 23;
export const HH_SET_INCLUSIVE_FILTER = 24;
export const HH_SET_EXCLUSIVE_FILTER = 25;
export const HH_INITIALIZE = 28;
export const HH_UNINITIALIZE = 29;
export const HH_SET_QUERYSERVICE = 30;
export const HH_PRETRANSLATEMESSAGE = 253;
export const HH_SET_GLOBAL_PROPERTY = 252;
export const HH_SAFE_DISPLAY_TOPIC = 32;
export const HHWIN_PROP_TAB_AUTOHIDESHOW = 1;
export const HHWIN_PROP_ONTOP = 2;
export const HHWIN_PROP_NOTITLEBAR = 4;
export const HHWIN_PROP_NODEF_STYLES = 8;
export const HHWIN_PROP_NODEF_EXSTYLES = 16;
export const HHWIN_PROP_TRI_PANE = 32;
export const HHWIN_PROP_NOTB_TEXT = 64;
export const HHWIN_PROP_POST_QUIT = 128;
export const HHWIN_PROP_AUTO_SYNC = 256;
export const HHWIN_PROP_TRACKING = 512;
export const HHWIN_PROP_TAB_SEARCH = 1024;
export const HHWIN_PROP_TAB_HISTORY = 2048;
export const HHWIN_PROP_TAB_FAVORITES = 4096;
export const HHWIN_PROP_CHANGE_TITLE = 8192;
export const HHWIN_PROP_NAV_ONLY_WIN = 16384;
export const HHWIN_PROP_NO_TOOLBAR = 32768;
export const HHWIN_PROP_MENU = 65536;
export const HHWIN_PROP_TAB_ADVSEARCH = 131072;
export const HHWIN_PROP_USER_POS = 262144;
export const HHWIN_PROP_TAB_CUSTOM1 = 524288;
export const HHWIN_PROP_TAB_CUSTOM2 = 1048576;
export const HHWIN_PROP_TAB_CUSTOM3 = 2097152;
export const HHWIN_PROP_TAB_CUSTOM4 = 4194304;
export const HHWIN_PROP_TAB_CUSTOM5 = 8388608;
export const HHWIN_PROP_TAB_CUSTOM6 = 16777216;
export const HHWIN_PROP_TAB_CUSTOM7 = 33554432;
export const HHWIN_PROP_TAB_CUSTOM8 = 67108864;
export const HHWIN_PROP_TAB_CUSTOM9 = 134217728;
export const HHWIN_TB_MARGIN = 268435456;
export const HHWIN_PARAM_PROPERTIES = 2;
export const HHWIN_PARAM_STYLES = 4;
export const HHWIN_PARAM_EXSTYLES = 8;
export const HHWIN_PARAM_RECT = 16;
export const HHWIN_PARAM_NAV_WIDTH = 32;
export const HHWIN_PARAM_SHOWSTATE = 64;
export const HHWIN_PARAM_INFOTYPES = 128;
export const HHWIN_PARAM_TB_FLAGS = 256;
export const HHWIN_PARAM_EXPANSION = 512;
export const HHWIN_PARAM_TABPOS = 1024;
export const HHWIN_PARAM_TABORDER = 2048;
export const HHWIN_PARAM_HISTORY_COUNT = 4096;
export const HHWIN_PARAM_CUR_TAB = 8192;
export const HHWIN_BUTTON_EXPAND = 2;
export const HHWIN_BUTTON_BACK = 4;
export const HHWIN_BUTTON_FORWARD = 8;
export const HHWIN_BUTTON_STOP = 16;
export const HHWIN_BUTTON_REFRESH = 32;
export const HHWIN_BUTTON_HOME = 64;
export const HHWIN_BUTTON_BROWSE_FWD = 128;
export const HHWIN_BUTTON_BROWSE_BCK = 256;
export const HHWIN_BUTTON_NOTES = 512;
export const HHWIN_BUTTON_CONTENTS = 1024;
export const HHWIN_BUTTON_SYNC = 2048;
export const HHWIN_BUTTON_OPTIONS = 4096;
export const HHWIN_BUTTON_PRINT = 8192;
export const HHWIN_BUTTON_INDEX = 16384;
export const HHWIN_BUTTON_SEARCH = 32768;
export const HHWIN_BUTTON_HISTORY = 65536;
export const HHWIN_BUTTON_FAVORITES = 131072;
export const HHWIN_BUTTON_JUMP1 = 262144;
export const HHWIN_BUTTON_JUMP2 = 524288;
export const HHWIN_BUTTON_ZOOM = 1048576;
export const HHWIN_BUTTON_TOC_NEXT = 2097152;
export const HHWIN_BUTTON_TOC_PREV = 4194304;
export const IDTB_EXPAND = 200;
export const IDTB_CONTRACT = 201;
export const IDTB_STOP = 202;
export const IDTB_REFRESH = 203;
export const IDTB_BACK = 204;
export const IDTB_HOME = 205;
export const IDTB_SYNC = 206;
export const IDTB_PRINT = 207;
export const IDTB_OPTIONS = 208;
export const IDTB_FORWARD = 209;
export const IDTB_NOTES = 210;
export const IDTB_BROWSE_FWD = 211;
export const IDTB_BROWSE_BACK = 212;
export const IDTB_CONTENTS = 213;
export const IDTB_INDEX = 214;
export const IDTB_SEARCH = 215;
export const IDTB_HISTORY = 216;
export const IDTB_FAVORITES = 217;
export const IDTB_JUMP1 = 218;
export const IDTB_JUMP2 = 219;
export const IDTB_CUSTOMIZE = 221;
export const IDTB_ZOOM = 222;
export const IDTB_TOC_NEXT = 223;
export const IDTB_TOC_PREV = 224;
export const HH_MAX_TABS = 19;
export const HH_FTS_DEFAULT_PROXIMITY = `-1`;
export const PROP_ADD = 0;
export const PROP_DELETE = 1;
export const PROP_UPDATE = 2;
export const TYPE_VALUE = 0;
export const TYPE_POINTER = 1;
export const TYPE_STRING = 2;
export const STDPROP_UID = 1;
export const STDPROP_TITLE = 2;
export const STDPROP_USERDATA = 3;
export const STDPROP_KEY = 4;
export const STDPROP_SORTKEY = 100;
export const STDPROP_DISPLAYKEY = 101;
export const STDPROP_SORTORDINAL = 102;
export const STDPROP_INDEX_TEXT = 200;
export const STDPROP_INDEX_VFLD = 201;
export const STDPROP_INDEX_DTYPE = 202;
export const STDPROP_INDEX_LENGTH = 203;
export const STDPROP_INDEX_BREAK = 204;
export const STDPROP_INDEX_TERM = 210;
export const STDPROP_INDEX_TERM_RAW_LENGTH = 211;
export const STDPROP_USERPROP_BASE = 65536;
export const STDPROP_USERPROP_MAX = 2147483647;
export const SZ_WWDEST_GLOBAL = `GLOBAL`;
export const SZ_WWDEST_KEY = `KEY`;
export const SZ_WWDEST_OCC = `OCC`;
export const ITWW_OPEN_NOCONNECT = 1;
export const ITWW_CBKEY_MAX = 1024;
export const IITWBC_BREAK_ACCEPT_WILDCARDS = 1;
export const IITWBC_BREAK_AND_STEM = 2;
export const E_NOTEXIST = 9007218582097920n;
export const E_DUPLICATE = 4505817977982977;
export const E_BADVERSION = 4506917489610754;
export const E_BADFILE = 4508017001238531;
export const E_BADFORMAT = 4509116512866308;
export const E_NOPERMISSION = 4510216024494085;
export const E_ASSERT = 4511315536121862;
export const E_INTERRUPT = 4512415047749639;
export const E_NOTSUPPORTED = 4513514559377416;
export const E_OUTOFRANGE = 4514614071005193;
export const E_GROUPIDTOOBIG = 4515713582632970;
export const E_TOOMANYTITLES = 4516813094260747;
export const E_NOMERGEDDATA = 4517912605888524;
export const E_NOTFOUND = 4519012117516301;
export const E_CANTFINDDLL = 4520111629144078;
export const E_NOHANDLE = 4521211140771855;
export const E_GETLASTERROR = 4522310652399632;
export const E_BADPARAM = 4523410164027409;
export const E_INVALIDSTATE = 4524509675655186;
export const E_NOTOPEN = 4527808210538515;
export const E_ALREADYOPEN = 4527808210538515;
export const E_UNKNOWN_TRANSPORT = 4528907722166294;
export const E_UNSUPPORTED_TRANSPORT = 4530007233794071;
export const E_BADFILTERSIZE = 4531106745421848;
export const E_TOOMANYOBJECTS = 4538803326816281;
export const E_NAMETOOLONG = 4556395512860704;
export const E_FILECREATE = 4557495024488496;
export const E_FILECLOSE = 4558594536116273;
export const E_FILEREAD = 4559694047744050;
export const E_FILESEEK = 4560793559371827;
export const E_FILEWRITE = 4561893070999604;
export const E_FILEDELETE = 4562992582627381;
export const E_FILEINVALID = 4564092094255158;
export const E_FILENOTFOUND = 4565191605882935;
export const E_DISKFULL = 4591579884949560;
export const E_TOOMANYTOPICS = 4592679396577360;
export const E_TOOMANYDUPS = 4593778908205137;
export const E_TREETOOBIG = 4594878419832914;
export const E_BADBREAKER = 4595977931460691;
export const E_BADVALUE = 4597077443088468;
export const E_ALL_WILD = 4598176954716245;
export const E_TOODEEP = 4599276466344022;
export const E_EXPECTEDTERM = 4600375977971799;
export const E_MISSLPAREN = 4601475489599576;
export const E_MISSRPAREN = 4602575001227353;
export const E_MISSQUOTE = 4603674512855130;
export const E_NULLQUERY = 4604774024482907;
export const E_STOPWORD = 4605873536110684;
export const E_BADRANGEOP = 4606973047738461;
export const E_UNMATCHEDTYPE = 4608072559366238;
export const E_WORDTOOLONG = 4609172070994015;
export const E_BADINDEXFLAGS = 4610271582621792;
export const E_WILD_IN_DTYPE = 4611371094249569;
export const E_NOSTEMMER = 4644356443082850;
export const E_MISSINGPROP = 4645455954710656;
export const E_PROPLISTNOTEMPTY = 4646555466338433;
export const E_PROPLISTEMPTY = 4647654977966210;
export const E_ALREADYINIT = 4648754489593987;
export const E_NOTINIT = 4649854001221764;
export const E_RESULTSETEMPTY = 4650953512849541;
export const E_TOOMANYCOLUMNS = 4652053024477318;
export const E_NOKEYPROP = 12033619391892426887n;
export const MAX_COLUMNS = 256;
export const HHWIN_NAVTYPE_TOC = 0;
export const HHWIN_NAVTYPE_INDEX = 1;
export const HHWIN_NAVTYPE_SEARCH = 2;
export const HHWIN_NAVTYPE_FAVORITES = 3;
export const HHWIN_NAVTYPE_HISTORY = 4;
export const HHWIN_NAVTYPE_AUTHOR = 5;
export const HHWIN_NAVTYPE_CUSTOM_FIRST = 11;
export const IT_INCLUSIVE = 0;
export const IT_EXCLUSIVE = 1;
export const IT_HIDDEN = 2;
export const HHWIN_NAVTAB_TOP = 0;
export const HHWIN_NAVTAB_LEFT = 1;
export const HHWIN_NAVTAB_BOTTOM = 2;
export const HH_TAB_CONTENTS = 0;
export const HH_TAB_INDEX = 1;
export const HH_TAB_SEARCH = 2;
export const HH_TAB_FAVORITES = 3;
export const HH_TAB_HISTORY = 4;
export const HH_TAB_AUTHOR = 5;
export const HH_TAB_CUSTOM_FIRST = 11;
export const HH_TAB_CUSTOM_LAST = 19;
export const HHACT_TAB_CONTENTS = 0;
export const HHACT_TAB_INDEX = 1;
export const HHACT_TAB_SEARCH = 2;
export const HHACT_TAB_HISTORY = 3;
export const HHACT_TAB_FAVORITES = 4;
export const HHACT_EXPAND = 5;
export const HHACT_CONTRACT = 6;
export const HHACT_BACK = 7;
export const HHACT_FORWARD = 8;
export const HHACT_STOP = 9;
export const HHACT_REFRESH = 10;
export const HHACT_HOME = 11;
export const HHACT_SYNC = 12;
export const HHACT_OPTIONS = 13;
export const HHACT_PRINT = 14;
export const HHACT_HIGHLIGHT = 15;
export const HHACT_CUSTOMIZE = 16;
export const HHACT_JUMP1 = 17;
export const HHACT_JUMP2 = 18;
export const HHACT_ZOOM = 19;
export const HHACT_TOC_NEXT = 20;
export const HHACT_TOC_PREV = 21;
export const HHACT_NOTES = 22;
export const HHACT_LAST_ENUM = 23;
export const HH_GPROPID_SINGLETHREAD = 1;
export const HH_GPROPID_TOOLBAR_MARGIN = 2;
export const HH_GPROPID_UI_LANGUAGE = 3;
export const HH_GPROPID_CURRENT_SUBSET = 4;
export const HH_GPROPID_CONTENT_LANGUAGE = 5;
export const PRIORITY_LOW = 0;
export const PRIORITY_NORMAL = 1;
export const PRIORITY_HIGH = 2;

// Structs

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.UI.Controls.NMHDR (size: 24)
 */
export interface NMHDR {
  /** Windows.Win32.Foundation.HWND */
  hwndFrom: Deno.PointerValue;
  /** usize */
  idFrom: Deno.PointerValue;
  /** u32 */
  code: number;
}

export const sizeofNMHDR = 24;

export function allocNMHDR(data?: Partial<NMHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndFrom !== undefined) view.setBigUint64(0, data.hwndFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndFrom))), true);
  // 0x08: usize
  if (data?.idFrom !== undefined) view.setBigUint64(8, BigInt(data.idFrom), true);
  // 0x10: u32
  if (data?.code !== undefined) view.setUint32(16, Number(data.code), true);
  // 0x14: pad4
  return buf;
}

export class NMHDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwndFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get idFrom(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get code(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hwndFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set idFrom(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set code(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Data.HtmlHelp.HHN_NOTIFY (size: 16)
 */
export interface HHN_NOTIFY {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszUrl: string | null | Uint8Array;
}

export const sizeofHHN_NOTIFY = 16;

export function allocHHN_NOTIFY(data?: Partial<HHN_NOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofHHN_NOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.pszUrl !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class HHN_NOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

export type HINSTANCE = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

export type COLORREF = number;

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_POPUP (size: 72)
 */
export interface HH_POPUP {
  /** i32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hinst: Uint8Array | Deno.PointerValue;
  /** u32 */
  idString: number;
  /** ptr */
  pszText: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrForeground: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrBackground: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcMargins: Uint8Array | Deno.PointerValue;
  /** ptr */
  pszFont: Deno.PointerValue | Uint8Array;
}

export const sizeofHH_POPUP = 72;

export function allocHH_POPUP(data?: Partial<HH_POPUP>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_POPUP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hinst !== undefined) view.setBigUint64(8, data.hinst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hinst))), true);
  // 0x10: u32
  if (data?.idString !== undefined) view.setUint32(16, Number(data.idString), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pszText !== undefined) view.setBigUint64(24, data.pszText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszText))), true);
  // 0x20: pointer
  if (data?.pt !== undefined) view.setBigUint64(32, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x28: pointer
  if (data?.clrForeground !== undefined) view.setBigUint64(40, data.clrForeground === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrForeground))), true);
  // 0x30: pointer
  if (data?.clrBackground !== undefined) view.setBigUint64(48, data.clrBackground === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBackground))), true);
  // 0x38: pointer
  if (data?.rcMargins !== undefined) view.setBigUint64(56, data.rcMargins === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcMargins))), true);
  // 0x40: pointer
  if (data?.pszFont !== undefined) view.setBigUint64(64, data.pszFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszFont))), true);
  return buf;
}

export class HH_POPUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hinst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get idString(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get clrForeground(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get clrBackground(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rcMargins(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pszFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hinst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set idString(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set clrForeground(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set clrBackground(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rcMargins(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pszFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Data.HtmlHelp.HH_AKLINK (size: 56)
 */
export interface HH_AKLINK {
  /** i32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.BOOL */
  fReserved: boolean;
  /** ptr */
  pszKeywords: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszUrl: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszMsgText: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszMsgTitle: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszWindow: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fIndexOnFail: boolean;
}

export const sizeofHH_AKLINK = 56;

export function allocHH_AKLINK(data?: Partial<HH_AKLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_AKLINK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.fReserved !== undefined) view.setInt32(4, Number(data.fReserved), true);
  // 0x08: pointer
  if (data?.pszKeywords !== undefined) view.setBigUint64(8, data.pszKeywords === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszKeywords))), true);
  // 0x10: pointer
  if (data?.pszUrl !== undefined) view.setBigUint64(16, data.pszUrl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszUrl))), true);
  // 0x18: pointer
  if (data?.pszMsgText !== undefined) view.setBigUint64(24, data.pszMsgText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszMsgText))), true);
  // 0x20: pointer
  if (data?.pszMsgTitle !== undefined) view.setBigUint64(32, data.pszMsgTitle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszMsgTitle))), true);
  // 0x28: pointer
  if (data?.pszWindow !== undefined) view.setBigUint64(40, data.pszWindow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszWindow))), true);
  // 0x30: i32
  if (data?.fIndexOnFail !== undefined) view.setInt32(48, Number(data.fIndexOnFail), true);
  // 0x34: pad4
  return buf;
}

export class HH_AKLINKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fReserved(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pszKeywords(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pszUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pszMsgText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pszMsgTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pszWindow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get fIndexOnFail(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fReserved(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pszKeywords(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pszUrl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pszMsgText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pszMsgTitle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pszWindow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set fIndexOnFail(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_ENUM_IT (size: 32)
 */
export interface HH_ENUM_IT {
  /** i32 */
  cbStruct: number;
  /** i32 */
  iType: number;
  /** Windows.Win32.Foundation.PSTR */
  pszCatName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszITName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszITDescription: string | null | Uint8Array;
}

export const sizeofHH_ENUM_IT = 32;

export function allocHH_ENUM_IT(data?: Partial<HH_ENUM_IT>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_ENUM_IT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.iType !== undefined) view.setInt32(4, Number(data.iType), true);
  // 0x08: buffer
  if (data?.pszCatName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszCatName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszITName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszITName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszITDescription !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszITDescription);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class HH_ENUM_ITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get pszCatName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszITName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszITDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set pszCatName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszITName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszITDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_ENUM_CAT (size: 24)
 */
export interface HH_ENUM_CAT {
  /** i32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  pszCatName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszCatDescription: string | null | Uint8Array;
}

export const sizeofHH_ENUM_CAT = 24;

export function allocHH_ENUM_CAT(data?: Partial<HH_ENUM_CAT>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_ENUM_CAT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszCatName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszCatName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszCatDescription !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszCatDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class HH_ENUM_CATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszCatName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszCatDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszCatName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszCatDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_SET_INFOTYPE (size: 24)
 */
export interface HH_SET_INFOTYPE {
  /** i32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PSTR */
  pszCatName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszInfoTypeName: string | null | Uint8Array;
}

export const sizeofHH_SET_INFOTYPE = 24;

export function allocHH_SET_INFOTYPE(data?: Partial<HH_SET_INFOTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_SET_INFOTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszCatName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszCatName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszInfoTypeName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszInfoTypeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class HH_SET_INFOTYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszCatName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszInfoTypeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszCatName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszInfoTypeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_FTS_QUERY (size: 40)
 */
export interface HH_FTS_QUERY {
  /** i32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.BOOL */
  fUniCodeStrings: boolean;
  /** ptr */
  pszSearchQuery: Deno.PointerValue | Uint8Array;
  /** i32 */
  iProximity: number;
  /** Windows.Win32.Foundation.BOOL */
  fStemmedSearch: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTitleOnly: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fExecute: boolean;
  /** ptr */
  pszWindow: Deno.PointerValue | Uint8Array;
}

export const sizeofHH_FTS_QUERY = 40;

export function allocHH_FTS_QUERY(data?: Partial<HH_FTS_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_FTS_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.fUniCodeStrings !== undefined) view.setInt32(4, Number(data.fUniCodeStrings), true);
  // 0x08: pointer
  if (data?.pszSearchQuery !== undefined) view.setBigUint64(8, data.pszSearchQuery === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszSearchQuery))), true);
  // 0x10: i32
  if (data?.iProximity !== undefined) view.setInt32(16, Number(data.iProximity), true);
  // 0x14: i32
  if (data?.fStemmedSearch !== undefined) view.setInt32(20, Number(data.fStemmedSearch), true);
  // 0x18: i32
  if (data?.fTitleOnly !== undefined) view.setInt32(24, Number(data.fTitleOnly), true);
  // 0x1c: i32
  if (data?.fExecute !== undefined) view.setInt32(28, Number(data.fExecute), true);
  // 0x20: pointer
  if (data?.pszWindow !== undefined) view.setBigUint64(32, data.pszWindow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszWindow))), true);
  return buf;
}

export class HH_FTS_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fUniCodeStrings(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pszSearchQuery(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get iProximity(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get fStemmedSearch(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get fTitleOnly(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fExecute(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get pszWindow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fUniCodeStrings(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pszSearchQuery(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set iProximity(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set fStemmedSearch(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set fTitleOnly(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fExecute(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set pszWindow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_WINTYPE (size: 248)
 */
export interface HH_WINTYPE {
  /** i32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.BOOL */
  fUniCodeStrings: boolean;
  /** ptr */
  pszType: Deno.PointerValue | Uint8Array;
  /** u32 */
  fsValidMembers: number;
  /** u32 */
  fsWinProperties: number;
  /** ptr */
  pszCaption: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwStyles: number;
  /** u32 */
  dwExStyles: number;
  /** Windows.Win32.Foundation.RECT */
  rcWindowPos: Uint8Array | Deno.PointerValue;
  /** i32 */
  nShowState: number;
  /** Windows.Win32.Foundation.HWND */
  hwndHelp: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndCaller: Deno.PointerValue;
  /** ptr */
  paInfoTypes: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HWND */
  hwndToolBar: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndNavigation: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndHTML: Deno.PointerValue;
  /** i32 */
  iNavWidth: number;
  /** Windows.Win32.Foundation.RECT */
  rcHTML: Uint8Array | Deno.PointerValue;
  /** ptr */
  pszToc: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszIndex: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszFile: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszHome: Deno.PointerValue | Uint8Array;
  /** u32 */
  fsToolBarFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fNotExpanded: boolean;
  /** i32 */
  curNavType: number;
  /** i32 */
  tabpos: number;
  /** i32 */
  idNotify: number;
  /** array */
  tabOrder: Deno.PointerValue;
  /** i32 */
  cHistory: number;
  /** ptr */
  pszJump1: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszJump2: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszUrlJump1: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszUrlJump2: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECT */
  rcMinSize: Uint8Array | Deno.PointerValue;
  /** i32 */
  cbInfoTypes: number;
  /** ptr */
  pszCustomTabs: Deno.PointerValue | Uint8Array;
}

export const sizeofHH_WINTYPE = 248;

export function allocHH_WINTYPE(data?: Partial<HH_WINTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_WINTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbStruct !== undefined) view.setInt32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.fUniCodeStrings !== undefined) view.setInt32(4, Number(data.fUniCodeStrings), true);
  // 0x08: pointer
  if (data?.pszType !== undefined) view.setBigUint64(8, data.pszType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszType))), true);
  // 0x10: u32
  if (data?.fsValidMembers !== undefined) view.setUint32(16, Number(data.fsValidMembers), true);
  // 0x14: u32
  if (data?.fsWinProperties !== undefined) view.setUint32(20, Number(data.fsWinProperties), true);
  // 0x18: pointer
  if (data?.pszCaption !== undefined) view.setBigUint64(24, data.pszCaption === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszCaption))), true);
  // 0x20: u32
  if (data?.dwStyles !== undefined) view.setUint32(32, Number(data.dwStyles), true);
  // 0x24: u32
  if (data?.dwExStyles !== undefined) view.setUint32(36, Number(data.dwExStyles), true);
  // 0x28: pointer
  if (data?.rcWindowPos !== undefined) view.setBigUint64(40, data.rcWindowPos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcWindowPos))), true);
  // 0x30: i32
  if (data?.nShowState !== undefined) view.setInt32(48, Number(data.nShowState), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hwndHelp !== undefined) view.setBigUint64(56, data.hwndHelp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndHelp))), true);
  // 0x40: pointer
  if (data?.hwndCaller !== undefined) view.setBigUint64(64, data.hwndCaller === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndCaller))), true);
  // 0x48: pointer
  if (data?.paInfoTypes !== undefined) view.setBigUint64(72, data.paInfoTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.paInfoTypes))), true);
  // 0x50: pointer
  if (data?.hwndToolBar !== undefined) view.setBigUint64(80, data.hwndToolBar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndToolBar))), true);
  // 0x58: pointer
  if (data?.hwndNavigation !== undefined) view.setBigUint64(88, data.hwndNavigation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndNavigation))), true);
  // 0x60: pointer
  if (data?.hwndHTML !== undefined) view.setBigUint64(96, data.hwndHTML === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndHTML))), true);
  // 0x68: i32
  if (data?.iNavWidth !== undefined) view.setInt32(104, Number(data.iNavWidth), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.rcHTML !== undefined) view.setBigUint64(112, data.rcHTML === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcHTML))), true);
  // 0x78: pointer
  if (data?.pszToc !== undefined) view.setBigUint64(120, data.pszToc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszToc))), true);
  // 0x80: pointer
  if (data?.pszIndex !== undefined) view.setBigUint64(128, data.pszIndex === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszIndex))), true);
  // 0x88: pointer
  if (data?.pszFile !== undefined) view.setBigUint64(136, data.pszFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszFile))), true);
  // 0x90: pointer
  if (data?.pszHome !== undefined) view.setBigUint64(144, data.pszHome === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszHome))), true);
  // 0x98: u32
  if (data?.fsToolBarFlags !== undefined) view.setUint32(152, Number(data.fsToolBarFlags), true);
  // 0x9c: i32
  if (data?.fNotExpanded !== undefined) view.setInt32(156, Number(data.fNotExpanded), true);
  // 0xa0: i32
  if (data?.curNavType !== undefined) view.setInt32(160, Number(data.curNavType), true);
  // 0xa4: i32
  if (data?.tabpos !== undefined) view.setInt32(164, Number(data.tabpos), true);
  // 0xa8: i32
  if (data?.idNotify !== undefined) view.setInt32(168, Number(data.idNotify), true);
  // 0xac: pad4
  // 0xb0: pointer
  if (data?.tabOrder !== undefined) view.setBigUint64(176, data.tabOrder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tabOrder))), true);
  // 0xb8: i32
  if (data?.cHistory !== undefined) view.setInt32(184, Number(data.cHistory), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.pszJump1 !== undefined) view.setBigUint64(192, data.pszJump1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszJump1))), true);
  // 0xc8: pointer
  if (data?.pszJump2 !== undefined) view.setBigUint64(200, data.pszJump2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszJump2))), true);
  // 0xd0: pointer
  if (data?.pszUrlJump1 !== undefined) view.setBigUint64(208, data.pszUrlJump1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszUrlJump1))), true);
  // 0xd8: pointer
  if (data?.pszUrlJump2 !== undefined) view.setBigUint64(216, data.pszUrlJump2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszUrlJump2))), true);
  // 0xe0: pointer
  if (data?.rcMinSize !== undefined) view.setBigUint64(224, data.rcMinSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcMinSize))), true);
  // 0xe8: i32
  if (data?.cbInfoTypes !== undefined) view.setInt32(232, Number(data.cbInfoTypes), true);
  // 0xec: pad4
  // 0xf0: pointer
  if (data?.pszCustomTabs !== undefined) view.setBigUint64(240, data.pszCustomTabs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszCustomTabs))), true);
  return buf;
}

export class HH_WINTYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbStruct(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fUniCodeStrings(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pszType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get fsValidMembers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fsWinProperties(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwStyles(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwExStyles(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get rcWindowPos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get nShowState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get hwndHelp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hwndCaller(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get paInfoTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get hwndToolBar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get hwndNavigation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get hwndHTML(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: i32
  get iNavWidth(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get rcHTML(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get pszToc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get pszIndex(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get pszFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get pszHome(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: u32
  get fsToolBarFlags(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: i32
  get fNotExpanded(): number {
    return this.view.getInt32(156, true);
  }

  // 0xa0: i32
  get curNavType(): number {
    return this.view.getInt32(160, true);
  }

  // 0xa4: i32
  get tabpos(): number {
    return this.view.getInt32(164, true);
  }

  // 0xa8: i32
  get idNotify(): number {
    return this.view.getInt32(168, true);
  }

  // 0xac: pad4

  // 0xb0: pointer
  get tabOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: i32
  get cHistory(): number {
    return this.view.getInt32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get pszJump1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: pointer
  get pszJump2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(200, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd0: pointer
  get pszUrlJump1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get pszUrlJump2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: pointer
  get rcMinSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: i32
  get cbInfoTypes(): number {
    return this.view.getInt32(232, true);
  }

  // 0xec: pad4

  // 0xf0: pointer
  get pszCustomTabs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set cbStruct(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fUniCodeStrings(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pszType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set fsValidMembers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fsWinProperties(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwStyles(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwExStyles(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set rcWindowPos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set nShowState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set hwndHelp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hwndCaller(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set paInfoTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set hwndToolBar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set hwndNavigation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set hwndHTML(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: i32
  set iNavWidth(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set rcHTML(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set pszToc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set pszIndex(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set pszFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set pszHome(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: u32
  set fsToolBarFlags(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: i32
  set fNotExpanded(value: number) {
    this.view.setInt32(156, value, true);
  }

  // 0xa0: i32
  set curNavType(value: number) {
    this.view.setInt32(160, value, true);
  }

  // 0xa4: i32
  set tabpos(value: number) {
    this.view.setInt32(164, value, true);
  }

  // 0xa8: i32
  set idNotify(value: number) {
    this.view.setInt32(168, value, true);
  }

  // 0xac: pad4

  // 0xb0: pointer
  set tabOrder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: i32
  set cHistory(value: number) {
    this.view.setInt32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set pszJump1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: pointer
  set pszJump2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(200, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd0: pointer
  set pszUrlJump1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set pszUrlJump2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: pointer
  set rcMinSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: i32
  set cbInfoTypes(value: number) {
    this.view.setInt32(232, value, true);
  }

  // 0xec: pad4

  // 0xf0: pointer
  set pszCustomTabs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HHNTRACK (size: 32)
 */
export interface HHNTRACK {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszCurUrl: string | null | Uint8Array;
  /** i32 */
  idAction: number;
  /** ptr */
  phhWinType: Deno.PointerValue | Uint8Array;
}

export const sizeofHHNTRACK = 32;

export function allocHHNTRACK(data?: Partial<HHNTRACK>): Uint8Array {
  const buf = new Uint8Array(sizeofHHNTRACK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.pszCurUrl !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszCurUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.idAction !== undefined) view.setInt32(16, Number(data.idAction), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.phhWinType !== undefined) view.setBigUint64(24, data.phhWinType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.phhWinType))), true);
  return buf;
}

export class HHNTRACKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszCurUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get idAction(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get phhWinType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszCurUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set idAction(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set phhWinType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class VARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.HH_GLOBAL_PROPERTY (size: 16)
 */
export interface HH_GLOBAL_PROPERTY {
  /** Windows.Win32.Data.HtmlHelp.HH_GPROPID */
  id: HH_GPROPID;
  /** Windows.Win32.System.Com.VARIANT */
  var__: Uint8Array | Deno.PointerValue;
}

export const sizeofHH_GLOBAL_PROPERTY = 16;

export function allocHH_GLOBAL_PROPERTY(data?: Partial<HH_GLOBAL_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofHH_GLOBAL_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.var__ !== undefined) view.setBigUint64(8, data.var__ === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.var__))), true);
  return buf;
}

export class HH_GLOBAL_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get id(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get var__(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set id(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set var__(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.CProperty (size: 32)
 */
export interface CProperty {
  /** u32 */
  dwPropID: number;
  /** u32 */
  cbData: number;
  /** u32 */
  dwType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fPersist: boolean;
}

export const sizeofCProperty = 32;

export function allocCProperty(data?: Partial<CProperty>): Uint8Array {
  const buf = new Uint8Array(sizeofCProperty);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPropID !== undefined) view.setUint32(0, Number(data.dwPropID), true);
  // 0x04: u32
  if (data?.cbData !== undefined) view.setUint32(4, Number(data.cbData), true);
  // 0x08: u32
  if (data?.dwType !== undefined) view.setUint32(8, Number(data.dwType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x18: i32
  if (data?.fPersist !== undefined) view.setInt32(24, Number(data.fPersist), true);
  // 0x1c: pad4
  return buf;
}

export class CPropertyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwPropID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get fPersist(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwPropID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set fPersist(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Data.HtmlHelp.ROWSTATUS (size: 16)
 */
export interface ROWSTATUS {
  /** i32 */
  lRowFirst: number;
  /** i32 */
  cRows: number;
  /** i32 */
  cProperties: number;
  /** i32 */
  cRowsTotal: number;
}

export const sizeofROWSTATUS = 16;

export function allocROWSTATUS(data?: Partial<ROWSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofROWSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lRowFirst !== undefined) view.setInt32(0, Number(data.lRowFirst), true);
  // 0x04: i32
  if (data?.cRows !== undefined) view.setInt32(4, Number(data.cRows), true);
  // 0x08: i32
  if (data?.cProperties !== undefined) view.setInt32(8, Number(data.cProperties), true);
  // 0x0c: i32
  if (data?.cRowsTotal !== undefined) view.setInt32(12, Number(data.cRowsTotal), true);
  return buf;
}

export class ROWSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lRowFirst(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cRows(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get cProperties(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cRowsTotal(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set lRowFirst(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cRows(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set cProperties(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cRowsTotal(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Data.HtmlHelp.COLUMNSTATUS (size: 8)
 */
export interface COLUMNSTATUS {
  /** i32 */
  cPropCount: number;
  /** i32 */
  cPropsLoaded: number;
}

export const sizeofCOLUMNSTATUS = 8;

export function allocCOLUMNSTATUS(data?: Partial<COLUMNSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLUMNSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cPropCount !== undefined) view.setInt32(0, Number(data.cPropCount), true);
  // 0x04: i32
  if (data?.cPropsLoaded !== undefined) view.setInt32(4, Number(data.cPropsLoaded), true);
  return buf;
}

export class COLUMNSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cPropCount(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cPropsLoaded(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cPropCount(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cPropsLoaded(value: number) {
    this.view.setInt32(4, value, true);
  }
}

// Native Libraries

// Symbols

