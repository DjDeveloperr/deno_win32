/// Auto-generated by Deno Win32: Windows.Win32.Data.RightsManagement.Apis

import * as util from "../../util.ts";

// Enums
export type DRMTIMETYPE = number;
export type DRMENCODINGTYPE = number;
export type DRMATTESTTYPE = number;
export type DRMSPECTYPE = number;
export type DRMSECURITYPROVIDERTYPE = number;
export type DRMGLOBALOPTIONS = number;
export type DRM_STATUS_MSG = number;
export type DRM_USAGEPOLICY_TYPE = number;
export type DRM_DISTRIBUTION_POINT_INFO = number;

// Constants
export const DRMHANDLE_INVALID = 0;
export const DRMENVHANDLE_INVALID = 0;
export const DRMQUERYHANDLE_INVALID = 0;
export const DRMHSESSION_INVALID = 0;
export const DRMPUBHANDLE_INVALID = 0;
export const DRM_AL_NONSILENT = 1;
export const DRM_AL_NOPERSIST = 2;
export const DRM_AL_CANCEL = 4;
export const DRM_AL_FETCHNOADVISORY = 8;
export const DRM_AL_NOUI = 16;
export const DRM_ACTIVATE_MACHINE = 1;
export const DRM_ACTIVATE_GROUPIDENTITY = 2;
export const DRM_ACTIVATE_TEMPORARY = 4;
export const DRM_ACTIVATE_CANCEL = 8;
export const DRM_ACTIVATE_SILENT = 16;
export const DRM_ACTIVATE_SHARED_GROUPIDENTITY = 32;
export const DRM_ACTIVATE_DELAYED = 64;
export const DRM_EL_MACHINE = 1;
export const DRM_EL_GROUPIDENTITY = 2;
export const DRM_EL_GROUPIDENTITY_NAME = 4;
export const DRM_EL_GROUPIDENTITY_LID = 8;
export const DRM_EL_SPECIFIED_GROUPIDENTITY = 16;
export const DRM_EL_EUL = 32;
export const DRM_EL_EUL_LID = 64;
export const DRM_EL_CLIENTLICENSOR = 128;
export const DRM_EL_CLIENTLICENSOR_LID = 256;
export const DRM_EL_SPECIFIED_CLIENTLICENSOR = 512;
export const DRM_EL_REVOCATIONLIST = 1024;
export const DRM_EL_REVOCATIONLIST_LID = 2048;
export const DRM_EL_EXPIRED = 4096;
export const DRM_EL_ISSUERNAME = 8192;
export const DRM_EL_ISSUANCELICENSE_TEMPLATE = 16384;
export const DRM_EL_ISSUANCELICENSE_TEMPLATE_LID = 32768;
export const DRM_ADD_LICENSE_NOPERSIST = 0;
export const DRM_ADD_LICENSE_PERSIST = 1;
export const DRM_SERVICE_TYPE_ACTIVATION = 1;
export const DRM_SERVICE_TYPE_CERTIFICATION = 2;
export const DRM_SERVICE_TYPE_PUBLISHING = 4;
export const DRM_SERVICE_TYPE_CLIENTLICENSOR = 8;
export const DRM_SERVICE_TYPE_SILENT = 16;
export const DRM_SERVICE_LOCATION_INTERNET = 1;
export const DRM_SERVICE_LOCATION_ENTERPRISE = 2;
export const DRM_DEFAULTGROUPIDTYPE_WINDOWSAUTH = `WindowsAuthProvider`;
export const DRM_DEFAULTGROUPIDTYPE_PASSPORT = `PassportAuthProvider`;
export const DRM_SIGN_ONLINE = 1;
export const DRM_SIGN_OFFLINE = 2;
export const DRM_SIGN_CANCEL = 4;
export const DRM_SERVER_ISSUANCELICENSE = 8;
export const DRM_AUTO_GENERATE_KEY = 16;
export const DRM_OWNER_LICENSE_NOPERSIST = 32;
export const DRM_REUSE_KEY = 64;
export const DRM_LOCKBOXTYPE_NONE = 0;
export const DRM_LOCKBOXTYPE_WHITEBOX = 1;
export const DRM_LOCKBOXTYPE_BLACKBOX = 2;
export const DRM_LOCKBOXTYPE_DEFAULT = 2;
export const DRM_AILT_NONSILENT = 1;
export const DRM_AILT_OBTAIN_ALL = 2;
export const DRM_AILT_CANCEL = 4;
export const MSDRM_CLIENT_ZONE = 52992;
export const MSDRM_POLICY_ZONE = 37632;
export const DRMIDVERSION = 0;
export const DRMBOUNDLICENSEPARAMSVERSION = 1;
export const DRMBINDINGFLAGS_IGNORE_VALIDITY_INTERVALS = 1;
export const DRMLICENSEACQDATAVERSION = 0;
export const DRMACTSERVINFOVERSION = 0;
export const DRMCLIENTSTRUCTVERSION = 1;
export const DRMCALLBACKVERSION = 1;
export const DRMTIMETYPE_SYSTEMUTC = 0;
export const DRMTIMETYPE_SYSTEMLOCAL = 1;
export const DRMENCODINGTYPE_BASE64 = 0;
export const DRMENCODINGTYPE_STRING = 1;
export const DRMENCODINGTYPE_LONG = 2;
export const DRMENCODINGTYPE_TIME = 3;
export const DRMENCODINGTYPE_UINT = 4;
export const DRMENCODINGTYPE_RAW = 5;
export const DRMATTESTTYPE_FULLENVIRONMENT = 0;
export const DRMATTESTTYPE_HASHONLY = 1;
export const DRMSPECTYPE_UNKNOWN = 0;
export const DRMSPECTYPE_FILENAME = 1;
export const DRMSECURITYPROVIDERTYPE_SOFTWARESECREP = 0;
export const DRMGLOBALOPTIONS_USE_WINHTTP = 0;
export const DRMGLOBALOPTIONS_USE_SERVERSECURITYPROCESSOR = 1;
export const DRM_MSG_ACTIVATE_MACHINE = 0;
export const DRM_MSG_ACTIVATE_GROUPIDENTITY = 1;
export const DRM_MSG_ACQUIRE_LICENSE = 2;
export const DRM_MSG_ACQUIRE_ADVISORY = 3;
export const DRM_MSG_SIGN_ISSUANCE_LICENSE = 4;
export const DRM_MSG_ACQUIRE_CLIENTLICENSOR = 5;
export const DRM_MSG_ACQUIRE_ISSUANCE_LICENSE_TEMPLATE = 6;
export const DRM_USAGEPOLICY_TYPE_BYNAME = 0;
export const DRM_USAGEPOLICY_TYPE_BYPUBLICKEY = 1;
export const DRM_USAGEPOLICY_TYPE_BYDIGEST = 2;
export const DRM_USAGEPOLICY_TYPE_OSEXCLUSION = 3;
export const DRM_DISTRIBUTION_POINT_LICENSE_ACQUISITION = 0;
export const DRM_DISTRIBUTION_POINT_PUBLISHING = 1;
export const DRM_DISTRIBUTION_POINT_REFERRAL_INFO = 2;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Data.RightsManagement.DRMID (size: 24)
 */
export interface DRMID {
  /** u32 */
  uVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszIDType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszID: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRMID = 24;

export function allocDRMID(data?: Partial<DRMID>): Uint8Array {
  const buf = new Uint8Array(sizeofDRMID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVersion !== undefined) view.setUint32(0, Number(data.uVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszIDType !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszIDType);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wszID !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszID);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Data.RightsManagement.DRMBOUNDLICENSEPARAMS (size: 72)
 */
export interface DRMBOUNDLICENSEPARAMS {
  /** u32 */
  uVersion: number;
  /** u32 */
  hEnablingPrincipal: number;
  /** u32 */
  hSecureStore: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszRightsRequested: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszRightsGroup: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Data.RightsManagement.DRMID */
  idResource: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAuthenticatorCount: number;
  /** ptr */
  rghAuthenticators: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszDefaultEnablingPrincipalCredentials: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFlags: number;
}

export const sizeofDRMBOUNDLICENSEPARAMS = 72;

export function allocDRMBOUNDLICENSEPARAMS(data?: Partial<DRMBOUNDLICENSEPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDRMBOUNDLICENSEPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVersion !== undefined) view.setUint32(0, Number(data.uVersion), true);
  // 0x04: u32
  if (data?.hEnablingPrincipal !== undefined) view.setUint32(4, Number(data.hEnablingPrincipal), true);
  // 0x08: u32
  if (data?.hSecureStore !== undefined) view.setUint32(8, Number(data.hSecureStore), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.wszRightsRequested !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszRightsRequested);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.wszRightsGroup !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wszRightsGroup);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.idResource !== undefined) view.setBigUint64(32, data.idResource === null ? 0n : BigInt(util.toPointer(data.idResource)), true);
  // 0x28: u32
  if (data?.cAuthenticatorCount !== undefined) view.setUint32(40, Number(data.cAuthenticatorCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rghAuthenticators !== undefined) view.setBigUint64(48, data.rghAuthenticators === null ? 0n : BigInt(util.toPointer(data.rghAuthenticators)), true);
  // 0x38: buffer
  if (data?.wszDefaultEnablingPrincipalCredentials !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.wszDefaultEnablingPrincipalCredentials);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: pad4
  return buf;
}

/**
 * Windows.Win32.Data.RightsManagement.DRM_LICENSE_ACQ_DATA (size: 48)
 */
export interface DRM_LICENSE_ACQ_DATA {
  /** u32 */
  uVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszLocalFilename: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pbPostData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwPostDataSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszFriendlyName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRM_LICENSE_ACQ_DATA = 48;

export function allocDRM_LICENSE_ACQ_DATA(data?: Partial<DRM_LICENSE_ACQ_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_LICENSE_ACQ_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVersion !== undefined) view.setUint32(0, Number(data.uVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszURL !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszURL);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wszLocalFilename !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszLocalFilename);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pbPostData !== undefined) view.setBigUint64(24, data.pbPostData === null ? 0n : BigInt(util.toPointer(data.pbPostData)), true);
  // 0x20: u32
  if (data?.dwPostDataSize !== undefined) view.setUint32(32, Number(data.dwPostDataSize), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.wszFriendlyName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.wszFriendlyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Data.RightsManagement.DRM_ACTSERV_INFO (size: 24)
 */
export interface DRM_ACTSERV_INFO {
  /** u32 */
  uVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszPubKey: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszURL: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRM_ACTSERV_INFO = 24;

export function allocDRM_ACTSERV_INFO(data?: Partial<DRM_ACTSERV_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_ACTSERV_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVersion !== undefined) view.setUint32(0, Number(data.uVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszPubKey !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszPubKey);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wszURL !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszURL);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Data.RightsManagement.DRM_CLIENT_VERSION_INFO (size: 40)
 */
export interface DRM_CLIENT_VERSION_INFO {
  /** u32 */
  uStructVersion: number;
  /** array */
  dwVersion: Deno.PointerValue | null;
  /** array */
  wszHierarchy: Deno.PointerValue | null;
  /** array */
  wszProductId: Deno.PointerValue | null;
  /** array */
  wszProductDescription: Deno.PointerValue | null;
}

export const sizeofDRM_CLIENT_VERSION_INFO = 40;

export function allocDRM_CLIENT_VERSION_INFO(data?: Partial<DRM_CLIENT_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRM_CLIENT_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uStructVersion !== undefined) view.setUint32(0, Number(data.uStructVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dwVersion !== undefined) view.setBigUint64(8, data.dwVersion === null ? 0n : BigInt(util.toPointer(data.dwVersion)), true);
  // 0x10: pointer
  if (data?.wszHierarchy !== undefined) view.setBigUint64(16, data.wszHierarchy === null ? 0n : BigInt(util.toPointer(data.wszHierarchy)), true);
  // 0x18: pointer
  if (data?.wszProductId !== undefined) view.setBigUint64(24, data.wszProductId === null ? 0n : BigInt(util.toPointer(data.wszProductId)), true);
  // 0x20: pointer
  if (data?.wszProductDescription !== undefined) view.setBigUint64(32, data.wszProductDescription === null ? 0n : BigInt(util.toPointer(data.wszProductDescription)), true);
  return buf;
}

export type HRESULT = number;

export type BOOL = number;

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libmsdrm_dll = Deno.dlopen("msdrm.dll", {
    DRMSetGlobalOptions: {
      parameters: ["i32", "pointer", "u32"],
      result: "pointer",
    },
    DRMGetClientVersion: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DRMInitEnvironment: {
      parameters: ["i32", "i32", "buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMLoadLibrary: {
      parameters: ["u32", "i32", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMCreateEnablingPrincipal: {
      parameters: ["u32", "u32", "buffer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMCloseHandle: {
      parameters: ["u32"],
      result: "pointer",
    },
    DRMCloseEnvironmentHandle: {
      parameters: ["u32"],
      result: "pointer",
    },
    DRMDuplicateHandle: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    DRMDuplicateEnvironmentHandle: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    DRMRegisterRevocationList: {
      parameters: ["u32", "buffer"],
      result: "pointer",
    },
    DRMCheckSecurity: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    DRMRegisterContent: {
      parameters: ["i32"],
      result: "pointer",
    },
    DRMEncrypt: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMDecrypt: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMCreateBoundLicense: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMCreateEnablingBitsDecryptor: {
      parameters: ["u32", "buffer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMCreateEnablingBitsEncryptor: {
      parameters: ["u32", "buffer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMAttest: {
      parameters: ["u32", "buffer", "i32", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetTime: {
      parameters: ["u32", "i32", "pointer"],
      result: "pointer",
    },
    DRMGetInfo: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetEnvironmentInfo: {
      parameters: ["u32", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetProcAddress: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMGetBoundLicenseObjectCount: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMGetBoundLicenseObject: {
      parameters: ["u32", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    DRMGetBoundLicenseAttributeCount: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMGetBoundLicenseAttribute: {
      parameters: ["u32", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMCreateClientSession: {
      parameters: ["pointer", "u32", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMIsActivated: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
    },
    DRMActivate: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetServiceLocation: {
      parameters: ["u32", "u32", "u32", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMCreateLicenseStorageSession: {
      parameters: ["u32", "u32", "u32", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMAddLicense: {
      parameters: ["u32", "u32", "buffer"],
      result: "pointer",
    },
    DRMAcquireAdvisories: {
      parameters: ["u32", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMEnumerateLicense: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMAcquireLicense: {
      parameters: ["u32", "u32", "buffer", "buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMDeleteLicense: {
      parameters: ["u32", "buffer"],
      result: "pointer",
    },
    DRMCloseSession: {
      parameters: ["u32"],
      result: "pointer",
    },
    DRMDuplicateSession: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    DRMGetSecurityProvider: {
      parameters: ["u32", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMEncode: {
      parameters: ["buffer", "u32", "pointer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMDecode: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMConstructCertificateChain: {
      parameters: ["u32", "pointer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMParseUnboundLicense: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    DRMCloseQueryHandle: {
      parameters: ["u32"],
      result: "pointer",
    },
    DRMGetUnboundLicenseObjectCount: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMGetUnboundLicenseObject: {
      parameters: ["u32", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    DRMGetUnboundLicenseAttributeCount: {
      parameters: ["u32", "buffer", "pointer"],
      result: "pointer",
    },
    DRMGetUnboundLicenseAttribute: {
      parameters: ["u32", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetCertificateChainCount: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    DRMDeconstructCertificateChain: {
      parameters: ["buffer", "u32", "pointer", "buffer"],
      result: "pointer",
    },
    DRMVerify: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMCreateUser: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMCreateRight: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMCreateIssuanceLicense: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    DRMAddRightWithUser: {
      parameters: ["u32", "u32", "u32"],
      result: "pointer",
    },
    DRMClearAllRights: {
      parameters: ["u32"],
      result: "pointer",
    },
    DRMSetMetaData: {
      parameters: ["u32", "buffer", "buffer", "buffer", "buffer", "buffer", "buffer"],
      result: "pointer",
    },
    DRMSetUsagePolicy: {
      parameters: ["u32", "i32", "i32", "i32", "buffer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    DRMSetRevocationPoint: {
      parameters: ["u32", "i32", "buffer", "buffer", "buffer", "pointer", "buffer", "buffer"],
      result: "pointer",
    },
    DRMSetApplicationSpecificData: {
      parameters: ["u32", "i32", "buffer", "buffer"],
      result: "pointer",
    },
    DRMSetNameAndDescription: {
      parameters: ["u32", "i32", "u32", "buffer", "buffer"],
      result: "pointer",
    },
    DRMSetIntervalTime: {
      parameters: ["u32", "u32"],
      result: "pointer",
    },
    DRMGetIssuanceLicenseTemplate: {
      parameters: ["u32", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetSignedIssuanceLicense: {
      parameters: ["u32", "u32", "u32", "pointer", "u32", "buffer", "buffer", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    DRMGetSignedIssuanceLicenseEx: {
      parameters: ["u32", "u32", "u32", "pointer", "u32", "buffer", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    DRMClosePubHandle: {
      parameters: ["u32"],
      result: "pointer",
    },
    DRMDuplicatePubHandle: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    DRMGetUserInfo: {
      parameters: ["u32", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetRightInfo: {
      parameters: ["u32", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetRightExtendedInfo: {
      parameters: ["u32", "u32", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetUsers: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
    },
    DRMGetUserRights: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    DRMGetMetaData: {
      parameters: ["u32", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetApplicationSpecificData: {
      parameters: ["u32", "u32", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetIssuanceLicenseInfo: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetRevocationPoint: {
      parameters: ["u32", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetUsagePolicy: {
      parameters: ["u32", "u32", "pointer", "pointer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DRMGetNameAndDescription: {
      parameters: ["u32", "u32", "pointer", "pointer", "buffer", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetOwnerLicense: {
      parameters: ["u32", "pointer", "buffer"],
      result: "pointer",
    },
    DRMGetIntervalTime: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    DRMRepair: {
      parameters: [],
      result: "pointer",
    },
    DRMRegisterProtectedWindow: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    DRMIsWindowProtected: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DRMAcquireIssuanceLicenseTemplate: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DRMSetGlobalOptions(
  eGlobalOptions: DRMGLOBALOPTIONS /* Windows.Win32.Data.RightsManagement.DRMGLOBALOPTIONS */,
  pvdata: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwlen: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetGlobalOptions(eGlobalOptions, util.toPointer(pvdata), dwlen));
}

export function DRMGetClientVersion(
  pDRMClientVersionInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetClientVersion(util.toPointer(pDRMClientVersionInfo)));
}

export function DRMInitEnvironment(
  eSecurityProviderType: DRMSECURITYPROVIDERTYPE /* Windows.Win32.Data.RightsManagement.DRMSECURITYPROVIDERTYPE */,
  eSpecification: DRMSPECTYPE /* Windows.Win32.Data.RightsManagement.DRMSPECTYPE */,
  wszSecurityProvider: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszManifestCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszMachineCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phEnv: Deno.PointerValue | Uint8Array | null /* ptr */,
  phDefaultLibrary: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMInitEnvironment(eSecurityProviderType, eSpecification, util.pwstrToFfi(wszSecurityProvider), util.pwstrToFfi(wszManifestCredentials), util.pwstrToFfi(wszMachineCredentials), util.toPointer(phEnv), util.toPointer(phDefaultLibrary)));
}

export function DRMLoadLibrary(
  hEnv: number /* u32 */,
  eSpecification: DRMSPECTYPE /* Windows.Win32.Data.RightsManagement.DRMSPECTYPE */,
  wszLibraryProvider: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phLibrary: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMLoadLibrary(hEnv, eSpecification, util.pwstrToFfi(wszLibraryProvider), util.pwstrToFfi(wszCredentials), util.toPointer(phLibrary)));
}

export function DRMCreateEnablingPrincipal(
  hEnv: number /* u32 */,
  hLibrary: number /* u32 */,
  wszObject: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pidPrincipal: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszCredentials: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phEnablingPrincipal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateEnablingPrincipal(hEnv, hLibrary, util.pwstrToFfi(wszObject), util.toPointer(pidPrincipal), util.pwstrToFfi(wszCredentials), util.toPointer(phEnablingPrincipal)));
}

export function DRMCloseHandle(
  handle: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCloseHandle(handle));
}

export function DRMCloseEnvironmentHandle(
  hEnv: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCloseEnvironmentHandle(hEnv));
}

export function DRMDuplicateHandle(
  hToCopy: number /* u32 */,
  phCopy: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDuplicateHandle(hToCopy, util.toPointer(phCopy)));
}

export function DRMDuplicateEnvironmentHandle(
  hToCopy: number /* u32 */,
  phCopy: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDuplicateEnvironmentHandle(hToCopy, util.toPointer(phCopy)));
}

export function DRMRegisterRevocationList(
  hEnv: number /* u32 */,
  wszRevocationList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMRegisterRevocationList(hEnv, util.pwstrToFfi(wszRevocationList)));
}

export function DRMCheckSecurity(
  hEnv: number /* u32 */,
  cLevel: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCheckSecurity(hEnv, cLevel));
}

export function DRMRegisterContent(
  fRegister: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMRegisterContent(util.boolToFfi(fRegister)));
}

export function DRMEncrypt(
  hCryptoProvider: number /* u32 */,
  iPosition: number /* u32 */,
  cNumInBytes: number /* u32 */,
  pbInData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcNumOutBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbOutData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMEncrypt(hCryptoProvider, iPosition, cNumInBytes, util.toPointer(pbInData), util.toPointer(pcNumOutBytes), util.toPointer(pbOutData)));
}

export function DRMDecrypt(
  hCryptoProvider: number /* u32 */,
  iPosition: number /* u32 */,
  cNumInBytes: number /* u32 */,
  pbInData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcNumOutBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbOutData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDecrypt(hCryptoProvider, iPosition, cNumInBytes, util.toPointer(pbInData), util.toPointer(pcNumOutBytes), util.toPointer(pbOutData)));
}

export function DRMCreateBoundLicense(
  hEnv: number /* u32 */,
  pParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszLicenseChain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phBoundLicense: Deno.PointerValue | Uint8Array | null /* ptr */,
  phErrorLog: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateBoundLicense(hEnv, util.toPointer(pParams), util.pwstrToFfi(wszLicenseChain), util.toPointer(phBoundLicense), util.toPointer(phErrorLog)));
}

export function DRMCreateEnablingBitsDecryptor(
  hBoundLicense: number /* u32 */,
  wszRight: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hAuxLib: number /* u32 */,
  wszAuxPlug: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phDecryptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateEnablingBitsDecryptor(hBoundLicense, util.pwstrToFfi(wszRight), hAuxLib, util.pwstrToFfi(wszAuxPlug), util.toPointer(phDecryptor)));
}

export function DRMCreateEnablingBitsEncryptor(
  hBoundLicense: number /* u32 */,
  wszRight: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hAuxLib: number /* u32 */,
  wszAuxPlug: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phEncryptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateEnablingBitsEncryptor(hBoundLicense, util.pwstrToFfi(wszRight), hAuxLib, util.pwstrToFfi(wszAuxPlug), util.toPointer(phEncryptor)));
}

export function DRMAttest(
  hEnablingPrincipal: number /* u32 */,
  wszData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  eType: DRMATTESTTYPE /* Windows.Win32.Data.RightsManagement.DRMATTESTTYPE */,
  pcAttestedBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszAttestedBlob: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMAttest(hEnablingPrincipal, util.pwstrToFfi(wszData), eType, util.toPointer(pcAttestedBlob), util.pwstrToFfi(wszAttestedBlob)));
}

export function DRMGetTime(
  hEnv: number /* u32 */,
  eTimerIdType: DRMTIMETYPE /* Windows.Win32.Data.RightsManagement.DRMTIMETYPE */,
  poTimeObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetTime(hEnv, eTimerIdType, util.toPointer(poTimeObject)));
}

export function DRMGetInfo(
  handle: number /* u32 */,
  wszAttribute: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peEncoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetInfo(handle, util.pwstrToFfi(wszAttribute), util.toPointer(peEncoding), util.toPointer(pcBuffer), util.toPointer(pbBuffer)));
}

export function DRMGetEnvironmentInfo(
  handle: number /* u32 */,
  wszAttribute: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peEncoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetEnvironmentInfo(handle, util.pwstrToFfi(wszAttribute), util.toPointer(peEncoding), util.toPointer(pcBuffer), util.toPointer(pbBuffer)));
}

export function DRMGetProcAddress(
  hLibrary: number /* u32 */,
  wszProcName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppfnProcAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetProcAddress(hLibrary, util.pwstrToFfi(wszProcName), util.toPointer(ppfnProcAddress)));
}

export function DRMGetBoundLicenseObjectCount(
  hQueryRoot: number /* u32 */,
  wszSubObjectType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcSubObjects: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetBoundLicenseObjectCount(hQueryRoot, util.pwstrToFfi(wszSubObjectType), util.toPointer(pcSubObjects)));
}

export function DRMGetBoundLicenseObject(
  hQueryRoot: number /* u32 */,
  wszSubObjectType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iWhich: number /* u32 */,
  phSubObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetBoundLicenseObject(hQueryRoot, util.pwstrToFfi(wszSubObjectType), iWhich, util.toPointer(phSubObject)));
}

export function DRMGetBoundLicenseAttributeCount(
  hQueryRoot: number /* u32 */,
  wszAttribute: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetBoundLicenseAttributeCount(hQueryRoot, util.pwstrToFfi(wszAttribute), util.toPointer(pcAttributes)));
}

export function DRMGetBoundLicenseAttribute(
  hQueryRoot: number /* u32 */,
  wszAttribute: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iWhich: number /* u32 */,
  peEncoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetBoundLicenseAttribute(hQueryRoot, util.pwstrToFfi(wszAttribute), iWhich, util.toPointer(peEncoding), util.toPointer(pcBuffer), util.toPointer(pbBuffer)));
}

export function DRMCreateClientSession(
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Data.RightsManagement.DRMCALLBACK */,
  uCallbackVersion: number /* u32 */,
  wszGroupIDProviderType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszGroupID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phClient: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateClientSession(util.toPointer(pfnCallback), uCallbackVersion, util.pwstrToFfi(wszGroupIDProviderType), util.pwstrToFfi(wszGroupID), util.toPointer(phClient)));
}

export function DRMIsActivated(
  hClient: number /* u32 */,
  uFlags: number /* u32 */,
  pActServInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMIsActivated(hClient, uFlags, util.toPointer(pActServInfo)));
}

export function DRMActivate(
  hClient: number /* u32 */,
  uFlags: number /* u32 */,
  uLangID: number /* u32 */,
  pActServInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  hParentWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMActivate(hClient, uFlags, uLangID, util.toPointer(pActServInfo), util.toPointer(pvContext), util.hwndToFfi(hParentWnd)));
}

export function DRMGetServiceLocation(
  hClient: number /* u32 */,
  uServiceType: number /* u32 */,
  uServiceLocation: number /* u32 */,
  wszIssuanceLicense: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puServiceURLLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszServiceURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetServiceLocation(hClient, uServiceType, uServiceLocation, util.pwstrToFfi(wszIssuanceLicense), util.toPointer(puServiceURLLength), util.pwstrToFfi(wszServiceURL)));
}

export function DRMCreateLicenseStorageSession(
  hEnv: number /* u32 */,
  hDefaultLibrary: number /* u32 */,
  hClient: number /* u32 */,
  uFlags: number /* u32 */,
  wszIssuanceLicense: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phLicenseStorage: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateLicenseStorageSession(hEnv, hDefaultLibrary, hClient, uFlags, util.pwstrToFfi(wszIssuanceLicense), util.toPointer(phLicenseStorage)));
}

export function DRMAddLicense(
  hLicenseStorage: number /* u32 */,
  uFlags: number /* u32 */,
  wszLicense: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMAddLicense(hLicenseStorage, uFlags, util.pwstrToFfi(wszLicense)));
}

export function DRMAcquireAdvisories(
  hLicenseStorage: number /* u32 */,
  wszLicense: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMAcquireAdvisories(hLicenseStorage, util.pwstrToFfi(wszLicense), util.pwstrToFfi(wszURL), util.toPointer(pvContext)));
}

export function DRMEnumerateLicense(
  hSession: number /* u32 */,
  uFlags: number /* u32 */,
  uIndex: number /* u32 */,
  pfSharedFlag: Deno.PointerValue | Uint8Array | null /* ptr */,
  puCertificateDataLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszCertificateData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMEnumerateLicense(hSession, uFlags, uIndex, util.toPointer(pfSharedFlag), util.toPointer(puCertificateDataLen), util.pwstrToFfi(wszCertificateData)));
}

export function DRMAcquireLicense(
  hSession: number /* u32 */,
  uFlags: number /* u32 */,
  wszGroupIdentityCredential: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszRequestedRights: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszCustomData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMAcquireLicense(hSession, uFlags, util.pwstrToFfi(wszGroupIdentityCredential), util.pwstrToFfi(wszRequestedRights), util.pwstrToFfi(wszCustomData), util.pwstrToFfi(wszURL), util.toPointer(pvContext)));
}

export function DRMDeleteLicense(
  hSession: number /* u32 */,
  wszLicenseId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDeleteLicense(hSession, util.pwstrToFfi(wszLicenseId)));
}

export function DRMCloseSession(
  hSession: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCloseSession(hSession));
}

export function DRMDuplicateSession(
  hSessionIn: number /* u32 */,
  phSessionOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDuplicateSession(hSessionIn, util.toPointer(phSessionOut)));
}

export function DRMGetSecurityProvider(
  uFlags: number /* u32 */,
  puTypeLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puPathLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetSecurityProvider(uFlags, util.toPointer(puTypeLen), util.pwstrToFfi(wszType), util.toPointer(puPathLen), util.pwstrToFfi(wszPath)));
}

export function DRMEncode(
  wszAlgID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uDataLen: number /* u32 */,
  pbDecodedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  puEncodedStringLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszEncodedString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMEncode(util.pwstrToFfi(wszAlgID), uDataLen, util.toPointer(pbDecodedData), util.toPointer(puEncodedStringLen), util.pwstrToFfi(wszEncodedString)));
}

export function DRMDecode(
  wszAlgID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszEncodedString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puDecodedDataLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbDecodedData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDecode(util.pwstrToFfi(wszAlgID), util.pwstrToFfi(wszEncodedString), util.toPointer(puDecodedDataLen), util.toPointer(pbDecodedData)));
}

export function DRMConstructCertificateChain(
  cCertificates: number /* u32 */,
  rgwszCertificates: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszChain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMConstructCertificateChain(cCertificates, util.toPointer(rgwszCertificates), util.toPointer(pcChain), util.pwstrToFfi(wszChain)));
}

export function DRMParseUnboundLicense(
  wszCertificate: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phQueryRoot: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMParseUnboundLicense(util.pwstrToFfi(wszCertificate), util.toPointer(phQueryRoot)));
}

export function DRMCloseQueryHandle(
  hQuery: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCloseQueryHandle(hQuery));
}

export function DRMGetUnboundLicenseObjectCount(
  hQueryRoot: number /* u32 */,
  wszSubObjectType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcSubObjects: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUnboundLicenseObjectCount(hQueryRoot, util.pwstrToFfi(wszSubObjectType), util.toPointer(pcSubObjects)));
}

export function DRMGetUnboundLicenseObject(
  hQueryRoot: number /* u32 */,
  wszSubObjectType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iIndex: number /* u32 */,
  phSubQuery: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUnboundLicenseObject(hQueryRoot, util.pwstrToFfi(wszSubObjectType), iIndex, util.toPointer(phSubQuery)));
}

export function DRMGetUnboundLicenseAttributeCount(
  hQueryRoot: number /* u32 */,
  wszAttributeType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUnboundLicenseAttributeCount(hQueryRoot, util.pwstrToFfi(wszAttributeType), util.toPointer(pcAttributes)));
}

export function DRMGetUnboundLicenseAttribute(
  hQueryRoot: number /* u32 */,
  wszAttributeType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iWhich: number /* u32 */,
  peEncoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUnboundLicenseAttribute(hQueryRoot, util.pwstrToFfi(wszAttributeType), iWhich, util.toPointer(peEncoding), util.toPointer(pcBuffer), util.toPointer(pbBuffer)));
}

export function DRMGetCertificateChainCount(
  wszChain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcCertCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetCertificateChainCount(util.pwstrToFfi(wszChain), util.toPointer(pcCertCount)));
}

export function DRMDeconstructCertificateChain(
  wszChain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  iWhich: number /* u32 */,
  pcCert: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszCert: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDeconstructCertificateChain(util.pwstrToFfi(wszChain), iWhich, util.toPointer(pcCert), util.pwstrToFfi(wszCert)));
}

export function DRMVerify(
  wszData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcAttestedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszAttestedData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  peType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcPrincipal: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcManifest: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszManifest: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMVerify(util.pwstrToFfi(wszData), util.toPointer(pcAttestedData), util.pwstrToFfi(wszAttestedData), util.toPointer(peType), util.toPointer(pcPrincipal), util.pwstrToFfi(wszPrincipal), util.toPointer(pcManifest), util.pwstrToFfi(wszManifest)));
}

export function DRMCreateUser(
  wszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszUserId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszUserIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phUser: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateUser(util.pwstrToFfi(wszUserName), util.pwstrToFfi(wszUserId), util.pwstrToFfi(wszUserIdType), util.toPointer(phUser)));
}

export function DRMCreateRight(
  wszRightName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pstFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstUntil: Deno.PointerValue | Uint8Array | null /* ptr */,
  cExtendedInfo: number /* u32 */,
  pwszExtendedInfoName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwszExtendedInfoValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  phRight: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateRight(util.pwstrToFfi(wszRightName), util.toPointer(pstFrom), util.toPointer(pstUntil), cExtendedInfo, util.toPointer(pwszExtendedInfoName), util.toPointer(pwszExtendedInfoValue), util.toPointer(phRight)));
}

export function DRMCreateIssuanceLicense(
  pstTimeFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstTimeUntil: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszReferralInfoName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszReferralInfoURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hOwner: number /* u32 */,
  wszIssuanceLicense: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hBoundLicense: number /* u32 */,
  phIssuanceLicense: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMCreateIssuanceLicense(util.toPointer(pstTimeFrom), util.toPointer(pstTimeUntil), util.pwstrToFfi(wszReferralInfoName), util.pwstrToFfi(wszReferralInfoURL), hOwner, util.pwstrToFfi(wszIssuanceLicense), hBoundLicense, util.toPointer(phIssuanceLicense)));
}

export function DRMAddRightWithUser(
  hIssuanceLicense: number /* u32 */,
  hRight: number /* u32 */,
  hUser: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMAddRightWithUser(hIssuanceLicense, hRight, hUser));
}

export function DRMClearAllRights(
  hIssuanceLicense: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMClearAllRights(hIssuanceLicense));
}

export function DRMSetMetaData(
  hIssuanceLicense: number /* u32 */,
  wszContentId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszContentIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszSKUId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszSKUIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszContentType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszContentName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetMetaData(hIssuanceLicense, util.pwstrToFfi(wszContentId), util.pwstrToFfi(wszContentIdType), util.pwstrToFfi(wszSKUId), util.pwstrToFfi(wszSKUIdType), util.pwstrToFfi(wszContentType), util.pwstrToFfi(wszContentName)));
}

export function DRMSetUsagePolicy(
  hIssuanceLicense: number /* u32 */,
  eUsagePolicyType: DRM_USAGEPOLICY_TYPE /* Windows.Win32.Data.RightsManagement.DRM_USAGEPOLICY_TYPE */,
  fDelete: boolean /* Windows.Win32.Foundation.BOOL */,
  fExclusion: boolean /* Windows.Win32.Foundation.BOOL */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszMinVersion: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszMaxVersion: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszPublicKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszDigestAlgorithm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbDigest: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbDigest: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetUsagePolicy(hIssuanceLicense, eUsagePolicyType, util.boolToFfi(fDelete), util.boolToFfi(fExclusion), util.pwstrToFfi(wszName), util.pwstrToFfi(wszMinVersion), util.pwstrToFfi(wszMaxVersion), util.pwstrToFfi(wszPublicKey), util.pwstrToFfi(wszDigestAlgorithm), util.toPointer(pbDigest), cbDigest));
}

export function DRMSetRevocationPoint(
  hIssuanceLicense: number /* u32 */,
  fDelete: boolean /* Windows.Win32.Foundation.BOOL */,
  wszId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pstFrequency: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszPublicKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetRevocationPoint(hIssuanceLicense, util.boolToFfi(fDelete), util.pwstrToFfi(wszId), util.pwstrToFfi(wszIdType), util.pwstrToFfi(wszURL), util.toPointer(pstFrequency), util.pwstrToFfi(wszName), util.pwstrToFfi(wszPublicKey)));
}

export function DRMSetApplicationSpecificData(
  hIssuanceLicense: number /* u32 */,
  fDelete: boolean /* Windows.Win32.Foundation.BOOL */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetApplicationSpecificData(hIssuanceLicense, util.boolToFfi(fDelete), util.pwstrToFfi(wszName), util.pwstrToFfi(wszValue)));
}

export function DRMSetNameAndDescription(
  hIssuanceLicense: number /* u32 */,
  fDelete: boolean /* Windows.Win32.Foundation.BOOL */,
  lcid: number /* u32 */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetNameAndDescription(hIssuanceLicense, util.boolToFfi(fDelete), lcid, util.pwstrToFfi(wszName), util.pwstrToFfi(wszDescription)));
}

export function DRMSetIntervalTime(
  hIssuanceLicense: number /* u32 */,
  cDays: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMSetIntervalTime(hIssuanceLicense, cDays));
}

export function DRMGetIssuanceLicenseTemplate(
  hIssuanceLicense: number /* u32 */,
  puIssuanceLicenseTemplateLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszIssuanceLicenseTemplate: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetIssuanceLicenseTemplate(hIssuanceLicense, util.toPointer(puIssuanceLicenseTemplateLength), util.pwstrToFfi(wszIssuanceLicenseTemplate)));
}

export function DRMGetSignedIssuanceLicense(
  hEnv: number /* u32 */,
  hIssuanceLicense: number /* u32 */,
  uFlags: number /* u32 */,
  pbSymKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSymKey: number /* u32 */,
  wszSymKeyType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  wszClientLicensorCertificate: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Data.RightsManagement.DRMCALLBACK */,
  wszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetSignedIssuanceLicense(hEnv, hIssuanceLicense, uFlags, util.toPointer(pbSymKey), cbSymKey, util.pwstrToFfi(wszSymKeyType), util.pwstrToFfi(wszClientLicensorCertificate), util.toPointer(pfnCallback), util.pwstrToFfi(wszURL), util.toPointer(pvContext)));
}

export function DRMGetSignedIssuanceLicenseEx(
  hEnv: number /* u32 */,
  hIssuanceLicense: number /* u32 */,
  uFlags: number /* u32 */,
  pbSymKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSymKey: number /* u32 */,
  wszSymKeyType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  hEnablingPrincipal: number /* u32 */,
  hBoundLicenseCLC: number /* u32 */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Data.RightsManagement.DRMCALLBACK */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetSignedIssuanceLicenseEx(hEnv, hIssuanceLicense, uFlags, util.toPointer(pbSymKey), cbSymKey, util.pwstrToFfi(wszSymKeyType), util.toPointer(pvReserved), hEnablingPrincipal, hBoundLicenseCLC, util.toPointer(pfnCallback), util.toPointer(pvContext)));
}

export function DRMClosePubHandle(
  hPub: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMClosePubHandle(hPub));
}

export function DRMDuplicatePubHandle(
  hPubIn: number /* u32 */,
  phPubOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMDuplicatePubHandle(hPubIn, util.toPointer(phPubOut)));
}

export function DRMGetUserInfo(
  hUser: number /* u32 */,
  puUserNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puUserIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszUserId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puUserIdTypeLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszUserIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUserInfo(hUser, util.toPointer(puUserNameLength), util.pwstrToFfi(wszUserName), util.toPointer(puUserIdLength), util.pwstrToFfi(wszUserId), util.toPointer(puUserIdTypeLength), util.pwstrToFfi(wszUserIdType)));
}

export function DRMGetRightInfo(
  hRight: number /* u32 */,
  puRightNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszRightName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pstFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstUntil: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetRightInfo(hRight, util.toPointer(puRightNameLength), util.pwstrToFfi(wszRightName), util.toPointer(pstFrom), util.toPointer(pstUntil)));
}

export function DRMGetRightExtendedInfo(
  hRight: number /* u32 */,
  uIndex: number /* u32 */,
  puExtendedInfoNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszExtendedInfoName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puExtendedInfoValueLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszExtendedInfoValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetRightExtendedInfo(hRight, uIndex, util.toPointer(puExtendedInfoNameLength), util.pwstrToFfi(wszExtendedInfoName), util.toPointer(puExtendedInfoValueLength), util.pwstrToFfi(wszExtendedInfoValue)));
}

export function DRMGetUsers(
  hIssuanceLicense: number /* u32 */,
  uIndex: number /* u32 */,
  phUser: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUsers(hIssuanceLicense, uIndex, util.toPointer(phUser)));
}

export function DRMGetUserRights(
  hIssuanceLicense: number /* u32 */,
  hUser: number /* u32 */,
  uIndex: number /* u32 */,
  phRight: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUserRights(hIssuanceLicense, hUser, uIndex, util.toPointer(phRight)));
}

export function DRMGetMetaData(
  hIssuanceLicense: number /* u32 */,
  puContentIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszContentId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puContentIdTypeLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszContentIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puSKUIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszSKUId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puSKUIdTypeLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszSKUIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puContentTypeLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszContentType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puContentNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszContentName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetMetaData(hIssuanceLicense, util.toPointer(puContentIdLength), util.pwstrToFfi(wszContentId), util.toPointer(puContentIdTypeLength), util.pwstrToFfi(wszContentIdType), util.toPointer(puSKUIdLength), util.pwstrToFfi(wszSKUId), util.toPointer(puSKUIdTypeLength), util.pwstrToFfi(wszSKUIdType), util.toPointer(puContentTypeLength), util.pwstrToFfi(wszContentType), util.toPointer(puContentNameLength), util.pwstrToFfi(wszContentName)));
}

export function DRMGetApplicationSpecificData(
  hIssuanceLicense: number /* u32 */,
  uIndex: number /* u32 */,
  puNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puValueLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetApplicationSpecificData(hIssuanceLicense, uIndex, util.toPointer(puNameLength), util.pwstrToFfi(wszName), util.toPointer(puValueLength), util.pwstrToFfi(wszValue)));
}

export function DRMGetIssuanceLicenseInfo(
  hIssuanceLicense: number /* u32 */,
  pstTimeFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
  pstTimeUntil: Deno.PointerValue | Uint8Array | null /* ptr */,
  uFlags: number /* u32 */,
  puDistributionPointNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszDistributionPointName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puDistributionPointURLLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszDistributionPointURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfOfficial: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetIssuanceLicenseInfo(hIssuanceLicense, util.toPointer(pstTimeFrom), util.toPointer(pstTimeUntil), uFlags, util.toPointer(puDistributionPointNameLength), util.pwstrToFfi(wszDistributionPointName), util.toPointer(puDistributionPointURLLength), util.pwstrToFfi(wszDistributionPointURL), util.toPointer(phOwner), util.toPointer(pfOfficial)));
}

export function DRMGetRevocationPoint(
  hIssuanceLicense: number /* u32 */,
  puIdLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszId: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puIdTypeLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszIdType: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puURLLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszRL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pstFrequency: Deno.PointerValue | Uint8Array | null /* ptr */,
  puNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puPublicKeyLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszPublicKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetRevocationPoint(hIssuanceLicense, util.toPointer(puIdLength), util.pwstrToFfi(wszId), util.toPointer(puIdTypeLength), util.pwstrToFfi(wszIdType), util.toPointer(puURLLength), util.pwstrToFfi(wszRL), util.toPointer(pstFrequency), util.toPointer(puNameLength), util.pwstrToFfi(wszName), util.toPointer(puPublicKeyLength), util.pwstrToFfi(wszPublicKey)));
}

export function DRMGetUsagePolicy(
  hIssuanceLicense: number /* u32 */,
  uIndex: number /* u32 */,
  peUsagePolicyType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfExclusion: Deno.PointerValue | Uint8Array | null /* ptr */,
  puNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puMinVersionLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszMinVersion: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puMaxVersionLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszMaxVersion: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puPublicKeyLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszPublicKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puDigestAlgorithmLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszDigestAlgorithm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcbDigest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbDigest: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetUsagePolicy(hIssuanceLicense, uIndex, util.toPointer(peUsagePolicyType), util.toPointer(pfExclusion), util.toPointer(puNameLength), util.pwstrToFfi(wszName), util.toPointer(puMinVersionLength), util.pwstrToFfi(wszMinVersion), util.toPointer(puMaxVersionLength), util.pwstrToFfi(wszMaxVersion), util.toPointer(puPublicKeyLength), util.pwstrToFfi(wszPublicKey), util.toPointer(puDigestAlgorithmLength), util.pwstrToFfi(wszDigestAlgorithm), util.toPointer(pcbDigest), util.toPointer(pbDigest)));
}

export function DRMGetNameAndDescription(
  hIssuanceLicense: number /* u32 */,
  uIndex: number /* u32 */,
  pulcid: Deno.PointerValue | Uint8Array | null /* ptr */,
  puNameLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puDescriptionLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetNameAndDescription(hIssuanceLicense, uIndex, util.toPointer(pulcid), util.toPointer(puNameLength), util.pwstrToFfi(wszName), util.toPointer(puDescriptionLength), util.pwstrToFfi(wszDescription)));
}

export function DRMGetOwnerLicense(
  hIssuanceLicense: number /* u32 */,
  puOwnerLicenseLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszOwnerLicense: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetOwnerLicense(hIssuanceLicense, util.toPointer(puOwnerLicenseLength), util.pwstrToFfi(wszOwnerLicense)));
}

export function DRMGetIntervalTime(
  hIssuanceLicense: number /* u32 */,
  pcDays: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMGetIntervalTime(hIssuanceLicense, util.toPointer(pcDays)));
}

export function DRMRepair(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMRepair());
}

export function DRMRegisterProtectedWindow(
  hEnv: number /* u32 */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMRegisterProtectedWindow(hEnv, util.hwndToFfi(hwnd)));
}

export function DRMIsWindowProtected(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pfProtected: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMIsWindowProtected(util.hwndToFfi(hwnd), util.toPointer(pfProtected)));
}

export function DRMAcquireIssuanceLicenseTemplate(
  hClient: number /* u32 */,
  uFlags: number /* u32 */,
  pvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  cTemplates: number /* u32 */,
  pwszTemplateIds: Deno.PointerValue | Uint8Array | null /* ptr */,
  wszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pvContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libmsdrm_dll.DRMAcquireIssuanceLicenseTemplate(hClient, uFlags, util.toPointer(pvReserved), cTemplates, util.toPointer(pwszTemplateIds), util.pwstrToFfi(wszUrl), util.toPointer(pvContext)));
}

