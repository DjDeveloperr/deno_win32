/// Auto-generated by Deno Win32: Windows.Win32.UI.Notifications.Apis

import * as util from "../../util.ts";

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Notifications.NOTIFICATION_USER_INPUT_DATA (size: 16)
 */
export interface NOTIFICATION_USER_INPUT_DATA {
  /** Windows.Win32.Foundation.PWSTR */
  Key: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Value: string | null | Uint8Array | Uint16Array;
}

export const sizeofNOTIFICATION_USER_INPUT_DATA = 16;

export function allocNOTIFICATION_USER_INPUT_DATA(data?: Partial<NOTIFICATION_USER_INPUT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFICATION_USER_INPUT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Key !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Key);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class NOTIFICATION_USER_INPUT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

// Native Libraries

// Symbols

