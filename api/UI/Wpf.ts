/// Auto-generated by Deno Win32: Windows.Win32.UI.Wpf.Apis

import * as util from "../../util.ts";

// Constants
export const MILBITMAPEFFECT_SDK_VERSION = 16777216;

// Structs

/**
 * Windows.Win32.UI.Wpf.MilRectD (size: 32)
 */
export interface MilRectD {
  /** f64 */
  left: number;
  /** f64 */
  top: number;
  /** f64 */
  right: number;
  /** f64 */
  bottom: number;
}

export const sizeofMilRectD = 32;

export function allocMilRectD(data?: Partial<MilRectD>): Uint8Array {
  const buf = new Uint8Array(sizeofMilRectD);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.left !== undefined) view.setFloat64(0, Number(data.left), true);
  // 0x08: f64
  if (data?.top !== undefined) view.setFloat64(8, Number(data.top), true);
  // 0x10: f64
  if (data?.right !== undefined) view.setFloat64(16, Number(data.right), true);
  // 0x18: f64
  if (data?.bottom !== undefined) view.setFloat64(24, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.UI.Wpf.MilPoint2D (size: 16)
 */
export interface MilPoint2D {
  /** f64 */
  X: number;
  /** f64 */
  Y: number;
}

export const sizeofMilPoint2D = 16;

export function allocMilPoint2D(data?: Partial<MilPoint2D>): Uint8Array {
  const buf = new Uint8Array(sizeofMilPoint2D);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.X !== undefined) view.setFloat64(0, Number(data.X), true);
  // 0x08: f64
  if (data?.Y !== undefined) view.setFloat64(8, Number(data.Y), true);
  return buf;
}

/**
 * Windows.Win32.UI.Wpf.MILMatrixF (size: 128)
 */
export interface MILMatrixF {
  /** f64 */
  _11: number;
  /** f64 */
  _12: number;
  /** f64 */
  _13: number;
  /** f64 */
  _14: number;
  /** f64 */
  _21: number;
  /** f64 */
  _22: number;
  /** f64 */
  _23: number;
  /** f64 */
  _24: number;
  /** f64 */
  _31: number;
  /** f64 */
  _32: number;
  /** f64 */
  _33: number;
  /** f64 */
  _34: number;
  /** f64 */
  _41: number;
  /** f64 */
  _42: number;
  /** f64 */
  _43: number;
  /** f64 */
  _44: number;
}

export const sizeofMILMatrixF = 128;

export function allocMILMatrixF(data?: Partial<MILMatrixF>): Uint8Array {
  const buf = new Uint8Array(sizeofMILMatrixF);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?._11 !== undefined) view.setFloat64(0, Number(data._11), true);
  // 0x08: f64
  if (data?._12 !== undefined) view.setFloat64(8, Number(data._12), true);
  // 0x10: f64
  if (data?._13 !== undefined) view.setFloat64(16, Number(data._13), true);
  // 0x18: f64
  if (data?._14 !== undefined) view.setFloat64(24, Number(data._14), true);
  // 0x20: f64
  if (data?._21 !== undefined) view.setFloat64(32, Number(data._21), true);
  // 0x28: f64
  if (data?._22 !== undefined) view.setFloat64(40, Number(data._22), true);
  // 0x30: f64
  if (data?._23 !== undefined) view.setFloat64(48, Number(data._23), true);
  // 0x38: f64
  if (data?._24 !== undefined) view.setFloat64(56, Number(data._24), true);
  // 0x40: f64
  if (data?._31 !== undefined) view.setFloat64(64, Number(data._31), true);
  // 0x48: f64
  if (data?._32 !== undefined) view.setFloat64(72, Number(data._32), true);
  // 0x50: f64
  if (data?._33 !== undefined) view.setFloat64(80, Number(data._33), true);
  // 0x58: f64
  if (data?._34 !== undefined) view.setFloat64(88, Number(data._34), true);
  // 0x60: f64
  if (data?._41 !== undefined) view.setFloat64(96, Number(data._41), true);
  // 0x68: f64
  if (data?._42 !== undefined) view.setFloat64(104, Number(data._42), true);
  // 0x70: f64
  if (data?._43 !== undefined) view.setFloat64(112, Number(data._43), true);
  // 0x78: f64
  if (data?._44 !== undefined) view.setFloat64(120, Number(data._44), true);
  return buf;
}

// Native Libraries

// Symbols

