/// Auto-generated by Deno Win32: Windows.Win32.UI.Shell.Apis

import * as util from "../../util.ts";

// Enums
export type SHGFI_FLAGS = number;
export type SHCNE_ID = number;
export type SHCNRF_SOURCE = number;
export type SHCNF_FLAGS = number;
export type QITIPF_FLAGS = number;
export type SHDID_ID = number;
export type SHGDFIL_FORMAT = number;
export type PRF_FLAGS = number;
export type PCS_RET = number;
export type MM_FLAGS = number;
export type SHOP_TYPE = number;
export type SHFMT_ID = number;
export type SHFMT_OPT = number;
export type SHFMT_RET = number;
export type VALIDATEUNC_OPTION = number;
export type SFVM_MESSAGE_ID = number;
export type SFVS_SELECT = number;
export type DFM_MESSAGE_ID = number;
export type DFM_CMD = number;
export type PID_IS = number;
export type PID_INTSITE = number;
export type PIDISF_FLAGS = number;
export type PIDISM_OPTIONS = number;
export type PIDISR_INFO = number;
export type SSF_MASK = number;
export type NOTIFY_ICON_MESSAGE = number;
export type NOTIFY_ICON_DATA_FLAGS = number;
export type OS = number;
export type SHELL_AUTOCOMPLETE_FLAGS = number;
export type HELP_INFO_TYPE = number;
export type NOTIFY_ICON_INFOTIP_FLAGS = number;
export type NOTIFY_ICON_STATE = number;
export type GPFIDL_FLAGS = number;
export type GETPROPERTYSTOREFLAGS = number;
export type PKA_FLAGS = number;
export type PSC_STATE = number;
export type PROPENUMTYPE = number;
export type PROPDESC_TYPE_FLAGS = number;
export type PROPDESC_VIEW_FLAGS = number;
export type PROPDESC_DISPLAYTYPE = number;
export type PROPDESC_GROUPING_RANGE = number;
export type PROPDESC_FORMAT_FLAGS = number;
export type PROPDESC_SORTDESCRIPTION = number;
export type PROPDESC_RELATIVEDESCRIPTION_TYPE = number;
export type PROPDESC_AGGREGATION_TYPE = number;
export type PROPDESC_CONDITION_TYPE = number;
export type PROPDESC_SEARCHINFO_FLAGS = number;
export type PROPDESC_COLUMNINDEX_TYPE = number;
export type PROPDESC_ENUMFILTER = number;
export type _PERSIST_SPROPSTORE_FLAGS = number;
export type PSTIME_FLAGS = number;
export type PROPVAR_COMPARE_UNIT = number;
export type PROPVAR_COMPARE_FLAGS = number;
export type PROPVAR_CHANGE_FLAGS = number;
export type DRAWPROGRESSFLAGS = number;
export type STRRET_TYPE = number;
export type PERCEIVED = number;
export type SHCOLSTATE = number;
export type DEVICE_SCALE_FACTOR = number;
export type ASSOCCLASS = number;
export type SHGDNF = number;
export type _SHCONTF = number;
export type STORAGE_PROVIDER_FILE_FLAGS = number;
export type MERGE_UPDATE_STATUS = number;
export type FOLDER_ENUM_MODE = number;
export type FOLDERFLAGS = number;
export type FOLDERVIEWMODE = number;
export type FOLDERLOGICALVIEWMODE = number;
export type _SVSIF = number;
export type _SVGIO = number;
export type SVUIA_STATUS = number;
export type SORTDIRECTION = number;
export type FVTEXTTYPE = number;
export type CM_MASK = number;
export type CM_STATE = number;
export type CM_ENUM_FLAGS = number;
export type CM_SET_WIDTH_VALUE = number;
export type SIGDN = number;
export type _SICHINTF = number;
export type DATAOBJ_GET_ITEM_FLAGS = number;
export type SIIGBF = number;
export type STGOP = number;
export type _TRANSFER_SOURCE_FLAGS = number;
export type _TRANSFER_ADVISE_STATE = number;
export type SIATTRIBFLAGS = number;
export type CATEGORYINFO_FLAGS = number;
export type CATSORT_FLAGS = number;
export type SLR_FLAGS = number;
export type SLGP_FLAGS = number;
export type _SPINITF = number;
export type _SPBEGINF = number;
export type SPACTION = number;
export type SPTEXT = number;
export type _EXPPS = number;
export type DESKBANDCID = number;
export type THUMBBUTTONFLAGS = number;
export type THUMBBUTTONMASK = number;
export type TBPFLAG = number;
export type STPFLAG = number;
export type EXPLORER_BROWSER_OPTIONS = number;
export type EXPLORER_BROWSER_FILL_FLAGS = number;
export type _OPPROGDLGF = number;
export type _PDMODE = number;
export type FILE_OPERATION_FLAGS2 = number;
export type NAMESPACEWALKFLAG = number;
export type BANDSITECID = number;
export type MENUBANDHANDLERCID = number;
export type MENUPOPUPSELECT = number;
export type MENUPOPUPPOPUPFLAGS = number;
export type FILE_USAGE_TYPE = number;
export type FDE_OVERWRITE_RESPONSE = number;
export type FDE_SHAREVIOLATION_RESPONSE = number;
export type FDAP = number;
export type FILEOPENDIALOGOPTIONS = number;
export type CDCONTROLSTATEF = number;
export type ASSOCIATIONLEVEL = number;
export type ASSOCIATIONTYPE = number;
export type _BROWSERFRAMEOPTIONS = number;
export type NWMF = number;
export type ATTACHMENT_PROMPT = number;
export type ATTACHMENT_ACTION = number;
export type SMINFOMASK = number;
export type SMINFOTYPE = number;
export type SMINFOFLAGS = number;
export type KF_CATEGORY = number;
export type _KF_DEFINITION_FLAGS = number;
export type _KF_REDIRECT_FLAGS = number;
export type _KF_REDIRECTION_CAPABILITIES = number;
export type FFFP_MODE = number;
export type SHARE_ROLE = number;
export type DEF_SHARE_ID = number;
export type _NMCII_FLAGS = number;
export type _NMCSAEI_FLAGS = number;
export type _NSTCSTYLE = number;
export type _NSTCROOTSTYLE = number;
export type _NSTCITEMSTATE = number;
export type NSTCGNI = number;
export type NSTCFOLDERCAPABILITIES = number;
export type _EXPLORERPANESTATE = number;
export type _EXPCMDSTATE = number;
export type _EXPCMDFLAGS = number;
export type CPVIEW = number;
export type KNOWNDESTCATEGORY = number;
export type APPDOCLISTTYPE = number;
export type DESKTOP_SLIDESHOW_OPTIONS = number;
export type DESKTOP_SLIDESHOW_STATE = number;
export type DESKTOP_SLIDESHOW_DIRECTION = number;
export type DESKTOP_WALLPAPER_POSITION = number;
export type HOMEGROUPSHARINGCHOICES = number;
export type LIBRARYFOLDERFILTER = number;
export type LIBRARYOPTIONFLAGS = number;
export type DEFAULTSAVEFOLDERTYPE = number;
export type LIBRARYSAVEFLAGS = number;
export type DEFAULT_FOLDER_MENU_RESTRICTIONS = number;
export type ACTIVATEOPTIONS = number;
export type LIBRARYMANAGEDIALOGOPTIONS = number;
export type AHTYPE = number;
export type ASSOC_FILTER = number;
export type MONITOR_APP_VISIBILITY = number;
export type PACKAGE_EXECUTION_STATE = number;
export type AHE_TYPE = number;
export type EC_HOST_UI_MODE = number;
export type APPLICATION_VIEW_STATE = number;
export type EDGE_GESTURE_KIND = number;
export type NATIVE_DISPLAY_ORIENTATION = number;
export type APPLICATION_VIEW_ORIENTATION = number;
export type ADJACENT_DISPLAY_EDGES = number;
export type APPLICATION_VIEW_MIN_WIDTH = number;
export type APPLICATION_VIEW_SIZE_PREFERENCE = number;
export type FLYOUT_PLACEMENT = number;
export type BANNER_NOTIFICATION_EVENT = number;
export type SORT_ORDER_TYPE = number;
export type FOLDERVIEWOPTIONS = number;
export type _SV3CVW3_FLAGS = number;
export type VPWATERMARKFLAGS = number;
export type VPCOLORFLAGS = number;
export type DSH_FLAGS = number;
export type CDBURNINGEXTENSIONRET = number;
export type _CDBE_ACTIONS = number;
export type NSTCSTYLE2 = number;
export type _NSTCEHITTEST = number;
export type _NSTCECLICKTYPE = number;
export type UNDOCK_REASON = number;
export type CommandStateChangeConstants = number;
export type SecureLockIconConstants = number;
export type NewProcessCauseConstants = number;
export type ShellWindowTypeConstants = number;
export type ShellWindowFindWindowOptions = number;
export type BrowserNavConstants = number;
export type RefreshConstants = number;
export type OfflineFolderStatus = number;
export type ShellFolderViewOptions = number;
export type ShellSpecialFolderConstants = number;
export type AUTOCOMPLETEOPTIONS = number;
export type ACENUMOPTION = number;
export type SHELL_LINK_DATA_FLAGS = number;
export type SHGFP_TYPE = number;
export type KNOWN_FOLDER_FLAG = number;
export type AUTOCOMPLETELISTOPTIONS = number;
export type FD_FLAGS = number;
export type DROPIMAGETYPE = number;
export type SHARD = number;
export type SCNRT_STATUS = number;
export type RESTRICTIONS = number;
export type OPEN_AS_INFO_FLAGS = number;
export type IESHORTCUTFLAGS = number;
export type VARENUM = number;
export type DISPLAY_DEVICE_TYPE = number;
export type SCALE_CHANGE_FLAGS = number;
export type SHELL_UI_COMPONENT = number;
export type QUERY_USER_NOTIFICATION_STATE = number;
export type SHSTOCKICONID = number;
export type SFBS_FLAGS = number;
export type URL_SCHEME = number;
export type URL_PART = number;
export type URLIS = number;
export type SHREGDEL_FLAGS = number;
export type SHREGENUM_FLAGS = number;
export type ASSOCSTR = number;
export type ASSOCKEY = number;
export type ASSOCDATA = number;
export type ASSOCENUM = number;
export type FILETYPEATTRIBUTEFLAGS = number;
export type SHGLOBALCOUNTER = number;
export type APPINFODATAFLAGS = number;
export type APPACTIONFLAGS = number;
export type PUBAPPINFOFLAGS = number;
export type CREDENTIAL_PROVIDER_USAGE_SCENARIO = number;
export type CREDENTIAL_PROVIDER_FIELD_TYPE = number;
export type CREDENTIAL_PROVIDER_FIELD_STATE = number;
export type CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE = number;
export type CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE = number;
export type CREDENTIAL_PROVIDER_STATUS_ICON = number;
export type CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS = number;
export type CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS = number;
export type SYNCMGR_HANDLER_CAPABILITIES = number;
export type SYNCMGR_HANDLER_POLICIES = number;
export type SYNCMGR_HANDLER_TYPE = number;
export type SYNCMGR_ITEM_CAPABILITIES = number;
export type SYNCMGR_ITEM_POLICIES = number;
export type SYNCMGR_PROGRESS_STATUS = number;
export type SYNCMGR_CANCEL_REQUEST = number;
export type SYNCMGR_EVENT_LEVEL = number;
export type SYNCMGR_EVENT_FLAGS = number;
export type SYNCMGR_CONTROL_FLAGS = number;
export type SYNCMGR_SYNC_CONTROL_FLAGS = number;
export type SYNCMGR_UPDATE_REASON = number;
export type SYNCMGR_CONFLICT_ITEM_TYPE = number;
export type SYNCMGR_RESOLUTION_ABILITIES = number;
export type SYNCMGR_RESOLUTION_FEEDBACK = number;
export type SYNCMGR_PRESENTER_NEXT_STEP = number;
export type SYNCMGR_PRESENTER_CHOICE = number;
export type WTS_FLAGS = number;
export type WTS_CACHEFLAGS = number;
export type WTS_CONTEXTFLAGS = number;
export type WTS_ALPHATYPE = number;
export type SYNCMGRSTATUS = number;
export type SYNCMGRLOGLEVEL = number;
export type SYNCMGRERRORFLAGS = number;
export type SYNCMGRITEMFLAGS = number;
export type SYNCMGRFLAG = number;
export type SYNCMGRHANDLERFLAGS = number;
export type SYNCMGRITEMSTATE = number;
export type SYNCMGRINVOKEFLAGS = number;
export type SYNCMGRREGISTERFLAGS = number;
export type ThumbnailStreamCacheOptions = number;
export type TLENUMF = number;
export type HLSR = number;
export type HLSHORTCUTF = number;
export type HLTRANSLATEF = number;
export type HLNF = number;
export type HLINKGETREF = number;
export type HLFNAMEF = number;
export type HLINKMISC = number;
export type HLINKSETF = number;
export type HLINKWHICHMK = number;
export type HLTB_INFO = number;
export type HLBWIF_FLAGS = number;
export type HLID_INFO = number;
export type HLQF_INFO = number;
export type BNSTATE = number;
export type SHELLBROWSERSHOWCONTROL = number;
export type SECURELOCKCODE = number;
export type IEPDNFLAGS = number;
export type TI_FLAGS = number;
export type PATHCCH_OPTIONS = number;
export type IURL_SETURL_FLAGS = number;
export type IURL_INVOKECOMMAND_FLAGS = number;
export type TRANSLATEURL_IN_FLAGS = number;
export type URLASSOCIATIONDIALOG_IN_FLAGS = number;
export type MIMEASSOCIATIONDIALOG_IN_FLAGS = number;
export type SYNC_TRANSFER_STATUS = number;
export type PLACEHOLDER_STATES = number;
export type PROPERTYUI_NAME_FLAGS = number;
export type PROPERTYUI_FLAGS = number;
export type PROPERTYUI_FORMAT_FLAGS = number;
export type PDOPSTATUS = number;
export type SYNC_ENGINE_STATE_FLAGS = number;
export type DROPEFFECT = number;
export type SHOW_WINDOW_CMD = number;
export type FILE_FLAGS_AND_ATTRIBUTES = number;
export type WIN32_ERROR = number;

// Constants
export const HLINK_E_FIRST = 288528363130454272n;
export const HLINK_S_FIRST = 288528360982970624n;
export const WM_CPL_LAUNCH = 2024;
export const WM_CPL_LAUNCHED = 2025;
export const CPL_DYNAMIC_RES = 0;
export const CPL_INIT = 1;
export const CPL_GETCOUNT = 2;
export const CPL_INQUIRE = 3;
export const CPL_SELECT = 4;
export const CPL_DBLCLK = 5;
export const CPL_STOP = 6;
export const CPL_EXIT = 7;
export const CPL_NEWINQUIRE = 8;
export const CPL_STARTWPARMSA = 9;
export const CPL_STARTWPARMSW = 10;
export const CPL_STARTWPARMS = 10;
export const CPL_SETUP = 200;
export const HLINK_S_DONTHIDE = 262400;
export const STR_MYDOCS_CLSID = `{450D8FBA-AD25-11D0-98A8-0800361B1103}`;
export const PID_FINDDATA = 0;
export const PID_NETRESOURCE = 1;
export const PID_DESCRIPTIONID = 2;
export const PID_WHICHFOLDER = 3;
export const PID_NETWORKLOCATION = 4;
export const PID_COMPUTERNAME = 5;
export const PID_DISPLACED_FROM = 2;
export const PID_DISPLACED_DATE = 3;
export const PID_SYNC_COPY_IN = 2;
export const PID_MISC_STATUS = 2;
export const PID_MISC_ACCESSCOUNT = 3;
export const PID_MISC_OWNER = 4;
export const PID_HTMLINFOTIPFILE = 5;
export const PID_MISC_PICS = 6;
export const PID_DISPLAY_PROPERTIES = 0;
export const PID_INTROTEXT = 1;
export const PIDSI_ARTIST = 2;
export const PIDSI_SONGTITLE = 3;
export const PIDSI_ALBUM = 4;
export const PIDSI_YEAR = 5;
export const PIDSI_COMMENT = 6;
export const PIDSI_TRACK = 7;
export const PIDSI_GENRE = 11;
export const PIDSI_LYRICS = 12;
export const PIDDRSI_PROTECTED = 2;
export const PIDDRSI_DESCRIPTION = 3;
export const PIDDRSI_PLAYCOUNT = 4;
export const PIDDRSI_PLAYSTARTS = 5;
export const PIDDRSI_PLAYEXPIRES = 6;
export const PIDVSI_STREAM_NAME = 2;
export const PIDVSI_FRAME_WIDTH = 3;
export const PIDVSI_FRAME_HEIGHT = 4;
export const PIDVSI_TIMELENGTH = 7;
export const PIDVSI_FRAME_COUNT = 5;
export const PIDVSI_FRAME_RATE = 6;
export const PIDVSI_DATA_RATE = 8;
export const PIDVSI_SAMPLE_SIZE = 9;
export const PIDVSI_COMPRESSION = 10;
export const PIDVSI_STREAM_NUMBER = 11;
export const PIDASI_FORMAT = 2;
export const PIDASI_TIMELENGTH = 3;
export const PIDASI_AVG_DATA_RATE = 4;
export const PIDASI_SAMPLE_RATE = 5;
export const PIDASI_SAMPLE_SIZE = 6;
export const PIDASI_CHANNEL_COUNT = 7;
export const PIDASI_STREAM_NUMBER = 8;
export const PIDASI_STREAM_NAME = 9;
export const PIDASI_COMPRESSION = 10;
export const PID_CONTROLPANEL_CATEGORY = 2;
export const PID_VOLUME_FREE = 2;
export const PID_VOLUME_CAPACITY = 3;
export const PID_VOLUME_FILESYSTEM = 4;
export const PID_SHARE_CSC_STATUS = 2;
export const PID_LINK_TARGET = 2;
export const PID_LINK_TARGET_TYPE = 3;
export const PID_QUERY_RANK = 2;
export const IDD_WIZEXTN_FIRST = 20480;
export const IDD_WIZEXTN_LAST = 20736;
export const SHPWHF_NORECOMPRESS = 1;
export const SHPWHF_NONETPLACECREATE = 2;
export const SHPWHF_NOFILESELECTOR = 4;
export const SHPWHF_USEMRU = 8;
export const SHPWHF_ANYLOCATION = 256;
export const SHPWHF_VALIDATEVIAWEBFOLDERS = 65536;
export const ACDD_VISIBLE = 1;
export const PROPSTR_EXTENSIONCOMPLETIONSTATE = `ExtensionCompletionState`;
export const NSTCDHPOS_ONTOP = `-1`;
export const FVSIF_RECT = 1;
export const FVSIF_PINNED = 2;
export const FVSIF_NEWFAILED = 134217728;
export const FVSIF_NEWFILE = 2147483648;
export const FVSIF_CANVIEWIT = 1073741824;
export const FCIDM_TOOLBAR = 40960;
export const FCIDM_STATUS = 40961;
export const IDC_OFFLINE_HAND = 103;
export const IDC_PANTOOL_HAND_OPEN = 104;
export const IDC_PANTOOL_HAND_CLOSED = 105;
export const PANE_NONE = 4294967295;
export const PANE_ZONE = 1;
export const PANE_OFFLINE = 2;
export const PANE_PRINTER = 3;
export const PANE_SSL = 4;
export const PANE_NAVIGATION = 5;
export const PANE_PROGRESS = 6;
export const PANE_PRIVACY = 7;
export const DWFRF_NORMAL = 0;
export const DWFRF_DELETECONFIGDATA = 1;
export const DWFAF_HIDDEN = 1;
export const DWFAF_GROUP1 = 2;
export const DWFAF_GROUP2 = 4;
export const DWFAF_AUTOHIDE = 16;
export const SHIMSTCAPFLAG_LOCKABLE = 1;
export const SHIMSTCAPFLAG_PURGEABLE = 2;
export const ISFB_MASK_STATE = 1;
export const ISFB_MASK_BKCOLOR = 2;
export const ISFB_MASK_VIEWMODE = 4;
export const ISFB_MASK_SHELLFOLDER = 8;
export const ISFB_MASK_IDLIST = 16;
export const ISFB_MASK_COLORS = 32;
export const ISFB_STATE_DEFAULT = 0;
export const ISFB_STATE_DEBOSSED = 1;
export const ISFB_STATE_ALLOWRENAME = 2;
export const ISFB_STATE_NOSHOWTEXT = 4;
export const ISFB_STATE_CHANNELBAR = 16;
export const ISFB_STATE_QLINKSMODE = 32;
export const ISFB_STATE_FULLOPEN = 64;
export const ISFB_STATE_NONAMESORT = 128;
export const ISFB_STATE_BTNMINSIZE = 256;
export const ISFBVIEWMODE_SMALLICONS = 1;
export const ISFBVIEWMODE_LARGEICONS = 2;
export const ISFBVIEWMODE_LOGOS = 3;
export const DBC_GS_IDEAL = 0;
export const DBC_GS_SIZEDOWN = 1;
export const DBC_HIDE = 0;
export const DBC_SHOW = 1;
export const DBC_SHOWOBSCURE = 2;
export const SSM_CLEAR = 0;
export const SSM_SET = 1;
export const SSM_REFRESH = 2;
export const SSM_UPDATE = 4;
export const SCHEME_DISPLAY = 1;
export const SCHEME_EDIT = 2;
export const SCHEME_LOCAL = 4;
export const SCHEME_GLOBAL = 8;
export const SCHEME_REFRESH = 16;
export const SCHEME_UPDATE = 32;
export const SCHEME_DONOTUSE = 64;
export const SCHEME_CREATE = 128;
export const GADOF_DIRTY = 1;
export const SHCDF_UPDATEITEM = 1;
export const PPCF_ADDQUOTES = 1;
export const PPCF_ADDARGUMENTS = 3;
export const PPCF_NODIRECTORIES = 16;
export const PPCF_FORCEQUALIFY = 64;
export const PPCF_LONGESTPOSSIBLE = 128;
export const OPENPROPS_NONE = 0;
export const OPENPROPS_INHIBITPIF = 32768;
export const GETPROPS_NONE = 0;
export const SETPROPS_NONE = 0;
export const CLOSEPROPS_NONE = 0;
export const CLOSEPROPS_DISCARD = 1;
export const TBIF_APPEND = 0;
export const TBIF_PREPEND = 1;
export const TBIF_REPLACE = 2;
export const TBIF_DEFAULT = 0;
export const TBIF_INTERNETBAR = 65536;
export const TBIF_STANDARDTOOLBAR = 131072;
export const TBIF_NOTOOLBAR = 196608;
export const SFVM_REARRANGE = 1;
export const SFVM_ADDOBJECT = 3;
export const SFVM_REMOVEOBJECT = 6;
export const SFVM_UPDATEOBJECT = 7;
export const SFVM_GETSELECTEDOBJECTS = 9;
export const SFVM_SETITEMPOS = 14;
export const SFVM_SETCLIPBOARD = 16;
export const SFVM_SETPOINTS = 23;
export const GIL_OPENICON = 1;
export const GIL_FORSHELL = 2;
export const GIL_ASYNC = 32;
export const GIL_DEFAULTICON = 64;
export const GIL_FORSHORTCUT = 128;
export const GIL_CHECKSHIELD = 512;
export const GIL_SIMULATEDOC = 1;
export const GIL_PERINSTANCE = 2;
export const GIL_PERCLASS = 4;
export const GIL_NOTFILENAME = 8;
export const GIL_DONTCACHE = 16;
export const GIL_SHIELD = 512;
export const GIL_FORCENOSHIELD = 1024;
export const SIOM_OVERLAYINDEX = 1;
export const SIOM_ICONINDEX = 2;
export const SIOM_RESERVED_SHARED = 0;
export const SIOM_RESERVED_LINK = 1;
export const SIOM_RESERVED_SLOWFILE = 2;
export const SIOM_RESERVED_DEFAULT = 3;
export const OI_DEFAULT = 0;
export const OI_ASYNC = 4294962926;
export const IDO_SHGIOI_SHARE = 268435455;
export const IDO_SHGIOI_LINK = 268435454;
export const IDO_SHGIOI_SLOWFILE = 4294967293;
export const IDO_SHGIOI_DEFAULT = 4294967292;
export const NT_CONSOLE_PROPS_SIG = 2684354562;
export const NT_FE_CONSOLE_PROPS_SIG = 2684354564;
export const EXP_DARWIN_ID_SIG = 2684354566;
export const EXP_SPECIAL_FOLDER_SIG = 2684354565;
export const EXP_SZ_LINK_SIG = 2684354561;
export const EXP_SZ_ICON_SIG = 2684354567;
export const EXP_PROPERTYSTORAGE_SIG = 2684354569;
export const FCIDM_SHVIEWFIRST = 0;
export const FCIDM_SHVIEWLAST = 32767;
export const FCIDM_BROWSERFIRST = 40960;
export const FCIDM_BROWSERLAST = 48896;
export const FCIDM_GLOBALFIRST = 32768;
export const FCIDM_GLOBALLAST = 40959;
export const FCIDM_MENU_FILE = 32768;
export const FCIDM_MENU_EDIT = 32832;
export const FCIDM_MENU_VIEW = 32896;
export const FCIDM_MENU_VIEW_SEP_OPTIONS = 32897;
export const FCIDM_MENU_TOOLS = 32960;
export const FCIDM_MENU_TOOLS_SEP_GOTO = 32961;
export const FCIDM_MENU_HELP = 33024;
export const FCIDM_MENU_FIND = 33088;
export const FCIDM_MENU_EXPLORE = 33104;
export const FCIDM_MENU_FAVORITES = 33136;
export const OFASI_EDIT = 1;
export const OFASI_OPENDESKTOP = 2;
export const CSIDL_DESKTOP = 0;
export const CSIDL_INTERNET = 1;
export const CSIDL_PROGRAMS = 2;
export const CSIDL_CONTROLS = 3;
export const CSIDL_PRINTERS = 4;
export const CSIDL_PERSONAL = 5;
export const CSIDL_FAVORITES = 6;
export const CSIDL_STARTUP = 7;
export const CSIDL_RECENT = 8;
export const CSIDL_SENDTO = 9;
export const CSIDL_BITBUCKET = 10;
export const CSIDL_STARTMENU = 11;
export const CSIDL_MYDOCUMENTS = 5;
export const CSIDL_MYMUSIC = 13;
export const CSIDL_MYVIDEO = 14;
export const CSIDL_DESKTOPDIRECTORY = 16;
export const CSIDL_DRIVES = 17;
export const CSIDL_NETWORK = 18;
export const CSIDL_NETHOOD = 19;
export const CSIDL_FONTS = 20;
export const CSIDL_TEMPLATES = 21;
export const CSIDL_COMMON_STARTMENU = 22;
export const CSIDL_COMMON_PROGRAMS = 23;
export const CSIDL_COMMON_STARTUP = 24;
export const CSIDL_COMMON_DESKTOPDIRECTORY = 25;
export const CSIDL_APPDATA = 26;
export const CSIDL_PRINTHOOD = 27;
export const CSIDL_LOCAL_APPDATA = 28;
export const CSIDL_ALTSTARTUP = 29;
export const CSIDL_COMMON_ALTSTARTUP = 30;
export const CSIDL_COMMON_FAVORITES = 31;
export const CSIDL_INTERNET_CACHE = 32;
export const CSIDL_COOKIES = 33;
export const CSIDL_HISTORY = 34;
export const CSIDL_COMMON_APPDATA = 35;
export const CSIDL_WINDOWS = 36;
export const CSIDL_SYSTEM = 37;
export const CSIDL_PROGRAM_FILES = 38;
export const CSIDL_MYPICTURES = 39;
export const CSIDL_PROFILE = 40;
export const CSIDL_SYSTEMX86 = 41;
export const CSIDL_PROGRAM_FILESX86 = 42;
export const CSIDL_PROGRAM_FILES_COMMON = 43;
export const CSIDL_PROGRAM_FILES_COMMONX86 = 44;
export const CSIDL_COMMON_TEMPLATES = 45;
export const CSIDL_COMMON_DOCUMENTS = 46;
export const CSIDL_COMMON_ADMINTOOLS = 47;
export const CSIDL_ADMINTOOLS = 48;
export const CSIDL_CONNECTIONS = 49;
export const CSIDL_COMMON_MUSIC = 53;
export const CSIDL_COMMON_PICTURES = 54;
export const CSIDL_COMMON_VIDEO = 55;
export const CSIDL_RESOURCES = 56;
export const CSIDL_RESOURCES_LOCALIZED = 57;
export const CSIDL_COMMON_OEM_LINKS = 58;
export const CSIDL_CDBURN_AREA = 59;
export const CSIDL_COMPUTERSNEARME = 61;
export const CSIDL_FLAG_CREATE = 32768;
export const CSIDL_FLAG_DONT_VERIFY = 16384;
export const CSIDL_FLAG_DONT_UNEXPAND = 8192;
export const CSIDL_FLAG_NO_ALIAS = 4096;
export const CSIDL_FLAG_PER_USER_INIT = 2048;
export const CSIDL_FLAG_MASK = 65280;
export const FCS_READ = 1;
export const FCS_FORCEWRITE = 2;
export const FCS_FLAG_DRAGDROP = 2;
export const FCSM_VIEWID = 1;
export const FCSM_WEBVIEWTEMPLATE = 2;
export const FCSM_INFOTIP = 4;
export const FCSM_CLSID = 8;
export const FCSM_ICONFILE = 16;
export const FCSM_LOGO = 32;
export const FCSM_FLAGS = 64;
export const BIF_RETURNONLYFSDIRS = 1;
export const BIF_DONTGOBELOWDOMAIN = 2;
export const BIF_STATUSTEXT = 4;
export const BIF_RETURNFSANCESTORS = 8;
export const BIF_EDITBOX = 16;
export const BIF_VALIDATE = 32;
export const BIF_NEWDIALOGSTYLE = 64;
export const BIF_BROWSEINCLUDEURLS = 128;
export const BIF_UAHINT = 256;
export const BIF_NONEWFOLDERBUTTON = 512;
export const BIF_NOTRANSLATETARGETS = 1024;
export const BIF_BROWSEFORCOMPUTER = 4096;
export const BIF_BROWSEFORPRINTER = 8192;
export const BIF_BROWSEINCLUDEFILES = 16384;
export const BIF_SHAREABLE = 32768;
export const BIF_BROWSEFILEJUNCTIONS = 65536;
export const BFFM_INITIALIZED = 1;
export const BFFM_SELCHANGED = 2;
export const BFFM_VALIDATEFAILEDA = 3;
export const BFFM_VALIDATEFAILEDW = 4;
export const BFFM_IUNKNOWN = 5;
export const BFFM_SETSTATUSTEXTA = 1124;
export const BFFM_ENABLEOK = 1125;
export const BFFM_SETSELECTIONA = 1126;
export const BFFM_SETSELECTIONW = 1127;
export const BFFM_SETSTATUSTEXTW = 1128;
export const BFFM_SETOKTEXT = 1129;
export const BFFM_SETEXPANDED = 1130;
export const BFFM_SETSTATUSTEXT = 1128;
export const BFFM_SETSELECTION = 1127;
export const BFFM_VALIDATEFAILED = 4;
export const CMDID_INTSHORTCUTCREATE = 1;
export const STR_PARSE_WITH_PROPERTIES = `ParseWithProperties`;
export const STR_PARSE_PARTIAL_IDLIST = `ParseOriginalItem`;
export const PROGDLG_NORMAL = 0;
export const PROGDLG_MODAL = 1;
export const PROGDLG_AUTOTIME = 2;
export const PROGDLG_NOTIME = 4;
export const PROGDLG_NOMINIMIZE = 8;
export const PROGDLG_NOPROGRESSBAR = 16;
export const PROGDLG_MARQUEEPROGRESS = 32;
export const PROGDLG_NOCANCEL = 64;
export const PDTIMER_RESET = 1;
export const PDTIMER_PAUSE = 2;
export const PDTIMER_RESUME = 3;
export const COMPONENT_TOP = 1073741823;
export const COMP_TYPE_HTMLDOC = 0;
export const COMP_TYPE_PICTURE = 1;
export const COMP_TYPE_WEBSITE = 2;
export const COMP_TYPE_CONTROL = 3;
export const COMP_TYPE_CFHTML = 4;
export const COMP_TYPE_MAX = 4;
export const IS_NORMAL = 1;
export const IS_FULLSCREEN = 2;
export const IS_SPLIT = 4;
export const AD_APPLY_SAVE = 1;
export const AD_APPLY_HTMLGEN = 2;
export const AD_APPLY_REFRESH = 4;
export const AD_APPLY_FORCE = 8;
export const AD_APPLY_BUFFERED_REFRESH = 16;
export const AD_APPLY_DYNAMICREFRESH = 32;
export const AD_GETWP_BMP = 0;
export const AD_GETWP_IMAGE = 1;
export const AD_GETWP_LAST_APPLIED = 2;
export const WPSTYLE_CENTER = 0;
export const WPSTYLE_TILE = 1;
export const WPSTYLE_STRETCH = 2;
export const WPSTYLE_KEEPASPECT = 3;
export const WPSTYLE_CROPTOFIT = 4;
export const WPSTYLE_SPAN = 5;
export const WPSTYLE_MAX = 6;
export const COMP_ELEM_TYPE = 1;
export const COMP_ELEM_CHECKED = 2;
export const COMP_ELEM_DIRTY = 4;
export const COMP_ELEM_NOSCROLL = 8;
export const COMP_ELEM_POS_LEFT = 16;
export const COMP_ELEM_POS_TOP = 32;
export const COMP_ELEM_SIZE_WIDTH = 64;
export const COMP_ELEM_SIZE_HEIGHT = 128;
export const COMP_ELEM_POS_ZINDEX = 256;
export const COMP_ELEM_SOURCE = 512;
export const COMP_ELEM_FRIENDLYNAME = 1024;
export const COMP_ELEM_SUBSCRIBEDURL = 2048;
export const COMP_ELEM_ORIGINAL_CSI = 4096;
export const COMP_ELEM_RESTORED_CSI = 8192;
export const COMP_ELEM_CURITEMSTATE = 16384;
export const ADDURL_SILENT = 1;
export const COMPONENT_DEFAULT_LEFT = 65535;
export const COMPONENT_DEFAULT_TOP = 65535;
export const MAX_COLUMN_NAME_LEN = 80;
export const MAX_COLUMN_DESC_LEN = 128;
export const CFSTR_SHELLIDLIST = `Shell IDList Array`;
export const CFSTR_SHELLIDLISTOFFSET = `Shell Object Offsets`;
export const CFSTR_NETRESOURCES = `Net Resource`;
export const CFSTR_FILEDESCRIPTORA = `FileGroupDescriptor`;
export const CFSTR_FILEDESCRIPTORW = `FileGroupDescriptorW`;
export const CFSTR_FILECONTENTS = `FileContents`;
export const CFSTR_FILENAMEA = `FileName`;
export const CFSTR_FILENAMEW = `FileNameW`;
export const CFSTR_PRINTERGROUP = `PrinterFriendlyName`;
export const CFSTR_FILENAMEMAPA = `FileNameMap`;
export const CFSTR_FILENAMEMAPW = `FileNameMapW`;
export const CFSTR_SHELLURL = `UniformResourceLocator`;
export const CFSTR_INETURLA = `UniformResourceLocator`;
export const CFSTR_INETURLW = `UniformResourceLocatorW`;
export const CFSTR_PREFERREDDROPEFFECT = `Preferred DropEffect`;
export const CFSTR_PERFORMEDDROPEFFECT = `Performed DropEffect`;
export const CFSTR_PASTESUCCEEDED = `Paste Succeeded`;
export const CFSTR_INDRAGLOOP = `InShellDragLoop`;
export const CFSTR_MOUNTEDVOLUME = `MountedVolume`;
export const CFSTR_PERSISTEDDATAOBJECT = `PersistedDataObject`;
export const CFSTR_TARGETCLSID = `TargetCLSID`;
export const CFSTR_LOGICALPERFORMEDDROPEFFECT = `Logical Performed DropEffect`;
export const CFSTR_AUTOPLAY_SHELLIDLISTS = `Autoplay Enumerated IDList Array`;
export const CFSTR_UNTRUSTEDDRAGDROP = `UntrustedDragDrop`;
export const CFSTR_FILE_ATTRIBUTES_ARRAY = `File Attributes Array`;
export const CFSTR_INVOKECOMMAND_DROPPARAM = `InvokeCommand DropParam`;
export const CFSTR_SHELLDROPHANDLER = `DropHandlerCLSID`;
export const CFSTR_DROPDESCRIPTION = `DropDescription`;
export const CFSTR_ZONEIDENTIFIER = `ZoneIdentifier`;
export const CFSTR_FILEDESCRIPTOR = `FileGroupDescriptorW`;
export const CFSTR_FILENAME = `FileNameW`;
export const CFSTR_FILENAMEMAP = `FileNameMapW`;
export const CFSTR_INETURL = `UniformResourceLocatorW`;
export const DVASPECT_SHORTNAME = 2;
export const DVASPECT_COPY = 3;
export const DVASPECT_LINK = 4;
export const SHCNEE_ORDERCHANGED = 2;
export const SHCNEE_MSI_CHANGE = 4;
export const SHCNEE_MSI_UNINSTALL = 5;
export const NUM_POINTS = 3;
export const CABINETSTATE_VERSION = 2;
export const PIFNAMESIZE = 30;
export const PIFSTARTLOCSIZE = 63;
export const PIFDEFPATHSIZE = 64;
export const PIFPARAMSSIZE = 64;
export const PIFSHPROGSIZE = 64;
export const PIFSHDATASIZE = 64;
export const PIFDEFFILESIZE = 80;
export const PIFMAXFILEPATH = 260;
export const QCMINFO_PLACE_BEFORE = 0;
export const QCMINFO_PLACE_AFTER = 1;
export const SFVSOC_INVALIDATE_ALL = 1;
export const SFVSOC_NOSCROLL = 2;
export const SHELLSTATEVERSION_IE4 = 9;
export const SHELLSTATEVERSION_WIN2K = 10;
export const SHPPFW_NONE = 0;
export const SHPPFW_DIRCREATE = 1;
export const SHPPFW_ASKDIRCREATE = 2;
export const SHPPFW_IGNOREFILENAME = 4;
export const SHPPFW_NOWRITECHECK = 8;
export const SHPPFW_MEDIACHECKONLY = 16;
export const CMF_NORMAL = 0;
export const CMF_DEFAULTONLY = 1;
export const CMF_VERBSONLY = 2;
export const CMF_EXPLORE = 4;
export const CMF_NOVERBS = 8;
export const CMF_CANRENAME = 16;
export const CMF_NODEFAULT = 32;
export const CMF_INCLUDESTATIC = 64;
export const CMF_ITEMMENU = 128;
export const CMF_EXTENDEDVERBS = 256;
export const CMF_DISABLEDVERBS = 512;
export const CMF_ASYNCVERBSTATE = 1024;
export const CMF_OPTIMIZEFORINVOKE = 2048;
export const CMF_SYNCCASCADEMENU = 4096;
export const CMF_DONOTPICKDEFAULT = 8192;
export const CMF_RESERVED = 4294901760;
export const GCS_VERBA = 0;
export const GCS_HELPTEXTA = 1;
export const GCS_VALIDATEA = 2;
export const GCS_VERBW = 4;
export const GCS_HELPTEXTW = 5;
export const GCS_VALIDATEW = 6;
export const GCS_VERBICONW = 20;
export const GCS_UNICODE = 4;
export const GCS_VERB = 4;
export const GCS_HELPTEXT = 5;
export const GCS_VALIDATE = 6;
export const CMDSTR_NEWFOLDERA = `NewFolder`;
export const CMDSTR_VIEWLISTA = `ViewList`;
export const CMDSTR_VIEWDETAILSA = `ViewDetails`;
export const CMDSTR_NEWFOLDERW = `NewFolder`;
export const CMDSTR_VIEWLISTW = `ViewList`;
export const CMDSTR_VIEWDETAILSW = `ViewDetails`;
export const CMDSTR_NEWFOLDER = `NewFolder`;
export const CMDSTR_VIEWLIST = `ViewList`;
export const CMDSTR_VIEWDETAILS = `ViewDetails`;
export const CMIC_MASK_SHIFT_DOWN = 268435456;
export const CMIC_MASK_CONTROL_DOWN = 1073741824;
export const CMIC_MASK_PTINVOKE = 536870912;
export const IRTIR_TASK_NOT_RUNNING = 0;
export const IRTIR_TASK_RUNNING = 1;
export const IRTIR_TASK_SUSPENDED = 2;
export const IRTIR_TASK_PENDING = 3;
export const IRTIR_TASK_FINISHED = 4;
export const ITSAT_DEFAULT_PRIORITY = 268435456;
export const ITSAT_MAX_PRIORITY = 2147483647;
export const ITSAT_MIN_PRIORITY = 0;
export const ITSSFLAG_COMPLETE_ON_DESTROY = 0;
export const ITSSFLAG_KILL_ON_DESTROY = 1;
export const ITSSFLAG_FLAGS_MASK = 3;
export const CSIDL_FLAG_PFTI_TRACKTARGET = 16384;
export const SHCIDS_ALLFIELDS = `-2147483648`;
export const SHCIDS_CANONICALONLY = 268435456;
export const SHCIDS_BITMASK = `-65536`;
export const SHCIDS_COLUMNMASK = 65535;
export const CONFLICT_RESOLUTION_CLSID_KEY = `ConflictResolutionCLSID`;
export const STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE = `Force Folder Shortcut Resolve`;
export const STR_AVOID_DRIVE_RESTRICTION_POLICY = `Avoid Drive Restriction Policy`;
export const STR_SKIP_BINDING_CLSID = `Skip Binding CLSID`;
export const STR_PARSE_PREFER_FOLDER_BROWSING = `Parse Prefer Folder Browsing`;
export const STR_DONT_PARSE_RELATIVE = `Don't Parse Relative`;
export const STR_PARSE_TRANSLATE_ALIASES = `Parse Translate Aliases`;
export const STR_PARSE_SKIP_NET_CACHE = `Skip Net Resource Cache`;
export const STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS = `Parse Shell Protocol To File Objects`;
export const STR_TRACK_CLSID = `Track the CLSID`;
export const STR_INTERNAL_NAVIGATE = `Internal Navigation`;
export const STR_PARSE_PROPERTYSTORE = `DelegateNamedProperties`;
export const STR_NO_VALIDATE_FILENAME_CHARS = `NoValidateFilenameChars`;
export const STR_BIND_DELEGATE_CREATE_OBJECT = `Delegate Object Creation`;
export const STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS = `Allow binding to Internet shell folder handlers and negate STR_PARSE_PREFER_WEB_BROWSING`;
export const STR_PARSE_PREFER_WEB_BROWSING = `Do not bind to Internet shell folder handlers`;
export const STR_PARSE_SHOW_NET_DIAGNOSTICS_UI = `Show network diagnostics UI`;
export const STR_PARSE_DONT_REQUIRE_VALIDATED_URLS = `Do not require validated URLs`;
export const STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE = `Validate URL`;
export const BIND_INTERRUPTABLE = 4294967295;
export const STR_BIND_FOLDERS_READ_ONLY = `Folders As Read Only`;
export const STR_BIND_FOLDER_ENUM_MODE = `Folder Enum Mode`;
export const STR_PARSE_WITH_EXPLICIT_PROGID = `ExplicitProgid`;
export const STR_PARSE_WITH_EXPLICIT_ASSOCAPP = `ExplicitAssociationApp`;
export const STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL = `ExplicitAssociationSuccessful`;
export const STR_PARSE_AND_CREATE_ITEM = `ParseAndCreateItem`;
export const STR_PROPERTYBAG_PARAM = `SHBindCtxPropertyBag`;
export const STR_ENUM_ITEMS_FLAGS = `SHCONTF`;
export const STR_STORAGEITEM_CREATION_FLAGS = `SHGETSTORAGEITEM`;
export const STR_ITEM_CACHE_CONTEXT = `ItemCacheContext`;
export const CDBOSC_SETFOCUS = 0;
export const CDBOSC_KILLFOCUS = 1;
export const CDBOSC_SELCHANGE = 2;
export const CDBOSC_RENAME = 3;
export const CDBOSC_STATECHANGE = 4;
export const CDB2N_CONTEXTMENU_DONE = 1;
export const CDB2N_CONTEXTMENU_START = 2;
export const CDB2GVF_SHOWALLFILES = 1;
export const CDB2GVF_ISFILESAVE = 2;
export const CDB2GVF_ALLOWPREVIEWPANE = 4;
export const CDB2GVF_NOSELECTVERB = 8;
export const CDB2GVF_NOINCLUDEITEM = 16;
export const CDB2GVF_ISFOLDERPICKER = 32;
export const CDB2GVF_ADDSHIELD = 64;
export const SBSP_DEFBROWSER = 0;
export const SBSP_SAMEBROWSER = 1;
export const SBSP_NEWBROWSER = 2;
export const SBSP_DEFMODE = 0;
export const SBSP_OPENMODE = 16;
export const SBSP_EXPLOREMODE = 32;
export const SBSP_HELPMODE = 64;
export const SBSP_NOTRANSFERHIST = 128;
export const SBSP_ABSOLUTE = 0;
export const SBSP_RELATIVE = 4096;
export const SBSP_PARENT = 8192;
export const SBSP_NAVIGATEBACK = 16384;
export const SBSP_NAVIGATEFORWARD = 32768;
export const SBSP_ALLOW_AUTONAVIGATE = 65536;
export const SBSP_KEEPSAMETEMPLATE = 131072;
export const SBSP_KEEPWORDWHEELTEXT = 262144;
export const SBSP_ACTIVATE_NOFOCUS = 524288;
export const SBSP_CREATENOHISTORY = 1048576;
export const SBSP_PLAYNOSOUND = 2097152;
export const SBSP_CALLERUNTRUSTED = 8388608;
export const SBSP_TRUSTFIRSTDOWNLOAD = 16777216;
export const SBSP_UNTRUSTEDFORDOWNLOAD = 33554432;
export const SBSP_NOAUTOSELECT = 67108864;
export const SBSP_WRITENOHISTORY = 134217728;
export const SBSP_TRUSTEDFORACTIVEX = 268435456;
export const SBSP_FEEDNAVIGATION = 536870912;
export const SBSP_REDIRECT = 1073741824;
export const SBSP_INITIATEDBYHLINKFRAME = 2147483648;
export const FCW_STATUS = 1;
export const FCW_TOOLBAR = 2;
export const FCW_TREE = 3;
export const FCW_INTERNETBAR = 6;
export const FCW_PROGRESS = 8;
export const FCT_MERGE = 1;
export const FCT_CONFIGABLE = 2;
export const FCT_ADDTOEND = 4;
export const STR_DONT_RESOLVE_LINK = `Don't Resolve Link`;
export const STR_GET_ASYNC_HANDLER = `GetAsyncHandler`;
export const STR_GPS_HANDLERPROPERTIESONLY = `GPS_HANDLERPROPERTIESONLY`;
export const STR_GPS_FASTPROPERTIESONLY = `GPS_FASTPROPERTIESONLY`;
export const STR_GPS_OPENSLOWITEM = `GPS_OPENSLOWITEM`;
export const STR_GPS_DELAYCREATION = `GPS_DELAYCREATION`;
export const STR_GPS_BESTEFFORT = `GPS_BESTEFFORT`;
export const STR_GPS_NO_OPLOCK = `GPS_NO_OPLOCK`;
export const DI_GETDRAGIMAGE = `ShellGetDragImage`;
export const ARCONTENT_AUTORUNINF = 2;
export const ARCONTENT_AUDIOCD = 4;
export const ARCONTENT_DVDMOVIE = 8;
export const ARCONTENT_BLANKCD = 16;
export const ARCONTENT_BLANKDVD = 32;
export const ARCONTENT_UNKNOWNCONTENT = 64;
export const ARCONTENT_AUTOPLAYPIX = 128;
export const ARCONTENT_AUTOPLAYMUSIC = 256;
export const ARCONTENT_AUTOPLAYVIDEO = 512;
export const ARCONTENT_VCD = 1024;
export const ARCONTENT_SVCD = 2048;
export const ARCONTENT_DVDAUDIO = 4096;
export const ARCONTENT_BLANKBD = 8192;
export const ARCONTENT_BLURAY = 16384;
export const ARCONTENT_CAMERASTORAGE = 32768;
export const ARCONTENT_CUSTOMEVENT = 65536;
export const ARCONTENT_NONE = 0;
export const ARCONTENT_MASK = 131070;
export const ARCONTENT_PHASE_UNKNOWN = 0;
export const ARCONTENT_PHASE_PRESNIFF = 268435456;
export const ARCONTENT_PHASE_SNIFFING = 536870912;
export const ARCONTENT_PHASE_FINAL = 1073741824;
export const ARCONTENT_PHASE_MASK = 1879048192;
export const IEI_PRIORITY_MAX = 2147483647;
export const IEI_PRIORITY_MIN = 0;
export const IEIT_PRIORITY_NORMAL = 268435456;
export const IEIFLAG_ASYNC = 1;
export const IEIFLAG_CACHE = 2;
export const IEIFLAG_ASPECT = 4;
export const IEIFLAG_OFFLINE = 8;
export const IEIFLAG_GLEAM = 16;
export const IEIFLAG_SCREEN = 32;
export const IEIFLAG_ORIGSIZE = 64;
export const IEIFLAG_NOSTAMP = 128;
export const IEIFLAG_NOBORDER = 256;
export const IEIFLAG_QUALITY = 512;
export const IEIFLAG_REFRESH = 1024;
export const DBIM_MINSIZE = 1;
export const DBIM_MAXSIZE = 2;
export const DBIM_INTEGRAL = 4;
export const DBIM_ACTUAL = 8;
export const DBIM_TITLE = 16;
export const DBIM_MODEFLAGS = 32;
export const DBIM_BKCOLOR = 64;
export const DBIMF_NORMAL = 0;
export const DBIMF_FIXED = 1;
export const DBIMF_FIXEDBMP = 4;
export const DBIMF_VARIABLEHEIGHT = 8;
export const DBIMF_UNDELETEABLE = 16;
export const DBIMF_DEBOSSED = 32;
export const DBIMF_BKCOLOR = 64;
export const DBIMF_USECHEVRON = 128;
export const DBIMF_BREAK = 256;
export const DBIMF_ADDTOFRONT = 512;
export const DBIMF_TOPALIGN = 1024;
export const DBIMF_NOGRIPPER = 2048;
export const DBIMF_ALWAYSGRIPPER = 4096;
export const DBIMF_NOMARGINS = 8192;
export const DBIF_VIEWMODE_NORMAL = 0;
export const DBIF_VIEWMODE_VERTICAL = 1;
export const DBIF_VIEWMODE_FLOATING = 2;
export const DBIF_VIEWMODE_TRANSPARENT = 4;
export const DBPC_SELECTFIRST = 4294967295;
export const THBN_CLICKED = 6144;
export const FOFX_NOSKIPJUNCTIONS = 65536;
export const FOFX_PREFERHARDLINK = 131072;
export const FOFX_SHOWELEVATIONPROMPT = 262144;
export const FOFX_RECYCLEONDELETE = 524288;
export const FOFX_EARLYFAILURE = 1048576;
export const FOFX_PRESERVEFILEEXTENSIONS = 2097152;
export const FOFX_KEEPNEWERFILE = 4194304;
export const FOFX_NOCOPYHOOKS = 8388608;
export const FOFX_NOMINIMIZEBOX = 16777216;
export const FOFX_MOVEACLSACROSSVOLUMES = 33554432;
export const FOFX_DONTDISPLAYSOURCEPATH = 67108864;
export const FOFX_DONTDISPLAYDESTPATH = 134217728;
export const FOFX_REQUIREELEVATION = 268435456;
export const FOFX_ADDUNDORECORD = 536870912;
export const FOFX_COPYASDOWNLOAD = 1073741824;
export const FOFX_DONTDISPLAYLOCATIONS = 2147483648;
export const BSIM_STATE = 1;
export const BSIM_STYLE = 2;
export const BSSF_VISIBLE = 1;
export const BSSF_NOTITLE = 2;
export const BSSF_UNDELETEABLE = 4096;
export const BSIS_AUTOGRIPPER = 0;
export const BSIS_NOGRIPPER = 1;
export const BSIS_ALWAYSGRIPPER = 2;
export const BSIS_LEFTALIGN = 4;
export const BSIS_SINGLECLICK = 8;
export const BSIS_NOCONTEXTMENU = 16;
export const BSIS_NODROPTARGET = 32;
export const BSIS_NOCAPTION = 64;
export const BSIS_PREFERNOLINEBREAK = 128;
export const BSIS_LOCKED = 256;
export const BSIS_PRESERVEORDERDURINGLAYOUT = 512;
export const BSIS_FIXEDORDER = 1024;
export const OF_CAP_CANSWITCHTO = 1;
export const OF_CAP_CANCLOSE = 2;
export const SMDM_SHELLFOLDER = 1;
export const SMDM_HMENU = 2;
export const SMDM_TOOLBAR = 4;
export const SMC_INITMENU = 1;
export const SMC_CREATE = 2;
export const SMC_EXITMENU = 3;
export const SMC_GETINFO = 5;
export const SMC_GETSFINFO = 6;
export const SMC_GETOBJECT = 7;
export const SMC_GETSFOBJECT = 8;
export const SMC_SFEXEC = 9;
export const SMC_SFSELECTITEM = 10;
export const SMC_REFRESH = 16;
export const SMC_DEMOTE = 17;
export const SMC_PROMOTE = 18;
export const SMC_DEFAULTICON = 22;
export const SMC_NEWITEM = 23;
export const SMC_CHEVRONEXPAND = 25;
export const SMC_DISPLAYCHEVRONTIP = 42;
export const SMC_SETSFOBJECT = 45;
export const SMC_SHCHANGENOTIFY = 46;
export const SMC_CHEVRONGETTIP = 47;
export const SMC_SFDDRESTRICTED = 48;
export const SMC_SFEXEC_MIDDLE = 49;
export const SMC_GETAUTOEXPANDSTATE = 65;
export const SMC_AUTOEXPANDCHANGE = 66;
export const SMC_GETCONTEXTMENUMODIFIER = 67;
export const SMC_GETBKCONTEXTMENU = 68;
export const SMC_OPEN = 69;
export const SMAE_EXPANDED = 1;
export const SMAE_CONTRACTED = 2;
export const SMAE_USER = 4;
export const SMAE_VALID = 7;
export const SMINIT_DEFAULT = 0;
export const SMINIT_RESTRICT_DRAGDROP = 2;
export const SMINIT_TOPLEVEL = 4;
export const SMINIT_CACHED = 16;
export const SMINIT_AUTOEXPAND = 256;
export const SMINIT_AUTOTOOLTIP = 512;
export const SMINIT_DROPONCONTAINER = 1024;
export const SMINIT_VERTICAL = 268435456;
export const SMINIT_HORIZONTAL = 536870912;
export const SMSET_TOP = 268435456;
export const SMSET_BOTTOM = 536870912;
export const SMSET_DONTOWN = 1;
export const SMINV_REFRESH = 1;
export const SMINV_ID = 8;
export const E_PREVIEWHANDLER_DRM_FAIL = 4755803424958840833n;
export const E_PREVIEWHANDLER_NOAUTH = 4755804524470468610n;
export const E_PREVIEWHANDLER_NOTFOUND = 4755805623982096387n;
export const E_PREVIEWHANDLER_CORRUPT = 7566124522437476356n;
export const STR_FILE_SYS_BIND_DATA = `File System Bind Data`;
export const STR_FILE_SYS_BIND_DATA_WIN7_FORMAT = `Win7FileSystemIdList`;
export const HOMEGROUP_SECURITY_GROUP_MULTI = `HUG`;
export const HOMEGROUP_SECURITY_GROUP = `HomeUsers`;
export const PROP_CONTRACT_DELEGATE = `ContractDelegate`;
export const STR_TAB_REUSE_IDENTIFIER = `Tab Reuse Identifier`;
export const STR_REFERRER_IDENTIFIER = `Referrer Identifier`;
export const ISIOI_ICONFILE = 1;
export const ISIOI_ICONINDEX = 2;
export const ABM_NEW = 0;
export const ABM_REMOVE = 1;
export const ABM_QUERYPOS = 2;
export const ABM_SETPOS = 3;
export const ABM_GETSTATE = 4;
export const ABM_GETTASKBARPOS = 5;
export const ABM_ACTIVATE = 6;
export const ABM_GETAUTOHIDEBAR = 7;
export const ABM_SETAUTOHIDEBAR = 8;
export const ABM_WINDOWPOSCHANGED = 9;
export const ABM_SETSTATE = 10;
export const ABM_GETAUTOHIDEBAREX = 11;
export const ABM_SETAUTOHIDEBAREX = 12;
export const ABN_STATECHANGE = 0;
export const ABN_POSCHANGED = 1;
export const ABN_FULLSCREENAPP = 2;
export const ABN_WINDOWARRANGE = 3;
export const ABS_AUTOHIDE = 1;
export const ABS_ALWAYSONTOP = 2;
export const ABE_LEFT = 0;
export const ABE_TOP = 1;
export const ABE_RIGHT = 2;
export const ABE_BOTTOM = 3;
export const FO_MOVE = 1;
export const FO_COPY = 2;
export const FO_DELETE = 3;
export const FO_RENAME = 4;
export const FOF_MULTIDESTFILES = 1;
export const FOF_CONFIRMMOUSE = 2;
export const FOF_SILENT = 4;
export const FOF_RENAMEONCOLLISION = 8;
export const FOF_NOCONFIRMATION = 16;
export const FOF_WANTMAPPINGHANDLE = 32;
export const FOF_ALLOWUNDO = 64;
export const FOF_FILESONLY = 128;
export const FOF_SIMPLEPROGRESS = 256;
export const FOF_NOCONFIRMMKDIR = 512;
export const FOF_NOERRORUI = 1024;
export const FOF_NOCOPYSECURITYATTRIBS = 2048;
export const FOF_NORECURSION = 4096;
export const FOF_NO_CONNECTED_ELEMENTS = 8192;
export const FOF_WANTNUKEWARNING = 16384;
export const FOF_NORECURSEREPARSE = 32768;
export const PO_DELETE = 19;
export const PO_RENAME = 20;
export const PO_PORTCHANGE = 32;
export const PO_REN_PORT = 52;
export const SE_ERR_FNF = 2;
export const SE_ERR_PNF = 3;
export const SE_ERR_ACCESSDENIED = 5;
export const SE_ERR_OOM = 8;
export const SE_ERR_DLLNOTFOUND = 32;
export const SE_ERR_SHARE = 26;
export const SE_ERR_ASSOCINCOMPLETE = 27;
export const SE_ERR_DDETIMEOUT = 28;
export const SE_ERR_DDEFAIL = 29;
export const SE_ERR_DDEBUSY = 30;
export const SE_ERR_NOASSOC = 31;
export const SEE_MASK_DEFAULT = 0;
export const SEE_MASK_CLASSNAME = 1;
export const SEE_MASK_CLASSKEY = 3;
export const SEE_MASK_IDLIST = 4;
export const SEE_MASK_INVOKEIDLIST = 12;
export const SEE_MASK_ICON = 16;
export const SEE_MASK_HOTKEY = 32;
export const SEE_MASK_NOCLOSEPROCESS = 64;
export const SEE_MASK_CONNECTNETDRV = 128;
export const SEE_MASK_NOASYNC = 256;
export const SEE_MASK_FLAG_DDEWAIT = 256;
export const SEE_MASK_DOENVSUBST = 512;
export const SEE_MASK_FLAG_NO_UI = 1024;
export const SEE_MASK_UNICODE = 16384;
export const SEE_MASK_NO_CONSOLE = 32768;
export const SEE_MASK_ASYNCOK = 1048576;
export const SEE_MASK_HMONITOR = 2097152;
export const SEE_MASK_NOZONECHECKS = 8388608;
export const SEE_MASK_NOQUERYCLASSSTORE = 16777216;
export const SEE_MASK_WAITFORINPUTIDLE = 33554432;
export const SEE_MASK_FLAG_LOG_USAGE = 67108864;
export const SEE_MASK_FLAG_HINST_IS_SITE = 134217728;
export const SHERB_NOCONFIRMATION = 1;
export const SHERB_NOPROGRESSUI = 2;
export const SHERB_NOSOUND = 4;
export const NIN_SELECT = 1024;
export const NINF_KEY = 1;
export const NIN_BALLOONSHOW = 1026;
export const NIN_BALLOONHIDE = 1027;
export const NIN_BALLOONTIMEOUT = 1028;
export const NIN_BALLOONUSERCLICK = 1029;
export const NIN_POPUPOPEN = 1030;
export const NIN_POPUPCLOSE = 1031;
export const NOTIFYICON_VERSION = 3;
export const NOTIFYICON_VERSION_4 = 4;
export const SHGSI_ICONLOCATION = 0;
export const SHGNLI_PIDL = 1;
export const SHGNLI_PREFIXNAME = 2;
export const SHGNLI_NOUNIQUE = 4;
export const SHGNLI_NOLNK = 8;
export const SHGNLI_NOLOCNAME = 16;
export const SHGNLI_USEURLEXT = 32;
export const PRINTACTION_OPEN = 0;
export const PRINTACTION_PROPERTIES = 1;
export const PRINTACTION_NETINSTALL = 2;
export const PRINTACTION_NETINSTALLLINK = 3;
export const PRINTACTION_TESTPAGE = 4;
export const PRINTACTION_OPENNETPRN = 5;
export const PRINTACTION_DOCUMENTDEFAULTS = 6;
export const PRINTACTION_SERVERPROPERTIES = 7;
export const PRINT_PROP_FORCE_NAME = 1;
export const OFFLINE_STATUS_LOCAL = 1;
export const OFFLINE_STATUS_REMOTE = 2;
export const OFFLINE_STATUS_INCOMPLETE = 4;
export const SHIL_LARGE = 0;
export const SHIL_SMALL = 1;
export const SHIL_EXTRALARGE = 2;
export const SHIL_SYSSMALL = 3;
export const SHIL_JUMBO = 4;
export const SHIL_LAST = 4;
export const WC_NETADDRESS = `msctls_netaddress`;
export const NCM_GETADDRESS = 1025;
export const NCM_SETALLOWTYPE = 1026;
export const NCM_GETALLOWTYPE = 1027;
export const NCM_DISPLAYERRORTIP = 1028;
export const CREDENTIAL_PROVIDER_NO_DEFAULT = 4294967295;
export const MAX_SYNCMGR_ID = 64;
export const MAX_SYNCMGR_PROGRESSTEXT = 260;
export const MAX_SYNCMGR_NAME = 128;
export const STIF_DEFAULT = 0;
export const STIF_SUPPORT_HEX = 1;
export const SZ_CONTENTTYPE_HTMLA = `text/html`;
export const SZ_CONTENTTYPE_HTMLW = `text/html`;
export const SZ_CONTENTTYPE_CDFA = `application/x-cdf`;
export const SZ_CONTENTTYPE_CDFW = `application/x-cdf`;
export const SZ_CONTENTTYPE_HTML = `text/html`;
export const SZ_CONTENTTYPE_CDF = `application/x-cdf`;
export const GCT_INVALID = 0;
export const GCT_LFNCHAR = 1;
export const GCT_SHORTCHAR = 2;
export const GCT_WILD = 4;
export const GCT_SEPARATOR = 8;
export const PMSF_NORMAL = 0;
export const PMSF_MULTIPLE = 1;
export const PMSF_DONT_STRIP_SPACES = 65536;
export const URL_UNESCAPE = 268435456;
export const URL_ESCAPE_UNSAFE = 536870912;
export const URL_PLUGGABLE_PROTOCOL = 1073741824;
export const URL_WININET_COMPATIBILITY = 2147483648;
export const URL_DONT_ESCAPE_EXTRA_INFO = 33554432;
export const URL_DONT_UNESCAPE_EXTRA_INFO = 33554432;
export const URL_BROWSER_MODE = 33554432;
export const URL_ESCAPE_SPACES_ONLY = 67108864;
export const URL_DONT_SIMPLIFY = 134217728;
export const URL_NO_META = 134217728;
export const URL_UNESCAPE_INPLACE = 1048576;
export const URL_CONVERT_IF_DOSPATH = 2097152;
export const URL_UNESCAPE_HIGH_ANSI_ONLY = 4194304;
export const URL_INTERNAL_PATH = 8388608;
export const URL_FILE_USE_PATHURL = 65536;
export const URL_DONT_UNESCAPE = 131072;
export const URL_ESCAPE_AS_UTF8 = 262144;
export const URL_UNESCAPE_AS_UTF8 = 262144;
export const URL_ESCAPE_ASCII_URI_COMPONENT = 524288;
export const URL_UNESCAPE_URI_COMPONENT = 262144;
export const URL_ESCAPE_PERCENT = 4096;
export const URL_ESCAPE_SEGMENT_ONLY = 8192;
export const URL_PARTFLAG_KEEPSCHEME = 1;
export const URL_APPLY_DEFAULT = 1;
export const URL_APPLY_GUESSSCHEME = 2;
export const URL_APPLY_GUESSFILE = 4;
export const URL_APPLY_FORCEAPPLY = 8;
export const SRRF_RT_REG_NONE = 1;
export const SRRF_RT_REG_SZ = 2;
export const SRRF_RT_REG_EXPAND_SZ = 4;
export const SRRF_RT_REG_BINARY = 8;
export const SRRF_RT_REG_DWORD = 16;
export const SRRF_RT_REG_MULTI_SZ = 32;
export const SRRF_RT_REG_QWORD = 64;
export const SRRF_RT_ANY = 65535;
export const SRRF_RM_ANY = 0;
export const SRRF_RM_NORMAL = 65536;
export const SRRF_RM_SAFE = 131072;
export const SRRF_RM_SAFENETWORK = 262144;
export const SRRF_NOEXPAND = 268435456;
export const SRRF_ZEROONFAILURE = 536870912;
export const SRRF_NOVIRT = 1073741824;
export const SHREGSET_HKCU = 1;
export const SHREGSET_FORCE_HKCU = 2;
export const SHREGSET_HKLM = 4;
export const SHREGSET_FORCE_HKLM = 8;
export const SPMODE_SHELL = 1;
export const SPMODE_DEBUGOUT = 2;
export const SPMODE_TEST = 4;
export const SPMODE_BROWSER = 8;
export const SPMODE_FLUSH = 16;
export const SPMODE_EVENT = 32;
export const SPMODE_MSVM = 64;
export const SPMODE_FORMATTEXT = 128;
export const SPMODE_PROFILE = 256;
export const SPMODE_DEBUGBREAK = 512;
export const SPMODE_MSGTRACE = 1024;
export const SPMODE_PERFTAGS = 2048;
export const SPMODE_MEMWATCH = 4096;
export const SPMODE_DBMON = 8192;
export const SPMODE_MULTISTOP = 16384;
export const SPMODE_EVENTTRACE = 32768;
export const SHGVSPB_PERUSER = 1;
export const SHGVSPB_ALLUSERS = 2;
export const SHGVSPB_PERFOLDER = 4;
export const SHGVSPB_ALLFOLDERS = 8;
export const SHGVSPB_INHERIT = 16;
export const SHGVSPB_ROAM = 32;
export const SHGVSPB_NOAUTODEFAULTS = 2147483648;
export const FDTF_SHORTTIME = 1;
export const FDTF_SHORTDATE = 2;
export const FDTF_LONGDATE = 4;
export const FDTF_LONGTIME = 8;
export const FDTF_RELATIVE = 16;
export const FDTF_LTRDATE = 256;
export const FDTF_RTLDATE = 512;
export const FDTF_NOAUTOREADINGORDER = 1024;
export const PLATFORM_UNKNOWN = 0;
export const PLATFORM_IE3 = 1;
export const PLATFORM_BROWSERONLY = 1;
export const PLATFORM_INTEGRATED = 2;
export const ILMM_IE4 = 0;
export const DLLVER_PLATFORM_WINDOWS = 1;
export const DLLVER_PLATFORM_NT = 2;
export const DLLVER_MAJOR_MASK = 18446462598732840960n;
export const DLLVER_MINOR_MASK = 281470681743360;
export const DLLVER_BUILD_MASK = 4294901760;
export const DLLVER_QFE_MASK = 65535;
export const WTS_E_FAILEDEXTRACTION = 338334040845496832n;
export const WTS_E_EXTRACTIONTIMEDOUT = 338335140357124609n;
export const WTS_E_SURROGATEUNAVAILABLE = 338336239868752386n;
export const WTS_E_FASTEXTRACTIONNOTSUPPORTED = 338337339380380163n;
export const WTS_E_DATAFILEUNAVAILABLE = 338338438892007940n;
export const WTS_E_EXTRACTIONPENDING = 338339538403635717n;
export const WTS_E_EXTRACTIONBLOCKED = 338340637915263494n;
export const WTS_E_NOSTORAGEPROVIDERTHUMBNAILHANDLER = 7998466702126133767n;
export const SHIMGKEY_QUALITY = `Compression`;
export const SHIMGKEY_RAWFORMAT = `RawDataFormat`;
export const SHIMGDEC_DEFAULT = 0;
export const SHIMGDEC_THUMBNAIL = 1;
export const SHIMGDEC_LOADFULL = 2;
export const E_NOTVALIDFORANIMATEDIMAGE = 288232594502582273n;
export const S_SYNCMGR_MISSINGITEMS = 288796641820148225n;
export const S_SYNCMGR_RETRYSYNC = 288796641820148226n;
export const S_SYNCMGR_CANCELITEM = 288797741331776003n;
export const S_SYNCMGR_CANCELALL = 288810935471309316n;
export const S_SYNCMGR_ITEMDELETED = 288812034982937104n;
export const S_SYNCMGR_ENUMITEMS = 6629399892458734097n;
export const SYNCMGRPROGRESSITEM_STATUSTEXT = 1;
export const SYNCMGRPROGRESSITEM_STATUSTYPE = 2;
export const SYNCMGRPROGRESSITEM_PROGVALUE = 4;
export const SYNCMGRPROGRESSITEM_MAXVALUE = 8;
export const SYNCMGRLOGERROR_ERRORFLAGS = 1;
export const SYNCMGRLOGERROR_ERRORID = 2;
export const SYNCMGRLOGERROR_ITEMID = 4;
export const SYNCMGRITEM_ITEMFLAGMASK = 127;
export const MAX_SYNCMGRITEMNAME = 128;
export const SYNCMGRHANDLERFLAG_MASK = 15;
export const MAX_SYNCMGRHANDLERNAME = 32;
export const SYNCMGRREGISTERFLAGS_MASK = 7;
export const TLOG_BACK = `-1`;
export const TLOG_CURRENT = 0;
export const TLOG_FORE = 1;
export const TLMENUF_INCLUDECURRENT = 1;
export const TLMENUF_BACK = 16;
export const TLMENUF_FORE = 32;
export const BSF_REGISTERASDROPTARGET = 1;
export const BSF_THEATERMODE = 2;
export const BSF_NOLOCALFILEWARNING = 16;
export const BSF_UISETBYAUTOMATION = 256;
export const BSF_RESIZABLE = 512;
export const BSF_CANMAXIMIZE = 1024;
export const BSF_TOPBROWSER = 2048;
export const BSF_NAVNOHISTORY = 4096;
export const BSF_HTMLNAVCANCELED = 8192;
export const BSF_DONTSHOWNAVCANCELPAGE = 16384;
export const BSF_SETNAVIGATABLECODEPAGE = 32768;
export const BSF_DELEGATEDNAVIGATION = 65536;
export const BSF_TRUSTEDFORACTIVEX = 131072;
export const BSF_MERGEDMENUS = 262144;
export const BSF_FEEDNAVIGATION = 524288;
export const BSF_FEEDSUBSCRIBED = 1048576;
export const HLNF_CALLERUNTRUSTED = 2097152;
export const HLNF_TRUSTEDFORACTIVEX = 4194304;
export const HLNF_DISABLEWINDOWRESTRICTIONS = 8388608;
export const HLNF_TRUSTFIRSTDOWNLOAD = 16777216;
export const HLNF_UNTRUSTEDFORDOWNLOAD = 33554432;
export const SHHLNF_NOAUTOSELECT = 67108864;
export const SHHLNF_WRITENOHISTORY = 134217728;
export const HLNF_EXTERNALNAVIGATE = 268435456;
export const HLNF_ALLOW_AUTONAVIGATE = 536870912;
export const HLNF_NEWWINDOWSMANAGED = 2147483648;
export const INTERNET_MAX_PATH_LENGTH = 2048;
export const INTERNET_MAX_SCHEME_LENGTH = 32;
export const VIEW_PRIORITY_RESTRICTED = 112;
export const VIEW_PRIORITY_CACHEHIT = 80;
export const VIEW_PRIORITY_STALECACHEHIT = 69;
export const VIEW_PRIORITY_USEASDEFAULT = 67;
export const VIEW_PRIORITY_SHELLEXT = 64;
export const VIEW_PRIORITY_CACHEMISS = 48;
export const VIEW_PRIORITY_INHERIT = 32;
export const VIEW_PRIORITY_SHELLEXT_ASBACKUP = 21;
export const VIEW_PRIORITY_DESPERATE = 16;
export const VIEW_PRIORITY_NONE = 0;
export const VOLUME_PREFIX = `\\\\?\\Volume`;
export const PATHCCH_MAX_CCH = 32768;
export const IDS_DESCRIPTION = 1;
export const ID_APP = 100;
export const DLG_SCRNSAVECONFIGURE = 2003;
export const idsIsPassword = 1000;
export const idsIniFile = 1001;
export const idsScreenSaver = 1002;
export const idsPassword = 1003;
export const idsDifferentPW = 1004;
export const idsChangePW = 1005;
export const idsBadOldPW = 1006;
export const idsAppName = 1007;
export const idsNoHelpMemory = 1008;
export const idsHelpFile = 1009;
export const idsDefKeyword = 1010;
export const MAXFILELEN = 13;
export const TITLEBARNAMELEN = 40;
export const APPNAMEBUFFERLEN = 40;
export const BUFFLEN = 255;
export const SCRM_VERIFYPW = 32768;
export const E_FLAGS = 297239793757327360n;
export const IS_E_EXEC_FAILED = 292735094618333186n;
export const URL_E_INVALID_SYNTAX = 292736194129956865n;
export const URL_E_UNREGISTERED_PROTOCOL = 2810247286318436354n;
export const CPLPAGE_MOUSE_BUTTONS = 1;
export const CPLPAGE_MOUSE_PTRMOTION = 2;
export const CPLPAGE_MOUSE_WHEEL = 3;
export const CPLPAGE_KEYBOARD_SPEED = 1;
export const CPLPAGE_DISPLAY_BACKGROUND = 1;
export const DISPID_SELECTIONCHANGED = 200;
export const DISPID_FILELISTENUMDONE = 201;
export const DISPID_VERBINVOKED = 202;
export const DISPID_DEFAULTVERBINVOKED = 203;
export const DISPID_BEGINDRAG = 204;
export const DISPID_VIEWMODECHANGED = 205;
export const DISPID_NOITEMSTATE_CHANGED = 206;
export const DISPID_CONTENTSCHANGED = 207;
export const DISPID_FOCUSCHANGED = 208;
export const DISPID_CHECKSTATECHANGED = 209;
export const DISPID_ORDERCHANGED = 210;
export const DISPID_VIEWPAINTDONE = 211;
export const DISPID_COLUMNSCHANGED = 212;
export const DISPID_CTRLMOUSEWHEEL = 213;
export const DISPID_SORTDONE = 214;
export const DISPID_ICONSIZECHANGED = 215;
export const DISPID_FOLDERCHANGED = 217;
export const DISPID_FILTERINVOKED = 218;
export const DISPID_WORDWHEELEDITED = 219;
export const DISPID_SELECTEDITEMCHANGED = 220;
export const DISPID_EXPLORERWINDOWREADY = 221;
export const DISPID_UPDATEIMAGE = 222;
export const DISPID_INITIALENUMERATIONDONE = 223;
export const DISPID_ENTERPRISEIDCHANGED = 224;
export const DISPID_ENTERPRESSED = 200;
export const DISPID_SEARCHCOMMAND_START = 1;
export const DISPID_SEARCHCOMMAND_COMPLETE = 2;
export const DISPID_SEARCHCOMMAND_ABORT = 3;
export const DISPID_SEARCHCOMMAND_UPDATE = 4;
export const DISPID_SEARCHCOMMAND_PROGRESSTEXT = 5;
export const DISPID_SEARCHCOMMAND_ERROR = 6;
export const DISPID_SEARCHCOMMAND_RESTORE = 7;
export const DISPID_IADCCTL_DIRTY = 256;
export const DISPID_IADCCTL_PUBCAT = 257;
export const DISPID_IADCCTL_SORT = 258;
export const DISPID_IADCCTL_FORCEX86 = 259;
export const DISPID_IADCCTL_SHOWPOSTSETUP = 260;
export const DISPID_IADCCTL_ONDOMAIN = 261;
export const DISPID_IADCCTL_DEFAULTCAT = 262;
export const COPYENGINE_S_YES = 2810249483196497921n;
export const COPYENGINE_S_NOT_HANDLED = 2810250582708125699n;
export const COPYENGINE_S_USER_RETRY = 2810251682219753476n;
export const COPYENGINE_S_USER_IGNORED = 2810252781731381253n;
export const COPYENGINE_S_MERGE = 2810254980754636806n;
export const COPYENGINE_S_DONT_PROCESS_CHILDREN = 2810257179777892360n;
export const COPYENGINE_S_ALREADY_DONE = 2810258279289520138n;
export const COPYENGINE_S_PENDING = 2810259378801147915n;
export const COPYENGINE_S_KEEP_BOTH = 2810261577824403468n;
export const COPYENGINE_S_CLOSE_PROGRAM = 2810261577824403469n;
export const COPYENGINE_S_COLLISIONRESOLVED = 2810262677336031246n;
export const COPYENGINE_S_PROGRESS_PAUSE = 2810246184661614607n;
export const COPYENGINE_E_USER_CANCELLED = 2810260480460259328n;
export const COPYENGINE_E_CANCELLED = 2810248385832353793n;
export const COPYENGINE_E_REQUIRES_ELEVATION = 2810249485343981570n;
export const COPYENGINE_E_SAME_FILE = 2810250584855609347n;
export const COPYENGINE_E_DIFF_DIR = 2810251684367237124n;
export const COPYENGINE_E_MANY_SRC_1_DEST = 2810252783878864901n;
export const COPYENGINE_E_DEST_SUBTREE = 2810257181925376009n;
export const COPYENGINE_E_DEST_SAME_TREE = 2810258281437003786n;
export const COPYENGINE_E_FLD_IS_FILE_DEST = 2810259380948631563n;
export const COPYENGINE_E_FILE_IS_FLD_DEST = 2810260480460259340n;
export const COPYENGINE_E_FILE_TOO_LARGE = 2810268177041653773n;
export const COPYENGINE_E_REMOVABLE_FULL = 2810262679483514894n;
export const COPYENGINE_E_DEST_IS_RO_CD = 2810263778995142671n;
export const COPYENGINE_E_DEST_IS_RW_CD = 2810264878506770448n;
export const COPYENGINE_E_DEST_IS_R_CD = 2810265978018398225n;
export const COPYENGINE_E_DEST_IS_RO_DVD = 2810267077530026002n;
export const COPYENGINE_E_DEST_IS_RW_DVD = 2882303780847026195n;
export const COPYENGINE_E_DEST_IS_R_DVD = 2810269276553281556n;
export const COPYENGINE_E_SRC_IS_RO_CD = 2810270376064909333n;
export const COPYENGINE_E_SRC_IS_RW_CD = 2810271475576537110n;
export const COPYENGINE_E_SRC_IS_R_CD = 2810272575088164887n;
export const COPYENGINE_E_SRC_IS_RO_DVD = 2810273674599792664n;
export const COPYENGINE_E_SRC_IS_RW_DVD = 2810274774111420441n;
export const COPYENGINE_E_SRC_IS_R_DVD = 2810275873623048218n;
export const COPYENGINE_E_INVALID_FILES_SRC = 2810276973134675995n;
export const COPYENGINE_E_INVALID_FILES_DEST = 2810278072646303772n;
export const COPYENGINE_E_PATH_TOO_DEEP_SRC = 2810279172157931549n;
export const COPYENGINE_E_PATH_TOO_DEEP_DEST = 2810280271669559326n;
export const COPYENGINE_E_ROOT_DIR_SRC = 2810281371181187103n;
export const COPYENGINE_E_ROOT_DIR_DEST = 2810282470692814880n;
export const COPYENGINE_E_ACCESS_DENIED_SRC = 2810283570204442657n;
export const COPYENGINE_E_ACCESS_DENIED_DEST = 2810284669716070434n;
export const COPYENGINE_E_PATH_NOT_FOUND_SRC = 2810285769227698211n;
export const COPYENGINE_E_PATH_NOT_FOUND_DEST = 2810286868739325988n;
export const COPYENGINE_E_NET_DISCONNECT_SRC = 2810287968250953765n;
export const COPYENGINE_E_NET_DISCONNECT_DEST = 2810289067762581542n;
export const COPYENGINE_E_SHARING_VIOLATION_SRC = 2810290167274209319n;
export const COPYENGINE_E_SHARING_VIOLATION_DEST = 2810291266785837096n;
export const COPYENGINE_E_ALREADY_EXISTS_NORMAL = 2810292366297464873n;
export const COPYENGINE_E_ALREADY_EXISTS_READONLY = 2810293465809092650n;
export const COPYENGINE_E_ALREADY_EXISTS_SYSTEM = 2810294565320720427n;
export const COPYENGINE_E_ALREADY_EXISTS_FOLDER = 2810295664832348204n;
export const COPYENGINE_E_STREAM_LOSS = 2810296764343975981n;
export const COPYENGINE_E_EA_LOSS = 2810297863855603758n;
export const COPYENGINE_E_PROPERTY_LOSS = 2810298963367231535n;
export const COPYENGINE_E_PROPERTIES_LOSS = 2810300062878859312n;
export const COPYENGINE_E_ENCRYPTION_LOSS = 2810301162390487089n;
export const COPYENGINE_E_DISK_FULL = 2810302261902114866n;
export const COPYENGINE_E_DISK_FULL_CLEAN = 2810303361413742643n;
export const COPYENGINE_E_EA_NOT_SUPPORTED = 2810304460925370420n;
export const COPYENGINE_E_CANT_REACH_SOURCE = 2810305560436998197n;
export const COPYENGINE_E_RECYCLE_UNKNOWN_ERROR = 2810305560436998197n;
export const COPYENGINE_E_RECYCLE_FORCE_NUKE = 2810306659948625974n;
export const COPYENGINE_E_RECYCLE_SIZE_TOO_BIG = 2810307759460253751n;
export const COPYENGINE_E_RECYCLE_PATH_TOO_LONG = 2810309958483509304n;
export const COPYENGINE_E_RECYCLE_BIN_NOT_FOUND = 2810311057995137082n;
export const COPYENGINE_E_NEWFILE_NAME_TOO_LONG = 2810312157506764859n;
export const COPYENGINE_E_NEWFOLDER_NAME_TOO_LONG = 2810313257018392636n;
export const COPYENGINE_E_DIR_NOT_EMPTY = 2810314356530020413n;
export const COPYENGINE_E_FAT_MAX_IN_ROOT = 2810315456041648190n;
export const COPYENGINE_E_ACCESSDENIED_READONLY = 2810316555553275967n;
export const COPYENGINE_E_REDIRECTED_TO_WEBPAGE = 2810317655064903744n;
export const COPYENGINE_E_SERVER_BAD_FILE_TYPE = 2810318754576531521n;
export const COPYENGINE_E_INTERNET_ITEM_UNAVAILABLE = 2810319854088159298n;
export const COPYENGINE_E_CANNOT_MOVE_FROM_RECYCLE_BIN = 2810320953599787075n;
export const COPYENGINE_E_CANNOT_MOVE_SHARED_FOLDER = 2810322053111414852n;
export const COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_ERROR = 2810323152623042629n;
export const COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_PAUSED = 2810324252134670406n;
export const COPYENGINE_E_REQUIRES_EDP_CONSENT = 2810325351646298183n;
export const COPYENGINE_E_BLOCKED_BY_EDP_POLICY = 2810326451157925960n;
export const COPYENGINE_E_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = 2810327550669553737n;
export const COPYENGINE_E_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = 2810328650181181514n;
export const COPYENGINE_E_RMS_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = 2810329749692809291n;
export const COPYENGINE_E_RMS_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = 2810330849204437068n;
export const COPYENGINE_E_WARNED_BY_DLP_POLICY = 2810331948716064845n;
export const COPYENGINE_E_BLOCKED_BY_DLP_POLICY = 2810333048227692622n;
export const COPYENGINE_E_SILENT_FAIL_BY_DLP_POLICY = 2810527661785808975n;
export const NETCACHE_E_NEGATIVE_CACHE = 2810528761297436928n;
export const EXECUTE_E_LAUNCH_APPLICATION = 2810529860809064705n;
export const SHELL_E_WRONG_BITDEPTH = 2810530960320692482n;
export const LINK_E_DELETE = 2810532059832320259n;
export const STORE_E_NEWER_VERSION_AVAILABLE = 2810545253971853572n;
export const E_FILE_PLACEHOLDER_NOT_INITIALIZED = 2810546353483481360n;
export const E_FILE_PLACEHOLDER_VERSION_MISMATCH = 2810547452995109137n;
export const E_FILE_PLACEHOLDER_SERVER_TIMED_OUT = 2810548552506736914n;
export const E_FILE_PLACEHOLDER_STORAGEPROVIDER_NOT_FOUND = 2810562846157898003n;
export const CAMERAROLL_E_NO_DOWNSAMPLING_REQUIRED = 2810580438343942432n;
export const E_ACTIVATIONDENIED_USERCLOSE = 2810581537855570224n;
export const E_ACTIVATIONDENIED_SHELLERROR = 2810582637367198001n;
export const E_ACTIVATIONDENIED_SHELLRESTART = 2810583736878825778n;
export const E_ACTIVATIONDENIED_UNEXPECTED = 2810584836390453555n;
export const E_ACTIVATIONDENIED_SHELLNOTREADY = 2810809136762519860n;
export const LIBRARY_E_NO_SAVE_LOCATION = 2810810236274147840n;
export const LIBRARY_E_NO_ACCESSIBLE_LOCATION = 2810826728948564481n;
export const E_USERTILE_UNSUPPORTEDFILETYPE = 2810827828460192272n;
export const E_USERTILE_CHANGEDISABLED = 2810828927971820049n;
export const E_USERTILE_LARGEORDYNAMIC = 2810830027483447826n;
export const E_USERTILE_VIDEOFRAMESIZE = 2810831126995075603n;
export const E_USERTILE_FILESIZE = 2810861913320653332n;
export const IMM_ACC_DOCKING_E_INSUFFICIENTHEIGHT = 2810863012832281136n;
export const IMM_ACC_DOCKING_E_DOCKOCCUPIED = 2810865211855536689n;
export const IMSC_E_SHELL_COMPONENT_STARTUP_FAILURE = 2810866311367164467n;
export const SHC_E_SHELL_COMPONENT_STARTUP_FAILURE = 2810889401111347764n;
export const E_TILE_NOTIFICATIONS_PLATFORM_FAILURE = 2811091711250858569n;
export const E_SHELL_EXTENSION_BLOCKED = 2811108203925275393n;
export const E_IMAGEFEED_CHANGEDISABLED = 1225542097992876816n;
export const ISHCUTCMDID_DOWNLOADICON = 0;
export const ISHCUTCMDID_INTSHORTCUTCREATE = 1;
export const ISHCUTCMDID_COMMITHISTORY = 2;
export const ISHCUTCMDID_SETUSERAWURL = 3;
export const SFBID_PIDLCHANGED = 0;
export const DBCID_EMPTY = 0;
export const DBCID_ONDRAG = 1;
export const DBCID_CLSIDOFBAR = 2;
export const DBCID_RESIZE = 3;
export const DBCID_GETBAR = 4;
export const DBCID_UPDATESIZE = 5;
export const BMICON_LARGE = 0;
export const BMICON_SMALL = 1;
export const ASSOCF_NONE = 0;
export const ASSOCF_INIT_NOREMAPCLSID = 1;
export const ASSOCF_INIT_BYEXENAME = 2;
export const ASSOCF_OPEN_BYEXENAME = 2;
export const ASSOCF_INIT_DEFAULTTOSTAR = 4;
export const ASSOCF_INIT_DEFAULTTOFOLDER = 8;
export const ASSOCF_NOUSERSETTINGS = 16;
export const ASSOCF_NOTRUNCATE = 32;
export const ASSOCF_VERIFY = 64;
export const ASSOCF_REMAPRUNDLL = 128;
export const ASSOCF_NOFIXUPS = 256;
export const ASSOCF_IGNOREBASECLASS = 512;
export const ASSOCF_INIT_IGNOREUNKNOWN = 1024;
export const ASSOCF_INIT_FIXED_PROGID = 2048;
export const ASSOCF_IS_PROTOCOL = 4096;
export const ASSOCF_INIT_FOR_FILE = 8192;
export const ASSOCF_IS_FULL_URI = 16384;
export const ASSOCF_PER_MACHINE_ONLY = 32768;
export const ASSOCF_APP_TO_APP = 65536;
export const CTF_INSIST = 1;
export const CTF_THREAD_REF = 2;
export const CTF_PROCESS_REF = 4;
export const CTF_COINIT_STA = 8;
export const CTF_COINIT = 8;
export const CTF_FREELIBANDEXIT = 16;
export const CTF_REF_COUNTED = 32;
export const CTF_WAIT_ALLOWCOM = 64;
export const CTF_UNUSED = 128;
export const CTF_INHERITWOW64 = 256;
export const CTF_WAIT_NO_REENTRANCY = 512;
export const CTF_KEYBOARD_LOCALE = 1024;
export const CTF_OLEINITIALIZE = 2048;
export const CTF_COINIT_MTA = 4096;
export const CTF_NOADDREFLIB = 8192;
export const SHGFI_ADDOVERLAYS = 32;
export const SHGFI_ATTR_SPECIFIED = 131072;
export const SHGFI_ATTRIBUTES = 2048;
export const SHGFI_DISPLAYNAME = 512;
export const SHGFI_EXETYPE = 8192;
export const SHGFI_ICON = 256;
export const SHGFI_ICONLOCATION = 4096;
export const SHGFI_LARGEICON = 0;
export const SHGFI_LINKOVERLAY = 32768;
export const SHGFI_OPENICON = 2;
export const SHGFI_OVERLAYINDEX = 64;
export const SHGFI_PIDL = 8;
export const SHGFI_SELECTED = 65536;
export const SHGFI_SHELLICONSIZE = 4;
export const SHGFI_SMALLICON = 1;
export const SHGFI_SYSICONINDEX = 16384;
export const SHGFI_TYPENAME = 1024;
export const SHGFI_USEFILEATTRIBUTES = 16;
export const SHCNE_RENAMEITEM = 1;
export const SHCNE_CREATE = 2;
export const SHCNE_DELETE = 4;
export const SHCNE_MKDIR = 8;
export const SHCNE_RMDIR = 16;
export const SHCNE_MEDIAINSERTED = 32;
export const SHCNE_MEDIAREMOVED = 64;
export const SHCNE_DRIVEREMOVED = 128;
export const SHCNE_DRIVEADD = 256;
export const SHCNE_NETSHARE = 512;
export const SHCNE_NETUNSHARE = 1024;
export const SHCNE_ATTRIBUTES = 2048;
export const SHCNE_UPDATEDIR = 4096;
export const SHCNE_UPDATEITEM = 8192;
export const SHCNE_SERVERDISCONNECT = 16384;
export const SHCNE_UPDATEIMAGE = 32768;
export const SHCNE_DRIVEADDGUI = 65536;
export const SHCNE_RENAMEFOLDER = 131072;
export const SHCNE_FREESPACE = 262144;
export const SHCNE_EXTENDED_EVENT = 67108864;
export const SHCNE_ASSOCCHANGED = 134217728;
export const SHCNE_DISKEVENTS = 145439;
export const SHCNE_GLOBALEVENTS = 201687520;
export const SHCNE_ALLEVENTS = 2147483647;
export const SHCNE_INTERRUPT = 2147483648;
export const SHCNRF_InterruptLevel = 1;
export const SHCNRF_ShellLevel = 2;
export const SHCNRF_RecursiveInterrupt = 4096;
export const SHCNRF_NewDelivery = 32768;
export const SHCNF_IDLIST = 0;
export const SHCNF_PATHA = 1;
export const SHCNF_PRINTERA = 2;
export const SHCNF_DWORD = 3;
export const SHCNF_PATHW = 5;
export const SHCNF_PRINTERW = 6;
export const SHCNF_TYPE = 255;
export const SHCNF_FLUSH = 4096;
export const SHCNF_FLUSHNOWAIT = 12288;
export const SHCNF_NOTIFYRECURSIVE = 65536;
export const SHCNF_PATH = 5;
export const SHCNF_PRINTER = 6;
export const QITIPF_DEFAULT = 0;
export const QITIPF_USENAME = 1;
export const QITIPF_LINKNOTARGET = 2;
export const QITIPF_LINKUSETARGET = 4;
export const QITIPF_USESLOWTIP = 8;
export const QITIPF_SINGLELINE = 16;
export const QIF_CACHED = 1;
export const QIF_DONTEXPANDFOLDER = 2;
export const SHDID_ROOT_REGITEM = 1;
export const SHDID_FS_FILE = 2;
export const SHDID_FS_DIRECTORY = 3;
export const SHDID_FS_OTHER = 4;
export const SHDID_COMPUTER_DRIVE35 = 5;
export const SHDID_COMPUTER_DRIVE525 = 6;
export const SHDID_COMPUTER_REMOVABLE = 7;
export const SHDID_COMPUTER_FIXED = 8;
export const SHDID_COMPUTER_NETDRIVE = 9;
export const SHDID_COMPUTER_CDROM = 10;
export const SHDID_COMPUTER_RAMDISK = 11;
export const SHDID_COMPUTER_OTHER = 12;
export const SHDID_NET_DOMAIN = 13;
export const SHDID_NET_SERVER = 14;
export const SHDID_NET_SHARE = 15;
export const SHDID_NET_RESTOFNET = 16;
export const SHDID_NET_OTHER = 17;
export const SHDID_COMPUTER_IMAGING = 18;
export const SHDID_COMPUTER_AUDIO = 19;
export const SHDID_COMPUTER_SHAREDDOCS = 20;
export const SHDID_MOBILE_DEVICE = 21;
export const SHDID_REMOTE_DESKTOP_DRIVE = 22;
export const SHGDFIL_FINDDATA = 1;
export const SHGDFIL_NETRESOURCE = 2;
export const SHGDFIL_DESCRIPTIONID = 3;
export const PRF_VERIFYEXISTS = 1;
export const PRF_TRYPROGRAMEXTENSIONS = 3;
export const PRF_FIRSTDIRDEF = 4;
export const PRF_DONTFINDLNK = 8;
export const PRF_REQUIREABSOLUTE = 16;
export const PCS_FATAL = 2147483648;
export const PCS_REPLACEDCHAR = 1;
export const PCS_REMOVEDCHAR = 2;
export const PCS_TRUNCATED = 4;
export const PCS_PATHTOOLONG = 8;
export const MM_ADDSEPARATOR = 1;
export const MM_SUBMENUSHAVEIDS = 2;
export const MM_DONTREMOVESEPS = 4;
export const SHOP_PRINTERNAME = 1;
export const SHOP_FILEPATH = 2;
export const SHOP_VOLUMEGUID = 4;
export const SHFMT_ID_DEFAULT = 65535;
export const SHFMT_OPT_NONE = 0;
export const SHFMT_OPT_FULL = 1;
export const SHFMT_OPT_SYSONLY = 2;
export const SHFMT_ERROR = 4294967295;
export const SHFMT_CANCEL = 4294967294;
export const SHFMT_NOFORMAT = 4294967293;
export const VALIDATEUNC_CONNECT = 1;
export const VALIDATEUNC_NOUI = 2;
export const VALIDATEUNC_PRINT = 4;
export const VALIDATEUNC_PERSIST = 8;
export const VALIDATEUNC_VALID = 15;
export const SFVM_MERGEMENU = 1;
export const SFVM_INVOKECOMMAND = 2;
export const SFVM_GETHELPTEXT = 3;
export const SFVM_GETTOOLTIPTEXT = 4;
export const SFVM_GETBUTTONINFO = 5;
export const SFVM_GETBUTTONS = 6;
export const SFVM_INITMENUPOPUP = 7;
export const SFVM_FSNOTIFY = 14;
export const SFVM_WINDOWCREATED = 15;
export const SFVM_GETDETAILSOF = 23;
export const SFVM_COLUMNCLICK = 24;
export const SFVM_QUERYFSNOTIFY = 25;
export const SFVM_DEFITEMCOUNT = 26;
export const SFVM_DEFVIEWMODE = 27;
export const SFVM_UNMERGEMENU = 28;
export const SFVM_UPDATESTATUSBAR = 31;
export const SFVM_BACKGROUNDENUM = 32;
export const SFVM_DIDDRAGDROP = 36;
export const SFVM_SETISFV = 39;
export const SFVM_THISIDLIST = 41;
export const SFVM_ADDPROPERTYPAGES = 47;
export const SFVM_BACKGROUNDENUMDONE = 48;
export const SFVM_GETNOTIFY = 49;
export const SFVM_GETSORTDEFAULTS = 53;
export const SFVM_SIZE = 57;
export const SFVM_GETZONE = 58;
export const SFVM_GETPANE = 59;
export const SFVM_GETHELPTOPIC = 63;
export const SFVM_GETANIMATION = 68;
export const SFVS_SELECT_NONE = 0;
export const SFVS_SELECT_ALLITEMS = 1;
export const SFVS_SELECT_INVERT = 2;
export const DFM_MERGECONTEXTMENU = 1;
export const DFM_INVOKECOMMAND = 2;
export const DFM_GETHELPTEXT = 5;
export const DFM_WM_MEASUREITEM = 6;
export const DFM_WM_DRAWITEM = 7;
export const DFM_WM_INITMENUPOPUP = 8;
export const DFM_VALIDATECMD = 9;
export const DFM_MERGECONTEXTMENU_TOP = 10;
export const DFM_GETHELPTEXTW = 11;
export const DFM_INVOKECOMMANDEX = 12;
export const DFM_MAPCOMMANDNAME = 13;
export const DFM_GETDEFSTATICID = 14;
export const DFM_GETVERBW = 15;
export const DFM_GETVERBA = 16;
export const DFM_MERGECONTEXTMENU_BOTTOM = 17;
export const DFM_MODIFYQCMFLAGS = 18;
export const DFM_CMD_DELETE = `-1`;
export const DFM_CMD_MOVE = `-2`;
export const DFM_CMD_COPY = `-3`;
export const DFM_CMD_LINK = `-4`;
export const DFM_CMD_PROPERTIES = `-5`;
export const DFM_CMD_NEWFOLDER = `-6`;
export const DFM_CMD_PASTE = `-7`;
export const DFM_CMD_VIEWLIST = `-8`;
export const DFM_CMD_VIEWDETAILS = `-9`;
export const DFM_CMD_PASTELINK = `-10`;
export const DFM_CMD_PASTESPECIAL = `-11`;
export const DFM_CMD_MODALPROP = `-12`;
export const DFM_CMD_RENAME = `-13`;
export const PID_IS_URL = 2;
export const PID_IS_NAME = 4;
export const PID_IS_WORKINGDIR = 5;
export const PID_IS_HOTKEY = 6;
export const PID_IS_SHOWCMD = 7;
export const PID_IS_ICONINDEX = 8;
export const PID_IS_ICONFILE = 9;
export const PID_IS_WHATSNEW = 10;
export const PID_IS_AUTHOR = 11;
export const PID_IS_DESCRIPTION = 12;
export const PID_IS_COMMENT = 13;
export const PID_IS_ROAMED = 15;
export const PID_INTSITE_WHATSNEW = 2;
export const PID_INTSITE_AUTHOR = 3;
export const PID_INTSITE_LASTVISIT = 4;
export const PID_INTSITE_LASTMOD = 5;
export const PID_INTSITE_VISITCOUNT = 6;
export const PID_INTSITE_DESCRIPTION = 7;
export const PID_INTSITE_COMMENT = 8;
export const PID_INTSITE_FLAGS = 9;
export const PID_INTSITE_CONTENTLEN = 10;
export const PID_INTSITE_CONTENTCODE = 11;
export const PID_INTSITE_RECURSE = 12;
export const PID_INTSITE_WATCH = 13;
export const PID_INTSITE_SUBSCRIPTION = 14;
export const PID_INTSITE_URL = 15;
export const PID_INTSITE_TITLE = 16;
export const PID_INTSITE_CODEPAGE = 18;
export const PID_INTSITE_TRACKING = 19;
export const PID_INTSITE_ICONINDEX = 20;
export const PID_INTSITE_ICONFILE = 21;
export const PID_INTSITE_ROAMED = 34;
export const PIDISF_RECENTLYCHANGED = 1;
export const PIDISF_CACHEDSTICKY = 2;
export const PIDISF_CACHEIMAGES = 16;
export const PIDISF_FOLLOWALLLINKS = 32;
export const PIDISM_GLOBAL = 0;
export const PIDISM_WATCH = 1;
export const PIDISM_DONTWATCH = 2;
export const PIDISR_UP_TO_DATE = 0;
export const PIDISR_NEEDS_ADD = 1;
export const PIDISR_NEEDS_UPDATE = 2;
export const PIDISR_NEEDS_DELETE = 3;
export const SSF_SHOWALLOBJECTS = 1;
export const SSF_SHOWEXTENSIONS = 2;
export const SSF_HIDDENFILEEXTS = 4;
export const SSF_SERVERADMINUI = 4;
export const SSF_SHOWCOMPCOLOR = 8;
export const SSF_SORTCOLUMNS = 16;
export const SSF_SHOWSYSFILES = 32;
export const SSF_DOUBLECLICKINWEBVIEW = 128;
export const SSF_SHOWATTRIBCOL = 256;
export const SSF_DESKTOPHTML = 512;
export const SSF_WIN95CLASSIC = 1024;
export const SSF_DONTPRETTYPATH = 2048;
export const SSF_SHOWINFOTIP = 8192;
export const SSF_MAPNETDRVBUTTON = 4096;
export const SSF_NOCONFIRMRECYCLE = 32768;
export const SSF_HIDEICONS = 16384;
export const SSF_FILTER = 65536;
export const SSF_WEBVIEW = 131072;
export const SSF_SHOWSUPERHIDDEN = 262144;
export const SSF_SEPPROCESS = 524288;
export const SSF_NONETCRAWLING = 1048576;
export const SSF_STARTPANELON = 2097152;
export const SSF_SHOWSTARTPAGE = 4194304;
export const SSF_AUTOCHECKSELECT = 8388608;
export const SSF_ICONSONLY = 16777216;
export const SSF_SHOWTYPEOVERLAY = 33554432;
export const SSF_SHOWSTATUSBAR = 67108864;
export const NIM_ADD = 0;
export const NIM_MODIFY = 1;
export const NIM_DELETE = 2;
export const NIM_SETFOCUS = 3;
export const NIM_SETVERSION = 4;
export const NIF_MESSAGE = 1;
export const NIF_ICON = 2;
export const NIF_TIP = 4;
export const NIF_STATE = 8;
export const NIF_INFO = 16;
export const NIF_GUID = 32;
export const NIF_REALTIME = 64;
export const NIF_SHOWTIP = 128;
export const OS_WINDOWS = 0;
export const OS_NT = 1;
export const OS_WIN95ORGREATER = 2;
export const OS_NT4ORGREATER = 3;
export const OS_WIN98ORGREATER = 5;
export const OS_WIN98_GOLD = 6;
export const OS_WIN2000ORGREATER = 7;
export const OS_WIN2000PRO = 8;
export const OS_WIN2000SERVER = 9;
export const OS_WIN2000ADVSERVER = 10;
export const OS_WIN2000DATACENTER = 11;
export const OS_WIN2000TERMINAL = 12;
export const OS_EMBEDDED = 13;
export const OS_TERMINALCLIENT = 14;
export const OS_TERMINALREMOTEADMIN = 15;
export const OS_WIN95_GOLD = 16;
export const OS_MEORGREATER = 17;
export const OS_XPORGREATER = 18;
export const OS_HOME = 19;
export const OS_PROFESSIONAL = 20;
export const OS_DATACENTER = 21;
export const OS_ADVSERVER = 22;
export const OS_SERVER = 23;
export const OS_TERMINALSERVER = 24;
export const OS_PERSONALTERMINALSERVER = 25;
export const OS_FASTUSERSWITCHING = 26;
export const OS_WELCOMELOGONUI = 27;
export const OS_DOMAINMEMBER = 28;
export const OS_ANYSERVER = 29;
export const OS_WOW6432 = 30;
export const OS_WEBSERVER = 31;
export const OS_SMALLBUSINESSSERVER = 32;
export const OS_TABLETPC = 33;
export const OS_SERVERADMINUI = 34;
export const OS_MEDIACENTER = 35;
export const OS_APPLIANCE = 36;
export const SHACF_DEFAULT = 0;
export const SHACF_FILESYSTEM = 1;
export const SHACF_URLALL = 6;
export const SHACF_URLHISTORY = 2;
export const SHACF_URLMRU = 4;
export const SHACF_USETAB = 8;
export const SHACF_FILESYS_ONLY = 16;
export const SHACF_FILESYS_DIRS = 32;
export const SHACF_VIRTUAL_NAMESPACE = 64;
export const SHACF_AUTOSUGGEST_FORCE_ON = 268435456;
export const SHACF_AUTOSUGGEST_FORCE_OFF = 536870912;
export const SHACF_AUTOAPPEND_FORCE_ON = 1073741824;
export const SHACF_AUTOAPPEND_FORCE_OFF = 2147483648;
export const HELPINFO_WINDOW = 1;
export const HELPINFO_MENUITEM = 2;
export const NIIF_NONE = 0;
export const NIIF_INFO = 1;
export const NIIF_WARNING = 2;
export const NIIF_ERROR = 3;
export const NIIF_USER = 4;
export const NIIF_ICON_MASK = 15;
export const NIIF_NOSOUND = 16;
export const NIIF_LARGE_ICON = 32;
export const NIIF_RESPECT_QUIET_TIME = 128;
export const NIS_HIDDEN = 1;
export const NIS_SHAREDICON = 2;
export const GPFIDL_DEFAULT = 0;
export const GPFIDL_ALTNAME = 1;
export const GPFIDL_UNCPRINTER = 2;
export const PERCEIVEDFLAG_UNDEFINED = 0;
export const PERCEIVEDFLAG_SOFTCODED = 1;
export const PERCEIVEDFLAG_HARDCODED = 2;
export const PERCEIVEDFLAG_NATIVESUPPORT = 4;
export const PERCEIVEDFLAG_GDIPLUS = 16;
export const PERCEIVEDFLAG_WMSDK = 32;
export const PERCEIVEDFLAG_ZIPFOLDER = 64;
export const PKEY_PIDSTR_MAX = 10;
export const GPS_DEFAULT = 0;
export const GPS_HANDLERPROPERTIESONLY = 1;
export const GPS_READWRITE = 2;
export const GPS_TEMPORARY = 4;
export const GPS_FASTPROPERTIESONLY = 8;
export const GPS_OPENSLOWITEM = 16;
export const GPS_DELAYCREATION = 32;
export const GPS_BESTEFFORT = 64;
export const GPS_NO_OPLOCK = 128;
export const GPS_PREFERQUERYPROPERTIES = 256;
export const GPS_EXTRINSICPROPERTIES = 512;
export const GPS_EXTRINSICPROPERTIESONLY = 1024;
export const GPS_VOLATILEPROPERTIES = 2048;
export const GPS_VOLATILEPROPERTIESONLY = 4096;
export const GPS_MASK_VALID = 8191;
export const PKA_SET = 0;
export const PKA_APPEND = 1;
export const PKA_DELETE = 2;
export const PSC_NORMAL = 0;
export const PSC_NOTINSOURCE = 1;
export const PSC_DIRTY = 2;
export const PSC_READONLY = 3;
export const PET_DISCRETEVALUE = 0;
export const PET_RANGEDVALUE = 1;
export const PET_DEFAULTVALUE = 2;
export const PET_ENDRANGE = 3;
export const PDTF_DEFAULT = 0;
export const PDTF_MULTIPLEVALUES = 1;
export const PDTF_ISINNATE = 2;
export const PDTF_ISGROUP = 4;
export const PDTF_CANGROUPBY = 8;
export const PDTF_CANSTACKBY = 16;
export const PDTF_ISTREEPROPERTY = 32;
export const PDTF_INCLUDEINFULLTEXTQUERY = 64;
export const PDTF_ISVIEWABLE = 128;
export const PDTF_ISQUERYABLE = 256;
export const PDTF_CANBEPURGED = 512;
export const PDTF_SEARCHRAWVALUE = 1024;
export const PDTF_DONTCOERCEEMPTYSTRINGS = 2048;
export const PDTF_ALWAYSINSUPPLEMENTALSTORE = 4096;
export const PDTF_ISSYSTEMPROPERTY = 2147483648;
export const PDTF_MASK_ALL = 2147491839;
export const PDVF_DEFAULT = 0;
export const PDVF_CENTERALIGN = 1;
export const PDVF_RIGHTALIGN = 2;
export const PDVF_BEGINNEWGROUP = 4;
export const PDVF_FILLAREA = 8;
export const PDVF_SORTDESCENDING = 16;
export const PDVF_SHOWONLYIFPRESENT = 32;
export const PDVF_SHOWBYDEFAULT = 64;
export const PDVF_SHOWINPRIMARYLIST = 128;
export const PDVF_SHOWINSECONDARYLIST = 256;
export const PDVF_HIDELABEL = 512;
export const PDVF_HIDDEN = 2048;
export const PDVF_CANWRAP = 4096;
export const PDVF_MASK_ALL = 7167;
export const PDDT_STRING = 0;
export const PDDT_NUMBER = 1;
export const PDDT_BOOLEAN = 2;
export const PDDT_DATETIME = 3;
export const PDDT_ENUMERATED = 4;
export const PDGR_DISCRETE = 0;
export const PDGR_ALPHANUMERIC = 1;
export const PDGR_SIZE = 2;
export const PDGR_DYNAMIC = 3;
export const PDGR_DATE = 4;
export const PDGR_PERCENT = 5;
export const PDGR_ENUMERATED = 6;
export const PDFF_DEFAULT = 0;
export const PDFF_PREFIXNAME = 1;
export const PDFF_FILENAME = 2;
export const PDFF_ALWAYSKB = 4;
export const PDFF_RESERVED_RIGHTTOLEFT = 8;
export const PDFF_SHORTTIME = 16;
export const PDFF_LONGTIME = 32;
export const PDFF_HIDETIME = 64;
export const PDFF_SHORTDATE = 128;
export const PDFF_LONGDATE = 256;
export const PDFF_HIDEDATE = 512;
export const PDFF_RELATIVEDATE = 1024;
export const PDFF_USEEDITINVITATION = 2048;
export const PDFF_READONLY = 4096;
export const PDFF_NOAUTOREADINGORDER = 8192;
export const PDSD_GENERAL = 0;
export const PDSD_A_Z = 1;
export const PDSD_LOWEST_HIGHEST = 2;
export const PDSD_SMALLEST_BIGGEST = 3;
export const PDSD_OLDEST_NEWEST = 4;
export const PDRDT_GENERAL = 0;
export const PDRDT_DATE = 1;
export const PDRDT_SIZE = 2;
export const PDRDT_COUNT = 3;
export const PDRDT_REVISION = 4;
export const PDRDT_LENGTH = 5;
export const PDRDT_DURATION = 6;
export const PDRDT_SPEED = 7;
export const PDRDT_RATE = 8;
export const PDRDT_RATING = 9;
export const PDRDT_PRIORITY = 10;
export const PDAT_DEFAULT = 0;
export const PDAT_FIRST = 1;
export const PDAT_SUM = 2;
export const PDAT_AVERAGE = 3;
export const PDAT_DATERANGE = 4;
export const PDAT_UNION = 5;
export const PDAT_MAX = 6;
export const PDAT_MIN = 7;
export const PDCOT_NONE = 0;
export const PDCOT_STRING = 1;
export const PDCOT_SIZE = 2;
export const PDCOT_DATETIME = 3;
export const PDCOT_BOOLEAN = 4;
export const PDCOT_NUMBER = 5;
export const PDSIF_DEFAULT = 0;
export const PDSIF_ININVERTEDINDEX = 1;
export const PDSIF_ISCOLUMN = 2;
export const PDSIF_ISCOLUMNSPARSE = 4;
export const PDSIF_ALWAYSINCLUDE = 8;
export const PDSIF_USEFORTYPEAHEAD = 16;
export const PDCIT_NONE = 0;
export const PDCIT_ONDISK = 1;
export const PDCIT_INMEMORY = 2;
export const PDCIT_ONDEMAND = 3;
export const PDCIT_ONDISKALL = 4;
export const PDCIT_ONDISKVECTOR = 5;
export const PDEF_ALL = 0;
export const PDEF_SYSTEM = 1;
export const PDEF_NONSYSTEM = 2;
export const PDEF_VIEWABLE = 3;
export const PDEF_QUERYABLE = 4;
export const PDEF_INFULLTEXTQUERY = 5;
export const PDEF_COLUMN = 6;
export const FPSPS_DEFAULT = 0;
export const FPSPS_READONLY = 1;
export const FPSPS_TREAT_NEW_VALUES_AS_DIRTY = 2;
export const PSTF_UTC = 0;
export const PSTF_LOCAL = 1;
export const PVCU_DEFAULT = 0;
export const PVCU_SECOND = 1;
export const PVCU_MINUTE = 2;
export const PVCU_HOUR = 3;
export const PVCU_DAY = 4;
export const PVCU_MONTH = 5;
export const PVCU_YEAR = 6;
export const PVCF_DEFAULT = 0;
export const PVCF_TREATEMPTYASGREATERTHAN = 1;
export const PVCF_USESTRCMP = 2;
export const PVCF_USESTRCMPC = 4;
export const PVCF_USESTRCMPI = 8;
export const PVCF_USESTRCMPIC = 16;
export const PVCF_DIGITSASNUMBERS_CASESENSITIVE = 32;
export const PVCHF_DEFAULT = 0;
export const PVCHF_NOVALUEPROP = 1;
export const PVCHF_ALPHABOOL = 2;
export const PVCHF_NOUSEROVERRIDE = 4;
export const PVCHF_LOCALBOOL = 8;
export const PVCHF_NOHEXSTRING = 16;
export const DPF_NONE = 0;
export const DPF_MARQUEE = 1;
export const DPF_MARQUEE_COMPLETE = 2;
export const DPF_ERROR = 4;
export const DPF_WARNING = 8;
export const DPF_STOPPED = 16;
export const STRRET_WSTR = 0;
export const STRRET_OFFSET = 1;
export const STRRET_CSTR = 2;
export const PERCEIVED_TYPE_FIRST = `-3`;
export const PERCEIVED_TYPE_CUSTOM = `-3`;
export const PERCEIVED_TYPE_UNSPECIFIED = `-2`;
export const PERCEIVED_TYPE_FOLDER = `-1`;
export const PERCEIVED_TYPE_UNKNOWN = 0;
export const PERCEIVED_TYPE_TEXT = 1;
export const PERCEIVED_TYPE_IMAGE = 2;
export const PERCEIVED_TYPE_AUDIO = 3;
export const PERCEIVED_TYPE_VIDEO = 4;
export const PERCEIVED_TYPE_COMPRESSED = 5;
export const PERCEIVED_TYPE_DOCUMENT = 6;
export const PERCEIVED_TYPE_SYSTEM = 7;
export const PERCEIVED_TYPE_APPLICATION = 8;
export const PERCEIVED_TYPE_GAMEMEDIA = 9;
export const PERCEIVED_TYPE_CONTACTS = 10;
export const PERCEIVED_TYPE_LAST = 10;
export const SHCOLSTATE_DEFAULT = 0;
export const SHCOLSTATE_TYPE_STR = 1;
export const SHCOLSTATE_TYPE_INT = 2;
export const SHCOLSTATE_TYPE_DATE = 3;
export const SHCOLSTATE_TYPEMASK = 15;
export const SHCOLSTATE_ONBYDEFAULT = 16;
export const SHCOLSTATE_SLOW = 32;
export const SHCOLSTATE_EXTENDED = 64;
export const SHCOLSTATE_SECONDARYUI = 128;
export const SHCOLSTATE_HIDDEN = 256;
export const SHCOLSTATE_PREFER_VARCMP = 512;
export const SHCOLSTATE_PREFER_FMTCMP = 1024;
export const SHCOLSTATE_NOSORTBYFOLDERNESS = 2048;
export const SHCOLSTATE_VIEWONLY = 65536;
export const SHCOLSTATE_BATCHREAD = 131072;
export const SHCOLSTATE_NO_GROUPBY = 262144;
export const SHCOLSTATE_FIXED_WIDTH = 4096;
export const SHCOLSTATE_NODPISCALE = 8192;
export const SHCOLSTATE_FIXED_RATIO = 16384;
export const SHCOLSTATE_DISPLAYMASK = 61440;
export const DEVICE_SCALE_FACTOR_INVALID = 0;
export const SCALE_100_PERCENT = 100;
export const SCALE_120_PERCENT = 120;
export const SCALE_125_PERCENT = 125;
export const SCALE_140_PERCENT = 140;
export const SCALE_150_PERCENT = 150;
export const SCALE_160_PERCENT = 160;
export const SCALE_175_PERCENT = 175;
export const SCALE_180_PERCENT = 180;
export const SCALE_200_PERCENT = 200;
export const SCALE_225_PERCENT = 225;
export const SCALE_250_PERCENT = 250;
export const SCALE_300_PERCENT = 300;
export const SCALE_350_PERCENT = 350;
export const SCALE_400_PERCENT = 400;
export const SCALE_450_PERCENT = 450;
export const SCALE_500_PERCENT = 500;
export const ASSOCCLASS_SHELL_KEY = 0;
export const ASSOCCLASS_PROGID_KEY = 1;
export const ASSOCCLASS_PROGID_STR = 2;
export const ASSOCCLASS_CLSID_KEY = 3;
export const ASSOCCLASS_CLSID_STR = 4;
export const ASSOCCLASS_APP_KEY = 5;
export const ASSOCCLASS_APP_STR = 6;
export const ASSOCCLASS_SYSTEM_STR = 7;
export const ASSOCCLASS_FOLDER = 8;
export const ASSOCCLASS_STAR = 9;
export const ASSOCCLASS_FIXED_PROGID_STR = 10;
export const ASSOCCLASS_PROTOCOL_STR = 11;
export const SHGDN_NORMAL = 0;
export const SHGDN_INFOLDER = 1;
export const SHGDN_FOREDITING = 4096;
export const SHGDN_FORADDRESSBAR = 16384;
export const SHGDN_FORPARSING = 32768;
export const SHCONTF_CHECKING_FOR_CHILDREN = 16;
export const SHCONTF_FOLDERS = 32;
export const SHCONTF_NONFOLDERS = 64;
export const SHCONTF_INCLUDEHIDDEN = 128;
export const SHCONTF_INIT_ON_FIRST_NEXT = 256;
export const SHCONTF_NETPRINTERSRCH = 512;
export const SHCONTF_SHAREABLE = 1024;
export const SHCONTF_STORAGE = 2048;
export const SHCONTF_NAVIGATION_ENUM = 4096;
export const SHCONTF_FASTITEMS = 8192;
export const SHCONTF_FLATLIST = 16384;
export const SHCONTF_ENABLE_ASYNC = 32768;
export const SHCONTF_INCLUDESUPERHIDDEN = 65536;
export const SPFF_NONE = 0;
export const SPFF_DOWNLOAD_BY_DEFAULT = 1;
export const SPFF_CREATED_ON_THIS_DEVICE = 2;
export const MUS_COMPLETE = 0;
export const MUS_USERINPUTNEEDED = 1;
export const MUS_FAILED = 2;
export const FEM_VIEWRESULT = 0;
export const FEM_NAVIGATION = 1;
export const FWF_NONE = 0;
export const FWF_AUTOARRANGE = 1;
export const FWF_ABBREVIATEDNAMES = 2;
export const FWF_SNAPTOGRID = 4;
export const FWF_OWNERDATA = 8;
export const FWF_BESTFITWINDOW = 16;
export const FWF_DESKTOP = 32;
export const FWF_SINGLESEL = 64;
export const FWF_NOSUBFOLDERS = 128;
export const FWF_TRANSPARENT = 256;
export const FWF_NOCLIENTEDGE = 512;
export const FWF_NOSCROLL = 1024;
export const FWF_ALIGNLEFT = 2048;
export const FWF_NOICONS = 4096;
export const FWF_SHOWSELALWAYS = 8192;
export const FWF_NOVISIBLE = 16384;
export const FWF_SINGLECLICKACTIVATE = 32768;
export const FWF_NOWEBVIEW = 65536;
export const FWF_HIDEFILENAMES = 131072;
export const FWF_CHECKSELECT = 262144;
export const FWF_NOENUMREFRESH = 524288;
export const FWF_NOGROUPING = 1048576;
export const FWF_FULLROWSELECT = 2097152;
export const FWF_NOFILTERS = 4194304;
export const FWF_NOCOLUMNHEADER = 8388608;
export const FWF_NOHEADERINALLVIEWS = 16777216;
export const FWF_EXTENDEDTILES = 33554432;
export const FWF_TRICHECKSELECT = 67108864;
export const FWF_AUTOCHECKSELECT = 134217728;
export const FWF_NOBROWSERVIEWSTATE = 268435456;
export const FWF_SUBSETGROUPS = 536870912;
export const FWF_USESEARCHFOLDER = 1073741824;
export const FWF_ALLOWRTLREADING = `-2147483648`;
export const FVM_AUTO = `-1`;
export const FVM_FIRST = 1;
export const FVM_ICON = 1;
export const FVM_SMALLICON = 2;
export const FVM_LIST = 3;
export const FVM_DETAILS = 4;
export const FVM_THUMBNAIL = 5;
export const FVM_TILE = 6;
export const FVM_THUMBSTRIP = 7;
export const FVM_CONTENT = 8;
export const FVM_LAST = 8;
export const FLVM_UNSPECIFIED = `-1`;
export const FLVM_FIRST = 1;
export const FLVM_DETAILS = 1;
export const FLVM_TILES = 2;
export const FLVM_ICONS = 3;
export const FLVM_LIST = 4;
export const FLVM_CONTENT = 5;
export const FLVM_LAST = 5;
export const SVSI_DESELECT = 0;
export const SVSI_SELECT = 1;
export const SVSI_EDIT = 3;
export const SVSI_DESELECTOTHERS = 4;
export const SVSI_ENSUREVISIBLE = 8;
export const SVSI_FOCUSED = 16;
export const SVSI_TRANSLATEPT = 32;
export const SVSI_SELECTIONMARK = 64;
export const SVSI_POSITIONITEM = 128;
export const SVSI_CHECK = 256;
export const SVSI_CHECK2 = 512;
export const SVSI_KEYBOARDSELECT = 1025;
export const SVSI_NOTAKEFOCUS = 1073741824;
export const SVGIO_BACKGROUND = 0;
export const SVGIO_SELECTION = 1;
export const SVGIO_ALLVIEW = 2;
export const SVGIO_CHECKED = 3;
export const SVGIO_TYPE_MASK = 15;
export const SVGIO_FLAG_VIEWORDER = `-2147483648`;
export const SVUIA_DEACTIVATE = 0;
export const SVUIA_ACTIVATE_NOFOCUS = 1;
export const SVUIA_ACTIVATE_FOCUS = 2;
export const SVUIA_INPLACEACTIVATE = 3;
export const SORT_DESCENDING = `-1`;
export const SORT_ASCENDING = 1;
export const FVST_EMPTYTEXT = 0;
export const CM_MASK_WIDTH = 1;
export const CM_MASK_DEFAULTWIDTH = 2;
export const CM_MASK_IDEALWIDTH = 4;
export const CM_MASK_NAME = 8;
export const CM_MASK_STATE = 16;
export const CM_STATE_NONE = 0;
export const CM_STATE_VISIBLE = 1;
export const CM_STATE_FIXEDWIDTH = 2;
export const CM_STATE_NOSORTBYFOLDERNESS = 4;
export const CM_STATE_ALWAYSVISIBLE = 8;
export const CM_ENUM_ALL = 1;
export const CM_ENUM_VISIBLE = 2;
export const CM_WIDTH_USEDEFAULT = `-1`;
export const CM_WIDTH_AUTOSIZE = `-2`;
export const SIGDN_NORMALDISPLAY = 0;
export const SIGDN_PARENTRELATIVEPARSING = `-2147385343`;
export const SIGDN_DESKTOPABSOLUTEPARSING = `-2147319808`;
export const SIGDN_PARENTRELATIVEEDITING = `-2147282943`;
export const SIGDN_DESKTOPABSOLUTEEDITING = `-2147172352`;
export const SIGDN_FILESYSPATH = `-2147123200`;
export const SIGDN_URL = `-2147057664`;
export const SIGDN_PARENTRELATIVEFORADDRESSBAR = `-2146975743`;
export const SIGDN_PARENTRELATIVE = `-2146959359`;
export const SIGDN_PARENTRELATIVEFORUI = `-2146877439`;
export const SICHINT_DISPLAY = 0;
export const SICHINT_ALLFIELDS = `-2147483648`;
export const SICHINT_CANONICAL = 268435456;
export const SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = 536870912;
export const DOGIF_DEFAULT = 0;
export const DOGIF_TRAVERSE_LINK = 1;
export const DOGIF_NO_HDROP = 2;
export const DOGIF_NO_URL = 4;
export const DOGIF_ONLY_IF_ONE = 8;
export const SIIGBF_RESIZETOFIT = 0;
export const SIIGBF_BIGGERSIZEOK = 1;
export const SIIGBF_MEMORYONLY = 2;
export const SIIGBF_ICONONLY = 4;
export const SIIGBF_THUMBNAILONLY = 8;
export const SIIGBF_INCACHEONLY = 16;
export const SIIGBF_CROPTOSQUARE = 32;
export const SIIGBF_WIDETHUMBNAILS = 64;
export const SIIGBF_ICONBACKGROUND = 128;
export const SIIGBF_SCALEUP = 256;
export const STGOP_MOVE = 1;
export const STGOP_COPY = 2;
export const STGOP_SYNC = 3;
export const STGOP_REMOVE = 5;
export const STGOP_RENAME = 6;
export const STGOP_APPLYPROPERTIES = 8;
export const STGOP_NEW = 10;
export const TSF_NORMAL = 0;
export const TSF_FAIL_EXIST = 0;
export const TSF_RENAME_EXIST = 1;
export const TSF_OVERWRITE_EXIST = 2;
export const TSF_ALLOW_DECRYPTION = 4;
export const TSF_NO_SECURITY = 8;
export const TSF_COPY_CREATION_TIME = 16;
export const TSF_COPY_WRITE_TIME = 32;
export const TSF_USE_FULL_ACCESS = 64;
export const TSF_DELETE_RECYCLE_IF_POSSIBLE = 128;
export const TSF_COPY_HARD_LINK = 256;
export const TSF_COPY_LOCALIZED_NAME = 512;
export const TSF_MOVE_AS_COPY_DELETE = 1024;
export const TSF_SUSPEND_SHELLEVENTS = 2048;
export const TS_NONE = 0;
export const TS_PERFORMING = 1;
export const TS_PREPARING = 2;
export const TS_INDETERMINATE = 4;
export const SIATTRIBFLAGS_AND = 1;
export const SIATTRIBFLAGS_OR = 2;
export const SIATTRIBFLAGS_APPCOMPAT = 3;
export const SIATTRIBFLAGS_MASK = 3;
export const SIATTRIBFLAGS_ALLITEMS = 16384;
export const CATINFO_NORMAL = 0;
export const CATINFO_COLLAPSED = 1;
export const CATINFO_HIDDEN = 2;
export const CATINFO_EXPANDED = 4;
export const CATINFO_NOHEADER = 8;
export const CATINFO_NOTCOLLAPSIBLE = 16;
export const CATINFO_NOHEADERCOUNT = 32;
export const CATINFO_SUBSETTED = 64;
export const CATINFO_SEPARATE_IMAGES = 128;
export const CATINFO_SHOWEMPTY = 256;
export const CATSORT_DEFAULT = 0;
export const CATSORT_NAME = 1;
export const SLR_NONE = 0;
export const SLR_NO_UI = 1;
export const SLR_ANY_MATCH = 2;
export const SLR_UPDATE = 4;
export const SLR_NOUPDATE = 8;
export const SLR_NOSEARCH = 16;
export const SLR_NOTRACK = 32;
export const SLR_NOLINKINFO = 64;
export const SLR_INVOKE_MSI = 128;
export const SLR_NO_UI_WITH_MSG_PUMP = 257;
export const SLR_OFFER_DELETE_WITHOUT_FILE = 512;
export const SLR_KNOWNFOLDER = 1024;
export const SLR_MACHINE_IN_LOCAL_TARGET = 2048;
export const SLR_UPDATE_MACHINE_AND_SID = 4096;
export const SLR_NO_OBJECT_ID = 8192;
export const SLGP_SHORTPATH = 1;
export const SLGP_UNCPRIORITY = 2;
export const SLGP_RAWPATH = 4;
export const SLGP_RELATIVEPRIORITY = 8;
export const SPINITF_NORMAL = 0;
export const SPINITF_MODAL = 1;
export const SPINITF_NOMINIMIZE = 8;
export const SPBEGINF_NORMAL = 0;
export const SPBEGINF_AUTOTIME = 2;
export const SPBEGINF_NOPROGRESSBAR = 16;
export const SPBEGINF_MARQUEEPROGRESS = 32;
export const SPBEGINF_NOCANCELBUTTON = 64;
export const SPACTION_NONE = 0;
export const SPACTION_MOVING = 1;
export const SPACTION_COPYING = 2;
export const SPACTION_RECYCLING = 3;
export const SPACTION_APPLYINGATTRIBS = 4;
export const SPACTION_DOWNLOADING = 5;
export const SPACTION_SEARCHING_INTERNET = 6;
export const SPACTION_CALCULATING = 7;
export const SPACTION_UPLOADING = 8;
export const SPACTION_SEARCHING_FILES = 9;
export const SPACTION_DELETING = 10;
export const SPACTION_RENAMING = 11;
export const SPACTION_FORMATTING = 12;
export const SPACTION_COPY_MOVING = 13;
export const SPTEXT_ACTIONDESCRIPTION = 1;
export const SPTEXT_ACTIONDETAIL = 2;
export const EXPPS_FILETYPES = 1;
export const DBID_BANDINFOCHANGED = 0;
export const DBID_SHOWONLY = 1;
export const DBID_MAXIMIZEBAND = 2;
export const DBID_PUSHCHEVRON = 3;
export const DBID_DELAYINIT = 4;
export const DBID_FINISHINIT = 5;
export const DBID_SETWINDOWTHEME = 6;
export const DBID_PERMITAUTOHIDE = 7;
export const THBF_ENABLED = 0;
export const THBF_DISABLED = 1;
export const THBF_DISMISSONCLICK = 2;
export const THBF_NOBACKGROUND = 4;
export const THBF_HIDDEN = 8;
export const THBF_NONINTERACTIVE = 16;
export const THB_BITMAP = 1;
export const THB_ICON = 2;
export const THB_TOOLTIP = 4;
export const THB_FLAGS = 8;
export const TBPF_NOPROGRESS = 0;
export const TBPF_INDETERMINATE = 1;
export const TBPF_NORMAL = 2;
export const TBPF_ERROR = 4;
export const TBPF_PAUSED = 8;
export const STPF_NONE = 0;
export const STPF_USEAPPTHUMBNAILALWAYS = 1;
export const STPF_USEAPPTHUMBNAILWHENACTIVE = 2;
export const STPF_USEAPPPEEKALWAYS = 4;
export const STPF_USEAPPPEEKWHENACTIVE = 8;
export const EBO_NONE = 0;
export const EBO_NAVIGATEONCE = 1;
export const EBO_SHOWFRAMES = 2;
export const EBO_ALWAYSNAVIGATE = 4;
export const EBO_NOTRAVELLOG = 8;
export const EBO_NOWRAPPERWINDOW = 16;
export const EBO_HTMLSHAREPOINTVIEW = 32;
export const EBO_NOBORDER = 64;
export const EBO_NOPERSISTVIEWSTATE = 128;
export const EBF_NONE = 0;
export const EBF_SELECTFROMDATAOBJECT = 256;
export const EBF_NODROPTARGET = 512;
export const OPPROGDLG_DEFAULT = 0;
export const OPPROGDLG_ENABLEPAUSE = 128;
export const OPPROGDLG_ALLOWUNDO = 256;
export const OPPROGDLG_DONTDISPLAYSOURCEPATH = 512;
export const OPPROGDLG_DONTDISPLAYDESTPATH = 1024;
export const OPPROGDLG_NOMULTIDAYESTIMATES = 2048;
export const OPPROGDLG_DONTDISPLAYLOCATIONS = 4096;
export const PDM_DEFAULT = 0;
export const PDM_RUN = 1;
export const PDM_PREFLIGHT = 2;
export const PDM_UNDOING = 4;
export const PDM_ERRORSBLOCKING = 8;
export const PDM_INDETERMINATE = 16;
export const FOF2_NONE = 0;
export const FOF2_MERGEFOLDERSONCOLLISION = 1;
export const NSWF_DEFAULT = 0;
export const NSWF_NONE_IMPLIES_ALL = 1;
export const NSWF_ONE_IMPLIES_ALL = 2;
export const NSWF_DONT_TRAVERSE_LINKS = 4;
export const NSWF_DONT_ACCUMULATE_RESULT = 8;
export const NSWF_TRAVERSE_STREAM_JUNCTIONS = 16;
export const NSWF_FILESYSTEM_ONLY = 32;
export const NSWF_SHOW_PROGRESS = 64;
export const NSWF_FLAG_VIEWORDER = 128;
export const NSWF_IGNORE_AUTOPLAY_HIDA = 256;
export const NSWF_ASYNC = 512;
export const NSWF_DONT_RESOLVE_LINKS = 1024;
export const NSWF_ACCUMULATE_FOLDERS = 2048;
export const NSWF_DONT_SORT = 4096;
export const NSWF_USE_TRANSFER_MEDIUM = 8192;
export const NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 16384;
export const NSWF_ANY_IMPLIES_ALL = 32768;
export const BSID_BANDADDED = 0;
export const BSID_BANDREMOVED = 1;
export const MBHANDCID_PIDLSELECT = 0;
export const MPOS_EXECUTE = 0;
export const MPOS_FULLCANCEL = 1;
export const MPOS_CANCELLEVEL = 2;
export const MPOS_SELECTLEFT = 3;
export const MPOS_SELECTRIGHT = 4;
export const MPOS_CHILDTRACKING = 5;
export const MPPF_SETFOCUS = 1;
export const MPPF_INITIALSELECT = 2;
export const MPPF_NOANIMATE = 4;
export const MPPF_KEYBOARD = 16;
export const MPPF_REPOSITION = 32;
export const MPPF_FORCEZORDER = 64;
export const MPPF_FINALSELECT = 128;
export const MPPF_TOP = 536870912;
export const MPPF_LEFT = 1073741824;
export const MPPF_RIGHT = 1610612736;
export const MPPF_BOTTOM = `-2147483648`;
export const MPPF_POS_MASK = `-536870912`;
export const MPPF_ALIGN_LEFT = 33554432;
export const MPPF_ALIGN_RIGHT = 67108864;
export const FUT_PLAYING = 0;
export const FUT_EDITING = 1;
export const FUT_GENERIC = 2;
export const FDEOR_DEFAULT = 0;
export const FDEOR_ACCEPT = 1;
export const FDEOR_REFUSE = 2;
export const FDESVR_DEFAULT = 0;
export const FDESVR_ACCEPT = 1;
export const FDESVR_REFUSE = 2;
export const FDAP_BOTTOM = 0;
export const FDAP_TOP = 1;
export const FOS_OVERWRITEPROMPT = 2;
export const FOS_STRICTFILETYPES = 4;
export const FOS_NOCHANGEDIR = 8;
export const FOS_PICKFOLDERS = 32;
export const FOS_FORCEFILESYSTEM = 64;
export const FOS_ALLNONSTORAGEITEMS = 128;
export const FOS_NOVALIDATE = 256;
export const FOS_ALLOWMULTISELECT = 512;
export const FOS_PATHMUSTEXIST = 2048;
export const FOS_FILEMUSTEXIST = 4096;
export const FOS_CREATEPROMPT = 8192;
export const FOS_SHAREAWARE = 16384;
export const FOS_NOREADONLYRETURN = 32768;
export const FOS_NOTESTFILECREATE = 65536;
export const FOS_HIDEMRUPLACES = 131072;
export const FOS_HIDEPINNEDPLACES = 262144;
export const FOS_NODEREFERENCELINKS = 1048576;
export const FOS_OKBUTTONNEEDSINTERACTION = 2097152;
export const FOS_DONTADDTORECENT = 33554432;
export const FOS_FORCESHOWHIDDEN = 268435456;
export const FOS_DEFAULTNOMINIMODE = 536870912;
export const FOS_FORCEPREVIEWPANEON = 1073741824;
export const FOS_SUPPORTSTREAMABLEITEMS = 2147483648;
export const CDCS_INACTIVE = 0;
export const CDCS_ENABLED = 1;
export const CDCS_VISIBLE = 2;
export const CDCS_ENABLEDVISIBLE = 3;
export const AL_MACHINE = 0;
export const AL_EFFECTIVE = 1;
export const AL_USER = 2;
export const AT_FILEEXTENSION = 0;
export const AT_URLPROTOCOL = 1;
export const AT_STARTMENUCLIENT = 2;
export const AT_MIMETYPE = 3;
export const BFO_NONE = 0;
export const BFO_BROWSER_PERSIST_SETTINGS = 1;
export const BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = 2;
export const BFO_BOTH_OPTIONS = 4;
export const BIF_PREFER_INTERNET_SHORTCUT = 8;
export const BFO_BROWSE_NO_IN_NEW_PROCESS = 16;
export const BFO_ENABLE_HYPERLINK_TRACKING = 32;
export const BFO_USE_IE_OFFLINE_SUPPORT = 64;
export const BFO_SUBSTITUE_INTERNET_START_PAGE = 128;
export const BFO_USE_IE_LOGOBANDING = 256;
export const BFO_ADD_IE_TOCAPTIONBAR = 512;
export const BFO_USE_DIALUP_REF = 1024;
export const BFO_USE_IE_TOOLBAR = 2048;
export const BFO_NO_PARENT_FOLDER_SUPPORT = 4096;
export const BFO_NO_REOPEN_NEXT_RESTART = 8192;
export const BFO_GO_HOME_PAGE = 16384;
export const BFO_PREFER_IEPROCESS = 32768;
export const BFO_SHOW_NAVIGATION_CANCELLED = 65536;
export const BFO_USE_IE_STATUSBAR = 131072;
export const BFO_QUERY_ALL = `-1`;
export const NWMF_UNLOADING = 1;
export const NWMF_USERINITED = 2;
export const NWMF_FIRST = 4;
export const NWMF_OVERRIDEKEY = 8;
export const NWMF_SHOWHELP = 16;
export const NWMF_HTMLDIALOG = 32;
export const NWMF_FROMDIALOGCHILD = 64;
export const NWMF_USERREQUESTED = 128;
export const NWMF_USERALLOWED = 256;
export const NWMF_FORCEWINDOW = 65536;
export const NWMF_FORCETAB = 131072;
export const NWMF_SUGGESTWINDOW = 262144;
export const NWMF_SUGGESTTAB = 524288;
export const NWMF_INACTIVETAB = 1048576;
export const ATTACHMENT_PROMPT_NONE = 0;
export const ATTACHMENT_PROMPT_SAVE = 1;
export const ATTACHMENT_PROMPT_EXEC = 2;
export const ATTACHMENT_PROMPT_EXEC_OR_SAVE = 3;
export const ATTACHMENT_ACTION_CANCEL = 0;
export const ATTACHMENT_ACTION_SAVE = 1;
export const ATTACHMENT_ACTION_EXEC = 2;
export const SMIM_TYPE = 1;
export const SMIM_FLAGS = 2;
export const SMIM_ICON = 4;
export const SMIT_SEPARATOR = 1;
export const SMIT_STRING = 2;
export const SMIF_ICON = 1;
export const SMIF_ACCELERATOR = 2;
export const SMIF_DROPTARGET = 4;
export const SMIF_SUBMENU = 8;
export const SMIF_CHECKED = 32;
export const SMIF_DROPCASCADE = 64;
export const SMIF_HIDDEN = 128;
export const SMIF_DISABLED = 256;
export const SMIF_TRACKPOPUP = 512;
export const SMIF_DEMOTED = 1024;
export const SMIF_ALTSTATE = 2048;
export const SMIF_DRAGNDROP = 4096;
export const SMIF_NEW = 8192;
export const KF_CATEGORY_VIRTUAL = 1;
export const KF_CATEGORY_FIXED = 2;
export const KF_CATEGORY_COMMON = 3;
export const KF_CATEGORY_PERUSER = 4;
export const KFDF_LOCAL_REDIRECT_ONLY = 2;
export const KFDF_ROAMABLE = 4;
export const KFDF_PRECREATE = 8;
export const KFDF_STREAM = 16;
export const KFDF_PUBLISHEXPANDEDPATH = 32;
export const KFDF_NO_REDIRECT_UI = 64;
export const KF_REDIRECT_USER_EXCLUSIVE = 1;
export const KF_REDIRECT_COPY_SOURCE_DACL = 2;
export const KF_REDIRECT_OWNER_USER = 4;
export const KF_REDIRECT_SET_OWNER_EXPLICIT = 8;
export const KF_REDIRECT_CHECK_ONLY = 16;
export const KF_REDIRECT_WITH_UI = 32;
export const KF_REDIRECT_UNPIN = 64;
export const KF_REDIRECT_PIN = 128;
export const KF_REDIRECT_COPY_CONTENTS = 512;
export const KF_REDIRECT_DEL_SOURCE_CONTENTS = 1024;
export const KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = 2048;
export const KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = 255;
export const KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = 1;
export const KF_REDIRECTION_CAPABILITIES_DENY_ALL = 1048320;
export const KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = 256;
export const KF_REDIRECTION_CAPABILITIES_DENY_POLICY = 512;
export const KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = 1024;
export const FFFP_EXACTMATCH = 0;
export const FFFP_NEARESTPARENTMATCH = 1;
export const SHARE_ROLE_INVALID = `-1`;
export const SHARE_ROLE_READER = 0;
export const SHARE_ROLE_CONTRIBUTOR = 1;
export const SHARE_ROLE_CO_OWNER = 2;
export const SHARE_ROLE_OWNER = 3;
export const SHARE_ROLE_CUSTOM = 4;
export const SHARE_ROLE_MIXED = 5;
export const DEFSHAREID_USERS = 1;
export const DEFSHAREID_PUBLIC = 2;
export const NMCII_NONE = 0;
export const NMCII_ITEMS = 1;
export const NMCII_FOLDERS = 2;
export const NMCSAEI_SELECT = 0;
export const NMCSAEI_EDIT = 1;
export const NSTCS_HASEXPANDOS = 1;
export const NSTCS_HASLINES = 2;
export const NSTCS_SINGLECLICKEXPAND = 4;
export const NSTCS_FULLROWSELECT = 8;
export const NSTCS_SPRINGEXPAND = 16;
export const NSTCS_HORIZONTALSCROLL = 32;
export const NSTCS_ROOTHASEXPANDO = 64;
export const NSTCS_SHOWSELECTIONALWAYS = 128;
export const NSTCS_NOINFOTIP = 512;
export const NSTCS_EVENHEIGHT = 1024;
export const NSTCS_NOREPLACEOPEN = 2048;
export const NSTCS_DISABLEDRAGDROP = 4096;
export const NSTCS_NOORDERSTREAM = 8192;
export const NSTCS_RICHTOOLTIP = 16384;
export const NSTCS_BORDER = 32768;
export const NSTCS_NOEDITLABELS = 65536;
export const NSTCS_TABSTOP = 131072;
export const NSTCS_FAVORITESMODE = 524288;
export const NSTCS_AUTOHSCROLL = 1048576;
export const NSTCS_FADEINOUTEXPANDOS = 2097152;
export const NSTCS_EMPTYTEXT = 4194304;
export const NSTCS_CHECKBOXES = 8388608;
export const NSTCS_PARTIALCHECKBOXES = 16777216;
export const NSTCS_EXCLUSIONCHECKBOXES = 33554432;
export const NSTCS_DIMMEDCHECKBOXES = 67108864;
export const NSTCS_NOINDENTCHECKS = 134217728;
export const NSTCS_ALLOWJUNCTIONS = 268435456;
export const NSTCS_SHOWTABSBUTTON = 536870912;
export const NSTCS_SHOWDELETEBUTTON = 1073741824;
export const NSTCS_SHOWREFRESHBUTTON = `-2147483648`;
export const NSTCRS_VISIBLE = 0;
export const NSTCRS_HIDDEN = 1;
export const NSTCRS_EXPANDED = 2;
export const NSTCIS_NONE = 0;
export const NSTCIS_SELECTED = 1;
export const NSTCIS_EXPANDED = 2;
export const NSTCIS_BOLD = 4;
export const NSTCIS_DISABLED = 8;
export const NSTCIS_SELECTEDNOEXPAND = 16;
export const NSTCGNI_NEXT = 0;
export const NSTCGNI_NEXTVISIBLE = 1;
export const NSTCGNI_PREV = 2;
export const NSTCGNI_PREVVISIBLE = 3;
export const NSTCGNI_PARENT = 4;
export const NSTCGNI_CHILD = 5;
export const NSTCGNI_FIRSTVISIBLE = 6;
export const NSTCGNI_LASTVISIBLE = 7;
export const NSTCFC_NONE = 0;
export const NSTCFC_PINNEDITEMFILTERING = 1;
export const NSTCFC_DELAY_REGISTER_NOTIFY = 2;
export const EPS_DONTCARE = 0;
export const EPS_DEFAULT_ON = 1;
export const EPS_DEFAULT_OFF = 2;
export const EPS_STATEMASK = 65535;
export const EPS_INITIALSTATE = 65536;
export const EPS_FORCE = 131072;
export const ECS_ENABLED = 0;
export const ECS_DISABLED = 1;
export const ECS_HIDDEN = 2;
export const ECS_CHECKBOX = 4;
export const ECS_CHECKED = 8;
export const ECS_RADIOCHECK = 16;
export const ECF_DEFAULT = 0;
export const ECF_HASSUBCOMMANDS = 1;
export const ECF_HASSPLITBUTTON = 2;
export const ECF_HIDELABEL = 4;
export const ECF_ISSEPARATOR = 8;
export const ECF_HASLUASHIELD = 16;
export const ECF_SEPARATORBEFORE = 32;
export const ECF_SEPARATORAFTER = 64;
export const ECF_ISDROPDOWN = 128;
export const ECF_TOGGLEABLE = 256;
export const ECF_AUTOMENUICONS = 512;
export const CPVIEW_CLASSIC = 0;
export const CPVIEW_ALLITEMS = 0;
export const CPVIEW_CATEGORY = 1;
export const CPVIEW_HOME = 1;
export const KDC_FREQUENT = 1;
export const KDC_RECENT = 2;
export const ADLT_RECENT = 0;
export const ADLT_FREQUENT = 1;
export const DSO_SHUFFLEIMAGES = 1;
export const DSS_ENABLED = 1;
export const DSS_SLIDESHOW = 2;
export const DSS_DISABLED_BY_REMOTE_SESSION = 4;
export const DSD_FORWARD = 0;
export const DSD_BACKWARD = 1;
export const DWPOS_CENTER = 0;
export const DWPOS_TILE = 1;
export const DWPOS_STRETCH = 2;
export const DWPOS_FIT = 3;
export const DWPOS_FILL = 4;
export const DWPOS_SPAN = 5;
export const HGSC_NONE = 0;
export const HGSC_MUSICLIBRARY = 1;
export const HGSC_PICTURESLIBRARY = 2;
export const HGSC_VIDEOSLIBRARY = 4;
export const HGSC_DOCUMENTSLIBRARY = 8;
export const HGSC_PRINTERS = 16;
export const LFF_FORCEFILESYSTEM = 1;
export const LFF_STORAGEITEMS = 2;
export const LFF_ALLITEMS = 3;
export const LOF_DEFAULT = 0;
export const LOF_PINNEDTONAVPANE = 1;
export const LOF_MASK_ALL = 1;
export const DSFT_DETECT = 1;
export const DSFT_PRIVATE = 2;
export const DSFT_PUBLIC = 3;
export const LSF_FAILIFTHERE = 0;
export const LSF_OVERRIDEEXISTING = 1;
export const LSF_MAKEUNIQUENAME = 2;
export const DFMR_DEFAULT = 0;
export const DFMR_NO_STATIC_VERBS = 8;
export const DFMR_STATIC_VERBS_ONLY = 16;
export const DFMR_NO_RESOURCE_VERBS = 32;
export const DFMR_OPTIN_HANDLERS_ONLY = 64;
export const DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = 128;
export const DFMR_USE_SPECIFIED_HANDLERS = 256;
export const DFMR_USE_SPECIFIED_VERBS = 512;
export const DFMR_NO_ASYNC_VERBS = 1024;
export const DFMR_NO_NATIVECPU_VERBS = 2048;
export const DFMR_NO_NONWOW_VERBS = 4096;
export const AO_NONE = 0;
export const AO_DESIGNMODE = 1;
export const AO_NOERRORUI = 2;
export const AO_NOSPLASHSCREEN = 4;
export const AO_PRELAUNCH = 33554432;
export const LMD_DEFAULT = 0;
export const LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = 1;
export const AHTYPE_UNDEFINED = 0;
export const AHTYPE_USER_APPLICATION = 8;
export const AHTYPE_ANY_APPLICATION = 16;
export const AHTYPE_MACHINEDEFAULT = 32;
export const AHTYPE_PROGID = 64;
export const AHTYPE_APPLICATION = 128;
export const AHTYPE_CLASS_APPLICATION = 256;
export const AHTYPE_ANY_PROGID = 512;
export const ASSOC_FILTER_NONE = 0;
export const ASSOC_FILTER_RECOMMENDED = 1;
export const MAV_UNKNOWN = 0;
export const MAV_NO_APP_VISIBLE = 1;
export const MAV_APP_VISIBLE = 2;
export const PES_UNKNOWN = 0;
export const PES_RUNNING = 1;
export const PES_SUSPENDING = 2;
export const PES_SUSPENDED = 3;
export const PES_TERMINATED = 4;
export const AHE_DESKTOP = 0;
export const AHE_IMMERSIVE = 1;
export const ECHUIM_DESKTOP = 0;
export const ECHUIM_IMMERSIVE = 1;
export const ECHUIM_SYSTEM_LAUNCHER = 2;
export const AVS_FULLSCREEN_LANDSCAPE = 0;
export const AVS_FILLED = 1;
export const AVS_SNAPPED = 2;
export const AVS_FULLSCREEN_PORTRAIT = 3;
export const EGK_TOUCH = 0;
export const EGK_KEYBOARD = 1;
export const EGK_MOUSE = 2;
export const NDO_LANDSCAPE = 0;
export const NDO_PORTRAIT = 1;
export const AVO_LANDSCAPE = 0;
export const AVO_PORTRAIT = 1;
export const ADE_NONE = 0;
export const ADE_LEFT = 1;
export const ADE_RIGHT = 2;
export const AVMW_DEFAULT = 0;
export const AVMW_320 = 1;
export const AVMW_500 = 2;
export const AVSP_DEFAULT = 0;
export const AVSP_USE_LESS = 1;
export const AVSP_USE_HALF = 2;
export const AVSP_USE_MORE = 3;
export const AVSP_USE_MINIMUM = 4;
export const AVSP_USE_NONE = 5;
export const AVSP_CUSTOM = 6;
export const FP_DEFAULT = 0;
export const FP_ABOVE = 1;
export const FP_BELOW = 2;
export const FP_LEFT = 3;
export const FP_RIGHT = 4;
export const BNE_Rendered = 0;
export const BNE_Hovered = 1;
export const BNE_Closed = 2;
export const BNE_Dismissed = 3;
export const BNE_Button1Clicked = 4;
export const BNE_Button2Clicked = 5;
export const SOT_DEFAULT = 0;
export const SOT_IGNORE_FOLDERNESS = 1;
export const FVO_DEFAULT = 0;
export const FVO_VISTALAYOUT = 1;
export const FVO_CUSTOMPOSITION = 2;
export const FVO_CUSTOMORDERING = 4;
export const FVO_SUPPORTHYPERLINKS = 8;
export const FVO_NOANIMATIONS = 16;
export const FVO_NOSCROLLTIPS = 32;
export const SV3CVW3_DEFAULT = 0;
export const SV3CVW3_NONINTERACTIVE = 1;
export const SV3CVW3_FORCEVIEWMODE = 2;
export const SV3CVW3_FORCEFOLDERFLAGS = 4;
export const VPWF_DEFAULT = 0;
export const VPWF_ALPHABLEND = 1;
export const VPCF_TEXT = 1;
export const VPCF_BACKGROUND = 2;
export const VPCF_SORTCOLUMN = 3;
export const VPCF_SUBTEXT = 4;
export const VPCF_TEXTBACKGROUND = 5;
export const DSH_ALLOWDROPDESCRIPTIONTEXT = 1;
export const CDBE_RET_DEFAULT = 0;
export const CDBE_RET_DONTRUNOTHEREXTS = 1;
export const CDBE_RET_STOPWIZARD = 2;
export const CDBE_TYPE_MUSIC = 1;
export const CDBE_TYPE_DATA = 2;
export const CDBE_TYPE_ALL = `-1`;
export const NSTCS2_DEFAULT = 0;
export const NSTCS2_INTERRUPTNOTIFICATIONS = 1;
export const NSTCS2_SHOWNULLSPACEMENU = 2;
export const NSTCS2_DISPLAYPADDING = 4;
export const NSTCS2_DISPLAYPINNEDONLY = 8;
export const NTSCS2_NOSINGLETONAUTOEXPAND = 16;
export const NTSCS2_NEVERINSERTNONENUMERATED = 32;
export const NSTCEHT_NOWHERE = 1;
export const NSTCEHT_ONITEMICON = 2;
export const NSTCEHT_ONITEMLABEL = 4;
export const NSTCEHT_ONITEMINDENT = 8;
export const NSTCEHT_ONITEMBUTTON = 16;
export const NSTCEHT_ONITEMRIGHT = 32;
export const NSTCEHT_ONITEMSTATEICON = 64;
export const NSTCEHT_ONITEM = 70;
export const NSTCEHT_ONITEMTABBUTTON = 4096;
export const NSTCECT_LBUTTON = 1;
export const NSTCECT_MBUTTON = 2;
export const NSTCECT_RBUTTON = 3;
export const NSTCECT_BUTTON = 3;
export const NSTCECT_DBLCLICK = 4;
export const UR_RESOLUTION_CHANGE = 0;
export const UR_MONITOR_DISCONNECT = 1;
export const CSC_UPDATECOMMANDS = `-1`;
export const CSC_NAVIGATEFORWARD = 1;
export const CSC_NAVIGATEBACK = 2;
export const secureLockIconUnsecure = 0;
export const secureLockIconMixed = 1;
export const secureLockIconSecureUnknownBits = 2;
export const secureLockIconSecure40Bit = 3;
export const secureLockIconSecure56Bit = 4;
export const secureLockIconSecureFortezza = 5;
export const secureLockIconSecure128Bit = 6;
export const ProtectedModeRedirect = 1;
export const SWC_EXPLORER = 0;
export const SWC_BROWSER = 1;
export const SWC_3RDPARTY = 2;
export const SWC_CALLBACK = 4;
export const SWC_DESKTOP = 8;
export const SWFO_NEEDDISPATCH = 1;
export const SWFO_INCLUDEPENDING = 2;
export const SWFO_COOKIEPASSED = 4;
export const navOpenInNewWindow = 1;
export const navNoHistory = 2;
export const navNoReadFromCache = 4;
export const navNoWriteToCache = 8;
export const navAllowAutosearch = 16;
export const navBrowserBar = 32;
export const navHyperlink = 64;
export const navEnforceRestricted = 128;
export const navNewWindowsManaged = 256;
export const navUntrustedForDownload = 512;
export const navTrustedForActiveX = 1024;
export const navOpenInNewTab = 2048;
export const navOpenInBackgroundTab = 4096;
export const navKeepWordWheelText = 8192;
export const navVirtualTab = 16384;
export const navBlockRedirectsXDomain = 32768;
export const navOpenNewForegroundTab = 65536;
export const navTravelLogScreenshot = 131072;
export const navDeferUnload = 262144;
export const navSpeculative = 524288;
export const navSuggestNewWindow = 1048576;
export const navSuggestNewTab = 2097152;
export const navReserved1 = 4194304;
export const navHomepageNavigate = 8388608;
export const navRefresh = 16777216;
export const navHostNavigation = 33554432;
export const navReserved2 = 67108864;
export const navReserved3 = 134217728;
export const navReserved4 = 268435456;
export const navReserved5 = 536870912;
export const navReserved6 = 1073741824;
export const navReserved7 = `-2147483648`;
export const REFRESH_NORMAL = 0;
export const REFRESH_IFEXPIRED = 1;
export const REFRESH_COMPLETELY = 3;
export const OFS_INACTIVE = `-1`;
export const OFS_ONLINE = 0;
export const OFS_OFFLINE = 1;
export const OFS_SERVERBACK = 2;
export const OFS_DIRTYCACHE = 3;
export const SFVVO_SHOWALLOBJECTS = 1;
export const SFVVO_SHOWEXTENSIONS = 2;
export const SFVVO_SHOWCOMPCOLOR = 8;
export const SFVVO_SHOWSYSFILES = 32;
export const SFVVO_WIN95CLASSIC = 64;
export const SFVVO_DOUBLECLICKINWEBVIEW = 128;
export const SFVVO_DESKTOPHTML = 512;
export const ssfDESKTOP = 0;
export const ssfPROGRAMS = 2;
export const ssfCONTROLS = 3;
export const ssfPRINTERS = 4;
export const ssfPERSONAL = 5;
export const ssfFAVORITES = 6;
export const ssfSTARTUP = 7;
export const ssfRECENT = 8;
export const ssfSENDTO = 9;
export const ssfBITBUCKET = 10;
export const ssfSTARTMENU = 11;
export const ssfDESKTOPDIRECTORY = 16;
export const ssfDRIVES = 17;
export const ssfNETWORK = 18;
export const ssfNETHOOD = 19;
export const ssfFONTS = 20;
export const ssfTEMPLATES = 21;
export const ssfCOMMONSTARTMENU = 22;
export const ssfCOMMONPROGRAMS = 23;
export const ssfCOMMONSTARTUP = 24;
export const ssfCOMMONDESKTOPDIR = 25;
export const ssfAPPDATA = 26;
export const ssfPRINTHOOD = 27;
export const ssfLOCALAPPDATA = 28;
export const ssfALTSTARTUP = 29;
export const ssfCOMMONALTSTARTUP = 30;
export const ssfCOMMONFAVORITES = 31;
export const ssfINTERNETCACHE = 32;
export const ssfCOOKIES = 33;
export const ssfHISTORY = 34;
export const ssfCOMMONAPPDATA = 35;
export const ssfWINDOWS = 36;
export const ssfSYSTEM = 37;
export const ssfPROGRAMFILES = 38;
export const ssfMYPICTURES = 39;
export const ssfPROFILE = 40;
export const ssfSYSTEMx86 = 41;
export const ssfPROGRAMFILESx86 = 48;
export const ACO_NONE = 0;
export const ACO_AUTOSUGGEST = 1;
export const ACO_AUTOAPPEND = 2;
export const ACO_SEARCH = 4;
export const ACO_FILTERPREFIXES = 8;
export const ACO_USETAB = 16;
export const ACO_UPDOWNKEYDROPSLIST = 32;
export const ACO_RTLREADING = 64;
export const ACO_WORD_FILTER = 128;
export const ACO_NOPREFIXFILTERING = 256;
export const ACEO_NONE = 0;
export const ACEO_MOSTRECENTFIRST = 1;
export const ACEO_FIRSTUNUSED = 65536;
export const SLDF_DEFAULT = 0;
export const SLDF_HAS_ID_LIST = 1;
export const SLDF_HAS_LINK_INFO = 2;
export const SLDF_HAS_NAME = 4;
export const SLDF_HAS_RELPATH = 8;
export const SLDF_HAS_WORKINGDIR = 16;
export const SLDF_HAS_ARGS = 32;
export const SLDF_HAS_ICONLOCATION = 64;
export const SLDF_UNICODE = 128;
export const SLDF_FORCE_NO_LINKINFO = 256;
export const SLDF_HAS_EXP_SZ = 512;
export const SLDF_RUN_IN_SEPARATE = 1024;
export const SLDF_HAS_DARWINID = 4096;
export const SLDF_RUNAS_USER = 8192;
export const SLDF_HAS_EXP_ICON_SZ = 16384;
export const SLDF_NO_PIDL_ALIAS = 32768;
export const SLDF_FORCE_UNCNAME = 65536;
export const SLDF_RUN_WITH_SHIMLAYER = 131072;
export const SLDF_FORCE_NO_LINKTRACK = 262144;
export const SLDF_ENABLE_TARGET_METADATA = 524288;
export const SLDF_DISABLE_LINK_PATH_TRACKING = 1048576;
export const SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 2097152;
export const SLDF_NO_KF_ALIAS = 4194304;
export const SLDF_ALLOW_LINK_TO_LINK = 8388608;
export const SLDF_UNALIAS_ON_SAVE = 16777216;
export const SLDF_PREFER_ENVIRONMENT_PATH = 33554432;
export const SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = 67108864;
export const SLDF_PERSIST_VOLUME_ID_RELATIVE = 134217728;
export const SLDF_VALID = 268433407;
export const SLDF_RESERVED = `-2147483648`;
export const SHGFP_TYPE_CURRENT = 0;
export const SHGFP_TYPE_DEFAULT = 1;
export const KF_FLAG_DEFAULT = 0;
export const KF_FLAG_FORCE_APP_DATA_REDIRECTION = 524288;
export const KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = 262144;
export const KF_FLAG_FORCE_PACKAGE_REDIRECTION = 131072;
export const KF_FLAG_NO_PACKAGE_REDIRECTION = 65536;
export const KF_FLAG_FORCE_APPCONTAINER_REDIRECTION = 131072;
export const KF_FLAG_NO_APPCONTAINER_REDIRECTION = 65536;
export const KF_FLAG_CREATE = 32768;
export const KF_FLAG_DONT_VERIFY = 16384;
export const KF_FLAG_DONT_UNEXPAND = 8192;
export const KF_FLAG_NO_ALIAS = 4096;
export const KF_FLAG_INIT = 2048;
export const KF_FLAG_DEFAULT_PATH = 1024;
export const KF_FLAG_NOT_PARENT_RELATIVE = 512;
export const KF_FLAG_SIMPLE_IDLIST = 256;
export const KF_FLAG_ALIAS_ONLY = `-2147483648`;
export const ACLO_NONE = 0;
export const ACLO_CURRENTDIR = 1;
export const ACLO_MYCOMPUTER = 2;
export const ACLO_DESKTOP = 4;
export const ACLO_FAVORITES = 8;
export const ACLO_FILESYSONLY = 16;
export const ACLO_FILESYSDIRS = 32;
export const ACLO_VIRTUALNAMESPACE = 64;
export const FD_CLSID = 1;
export const FD_SIZEPOINT = 2;
export const FD_ATTRIBUTES = 4;
export const FD_CREATETIME = 8;
export const FD_ACCESSTIME = 16;
export const FD_WRITESTIME = 32;
export const FD_FILESIZE = 64;
export const FD_PROGRESSUI = 16384;
export const FD_LINKUI = 32768;
export const FD_UNICODE = `-2147483648`;
export const DROPIMAGE_INVALID = `-1`;
export const DROPIMAGE_NONE = 0;
export const DROPIMAGE_COPY = 1;
export const DROPIMAGE_MOVE = 2;
export const DROPIMAGE_LINK = 4;
export const DROPIMAGE_LABEL = 6;
export const DROPIMAGE_WARNING = 7;
export const DROPIMAGE_NOIMAGE = 8;
export const SHARD_PIDL = 1;
export const SHARD_PATHA = 2;
export const SHARD_PATHW = 3;
export const SHARD_APPIDINFO = 4;
export const SHARD_APPIDINFOIDLIST = 5;
export const SHARD_LINK = 6;
export const SHARD_APPIDINFOLINK = 7;
export const SHARD_SHELLITEM = 8;
export const SCNRT_ENABLE = 0;
export const SCNRT_DISABLE = 1;
export const REST_NONE = 0;
export const REST_NORUN = 1;
export const REST_NOCLOSE = 2;
export const REST_NOSAVESET = 4;
export const REST_NOFILEMENU = 8;
export const REST_NOSETFOLDERS = 16;
export const REST_NOSETTASKBAR = 32;
export const REST_NODESKTOP = 64;
export const REST_NOFIND = 128;
export const REST_NODRIVES = 256;
export const REST_NODRIVEAUTORUN = 512;
export const REST_NODRIVETYPEAUTORUN = 1024;
export const REST_NONETHOOD = 2048;
export const REST_STARTBANNER = 4096;
export const REST_RESTRICTRUN = 8192;
export const REST_NOPRINTERTABS = 16384;
export const REST_NOPRINTERDELETE = 32768;
export const REST_NOPRINTERADD = 65536;
export const REST_NOSTARTMENUSUBFOLDERS = 131072;
export const REST_MYDOCSONNET = 262144;
export const REST_NOEXITTODOS = 524288;
export const REST_ENFORCESHELLEXTSECURITY = 1048576;
export const REST_LINKRESOLVEIGNORELINKINFO = 2097152;
export const REST_NOCOMMONGROUPS = 4194304;
export const REST_SEPARATEDESKTOPPROCESS = 8388608;
export const REST_NOWEB = 16777216;
export const REST_NOTRAYCONTEXTMENU = 33554432;
export const REST_NOVIEWCONTEXTMENU = 67108864;
export const REST_NONETCONNECTDISCONNECT = 134217728;
export const REST_STARTMENULOGOFF = 268435456;
export const REST_NOSETTINGSASSIST = 536870912;
export const REST_NOINTERNETICON = 1073741825;
export const REST_NORECENTDOCSHISTORY = 1073741826;
export const REST_NORECENTDOCSMENU = 1073741827;
export const REST_NOACTIVEDESKTOP = 1073741828;
export const REST_NOACTIVEDESKTOPCHANGES = 1073741829;
export const REST_NOFAVORITESMENU = 1073741830;
export const REST_CLEARRECENTDOCSONEXIT = 1073741831;
export const REST_CLASSICSHELL = 1073741832;
export const REST_NOCUSTOMIZEWEBVIEW = 1073741833;
export const REST_NOHTMLWALLPAPER = 1073741840;
export const REST_NOCHANGINGWALLPAPER = 1073741841;
export const REST_NODESKCOMP = 1073741842;
export const REST_NOADDDESKCOMP = 1073741843;
export const REST_NODELDESKCOMP = 1073741844;
export const REST_NOCLOSEDESKCOMP = 1073741845;
export const REST_NOCLOSE_DRAGDROPBAND = 1073741846;
export const REST_NOMOVINGBAND = 1073741847;
export const REST_NOEDITDESKCOMP = 1073741848;
export const REST_NORESOLVESEARCH = 1073741849;
export const REST_NORESOLVETRACK = 1073741850;
export const REST_FORCECOPYACLWITHFILE = 1073741851;
export const REST_NOFORGETSOFTWAREUPDATE = 1073741853;
export const REST_NOSETACTIVEDESKTOP = 1073741854;
export const REST_NOUPDATEWINDOWS = 1073741855;
export const REST_NOCHANGESTARMENU = 1073741856;
export const REST_NOFOLDEROPTIONS = 1073741857;
export const REST_HASFINDCOMPUTERS = 1073741858;
export const REST_INTELLIMENUS = 1073741859;
export const REST_RUNDLGMEMCHECKBOX = 1073741860;
export const REST_ARP_ShowPostSetup = 1073741861;
export const REST_NOCSC = 1073741862;
export const REST_NOCONTROLPANEL = 1073741863;
export const REST_ENUMWORKGROUP = 1073741864;
export const REST_ARP_NOARP = 1073741865;
export const REST_ARP_NOREMOVEPAGE = 1073741866;
export const REST_ARP_NOADDPAGE = 1073741867;
export const REST_ARP_NOWINSETUPPAGE = 1073741868;
export const REST_GREYMSIADS = 1073741869;
export const REST_NOCHANGEMAPPEDDRIVELABEL = 1073741870;
export const REST_NOCHANGEMAPPEDDRIVECOMMENT = 1073741871;
export const REST_MaxRecentDocs = 1073741872;
export const REST_NONETWORKCONNECTIONS = 1073741873;
export const REST_FORCESTARTMENULOGOFF = 1073741874;
export const REST_NOWEBVIEW = 1073741875;
export const REST_NOCUSTOMIZETHISFOLDER = 1073741876;
export const REST_NOENCRYPTION = 1073741877;
export const REST_DONTSHOWSUPERHIDDEN = 1073741879;
export const REST_NOSHELLSEARCHBUTTON = 1073741880;
export const REST_NOHARDWARETAB = 1073741881;
export const REST_NORUNASINSTALLPROMPT = 1073741882;
export const REST_PROMPTRUNASINSTALLNETPATH = 1073741883;
export const REST_NOMANAGEMYCOMPUTERVERB = 1073741884;
export const REST_DISALLOWRUN = 1073741886;
export const REST_NOWELCOMESCREEN = 1073741887;
export const REST_RESTRICTCPL = 1073741888;
export const REST_DISALLOWCPL = 1073741889;
export const REST_NOSMBALLOONTIP = 1073741890;
export const REST_NOSMHELP = 1073741891;
export const REST_NOWINKEYS = 1073741892;
export const REST_NOENCRYPTONMOVE = 1073741893;
export const REST_NOLOCALMACHINERUN = 1073741894;
export const REST_NOCURRENTUSERRUN = 1073741895;
export const REST_NOLOCALMACHINERUNONCE = 1073741896;
export const REST_NOCURRENTUSERRUNONCE = 1073741897;
export const REST_FORCEACTIVEDESKTOPON = 1073741898;
export const REST_NOVIEWONDRIVE = 1073741900;
export const REST_NONETCRAWL = 1073741901;
export const REST_NOSHAREDDOCUMENTS = 1073741902;
export const REST_NOSMMYDOCS = 1073741903;
export const REST_NOSMMYPICS = 1073741904;
export const REST_ALLOWBITBUCKDRIVES = 1073741905;
export const REST_NONLEGACYSHELLMODE = 1073741906;
export const REST_NOCONTROLPANELBARRICADE = 1073741907;
export const REST_NOSTARTPAGE = 1073741908;
export const REST_NOAUTOTRAYNOTIFY = 1073741909;
export const REST_NOTASKGROUPING = 1073741910;
export const REST_NOCDBURNING = 1073741911;
export const REST_MYCOMPNOPROP = 1073741912;
export const REST_MYDOCSNOPROP = 1073741913;
export const REST_NOSTARTPANEL = 1073741914;
export const REST_NODISPLAYAPPEARANCEPAGE = 1073741915;
export const REST_NOTHEMESTAB = 1073741916;
export const REST_NOVISUALSTYLECHOICE = 1073741917;
export const REST_NOSIZECHOICE = 1073741918;
export const REST_NOCOLORCHOICE = 1073741919;
export const REST_SETVISUALSTYLE = 1073741920;
export const REST_STARTRUNNOHOMEPATH = 1073741921;
export const REST_NOUSERNAMEINSTARTPANEL = 1073741922;
export const REST_NOMYCOMPUTERICON = 1073741923;
export const REST_NOSMNETWORKPLACES = 1073741924;
export const REST_NOSMPINNEDLIST = 1073741925;
export const REST_NOSMMYMUSIC = 1073741926;
export const REST_NOSMEJECTPC = 1073741927;
export const REST_NOSMMOREPROGRAMS = 1073741928;
export const REST_NOSMMFUPROGRAMS = 1073741929;
export const REST_NOTRAYITEMSDISPLAY = 1073741930;
export const REST_NOTOOLBARSONTASKBAR = 1073741931;
export const REST_NOSMCONFIGUREPROGRAMS = 1073741935;
export const REST_HIDECLOCK = 1073741936;
export const REST_NOLOWDISKSPACECHECKS = 1073741937;
export const REST_NOENTIRENETWORK = 1073741938;
export const REST_NODESKTOPCLEANUP = 1073741939;
export const REST_BITBUCKNUKEONDELETE = 1073741940;
export const REST_BITBUCKCONFIRMDELETE = 1073741941;
export const REST_BITBUCKNOPROP = 1073741942;
export const REST_NODISPBACKGROUND = 1073741943;
export const REST_NODISPSCREENSAVEPG = 1073741944;
export const REST_NODISPSETTINGSPG = 1073741945;
export const REST_NODISPSCREENSAVEPREVIEW = 1073741946;
export const REST_NODISPLAYCPL = 1073741947;
export const REST_HIDERUNASVERB = 1073741948;
export const REST_NOTHUMBNAILCACHE = 1073741949;
export const REST_NOSTRCMPLOGICAL = 1073741950;
export const REST_NOPUBLISHWIZARD = 1073741951;
export const REST_NOONLINEPRINTSWIZARD = 1073741952;
export const REST_NOWEBSERVICES = 1073741953;
export const REST_ALLOWUNHASHEDWEBVIEW = 1073741954;
export const REST_ALLOWLEGACYWEBVIEW = 1073741955;
export const REST_REVERTWEBVIEWSECURITY = 1073741956;
export const REST_INHERITCONSOLEHANDLES = 1073741958;
export const REST_NOREMOTERECURSIVEEVENTS = 1073741961;
export const REST_NOREMOTECHANGENOTIFY = 1073741969;
export const REST_NOENUMENTIRENETWORK = 1073741971;
export const REST_NOINTERNETOPENWITH = 1073741973;
export const REST_DONTRETRYBADNETNAME = 1073741979;
export const REST_ALLOWFILECLSIDJUNCTIONS = 1073741980;
export const REST_NOUPNPINSTALL = 1073741981;
export const REST_ARP_DONTGROUPPATCHES = 1073741996;
export const REST_ARP_NOCHOOSEPROGRAMSPAGE = 1073741997;
export const REST_NODISCONNECT = 1090519041;
export const REST_NOSECURITY = 1090519042;
export const REST_NOFILEASSOCIATE = 1090519043;
export const REST_ALLOWCOMMENTTOGGLE = 1090519044;
export const OAIF_ALLOW_REGISTRATION = 1;
export const OAIF_REGISTER_EXT = 2;
export const OAIF_EXEC = 4;
export const OAIF_FORCE_REGISTRATION = 8;
export const OAIF_HIDE_REGISTRATION = 32;
export const OAIF_URL_PROTOCOL = 64;
export const OAIF_FILE_IS_URI = 128;
export const IESHORTCUT_NEWBROWSER = 1;
export const IESHORTCUT_OPENNEWTAB = 2;
export const IESHORTCUT_FORCENAVIGATE = 4;
export const IESHORTCUT_BACKGROUNDTAB = 8;
export const VT_EMPTY = 0;
export const VT_NULL = 1;
export const VT_I2 = 2;
export const VT_I4 = 3;
export const VT_R4 = 4;
export const VT_R8 = 5;
export const VT_CY = 6;
export const VT_DATE = 7;
export const VT_BSTR = 8;
export const VT_DISPATCH = 9;
export const VT_ERROR = 10;
export const VT_BOOL = 11;
export const VT_VARIANT = 12;
export const VT_UNKNOWN = 13;
export const VT_DECIMAL = 14;
export const VT_I1 = 16;
export const VT_UI1 = 17;
export const VT_UI2 = 18;
export const VT_UI4 = 19;
export const VT_I8 = 20;
export const VT_UI8 = 21;
export const VT_INT = 22;
export const VT_UINT = 23;
export const VT_VOID = 24;
export const VT_HRESULT = 25;
export const VT_PTR = 26;
export const VT_SAFEARRAY = 27;
export const VT_CARRAY = 28;
export const VT_USERDEFINED = 29;
export const VT_LPSTR = 30;
export const VT_LPWSTR = 31;
export const VT_RECORD = 36;
export const VT_INT_PTR = 37;
export const VT_UINT_PTR = 38;
export const VT_FILETIME = 64;
export const VT_BLOB = 65;
export const VT_STREAM = 66;
export const VT_STORAGE = 67;
export const VT_STREAMED_OBJECT = 68;
export const VT_STORED_OBJECT = 69;
export const VT_BLOB_OBJECT = 70;
export const VT_CF = 71;
export const VT_CLSID = 72;
export const VT_VERSIONED_STREAM = 73;
export const VT_BSTR_BLOB = 4095;
export const VT_VECTOR = 4096;
export const VT_ARRAY = 8192;
export const VT_BYREF = 16384;
export const VT_RESERVED = 32768;
export const VT_ILLEGAL = 65535;
export const VT_ILLEGALMASKED = 4095;
export const VT_TYPEMASK = 4095;
export const DEVICE_PRIMARY = 0;
export const DEVICE_IMMERSIVE = 1;
export const SCF_VALUE_NONE = 0;
export const SCF_SCALE = 1;
export const SCF_PHYSICAL = 2;
export const SHELL_UI_COMPONENT_TASKBARS = 0;
export const SHELL_UI_COMPONENT_NOTIFICATIONAREA = 1;
export const SHELL_UI_COMPONENT_DESKBAND = 2;
export const QUNS_NOT_PRESENT = 1;
export const QUNS_BUSY = 2;
export const QUNS_RUNNING_D3D_FULL_SCREEN = 3;
export const QUNS_PRESENTATION_MODE = 4;
export const QUNS_ACCEPTS_NOTIFICATIONS = 5;
export const QUNS_QUIET_TIME = 6;
export const QUNS_APP = 7;
export const SIID_DOCNOASSOC = 0;
export const SIID_DOCASSOC = 1;
export const SIID_APPLICATION = 2;
export const SIID_FOLDER = 3;
export const SIID_FOLDEROPEN = 4;
export const SIID_DRIVE525 = 5;
export const SIID_DRIVE35 = 6;
export const SIID_DRIVEREMOVE = 7;
export const SIID_DRIVEFIXED = 8;
export const SIID_DRIVENET = 9;
export const SIID_DRIVENETDISABLED = 10;
export const SIID_DRIVECD = 11;
export const SIID_DRIVERAM = 12;
export const SIID_WORLD = 13;
export const SIID_SERVER = 15;
export const SIID_PRINTER = 16;
export const SIID_MYNETWORK = 17;
export const SIID_FIND = 22;
export const SIID_HELP = 23;
export const SIID_SHARE = 28;
export const SIID_LINK = 29;
export const SIID_SLOWFILE = 30;
export const SIID_RECYCLER = 31;
export const SIID_RECYCLERFULL = 32;
export const SIID_MEDIACDAUDIO = 40;
export const SIID_LOCK = 47;
export const SIID_AUTOLIST = 49;
export const SIID_PRINTERNET = 50;
export const SIID_SERVERSHARE = 51;
export const SIID_PRINTERFAX = 52;
export const SIID_PRINTERFAXNET = 53;
export const SIID_PRINTERFILE = 54;
export const SIID_STACK = 55;
export const SIID_MEDIASVCD = 56;
export const SIID_STUFFEDFOLDER = 57;
export const SIID_DRIVEUNKNOWN = 58;
export const SIID_DRIVEDVD = 59;
export const SIID_MEDIADVD = 60;
export const SIID_MEDIADVDRAM = 61;
export const SIID_MEDIADVDRW = 62;
export const SIID_MEDIADVDR = 63;
export const SIID_MEDIADVDROM = 64;
export const SIID_MEDIACDAUDIOPLUS = 65;
export const SIID_MEDIACDRW = 66;
export const SIID_MEDIACDR = 67;
export const SIID_MEDIACDBURN = 68;
export const SIID_MEDIABLANKCD = 69;
export const SIID_MEDIACDROM = 70;
export const SIID_AUDIOFILES = 71;
export const SIID_IMAGEFILES = 72;
export const SIID_VIDEOFILES = 73;
export const SIID_MIXEDFILES = 74;
export const SIID_FOLDERBACK = 75;
export const SIID_FOLDERFRONT = 76;
export const SIID_SHIELD = 77;
export const SIID_WARNING = 78;
export const SIID_INFO = 79;
export const SIID_ERROR = 80;
export const SIID_KEY = 81;
export const SIID_SOFTWARE = 82;
export const SIID_RENAME = 83;
export const SIID_DELETE = 84;
export const SIID_MEDIAAUDIODVD = 85;
export const SIID_MEDIAMOVIEDVD = 86;
export const SIID_MEDIAENHANCEDCD = 87;
export const SIID_MEDIAENHANCEDDVD = 88;
export const SIID_MEDIAHDDVD = 89;
export const SIID_MEDIABLURAY = 90;
export const SIID_MEDIAVCD = 91;
export const SIID_MEDIADVDPLUSR = 92;
export const SIID_MEDIADVDPLUSRW = 93;
export const SIID_DESKTOPPC = 94;
export const SIID_MOBILEPC = 95;
export const SIID_USERS = 96;
export const SIID_MEDIASMARTMEDIA = 97;
export const SIID_MEDIACOMPACTFLASH = 98;
export const SIID_DEVICECELLPHONE = 99;
export const SIID_DEVICECAMERA = 100;
export const SIID_DEVICEVIDEOCAMERA = 101;
export const SIID_DEVICEAUDIOPLAYER = 102;
export const SIID_NETWORKCONNECT = 103;
export const SIID_INTERNET = 104;
export const SIID_ZIPFILE = 105;
export const SIID_SETTINGS = 106;
export const SIID_DRIVEHDDVD = 132;
export const SIID_DRIVEBD = 133;
export const SIID_MEDIAHDDVDROM = 134;
export const SIID_MEDIAHDDVDR = 135;
export const SIID_MEDIAHDDVDRAM = 136;
export const SIID_MEDIABDROM = 137;
export const SIID_MEDIABDR = 138;
export const SIID_MEDIABDRE = 139;
export const SIID_CLUSTEREDDRIVE = 140;
export const SIID_MAX_ICONS = 181;
export const SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = 1;
export const SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 2;
export const URL_SCHEME_INVALID = `-1`;
export const URL_SCHEME_UNKNOWN = 0;
export const URL_SCHEME_FTP = 1;
export const URL_SCHEME_HTTP = 2;
export const URL_SCHEME_GOPHER = 3;
export const URL_SCHEME_MAILTO = 4;
export const URL_SCHEME_NEWS = 5;
export const URL_SCHEME_NNTP = 6;
export const URL_SCHEME_TELNET = 7;
export const URL_SCHEME_WAIS = 8;
export const URL_SCHEME_FILE = 9;
export const URL_SCHEME_MK = 10;
export const URL_SCHEME_HTTPS = 11;
export const URL_SCHEME_SHELL = 12;
export const URL_SCHEME_SNEWS = 13;
export const URL_SCHEME_LOCAL = 14;
export const URL_SCHEME_JAVASCRIPT = 15;
export const URL_SCHEME_VBSCRIPT = 16;
export const URL_SCHEME_ABOUT = 17;
export const URL_SCHEME_RES = 18;
export const URL_SCHEME_MSSHELLROOTED = 19;
export const URL_SCHEME_MSSHELLIDLIST = 20;
export const URL_SCHEME_MSHELP = 21;
export const URL_SCHEME_MSSHELLDEVICE = 22;
export const URL_SCHEME_WILDCARD = 23;
export const URL_SCHEME_SEARCH_MS = 24;
export const URL_SCHEME_SEARCH = 25;
export const URL_SCHEME_KNOWNFOLDER = 26;
export const URL_SCHEME_MAXVALUE = 27;
export const URL_PART_NONE = 0;
export const URL_PART_SCHEME = 1;
export const URL_PART_HOSTNAME = 2;
export const URL_PART_USERNAME = 3;
export const URL_PART_PASSWORD = 4;
export const URL_PART_PORT = 5;
export const URL_PART_QUERY = 6;
export const URLIS_URL = 0;
export const URLIS_OPAQUE = 1;
export const URLIS_NOHISTORY = 2;
export const URLIS_FILEURL = 3;
export const URLIS_APPLIABLE = 4;
export const URLIS_DIRECTORY = 5;
export const URLIS_HASQUERY = 6;
export const SHREGDEL_DEFAULT = 0;
export const SHREGDEL_HKCU = 1;
export const SHREGDEL_HKLM = 16;
export const SHREGDEL_BOTH = 17;
export const SHREGENUM_DEFAULT = 0;
export const SHREGENUM_HKCU = 1;
export const SHREGENUM_HKLM = 16;
export const SHREGENUM_BOTH = 17;
export const ASSOCSTR_COMMAND = 1;
export const ASSOCSTR_EXECUTABLE = 2;
export const ASSOCSTR_FRIENDLYDOCNAME = 3;
export const ASSOCSTR_FRIENDLYAPPNAME = 4;
export const ASSOCSTR_NOOPEN = 5;
export const ASSOCSTR_SHELLNEWVALUE = 6;
export const ASSOCSTR_DDECOMMAND = 7;
export const ASSOCSTR_DDEIFEXEC = 8;
export const ASSOCSTR_DDEAPPLICATION = 9;
export const ASSOCSTR_DDETOPIC = 10;
export const ASSOCSTR_INFOTIP = 11;
export const ASSOCSTR_QUICKTIP = 12;
export const ASSOCSTR_TILEINFO = 13;
export const ASSOCSTR_CONTENTTYPE = 14;
export const ASSOCSTR_DEFAULTICON = 15;
export const ASSOCSTR_SHELLEXTENSION = 16;
export const ASSOCSTR_DROPTARGET = 17;
export const ASSOCSTR_DELEGATEEXECUTE = 18;
export const ASSOCSTR_SUPPORTED_URI_PROTOCOLS = 19;
export const ASSOCSTR_PROGID = 20;
export const ASSOCSTR_APPID = 21;
export const ASSOCSTR_APPPUBLISHER = 22;
export const ASSOCSTR_APPICONREFERENCE = 23;
export const ASSOCSTR_MAX = 24;
export const ASSOCKEY_SHELLEXECCLASS = 1;
export const ASSOCKEY_APP = 2;
export const ASSOCKEY_CLASS = 3;
export const ASSOCKEY_BASECLASS = 4;
export const ASSOCKEY_MAX = 5;
export const ASSOCDATA_MSIDESCRIPTOR = 1;
export const ASSOCDATA_NOACTIVATEHANDLER = 2;
export const ASSOCDATA_UNUSED1 = 3;
export const ASSOCDATA_HASPERUSERASSOC = 4;
export const ASSOCDATA_EDITFLAGS = 5;
export const ASSOCDATA_VALUE = 6;
export const ASSOCDATA_MAX = 7;
export const ASSOCENUM_NONE = 0;
export const FTA_None = 0;
export const FTA_Exclude = 1;
export const FTA_Show = 2;
export const FTA_HasExtension = 4;
export const FTA_NoEdit = 8;
export const FTA_NoRemove = 16;
export const FTA_NoNewVerb = 32;
export const FTA_NoEditVerb = 64;
export const FTA_NoRemoveVerb = 128;
export const FTA_NoEditDesc = 256;
export const FTA_NoEditIcon = 512;
export const FTA_NoEditDflt = 1024;
export const FTA_NoEditVerbCmd = 2048;
export const FTA_NoEditVerbExe = 4096;
export const FTA_NoDDE = 8192;
export const FTA_NoEditMIME = 32768;
export const FTA_OpenIsSafe = 65536;
export const FTA_AlwaysUnsafe = 131072;
export const FTA_NoRecentDocs = 1048576;
export const FTA_SafeForElevation = 2097152;
export const FTA_AlwaysUseDirectInvoke = 4194304;
export const GLOBALCOUNTER_SEARCHMANAGER = 0;
export const GLOBALCOUNTER_SEARCHOPTIONS = 1;
export const GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2;
export const GLOBALCOUNTER_RATINGS = 3;
export const GLOBALCOUNTER_APPROVEDSITES = 4;
export const GLOBALCOUNTER_RESTRICTIONS = 5;
export const GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6;
export const GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7;
export const GLOBALCOUNTER_OVERLAYMANAGER = 8;
export const GLOBALCOUNTER_QUERYASSOCIATIONS = 9;
export const GLOBALCOUNTER_IESESSIONS = 10;
export const GLOBALCOUNTER_IEONLY_SESSIONS = 11;
export const GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12;
export const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 13;
export const GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40;
export const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41;
export const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42;
export const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43;
export const GLOBALCOUNTER_RECYCLEBINENUM = 44;
export const GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45;
export const GLOBALCOUNTER_RATINGS_STATECOUNTER = 46;
export const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47;
export const GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48;
export const GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49;
export const GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50;
export const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51;
export const GLOBALCOUNTER_ASSOCCHANGED = 52;
export const GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53;
export const GLOBALCOUNTER_SETTINGSYNC_ENABLED = 54;
export const GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = 55;
export const GLOBALCOUNTER_USERINFOCHANGED = 56;
export const GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = 57;
export const GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = 58;
export const GLOBALCOUNTER_MAXIMUMVALUE = 59;
export const AIM_DISPLAYNAME = 1;
export const AIM_VERSION = 2;
export const AIM_PUBLISHER = 4;
export const AIM_PRODUCTID = 8;
export const AIM_REGISTEREDOWNER = 16;
export const AIM_REGISTEREDCOMPANY = 32;
export const AIM_LANGUAGE = 64;
export const AIM_SUPPORTURL = 128;
export const AIM_SUPPORTTELEPHONE = 256;
export const AIM_HELPLINK = 512;
export const AIM_INSTALLLOCATION = 1024;
export const AIM_INSTALLSOURCE = 2048;
export const AIM_INSTALLDATE = 4096;
export const AIM_CONTACT = 16384;
export const AIM_COMMENTS = 32768;
export const AIM_IMAGE = 131072;
export const AIM_READMEURL = 262144;
export const AIM_UPDATEINFOURL = 524288;
export const APPACTION_INSTALL = 1;
export const APPACTION_UNINSTALL = 2;
export const APPACTION_MODIFY = 4;
export const APPACTION_REPAIR = 8;
export const APPACTION_UPGRADE = 16;
export const APPACTION_CANGETSIZE = 32;
export const APPACTION_MODIFYREMOVE = 128;
export const APPACTION_ADDLATER = 256;
export const APPACTION_UNSCHEDULE = 512;
export const PAI_SOURCE = 1;
export const PAI_ASSIGNEDTIME = 2;
export const PAI_PUBLISHEDTIME = 4;
export const PAI_SCHEDULEDTIME = 8;
export const PAI_EXPIRETIME = 16;
export const CPUS_INVALID = 0;
export const CPUS_LOGON = 1;
export const CPUS_UNLOCK_WORKSTATION = 2;
export const CPUS_CHANGE_PASSWORD = 3;
export const CPUS_CREDUI = 4;
export const CPUS_PLAP = 5;
export const CPFT_INVALID = 0;
export const CPFT_LARGE_TEXT = 1;
export const CPFT_SMALL_TEXT = 2;
export const CPFT_COMMAND_LINK = 3;
export const CPFT_EDIT_TEXT = 4;
export const CPFT_PASSWORD_TEXT = 5;
export const CPFT_TILE_IMAGE = 6;
export const CPFT_CHECKBOX = 7;
export const CPFT_COMBOBOX = 8;
export const CPFT_SUBMIT_BUTTON = 9;
export const CPFS_HIDDEN = 0;
export const CPFS_DISPLAY_IN_SELECTED_TILE = 1;
export const CPFS_DISPLAY_IN_DESELECTED_TILE = 2;
export const CPFS_DISPLAY_IN_BOTH = 3;
export const CPFIS_NONE = 0;
export const CPFIS_READONLY = 1;
export const CPFIS_DISABLED = 2;
export const CPFIS_FOCUSED = 3;
export const CPGSR_NO_CREDENTIAL_NOT_FINISHED = 0;
export const CPGSR_NO_CREDENTIAL_FINISHED = 1;
export const CPGSR_RETURN_CREDENTIAL_FINISHED = 2;
export const CPGSR_RETURN_NO_CREDENTIAL_FINISHED = 3;
export const CPSI_NONE = 0;
export const CPSI_ERROR = 1;
export const CPSI_WARNING = 2;
export const CPSI_SUCCESS = 3;
export const CPAO_NONE = 0;
export const CPAO_EMPTY_LOCAL = 1;
export const CPAO_EMPTY_CONNECTED = 2;
export const CPCFO_NONE = 0;
export const CPCFO_ENABLE_PASSWORD_REVEAL = 1;
export const CPCFO_IS_EMAIL_ADDRESS = 2;
export const CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 4;
export const CPCFO_NUMBERS_ONLY = 8;
export const CPCFO_SHOW_ENGLISH_KEYBOARD = 16;
export const SYNCMGR_HCM_NONE = 0;
export const SYNCMGR_HCM_PROVIDES_ICON = 1;
export const SYNCMGR_HCM_EVENT_STORE = 2;
export const SYNCMGR_HCM_CONFLICT_STORE = 4;
export const SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = 16;
export const SYNCMGR_HCM_CAN_BROWSE_CONTENT = 65536;
export const SYNCMGR_HCM_CAN_SHOW_SCHEDULE = 131072;
export const SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = 1048576;
export const SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = 2097152;
export const SYNCMGR_HCM_QUERY_BEFORE_ENABLE = 4194304;
export const SYNCMGR_HCM_QUERY_BEFORE_DISABLE = 8388608;
export const SYNCMGR_HCM_VALID_MASK = 15925271;
export const SYNCMGR_HPM_NONE = 0;
export const SYNCMGR_HPM_PREVENT_ACTIVATE = 1;
export const SYNCMGR_HPM_PREVENT_DEACTIVATE = 2;
export const SYNCMGR_HPM_PREVENT_ENABLE = 4;
export const SYNCMGR_HPM_PREVENT_DISABLE = 8;
export const SYNCMGR_HPM_PREVENT_START_SYNC = 16;
export const SYNCMGR_HPM_PREVENT_STOP_SYNC = 32;
export const SYNCMGR_HPM_DISABLE_ENABLE = 256;
export const SYNCMGR_HPM_DISABLE_DISABLE = 512;
export const SYNCMGR_HPM_DISABLE_START_SYNC = 1024;
export const SYNCMGR_HPM_DISABLE_STOP_SYNC = 2048;
export const SYNCMGR_HPM_DISABLE_BROWSE = 4096;
export const SYNCMGR_HPM_DISABLE_SCHEDULE = 8192;
export const SYNCMGR_HPM_HIDDEN_BY_DEFAULT = 65536;
export const SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = 48;
export const SYNCMGR_HPM_VALID_MASK = 77631;
export const SYNCMGR_HT_UNSPECIFIED = 0;
export const SYNCMGR_HT_APPLICATION = 1;
export const SYNCMGR_HT_DEVICE = 2;
export const SYNCMGR_HT_FOLDER = 3;
export const SYNCMGR_HT_SERVICE = 4;
export const SYNCMGR_HT_COMPUTER = 5;
export const SYNCMGR_HT_MIN = 0;
export const SYNCMGR_HT_MAX = 5;
export const SYNCMGR_ICM_NONE = 0;
export const SYNCMGR_ICM_PROVIDES_ICON = 1;
export const SYNCMGR_ICM_EVENT_STORE = 2;
export const SYNCMGR_ICM_CONFLICT_STORE = 4;
export const SYNCMGR_ICM_CAN_DELETE = 16;
export const SYNCMGR_ICM_CAN_BROWSE_CONTENT = 65536;
export const SYNCMGR_ICM_QUERY_BEFORE_ENABLE = 1048576;
export const SYNCMGR_ICM_QUERY_BEFORE_DISABLE = 2097152;
export const SYNCMGR_ICM_QUERY_BEFORE_DELETE = 4194304;
export const SYNCMGR_ICM_VALID_MASK = 7405591;
export const SYNCMGR_IPM_NONE = 0;
export const SYNCMGR_IPM_PREVENT_ENABLE = 1;
export const SYNCMGR_IPM_PREVENT_DISABLE = 2;
export const SYNCMGR_IPM_PREVENT_START_SYNC = 4;
export const SYNCMGR_IPM_PREVENT_STOP_SYNC = 8;
export const SYNCMGR_IPM_DISABLE_ENABLE = 16;
export const SYNCMGR_IPM_DISABLE_DISABLE = 32;
export const SYNCMGR_IPM_DISABLE_START_SYNC = 64;
export const SYNCMGR_IPM_DISABLE_STOP_SYNC = 128;
export const SYNCMGR_IPM_DISABLE_BROWSE = 256;
export const SYNCMGR_IPM_DISABLE_DELETE = 512;
export const SYNCMGR_IPM_HIDDEN_BY_DEFAULT = 65536;
export const SYNCMGR_IPM_VALID_MASK = 66303;
export const SYNCMGR_PS_UPDATING = 1;
export const SYNCMGR_PS_UPDATING_INDETERMINATE = 2;
export const SYNCMGR_PS_SUCCEEDED = 3;
export const SYNCMGR_PS_FAILED = 4;
export const SYNCMGR_PS_CANCELED = 5;
export const SYNCMGR_PS_DISCONNECTED = 6;
export const SYNCMGR_PS_MAX = 6;
export const SYNCMGR_CR_NONE = 0;
export const SYNCMGR_CR_CANCEL_ITEM = 1;
export const SYNCMGR_CR_CANCEL_ALL = 2;
export const SYNCMGR_CR_MAX = 2;
export const SYNCMGR_EL_INFORMATION = 1;
export const SYNCMGR_EL_WARNING = 2;
export const SYNCMGR_EL_ERROR = 3;
export const SYNCMGR_EL_MAX = 3;
export const SYNCMGR_EF_NONE = 0;
export const SYNCMGR_EF_VALID = 0;
export const SYNCMGR_CF_NONE = 0;
export const SYNCMGR_CF_NOWAIT = 0;
export const SYNCMGR_CF_WAIT = 1;
export const SYNCMGR_CF_NOUI = 2;
export const SYNCMGR_CF_VALID = 3;
export const SYNCMGR_SCF_NONE = 0;
export const SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = 1;
export const SYNCMGR_SCF_VALID = 1;
export const SYNCMGR_UR_ADDED = 0;
export const SYNCMGR_UR_CHANGED = 1;
export const SYNCMGR_UR_REMOVED = 2;
export const SYNCMGR_UR_MAX = 2;
export const SYNCMGR_CIT_UPDATED = 1;
export const SYNCMGR_CIT_DELETED = 2;
export const SYNCMGR_RA_KEEPOTHER = 1;
export const SYNCMGR_RA_KEEPRECENT = 2;
export const SYNCMGR_RA_REMOVEFROMSYNCSET = 4;
export const SYNCMGR_RA_KEEP_SINGLE = 8;
export const SYNCMGR_RA_KEEP_MULTIPLE = 16;
export const SYNCMGR_RA_VALID = 31;
export const SYNCMGR_RF_CONTINUE = 0;
export const SYNCMGR_RF_REFRESH = 1;
export const SYNCMGR_RF_CANCEL = 2;
export const SYNCMGR_PNS_CONTINUE = 0;
export const SYNCMGR_PNS_DEFAULT = 1;
export const SYNCMGR_PNS_CANCEL = 2;
export const SYNCMGR_PC_NO_CHOICE = 0;
export const SYNCMGR_PC_KEEP_ONE = 1;
export const SYNCMGR_PC_KEEP_MULTIPLE = 2;
export const SYNCMGR_PC_KEEP_RECENT = 3;
export const SYNCMGR_PC_REMOVE_FROM_SYNC_SET = 4;
export const SYNCMGR_PC_SKIP = 5;
export const WTS_NONE = 0;
export const WTS_EXTRACT = 0;
export const WTS_INCACHEONLY = 1;
export const WTS_FASTEXTRACT = 2;
export const WTS_FORCEEXTRACTION = 4;
export const WTS_SLOWRECLAIM = 8;
export const WTS_EXTRACTDONOTCACHE = 32;
export const WTS_SCALETOREQUESTEDSIZE = 64;
export const WTS_SKIPFASTEXTRACT = 128;
export const WTS_EXTRACTINPROC = 256;
export const WTS_CROPTOSQUARE = 512;
export const WTS_INSTANCESURROGATE = 1024;
export const WTS_REQUIRESURROGATE = 2048;
export const WTS_APPSTYLE = 8192;
export const WTS_WIDETHUMBNAILS = 16384;
export const WTS_IDEALCACHESIZEONLY = 32768;
export const WTS_SCALEUP = 65536;
export const WTS_DEFAULT = 0;
export const WTS_LOWQUALITY = 1;
export const WTS_CACHED = 2;
export const WTSCF_DEFAULT = 0;
export const WTSCF_APPSTYLE = 1;
export const WTSCF_SQUARE = 2;
export const WTSCF_WIDE = 4;
export const WTSCF_FAST = 8;
export const WTSAT_UNKNOWN = 0;
export const WTSAT_RGB = 1;
export const WTSAT_ARGB = 2;
export const SYNCMGRSTATUS_STOPPED = 0;
export const SYNCMGRSTATUS_SKIPPED = 1;
export const SYNCMGRSTATUS_PENDING = 2;
export const SYNCMGRSTATUS_UPDATING = 3;
export const SYNCMGRSTATUS_SUCCEEDED = 4;
export const SYNCMGRSTATUS_FAILED = 5;
export const SYNCMGRSTATUS_PAUSED = 6;
export const SYNCMGRSTATUS_RESUMING = 7;
export const SYNCMGRSTATUS_UPDATING_INDETERMINATE = 8;
export const SYNCMGRSTATUS_DELETED = 256;
export const SYNCMGRLOGLEVEL_INFORMATION = 1;
export const SYNCMGRLOGLEVEL_WARNING = 2;
export const SYNCMGRLOGLEVEL_ERROR = 3;
export const SYNCMGRLOGLEVEL_LOGLEVELMAX = 3;
export const SYNCMGRERRORFLAG_ENABLEJUMPTEXT = 1;
export const SYNCMGRITEM_HASPROPERTIES = 1;
export const SYNCMGRITEM_TEMPORARY = 2;
export const SYNCMGRITEM_ROAMINGUSER = 4;
export const SYNCMGRITEM_LASTUPDATETIME = 8;
export const SYNCMGRITEM_MAYDELETEITEM = 16;
export const SYNCMGRITEM_HIDDEN = 32;
export const SYNCMGRFLAG_CONNECT = 1;
export const SYNCMGRFLAG_PENDINGDISCONNECT = 2;
export const SYNCMGRFLAG_MANUAL = 3;
export const SYNCMGRFLAG_IDLE = 4;
export const SYNCMGRFLAG_INVOKE = 5;
export const SYNCMGRFLAG_SCHEDULED = 6;
export const SYNCMGRFLAG_EVENTMASK = 255;
export const SYNCMGRFLAG_SETTINGS = 256;
export const SYNCMGRFLAG_MAYBOTHERUSER = 512;
export const SYNCMGRHANDLER_HASPROPERTIES = 1;
export const SYNCMGRHANDLER_MAYESTABLISHCONNECTION = 2;
export const SYNCMGRHANDLER_ALWAYSLISTHANDLER = 4;
export const SYNCMGRHANDLER_HIDDEN = 8;
export const SYNCMGRITEMSTATE_UNCHECKED = 0;
export const SYNCMGRITEMSTATE_CHECKED = 1;
export const SYNCMGRINVOKE_STARTSYNC = 2;
export const SYNCMGRINVOKE_MINIMIZED = 4;
export const SYNCMGRREGISTERFLAG_CONNECT = 1;
export const SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = 2;
export const SYNCMGRREGISTERFLAG_IDLE = 4;
export const ExtractIfNotCached = 0;
export const ReturnOnlyIfCached = 1;
export const ResizeThumbnail = 2;
export const AllowSmallerSize = 4;
export const TLEF_RELATIVE_INCLUDE_CURRENT = 1;
export const TLEF_RELATIVE_BACK = 16;
export const TLEF_RELATIVE_FORE = 32;
export const TLEF_INCLUDE_UNINVOKEABLE = 64;
export const TLEF_ABSOLUTE = 49;
export const TLEF_EXCLUDE_SUBFRAME_ENTRIES = 128;
export const TLEF_EXCLUDE_ABOUT_PAGES = 256;
export const HLSR_HOME = 0;
export const HLSR_SEARCHPAGE = 1;
export const HLSR_HISTORYFOLDER = 2;
export const HLSHORTCUTF_DEFAULT = 0;
export const HLSHORTCUTF_DONTACTUALLYCREATE = 1;
export const HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = 2;
export const HLSHORTCUTF_USEUNIQUEFILENAME = 4;
export const HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = 8;
export const HLTRANSLATEF_DEFAULT = 0;
export const HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = 1;
export const HLNF_INTERNALJUMP = 1;
export const HLNF_OPENINNEWWINDOW = 2;
export const HLNF_NAVIGATINGBACK = 4;
export const HLNF_NAVIGATINGFORWARD = 8;
export const HLNF_NAVIGATINGTOSTACKITEM = 16;
export const HLNF_CREATENOHISTORY = 32;
export const HLINKGETREF_DEFAULT = 0;
export const HLINKGETREF_ABSOLUTE = 1;
export const HLINKGETREF_RELATIVE = 2;
export const HLFNAMEF_DEFAULT = 0;
export const HLFNAMEF_TRYCACHE = 1;
export const HLFNAMEF_TRYPRETTYTARGET = 2;
export const HLFNAMEF_TRYFULLTARGET = 4;
export const HLFNAMEF_TRYWIN95SHORTCUT = 8;
export const HLINKMISC_RELATIVE = 1;
export const HLINKSETF_TARGET = 1;
export const HLINKSETF_LOCATION = 2;
export const HLINKWHICHMK_CONTAINER = 1;
export const HLINKWHICHMK_BASE = 2;
export const HLTB_DOCKEDLEFT = 0;
export const HLTB_DOCKEDTOP = 1;
export const HLTB_DOCKEDRIGHT = 2;
export const HLTB_DOCKEDBOTTOM = 3;
export const HLTB_FLOATING = 4;
export const HLBWIF_HASFRAMEWNDINFO = 1;
export const HLBWIF_HASDOCWNDINFO = 2;
export const HLBWIF_FRAMEWNDMAXIMIZED = 4;
export const HLBWIF_DOCWNDMAXIMIZED = 8;
export const HLBWIF_HASWEBTOOLBARINFO = 16;
export const HLBWIF_WEBTOOLBARHIDDEN = 32;
export const HLID_INVALID = 0;
export const HLID_PREVIOUS = 4294967295;
export const HLID_NEXT = 4294967294;
export const HLID_CURRENT = 4294967293;
export const HLID_STACKBOTTOM = 4294967292;
export const HLID_STACKTOP = 4294967291;
export const HLQF_ISVALID = 1;
export const HLQF_ISCURRENT = 2;
export const BNS_NORMAL = 0;
export const BNS_BEGIN_NAVIGATE = 1;
export const BNS_NAVIGATE = 2;
export const SBSC_HIDE = 0;
export const SBSC_SHOW = 1;
export const SBSC_TOGGLE = 2;
export const SBSC_QUERY = 3;
export const SECURELOCK_NOCHANGE = `-1`;
export const SECURELOCK_SET_UNSECURE = 0;
export const SECURELOCK_SET_MIXED = 1;
export const SECURELOCK_SET_SECUREUNKNOWNBIT = 2;
export const SECURELOCK_SET_SECURE40BIT = 3;
export const SECURELOCK_SET_SECURE56BIT = 4;
export const SECURELOCK_SET_FORTEZZA = 5;
export const SECURELOCK_SET_SECURE128BIT = 6;
export const SECURELOCK_FIRSTSUGGEST = 7;
export const SECURELOCK_SUGGEST_UNSECURE = 7;
export const SECURELOCK_SUGGEST_MIXED = 8;
export const SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = 9;
export const SECURELOCK_SUGGEST_SECURE40BIT = 10;
export const SECURELOCK_SUGGEST_SECURE56BIT = 11;
export const SECURELOCK_SUGGEST_FORTEZZA = 12;
export const SECURELOCK_SUGGEST_SECURE128BIT = 13;
export const IEPDN_BINDINGUI = 1;
export const TI_BITMAP = 1;
export const TI_JPEG = 2;
export const PATHCCH_NONE = 0;
export const PATHCCH_ALLOW_LONG_PATHS = 1;
export const PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = 2;
export const PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = 4;
export const PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = 8;
export const PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = 16;
export const PATHCCH_ENSURE_TRAILING_SLASH = 32;
export const PATHCCH_CANONICALIZE_SLASHES = 64;
export const IURL_SETURL_FL_GUESS_PROTOCOL = 1;
export const IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = 2;
export const IURL_INVOKECOMMAND_FL_ALLOW_UI = 1;
export const IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = 2;
export const IURL_INVOKECOMMAND_FL_DDEWAIT = 4;
export const IURL_INVOKECOMMAND_FL_ASYNCOK = 8;
export const IURL_INVOKECOMMAND_FL_LOG_USAGE = 16;
export const TRANSLATEURL_FL_GUESS_PROTOCOL = 1;
export const TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = 2;
export const URLASSOCDLG_FL_USE_DEFAULT_NAME = 1;
export const URLASSOCDLG_FL_REGISTER_ASSOC = 2;
export const MIMEASSOCDLG_FL_REGISTER_ASSOC = 1;
export const STS_NONE = 0;
export const STS_NEEDSUPLOAD = 1;
export const STS_NEEDSDOWNLOAD = 2;
export const STS_TRANSFERRING = 4;
export const STS_PAUSED = 8;
export const STS_HASERROR = 16;
export const STS_FETCHING_METADATA = 32;
export const STS_USER_REQUESTED_REFRESH = 64;
export const STS_HASWARNING = 128;
export const STS_EXCLUDED = 256;
export const STS_INCOMPLETE = 512;
export const STS_PLACEHOLDER_IFEMPTY = 1024;
export const PS_NONE = 0;
export const PS_MARKED_FOR_OFFLINE_AVAILABILITY = 1;
export const PS_FULL_PRIMARY_STREAM_AVAILABLE = 2;
export const PS_CREATE_FILE_ACCESSIBLE = 4;
export const PS_CLOUDFILE_PLACEHOLDER = 8;
export const PS_DEFAULT = 7;
export const PS_ALL = 15;
export const PUIFNF_DEFAULT = 0;
export const PUIFNF_MNEMONIC = 1;
export const PUIF_DEFAULT = 0;
export const PUIF_RIGHTALIGN = 1;
export const PUIF_NOLABELININFOTIP = 2;
export const PUIFFDF_DEFAULT = 0;
export const PUIFFDF_RIGHTTOLEFT = 1;
export const PUIFFDF_SHORTFORMAT = 2;
export const PUIFFDF_NOTIME = 4;
export const PUIFFDF_FRIENDLYDATE = 8;
export const PDOPS_RUNNING = 1;
export const PDOPS_PAUSED = 2;
export const PDOPS_CANCELLED = 3;
export const PDOPS_STOPPED = 4;
export const PDOPS_ERRORS = 5;
export const SESF_NONE = 0;
export const SESF_SERVICE_QUOTA_NEARING_LIMIT = 1;
export const SESF_SERVICE_QUOTA_EXCEEDED_LIMIT = 2;
export const SESF_AUTHENTICATION_ERROR = 4;
export const SESF_PAUSED_DUE_TO_METERED_NETWORK = 8;
export const SESF_PAUSED_DUE_TO_DISK_SPACE_FULL = 16;
export const SESF_PAUSED_DUE_TO_CLIENT_POLICY = 32;
export const SESF_PAUSED_DUE_TO_SERVICE_POLICY = 64;
export const SESF_SERVICE_UNAVAILABLE = 128;
export const SESF_PAUSED_DUE_TO_USER_REQUEST = 256;
export const SESF_ALL_FLAGS = 511;
export const DROPEFFECT_NONE = 0;
export const DROPEFFECT_COPY = 1;
export const DROPEFFECT_MOVE = 2;
export const DROPEFFECT_LINK = 4;
export const DROPEFFECT_SCROLL = 2147483648;
export const SW_FORCEMINIMIZE = 11;
export const SW_HIDE = 0;
export const SW_MAXIMIZE = 3;
export const SW_MINIMIZE = 6;
export const SW_RESTORE = 9;
export const SW_SHOW = 5;
export const SW_SHOWDEFAULT = 10;
export const SW_SHOWMAXIMIZED = 3;
export const SW_SHOWMINIMIZED = 2;
export const SW_SHOWMINNOACTIVE = 7;
export const SW_SHOWNA = 8;
export const SW_SHOWNOACTIVATE = 4;
export const SW_SHOWNORMAL = 1;
export const SW_NORMAL = 1;
export const SW_MAX = 11;
export const SW_PARENTCLOSING = 1;
export const SW_OTHERZOOM = 2;
export const SW_PARENTOPENING = 3;
export const SW_OTHERUNZOOM = 4;
export const SW_SCROLLCHILDREN = 1;
export const SW_INVALIDATE = 2;
export const SW_ERASE = 4;
export const SW_SMOOTHSCROLL = 16;
export const FILE_ATTRIBUTE_READONLY = 1;
export const FILE_ATTRIBUTE_HIDDEN = 2;
export const FILE_ATTRIBUTE_SYSTEM = 4;
export const FILE_ATTRIBUTE_DIRECTORY = 16;
export const FILE_ATTRIBUTE_ARCHIVE = 32;
export const FILE_ATTRIBUTE_DEVICE = 64;
export const FILE_ATTRIBUTE_NORMAL = 128;
export const FILE_ATTRIBUTE_TEMPORARY = 256;
export const FILE_ATTRIBUTE_SPARSE_FILE = 512;
export const FILE_ATTRIBUTE_REPARSE_POINT = 1024;
export const FILE_ATTRIBUTE_COMPRESSED = 2048;
export const FILE_ATTRIBUTE_OFFLINE = 4096;
export const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;
export const FILE_ATTRIBUTE_ENCRYPTED = 16384;
export const FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;
export const FILE_ATTRIBUTE_VIRTUAL = 65536;
export const FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;
export const FILE_ATTRIBUTE_EA = 262144;
export const FILE_ATTRIBUTE_PINNED = 524288;
export const FILE_ATTRIBUTE_UNPINNED = 1048576;
export const FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;
export const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;
export const FILE_FLAG_WRITE_THROUGH = 2147483648;
export const FILE_FLAG_OVERLAPPED = 1073741824;
export const FILE_FLAG_NO_BUFFERING = 536870912;
export const FILE_FLAG_RANDOM_ACCESS = 268435456;
export const FILE_FLAG_SEQUENTIAL_SCAN = 134217728;
export const FILE_FLAG_DELETE_ON_CLOSE = 67108864;
export const FILE_FLAG_BACKUP_SEMANTICS = 33554432;
export const FILE_FLAG_POSIX_SEMANTICS = 16777216;
export const FILE_FLAG_SESSION_AWARE = 8388608;
export const FILE_FLAG_OPEN_REPARSE_POINT = 2097152;
export const FILE_FLAG_OPEN_NO_RECALL = 1048576;
export const FILE_FLAG_FIRST_PIPE_INSTANCE = 524288;
export const PIPE_ACCESS_DUPLEX = 3;
export const PIPE_ACCESS_INBOUND = 1;
export const PIPE_ACCESS_OUTBOUND = 2;
export const SECURITY_ANONYMOUS = 0;
export const SECURITY_IDENTIFICATION = 65536;
export const SECURITY_IMPERSONATION = 131072;
export const SECURITY_DELEGATION = 196608;
export const SECURITY_CONTEXT_TRACKING = 262144;
export const SECURITY_EFFECTIVE_ONLY = 524288;
export const SECURITY_SQOS_PRESENT = 1048576;
export const SECURITY_VALID_SQOS_FLAGS = 2031616;
export const NO_ERROR = 0;
export const WAIT_OBJECT_0 = 0;
export const WAIT_ABANDONED = 128;
export const WAIT_ABANDONED_0 = 128;
export const WAIT_IO_COMPLETION = 192;
export const WAIT_TIMEOUT = 258;
export const WAIT_FAILED = 4294967295;
export const ERROR_SUCCESS = 0;
export const ERROR_INVALID_FUNCTION = 1;
export const ERROR_FILE_NOT_FOUND = 2;
export const ERROR_PATH_NOT_FOUND = 3;
export const ERROR_TOO_MANY_OPEN_FILES = 4;
export const ERROR_ACCESS_DENIED = 5;
export const ERROR_INVALID_HANDLE = 6;
export const ERROR_ARENA_TRASHED = 7;
export const ERROR_NOT_ENOUGH_MEMORY = 8;
export const ERROR_INVALID_BLOCK = 9;
export const ERROR_BAD_ENVIRONMENT = 10;
export const ERROR_BAD_FORMAT = 11;
export const ERROR_INVALID_ACCESS = 12;
export const ERROR_INVALID_DATA = 13;
export const ERROR_OUTOFMEMORY = 14;
export const ERROR_INVALID_DRIVE = 15;
export const ERROR_CURRENT_DIRECTORY = 16;
export const ERROR_NOT_SAME_DEVICE = 17;
export const ERROR_NO_MORE_FILES = 18;
export const ERROR_WRITE_PROTECT = 19;
export const ERROR_BAD_UNIT = 20;
export const ERROR_NOT_READY = 21;
export const ERROR_BAD_COMMAND = 22;
export const ERROR_CRC = 23;
export const ERROR_BAD_LENGTH = 24;
export const ERROR_SEEK = 25;
export const ERROR_NOT_DOS_DISK = 26;
export const ERROR_SECTOR_NOT_FOUND = 27;
export const ERROR_OUT_OF_PAPER = 28;
export const ERROR_WRITE_FAULT = 29;
export const ERROR_READ_FAULT = 30;
export const ERROR_GEN_FAILURE = 31;
export const ERROR_SHARING_VIOLATION = 32;
export const ERROR_LOCK_VIOLATION = 33;
export const ERROR_WRONG_DISK = 34;
export const ERROR_SHARING_BUFFER_EXCEEDED = 36;
export const ERROR_HANDLE_EOF = 38;
export const ERROR_HANDLE_DISK_FULL = 39;
export const ERROR_NOT_SUPPORTED = 50;
export const ERROR_REM_NOT_LIST = 51;
export const ERROR_DUP_NAME = 52;
export const ERROR_BAD_NETPATH = 53;
export const ERROR_NETWORK_BUSY = 54;
export const ERROR_DEV_NOT_EXIST = 55;
export const ERROR_TOO_MANY_CMDS = 56;
export const ERROR_ADAP_HDW_ERR = 57;
export const ERROR_BAD_NET_RESP = 58;
export const ERROR_UNEXP_NET_ERR = 59;
export const ERROR_BAD_REM_ADAP = 60;
export const ERROR_PRINTQ_FULL = 61;
export const ERROR_NO_SPOOL_SPACE = 62;
export const ERROR_PRINT_CANCELLED = 63;
export const ERROR_NETNAME_DELETED = 64;
export const ERROR_NETWORK_ACCESS_DENIED = 65;
export const ERROR_BAD_DEV_TYPE = 66;
export const ERROR_BAD_NET_NAME = 67;
export const ERROR_TOO_MANY_NAMES = 68;
export const ERROR_TOO_MANY_SESS = 69;
export const ERROR_SHARING_PAUSED = 70;
export const ERROR_REQ_NOT_ACCEP = 71;
export const ERROR_REDIR_PAUSED = 72;
export const ERROR_FILE_EXISTS = 80;
export const ERROR_CANNOT_MAKE = 82;
export const ERROR_FAIL_I24 = 83;
export const ERROR_OUT_OF_STRUCTURES = 84;
export const ERROR_ALREADY_ASSIGNED = 85;
export const ERROR_INVALID_PASSWORD = 86;
export const ERROR_INVALID_PARAMETER = 87;
export const ERROR_NET_WRITE_FAULT = 88;
export const ERROR_NO_PROC_SLOTS = 89;
export const ERROR_TOO_MANY_SEMAPHORES = 100;
export const ERROR_EXCL_SEM_ALREADY_OWNED = 101;
export const ERROR_SEM_IS_SET = 102;
export const ERROR_TOO_MANY_SEM_REQUESTS = 103;
export const ERROR_INVALID_AT_INTERRUPT_TIME = 104;
export const ERROR_SEM_OWNER_DIED = 105;
export const ERROR_SEM_USER_LIMIT = 106;
export const ERROR_DISK_CHANGE = 107;
export const ERROR_DRIVE_LOCKED = 108;
export const ERROR_BROKEN_PIPE = 109;
export const ERROR_OPEN_FAILED = 110;
export const ERROR_BUFFER_OVERFLOW = 111;
export const ERROR_DISK_FULL = 112;
export const ERROR_NO_MORE_SEARCH_HANDLES = 113;
export const ERROR_INVALID_TARGET_HANDLE = 114;
export const ERROR_INVALID_CATEGORY = 117;
export const ERROR_INVALID_VERIFY_SWITCH = 118;
export const ERROR_BAD_DRIVER_LEVEL = 119;
export const ERROR_CALL_NOT_IMPLEMENTED = 120;
export const ERROR_SEM_TIMEOUT = 121;
export const ERROR_INSUFFICIENT_BUFFER = 122;
export const ERROR_INVALID_NAME = 123;
export const ERROR_INVALID_LEVEL = 124;
export const ERROR_NO_VOLUME_LABEL = 125;
export const ERROR_MOD_NOT_FOUND = 126;
export const ERROR_PROC_NOT_FOUND = 127;
export const ERROR_WAIT_NO_CHILDREN = 128;
export const ERROR_CHILD_NOT_COMPLETE = 129;
export const ERROR_DIRECT_ACCESS_HANDLE = 130;
export const ERROR_NEGATIVE_SEEK = 131;
export const ERROR_SEEK_ON_DEVICE = 132;
export const ERROR_IS_JOIN_TARGET = 133;
export const ERROR_IS_JOINED = 134;
export const ERROR_IS_SUBSTED = 135;
export const ERROR_NOT_JOINED = 136;
export const ERROR_NOT_SUBSTED = 137;
export const ERROR_JOIN_TO_JOIN = 138;
export const ERROR_SUBST_TO_SUBST = 139;
export const ERROR_JOIN_TO_SUBST = 140;
export const ERROR_SUBST_TO_JOIN = 141;
export const ERROR_BUSY_DRIVE = 142;
export const ERROR_SAME_DRIVE = 143;
export const ERROR_DIR_NOT_ROOT = 144;
export const ERROR_DIR_NOT_EMPTY = 145;
export const ERROR_IS_SUBST_PATH = 146;
export const ERROR_IS_JOIN_PATH = 147;
export const ERROR_PATH_BUSY = 148;
export const ERROR_IS_SUBST_TARGET = 149;
export const ERROR_SYSTEM_TRACE = 150;
export const ERROR_INVALID_EVENT_COUNT = 151;
export const ERROR_TOO_MANY_MUXWAITERS = 152;
export const ERROR_INVALID_LIST_FORMAT = 153;
export const ERROR_LABEL_TOO_LONG = 154;
export const ERROR_TOO_MANY_TCBS = 155;
export const ERROR_SIGNAL_REFUSED = 156;
export const ERROR_DISCARDED = 157;
export const ERROR_NOT_LOCKED = 158;
export const ERROR_BAD_THREADID_ADDR = 159;
export const ERROR_BAD_ARGUMENTS = 160;
export const ERROR_BAD_PATHNAME = 161;
export const ERROR_SIGNAL_PENDING = 162;
export const ERROR_MAX_THRDS_REACHED = 164;
export const ERROR_LOCK_FAILED = 167;
export const ERROR_BUSY = 170;
export const ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;
export const ERROR_CANCEL_VIOLATION = 173;
export const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;
export const ERROR_INVALID_SEGMENT_NUMBER = 180;
export const ERROR_INVALID_ORDINAL = 182;
export const ERROR_ALREADY_EXISTS = 183;
export const ERROR_INVALID_FLAG_NUMBER = 186;
export const ERROR_SEM_NOT_FOUND = 187;
export const ERROR_INVALID_STARTING_CODESEG = 188;
export const ERROR_INVALID_STACKSEG = 189;
export const ERROR_INVALID_MODULETYPE = 190;
export const ERROR_INVALID_EXE_SIGNATURE = 191;
export const ERROR_EXE_MARKED_INVALID = 192;
export const ERROR_BAD_EXE_FORMAT = 193;
export const ERROR_ITERATED_DATA_EXCEEDS_64k = 194;
export const ERROR_INVALID_MINALLOCSIZE = 195;
export const ERROR_DYNLINK_FROM_INVALID_RING = 196;
export const ERROR_IOPL_NOT_ENABLED = 197;
export const ERROR_INVALID_SEGDPL = 198;
export const ERROR_AUTODATASEG_EXCEEDS_64k = 199;
export const ERROR_RING2SEG_MUST_BE_MOVABLE = 200;
export const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;
export const ERROR_INFLOOP_IN_RELOC_CHAIN = 202;
export const ERROR_ENVVAR_NOT_FOUND = 203;
export const ERROR_NO_SIGNAL_SENT = 205;
export const ERROR_FILENAME_EXCED_RANGE = 206;
export const ERROR_RING2_STACK_IN_USE = 207;
export const ERROR_META_EXPANSION_TOO_LONG = 208;
export const ERROR_INVALID_SIGNAL_NUMBER = 209;
export const ERROR_THREAD_1_INACTIVE = 210;
export const ERROR_LOCKED = 212;
export const ERROR_TOO_MANY_MODULES = 214;
export const ERROR_NESTING_NOT_ALLOWED = 215;
export const ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;
export const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;
export const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;
export const ERROR_FILE_CHECKED_OUT = 220;
export const ERROR_CHECKOUT_REQUIRED = 221;
export const ERROR_BAD_FILE_TYPE = 222;
export const ERROR_FILE_TOO_LARGE = 223;
export const ERROR_FORMS_AUTH_REQUIRED = 224;
export const ERROR_VIRUS_INFECTED = 225;
export const ERROR_VIRUS_DELETED = 226;
export const ERROR_PIPE_LOCAL = 229;
export const ERROR_BAD_PIPE = 230;
export const ERROR_PIPE_BUSY = 231;
export const ERROR_NO_DATA = 232;
export const ERROR_PIPE_NOT_CONNECTED = 233;
export const ERROR_MORE_DATA = 234;
export const ERROR_NO_WORK_DONE = 235;
export const ERROR_VC_DISCONNECTED = 240;
export const ERROR_INVALID_EA_NAME = 254;
export const ERROR_EA_LIST_INCONSISTENT = 255;
export const ERROR_NO_MORE_ITEMS = 259;
export const ERROR_CANNOT_COPY = 266;
export const ERROR_DIRECTORY = 267;
export const ERROR_EAS_DIDNT_FIT = 275;
export const ERROR_EA_FILE_CORRUPT = 276;
export const ERROR_EA_TABLE_FULL = 277;
export const ERROR_INVALID_EA_HANDLE = 278;
export const ERROR_EAS_NOT_SUPPORTED = 282;
export const ERROR_NOT_OWNER = 288;
export const ERROR_TOO_MANY_POSTS = 298;
export const ERROR_PARTIAL_COPY = 299;
export const ERROR_OPLOCK_NOT_GRANTED = 300;
export const ERROR_INVALID_OPLOCK_PROTOCOL = 301;
export const ERROR_DISK_TOO_FRAGMENTED = 302;
export const ERROR_DELETE_PENDING = 303;
export const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;
export const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;
export const ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;
export const ERROR_INVALID_LOCK_RANGE = 307;
export const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;
export const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;
export const ERROR_INVALID_EXCEPTION_HANDLER = 310;
export const ERROR_DUPLICATE_PRIVILEGES = 311;
export const ERROR_NO_RANGES_PROCESSED = 312;
export const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;
export const ERROR_DISK_RESOURCES_EXHAUSTED = 314;
export const ERROR_INVALID_TOKEN = 315;
export const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;
export const ERROR_MR_MID_NOT_FOUND = 317;
export const ERROR_SCOPE_NOT_FOUND = 318;
export const ERROR_UNDEFINED_SCOPE = 319;
export const ERROR_INVALID_CAP = 320;
export const ERROR_DEVICE_UNREACHABLE = 321;
export const ERROR_DEVICE_NO_RESOURCES = 322;
export const ERROR_DATA_CHECKSUM_ERROR = 323;
export const ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;
export const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;
export const ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;
export const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;
export const ERROR_OPERATION_IN_PROGRESS = 329;
export const ERROR_BAD_DEVICE_PATH = 330;
export const ERROR_TOO_MANY_DESCRIPTORS = 331;
export const ERROR_SCRUB_DATA_DISABLED = 332;
export const ERROR_NOT_REDUNDANT_STORAGE = 333;
export const ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;
export const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;
export const ERROR_DIRECTORY_NOT_SUPPORTED = 336;
export const ERROR_NOT_READ_FROM_COPY = 337;
export const ERROR_FT_WRITE_FAILURE = 338;
export const ERROR_FT_DI_SCAN_REQUIRED = 339;
export const ERROR_INVALID_KERNEL_INFO_VERSION = 340;
export const ERROR_INVALID_PEP_INFO_VERSION = 341;
export const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;
export const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;
export const ERROR_COMPRESSION_NOT_BENEFICIAL = 344;
export const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;
export const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;
export const ERROR_BLOCK_TOO_MANY_REFERENCES = 347;
export const ERROR_MARKED_TO_DISALLOW_WRITES = 348;
export const ERROR_ENCLAVE_FAILURE = 349;
export const ERROR_FAIL_NOACTION_REBOOT = 350;
export const ERROR_FAIL_SHUTDOWN = 351;
export const ERROR_FAIL_RESTART = 352;
export const ERROR_MAX_SESSIONS_REACHED = 353;
export const ERROR_NETWORK_ACCESS_DENIED_EDP = 354;
export const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;
export const ERROR_EDP_POLICY_DENIES_OPERATION = 356;
export const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;
export const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;
export const ERROR_DEVICE_IN_MAINTENANCE = 359;
export const ERROR_NOT_SUPPORTED_ON_DAX = 360;
export const ERROR_DAX_MAPPING_EXISTS = 361;
export const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;
export const ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;
export const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;
export const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;
export const ERROR_CHILD_PROCESS_BLOCKED = 367;
export const ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;
export const ERROR_GDI_HANDLE_LEAK = 373;
export const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;
export const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;
export const ERROR_NOT_A_CLOUD_FILE = 376;
export const ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;
export const ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;
export const ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;
export const ERROR_CLOUD_FILE_INVALID_REQUEST = 380;
export const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;
export const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;
export const ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;
export const ERROR_SMB1_NOT_AVAILABLE = 384;
export const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;
export const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;
export const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;
export const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;
export const ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;
export const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;
export const ERROR_CLOUD_FILE_IN_USE = 391;
export const ERROR_CLOUD_FILE_PINNED = 392;
export const ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;
export const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;
export const ERROR_CLOUD_FILE_ACCESS_DENIED = 395;
export const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;
export const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;
export const ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;
export const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;
export const ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;
export const ERROR_THREAD_MODE_NOT_BACKGROUND = 401;
export const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;
export const ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;
export const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;
export const ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;
export const ERROR_FILE_PROTECTED_UNDER_DPL = 406;
export const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;
export const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;
export const ERROR_APPX_FILE_NOT_ENCRYPTED = 409;
export const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;
export const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;
export const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;
export const ERROR_FT_READ_FAILURE = 415;
export const ERROR_STORAGE_RESERVE_ID_INVALID = 416;
export const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;
export const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;
export const ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;
export const ERROR_NOT_A_DAX_VOLUME = 420;
export const ERROR_NOT_DAX_MAPPABLE = 421;
export const ERROR_TIME_SENSITIVE_THREAD = 422;
export const ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;
export const ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;
export const ERROR_FILE_NOT_SUPPORTED = 425;
export const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;
export const ERROR_NO_TASK_QUEUE = 427;
export const ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;
export const ERROR_NOT_SUPPORTED_WITH_BTT = 429;
export const ERROR_ENCRYPTION_DISABLED = 430;
export const ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;
export const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;
export const ERROR_NO_SUCH_DEVICE = 433;
export const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;
export const ERROR_FILE_SNAP_IN_PROGRESS = 435;
export const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;
export const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;
export const ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;
export const ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;
export const ERROR_FILE_SNAP_INVALID_PARAMETER = 440;
export const ERROR_UNSATISFIED_DEPENDENCIES = 441;
export const ERROR_CASE_SENSITIVE_PATH = 442;
export const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;
export const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;
export const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;
export const ERROR_DLP_POLICY_DENIES_OPERATION = 446;
export const ERROR_SECURITY_DENIES_OPERATION = 447;
export const ERROR_UNTRUSTED_MOUNT_POINT = 448;
export const ERROR_DLP_POLICY_SILENTLY_FAIL = 449;
export const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;
export const ERROR_CAPAUTHZ_CHANGE_TYPE = 451;
export const ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;
export const ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;
export const ERROR_CAPAUTHZ_NO_POLICY = 454;
export const ERROR_CAPAUTHZ_DB_CORRUPTED = 455;
export const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;
export const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;
export const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;
export const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;
export const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;
export const ERROR_CIMFS_IMAGE_CORRUPT = 470;
export const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471;
export const ERROR_STORAGE_STACK_ACCESS_DENIED = 472;
export const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473;
export const ERROR_INDEX_OUT_OF_BOUNDS = 474;
export const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;
export const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;
export const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;
export const ERROR_DEVICE_HARDWARE_ERROR = 483;
export const ERROR_INVALID_ADDRESS = 487;
export const ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;
export const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489;
export const ERROR_SPARSE_FILE_NOT_SUPPORTED = 490;
export const ERROR_PAGEFILE_NOT_SUPPORTED = 491;
export const ERROR_VOLUME_NOT_SUPPORTED = 492;
export const ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493;
export const ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494;
export const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495;
export const ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496;
export const ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497;
export const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498;
export const ERROR_NOT_SUPPORTED_WITH_AUDITING = 499;
export const ERROR_USER_PROFILE_LOAD = 500;
export const ERROR_SESSION_KEY_TOO_SHORT = 501;
export const ERROR_ACCESS_DENIED_APPDATA = 502;
export const ERROR_NOT_SUPPORTED_WITH_MONITORING = 503;
export const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504;
export const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505;
export const ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506;
export const ERROR_DEVICE_RESET_REQUIRED = 507;
export const ERROR_VOLUME_WRITE_ACCESS_DENIED = 508;
export const ERROR_ARITHMETIC_OVERFLOW = 534;
export const ERROR_PIPE_CONNECTED = 535;
export const ERROR_PIPE_LISTENING = 536;
export const ERROR_VERIFIER_STOP = 537;
export const ERROR_ABIOS_ERROR = 538;
export const ERROR_WX86_WARNING = 539;
export const ERROR_WX86_ERROR = 540;
export const ERROR_TIMER_NOT_CANCELED = 541;
export const ERROR_UNWIND = 542;
export const ERROR_BAD_STACK = 543;
export const ERROR_INVALID_UNWIND_TARGET = 544;
export const ERROR_INVALID_PORT_ATTRIBUTES = 545;
export const ERROR_PORT_MESSAGE_TOO_LONG = 546;
export const ERROR_INVALID_QUOTA_LOWER = 547;
export const ERROR_DEVICE_ALREADY_ATTACHED = 548;
export const ERROR_INSTRUCTION_MISALIGNMENT = 549;
export const ERROR_PROFILING_NOT_STARTED = 550;
export const ERROR_PROFILING_NOT_STOPPED = 551;
export const ERROR_COULD_NOT_INTERPRET = 552;
export const ERROR_PROFILING_AT_LIMIT = 553;
export const ERROR_CANT_WAIT = 554;
export const ERROR_CANT_TERMINATE_SELF = 555;
export const ERROR_UNEXPECTED_MM_CREATE_ERR = 556;
export const ERROR_UNEXPECTED_MM_MAP_ERROR = 557;
export const ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;
export const ERROR_BAD_FUNCTION_TABLE = 559;
export const ERROR_NO_GUID_TRANSLATION = 560;
export const ERROR_INVALID_LDT_SIZE = 561;
export const ERROR_INVALID_LDT_OFFSET = 563;
export const ERROR_INVALID_LDT_DESCRIPTOR = 564;
export const ERROR_TOO_MANY_THREADS = 565;
export const ERROR_THREAD_NOT_IN_PROCESS = 566;
export const ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;
export const ERROR_LOGON_SERVER_CONFLICT = 568;
export const ERROR_SYNCHRONIZATION_REQUIRED = 569;
export const ERROR_NET_OPEN_FAILED = 570;
export const ERROR_IO_PRIVILEGE_FAILED = 571;
export const ERROR_CONTROL_C_EXIT = 572;
export const ERROR_MISSING_SYSTEMFILE = 573;
export const ERROR_UNHANDLED_EXCEPTION = 574;
export const ERROR_APP_INIT_FAILURE = 575;
export const ERROR_PAGEFILE_CREATE_FAILED = 576;
export const ERROR_INVALID_IMAGE_HASH = 577;
export const ERROR_NO_PAGEFILE = 578;
export const ERROR_ILLEGAL_FLOAT_CONTEXT = 579;
export const ERROR_NO_EVENT_PAIR = 580;
export const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;
export const ERROR_ILLEGAL_CHARACTER = 582;
export const ERROR_UNDEFINED_CHARACTER = 583;
export const ERROR_FLOPPY_VOLUME = 584;
export const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;
export const ERROR_BACKUP_CONTROLLER = 586;
export const ERROR_MUTANT_LIMIT_EXCEEDED = 587;
export const ERROR_FS_DRIVER_REQUIRED = 588;
export const ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;
export const ERROR_DEBUG_ATTACH_FAILED = 590;
export const ERROR_SYSTEM_PROCESS_TERMINATED = 591;
export const ERROR_DATA_NOT_ACCEPTED = 592;
export const ERROR_VDM_HARD_ERROR = 593;
export const ERROR_DRIVER_CANCEL_TIMEOUT = 594;
export const ERROR_REPLY_MESSAGE_MISMATCH = 595;
export const ERROR_LOST_WRITEBEHIND_DATA = 596;
export const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;
export const ERROR_NOT_TINY_STREAM = 598;
export const ERROR_STACK_OVERFLOW_READ = 599;
export const ERROR_CONVERT_TO_LARGE = 600;
export const ERROR_FOUND_OUT_OF_SCOPE = 601;
export const ERROR_ALLOCATE_BUCKET = 602;
export const ERROR_MARSHALL_OVERFLOW = 603;
export const ERROR_INVALID_VARIANT = 604;
export const ERROR_BAD_COMPRESSION_BUFFER = 605;
export const ERROR_AUDIT_FAILED = 606;
export const ERROR_TIMER_RESOLUTION_NOT_SET = 607;
export const ERROR_INSUFFICIENT_LOGON_INFO = 608;
export const ERROR_BAD_DLL_ENTRYPOINT = 609;
export const ERROR_BAD_SERVICE_ENTRYPOINT = 610;
export const ERROR_IP_ADDRESS_CONFLICT1 = 611;
export const ERROR_IP_ADDRESS_CONFLICT2 = 612;
export const ERROR_REGISTRY_QUOTA_LIMIT = 613;
export const ERROR_NO_CALLBACK_ACTIVE = 614;
export const ERROR_PWD_TOO_SHORT = 615;
export const ERROR_PWD_TOO_RECENT = 616;
export const ERROR_PWD_HISTORY_CONFLICT = 617;
export const ERROR_UNSUPPORTED_COMPRESSION = 618;
export const ERROR_INVALID_HW_PROFILE = 619;
export const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;
export const ERROR_QUOTA_LIST_INCONSISTENT = 621;
export const ERROR_EVALUATION_EXPIRATION = 622;
export const ERROR_ILLEGAL_DLL_RELOCATION = 623;
export const ERROR_DLL_INIT_FAILED_LOGOFF = 624;
export const ERROR_VALIDATE_CONTINUE = 625;
export const ERROR_NO_MORE_MATCHES = 626;
export const ERROR_RANGE_LIST_CONFLICT = 627;
export const ERROR_SERVER_SID_MISMATCH = 628;
export const ERROR_CANT_ENABLE_DENY_ONLY = 629;
export const ERROR_FLOAT_MULTIPLE_FAULTS = 630;
export const ERROR_FLOAT_MULTIPLE_TRAPS = 631;
export const ERROR_NOINTERFACE = 632;
export const ERROR_DRIVER_FAILED_SLEEP = 633;
export const ERROR_CORRUPT_SYSTEM_FILE = 634;
export const ERROR_COMMITMENT_MINIMUM = 635;
export const ERROR_PNP_RESTART_ENUMERATION = 636;
export const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;
export const ERROR_PNP_REBOOT_REQUIRED = 638;
export const ERROR_INSUFFICIENT_POWER = 639;
export const ERROR_MULTIPLE_FAULT_VIOLATION = 640;
export const ERROR_SYSTEM_SHUTDOWN = 641;
export const ERROR_PORT_NOT_SET = 642;
export const ERROR_DS_VERSION_CHECK_FAILURE = 643;
export const ERROR_RANGE_NOT_FOUND = 644;
export const ERROR_NOT_SAFE_MODE_DRIVER = 646;
export const ERROR_FAILED_DRIVER_ENTRY = 647;
export const ERROR_DEVICE_ENUMERATION_ERROR = 648;
export const ERROR_MOUNT_POINT_NOT_RESOLVED = 649;
export const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;
export const ERROR_MCA_OCCURED = 651;
export const ERROR_DRIVER_DATABASE_ERROR = 652;
export const ERROR_SYSTEM_HIVE_TOO_LARGE = 653;
export const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;
export const ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;
export const ERROR_HIBERNATION_FAILURE = 656;
export const ERROR_PWD_TOO_LONG = 657;
export const ERROR_FILE_SYSTEM_LIMITATION = 665;
export const ERROR_ASSERTION_FAILURE = 668;
export const ERROR_ACPI_ERROR = 669;
export const ERROR_WOW_ASSERTION = 670;
export const ERROR_PNP_BAD_MPS_TABLE = 671;
export const ERROR_PNP_TRANSLATION_FAILED = 672;
export const ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;
export const ERROR_PNP_INVALID_ID = 674;
export const ERROR_WAKE_SYSTEM_DEBUGGER = 675;
export const ERROR_HANDLES_CLOSED = 676;
export const ERROR_EXTRANEOUS_INFORMATION = 677;
export const ERROR_RXACT_COMMIT_NECESSARY = 678;
export const ERROR_MEDIA_CHECK = 679;
export const ERROR_GUID_SUBSTITUTION_MADE = 680;
export const ERROR_STOPPED_ON_SYMLINK = 681;
export const ERROR_LONGJUMP = 682;
export const ERROR_PLUGPLAY_QUERY_VETOED = 683;
export const ERROR_UNWIND_CONSOLIDATE = 684;
export const ERROR_REGISTRY_HIVE_RECOVERED = 685;
export const ERROR_DLL_MIGHT_BE_INSECURE = 686;
export const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;
export const ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;
export const ERROR_DBG_REPLY_LATER = 689;
export const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;
export const ERROR_DBG_TERMINATE_THREAD = 691;
export const ERROR_DBG_TERMINATE_PROCESS = 692;
export const ERROR_DBG_CONTROL_C = 693;
export const ERROR_DBG_PRINTEXCEPTION_C = 694;
export const ERROR_DBG_RIPEXCEPTION = 695;
export const ERROR_DBG_CONTROL_BREAK = 696;
export const ERROR_DBG_COMMAND_EXCEPTION = 697;
export const ERROR_OBJECT_NAME_EXISTS = 698;
export const ERROR_THREAD_WAS_SUSPENDED = 699;
export const ERROR_IMAGE_NOT_AT_BASE = 700;
export const ERROR_RXACT_STATE_CREATED = 701;
export const ERROR_SEGMENT_NOTIFICATION = 702;
export const ERROR_BAD_CURRENT_DIRECTORY = 703;
export const ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;
export const ERROR_FT_WRITE_RECOVERY = 705;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;
export const ERROR_RECEIVE_PARTIAL = 707;
export const ERROR_RECEIVE_EXPEDITED = 708;
export const ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;
export const ERROR_EVENT_DONE = 710;
export const ERROR_EVENT_PENDING = 711;
export const ERROR_CHECKING_FILE_SYSTEM = 712;
export const ERROR_FATAL_APP_EXIT = 713;
export const ERROR_PREDEFINED_HANDLE = 714;
export const ERROR_WAS_UNLOCKED = 715;
export const ERROR_SERVICE_NOTIFICATION = 716;
export const ERROR_WAS_LOCKED = 717;
export const ERROR_LOG_HARD_ERROR = 718;
export const ERROR_ALREADY_WIN32 = 719;
export const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;
export const ERROR_NO_YIELD_PERFORMED = 721;
export const ERROR_TIMER_RESUME_IGNORED = 722;
export const ERROR_ARBITRATION_UNHANDLED = 723;
export const ERROR_CARDBUS_NOT_SUPPORTED = 724;
export const ERROR_MP_PROCESSOR_MISMATCH = 725;
export const ERROR_HIBERNATED = 726;
export const ERROR_RESUME_HIBERNATION = 727;
export const ERROR_FIRMWARE_UPDATED = 728;
export const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;
export const ERROR_WAKE_SYSTEM = 730;
export const ERROR_WAIT_1 = 731;
export const ERROR_WAIT_2 = 732;
export const ERROR_WAIT_3 = 733;
export const ERROR_WAIT_63 = 734;
export const ERROR_ABANDONED_WAIT_0 = 735;
export const ERROR_ABANDONED_WAIT_63 = 736;
export const ERROR_USER_APC = 737;
export const ERROR_KERNEL_APC = 738;
export const ERROR_ALERTED = 739;
export const ERROR_ELEVATION_REQUIRED = 740;
export const ERROR_REPARSE = 741;
export const ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;
export const ERROR_VOLUME_MOUNTED = 743;
export const ERROR_RXACT_COMMITTED = 744;
export const ERROR_NOTIFY_CLEANUP = 745;
export const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;
export const ERROR_PAGE_FAULT_TRANSITION = 747;
export const ERROR_PAGE_FAULT_DEMAND_ZERO = 748;
export const ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;
export const ERROR_PAGE_FAULT_GUARD_PAGE = 750;
export const ERROR_PAGE_FAULT_PAGING_FILE = 751;
export const ERROR_CACHE_PAGE_LOCKED = 752;
export const ERROR_CRASH_DUMP = 753;
export const ERROR_BUFFER_ALL_ZEROS = 754;
export const ERROR_REPARSE_OBJECT = 755;
export const ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;
export const ERROR_TRANSLATION_COMPLETE = 757;
export const ERROR_NOTHING_TO_TERMINATE = 758;
export const ERROR_PROCESS_NOT_IN_JOB = 759;
export const ERROR_PROCESS_IN_JOB = 760;
export const ERROR_VOLSNAP_HIBERNATE_READY = 761;
export const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;
export const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;
export const ERROR_INTERRUPT_STILL_CONNECTED = 764;
export const ERROR_WAIT_FOR_OPLOCK = 765;
export const ERROR_DBG_EXCEPTION_HANDLED = 766;
export const ERROR_DBG_CONTINUE = 767;
export const ERROR_CALLBACK_POP_STACK = 768;
export const ERROR_COMPRESSION_DISABLED = 769;
export const ERROR_CANTFETCHBACKWARDS = 770;
export const ERROR_CANTSCROLLBACKWARDS = 771;
export const ERROR_ROWSNOTRELEASED = 772;
export const ERROR_BAD_ACCESSOR_FLAGS = 773;
export const ERROR_ERRORS_ENCOUNTERED = 774;
export const ERROR_NOT_CAPABLE = 775;
export const ERROR_REQUEST_OUT_OF_SEQUENCE = 776;
export const ERROR_VERSION_PARSE_ERROR = 777;
export const ERROR_BADSTARTPOSITION = 778;
export const ERROR_MEMORY_HARDWARE = 779;
export const ERROR_DISK_REPAIR_DISABLED = 780;
export const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;
export const ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;
export const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;
export const ERROR_MCA_EXCEPTION = 784;
export const ERROR_ACCESS_AUDIT_BY_POLICY = 785;
export const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;
export const ERROR_ABANDON_HIBERFILE = 787;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;
export const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;
export const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;
export const ERROR_BAD_MCFG_TABLE = 791;
export const ERROR_DISK_REPAIR_REDIRECTED = 792;
export const ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;
export const ERROR_CORRUPT_LOG_OVERFULL = 794;
export const ERROR_CORRUPT_LOG_CORRUPTED = 795;
export const ERROR_CORRUPT_LOG_UNAVAILABLE = 796;
export const ERROR_CORRUPT_LOG_DELETED_FULL = 797;
export const ERROR_CORRUPT_LOG_CLEARED = 798;
export const ERROR_ORPHAN_NAME_EXHAUSTED = 799;
export const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;
export const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;
export const ERROR_CANNOT_BREAK_OPLOCK = 802;
export const ERROR_OPLOCK_HANDLE_CLOSED = 803;
export const ERROR_NO_ACE_CONDITION = 804;
export const ERROR_INVALID_ACE_CONDITION = 805;
export const ERROR_FILE_HANDLE_REVOKED = 806;
export const ERROR_IMAGE_AT_DIFFERENT_BASE = 807;
export const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;
export const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;
export const ERROR_QUOTA_ACTIVITY = 810;
export const ERROR_HANDLE_REVOKED = 811;
export const ERROR_CALLBACK_INVOKE_INLINE = 812;
export const ERROR_CPU_SET_INVALID = 813;
export const ERROR_ENCLAVE_NOT_TERMINATED = 814;
export const ERROR_ENCLAVE_VIOLATION = 815;
export const ERROR_SERVER_TRANSPORT_CONFLICT = 816;
export const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817;
export const ERROR_FT_READ_FROM_COPY_FAILURE = 818;
export const ERROR_SECTION_DIRECT_MAP_ONLY = 819;
export const ERROR_EA_ACCESS_DENIED = 994;
export const ERROR_OPERATION_ABORTED = 995;
export const ERROR_IO_INCOMPLETE = 996;
export const ERROR_IO_PENDING = 997;
export const ERROR_NOACCESS = 998;
export const ERROR_SWAPERROR = 999;
export const ERROR_STACK_OVERFLOW = 1001;
export const ERROR_INVALID_MESSAGE = 1002;
export const ERROR_CAN_NOT_COMPLETE = 1003;
export const ERROR_INVALID_FLAGS = 1004;
export const ERROR_UNRECOGNIZED_VOLUME = 1005;
export const ERROR_FILE_INVALID = 1006;
export const ERROR_FULLSCREEN_MODE = 1007;
export const ERROR_NO_TOKEN = 1008;
export const ERROR_BADDB = 1009;
export const ERROR_BADKEY = 1010;
export const ERROR_CANTOPEN = 1011;
export const ERROR_CANTREAD = 1012;
export const ERROR_CANTWRITE = 1013;
export const ERROR_REGISTRY_RECOVERED = 1014;
export const ERROR_REGISTRY_CORRUPT = 1015;
export const ERROR_REGISTRY_IO_FAILED = 1016;
export const ERROR_NOT_REGISTRY_FILE = 1017;
export const ERROR_KEY_DELETED = 1018;
export const ERROR_NO_LOG_SPACE = 1019;
export const ERROR_KEY_HAS_CHILDREN = 1020;
export const ERROR_CHILD_MUST_BE_VOLATILE = 1021;
export const ERROR_NOTIFY_ENUM_DIR = 1022;
export const ERROR_DEPENDENT_SERVICES_RUNNING = 1051;
export const ERROR_INVALID_SERVICE_CONTROL = 1052;
export const ERROR_SERVICE_REQUEST_TIMEOUT = 1053;
export const ERROR_SERVICE_NO_THREAD = 1054;
export const ERROR_SERVICE_DATABASE_LOCKED = 1055;
export const ERROR_SERVICE_ALREADY_RUNNING = 1056;
export const ERROR_INVALID_SERVICE_ACCOUNT = 1057;
export const ERROR_SERVICE_DISABLED = 1058;
export const ERROR_CIRCULAR_DEPENDENCY = 1059;
export const ERROR_SERVICE_DOES_NOT_EXIST = 1060;
export const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;
export const ERROR_SERVICE_NOT_ACTIVE = 1062;
export const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;
export const ERROR_EXCEPTION_IN_SERVICE = 1064;
export const ERROR_DATABASE_DOES_NOT_EXIST = 1065;
export const ERROR_SERVICE_SPECIFIC_ERROR = 1066;
export const ERROR_PROCESS_ABORTED = 1067;
export const ERROR_SERVICE_DEPENDENCY_FAIL = 1068;
export const ERROR_SERVICE_LOGON_FAILED = 1069;
export const ERROR_SERVICE_START_HANG = 1070;
export const ERROR_INVALID_SERVICE_LOCK = 1071;
export const ERROR_SERVICE_MARKED_FOR_DELETE = 1072;
export const ERROR_SERVICE_EXISTS = 1073;
export const ERROR_ALREADY_RUNNING_LKG = 1074;
export const ERROR_SERVICE_DEPENDENCY_DELETED = 1075;
export const ERROR_BOOT_ALREADY_ACCEPTED = 1076;
export const ERROR_SERVICE_NEVER_STARTED = 1077;
export const ERROR_DUPLICATE_SERVICE_NAME = 1078;
export const ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;
export const ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;
export const ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;
export const ERROR_NO_RECOVERY_PROGRAM = 1082;
export const ERROR_SERVICE_NOT_IN_EXE = 1083;
export const ERROR_NOT_SAFEBOOT_SERVICE = 1084;
export const ERROR_END_OF_MEDIA = 1100;
export const ERROR_FILEMARK_DETECTED = 1101;
export const ERROR_BEGINNING_OF_MEDIA = 1102;
export const ERROR_SETMARK_DETECTED = 1103;
export const ERROR_NO_DATA_DETECTED = 1104;
export const ERROR_PARTITION_FAILURE = 1105;
export const ERROR_INVALID_BLOCK_LENGTH = 1106;
export const ERROR_DEVICE_NOT_PARTITIONED = 1107;
export const ERROR_UNABLE_TO_LOCK_MEDIA = 1108;
export const ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;
export const ERROR_MEDIA_CHANGED = 1110;
export const ERROR_BUS_RESET = 1111;
export const ERROR_NO_MEDIA_IN_DRIVE = 1112;
export const ERROR_NO_UNICODE_TRANSLATION = 1113;
export const ERROR_DLL_INIT_FAILED = 1114;
export const ERROR_SHUTDOWN_IN_PROGRESS = 1115;
export const ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;
export const ERROR_IO_DEVICE = 1117;
export const ERROR_SERIAL_NO_DEVICE = 1118;
export const ERROR_IRQ_BUSY = 1119;
export const ERROR_MORE_WRITES = 1120;
export const ERROR_COUNTER_TIMEOUT = 1121;
export const ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;
export const ERROR_FLOPPY_WRONG_CYLINDER = 1123;
export const ERROR_FLOPPY_UNKNOWN_ERROR = 1124;
export const ERROR_FLOPPY_BAD_REGISTERS = 1125;
export const ERROR_DISK_RECALIBRATE_FAILED = 1126;
export const ERROR_DISK_OPERATION_FAILED = 1127;
export const ERROR_DISK_RESET_FAILED = 1128;
export const ERROR_EOM_OVERFLOW = 1129;
export const ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;
export const ERROR_POSSIBLE_DEADLOCK = 1131;
export const ERROR_MAPPED_ALIGNMENT = 1132;
export const ERROR_SET_POWER_STATE_VETOED = 1140;
export const ERROR_SET_POWER_STATE_FAILED = 1141;
export const ERROR_TOO_MANY_LINKS = 1142;
export const ERROR_OLD_WIN_VERSION = 1150;
export const ERROR_APP_WRONG_OS = 1151;
export const ERROR_SINGLE_INSTANCE_APP = 1152;
export const ERROR_RMODE_APP = 1153;
export const ERROR_INVALID_DLL = 1154;
export const ERROR_NO_ASSOCIATION = 1155;
export const ERROR_DDE_FAIL = 1156;
export const ERROR_DLL_NOT_FOUND = 1157;
export const ERROR_NO_MORE_USER_HANDLES = 1158;
export const ERROR_MESSAGE_SYNC_ONLY = 1159;
export const ERROR_SOURCE_ELEMENT_EMPTY = 1160;
export const ERROR_DESTINATION_ELEMENT_FULL = 1161;
export const ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;
export const ERROR_MAGAZINE_NOT_PRESENT = 1163;
export const ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;
export const ERROR_DEVICE_REQUIRES_CLEANING = 1165;
export const ERROR_DEVICE_DOOR_OPEN = 1166;
export const ERROR_DEVICE_NOT_CONNECTED = 1167;
export const ERROR_NOT_FOUND = 1168;
export const ERROR_NO_MATCH = 1169;
export const ERROR_SET_NOT_FOUND = 1170;
export const ERROR_POINT_NOT_FOUND = 1171;
export const ERROR_NO_TRACKING_SERVICE = 1172;
export const ERROR_NO_VOLUME_ID = 1173;
export const ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;
export const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;
export const ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;
export const ERROR_JOURNAL_NOT_ACTIVE = 1179;
export const ERROR_POTENTIAL_FILE_FOUND = 1180;
export const ERROR_JOURNAL_ENTRY_DELETED = 1181;
export const ERROR_PARTITION_TERMINATING = 1184;
export const ERROR_SHUTDOWN_IS_SCHEDULED = 1190;
export const ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;
export const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192;
export const ERROR_BAD_DEVICE = 1200;
export const ERROR_CONNECTION_UNAVAIL = 1201;
export const ERROR_DEVICE_ALREADY_REMEMBERED = 1202;
export const ERROR_NO_NET_OR_BAD_PATH = 1203;
export const ERROR_BAD_PROVIDER = 1204;
export const ERROR_CANNOT_OPEN_PROFILE = 1205;
export const ERROR_BAD_PROFILE = 1206;
export const ERROR_NOT_CONTAINER = 1207;
export const ERROR_EXTENDED_ERROR = 1208;
export const ERROR_INVALID_GROUPNAME = 1209;
export const ERROR_INVALID_COMPUTERNAME = 1210;
export const ERROR_INVALID_EVENTNAME = 1211;
export const ERROR_INVALID_DOMAINNAME = 1212;
export const ERROR_INVALID_SERVICENAME = 1213;
export const ERROR_INVALID_NETNAME = 1214;
export const ERROR_INVALID_SHARENAME = 1215;
export const ERROR_INVALID_PASSWORDNAME = 1216;
export const ERROR_INVALID_MESSAGENAME = 1217;
export const ERROR_INVALID_MESSAGEDEST = 1218;
export const ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;
export const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;
export const ERROR_DUP_DOMAINNAME = 1221;
export const ERROR_NO_NETWORK = 1222;
export const ERROR_CANCELLED = 1223;
export const ERROR_USER_MAPPED_FILE = 1224;
export const ERROR_CONNECTION_REFUSED = 1225;
export const ERROR_GRACEFUL_DISCONNECT = 1226;
export const ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
export const ERROR_ADDRESS_NOT_ASSOCIATED = 1228;
export const ERROR_CONNECTION_INVALID = 1229;
export const ERROR_CONNECTION_ACTIVE = 1230;
export const ERROR_NETWORK_UNREACHABLE = 1231;
export const ERROR_HOST_UNREACHABLE = 1232;
export const ERROR_PROTOCOL_UNREACHABLE = 1233;
export const ERROR_PORT_UNREACHABLE = 1234;
export const ERROR_REQUEST_ABORTED = 1235;
export const ERROR_CONNECTION_ABORTED = 1236;
export const ERROR_RETRY = 1237;
export const ERROR_CONNECTION_COUNT_LIMIT = 1238;
export const ERROR_LOGIN_TIME_RESTRICTION = 1239;
export const ERROR_LOGIN_WKSTA_RESTRICTION = 1240;
export const ERROR_INCORRECT_ADDRESS = 1241;
export const ERROR_ALREADY_REGISTERED = 1242;
export const ERROR_SERVICE_NOT_FOUND = 1243;
export const ERROR_NOT_AUTHENTICATED = 1244;
export const ERROR_NOT_LOGGED_ON = 1245;
export const ERROR_CONTINUE = 1246;
export const ERROR_ALREADY_INITIALIZED = 1247;
export const ERROR_NO_MORE_DEVICES = 1248;
export const ERROR_NO_SUCH_SITE = 1249;
export const ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;
export const ERROR_ONLY_IF_CONNECTED = 1251;
export const ERROR_OVERRIDE_NOCHANGES = 1252;
export const ERROR_BAD_USER_PROFILE = 1253;
export const ERROR_NOT_SUPPORTED_ON_SBS = 1254;
export const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;
export const ERROR_HOST_DOWN = 1256;
export const ERROR_NON_ACCOUNT_SID = 1257;
export const ERROR_NON_DOMAIN_SID = 1258;
export const ERROR_APPHELP_BLOCK = 1259;
export const ERROR_ACCESS_DISABLED_BY_POLICY = 1260;
export const ERROR_REG_NAT_CONSUMPTION = 1261;
export const ERROR_CSCSHARE_OFFLINE = 1262;
export const ERROR_PKINIT_FAILURE = 1263;
export const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;
export const ERROR_DOWNGRADE_DETECTED = 1265;
export const ERROR_MACHINE_LOCKED = 1271;
export const ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;
export const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;
export const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;
export const ERROR_DRIVER_BLOCKED = 1275;
export const ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;
export const ERROR_ACCESS_DISABLED_WEBBLADE = 1277;
export const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;
export const ERROR_RECOVERY_FAILURE = 1279;
export const ERROR_ALREADY_FIBER = 1280;
export const ERROR_ALREADY_THREAD = 1281;
export const ERROR_STACK_BUFFER_OVERRUN = 1282;
export const ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;
export const ERROR_DEBUGGER_INACTIVE = 1284;
export const ERROR_DELAY_LOAD_FAILED = 1285;
export const ERROR_VDM_DISALLOWED = 1286;
export const ERROR_UNIDENTIFIED_ERROR = 1287;
export const ERROR_INVALID_CRUNTIME_PARAMETER = 1288;
export const ERROR_BEYOND_VDL = 1289;
export const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;
export const ERROR_DRIVER_PROCESS_TERMINATED = 1291;
export const ERROR_IMPLEMENTATION_LIMIT = 1292;
export const ERROR_PROCESS_IS_PROTECTED = 1293;
export const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;
export const ERROR_DISK_QUOTA_EXCEEDED = 1295;
export const ERROR_CONTENT_BLOCKED = 1296;
export const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;
export const ERROR_APP_HANG = 1298;
export const ERROR_INVALID_LABEL = 1299;
export const ERROR_NOT_ALL_ASSIGNED = 1300;
export const ERROR_SOME_NOT_MAPPED = 1301;
export const ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;
export const ERROR_LOCAL_USER_SESSION_KEY = 1303;
export const ERROR_NULL_LM_PASSWORD = 1304;
export const ERROR_UNKNOWN_REVISION = 1305;
export const ERROR_REVISION_MISMATCH = 1306;
export const ERROR_INVALID_OWNER = 1307;
export const ERROR_INVALID_PRIMARY_GROUP = 1308;
export const ERROR_NO_IMPERSONATION_TOKEN = 1309;
export const ERROR_CANT_DISABLE_MANDATORY = 1310;
export const ERROR_NO_LOGON_SERVERS = 1311;
export const ERROR_NO_SUCH_LOGON_SESSION = 1312;
export const ERROR_NO_SUCH_PRIVILEGE = 1313;
export const ERROR_PRIVILEGE_NOT_HELD = 1314;
export const ERROR_INVALID_ACCOUNT_NAME = 1315;
export const ERROR_USER_EXISTS = 1316;
export const ERROR_NO_SUCH_USER = 1317;
export const ERROR_GROUP_EXISTS = 1318;
export const ERROR_NO_SUCH_GROUP = 1319;
export const ERROR_MEMBER_IN_GROUP = 1320;
export const ERROR_MEMBER_NOT_IN_GROUP = 1321;
export const ERROR_LAST_ADMIN = 1322;
export const ERROR_WRONG_PASSWORD = 1323;
export const ERROR_ILL_FORMED_PASSWORD = 1324;
export const ERROR_PASSWORD_RESTRICTION = 1325;
export const ERROR_LOGON_FAILURE = 1326;
export const ERROR_ACCOUNT_RESTRICTION = 1327;
export const ERROR_INVALID_LOGON_HOURS = 1328;
export const ERROR_INVALID_WORKSTATION = 1329;
export const ERROR_PASSWORD_EXPIRED = 1330;
export const ERROR_ACCOUNT_DISABLED = 1331;
export const ERROR_NONE_MAPPED = 1332;
export const ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;
export const ERROR_LUIDS_EXHAUSTED = 1334;
export const ERROR_INVALID_SUB_AUTHORITY = 1335;
export const ERROR_INVALID_ACL = 1336;
export const ERROR_INVALID_SID = 1337;
export const ERROR_INVALID_SECURITY_DESCR = 1338;
export const ERROR_BAD_INHERITANCE_ACL = 1340;
export const ERROR_SERVER_DISABLED = 1341;
export const ERROR_SERVER_NOT_DISABLED = 1342;
export const ERROR_INVALID_ID_AUTHORITY = 1343;
export const ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;
export const ERROR_INVALID_GROUP_ATTRIBUTES = 1345;
export const ERROR_BAD_IMPERSONATION_LEVEL = 1346;
export const ERROR_CANT_OPEN_ANONYMOUS = 1347;
export const ERROR_BAD_VALIDATION_CLASS = 1348;
export const ERROR_BAD_TOKEN_TYPE = 1349;
export const ERROR_NO_SECURITY_ON_OBJECT = 1350;
export const ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;
export const ERROR_INVALID_SERVER_STATE = 1352;
export const ERROR_INVALID_DOMAIN_STATE = 1353;
export const ERROR_INVALID_DOMAIN_ROLE = 1354;
export const ERROR_NO_SUCH_DOMAIN = 1355;
export const ERROR_DOMAIN_EXISTS = 1356;
export const ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;
export const ERROR_INTERNAL_DB_CORRUPTION = 1358;
export const ERROR_INTERNAL_ERROR = 1359;
export const ERROR_GENERIC_NOT_MAPPED = 1360;
export const ERROR_BAD_DESCRIPTOR_FORMAT = 1361;
export const ERROR_NOT_LOGON_PROCESS = 1362;
export const ERROR_LOGON_SESSION_EXISTS = 1363;
export const ERROR_NO_SUCH_PACKAGE = 1364;
export const ERROR_BAD_LOGON_SESSION_STATE = 1365;
export const ERROR_LOGON_SESSION_COLLISION = 1366;
export const ERROR_INVALID_LOGON_TYPE = 1367;
export const ERROR_CANNOT_IMPERSONATE = 1368;
export const ERROR_RXACT_INVALID_STATE = 1369;
export const ERROR_RXACT_COMMIT_FAILURE = 1370;
export const ERROR_SPECIAL_ACCOUNT = 1371;
export const ERROR_SPECIAL_GROUP = 1372;
export const ERROR_SPECIAL_USER = 1373;
export const ERROR_MEMBERS_PRIMARY_GROUP = 1374;
export const ERROR_TOKEN_ALREADY_IN_USE = 1375;
export const ERROR_NO_SUCH_ALIAS = 1376;
export const ERROR_MEMBER_NOT_IN_ALIAS = 1377;
export const ERROR_MEMBER_IN_ALIAS = 1378;
export const ERROR_ALIAS_EXISTS = 1379;
export const ERROR_LOGON_NOT_GRANTED = 1380;
export const ERROR_TOO_MANY_SECRETS = 1381;
export const ERROR_SECRET_TOO_LONG = 1382;
export const ERROR_INTERNAL_DB_ERROR = 1383;
export const ERROR_TOO_MANY_CONTEXT_IDS = 1384;
export const ERROR_LOGON_TYPE_NOT_GRANTED = 1385;
export const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;
export const ERROR_NO_SUCH_MEMBER = 1387;
export const ERROR_INVALID_MEMBER = 1388;
export const ERROR_TOO_MANY_SIDS = 1389;
export const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;
export const ERROR_NO_INHERITANCE = 1391;
export const ERROR_FILE_CORRUPT = 1392;
export const ERROR_DISK_CORRUPT = 1393;
export const ERROR_NO_USER_SESSION_KEY = 1394;
export const ERROR_LICENSE_QUOTA_EXCEEDED = 1395;
export const ERROR_WRONG_TARGET_NAME = 1396;
export const ERROR_MUTUAL_AUTH_FAILED = 1397;
export const ERROR_TIME_SKEW = 1398;
export const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;
export const ERROR_INVALID_WINDOW_HANDLE = 1400;
export const ERROR_INVALID_MENU_HANDLE = 1401;
export const ERROR_INVALID_CURSOR_HANDLE = 1402;
export const ERROR_INVALID_ACCEL_HANDLE = 1403;
export const ERROR_INVALID_HOOK_HANDLE = 1404;
export const ERROR_INVALID_DWP_HANDLE = 1405;
export const ERROR_TLW_WITH_WSCHILD = 1406;
export const ERROR_CANNOT_FIND_WND_CLASS = 1407;
export const ERROR_WINDOW_OF_OTHER_THREAD = 1408;
export const ERROR_HOTKEY_ALREADY_REGISTERED = 1409;
export const ERROR_CLASS_ALREADY_EXISTS = 1410;
export const ERROR_CLASS_DOES_NOT_EXIST = 1411;
export const ERROR_CLASS_HAS_WINDOWS = 1412;
export const ERROR_INVALID_INDEX = 1413;
export const ERROR_INVALID_ICON_HANDLE = 1414;
export const ERROR_PRIVATE_DIALOG_INDEX = 1415;
export const ERROR_LISTBOX_ID_NOT_FOUND = 1416;
export const ERROR_NO_WILDCARD_CHARACTERS = 1417;
export const ERROR_CLIPBOARD_NOT_OPEN = 1418;
export const ERROR_HOTKEY_NOT_REGISTERED = 1419;
export const ERROR_WINDOW_NOT_DIALOG = 1420;
export const ERROR_CONTROL_ID_NOT_FOUND = 1421;
export const ERROR_INVALID_COMBOBOX_MESSAGE = 1422;
export const ERROR_WINDOW_NOT_COMBOBOX = 1423;
export const ERROR_INVALID_EDIT_HEIGHT = 1424;
export const ERROR_DC_NOT_FOUND = 1425;
export const ERROR_INVALID_HOOK_FILTER = 1426;
export const ERROR_INVALID_FILTER_PROC = 1427;
export const ERROR_HOOK_NEEDS_HMOD = 1428;
export const ERROR_GLOBAL_ONLY_HOOK = 1429;
export const ERROR_JOURNAL_HOOK_SET = 1430;
export const ERROR_HOOK_NOT_INSTALLED = 1431;
export const ERROR_INVALID_LB_MESSAGE = 1432;
export const ERROR_SETCOUNT_ON_BAD_LB = 1433;
export const ERROR_LB_WITHOUT_TABSTOPS = 1434;
export const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;
export const ERROR_CHILD_WINDOW_MENU = 1436;
export const ERROR_NO_SYSTEM_MENU = 1437;
export const ERROR_INVALID_MSGBOX_STYLE = 1438;
export const ERROR_INVALID_SPI_VALUE = 1439;
export const ERROR_SCREEN_ALREADY_LOCKED = 1440;
export const ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;
export const ERROR_NOT_CHILD_WINDOW = 1442;
export const ERROR_INVALID_GW_COMMAND = 1443;
export const ERROR_INVALID_THREAD_ID = 1444;
export const ERROR_NON_MDICHILD_WINDOW = 1445;
export const ERROR_POPUP_ALREADY_ACTIVE = 1446;
export const ERROR_NO_SCROLLBARS = 1447;
export const ERROR_INVALID_SCROLLBAR_RANGE = 1448;
export const ERROR_INVALID_SHOWWIN_COMMAND = 1449;
export const ERROR_NO_SYSTEM_RESOURCES = 1450;
export const ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;
export const ERROR_PAGED_SYSTEM_RESOURCES = 1452;
export const ERROR_WORKING_SET_QUOTA = 1453;
export const ERROR_PAGEFILE_QUOTA = 1454;
export const ERROR_COMMITMENT_LIMIT = 1455;
export const ERROR_MENU_ITEM_NOT_FOUND = 1456;
export const ERROR_INVALID_KEYBOARD_HANDLE = 1457;
export const ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;
export const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;
export const ERROR_TIMEOUT = 1460;
export const ERROR_INVALID_MONITOR_HANDLE = 1461;
export const ERROR_INCORRECT_SIZE = 1462;
export const ERROR_SYMLINK_CLASS_DISABLED = 1463;
export const ERROR_SYMLINK_NOT_SUPPORTED = 1464;
export const ERROR_XML_PARSE_ERROR = 1465;
export const ERROR_XMLDSIG_ERROR = 1466;
export const ERROR_RESTART_APPLICATION = 1467;
export const ERROR_WRONG_COMPARTMENT = 1468;
export const ERROR_AUTHIP_FAILURE = 1469;
export const ERROR_NO_NVRAM_RESOURCES = 1470;
export const ERROR_NOT_GUI_PROCESS = 1471;
export const ERROR_EVENTLOG_FILE_CORRUPT = 1500;
export const ERROR_EVENTLOG_CANT_START = 1501;
export const ERROR_LOG_FILE_FULL = 1502;
export const ERROR_EVENTLOG_FILE_CHANGED = 1503;
export const ERROR_CONTAINER_ASSIGNED = 1504;
export const ERROR_JOB_NO_CONTAINER = 1505;
export const ERROR_INVALID_TASK_NAME = 1550;
export const ERROR_INVALID_TASK_INDEX = 1551;
export const ERROR_THREAD_ALREADY_IN_TASK = 1552;
export const ERROR_INSTALL_SERVICE_FAILURE = 1601;
export const ERROR_INSTALL_USEREXIT = 1602;
export const ERROR_INSTALL_FAILURE = 1603;
export const ERROR_INSTALL_SUSPEND = 1604;
export const ERROR_UNKNOWN_PRODUCT = 1605;
export const ERROR_UNKNOWN_FEATURE = 1606;
export const ERROR_UNKNOWN_COMPONENT = 1607;
export const ERROR_UNKNOWN_PROPERTY = 1608;
export const ERROR_INVALID_HANDLE_STATE = 1609;
export const ERROR_BAD_CONFIGURATION = 1610;
export const ERROR_INDEX_ABSENT = 1611;
export const ERROR_INSTALL_SOURCE_ABSENT = 1612;
export const ERROR_INSTALL_PACKAGE_VERSION = 1613;
export const ERROR_PRODUCT_UNINSTALLED = 1614;
export const ERROR_BAD_QUERY_SYNTAX = 1615;
export const ERROR_INVALID_FIELD = 1616;
export const ERROR_DEVICE_REMOVED = 1617;
export const ERROR_INSTALL_ALREADY_RUNNING = 1618;
export const ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;
export const ERROR_INSTALL_PACKAGE_INVALID = 1620;
export const ERROR_INSTALL_UI_FAILURE = 1621;
export const ERROR_INSTALL_LOG_FAILURE = 1622;
export const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;
export const ERROR_INSTALL_TRANSFORM_FAILURE = 1624;
export const ERROR_INSTALL_PACKAGE_REJECTED = 1625;
export const ERROR_FUNCTION_NOT_CALLED = 1626;
export const ERROR_FUNCTION_FAILED = 1627;
export const ERROR_INVALID_TABLE = 1628;
export const ERROR_DATATYPE_MISMATCH = 1629;
export const ERROR_UNSUPPORTED_TYPE = 1630;
export const ERROR_CREATE_FAILED = 1631;
export const ERROR_INSTALL_TEMP_UNWRITABLE = 1632;
export const ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;
export const ERROR_INSTALL_NOTUSED = 1634;
export const ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;
export const ERROR_PATCH_PACKAGE_INVALID = 1636;
export const ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;
export const ERROR_PRODUCT_VERSION = 1638;
export const ERROR_INVALID_COMMAND_LINE = 1639;
export const ERROR_INSTALL_REMOTE_DISALLOWED = 1640;
export const ERROR_SUCCESS_REBOOT_INITIATED = 1641;
export const ERROR_PATCH_TARGET_NOT_FOUND = 1642;
export const ERROR_PATCH_PACKAGE_REJECTED = 1643;
export const ERROR_INSTALL_TRANSFORM_REJECTED = 1644;
export const ERROR_INSTALL_REMOTE_PROHIBITED = 1645;
export const ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;
export const ERROR_UNKNOWN_PATCH = 1647;
export const ERROR_PATCH_NO_SEQUENCE = 1648;
export const ERROR_PATCH_REMOVAL_DISALLOWED = 1649;
export const ERROR_INVALID_PATCH_XML = 1650;
export const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;
export const ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;
export const ERROR_FAIL_FAST_EXCEPTION = 1653;
export const ERROR_INSTALL_REJECTED = 1654;
export const ERROR_DYNAMIC_CODE_BLOCKED = 1655;
export const ERROR_NOT_SAME_OBJECT = 1656;
export const ERROR_STRICT_CFG_VIOLATION = 1657;
export const ERROR_SET_CONTEXT_DENIED = 1660;
export const ERROR_CROSS_PARTITION_VIOLATION = 1661;
export const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;
export const ERROR_INVALID_USER_BUFFER = 1784;
export const ERROR_UNRECOGNIZED_MEDIA = 1785;
export const ERROR_NO_TRUST_LSA_SECRET = 1786;
export const ERROR_NO_TRUST_SAM_ACCOUNT = 1787;
export const ERROR_TRUSTED_DOMAIN_FAILURE = 1788;
export const ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;
export const ERROR_TRUST_FAILURE = 1790;
export const ERROR_NETLOGON_NOT_STARTED = 1792;
export const ERROR_ACCOUNT_EXPIRED = 1793;
export const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;
export const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;
export const ERROR_UNKNOWN_PORT = 1796;
export const ERROR_UNKNOWN_PRINTER_DRIVER = 1797;
export const ERROR_UNKNOWN_PRINTPROCESSOR = 1798;
export const ERROR_INVALID_SEPARATOR_FILE = 1799;
export const ERROR_INVALID_PRIORITY = 1800;
export const ERROR_INVALID_PRINTER_NAME = 1801;
export const ERROR_PRINTER_ALREADY_EXISTS = 1802;
export const ERROR_INVALID_PRINTER_COMMAND = 1803;
export const ERROR_INVALID_DATATYPE = 1804;
export const ERROR_INVALID_ENVIRONMENT = 1805;
export const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;
export const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;
export const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;
export const ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;
export const ERROR_SERVER_HAS_OPEN_HANDLES = 1811;
export const ERROR_RESOURCE_DATA_NOT_FOUND = 1812;
export const ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;
export const ERROR_RESOURCE_NAME_NOT_FOUND = 1814;
export const ERROR_RESOURCE_LANG_NOT_FOUND = 1815;
export const ERROR_NOT_ENOUGH_QUOTA = 1816;
export const ERROR_INVALID_TIME = 1901;
export const ERROR_INVALID_FORM_NAME = 1902;
export const ERROR_INVALID_FORM_SIZE = 1903;
export const ERROR_ALREADY_WAITING = 1904;
export const ERROR_PRINTER_DELETED = 1905;
export const ERROR_INVALID_PRINTER_STATE = 1906;
export const ERROR_PASSWORD_MUST_CHANGE = 1907;
export const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;
export const ERROR_ACCOUNT_LOCKED_OUT = 1909;
export const ERROR_NO_SITENAME = 1919;
export const ERROR_CANT_ACCESS_FILE = 1920;
export const ERROR_CANT_RESOLVE_FILENAME = 1921;
export const ERROR_KM_DRIVER_BLOCKED = 1930;
export const ERROR_CONTEXT_EXPIRED = 1931;
export const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;
export const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;
export const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;
export const ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;
export const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;
export const ERROR_NTLM_BLOCKED = 1937;
export const ERROR_PASSWORD_CHANGE_REQUIRED = 1938;
export const ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;
export const ERROR_INVALID_PIXEL_FORMAT = 2000;
export const ERROR_BAD_DRIVER = 2001;
export const ERROR_INVALID_WINDOW_STYLE = 2002;
export const ERROR_METAFILE_NOT_SUPPORTED = 2003;
export const ERROR_TRANSFORM_NOT_SUPPORTED = 2004;
export const ERROR_CLIPPING_NOT_SUPPORTED = 2005;
export const ERROR_INVALID_CMM = 2010;
export const ERROR_INVALID_PROFILE = 2011;
export const ERROR_TAG_NOT_FOUND = 2012;
export const ERROR_TAG_NOT_PRESENT = 2013;
export const ERROR_DUPLICATE_TAG = 2014;
export const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;
export const ERROR_PROFILE_NOT_FOUND = 2016;
export const ERROR_INVALID_COLORSPACE = 2017;
export const ERROR_ICM_NOT_ENABLED = 2018;
export const ERROR_DELETING_ICM_XFORM = 2019;
export const ERROR_INVALID_TRANSFORM = 2020;
export const ERROR_COLORSPACE_MISMATCH = 2021;
export const ERROR_INVALID_COLORINDEX = 2022;
export const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;
export const ERROR_CONNECTED_OTHER_PASSWORD = 2108;
export const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;
export const ERROR_BAD_USERNAME = 2202;
export const ERROR_NOT_CONNECTED = 2250;
export const ERROR_OPEN_FILES = 2401;
export const ERROR_ACTIVE_CONNECTIONS = 2402;
export const ERROR_DEVICE_IN_USE = 2404;
export const ERROR_UNKNOWN_PRINT_MONITOR = 3000;
export const ERROR_PRINTER_DRIVER_IN_USE = 3001;
export const ERROR_SPOOL_FILE_NOT_FOUND = 3002;
export const ERROR_SPL_NO_STARTDOC = 3003;
export const ERROR_SPL_NO_ADDJOB = 3004;
export const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;
export const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;
export const ERROR_INVALID_PRINT_MONITOR = 3007;
export const ERROR_PRINT_MONITOR_IN_USE = 3008;
export const ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;
export const ERROR_SUCCESS_REBOOT_REQUIRED = 3010;
export const ERROR_SUCCESS_RESTART_REQUIRED = 3011;
export const ERROR_PRINTER_NOT_FOUND = 3012;
export const ERROR_PRINTER_DRIVER_WARNED = 3013;
export const ERROR_PRINTER_DRIVER_BLOCKED = 3014;
export const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;
export const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;
export const ERROR_FAIL_REBOOT_REQUIRED = 3017;
export const ERROR_FAIL_REBOOT_INITIATED = 3018;
export const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;
export const ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;
export const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;
export const ERROR_PRINTER_NOT_SHAREABLE = 3022;
export const ERROR_REQUEST_PAUSED = 3050;
export const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;
export const ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;
export const ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;
export const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;
export const ERROR_APPEXEC_INVALID_HOST_STATE = 3064;
export const ERROR_APPEXEC_NO_DONOR = 3065;
export const ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;
export const ERROR_APPEXEC_UNKNOWN_USER = 3067;
export const ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071;
export const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072;
export const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080;
export const ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081;
export const ERROR_VRF_VOLATILE_SAFE_MODE = 3082;
export const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083;
export const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084;
export const ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085;
export const ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086;
export const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087;
export const ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190;
export const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191;
export const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192;
export const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193;
export const ERROR_DIF_VOLATILE_INVALID_INFO = 3194;
export const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195;
export const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196;
export const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197;
export const ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198;
export const ERROR_DIF_BINDING_API_NOT_FOUND = 3199;
export const ERROR_IO_REISSUE_AS_CACHED = 3950;
export const ERROR_WINS_INTERNAL = 4000;
export const ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;
export const ERROR_STATIC_INIT = 4002;
export const ERROR_INC_BACKUP = 4003;
export const ERROR_FULL_BACKUP = 4004;
export const ERROR_REC_NON_EXISTENT = 4005;
export const ERROR_RPL_NOT_ALLOWED = 4006;
export const ERROR_DHCP_ADDRESS_CONFLICT = 4100;
export const ERROR_WMI_GUID_NOT_FOUND = 4200;
export const ERROR_WMI_INSTANCE_NOT_FOUND = 4201;
export const ERROR_WMI_ITEMID_NOT_FOUND = 4202;
export const ERROR_WMI_TRY_AGAIN = 4203;
export const ERROR_WMI_DP_NOT_FOUND = 4204;
export const ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;
export const ERROR_WMI_ALREADY_ENABLED = 4206;
export const ERROR_WMI_GUID_DISCONNECTED = 4207;
export const ERROR_WMI_SERVER_UNAVAILABLE = 4208;
export const ERROR_WMI_DP_FAILED = 4209;
export const ERROR_WMI_INVALID_MOF = 4210;
export const ERROR_WMI_INVALID_REGINFO = 4211;
export const ERROR_WMI_ALREADY_DISABLED = 4212;
export const ERROR_WMI_READ_ONLY = 4213;
export const ERROR_WMI_SET_FAILURE = 4214;
export const ERROR_NOT_APPCONTAINER = 4250;
export const ERROR_APPCONTAINER_REQUIRED = 4251;
export const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;
export const ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;
export const ERROR_INVALID_MEDIA = 4300;
export const ERROR_INVALID_LIBRARY = 4301;
export const ERROR_INVALID_MEDIA_POOL = 4302;
export const ERROR_DRIVE_MEDIA_MISMATCH = 4303;
export const ERROR_MEDIA_OFFLINE = 4304;
export const ERROR_LIBRARY_OFFLINE = 4305;
export const ERROR_EMPTY = 4306;
export const ERROR_NOT_EMPTY = 4307;
export const ERROR_MEDIA_UNAVAILABLE = 4308;
export const ERROR_RESOURCE_DISABLED = 4309;
export const ERROR_INVALID_CLEANER = 4310;
export const ERROR_UNABLE_TO_CLEAN = 4311;
export const ERROR_OBJECT_NOT_FOUND = 4312;
export const ERROR_DATABASE_FAILURE = 4313;
export const ERROR_DATABASE_FULL = 4314;
export const ERROR_MEDIA_INCOMPATIBLE = 4315;
export const ERROR_RESOURCE_NOT_PRESENT = 4316;
export const ERROR_INVALID_OPERATION = 4317;
export const ERROR_MEDIA_NOT_AVAILABLE = 4318;
export const ERROR_DEVICE_NOT_AVAILABLE = 4319;
export const ERROR_REQUEST_REFUSED = 4320;
export const ERROR_INVALID_DRIVE_OBJECT = 4321;
export const ERROR_LIBRARY_FULL = 4322;
export const ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;
export const ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;
export const ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;
export const ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;
export const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;
export const ERROR_TRANSPORT_FULL = 4328;
export const ERROR_CONTROLLING_IEPORT = 4329;
export const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;
export const ERROR_CLEANER_SLOT_SET = 4331;
export const ERROR_CLEANER_SLOT_NOT_SET = 4332;
export const ERROR_CLEANER_CARTRIDGE_SPENT = 4333;
export const ERROR_UNEXPECTED_OMID = 4334;
export const ERROR_CANT_DELETE_LAST_ITEM = 4335;
export const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;
export const ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;
export const ERROR_INDIGENOUS_TYPE = 4338;
export const ERROR_NO_SUPPORTING_DRIVES = 4339;
export const ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;
export const ERROR_IEPORT_FULL = 4341;
export const ERROR_FILE_OFFLINE = 4350;
export const ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;
export const ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;
export const ERROR_NOT_A_REPARSE_POINT = 4390;
export const ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;
export const ERROR_INVALID_REPARSE_DATA = 4392;
export const ERROR_REPARSE_TAG_INVALID = 4393;
export const ERROR_REPARSE_TAG_MISMATCH = 4394;
export const ERROR_REPARSE_POINT_ENCOUNTERED = 4395;
export const ERROR_APP_DATA_NOT_FOUND = 4400;
export const ERROR_APP_DATA_EXPIRED = 4401;
export const ERROR_APP_DATA_CORRUPT = 4402;
export const ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;
export const ERROR_APP_DATA_REBOOT_REQUIRED = 4404;
export const ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;
export const ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;
export const ERROR_SECUREBOOT_INVALID_POLICY = 4422;
export const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;
export const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;
export const ERROR_SECUREBOOT_NOT_ENABLED = 4425;
export const ERROR_SECUREBOOT_FILE_REPLACED = 4426;
export const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;
export const ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;
export const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;
export const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;
export const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;
export const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;
export const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;
export const ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;
export const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;
export const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;
export const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;
export const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;
export const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;
export const ERROR_ALREADY_HAS_STREAM_ID = 4444;
export const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;
export const ERROR_WOF_WIM_HEADER_CORRUPT = 4446;
export const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;
export const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;
export const ERROR_OBJECT_IS_IMMUTABLE = 4449;
export const ERROR_VOLUME_NOT_SIS_ENABLED = 4500;
export const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;
export const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;
export const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;
export const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;
export const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;
export const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558;
export const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559;
export const ERROR_VSM_NOT_INITIALIZED = 4560;
export const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;
export const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;
export const ERROR_PLATFORM_MANIFEST_INVALID = 4571;
export const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;
export const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;
export const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;
export const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;
export const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;
export const ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;
export const ERROR_DEPENDENCY_NOT_FOUND = 5002;
export const ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;
export const ERROR_RESOURCE_NOT_ONLINE = 5004;
export const ERROR_HOST_NODE_NOT_AVAILABLE = 5005;
export const ERROR_RESOURCE_NOT_AVAILABLE = 5006;
export const ERROR_RESOURCE_NOT_FOUND = 5007;
export const ERROR_SHUTDOWN_CLUSTER = 5008;
export const ERROR_CANT_EVICT_ACTIVE_NODE = 5009;
export const ERROR_OBJECT_ALREADY_EXISTS = 5010;
export const ERROR_OBJECT_IN_LIST = 5011;
export const ERROR_GROUP_NOT_AVAILABLE = 5012;
export const ERROR_GROUP_NOT_FOUND = 5013;
export const ERROR_GROUP_NOT_ONLINE = 5014;
export const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;
export const ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;
export const ERROR_RESMON_CREATE_FAILED = 5017;
export const ERROR_RESMON_ONLINE_FAILED = 5018;
export const ERROR_RESOURCE_ONLINE = 5019;
export const ERROR_QUORUM_RESOURCE = 5020;
export const ERROR_NOT_QUORUM_CAPABLE = 5021;
export const ERROR_CLUSTER_SHUTTING_DOWN = 5022;
export const ERROR_INVALID_STATE = 5023;
export const ERROR_RESOURCE_PROPERTIES_STORED = 5024;
export const ERROR_NOT_QUORUM_CLASS = 5025;
export const ERROR_CORE_RESOURCE = 5026;
export const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;
export const ERROR_QUORUMLOG_OPEN_FAILED = 5028;
export const ERROR_CLUSTERLOG_CORRUPT = 5029;
export const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;
export const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;
export const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;
export const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;
export const ERROR_QUORUM_OWNER_ALIVE = 5034;
export const ERROR_NETWORK_NOT_AVAILABLE = 5035;
export const ERROR_NODE_NOT_AVAILABLE = 5036;
export const ERROR_ALL_NODES_NOT_AVAILABLE = 5037;
export const ERROR_RESOURCE_FAILED = 5038;
export const ERROR_CLUSTER_INVALID_NODE = 5039;
export const ERROR_CLUSTER_NODE_EXISTS = 5040;
export const ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;
export const ERROR_CLUSTER_NODE_NOT_FOUND = 5042;
export const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;
export const ERROR_CLUSTER_NETWORK_EXISTS = 5044;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;
export const ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;
export const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;
export const ERROR_CLUSTER_INVALID_REQUEST = 5048;
export const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;
export const ERROR_CLUSTER_NODE_DOWN = 5050;
export const ERROR_CLUSTER_NODE_UNREACHABLE = 5051;
export const ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;
export const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;
export const ERROR_CLUSTER_INVALID_NETWORK = 5054;
export const ERROR_CLUSTER_NODE_UP = 5056;
export const ERROR_CLUSTER_IPADDR_IN_USE = 5057;
export const ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;
export const ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;
export const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;
export const ERROR_CLUSTER_NODE_ALREADY_UP = 5061;
export const ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;
export const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;
export const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;
export const ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;
export const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;
export const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;
export const ERROR_INVALID_OPERATION_ON_QUORUM = 5068;
export const ERROR_DEPENDENCY_NOT_ALLOWED = 5069;
export const ERROR_CLUSTER_NODE_PAUSED = 5070;
export const ERROR_NODE_CANT_HOST_RESOURCE = 5071;
export const ERROR_CLUSTER_NODE_NOT_READY = 5072;
export const ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;
export const ERROR_CLUSTER_JOIN_ABORTED = 5074;
export const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;
export const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;
export const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;
export const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;
export const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;
export const ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;
export const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;
export const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;
export const ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;
export const ERROR_RESMON_INVALID_STATE = 5084;
export const ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;
export const ERROR_QUORUM_DISK_NOT_FOUND = 5086;
export const ERROR_DATABASE_BACKUP_CORRUPT = 5087;
export const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;
export const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;
export const ERROR_NO_ADMIN_ACCESS_POINT = 5090;
export const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;
export const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;
export const ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;
export const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;
export const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;
export const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;
export const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;
export const ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;
export const ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;
export const ERROR_CLUSTER_WRONG_OS_VERSION = 5899;
export const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;
export const ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;
export const ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;
export const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;
export const ERROR_CLUSTER_OLD_VERSION = 5904;
export const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;
export const ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;
export const ERROR_CLUSTER_POISONED = 5907;
export const ERROR_CLUSTER_GROUP_MOVING = 5908;
export const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;
export const ERROR_RESOURCE_CALL_TIMED_OUT = 5910;
export const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;
export const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;
export const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;
export const ERROR_CLUSTER_PARTIAL_SEND = 5914;
export const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;
export const ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;
export const ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;
export const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;
export const ERROR_CLUSTER_NULL_DATA = 5920;
export const ERROR_CLUSTER_PARTIAL_READ = 5921;
export const ERROR_CLUSTER_PARTIAL_WRITE = 5922;
export const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;
export const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;
export const ERROR_CLUSTER_NO_QUORUM = 5925;
export const ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;
export const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;
export const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;
export const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;
export const ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;
export const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;
export const ERROR_CLUSTER_NOT_INSTALLED = 5932;
export const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;
export const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;
export const ERROR_CLUSTER_TOO_MANY_NODES = 5935;
export const ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;
export const ERROR_NONCORE_GROUPS_FOUND = 5937;
export const ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;
export const ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;
export const ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;
export const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;
export const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;
export const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;
export const ERROR_CLUSTER_GROUP_BUSY = 5944;
export const ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;
export const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;
export const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;
export const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;
export const ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;
export const ERROR_NON_CSV_PATH = 5950;
export const ERROR_CSV_VOLUME_NOT_LOCAL = 5951;
export const ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;
export const ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;
export const ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;
export const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = 5957;
export const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = 5958;
export const ERROR_CLUSTER_GROUP_QUEUED = 5959;
export const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;
export const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;
export const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;
export const ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;
export const ERROR_DISK_NOT_CSV_CAPABLE = 5964;
export const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;
export const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;
export const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;
export const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;
export const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = 5969;
export const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;
export const ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;
export const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;
export const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;
export const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;
export const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;
export const ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;
export const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;
export const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;
export const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;
export const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;
export const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;
export const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;
export const ERROR_CLUSTER_NODE_ISOLATED = 5984;
export const ERROR_CLUSTER_NODE_QUARANTINED = 5985;
export const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;
export const ERROR_CLUSTER_SPACE_DEGRADED = 5987;
export const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;
export const ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;
export const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;
export const ERROR_GROUPSET_NOT_AVAILABLE = 5991;
export const ERROR_GROUPSET_NOT_FOUND = 5992;
export const ERROR_GROUPSET_CANT_PROVIDE = 5993;
export const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;
export const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;
export const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;
export const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;
export const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;
export const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;
export const ERROR_ENCRYPTION_FAILED = 6000;
export const ERROR_DECRYPTION_FAILED = 6001;
export const ERROR_FILE_ENCRYPTED = 6002;
export const ERROR_NO_RECOVERY_POLICY = 6003;
export const ERROR_NO_EFS = 6004;
export const ERROR_WRONG_EFS = 6005;
export const ERROR_NO_USER_KEYS = 6006;
export const ERROR_FILE_NOT_ENCRYPTED = 6007;
export const ERROR_NOT_EXPORT_FORMAT = 6008;
export const ERROR_FILE_READ_ONLY = 6009;
export const ERROR_DIR_EFS_DISALLOWED = 6010;
export const ERROR_EFS_SERVER_NOT_TRUSTED = 6011;
export const ERROR_BAD_RECOVERY_POLICY = 6012;
export const ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;
export const ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;
export const ERROR_EFS_DISABLED = 6015;
export const ERROR_EFS_VERSION_NOT_SUPPORT = 6016;
export const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;
export const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;
export const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;
export const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;
export const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;
export const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;
export const ERROR_WIP_ENCRYPTION_FAILED = 6023;
export const ERROR_NO_BROWSER_SERVERS_FOUND = 6118;
export const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;
export const ERROR_LOG_SECTOR_INVALID = 6600;
export const ERROR_LOG_SECTOR_PARITY_INVALID = 6601;
export const ERROR_LOG_SECTOR_REMAPPED = 6602;
export const ERROR_LOG_BLOCK_INCOMPLETE = 6603;
export const ERROR_LOG_INVALID_RANGE = 6604;
export const ERROR_LOG_BLOCKS_EXHAUSTED = 6605;
export const ERROR_LOG_READ_CONTEXT_INVALID = 6606;
export const ERROR_LOG_RESTART_INVALID = 6607;
export const ERROR_LOG_BLOCK_VERSION = 6608;
export const ERROR_LOG_BLOCK_INVALID = 6609;
export const ERROR_LOG_READ_MODE_INVALID = 6610;
export const ERROR_LOG_NO_RESTART = 6611;
export const ERROR_LOG_METADATA_CORRUPT = 6612;
export const ERROR_LOG_METADATA_INVALID = 6613;
export const ERROR_LOG_METADATA_INCONSISTENT = 6614;
export const ERROR_LOG_RESERVATION_INVALID = 6615;
export const ERROR_LOG_CANT_DELETE = 6616;
export const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;
export const ERROR_LOG_START_OF_LOG = 6618;
export const ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;
export const ERROR_LOG_POLICY_NOT_INSTALLED = 6620;
export const ERROR_LOG_POLICY_INVALID = 6621;
export const ERROR_LOG_POLICY_CONFLICT = 6622;
export const ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;
export const ERROR_LOG_RECORD_NONEXISTENT = 6624;
export const ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;
export const ERROR_LOG_SPACE_RESERVED_INVALID = 6626;
export const ERROR_LOG_TAIL_INVALID = 6627;
export const ERROR_LOG_FULL = 6628;
export const ERROR_COULD_NOT_RESIZE_LOG = 6629;
export const ERROR_LOG_MULTIPLEXED = 6630;
export const ERROR_LOG_DEDICATED = 6631;
export const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;
export const ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;
export const ERROR_LOG_EPHEMERAL = 6634;
export const ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;
export const ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;
export const ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;
export const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;
export const ERROR_LOG_CONTAINER_READ_FAILED = 6639;
export const ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;
export const ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;
export const ERROR_LOG_CONTAINER_STATE_INVALID = 6642;
export const ERROR_LOG_STATE_INVALID = 6643;
export const ERROR_LOG_PINNED = 6644;
export const ERROR_LOG_METADATA_FLUSH_FAILED = 6645;
export const ERROR_LOG_INCONSISTENT_SECURITY = 6646;
export const ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;
export const ERROR_LOG_PINNED_RESERVATION = 6648;
export const ERROR_INVALID_TRANSACTION = 6700;
export const ERROR_TRANSACTION_NOT_ACTIVE = 6701;
export const ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;
export const ERROR_TRANSACTION_NOT_REQUESTED = 6703;
export const ERROR_TRANSACTION_ALREADY_ABORTED = 6704;
export const ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;
export const ERROR_TM_INITIALIZATION_FAILED = 6706;
export const ERROR_RESOURCEMANAGER_READ_ONLY = 6707;
export const ERROR_TRANSACTION_NOT_JOINED = 6708;
export const ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;
export const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;
export const ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;
export const ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;
export const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;
export const ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;
export const ERROR_TRANSACTION_NOT_FOUND = 6715;
export const ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;
export const ERROR_ENLISTMENT_NOT_FOUND = 6717;
export const ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;
export const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;
export const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;
export const ERROR_TRANSACTION_NOT_ROOT = 6721;
export const ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;
export const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;
export const ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;
export const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;
export const ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;
export const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;
export const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;
export const ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;
export const ERROR_TRANSACTION_NO_SUPERIOR = 6730;
export const ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;
export const ERROR_TRANSACTIONAL_CONFLICT = 6800;
export const ERROR_RM_NOT_ACTIVE = 6801;
export const ERROR_RM_METADATA_CORRUPT = 6802;
export const ERROR_DIRECTORY_NOT_RM = 6803;
export const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;
export const ERROR_LOG_RESIZE_INVALID_SIZE = 6806;
export const ERROR_OBJECT_NO_LONGER_EXISTS = 6807;
export const ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;
export const ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;
export const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;
export const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;
export const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;
export const ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;
export const ERROR_HANDLE_NO_LONGER_VALID = 6815;
export const ERROR_NO_TXF_METADATA = 6816;
export const ERROR_LOG_CORRUPTION_DETECTED = 6817;
export const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;
export const ERROR_RM_DISCONNECTED = 6819;
export const ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;
export const ERROR_RECOVERY_NOT_NEEDED = 6821;
export const ERROR_RM_ALREADY_STARTED = 6822;
export const ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;
export const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;
export const ERROR_CANT_CROSS_RM_BOUNDARY = 6825;
export const ERROR_TXF_DIR_NOT_EMPTY = 6826;
export const ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;
export const ERROR_TM_VOLATILE = 6828;
export const ERROR_ROLLBACK_TIMER_EXPIRED = 6829;
export const ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;
export const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;
export const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;
export const ERROR_LOG_GROWTH_FAILED = 6833;
export const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;
export const ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;
export const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;
export const ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;
export const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;
export const ERROR_TRANSACTIONS_NOT_FROZEN = 6839;
export const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;
export const ERROR_NOT_SNAPSHOT_VOLUME = 6841;
export const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;
export const ERROR_DATA_LOST_REPAIR = 6843;
export const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;
export const ERROR_TM_IDENTITY_MISMATCH = 6845;
export const ERROR_FLOATED_SECTION = 6846;
export const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;
export const ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;
export const ERROR_BAD_CLUSTERS = 6849;
export const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;
export const ERROR_VOLUME_DIRTY = 6851;
export const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;
export const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;
export const ERROR_EXPIRED_HANDLE = 6854;
export const ERROR_TRANSACTION_NOT_ENLISTED = 6855;
export const ERROR_CTX_WINSTATION_NAME_INVALID = 7001;
export const ERROR_CTX_INVALID_PD = 7002;
export const ERROR_CTX_PD_NOT_FOUND = 7003;
export const ERROR_CTX_WD_NOT_FOUND = 7004;
export const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;
export const ERROR_CTX_SERVICE_NAME_COLLISION = 7006;
export const ERROR_CTX_CLOSE_PENDING = 7007;
export const ERROR_CTX_NO_OUTBUF = 7008;
export const ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;
export const ERROR_CTX_INVALID_MODEMNAME = 7010;
export const ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;
export const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;
export const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;
export const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;
export const ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;
export const ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;
export const ERROR_CTX_TD_ERROR = 7017;
export const ERROR_CTX_WINSTATION_NOT_FOUND = 7022;
export const ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;
export const ERROR_CTX_WINSTATION_BUSY = 7024;
export const ERROR_CTX_BAD_VIDEO_MODE = 7025;
export const ERROR_CTX_GRAPHICS_INVALID = 7035;
export const ERROR_CTX_LOGON_DISABLED = 7037;
export const ERROR_CTX_NOT_CONSOLE = 7038;
export const ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;
export const ERROR_CTX_CONSOLE_DISCONNECT = 7041;
export const ERROR_CTX_CONSOLE_CONNECT = 7042;
export const ERROR_CTX_SHADOW_DENIED = 7044;
export const ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;
export const ERROR_CTX_INVALID_WD = 7049;
export const ERROR_CTX_SHADOW_INVALID = 7050;
export const ERROR_CTX_SHADOW_DISABLED = 7051;
export const ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;
export const ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;
export const ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;
export const ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;
export const ERROR_CTX_LICENSE_EXPIRED = 7056;
export const ERROR_CTX_SHADOW_NOT_RUNNING = 7057;
export const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;
export const ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;
export const ERROR_CTX_WINSTATIONS_DISABLED = 7060;
export const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;
export const ERROR_CTX_SESSION_IN_USE = 7062;
export const ERROR_CTX_NO_FORCE_LOGOFF = 7063;
export const ERROR_CTX_ACCOUNT_RESTRICTION = 7064;
export const ERROR_RDP_PROTOCOL_ERROR = 7065;
export const ERROR_CTX_CDM_CONNECT = 7066;
export const ERROR_CTX_CDM_DISCONNECT = 7067;
export const ERROR_CTX_SECURITY_LAYER_ERROR = 7068;
export const ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;
export const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;
export const ERROR_DS_NOT_INSTALLED = 8200;
export const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;
export const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;
export const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;
export const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;
export const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;
export const ERROR_DS_BUSY = 8206;
export const ERROR_DS_UNAVAILABLE = 8207;
export const ERROR_DS_NO_RIDS_ALLOCATED = 8208;
export const ERROR_DS_NO_MORE_RIDS = 8209;
export const ERROR_DS_INCORRECT_ROLE_OWNER = 8210;
export const ERROR_DS_RIDMGR_INIT_ERROR = 8211;
export const ERROR_DS_OBJ_CLASS_VIOLATION = 8212;
export const ERROR_DS_CANT_ON_NON_LEAF = 8213;
export const ERROR_DS_CANT_ON_RDN = 8214;
export const ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;
export const ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;
export const ERROR_DS_GC_NOT_AVAILABLE = 8217;
export const ERROR_SHARED_POLICY = 8218;
export const ERROR_POLICY_OBJECT_NOT_FOUND = 8219;
export const ERROR_POLICY_ONLY_IN_DS = 8220;
export const ERROR_PROMOTION_ACTIVE = 8221;
export const ERROR_NO_PROMOTION_ACTIVE = 8222;
export const ERROR_DS_OPERATIONS_ERROR = 8224;
export const ERROR_DS_PROTOCOL_ERROR = 8225;
export const ERROR_DS_TIMELIMIT_EXCEEDED = 8226;
export const ERROR_DS_SIZELIMIT_EXCEEDED = 8227;
export const ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;
export const ERROR_DS_COMPARE_FALSE = 8229;
export const ERROR_DS_COMPARE_TRUE = 8230;
export const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;
export const ERROR_DS_STRONG_AUTH_REQUIRED = 8232;
export const ERROR_DS_INAPPROPRIATE_AUTH = 8233;
export const ERROR_DS_AUTH_UNKNOWN = 8234;
export const ERROR_DS_REFERRAL = 8235;
export const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;
export const ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;
export const ERROR_DS_INAPPROPRIATE_MATCHING = 8238;
export const ERROR_DS_CONSTRAINT_VIOLATION = 8239;
export const ERROR_DS_NO_SUCH_OBJECT = 8240;
export const ERROR_DS_ALIAS_PROBLEM = 8241;
export const ERROR_DS_INVALID_DN_SYNTAX = 8242;
export const ERROR_DS_IS_LEAF = 8243;
export const ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;
export const ERROR_DS_UNWILLING_TO_PERFORM = 8245;
export const ERROR_DS_LOOP_DETECT = 8246;
export const ERROR_DS_NAMING_VIOLATION = 8247;
export const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;
export const ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;
export const ERROR_DS_SERVER_DOWN = 8250;
export const ERROR_DS_LOCAL_ERROR = 8251;
export const ERROR_DS_ENCODING_ERROR = 8252;
export const ERROR_DS_DECODING_ERROR = 8253;
export const ERROR_DS_FILTER_UNKNOWN = 8254;
export const ERROR_DS_PARAM_ERROR = 8255;
export const ERROR_DS_NOT_SUPPORTED = 8256;
export const ERROR_DS_NO_RESULTS_RETURNED = 8257;
export const ERROR_DS_CONTROL_NOT_FOUND = 8258;
export const ERROR_DS_CLIENT_LOOP = 8259;
export const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;
export const ERROR_DS_SORT_CONTROL_MISSING = 8261;
export const ERROR_DS_OFFSET_RANGE_ERROR = 8262;
export const ERROR_DS_RIDMGR_DISABLED = 8263;
export const ERROR_DS_ROOT_MUST_BE_NC = 8301;
export const ERROR_DS_ADD_REPLICA_INHIBITED = 8302;
export const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;
export const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;
export const ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;
export const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;
export const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;
export const ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;
export const ERROR_DS_USER_BUFFER_TO_SMALL = 8309;
export const ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;
export const ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;
export const ERROR_DS_OBJ_TOO_LARGE = 8312;
export const ERROR_DS_BAD_INSTANCE_TYPE = 8313;
export const ERROR_DS_MASTERDSA_REQUIRED = 8314;
export const ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;
export const ERROR_DS_MISSING_REQUIRED_ATT = 8316;
export const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;
export const ERROR_DS_ATT_ALREADY_EXISTS = 8318;
export const ERROR_DS_CANT_ADD_ATT_VALUES = 8320;
export const ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;
export const ERROR_DS_RANGE_CONSTRAINT = 8322;
export const ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;
export const ERROR_DS_CANT_REM_MISSING_ATT = 8324;
export const ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;
export const ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;
export const ERROR_DS_NO_CHAINING = 8327;
export const ERROR_DS_NO_CHAINED_EVAL = 8328;
export const ERROR_DS_NO_PARENT_OBJECT = 8329;
export const ERROR_DS_PARENT_IS_AN_ALIAS = 8330;
export const ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;
export const ERROR_DS_CHILDREN_EXIST = 8332;
export const ERROR_DS_OBJ_NOT_FOUND = 8333;
export const ERROR_DS_ALIASED_OBJ_MISSING = 8334;
export const ERROR_DS_BAD_NAME_SYNTAX = 8335;
export const ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;
export const ERROR_DS_CANT_DEREF_ALIAS = 8337;
export const ERROR_DS_OUT_OF_SCOPE = 8338;
export const ERROR_DS_OBJECT_BEING_REMOVED = 8339;
export const ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;
export const ERROR_DS_GENERIC_ERROR = 8341;
export const ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;
export const ERROR_DS_CLASS_NOT_DSA = 8343;
export const ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;
export const ERROR_DS_ILLEGAL_SUPERIOR = 8345;
export const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;
export const ERROR_DS_NAME_TOO_MANY_PARTS = 8347;
export const ERROR_DS_NAME_TOO_LONG = 8348;
export const ERROR_DS_NAME_VALUE_TOO_LONG = 8349;
export const ERROR_DS_NAME_UNPARSEABLE = 8350;
export const ERROR_DS_NAME_TYPE_UNKNOWN = 8351;
export const ERROR_DS_NOT_AN_OBJECT = 8352;
export const ERROR_DS_SEC_DESC_TOO_SHORT = 8353;
export const ERROR_DS_SEC_DESC_INVALID = 8354;
export const ERROR_DS_NO_DELETED_NAME = 8355;
export const ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;
export const ERROR_DS_NCNAME_MUST_BE_NC = 8357;
export const ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;
export const ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;
export const ERROR_DS_INVALID_DMD = 8360;
export const ERROR_DS_OBJ_GUID_EXISTS = 8361;
export const ERROR_DS_NOT_ON_BACKLINK = 8362;
export const ERROR_DS_NO_CROSSREF_FOR_NC = 8363;
export const ERROR_DS_SHUTTING_DOWN = 8364;
export const ERROR_DS_UNKNOWN_OPERATION = 8365;
export const ERROR_DS_INVALID_ROLE_OWNER = 8366;
export const ERROR_DS_COULDNT_CONTACT_FSMO = 8367;
export const ERROR_DS_CROSS_NC_DN_RENAME = 8368;
export const ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;
export const ERROR_DS_REPLICATOR_ONLY = 8370;
export const ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;
export const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;
export const ERROR_DS_NAME_REFERENCE_INVALID = 8373;
export const ERROR_DS_CROSS_REF_EXISTS = 8374;
export const ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;
export const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;
export const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;
export const ERROR_DS_DUP_RDN = 8378;
export const ERROR_DS_DUP_OID = 8379;
export const ERROR_DS_DUP_MAPI_ID = 8380;
export const ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;
export const ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;
export const ERROR_DS_SEMANTIC_ATT_TEST = 8383;
export const ERROR_DS_SYNTAX_MISMATCH = 8384;
export const ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;
export const ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;
export const ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;
export const ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;
export const ERROR_DS_AUX_CLS_TEST_FAIL = 8389;
export const ERROR_DS_NONEXISTENT_POSS_SUP = 8390;
export const ERROR_DS_SUB_CLS_TEST_FAIL = 8391;
export const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;
export const ERROR_DS_EXISTS_IN_AUX_CLS = 8393;
export const ERROR_DS_EXISTS_IN_SUB_CLS = 8394;
export const ERROR_DS_EXISTS_IN_POSS_SUP = 8395;
export const ERROR_DS_RECALCSCHEMA_FAILED = 8396;
export const ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;
export const ERROR_DS_CANT_DELETE = 8398;
export const ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;
export const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;
export const ERROR_DS_CANT_CACHE_ATT = 8401;
export const ERROR_DS_CANT_CACHE_CLASS = 8402;
export const ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;
export const ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;
export const ERROR_DS_CANT_RETRIEVE_DN = 8405;
export const ERROR_DS_MISSING_SUPREF = 8406;
export const ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;
export const ERROR_DS_CODE_INCONSISTENCY = 8408;
export const ERROR_DS_DATABASE_ERROR = 8409;
export const ERROR_DS_GOVERNSID_MISSING = 8410;
export const ERROR_DS_MISSING_EXPECTED_ATT = 8411;
export const ERROR_DS_NCNAME_MISSING_CR_REF = 8412;
export const ERROR_DS_SECURITY_CHECKING_ERROR = 8413;
export const ERROR_DS_SCHEMA_NOT_LOADED = 8414;
export const ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;
export const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;
export const ERROR_DS_GCVERIFY_ERROR = 8417;
export const ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;
export const ERROR_DS_CANT_FIND_DSA_OBJ = 8419;
export const ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;
export const ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;
export const ERROR_DS_CANT_RETRIEVE_CHILD = 8422;
export const ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;
export const ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;
export const ERROR_DS_BAD_HIERARCHY_FILE = 8425;
export const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;
export const ERROR_DS_CONFIG_PARAM_MISSING = 8427;
export const ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;
export const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;
export const ERROR_DS_INTERNAL_FAILURE = 8430;
export const ERROR_DS_UNKNOWN_ERROR = 8431;
export const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;
export const ERROR_DS_REFUSING_FSMO_ROLES = 8433;
export const ERROR_DS_MISSING_FSMO_SETTINGS = 8434;
export const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;
export const ERROR_DS_DRA_GENERIC = 8436;
export const ERROR_DS_DRA_INVALID_PARAMETER = 8437;
export const ERROR_DS_DRA_BUSY = 8438;
export const ERROR_DS_DRA_BAD_DN = 8439;
export const ERROR_DS_DRA_BAD_NC = 8440;
export const ERROR_DS_DRA_DN_EXISTS = 8441;
export const ERROR_DS_DRA_INTERNAL_ERROR = 8442;
export const ERROR_DS_DRA_INCONSISTENT_DIT = 8443;
export const ERROR_DS_DRA_CONNECTION_FAILED = 8444;
export const ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;
export const ERROR_DS_DRA_OUT_OF_MEM = 8446;
export const ERROR_DS_DRA_MAIL_PROBLEM = 8447;
export const ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;
export const ERROR_DS_DRA_REF_NOT_FOUND = 8449;
export const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;
export const ERROR_DS_DRA_DB_ERROR = 8451;
export const ERROR_DS_DRA_NO_REPLICA = 8452;
export const ERROR_DS_DRA_ACCESS_DENIED = 8453;
export const ERROR_DS_DRA_NOT_SUPPORTED = 8454;
export const ERROR_DS_DRA_RPC_CANCELLED = 8455;
export const ERROR_DS_DRA_SOURCE_DISABLED = 8456;
export const ERROR_DS_DRA_SINK_DISABLED = 8457;
export const ERROR_DS_DRA_NAME_COLLISION = 8458;
export const ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;
export const ERROR_DS_DRA_MISSING_PARENT = 8460;
export const ERROR_DS_DRA_PREEMPTED = 8461;
export const ERROR_DS_DRA_ABANDON_SYNC = 8462;
export const ERROR_DS_DRA_SHUTDOWN = 8463;
export const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;
export const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;
export const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;
export const ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;
export const ERROR_DS_DUP_LINK_ID = 8468;
export const ERROR_DS_NAME_ERROR_RESOLVING = 8469;
export const ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;
export const ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;
export const ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;
export const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;
export const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;
export const ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;
export const ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;
export const ERROR_DS_DRA_REPL_PENDING = 8477;
export const ERROR_DS_DS_REQUIRED = 8478;
export const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;
export const ERROR_DS_NON_BASE_SEARCH = 8480;
export const ERROR_DS_CANT_RETRIEVE_ATTS = 8481;
export const ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;
export const ERROR_DS_EPOCH_MISMATCH = 8483;
export const ERROR_DS_SRC_NAME_MISMATCH = 8484;
export const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;
export const ERROR_DS_DST_NC_MISMATCH = 8486;
export const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;
export const ERROR_DS_SRC_GUID_MISMATCH = 8488;
export const ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;
export const ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;
export const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;
export const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;
export const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;
export const ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;
export const ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;
export const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;
export const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;
export const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;
export const ERROR_DS_INVALID_SEARCH_FLAG = 8500;
export const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;
export const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;
export const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;
export const ERROR_DS_SAM_INIT_FAILURE = 8504;
export const ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;
export const ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;
export const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;
export const ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;
export const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;
export const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;
export const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;
export const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;
export const ERROR_DS_INVALID_GROUP_TYPE = 8513;
export const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;
export const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;
export const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;
export const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;
export const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;
export const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;
export const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;
export const ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;
export const ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;
export const ERROR_DS_NAMING_MASTER_GC = 8523;
export const ERROR_DS_DNS_LOOKUP_FAILURE = 8524;
export const ERROR_DS_COULDNT_UPDATE_SPNS = 8525;
export const ERROR_DS_CANT_RETRIEVE_SD = 8526;
export const ERROR_DS_KEY_NOT_UNIQUE = 8527;
export const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;
export const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;
export const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;
export const ERROR_DS_CANT_START = 8531;
export const ERROR_DS_INIT_FAILURE = 8532;
export const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;
export const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;
export const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;
export const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;
export const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;
export const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;
export const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;
export const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;
export const ERROR_SAM_INIT_FAILURE = 8541;
export const ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;
export const ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;
export const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;
export const ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;
export const ERROR_DS_NC_STILL_HAS_DSAS = 8546;
export const ERROR_DS_GC_REQUIRED = 8547;
export const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;
export const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;
export const ERROR_DS_CANT_ADD_TO_GC = 8550;
export const ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;
export const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;
export const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;
export const ERROR_DS_INVALID_NAME_FOR_SPN = 8554;
export const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;
export const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;
export const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;
export const ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;
export const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;
export const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;
export const ERROR_DS_INIT_FAILURE_CONSOLE = 8561;
export const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;
export const ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;
export const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;
export const ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;
export const ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;
export const ERROR_DS_INCOMPATIBLE_VERSION = 8567;
export const ERROR_DS_LOW_DSA_VERSION = 8568;
export const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;
export const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;
export const ERROR_DS_NAME_NOT_UNIQUE = 8571;
export const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;
export const ERROR_DS_OUT_OF_VERSION_STORE = 8573;
export const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;
export const ERROR_DS_NO_REF_DOMAIN = 8575;
export const ERROR_DS_RESERVED_LINK_ID = 8576;
export const ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;
export const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;
export const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;
export const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;
export const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;
export const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;
export const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;
export const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;
export const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;
export const ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;
export const ERROR_DS_NOT_CLOSEST = 8588;
export const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;
export const ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;
export const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;
export const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;
export const ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;
export const ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;
export const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;
export const ERROR_DS_NO_MSDS_INTID = 8596;
export const ERROR_DS_DUP_MSDS_INTID = 8597;
export const ERROR_DS_EXISTS_IN_RDNATTID = 8598;
export const ERROR_DS_AUTHORIZATION_FAILED = 8599;
export const ERROR_DS_INVALID_SCRIPT = 8600;
export const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;
export const ERROR_DS_CROSS_REF_BUSY = 8602;
export const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;
export const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;
export const ERROR_DS_DUPLICATE_ID_FOUND = 8605;
export const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;
export const ERROR_DS_GROUP_CONVERSION_ERROR = 8607;
export const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;
export const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;
export const ERROR_DS_ROLE_NOT_VERIFIED = 8610;
export const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;
export const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;
export const ERROR_DS_EXISTING_AD_CHILD_NC = 8613;
export const ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;
export const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;
export const ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;
export const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;
export const ERROR_DS_POLICY_NOT_KNOWN = 8618;
export const ERROR_NO_SITE_SETTINGS_OBJECT = 8619;
export const ERROR_NO_SECRETS = 8620;
export const ERROR_NO_WRITABLE_DC_FOUND = 8621;
export const ERROR_DS_NO_SERVER_OBJECT = 8622;
export const ERROR_DS_NO_NTDSA_OBJECT = 8623;
export const ERROR_DS_NON_ASQ_SEARCH = 8624;
export const ERROR_DS_AUDIT_FAILURE = 8625;
export const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;
export const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;
export const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;
export const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;
export const ERROR_DS_DRA_SECRETS_DENIED = 8630;
export const ERROR_DS_RESERVED_MAPI_ID = 8631;
export const ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;
export const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;
export const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;
export const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;
export const ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;
export const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;
export const ERROR_DS_OID_NOT_FOUND = 8638;
export const ERROR_DS_DRA_RECYCLED_TARGET = 8639;
export const ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;
export const ERROR_DS_HIGH_ADLDS_FFL = 8641;
export const ERROR_DS_HIGH_DSA_VERSION = 8642;
export const ERROR_DS_LOW_ADLDS_FFL = 8643;
export const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;
export const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;
export const ERROR_INCORRECT_ACCOUNT_TYPE = 8646;
export const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;
export const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;
export const ERROR_DS_MISSING_FOREST_TRUST = 8649;
export const ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;
export const ERROR_WEAK_WHFBKEY_BLOCKED = 8651;
export const DNS_ERROR_RESPONSE_CODES_BASE = 9000;
export const DNS_ERROR_RCODE_NO_ERROR = 0;
export const DNS_ERROR_MASK = 9000;
export const DNS_ERROR_RCODE_FORMAT_ERROR = 9001;
export const DNS_ERROR_RCODE_SERVER_FAILURE = 9002;
export const DNS_ERROR_RCODE_NAME_ERROR = 9003;
export const DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;
export const DNS_ERROR_RCODE_REFUSED = 9005;
export const DNS_ERROR_RCODE_YXDOMAIN = 9006;
export const DNS_ERROR_RCODE_YXRRSET = 9007;
export const DNS_ERROR_RCODE_NXRRSET = 9008;
export const DNS_ERROR_RCODE_NOTAUTH = 9009;
export const DNS_ERROR_RCODE_NOTZONE = 9010;
export const DNS_ERROR_RCODE_BADSIG = 9016;
export const DNS_ERROR_RCODE_BADKEY = 9017;
export const DNS_ERROR_RCODE_BADTIME = 9018;
export const DNS_ERROR_RCODE_LAST = 9018;
export const DNS_ERROR_DNSSEC_BASE = 9100;
export const DNS_ERROR_KEYMASTER_REQUIRED = 9101;
export const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;
export const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;
export const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;
export const DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;
export const DNS_ERROR_INVALID_KEY_SIZE = 9106;
export const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;
export const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;
export const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;
export const DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;
export const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;
export const DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;
export const DNS_ERROR_TOO_MANY_SKDS = 9113;
export const DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;
export const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;
export const DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;
export const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;
export const DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;
export const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;
export const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;
export const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;
export const DNS_ERROR_BAD_KEYMASTER = 9122;
export const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;
export const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;
export const DNS_ERROR_DNSSEC_IS_DISABLED = 9125;
export const DNS_ERROR_INVALID_XML = 9126;
export const DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;
export const DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;
export const DNS_ERROR_NSEC3_NAME_COLLISION = 9129;
export const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;
export const DNS_ERROR_PACKET_FMT_BASE = 9500;
export const DNS_ERROR_BAD_PACKET = 9502;
export const DNS_ERROR_NO_PACKET = 9503;
export const DNS_ERROR_RCODE = 9504;
export const DNS_ERROR_UNSECURE_PACKET = 9505;
export const DNS_ERROR_NO_MEMORY = 14;
export const DNS_ERROR_INVALID_NAME = 123;
export const DNS_ERROR_INVALID_DATA = 13;
export const DNS_ERROR_GENERAL_API_BASE = 9550;
export const DNS_ERROR_INVALID_TYPE = 9551;
export const DNS_ERROR_INVALID_IP_ADDRESS = 9552;
export const DNS_ERROR_INVALID_PROPERTY = 9553;
export const DNS_ERROR_TRY_AGAIN_LATER = 9554;
export const DNS_ERROR_NOT_UNIQUE = 9555;
export const DNS_ERROR_NON_RFC_NAME = 9556;
export const DNS_ERROR_INVALID_NAME_CHAR = 9560;
export const DNS_ERROR_NUMERIC_NAME = 9561;
export const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;
export const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;
export const DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;
export const DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;
export const DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;
export const DNS_ERROR_BACKGROUND_LOADING = 9568;
export const DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;
export const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;
export const DNS_ERROR_DELEGATION_REQUIRED = 9571;
export const DNS_ERROR_INVALID_POLICY_TABLE = 9572;
export const DNS_ERROR_ADDRESS_REQUIRED = 9573;
export const DNS_ERROR_ZONE_BASE = 9600;
export const DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;
export const DNS_ERROR_NO_ZONE_INFO = 9602;
export const DNS_ERROR_INVALID_ZONE_OPERATION = 9603;
export const DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;
export const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;
export const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;
export const DNS_ERROR_ZONE_LOCKED = 9607;
export const DNS_ERROR_ZONE_CREATION_FAILED = 9608;
export const DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;
export const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;
export const DNS_ERROR_INVALID_ZONE_TYPE = 9611;
export const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;
export const DNS_ERROR_ZONE_NOT_SECONDARY = 9613;
export const DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;
export const DNS_ERROR_WINS_INIT_FAILED = 9615;
export const DNS_ERROR_NEED_WINS_SERVERS = 9616;
export const DNS_ERROR_NBSTAT_INIT_FAILED = 9617;
export const DNS_ERROR_SOA_DELETE_INVALID = 9618;
export const DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;
export const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;
export const DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;
export const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;
export const DNS_ERROR_DATAFILE_BASE = 9650;
export const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;
export const DNS_ERROR_INVALID_DATAFILE_NAME = 9652;
export const DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;
export const DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;
export const DNS_ERROR_DATAFILE_PARSING = 9655;
export const DNS_ERROR_DATABASE_BASE = 9700;
export const DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;
export const DNS_ERROR_RECORD_FORMAT = 9702;
export const DNS_ERROR_NODE_CREATION_FAILED = 9703;
export const DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;
export const DNS_ERROR_RECORD_TIMED_OUT = 9705;
export const DNS_ERROR_NAME_NOT_IN_ZONE = 9706;
export const DNS_ERROR_CNAME_LOOP = 9707;
export const DNS_ERROR_NODE_IS_CNAME = 9708;
export const DNS_ERROR_CNAME_COLLISION = 9709;
export const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;
export const DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;
export const DNS_ERROR_SECONDARY_DATA = 9712;
export const DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;
export const DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;
export const DNS_ERROR_DS_UNAVAILABLE = 9717;
export const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;
export const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;
export const DNS_ERROR_NODE_IS_DNAME = 9720;
export const DNS_ERROR_DNAME_COLLISION = 9721;
export const DNS_ERROR_ALIAS_LOOP = 9722;
export const DNS_ERROR_OPERATION_BASE = 9750;
export const DNS_ERROR_AXFR = 9752;
export const DNS_ERROR_SECURE_BASE = 9800;
export const DNS_ERROR_SETUP_BASE = 9850;
export const DNS_ERROR_NO_TCPIP = 9851;
export const DNS_ERROR_NO_DNS_SERVERS = 9852;
export const DNS_ERROR_DP_BASE = 9900;
export const DNS_ERROR_DP_DOES_NOT_EXIST = 9901;
export const DNS_ERROR_DP_ALREADY_EXISTS = 9902;
export const DNS_ERROR_DP_NOT_ENLISTED = 9903;
export const DNS_ERROR_DP_ALREADY_ENLISTED = 9904;
export const DNS_ERROR_DP_NOT_AVAILABLE = 9905;
export const DNS_ERROR_DP_FSMO_ERROR = 9906;
export const DNS_ERROR_RRL_NOT_ENABLED = 9911;
export const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;
export const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;
export const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;
export const DNS_ERROR_RRL_INVALID_TC_RATE = 9915;
export const DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;
export const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;
export const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;
export const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;
export const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;
export const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;
export const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;
export const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;
export const DNS_ERROR_DEFAULT_ZONESCOPE = 9953;
export const DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;
export const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;
export const DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;
export const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;
export const DNS_ERROR_INVALID_SCOPE_NAME = 9958;
export const DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;
export const DNS_ERROR_DEFAULT_SCOPE = 9960;
export const DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;
export const DNS_ERROR_SCOPE_LOCKED = 9962;
export const DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;
export const DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;
export const DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;
export const DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;
export const DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;
export const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;
export const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;
export const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;
export const DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;
export const DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;
export const DNS_ERROR_POLICY_LOCKED = 9980;
export const DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;
export const DNS_ERROR_POLICY_INVALID_NAME = 9982;
export const DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;
export const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;
export const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;
export const DNS_ERROR_POLICY_SCOPE_MISSING = 9986;
export const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;
export const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;
export const DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;
export const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;
export const ERROR_IPSEC_QM_POLICY_EXISTS = 13000;
export const ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;
export const ERROR_IPSEC_QM_POLICY_IN_USE = 13002;
export const ERROR_IPSEC_MM_POLICY_EXISTS = 13003;
export const ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;
export const ERROR_IPSEC_MM_POLICY_IN_USE = 13005;
export const ERROR_IPSEC_MM_FILTER_EXISTS = 13006;
export const ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;
export const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;
export const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;
export const ERROR_IPSEC_MM_AUTH_EXISTS = 13010;
export const ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;
export const ERROR_IPSEC_MM_AUTH_IN_USE = 13012;
export const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;
export const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;
export const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;
export const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;
export const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;
export const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;
export const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;
export const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;
export const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;
export const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;
export const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;
export const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;
export const ERROR_IPSEC_IKE_AUTH_FAIL = 13801;
export const ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;
export const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;
export const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;
export const ERROR_IPSEC_IKE_TIMED_OUT = 13805;
export const ERROR_IPSEC_IKE_NO_CERT = 13806;
export const ERROR_IPSEC_IKE_SA_DELETED = 13807;
export const ERROR_IPSEC_IKE_SA_REAPED = 13808;
export const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;
export const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;
export const ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;
export const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;
export const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;
export const ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;
export const ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;
export const ERROR_IPSEC_IKE_ERROR = 13816;
export const ERROR_IPSEC_IKE_CRL_FAILED = 13817;
export const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;
export const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;
export const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;
export const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;
export const ERROR_IPSEC_IKE_DH_FAIL = 13822;
export const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;
export const ERROR_IPSEC_IKE_INVALID_HEADER = 13824;
export const ERROR_IPSEC_IKE_NO_POLICY = 13825;
export const ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;
export const ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;
export const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;
export const ERROR_IPSEC_IKE_PROCESS_ERR = 13829;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;
export const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;
export const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;
export const ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;
export const ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;
export const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;
export const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;
export const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;
export const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;
export const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;
export const ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;
export const ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;
export const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;
export const ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;
export const ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;
export const ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;
export const ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;
export const ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;
export const ERROR_IPSEC_IKE_NOTCBPRIV = 13851;
export const ERROR_IPSEC_IKE_SECLOADFAIL = 13852;
export const ERROR_IPSEC_IKE_FAILSSPINIT = 13853;
export const ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;
export const ERROR_IPSEC_IKE_SRVACQFAIL = 13855;
export const ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;
export const ERROR_IPSEC_IKE_GETSPIFAIL = 13857;
export const ERROR_IPSEC_IKE_INVALID_FILTER = 13858;
export const ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;
export const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;
export const ERROR_IPSEC_IKE_INVALID_POLICY = 13861;
export const ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;
export const ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;
export const ERROR_IPSEC_IKE_DH_FAILURE = 13864;
export const ERROR_IPSEC_IKE_INVALID_GROUP = 13865;
export const ERROR_IPSEC_IKE_ENCRYPT = 13866;
export const ERROR_IPSEC_IKE_DECRYPT = 13867;
export const ERROR_IPSEC_IKE_POLICY_MATCH = 13868;
export const ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;
export const ERROR_IPSEC_IKE_INVALID_HASH = 13870;
export const ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;
export const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;
export const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;
export const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;
export const ERROR_IPSEC_IKE_INVALID_SIG = 13875;
export const ERROR_IPSEC_IKE_LOAD_FAILED = 13876;
export const ERROR_IPSEC_IKE_RPC_DELETE = 13877;
export const ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;
export const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;
export const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;
export const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;
export const ERROR_IPSEC_IKE_MM_LIMIT = 13882;
export const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;
export const ERROR_IPSEC_IKE_QM_LIMIT = 13884;
export const ERROR_IPSEC_IKE_MM_EXPIRED = 13885;
export const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;
export const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;
export const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;
export const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;
export const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;
export const ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;
export const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;
export const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;
export const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;
export const ERROR_IPSEC_IKE_QM_EXPIRED = 13895;
export const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;
export const ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;
export const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;
export const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;
export const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;
export const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;
export const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;
export const ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;
export const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;
export const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;
export const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;
export const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;
export const ERROR_IPSEC_BAD_SPI = 13910;
export const ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;
export const ERROR_IPSEC_WRONG_SA = 13912;
export const ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;
export const ERROR_IPSEC_INVALID_PACKET = 13914;
export const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;
export const ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;
export const ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;
export const ERROR_IPSEC_THROTTLE_DROP = 13918;
export const ERROR_IPSEC_DOSP_BLOCK = 13925;
export const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;
export const ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;
export const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;
export const ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;
export const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;
export const ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;
export const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;
export const ERROR_SXS_SECTION_NOT_FOUND = 14000;
export const ERROR_SXS_CANT_GEN_ACTCTX = 14001;
export const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;
export const ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;
export const ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;
export const ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;
export const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;
export const ERROR_SXS_KEY_NOT_FOUND = 14007;
export const ERROR_SXS_VERSION_CONFLICT = 14008;
export const ERROR_SXS_WRONG_SECTION_TYPE = 14009;
export const ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;
export const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;
export const ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;
export const ERROR_SXS_UNKNOWN_ENCODING = 14013;
export const ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;
export const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;
export const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;
export const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;
export const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;
export const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;
export const ERROR_SXS_DUPLICATE_DLL_NAME = 14021;
export const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;
export const ERROR_SXS_DUPLICATE_CLSID = 14023;
export const ERROR_SXS_DUPLICATE_IID = 14024;
export const ERROR_SXS_DUPLICATE_TLBID = 14025;
export const ERROR_SXS_DUPLICATE_PROGID = 14026;
export const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;
export const ERROR_SXS_FILE_HASH_MISMATCH = 14028;
export const ERROR_SXS_POLICY_PARSE_ERROR = 14029;
export const ERROR_SXS_XML_E_MISSINGQUOTE = 14030;
export const ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;
export const ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;
export const ERROR_SXS_XML_E_BADNAMECHAR = 14033;
export const ERROR_SXS_XML_E_BADCHARINSTRING = 14034;
export const ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;
export const ERROR_SXS_XML_E_BADCHARDATA = 14036;
export const ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;
export const ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;
export const ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;
export const ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;
export const ERROR_SXS_XML_E_INTERNALERROR = 14041;
export const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;
export const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;
export const ERROR_SXS_XML_E_MISSING_PAREN = 14044;
export const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;
export const ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;
export const ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;
export const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;
export const ERROR_SXS_XML_E_INVALID_UNICODE = 14049;
export const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;
export const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;
export const ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;
export const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;
export const ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;
export const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;
export const ERROR_SXS_XML_E_BADXMLDECL = 14056;
export const ERROR_SXS_XML_E_MISSINGROOT = 14057;
export const ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;
export const ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;
export const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;
export const ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;
export const ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;
export const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;
export const ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;
export const ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;
export const ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;
export const ERROR_SXS_XML_E_INVALIDENCODING = 14067;
export const ERROR_SXS_XML_E_INVALIDSWITCH = 14068;
export const ERROR_SXS_XML_E_BADXMLCASE = 14069;
export const ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;
export const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;
export const ERROR_SXS_XML_E_INVALID_VERSION = 14072;
export const ERROR_SXS_XML_E_MISSINGEQUALS = 14073;
export const ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;
export const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;
export const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;
export const ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;
export const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;
export const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;
export const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;
export const ERROR_SXS_ASSEMBLY_MISSING = 14081;
export const ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;
export const ERROR_SXS_CORRUPTION = 14083;
export const ERROR_SXS_EARLY_DEACTIVATION = 14084;
export const ERROR_SXS_INVALID_DEACTIVATION = 14085;
export const ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;
export const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;
export const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;
export const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;
export const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;
export const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;
export const ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;
export const ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;
export const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;
export const ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;
export const ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;
export const ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;
export const ERROR_ADVANCED_INSTALLER_FAILED = 14099;
export const ERROR_XML_ENCODING_MISMATCH = 14100;
export const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;
export const ERROR_SXS_IDENTITIES_DIFFERENT = 14102;
export const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;
export const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;
export const ERROR_SXS_MANIFEST_TOO_BIG = 14105;
export const ERROR_SXS_SETTING_NOT_REGISTERED = 14106;
export const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;
export const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;
export const ERROR_GENERIC_COMMAND_FAILED = 14109;
export const ERROR_SXS_FILE_HASH_MISSING = 14110;
export const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;
export const ERROR_EVT_INVALID_CHANNEL_PATH = 15000;
export const ERROR_EVT_INVALID_QUERY = 15001;
export const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;
export const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;
export const ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;
export const ERROR_EVT_INVALID_EVENT_DATA = 15005;
export const ERROR_EVT_CHANNEL_NOT_FOUND = 15007;
export const ERROR_EVT_MALFORMED_XML_TEXT = 15008;
export const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;
export const ERROR_EVT_CONFIGURATION_ERROR = 15010;
export const ERROR_EVT_QUERY_RESULT_STALE = 15011;
export const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;
export const ERROR_EVT_NON_VALIDATING_MSXML = 15013;
export const ERROR_EVT_FILTER_ALREADYSCOPED = 15014;
export const ERROR_EVT_FILTER_NOTELTSET = 15015;
export const ERROR_EVT_FILTER_INVARG = 15016;
export const ERROR_EVT_FILTER_INVTEST = 15017;
export const ERROR_EVT_FILTER_INVTYPE = 15018;
export const ERROR_EVT_FILTER_PARSEERR = 15019;
export const ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;
export const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;
export const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;
export const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;
export const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;
export const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;
export const ERROR_EVT_FILTER_TOO_COMPLEX = 15026;
export const ERROR_EVT_MESSAGE_NOT_FOUND = 15027;
export const ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;
export const ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;
export const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;
export const ERROR_EVT_MAX_INSERTS_REACHED = 15031;
export const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;
export const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;
export const ERROR_EVT_VERSION_TOO_OLD = 15034;
export const ERROR_EVT_VERSION_TOO_NEW = 15035;
export const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;
export const ERROR_EVT_PUBLISHER_DISABLED = 15037;
export const ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;
export const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;
export const ERROR_EC_LOG_DISABLED = 15081;
export const ERROR_EC_CIRCULAR_FORWARDING = 15082;
export const ERROR_EC_CREDSTORE_FULL = 15083;
export const ERROR_EC_CRED_NOT_FOUND = 15084;
export const ERROR_EC_NO_ACTIVE_CHANNEL = 15085;
export const ERROR_MUI_FILE_NOT_FOUND = 15100;
export const ERROR_MUI_INVALID_FILE = 15101;
export const ERROR_MUI_INVALID_RC_CONFIG = 15102;
export const ERROR_MUI_INVALID_LOCALE_NAME = 15103;
export const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;
export const ERROR_MUI_FILE_NOT_LOADED = 15105;
export const ERROR_RESOURCE_ENUM_USER_STOP = 15106;
export const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;
export const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;
export const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;
export const ERROR_MRM_INVALID_PRICONFIG = 15111;
export const ERROR_MRM_INVALID_FILE_TYPE = 15112;
export const ERROR_MRM_UNKNOWN_QUALIFIER = 15113;
export const ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;
export const ERROR_MRM_NO_CANDIDATE = 15115;
export const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;
export const ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;
export const ERROR_MRM_DUPLICATE_MAP_NAME = 15118;
export const ERROR_MRM_DUPLICATE_ENTRY = 15119;
export const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;
export const ERROR_MRM_FILEPATH_TOO_LONG = 15121;
export const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;
export const ERROR_MRM_INVALID_PRI_FILE = 15126;
export const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;
export const ERROR_MRM_MAP_NOT_FOUND = 15135;
export const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;
export const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;
export const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;
export const ERROR_MRM_AUTOMERGE_ENABLED = 15139;
export const ERROR_MRM_TOO_MANY_RESOURCES = 15140;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;
export const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;
export const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;
export const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;
export const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;
export const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;
export const ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;
export const ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;
export const ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;
export const ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;
export const ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;
export const ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;
export const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;
export const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;
export const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;
export const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;
export const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;
export const ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;
export const ERROR_MRM_PACKAGE_NOT_FOUND = 15159;
export const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;
export const ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;
export const ERROR_MCA_INVALID_VCP_VERSION = 15201;
export const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;
export const ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;
export const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;
export const ERROR_MCA_INTERNAL_ERROR = 15205;
export const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;
export const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;
export const ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;
export const ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;
export const ERROR_HASH_NOT_SUPPORTED = 15300;
export const ERROR_HASH_NOT_PRESENT = 15301;
export const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;
export const ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;
export const ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;
export const ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;
export const ERROR_GPIO_OPERATION_DENIED = 15325;
export const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;
export const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;
export const ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;
export const ERROR_INVALID_RUNLEVEL_SETTING = 15401;
export const ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;
export const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;
export const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;
export const ERROR_SERVICES_FAILED_AUTOSTART = 15405;
export const ERROR_COM_TASK_STOP_PENDING = 15501;
export const ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;
export const ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;
export const ERROR_INSTALL_INVALID_PACKAGE = 15602;
export const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;
export const ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;
export const ERROR_INSTALL_NETWORK_FAILURE = 15605;
export const ERROR_INSTALL_REGISTRATION_FAILURE = 15606;
export const ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;
export const ERROR_INSTALL_CANCEL = 15608;
export const ERROR_INSTALL_FAILED = 15609;
export const ERROR_REMOVE_FAILED = 15610;
export const ERROR_PACKAGE_ALREADY_EXISTS = 15611;
export const ERROR_NEEDS_REMEDIATION = 15612;
export const ERROR_INSTALL_PREREQUISITE_FAILED = 15613;
export const ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;
export const ERROR_INSTALL_POLICY_FAILURE = 15615;
export const ERROR_PACKAGE_UPDATING = 15616;
export const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;
export const ERROR_PACKAGES_IN_USE = 15618;
export const ERROR_RECOVERY_FILE_CORRUPT = 15619;
export const ERROR_INVALID_STAGED_SIGNATURE = 15620;
export const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;
export const ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;
export const ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;
export const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;
export const ERROR_RESILIENCY_FILE_CORRUPT = 15625;
export const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;
export const ERROR_PACKAGE_MOVE_FAILED = 15627;
export const ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;
export const ERROR_INSTALL_VOLUME_OFFLINE = 15629;
export const ERROR_INSTALL_VOLUME_CORRUPT = 15630;
export const ERROR_NEEDS_REGISTRATION = 15631;
export const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;
export const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;
export const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;
export const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;
export const ERROR_PACKAGE_STAGING_ONHOLD = 15638;
export const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;
export const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15640;
export const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;
export const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = 15642;
export const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;
export const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;
export const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;
export const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;
export const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;
export const ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;
export const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;
export const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;
export const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;
export const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;
export const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;
export const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;
export const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;
export const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;
export const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;
export const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;
export const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;
export const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;
export const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;
export const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = 15663;
export const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664;
export const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665;
export const ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666;
export const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667;
export const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668;
export const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669;
export const ERROR_STATE_LOAD_STORE_FAILED = 15800;
export const ERROR_STATE_GET_VERSION_FAILED = 15801;
export const ERROR_STATE_SET_VERSION_FAILED = 15802;
export const ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;
export const ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;
export const ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;
export const ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;
export const ERROR_STATE_READ_SETTING_FAILED = 15807;
export const ERROR_STATE_WRITE_SETTING_FAILED = 15808;
export const ERROR_STATE_DELETE_SETTING_FAILED = 15809;
export const ERROR_STATE_QUERY_SETTING_FAILED = 15810;
export const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;
export const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;
export const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;
export const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;
export const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;
export const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;
export const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;
export const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;
export const ERROR_API_UNAVAILABLE = 15841;
export const ERROR_NDIS_INTERFACE_CLOSING = 2150891522;
export const ERROR_NDIS_BAD_VERSION = 2150891524;
export const ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525;
export const ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526;
export const ERROR_NDIS_OPEN_FAILED = 2150891527;
export const ERROR_NDIS_DEVICE_FAILED = 2150891528;
export const ERROR_NDIS_MULTICAST_FULL = 2150891529;
export const ERROR_NDIS_MULTICAST_EXISTS = 2150891530;
export const ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531;
export const ERROR_NDIS_REQUEST_ABORTED = 2150891532;
export const ERROR_NDIS_RESET_IN_PROGRESS = 2150891533;
export const ERROR_NDIS_NOT_SUPPORTED = 2150891707;
export const ERROR_NDIS_INVALID_PACKET = 2150891535;
export const ERROR_NDIS_ADAPTER_NOT_READY = 2150891537;
export const ERROR_NDIS_INVALID_LENGTH = 2150891540;
export const ERROR_NDIS_INVALID_DATA = 2150891541;
export const ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542;
export const ERROR_NDIS_INVALID_OID = 2150891543;
export const ERROR_NDIS_ADAPTER_REMOVED = 2150891544;
export const ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545;
export const ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546;
export const ERROR_NDIS_FILE_NOT_FOUND = 2150891547;
export const ERROR_NDIS_ERROR_READING_FILE = 2150891548;
export const ERROR_NDIS_ALREADY_MAPPED = 2150891549;
export const ERROR_NDIS_RESOURCE_CONFLICT = 2150891550;
export const ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551;
export const ERROR_NDIS_INVALID_ADDRESS = 2150891554;
export const ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536;
export const ERROR_NDIS_PAUSED = 2150891562;
export const ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563;
export const ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564;
export const ERROR_NDIS_INVALID_PORT = 2150891565;
export const ERROR_NDIS_INVALID_PORT_STATE = 2150891566;
export const ERROR_NDIS_LOW_POWER_STATE = 2150891567;
export const ERROR_NDIS_REINIT_REQUIRED = 2150891568;
export const ERROR_NDIS_NO_QUEUES = 2150891569;
export const ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712;
export const ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713;
export const ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714;
export const ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715;
export const ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716;
export const ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717;
export const ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718;
export const ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719;
export const ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720;
export const ERROR_NDIS_INDICATION_REQUIRED = 3407873;
export const ERROR_NDIS_OFFLOAD_POLICY = 3224637455;
export const ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458;
export const ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459;
export const ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882;
export const ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883;
export const ERROR_HV_INVALID_ALIGNMENT = 3224698884;
export const ERROR_HV_INVALID_PARAMETER = 3224698885;
export const ERROR_HV_ACCESS_DENIED = 3224698886;
export const ERROR_HV_INVALID_PARTITION_STATE = 3224698887;
export const ERROR_HV_OPERATION_DENIED = 3224698888;
export const ERROR_HV_UNKNOWN_PROPERTY = 3224698889;
export const ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890;
export const ERROR_HV_INSUFFICIENT_MEMORY = 3224698891;
export const ERROR_HV_PARTITION_TOO_DEEP = 3224698892;
export const ERROR_HV_INVALID_PARTITION_ID = 3224698893;
export const ERROR_HV_INVALID_VP_INDEX = 3224698894;
export const ERROR_HV_INVALID_PORT_ID = 3224698897;
export const ERROR_HV_INVALID_CONNECTION_ID = 3224698898;
export const ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899;
export const ERROR_HV_NOT_ACKNOWLEDGED = 3224698900;
export const ERROR_HV_INVALID_VP_STATE = 3224698901;
export const ERROR_HV_ACKNOWLEDGED = 3224698902;
export const ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903;
export const ERROR_HV_INVALID_SYNIC_STATE = 3224698904;
export const ERROR_HV_OBJECT_IN_USE = 3224698905;
export const ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906;
export const ERROR_HV_NO_DATA = 3224698907;
export const ERROR_HV_INACTIVE = 3224698908;
export const ERROR_HV_NO_RESOURCES = 3224698909;
export const ERROR_HV_FEATURE_UNAVAILABLE = 3224698910;
export const ERROR_HV_INSUFFICIENT_BUFFER = 3224698931;
export const ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936;
export const ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940;
export const ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941;
export const ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942;
export const ERROR_HV_SMX_ENABLED = 3224698943;
export const ERROR_HV_INVALID_LP_INDEX = 3224698945;
export const ERROR_HV_INVALID_REGISTER_VALUE = 3224698960;
export const ERROR_HV_INVALID_VTL_STATE = 3224698961;
export const ERROR_HV_NX_NOT_DETECTED = 3224698965;
export const ERROR_HV_INVALID_DEVICE_ID = 3224698967;
export const ERROR_HV_INVALID_DEVICE_STATE = 3224698968;
export const ERROR_HV_PENDING_PAGE_REQUESTS = 3473497;
export const ERROR_HV_PAGE_REQUEST_INVALID = 3224698976;
export const ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991;
export const ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992;
export const ERROR_HV_OPERATION_FAILED = 3224698993;
export const ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994;
export const ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995;
export const ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996;
export const ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997;
export const ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998;
export const ERROR_HV_NESTED_VM_EXIT = 3224698999;
export const ERROR_HV_MSR_ACCESS_FAILED = 3224699008;
export const ERROR_HV_NOT_PRESENT = 3224702976;
export const ERROR_VID_DUPLICATE_HANDLER = 3224829953;
export const ERROR_VID_TOO_MANY_HANDLERS = 3224829954;
export const ERROR_VID_QUEUE_FULL = 3224829955;
export const ERROR_VID_HANDLER_NOT_PRESENT = 3224829956;
export const ERROR_VID_INVALID_OBJECT_NAME = 3224829957;
export const ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958;
export const ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959;
export const ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960;
export const ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961;
export const ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962;
export const ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963;
export const ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964;
export const ERROR_VID_MB_STILL_REFERENCED = 3224829965;
export const ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966;
export const ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967;
export const ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968;
export const ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969;
export const ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970;
export const ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971;
export const ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972;
export const ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973;
export const ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974;
export const ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975;
export const ERROR_VID_INVALID_PPM_HANDLE = 3224829976;
export const ERROR_VID_MBPS_ARE_LOCKED = 3224829977;
export const ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978;
export const ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979;
export const ERROR_VID_STOP_PENDING = 3224829980;
export const ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981;
export const ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982;
export const ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983;
export const ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984;
export const ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985;
export const ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986;
export const ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987;
export const ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988;
export const ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989;
export const ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990;
export const ERROR_VID_SAVED_STATE_CORRUPT = 3224829991;
export const ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992;
export const ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993;
export const ERROR_VID_VTL_ACCESS_DENIED = 3224829994;
export const ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208;
export const ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209;
export const ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210;
export const ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211;
export const ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212;
export const ERROR_VMCOMPUTE_INVALID_STATE = 3224830213;
export const ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214;
export const ERROR_VMCOMPUTE_TERMINATED = 3224830215;
export const ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216;
export const ERROR_VMCOMPUTE_TIMEOUT = 3224830217;
export const ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218;
export const ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219;
export const ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220;
export const ERROR_VMCOMPUTE_INVALID_JSON = 3224830221;
export const ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223;
export const ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224;
export const ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225;
export const ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226;
export const ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227;
export const ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464;
export const ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129;
export const ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976;
export const ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977;
export const ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665;
export const ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666;
export const ERROR_VOLMGR_DATABASE_FULL = 3224895489;
export const ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490;
export const ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491;
export const ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492;
export const ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493;
export const ERROR_VOLMGR_DISK_DUPLICATE = 3224895494;
export const ERROR_VOLMGR_DISK_DYNAMIC = 3224895495;
export const ERROR_VOLMGR_DISK_ID_INVALID = 3224895496;
export const ERROR_VOLMGR_DISK_INVALID = 3224895497;
export const ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498;
export const ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499;
export const ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS = 3224895500;
export const ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501;
export const ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502;
export const ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS = 3224895503;
export const ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504;
export const ERROR_VOLMGR_DISK_MISSING = 3224895505;
export const ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506;
export const ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507;
export const ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508;
export const ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509;
export const ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511;
export const ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512;
export const ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513;
export const ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514;
export const ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515;
export const ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516;
export const ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517;
export const ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518;
export const ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519;
export const ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520;
export const ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521;
export const ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522;
export const ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523;
export const ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524;
export const ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525;
export const ERROR_VOLMGR_MEMBER_MISSING = 3224895526;
export const ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527;
export const ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528;
export const ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529;
export const ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530;
export const ERROR_VOLMGR_NO_SUCH_USER = 3224895531;
export const ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532;
export const ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533;
export const ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534;
export const ERROR_VOLMGR_PACK_DUPLICATE = 3224895535;
export const ERROR_VOLMGR_PACK_ID_INVALID = 3224895536;
export const ERROR_VOLMGR_PACK_INVALID = 3224895537;
export const ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538;
export const ERROR_VOLMGR_PACK_OFFLINE = 3224895539;
export const ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540;
export const ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541;
export const ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542;
export const ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543;
export const ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544;
export const ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545;
export const ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546;
export const ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547;
export const ERROR_VOLMGR_PLEX_MISSING = 3224895548;
export const ERROR_VOLMGR_PLEX_REGENERATING = 3224895549;
export const ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550;
export const ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552;
export const ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553;
export const ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554;
export const ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555;
export const ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556;
export const ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557;
export const ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558;
export const ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559;
export const ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560;
export const ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561;
export const ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562;
export const ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563;
export const ERROR_VOLMGR_VOLUME_RETAINED = 3224895564;
export const ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565;
export const ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566;
export const ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567;
export const ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568;
export const ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569;
export const ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570;
export const ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573;
export const ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574;
export const ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575;
export const ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576;
export const ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577;
export const ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578;
export const ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579;
export const ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580;
export const ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201;
export const ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026;
export const ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203;
export const ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561;
export const ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562;
export const ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563;
export const ERROR_VHD_FORMAT_UNKNOWN = 3225026564;
export const ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565;
export const ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566;
export const ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567;
export const ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568;
export const ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569;
export const ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570;
export const ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571;
export const ERROR_VHD_BITMAP_MISMATCH = 3225026572;
export const ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573;
export const ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574;
export const ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575;
export const ERROR_VHD_METADATA_READ_FAILURE = 3225026576;
export const ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577;
export const ERROR_VHD_INVALID_SIZE = 3225026578;
export const ERROR_VHD_INVALID_FILE_SIZE = 3225026579;
export const ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580;
export const ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581;
export const ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582;
export const ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583;
export const ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584;
export const ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585;
export const ERROR_VIRTUAL_DISK_LIMITATION = 3225026586;
export const ERROR_VHD_INVALID_TYPE = 3225026587;
export const ERROR_VHD_INVALID_STATE = 3225026588;
export const ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589;
export const ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590;
export const ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591;
export const ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592;
export const ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593;
export const ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594;
export const ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595;
export const ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596;
export const ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597;
export const ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598;
export const ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599;
export const ERROR_VHD_METADATA_FULL = 3225026600;
export const ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601;
export const ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602;
export const ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608;
export const ERROR_QUERY_STORAGE_ERROR = 2151284737;

// Structs

export type ShFindChangeNotificationHandle = Deno.PointerValue;

export type HDROP = Deno.PointerValue;

export type HPSXA = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(util.toPointer(data.fmtid)), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Shell.APPCATEGORYINFO (size: 24)
 */
export interface APPCATEGORYINFO {
  /** u32 */
  Locale: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null;
  /** System.Guid */
  AppCategoryId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPPCATEGORYINFO = 24;

export function allocAPPCATEGORYINFO(data?: Partial<APPCATEGORYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPCATEGORYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Locale !== undefined) view.setUint32(0, Number(data.Locale), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.AppCategoryId !== undefined) view.setBigUint64(16, data.AppCategoryId === null ? 0n : BigInt(util.toPointer(data.AppCategoryId)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.APPCATEGORYINFOLIST (size: 16)
 */
export interface APPCATEGORYINFOLIST {
  /** u32 */
  cCategory: number;
  /** ptr */
  pCategoryInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPPCATEGORYINFOLIST = 16;

export function allocAPPCATEGORYINFOLIST(data?: Partial<APPCATEGORYINFOLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPCATEGORYINFOLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCategory !== undefined) view.setUint32(0, Number(data.cCategory), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryInfo !== undefined) view.setBigUint64(8, data.pCategoryInfo === null ? 0n : BigInt(util.toPointer(data.pCategoryInfo)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.Common.SHITEMID (size: 16)
 */
export interface SHITEMID {
  /** u16 */
  cb: number;
  /** array */
  abID: Deno.PointerValue | null;
}

export const sizeofSHITEMID = 16;

export function allocSHITEMID(data?: Partial<SHITEMID>): Uint8Array {
  const buf = new Uint8Array(sizeofSHITEMID);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cb !== undefined) view.setUint16(0, Number(data.cb), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.abID !== undefined) view.setBigUint64(8, data.abID === null ? 0n : BigInt(util.toPointer(data.abID)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.Common.ITEMIDLIST (size: 8)
 */
export interface ITEMIDLIST {
  /** Windows.Win32.UI.Shell.Common.SHITEMID */
  mkid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofITEMIDLIST = 8;

export function allocITEMIDLIST(data?: Partial<ITEMIDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofITEMIDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.mkid !== undefined) view.setBigUint64(0, data.mkid === null ? 0n : BigInt(util.toPointer(data.mkid)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.Common.STRRET (size: 16)
 */
export interface STRRET {
  /** u32 */
  uType: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSTRRET = 16;

export function allocSTRRET(data?: Partial<STRRET>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRRET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uType !== undefined) view.setUint32(0, Number(data.uType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.Common.SHELLDETAILS (size: 16)
 */
export interface SHELLDETAILS {
  /** i32 */
  fmt: number;
  /** i32 */
  cxChar: number;
  /** Windows.Win32.UI.Shell.Common.STRRET */
  str: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSHELLDETAILS = 16;

export function allocSHELLDETAILS(data?: Partial<SHELLDETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELLDETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fmt !== undefined) view.setInt32(0, Number(data.fmt), true);
  // 0x04: i32
  if (data?.cxChar !== undefined) view.setInt32(4, Number(data.cxChar), true);
  // 0x08: pointer
  if (data?.str !== undefined) view.setBigUint64(8, data.str === null ? 0n : BigInt(util.toPointer(data.str)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.Common.COMDLG_FILTERSPEC (size: 16)
 */
export interface COMDLG_FILTERSPEC {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSpec: string | null;
}

export const sizeofCOMDLG_FILTERSPEC = 16;

export function allocCOMDLG_FILTERSPEC(data?: Partial<COMDLG_FILTERSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMDLG_FILTERSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszSpec !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSpec);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Shell.DRAGINFOA (size: 40)
 */
export interface DRAGINFOA {
  /** u32 */
  uSize: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fNC: boolean;
  /** Windows.Win32.Foundation.PSTR */
  lpFileList: string | null;
  /** u32 */
  grfKeyState: number;
}

export const sizeofDRAGINFOA = 40;

export function allocDRAGINFOA(data?: Partial<DRAGINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAGINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uSize !== undefined) view.setUint32(0, Number(data.uSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(util.toPointer(data.pt)), true);
  // 0x10: i32
  if (data?.fNC !== undefined) view.setInt32(16, Number(data.fNC), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpFileList !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpFileList);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.grfKeyState !== undefined) view.setUint32(32, Number(data.grfKeyState), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DRAGINFOW (size: 40)
 */
export interface DRAGINFOW {
  /** u32 */
  uSize: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fNC: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  lpFileList: string | null;
  /** u32 */
  grfKeyState: number;
}

export const sizeofDRAGINFOW = 40;

export function allocDRAGINFOW(data?: Partial<DRAGINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAGINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uSize !== undefined) view.setUint32(0, Number(data.uSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(util.toPointer(data.pt)), true);
  // 0x10: i32
  if (data?.fNC !== undefined) view.setInt32(16, Number(data.fNC), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpFileList !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpFileList);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.grfKeyState !== undefined) view.setUint32(32, Number(data.grfKeyState), true);
  // 0x24: pad4
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.APPBARDATA (size: 40)
 */
export interface APPBARDATA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  uCallbackMessage: number;
  /** u32 */
  uEdge: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAPPBARDATA = 40;

export function allocAPPBARDATA(data?: Partial<APPBARDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPBARDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.uCallbackMessage !== undefined) view.setUint32(16, Number(data.uCallbackMessage), true);
  // 0x14: u32
  if (data?.uEdge !== undefined) view.setUint32(20, Number(data.uEdge), true);
  // 0x18: pointer
  if (data?.rc !== undefined) view.setBigUint64(24, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHFILEOPSTRUCTA (size: 56)
 */
export interface SHFILEOPSTRUCTA {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** u32 */
  wFunc: number;
  /** ptr */
  pFrom: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTo: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fAnyOperationsAborted: boolean;
  /** ptr */
  hNameMappings: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszProgressTitle: string | null;
}

export const sizeofSHFILEOPSTRUCTA = 56;

export function allocSHFILEOPSTRUCTA(data?: Partial<SHFILEOPSTRUCTA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHFILEOPSTRUCTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x08: u32
  if (data?.wFunc !== undefined) view.setUint32(8, Number(data.wFunc), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pFrom !== undefined) view.setBigUint64(16, data.pFrom === null ? 0n : BigInt(util.toPointer(data.pFrom)), true);
  // 0x18: pointer
  if (data?.pTo !== undefined) view.setBigUint64(24, data.pTo === null ? 0n : BigInt(util.toPointer(data.pTo)), true);
  // 0x20: u16
  if (data?.fFlags !== undefined) view.setUint16(32, Number(data.fFlags), true);
  // 0x22: i32
  if (data?.fAnyOperationsAborted !== undefined) view.setInt32(34, Number(data.fAnyOperationsAborted), true);
  // 0x26: pad2
  // 0x28: pointer
  if (data?.hNameMappings !== undefined) view.setBigUint64(40, data.hNameMappings === null ? 0n : BigInt(util.toPointer(data.hNameMappings)), true);
  // 0x30: buffer
  if (data?.lpszProgressTitle !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszProgressTitle);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHFILEOPSTRUCTW (size: 56)
 */
export interface SHFILEOPSTRUCTW {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** u32 */
  wFunc: number;
  /** Windows.Win32.Foundation.PWSTR */
  pFrom: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pTo: string | null;
  /** u16 */
  fFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fAnyOperationsAborted: boolean;
  /** ptr */
  hNameMappings: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszProgressTitle: string | null;
}

export const sizeofSHFILEOPSTRUCTW = 56;

export function allocSHFILEOPSTRUCTW(data?: Partial<SHFILEOPSTRUCTW>): Uint8Array {
  const buf = new Uint8Array(sizeofSHFILEOPSTRUCTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x08: u32
  if (data?.wFunc !== undefined) view.setUint32(8, Number(data.wFunc), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pFrom !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pFrom);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pTo !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pTo);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u16
  if (data?.fFlags !== undefined) view.setUint16(32, Number(data.fFlags), true);
  // 0x22: i32
  if (data?.fAnyOperationsAborted !== undefined) view.setInt32(34, Number(data.fAnyOperationsAborted), true);
  // 0x26: pad2
  // 0x28: pointer
  if (data?.hNameMappings !== undefined) view.setBigUint64(40, data.hNameMappings === null ? 0n : BigInt(util.toPointer(data.hNameMappings)), true);
  // 0x30: buffer
  if (data?.lpszProgressTitle !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszProgressTitle);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHNAMEMAPPINGA (size: 24)
 */
export interface SHNAMEMAPPINGA {
  /** Windows.Win32.Foundation.PSTR */
  pszOldPath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  pszNewPath: string | null;
  /** i32 */
  cchOldPath: number;
  /** i32 */
  cchNewPath: number;
}

export const sizeofSHNAMEMAPPINGA = 24;

export function allocSHNAMEMAPPINGA(data?: Partial<SHNAMEMAPPINGA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHNAMEMAPPINGA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszOldPath !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszOldPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszNewPath !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszNewPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.cchOldPath !== undefined) view.setInt32(16, Number(data.cchOldPath), true);
  // 0x14: i32
  if (data?.cchNewPath !== undefined) view.setInt32(20, Number(data.cchNewPath), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHNAMEMAPPINGW (size: 24)
 */
export interface SHNAMEMAPPINGW {
  /** Windows.Win32.Foundation.PWSTR */
  pszOldPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszNewPath: string | null;
  /** i32 */
  cchOldPath: number;
  /** i32 */
  cchNewPath: number;
}

export const sizeofSHNAMEMAPPINGW = 24;

export function allocSHNAMEMAPPINGW(data?: Partial<SHNAMEMAPPINGW>): Uint8Array {
  const buf = new Uint8Array(sizeofSHNAMEMAPPINGW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszOldPath !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszOldPath);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszNewPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszNewPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.cchOldPath !== undefined) view.setInt32(16, Number(data.cchOldPath), true);
  // 0x14: i32
  if (data?.cchNewPath !== undefined) view.setInt32(20, Number(data.cchNewPath), true);
  return buf;
}

export type HINSTANCE = Deno.PointerValue;

export type HKEY = Deno.PointerValue;

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.SHELLEXECUTEINFOA (size: 112)
 */
export interface SHELLEXECUTEINFOA {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpVerb: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpFile: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpParameters: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDirectory: string | null;
  /** i32 */
  nShow: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstApp: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpIDList: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpClass: string | null;
  /** Windows.Win32.System.Registry.HKEY */
  hkeyClass: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwHotKey: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSHELLEXECUTEINFOA = 112;

export function allocSHELLEXECUTEINFOA(data?: Partial<SHELLEXECUTEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELLEXECUTEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpVerb !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpVerb);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpFile !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpFile);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpParameters !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpParameters);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpDirectory !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpDirectory);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.nShow !== undefined) view.setInt32(48, Number(data.nShow), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hInstApp !== undefined) view.setBigUint64(56, data.hInstApp === null ? 0n : BigInt(util.toPointer(data.hInstApp)), true);
  // 0x40: pointer
  if (data?.lpIDList !== undefined) view.setBigUint64(64, data.lpIDList === null ? 0n : BigInt(util.toPointer(data.lpIDList)), true);
  // 0x48: buffer
  if (data?.lpClass !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpClass);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: pointer
  if (data?.hkeyClass !== undefined) view.setBigUint64(80, data.hkeyClass === null ? 0n : BigInt(util.toPointer(data.hkeyClass)), true);
  // 0x58: u32
  if (data?.dwHotKey !== undefined) view.setUint32(88, Number(data.dwHotKey), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(96, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x68: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(104, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHELLEXECUTEINFOW (size: 112)
 */
export interface SHELLEXECUTEINFOW {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpVerb: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpParameters: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDirectory: string | null;
  /** i32 */
  nShow: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstApp: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpIDList: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpClass: string | null;
  /** Windows.Win32.System.Registry.HKEY */
  hkeyClass: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwHotKey: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSHELLEXECUTEINFOW = 112;

export function allocSHELLEXECUTEINFOW(data?: Partial<SHELLEXECUTEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELLEXECUTEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpVerb !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpVerb);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpFile !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpFile);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpParameters !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpParameters);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpDirectory !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpDirectory);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.nShow !== undefined) view.setInt32(48, Number(data.nShow), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hInstApp !== undefined) view.setBigUint64(56, data.hInstApp === null ? 0n : BigInt(util.toPointer(data.hInstApp)), true);
  // 0x40: pointer
  if (data?.lpIDList !== undefined) view.setBigUint64(64, data.lpIDList === null ? 0n : BigInt(util.toPointer(data.lpIDList)), true);
  // 0x48: buffer
  if (data?.lpClass !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpClass);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: pointer
  if (data?.hkeyClass !== undefined) view.setBigUint64(80, data.hkeyClass === null ? 0n : BigInt(util.toPointer(data.hkeyClass)), true);
  // 0x58: u32
  if (data?.dwHotKey !== undefined) view.setUint32(88, Number(data.dwHotKey), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(96, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x68: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(104, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHCREATEPROCESSINFOW (size: 88)
 */
export interface SHCREATEPROCESSINFOW {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszParameters: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszCurrentDirectory: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hUserToken: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpProcessAttributes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpThreadAttributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  bInheritHandles: boolean;
  /** u32 */
  dwCreationFlags: number;
  /** ptr */
  lpStartupInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpProcessInformation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSHCREATEPROCESSINFOW = 88;

export function allocSHCREATEPROCESSINFOW(data?: Partial<SHCREATEPROCESSINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSHCREATEPROCESSINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.pszFile !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszParameters !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszParameters);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszCurrentDirectory !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszCurrentDirectory);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.hUserToken !== undefined) view.setBigUint64(40, data.hUserToken === null ? 0n : BigInt(util.toPointer(data.hUserToken)), true);
  // 0x30: pointer
  if (data?.lpProcessAttributes !== undefined) view.setBigUint64(48, data.lpProcessAttributes === null ? 0n : BigInt(util.toPointer(data.lpProcessAttributes)), true);
  // 0x38: pointer
  if (data?.lpThreadAttributes !== undefined) view.setBigUint64(56, data.lpThreadAttributes === null ? 0n : BigInt(util.toPointer(data.lpThreadAttributes)), true);
  // 0x40: i32
  if (data?.bInheritHandles !== undefined) view.setInt32(64, Number(data.bInheritHandles), true);
  // 0x44: u32
  if (data?.dwCreationFlags !== undefined) view.setUint32(68, Number(data.dwCreationFlags), true);
  // 0x48: pointer
  if (data?.lpStartupInfo !== undefined) view.setBigUint64(72, data.lpStartupInfo === null ? 0n : BigInt(util.toPointer(data.lpStartupInfo)), true);
  // 0x50: pointer
  if (data?.lpProcessInformation !== undefined) view.setBigUint64(80, data.lpProcessInformation === null ? 0n : BigInt(util.toPointer(data.lpProcessInformation)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.ASSOCIATIONELEMENT (size: 24)
 */
export interface ASSOCIATIONELEMENT {
  /** Windows.Win32.UI.Shell.ASSOCCLASS */
  ac: ASSOCCLASS;
  /** Windows.Win32.System.Registry.HKEY */
  hkClass: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszClass: string | null;
}

export const sizeofASSOCIATIONELEMENT = 24;

export function allocASSOCIATIONELEMENT(data?: Partial<ASSOCIATIONELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofASSOCIATIONELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ac !== undefined) view.setInt32(0, Number(data.ac), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hkClass !== undefined) view.setBigUint64(8, data.hkClass === null ? 0n : BigInt(util.toPointer(data.hkClass)), true);
  // 0x10: buffer
  if (data?.pszClass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszClass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHQUERYRBINFO (size: 24)
 */
export interface SHQUERYRBINFO {
  /** u32 */
  cbSize: number;
  /** i64 */
  i64Size: Deno.PointerValue;
  /** i64 */
  i64NumItems: Deno.PointerValue;
}

export const sizeofSHQUERYRBINFO = 24;

export function allocSHQUERYRBINFO(data?: Partial<SHQUERYRBINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSHQUERYRBINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.i64Size !== undefined) view.setBigInt64(8, BigInt(data.i64Size), true);
  // 0x10: i64
  if (data?.i64NumItems !== undefined) view.setBigInt64(16, BigInt(data.i64NumItems), true);
  return buf;
}

export type HICON = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.NOTIFYICONDATAA (size: 104)
 */
export interface NOTIFYICONDATAA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  uID: number;
  /** Windows.Win32.UI.Shell.NOTIFY_ICON_DATA_FLAGS */
  uFlags: NOTIFY_ICON_DATA_FLAGS;
  /** u32 */
  uCallbackMessage: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szTip: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.NOTIFY_ICON_STATE */
  dwState: NOTIFY_ICON_STATE;
  /** u32 */
  dwStateMask: number;
  /** array */
  szInfo: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  szInfoTitle: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.NOTIFY_ICON_INFOTIP_FLAGS */
  dwInfoFlags: NOTIFY_ICON_INFOTIP_FLAGS;
  /** System.Guid */
  guidItem: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hBalloonIcon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNOTIFYICONDATAA = 104;

export function allocNOTIFYICONDATAA(data?: Partial<NOTIFYICONDATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFYICONDATAA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.uID !== undefined) view.setUint32(16, Number(data.uID), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: u32
  if (data?.uCallbackMessage !== undefined) view.setUint32(24, Number(data.uCallbackMessage), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(32, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x28: pointer
  if (data?.szTip !== undefined) view.setBigUint64(40, data.szTip === null ? 0n : BigInt(util.toPointer(data.szTip)), true);
  // 0x30: u32
  if (data?.dwState !== undefined) view.setUint32(48, Number(data.dwState), true);
  // 0x34: u32
  if (data?.dwStateMask !== undefined) view.setUint32(52, Number(data.dwStateMask), true);
  // 0x38: pointer
  if (data?.szInfo !== undefined) view.setBigUint64(56, data.szInfo === null ? 0n : BigInt(util.toPointer(data.szInfo)), true);
  // 0x40: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(64, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x48: pointer
  if (data?.szInfoTitle !== undefined) view.setBigUint64(72, data.szInfoTitle === null ? 0n : BigInt(util.toPointer(data.szInfoTitle)), true);
  // 0x50: u32
  if (data?.dwInfoFlags !== undefined) view.setUint32(80, Number(data.dwInfoFlags), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.guidItem !== undefined) view.setBigUint64(88, data.guidItem === null ? 0n : BigInt(util.toPointer(data.guidItem)), true);
  // 0x60: pointer
  if (data?.hBalloonIcon !== undefined) view.setBigUint64(96, data.hBalloonIcon === null ? 0n : BigInt(util.toPointer(data.hBalloonIcon)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NOTIFYICONDATAW (size: 104)
 */
export interface NOTIFYICONDATAW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  uID: number;
  /** Windows.Win32.UI.Shell.NOTIFY_ICON_DATA_FLAGS */
  uFlags: NOTIFY_ICON_DATA_FLAGS;
  /** u32 */
  uCallbackMessage: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szTip: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.NOTIFY_ICON_STATE */
  dwState: NOTIFY_ICON_STATE;
  /** u32 */
  dwStateMask: number;
  /** array */
  szInfo: Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  szInfoTitle: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.NOTIFY_ICON_INFOTIP_FLAGS */
  dwInfoFlags: NOTIFY_ICON_INFOTIP_FLAGS;
  /** System.Guid */
  guidItem: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hBalloonIcon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNOTIFYICONDATAW = 104;

export function allocNOTIFYICONDATAW(data?: Partial<NOTIFYICONDATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFYICONDATAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.uID !== undefined) view.setUint32(16, Number(data.uID), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: u32
  if (data?.uCallbackMessage !== undefined) view.setUint32(24, Number(data.uCallbackMessage), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(32, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x28: pointer
  if (data?.szTip !== undefined) view.setBigUint64(40, data.szTip === null ? 0n : BigInt(util.toPointer(data.szTip)), true);
  // 0x30: u32
  if (data?.dwState !== undefined) view.setUint32(48, Number(data.dwState), true);
  // 0x34: u32
  if (data?.dwStateMask !== undefined) view.setUint32(52, Number(data.dwStateMask), true);
  // 0x38: pointer
  if (data?.szInfo !== undefined) view.setBigUint64(56, data.szInfo === null ? 0n : BigInt(util.toPointer(data.szInfo)), true);
  // 0x40: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(64, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x48: pointer
  if (data?.szInfoTitle !== undefined) view.setBigUint64(72, data.szInfoTitle === null ? 0n : BigInt(util.toPointer(data.szInfoTitle)), true);
  // 0x50: u32
  if (data?.dwInfoFlags !== undefined) view.setUint32(80, Number(data.dwInfoFlags), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.guidItem !== undefined) view.setBigUint64(88, data.guidItem === null ? 0n : BigInt(util.toPointer(data.guidItem)), true);
  // 0x60: pointer
  if (data?.hBalloonIcon !== undefined) view.setBigUint64(96, data.hBalloonIcon === null ? 0n : BigInt(util.toPointer(data.hBalloonIcon)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NOTIFYICONIDENTIFIER (size: 32)
 */
export interface NOTIFYICONIDENTIFIER {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** u32 */
  uID: number;
  /** System.Guid */
  guidItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNOTIFYICONIDENTIFIER = 32;

export function allocNOTIFYICONIDENTIFIER(data?: Partial<NOTIFYICONIDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFYICONIDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x10: u32
  if (data?.uID !== undefined) view.setUint32(16, Number(data.uID), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.guidItem !== undefined) view.setBigUint64(24, data.guidItem === null ? 0n : BigInt(util.toPointer(data.guidItem)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHFILEINFOA (size: 32)
 */
export interface SHFILEINFOA {
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iIcon: number;
  /** u32 */
  dwAttributes: number;
  /** array */
  szDisplayName: Deno.PointerValue | null;
  /** array */
  szTypeName: Deno.PointerValue | null;
}

export const sizeofSHFILEINFOA = 32;

export function allocSHFILEINFOA(data?: Partial<SHFILEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHFILEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(0, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x08: i32
  if (data?.iIcon !== undefined) view.setInt32(8, Number(data.iIcon), true);
  // 0x0c: u32
  if (data?.dwAttributes !== undefined) view.setUint32(12, Number(data.dwAttributes), true);
  // 0x10: pointer
  if (data?.szDisplayName !== undefined) view.setBigUint64(16, data.szDisplayName === null ? 0n : BigInt(util.toPointer(data.szDisplayName)), true);
  // 0x18: pointer
  if (data?.szTypeName !== undefined) view.setBigUint64(24, data.szTypeName === null ? 0n : BigInt(util.toPointer(data.szTypeName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHFILEINFOW (size: 32)
 */
export interface SHFILEINFOW {
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iIcon: number;
  /** u32 */
  dwAttributes: number;
  /** array */
  szDisplayName: Deno.PointerValue | null;
  /** array */
  szTypeName: Deno.PointerValue | null;
}

export const sizeofSHFILEINFOW = 32;

export function allocSHFILEINFOW(data?: Partial<SHFILEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSHFILEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(0, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x08: i32
  if (data?.iIcon !== undefined) view.setInt32(8, Number(data.iIcon), true);
  // 0x0c: u32
  if (data?.dwAttributes !== undefined) view.setUint32(12, Number(data.dwAttributes), true);
  // 0x10: pointer
  if (data?.szDisplayName !== undefined) view.setBigUint64(16, data.szDisplayName === null ? 0n : BigInt(util.toPointer(data.szDisplayName)), true);
  // 0x18: pointer
  if (data?.szTypeName !== undefined) view.setBigUint64(24, data.szTypeName === null ? 0n : BigInt(util.toPointer(data.szTypeName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHSTOCKICONINFO (size: 32)
 */
export interface SHSTOCKICONINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iSysImageIndex: number;
  /** i32 */
  iIcon: number;
  /** array */
  szPath: Deno.PointerValue | null;
}

export const sizeofSHSTOCKICONINFO = 32;

export function allocSHSTOCKICONINFO(data?: Partial<SHSTOCKICONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSHSTOCKICONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(8, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x10: i32
  if (data?.iSysImageIndex !== undefined) view.setInt32(16, Number(data.iSysImageIndex), true);
  // 0x14: i32
  if (data?.iIcon !== undefined) view.setInt32(20, Number(data.iIcon), true);
  // 0x18: pointer
  if (data?.szPath !== undefined) view.setBigUint64(24, data.szPath === null ? 0n : BigInt(util.toPointer(data.szPath)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.OPEN_PRINTER_PROPS_INFOA (size: 32)
 */
export interface OPEN_PRINTER_PROPS_INFOA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszSheetName: string | null;
  /** u32 */
  uSheetIndex: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  bModal: boolean;
}

export const sizeofOPEN_PRINTER_PROPS_INFOA = 32;

export function allocOPEN_PRINTER_PROPS_INFOA(data?: Partial<OPEN_PRINTER_PROPS_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPEN_PRINTER_PROPS_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszSheetName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszSheetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.uSheetIndex !== undefined) view.setUint32(16, Number(data.uSheetIndex), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: i32
  if (data?.bModal !== undefined) view.setInt32(24, Number(data.bModal), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.OPEN_PRINTER_PROPS_INFOW (size: 32)
 */
export interface OPEN_PRINTER_PROPS_INFOW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSheetName: string | null;
  /** u32 */
  uSheetIndex: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  bModal: boolean;
}

export const sizeofOPEN_PRINTER_PROPS_INFOW = 32;

export function allocOPEN_PRINTER_PROPS_INFOW(data?: Partial<OPEN_PRINTER_PROPS_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPEN_PRINTER_PROPS_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszSheetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSheetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.uSheetIndex !== undefined) view.setUint32(16, Number(data.uSheetIndex), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: i32
  if (data?.bModal !== undefined) view.setInt32(24, Number(data.bModal), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.HELPINFO (size: 40)
 */
export interface HELPINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Shell.HELP_INFO_TYPE */
  iContextType: HELP_INFO_TYPE;
  /** i32 */
  iCtrlId: number;
  /** Windows.Win32.Foundation.HANDLE */
  hItemHandle: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwContextId: Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  MousePos: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHELPINFO = 40;

export function allocHELPINFO(data?: Partial<HELPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHELPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.iContextType !== undefined) view.setInt32(4, Number(data.iContextType), true);
  // 0x08: i32
  if (data?.iCtrlId !== undefined) view.setInt32(8, Number(data.iCtrlId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hItemHandle !== undefined) view.setBigUint64(16, data.hItemHandle === null ? 0n : BigInt(util.toPointer(data.hItemHandle)), true);
  // 0x18: usize
  if (data?.dwContextId !== undefined) view.setBigUint64(24, BigInt(data.dwContextId), true);
  // 0x20: pointer
  if (data?.MousePos !== undefined) view.setBigUint64(32, data.MousePos === null ? 0n : BigInt(util.toPointer(data.MousePos)), true);
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.UI.Shell.MULTIKEYHELPA (size: 24)
 */
export interface MULTIKEYHELPA {
  /** u32 */
  mkSize: number;
  /** Windows.Win32.Foundation.CHAR */
  mkKeylist: Uint8Array | Deno.PointerValue | null;
  /** array */
  szKeyphrase: Deno.PointerValue | null;
}

export const sizeofMULTIKEYHELPA = 24;

export function allocMULTIKEYHELPA(data?: Partial<MULTIKEYHELPA>): Uint8Array {
  const buf = new Uint8Array(sizeofMULTIKEYHELPA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mkSize !== undefined) view.setUint32(0, Number(data.mkSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.mkKeylist !== undefined) view.setBigUint64(8, data.mkKeylist === null ? 0n : BigInt(util.toPointer(data.mkKeylist)), true);
  // 0x10: pointer
  if (data?.szKeyphrase !== undefined) view.setBigUint64(16, data.szKeyphrase === null ? 0n : BigInt(util.toPointer(data.szKeyphrase)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.MULTIKEYHELPW (size: 24)
 */
export interface MULTIKEYHELPW {
  /** u32 */
  mkSize: number;
  /** char */
  mkKeylist: Uint8Array | Deno.PointerValue | null;
  /** array */
  szKeyphrase: Deno.PointerValue | null;
}

export const sizeofMULTIKEYHELPW = 24;

export function allocMULTIKEYHELPW(data?: Partial<MULTIKEYHELPW>): Uint8Array {
  const buf = new Uint8Array(sizeofMULTIKEYHELPW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mkSize !== undefined) view.setUint32(0, Number(data.mkSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.mkKeylist !== undefined) view.setBigUint64(8, data.mkKeylist === null ? 0n : BigInt(util.toPointer(data.mkKeylist)), true);
  // 0x10: pointer
  if (data?.szKeyphrase !== undefined) view.setBigUint64(16, data.szKeyphrase === null ? 0n : BigInt(util.toPointer(data.szKeyphrase)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.HELPWININFOA (size: 32)
 */
export interface HELPWININFOA {
  /** i32 */
  wStructSize: number;
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** i32 */
  dx: number;
  /** i32 */
  dy: number;
  /** i32 */
  wMax: number;
  /** array */
  rgchMember: Deno.PointerValue | null;
}

export const sizeofHELPWININFOA = 32;

export function allocHELPWININFOA(data?: Partial<HELPWININFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofHELPWININFOA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wStructSize !== undefined) view.setInt32(0, Number(data.wStructSize), true);
  // 0x04: i32
  if (data?.x !== undefined) view.setInt32(4, Number(data.x), true);
  // 0x08: i32
  if (data?.y !== undefined) view.setInt32(8, Number(data.y), true);
  // 0x0c: i32
  if (data?.dx !== undefined) view.setInt32(12, Number(data.dx), true);
  // 0x10: i32
  if (data?.dy !== undefined) view.setInt32(16, Number(data.dy), true);
  // 0x14: i32
  if (data?.wMax !== undefined) view.setInt32(20, Number(data.wMax), true);
  // 0x18: pointer
  if (data?.rgchMember !== undefined) view.setBigUint64(24, data.rgchMember === null ? 0n : BigInt(util.toPointer(data.rgchMember)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.HELPWININFOW (size: 32)
 */
export interface HELPWININFOW {
  /** i32 */
  wStructSize: number;
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** i32 */
  dx: number;
  /** i32 */
  dy: number;
  /** i32 */
  wMax: number;
  /** array */
  rgchMember: Deno.PointerValue | null;
}

export const sizeofHELPWININFOW = 32;

export function allocHELPWININFOW(data?: Partial<HELPWININFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofHELPWININFOW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.wStructSize !== undefined) view.setInt32(0, Number(data.wStructSize), true);
  // 0x04: i32
  if (data?.x !== undefined) view.setInt32(4, Number(data.x), true);
  // 0x08: i32
  if (data?.y !== undefined) view.setInt32(8, Number(data.y), true);
  // 0x0c: i32
  if (data?.dx !== undefined) view.setInt32(12, Number(data.dx), true);
  // 0x10: i32
  if (data?.dy !== undefined) view.setInt32(16, Number(data.dy), true);
  // 0x14: i32
  if (data?.wMax !== undefined) view.setInt32(20, Number(data.wMax), true);
  // 0x18: pointer
  if (data?.rgchMember !== undefined) view.setBigUint64(24, data.rgchMember === null ? 0n : BigInt(util.toPointer(data.rgchMember)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CMINVOKECOMMANDINFO (size: 56)
 */
export interface CMINVOKECOMMANDINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpVerb: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpParameters: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDirectory: string | null;
  /** i32 */
  nShow: number;
  /** u32 */
  dwHotKey: number;
  /** Windows.Win32.Foundation.HANDLE */
  hIcon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMINVOKECOMMANDINFO = 56;

export function allocCMINVOKECOMMANDINFO(data?: Partial<CMINVOKECOMMANDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMINVOKECOMMANDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpVerb !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpVerb);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpParameters !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpParameters);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpDirectory !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpDirectory);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.nShow !== undefined) view.setInt32(40, Number(data.nShow), true);
  // 0x2c: u32
  if (data?.dwHotKey !== undefined) view.setUint32(44, Number(data.dwHotKey), true);
  // 0x30: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(48, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CMINVOKECOMMANDINFOEX (size: 104)
 */
export interface CMINVOKECOMMANDINFOEX {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpVerb: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpParameters: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDirectory: string | null;
  /** i32 */
  nShow: number;
  /** u32 */
  dwHotKey: number;
  /** Windows.Win32.Foundation.HANDLE */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpTitle: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpVerbW: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpParametersW: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDirectoryW: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpTitleW: string | null;
  /** Windows.Win32.Foundation.POINT */
  ptInvoke: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMINVOKECOMMANDINFOEX = 104;

export function allocCMINVOKECOMMANDINFOEX(data?: Partial<CMINVOKECOMMANDINFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofCMINVOKECOMMANDINFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpVerb !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpVerb);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpParameters !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpParameters);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpDirectory !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpDirectory);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.nShow !== undefined) view.setInt32(40, Number(data.nShow), true);
  // 0x2c: u32
  if (data?.dwHotKey !== undefined) view.setUint32(44, Number(data.dwHotKey), true);
  // 0x30: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(48, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x38: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.lpTitle);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.lpVerbW !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpVerbW);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.lpParametersW !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpParametersW);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.lpDirectoryW !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpDirectoryW);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.lpTitleW !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpTitleW);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: pointer
  if (data?.ptInvoke !== undefined) view.setBigUint64(96, data.ptInvoke === null ? 0n : BigInt(util.toPointer(data.ptInvoke)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CMINVOKECOMMANDINFOEX_REMOTE (size: 104)
 */
export interface CMINVOKECOMMANDINFOEX_REMOTE {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpVerbString: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpParameters: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDirectory: string | null;
  /** i32 */
  nShow: number;
  /** u32 */
  dwHotKey: number;
  /** Windows.Win32.Foundation.PSTR */
  lpTitle: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpVerbWString: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpParametersW: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDirectoryW: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpTitleW: string | null;
  /** Windows.Win32.Foundation.POINT */
  ptInvoke: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  lpVerbInt: number;
  /** u32 */
  lpVerbWInt: number;
}

export const sizeofCMINVOKECOMMANDINFOEX_REMOTE = 104;

export function allocCMINVOKECOMMANDINFOEX_REMOTE(data?: Partial<CMINVOKECOMMANDINFOEX_REMOTE>): Uint8Array {
  const buf = new Uint8Array(sizeofCMINVOKECOMMANDINFOEX_REMOTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpVerbString !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpVerbString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpParameters !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpParameters);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpDirectory !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpDirectory);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.nShow !== undefined) view.setInt32(40, Number(data.nShow), true);
  // 0x2c: u32
  if (data?.dwHotKey !== undefined) view.setUint32(44, Number(data.dwHotKey), true);
  // 0x30: buffer
  if (data?.lpTitle !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpTitle);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.lpVerbWString !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.lpVerbWString);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.lpParametersW !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpParametersW);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.lpDirectoryW !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpDirectoryW);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.lpTitleW !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpTitleW);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: pointer
  if (data?.ptInvoke !== undefined) view.setBigUint64(88, data.ptInvoke === null ? 0n : BigInt(util.toPointer(data.ptInvoke)), true);
  // 0x60: u32
  if (data?.lpVerbInt !== undefined) view.setUint32(96, Number(data.lpVerbInt), true);
  // 0x64: u32
  if (data?.lpVerbWInt !== undefined) view.setUint32(100, Number(data.lpVerbWInt), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PERSIST_FOLDER_TARGET_INFO (size: 32)
 */
export interface PERSIST_FOLDER_TARGET_INFO {
  /** ptr */
  pidlTargetFolder: Deno.PointerValue | Uint8Array | null;
  /** array */
  szTargetParsingName: Deno.PointerValue | null;
  /** array */
  szNetworkProvider: Deno.PointerValue | null;
  /** u32 */
  dwAttributes: number;
  /** i32 */
  csidl: number;
}

export const sizeofPERSIST_FOLDER_TARGET_INFO = 32;

export function allocPERSIST_FOLDER_TARGET_INFO(data?: Partial<PERSIST_FOLDER_TARGET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPERSIST_FOLDER_TARGET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pidlTargetFolder !== undefined) view.setBigUint64(0, data.pidlTargetFolder === null ? 0n : BigInt(util.toPointer(data.pidlTargetFolder)), true);
  // 0x08: pointer
  if (data?.szTargetParsingName !== undefined) view.setBigUint64(8, data.szTargetParsingName === null ? 0n : BigInt(util.toPointer(data.szTargetParsingName)), true);
  // 0x10: pointer
  if (data?.szNetworkProvider !== undefined) view.setBigUint64(16, data.szNetworkProvider === null ? 0n : BigInt(util.toPointer(data.szNetworkProvider)), true);
  // 0x18: u32
  if (data?.dwAttributes !== undefined) view.setUint32(24, Number(data.dwAttributes), true);
  // 0x1c: i32
  if (data?.csidl !== undefined) view.setInt32(28, Number(data.csidl), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.EXTRASEARCH (size: 24)
 */
export interface EXTRASEARCH {
  /** System.Guid */
  guidSearch: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszFriendlyName: Deno.PointerValue | null;
  /** array */
  wszUrl: Deno.PointerValue | null;
}

export const sizeofEXTRASEARCH = 24;

export function allocEXTRASEARCH(data?: Partial<EXTRASEARCH>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTRASEARCH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidSearch !== undefined) view.setBigUint64(0, data.guidSearch === null ? 0n : BigInt(util.toPointer(data.guidSearch)), true);
  // 0x08: pointer
  if (data?.wszFriendlyName !== undefined) view.setBigUint64(8, data.wszFriendlyName === null ? 0n : BigInt(util.toPointer(data.wszFriendlyName)), true);
  // 0x10: pointer
  if (data?.wszUrl !== undefined) view.setBigUint64(16, data.wszUrl === null ? 0n : BigInt(util.toPointer(data.wszUrl)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FOLDERSETTINGS (size: 8)
 */
export interface FOLDERSETTINGS {
  /** u32 */
  ViewMode: number;
  /** u32 */
  fFlags: number;
}

export const sizeofFOLDERSETTINGS = 8;

export function allocFOLDERSETTINGS(data?: Partial<FOLDERSETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofFOLDERSETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ViewMode !== undefined) view.setUint32(0, Number(data.ViewMode), true);
  // 0x04: u32
  if (data?.fFlags !== undefined) view.setUint32(4, Number(data.fFlags), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SV2CVW2_PARAMS (size: 56)
 */
export interface SV2CVW2_PARAMS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Shell.IShellView */
  psvPrev: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pfs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellBrowser */
  psbOwner: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  prcView: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pvid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hwndView: Deno.PointerValue | null;
}

export const sizeofSV2CVW2_PARAMS = 56;

export function allocSV2CVW2_PARAMS(data?: Partial<SV2CVW2_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSV2CVW2_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.psvPrev !== undefined) view.setBigUint64(8, data.psvPrev === null ? 0n : BigInt(util.toPointer(data.psvPrev)), true);
  // 0x10: pointer
  if (data?.pfs !== undefined) view.setBigUint64(16, data.pfs === null ? 0n : BigInt(util.toPointer(data.pfs)), true);
  // 0x18: pointer
  if (data?.psbOwner !== undefined) view.setBigUint64(24, data.psbOwner === null ? 0n : BigInt(util.toPointer(data.psbOwner)), true);
  // 0x20: pointer
  if (data?.prcView !== undefined) view.setBigUint64(32, data.prcView === null ? 0n : BigInt(util.toPointer(data.prcView)), true);
  // 0x28: pointer
  if (data?.pvid !== undefined) view.setBigUint64(40, data.pvid === null ? 0n : BigInt(util.toPointer(data.pvid)), true);
  // 0x30: pointer
  if (data?.hwndView !== undefined) view.setBigUint64(48, data.hwndView === null ? 0n : BigInt(util.toPointer(data.hwndView)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SORTCOLUMN (size: 16)
 */
export interface SORTCOLUMN {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  propkey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.SORTDIRECTION */
  direction: SORTDIRECTION;
}

export const sizeofSORTCOLUMN = 16;

export function allocSORTCOLUMN(data?: Partial<SORTCOLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofSORTCOLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.propkey !== undefined) view.setBigUint64(0, data.propkey === null ? 0n : BigInt(util.toPointer(data.propkey)), true);
  // 0x08: i32
  if (data?.direction !== undefined) view.setInt32(8, Number(data.direction), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CM_COLUMNINFO (size: 32)
 */
export interface CM_COLUMNINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwState: number;
  /** u32 */
  uWidth: number;
  /** u32 */
  uDefaultWidth: number;
  /** u32 */
  uIdealWidth: number;
  /** array */
  wszName: Deno.PointerValue | null;
}

export const sizeofCM_COLUMNINFO = 32;

export function allocCM_COLUMNINFO(data?: Partial<CM_COLUMNINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCM_COLUMNINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwState !== undefined) view.setUint32(8, Number(data.dwState), true);
  // 0x0c: u32
  if (data?.uWidth !== undefined) view.setUint32(12, Number(data.uWidth), true);
  // 0x10: u32
  if (data?.uDefaultWidth !== undefined) view.setUint32(16, Number(data.uDefaultWidth), true);
  // 0x14: u32
  if (data?.uIdealWidth !== undefined) view.setUint32(20, Number(data.uIdealWidth), true);
  // 0x18: pointer
  if (data?.wszName !== undefined) view.setBigUint64(24, data.wszName === null ? 0n : BigInt(util.toPointer(data.wszName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHELL_ITEM_RESOURCE (size: 16)
 */
export interface SHELL_ITEM_RESOURCE {
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofSHELL_ITEM_RESOURCE = 16;

export function allocSHELL_ITEM_RESOURCE(data?: Partial<SHELL_ITEM_RESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELL_ITEM_RESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidType !== undefined) view.setBigUint64(0, data.guidType === null ? 0n : BigInt(util.toPointer(data.guidType)), true);
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CATEGORY_INFO (size: 16)
 */
export interface CATEGORY_INFO {
  /** Windows.Win32.UI.Shell.CATEGORYINFO_FLAGS */
  cif: CATEGORYINFO_FLAGS;
  /** array */
  wszName: Deno.PointerValue | null;
}

export const sizeofCATEGORY_INFO = 16;

export function allocCATEGORY_INFO(data?: Partial<CATEGORY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCATEGORY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cif !== undefined) view.setInt32(0, Number(data.cif), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszName !== undefined) view.setBigUint64(8, data.wszName === null ? 0n : BigInt(util.toPointer(data.wszName)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

export type HBITMAP = Deno.PointerValue;

export type COLORREF = number;

/**
 * Windows.Win32.UI.Shell.SHDRAGIMAGE (size: 32)
 */
export interface SHDRAGIMAGE {
  /** Windows.Win32.Foundation.SIZE */
  sizeDragImage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpDragImage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crColorKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSHDRAGIMAGE = 32;

export function allocSHDRAGIMAGE(data?: Partial<SHDRAGIMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSHDRAGIMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sizeDragImage !== undefined) view.setBigUint64(0, data.sizeDragImage === null ? 0n : BigInt(util.toPointer(data.sizeDragImage)), true);
  // 0x08: pointer
  if (data?.ptOffset !== undefined) view.setBigUint64(8, data.ptOffset === null ? 0n : BigInt(util.toPointer(data.ptOffset)), true);
  // 0x10: pointer
  if (data?.hbmpDragImage !== undefined) view.setBigUint64(16, data.hbmpDragImage === null ? 0n : BigInt(util.toPointer(data.hbmpDragImage)), true);
  // 0x18: pointer
  if (data?.crColorKey !== undefined) view.setBigUint64(24, data.crColorKey === null ? 0n : BigInt(util.toPointer(data.crColorKey)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINTL (size: 8)
 */
export interface POINTL {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINTL = 8;

export function allocPOINTL(data?: Partial<POINTL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DESKBANDINFO (size: 64)
 */
export interface DESKBANDINFO {
  /** u32 */
  dwMask: number;
  /** Windows.Win32.Foundation.POINTL */
  ptMinSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptMaxSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptIntegral: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  ptActual: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszTitle: Deno.PointerValue | null;
  /** u32 */
  dwModeFlags: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBkgnd: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDESKBANDINFO = 64;

export function allocDESKBANDINFO(data?: Partial<DESKBANDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDESKBANDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMask !== undefined) view.setUint32(0, Number(data.dwMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ptMinSize !== undefined) view.setBigUint64(8, data.ptMinSize === null ? 0n : BigInt(util.toPointer(data.ptMinSize)), true);
  // 0x10: pointer
  if (data?.ptMaxSize !== undefined) view.setBigUint64(16, data.ptMaxSize === null ? 0n : BigInt(util.toPointer(data.ptMaxSize)), true);
  // 0x18: pointer
  if (data?.ptIntegral !== undefined) view.setBigUint64(24, data.ptIntegral === null ? 0n : BigInt(util.toPointer(data.ptIntegral)), true);
  // 0x20: pointer
  if (data?.ptActual !== undefined) view.setBigUint64(32, data.ptActual === null ? 0n : BigInt(util.toPointer(data.ptActual)), true);
  // 0x28: pointer
  if (data?.wszTitle !== undefined) view.setBigUint64(40, data.wszTitle === null ? 0n : BigInt(util.toPointer(data.wszTitle)), true);
  // 0x30: u32
  if (data?.dwModeFlags !== undefined) view.setUint32(48, Number(data.dwModeFlags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.crBkgnd !== undefined) view.setBigUint64(56, data.crBkgnd === null ? 0n : BigInt(util.toPointer(data.crBkgnd)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.THUMBBUTTON (size: 40)
 */
export interface THUMBBUTTON {
  /** Windows.Win32.UI.Shell.THUMBBUTTONMASK */
  dwMask: THUMBBUTTONMASK;
  /** u32 */
  iId: number;
  /** u32 */
  iBitmap: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szTip: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.THUMBBUTTONFLAGS */
  dwFlags: THUMBBUTTONFLAGS;
}

export const sizeofTHUMBBUTTON = 40;

export function allocTHUMBBUTTON(data?: Partial<THUMBBUTTON>): Uint8Array {
  const buf = new Uint8Array(sizeofTHUMBBUTTON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwMask !== undefined) view.setInt32(0, Number(data.dwMask), true);
  // 0x04: u32
  if (data?.iId !== undefined) view.setUint32(4, Number(data.iId), true);
  // 0x08: u32
  if (data?.iBitmap !== undefined) view.setUint32(8, Number(data.iBitmap), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(16, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x18: pointer
  if (data?.szTip !== undefined) view.setBigUint64(24, data.szTip === null ? 0n : BigInt(util.toPointer(data.szTip)), true);
  // 0x20: i32
  if (data?.dwFlags !== undefined) view.setInt32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BANDSITEINFO (size: 16)
 */
export interface BANDSITEINFO {
  /** u32 */
  dwMask: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwStyle: number;
}

export const sizeofBANDSITEINFO = 16;

export function allocBANDSITEINFO(data?: Partial<BANDSITEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBANDSITEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMask !== undefined) view.setUint32(0, Number(data.dwMask), true);
  // 0x04: u32
  if (data?.dwState !== undefined) view.setUint32(4, Number(data.dwState), true);
  // 0x08: u32
  if (data?.dwStyle !== undefined) view.setUint32(8, Number(data.dwStyle), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DELEGATEITEMID (size: 16)
 */
export interface DELEGATEITEMID {
  /** u16 */
  cbSize: number;
  /** u16 */
  wOuter: number;
  /** u16 */
  cbInner: number;
  /** array */
  rgb: Deno.PointerValue | null;
}

export const sizeofDELEGATEITEMID = 16;

export function allocDELEGATEITEMID(data?: Partial<DELEGATEITEMID>): Uint8Array {
  const buf = new Uint8Array(sizeofDELEGATEITEMID);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.wOuter !== undefined) view.setUint16(2, Number(data.wOuter), true);
  // 0x04: u16
  if (data?.cbInner !== undefined) view.setUint16(4, Number(data.cbInner), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.rgb !== undefined) view.setBigUint64(8, data.rgb === null ? 0n : BigInt(util.toPointer(data.rgb)), true);
  return buf;
}

export type HMENU = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.SMDATA (size: 80)
 */
export interface SMDATA {
  /** u32 */
  dwMask: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HMENU */
  hmenu: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** u32 */
  uId: number;
  /** u32 */
  uIdParent: number;
  /** u32 */
  uIdAncestor: number;
  /** Windows.Win32.System.Com.IUnknown */
  punk: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pidlFolder: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pidlItem: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellFolder */
  psf: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSMDATA = 80;

export function allocSMDATA(data?: Partial<SMDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSMDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMask !== undefined) view.setUint32(0, Number(data.dwMask), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hmenu !== undefined) view.setBigUint64(8, data.hmenu === null ? 0n : BigInt(util.toPointer(data.hmenu)), true);
  // 0x10: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(16, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x18: u32
  if (data?.uId !== undefined) view.setUint32(24, Number(data.uId), true);
  // 0x1c: u32
  if (data?.uIdParent !== undefined) view.setUint32(28, Number(data.uIdParent), true);
  // 0x20: u32
  if (data?.uIdAncestor !== undefined) view.setUint32(32, Number(data.uIdAncestor), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.punk !== undefined) view.setBigUint64(40, data.punk === null ? 0n : BigInt(util.toPointer(data.punk)), true);
  // 0x30: pointer
  if (data?.pidlFolder !== undefined) view.setBigUint64(48, data.pidlFolder === null ? 0n : BigInt(util.toPointer(data.pidlFolder)), true);
  // 0x38: pointer
  if (data?.pidlItem !== undefined) view.setBigUint64(56, data.pidlItem === null ? 0n : BigInt(util.toPointer(data.pidlItem)), true);
  // 0x40: pointer
  if (data?.psf !== undefined) view.setBigUint64(64, data.psf === null ? 0n : BigInt(util.toPointer(data.psf)), true);
  // 0x48: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(72, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SMINFO (size: 16)
 */
export interface SMINFO {
  /** u32 */
  dwMask: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  iIcon: number;
}

export const sizeofSMINFO = 16;

export function allocSMINFO(data?: Partial<SMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMask !== undefined) view.setUint32(0, Number(data.dwMask), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: i32
  if (data?.iIcon !== undefined) view.setInt32(12, Number(data.iIcon), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SMCSHCHANGENOTIFYSTRUCT (size: 24)
 */
export interface SMCSHCHANGENOTIFYSTRUCT {
  /** i32 */
  lEvent: number;
  /** ptr */
  pidl1: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pidl2: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSMCSHCHANGENOTIFYSTRUCT = 24;

export function allocSMCSHCHANGENOTIFYSTRUCT(data?: Partial<SMCSHCHANGENOTIFYSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofSMCSHCHANGENOTIFYSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lEvent !== undefined) view.setInt32(0, Number(data.lEvent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pidl1 !== undefined) view.setBigUint64(8, data.pidl1 === null ? 0n : BigInt(util.toPointer(data.pidl1)), true);
  // 0x10: pointer
  if (data?.pidl2 !== undefined) view.setBigUint64(16, data.pidl2 === null ? 0n : BigInt(util.toPointer(data.pidl2)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.KNOWNFOLDER_DEFINITION (size: 96)
 */
export interface KNOWNFOLDER_DEFINITION {
  /** Windows.Win32.UI.Shell.KF_CATEGORY */
  category: KF_CATEGORY;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null;
  /** System.Guid */
  fidParent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszRelativePath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszParsingName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszTooltip: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocalizedName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszIcon: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSecurity: string | null;
  /** u32 */
  dwAttributes: number;
  /** u32 */
  kfdFlags: number;
  /** System.Guid */
  ftidType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKNOWNFOLDER_DEFINITION = 96;

export function allocKNOWNFOLDER_DEFINITION(data?: Partial<KNOWNFOLDER_DEFINITION>): Uint8Array {
  const buf = new Uint8Array(sizeofKNOWNFOLDER_DEFINITION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.category !== undefined) view.setInt32(0, Number(data.category), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.fidParent !== undefined) view.setBigUint64(24, data.fidParent === null ? 0n : BigInt(util.toPointer(data.fidParent)), true);
  // 0x20: buffer
  if (data?.pszRelativePath !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRelativePath);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszParsingName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszParsingName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pszTooltip !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszTooltip);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pszLocalizedName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszLocalizedName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pszIcon !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszIcon);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pszSecurity !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszSecurity);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.dwAttributes !== undefined) view.setUint32(80, Number(data.dwAttributes), true);
  // 0x54: u32
  if (data?.kfdFlags !== undefined) view.setUint32(84, Number(data.kfdFlags), true);
  // 0x58: pointer
  if (data?.ftidType !== undefined) view.setBigUint64(88, data.ftidType === null ? 0n : BigInt(util.toPointer(data.ftidType)), true);
  return buf;
}

export type HACCEL = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.PREVIEWHANDLERFRAMEINFO (size: 16)
 */
export interface PREVIEWHANDLERFRAMEINFO {
  /** Windows.Win32.UI.WindowsAndMessaging.HACCEL */
  haccel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAccelEntries: number;
}

export const sizeofPREVIEWHANDLERFRAMEINFO = 16;

export function allocPREVIEWHANDLERFRAMEINFO(data?: Partial<PREVIEWHANDLERFRAMEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPREVIEWHANDLERFRAMEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.haccel !== undefined) view.setBigUint64(0, data.haccel === null ? 0n : BigInt(util.toPointer(data.haccel)), true);
  // 0x08: u32
  if (data?.cAccelEntries !== undefined) view.setUint32(8, Number(data.cAccelEntries), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BANNER_NOTIFICATION (size: 24)
 */
export interface BANNER_NOTIFICATION {
  /** Windows.Win32.UI.Shell.BANNER_NOTIFICATION_EVENT */
  event: BANNER_NOTIFICATION_EVENT;
  /** Windows.Win32.Foundation.PWSTR */
  providerIdentity: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  contentId: string | null;
}

export const sizeofBANNER_NOTIFICATION = 24;

export function allocBANNER_NOTIFICATION(data?: Partial<BANNER_NOTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBANNER_NOTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.event !== undefined) view.setInt32(0, Number(data.event), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.providerIdentity !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.providerIdentity);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.contentId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.contentId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export type HIMAGELIST = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.NSTCCUSTOMDRAW (size: 48)
 */
export interface NSTCCUSTOMDRAW {
  /** Windows.Win32.UI.Shell.IShellItem */
  psi: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uItemState: number;
  /** u32 */
  nstcis: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null;
  /** i32 */
  iImage: number;
  /** Windows.Win32.UI.Controls.HIMAGELIST */
  himl: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iLevel: number;
  /** i32 */
  iIndent: number;
}

export const sizeofNSTCCUSTOMDRAW = 48;

export function allocNSTCCUSTOMDRAW(data?: Partial<NSTCCUSTOMDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNSTCCUSTOMDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.psi !== undefined) view.setBigUint64(0, data.psi === null ? 0n : BigInt(util.toPointer(data.psi)), true);
  // 0x08: u32
  if (data?.uItemState !== undefined) view.setUint32(8, Number(data.uItemState), true);
  // 0x0c: u32
  if (data?.nstcis !== undefined) view.setUint32(12, Number(data.nstcis), true);
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.iImage !== undefined) view.setInt32(24, Number(data.iImage), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.himl !== undefined) view.setBigUint64(32, data.himl === null ? 0n : BigInt(util.toPointer(data.himl)), true);
  // 0x28: i32
  if (data?.iLevel !== undefined) view.setInt32(40, Number(data.iLevel), true);
  // 0x2c: i32
  if (data?.iIndent !== undefined) view.setInt32(44, Number(data.iIndent), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DATABLOCK_HEADER (size: 8)
 */
export interface DATABLOCK_HEADER {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSignature: number;
}

export const sizeofDATABLOCK_HEADER = 8;

export function allocDATABLOCK_HEADER(data?: Partial<DATABLOCK_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDATABLOCK_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSignature !== undefined) view.setUint32(4, Number(data.dwSignature), true);
  return buf;
}

/**
 * Windows.Win32.System.Console.COORD (size: 8)
 */
export interface COORD {
  /** i16 */
  X: number;
  /** i16 */
  Y: number;
}

export const sizeofCOORD = 8;

export function allocCOORD(data?: Partial<COORD>): Uint8Array {
  const buf = new Uint8Array(sizeofCOORD);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.X !== undefined) view.setInt16(0, Number(data.X), true);
  // 0x02: i16
  if (data?.Y !== undefined) view.setInt16(2, Number(data.Y), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NT_CONSOLE_PROPS (size: 112)
 */
export interface NT_CONSOLE_PROPS {
  /** Windows.Win32.UI.Shell.DATABLOCK_HEADER */
  dbh: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wFillAttribute: number;
  /** u16 */
  wPopupFillAttribute: number;
  /** Windows.Win32.System.Console.COORD */
  dwScreenBufferSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  dwWindowSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Console.COORD */
  dwWindowOrigin: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nFont: number;
  /** u32 */
  nInputBufferSize: number;
  /** Windows.Win32.System.Console.COORD */
  dwFontSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uFontFamily: number;
  /** u32 */
  uFontWeight: number;
  /** array */
  FaceName: Deno.PointerValue | null;
  /** u32 */
  uCursorSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bFullScreen: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bQuickEdit: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bInsertMode: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bAutoPosition: boolean;
  /** u32 */
  uHistoryBufferSize: number;
  /** u32 */
  uNumberOfHistoryBuffers: number;
  /** Windows.Win32.Foundation.BOOL */
  bHistoryNoDup: boolean;
  /** array */
  ColorTable: Deno.PointerValue | null;
}

export const sizeofNT_CONSOLE_PROPS = 112;

export function allocNT_CONSOLE_PROPS(data?: Partial<NT_CONSOLE_PROPS>): Uint8Array {
  const buf = new Uint8Array(sizeofNT_CONSOLE_PROPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dbh !== undefined) view.setBigUint64(0, data.dbh === null ? 0n : BigInt(util.toPointer(data.dbh)), true);
  // 0x08: u16
  if (data?.wFillAttribute !== undefined) view.setUint16(8, Number(data.wFillAttribute), true);
  // 0x0a: u16
  if (data?.wPopupFillAttribute !== undefined) view.setUint16(10, Number(data.wPopupFillAttribute), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.dwScreenBufferSize !== undefined) view.setBigUint64(16, data.dwScreenBufferSize === null ? 0n : BigInt(util.toPointer(data.dwScreenBufferSize)), true);
  // 0x18: pointer
  if (data?.dwWindowSize !== undefined) view.setBigUint64(24, data.dwWindowSize === null ? 0n : BigInt(util.toPointer(data.dwWindowSize)), true);
  // 0x20: pointer
  if (data?.dwWindowOrigin !== undefined) view.setBigUint64(32, data.dwWindowOrigin === null ? 0n : BigInt(util.toPointer(data.dwWindowOrigin)), true);
  // 0x28: u32
  if (data?.nFont !== undefined) view.setUint32(40, Number(data.nFont), true);
  // 0x2c: u32
  if (data?.nInputBufferSize !== undefined) view.setUint32(44, Number(data.nInputBufferSize), true);
  // 0x30: pointer
  if (data?.dwFontSize !== undefined) view.setBigUint64(48, data.dwFontSize === null ? 0n : BigInt(util.toPointer(data.dwFontSize)), true);
  // 0x38: u32
  if (data?.uFontFamily !== undefined) view.setUint32(56, Number(data.uFontFamily), true);
  // 0x3c: u32
  if (data?.uFontWeight !== undefined) view.setUint32(60, Number(data.uFontWeight), true);
  // 0x40: pointer
  if (data?.FaceName !== undefined) view.setBigUint64(64, data.FaceName === null ? 0n : BigInt(util.toPointer(data.FaceName)), true);
  // 0x48: u32
  if (data?.uCursorSize !== undefined) view.setUint32(72, Number(data.uCursorSize), true);
  // 0x4c: i32
  if (data?.bFullScreen !== undefined) view.setInt32(76, Number(data.bFullScreen), true);
  // 0x50: i32
  if (data?.bQuickEdit !== undefined) view.setInt32(80, Number(data.bQuickEdit), true);
  // 0x54: i32
  if (data?.bInsertMode !== undefined) view.setInt32(84, Number(data.bInsertMode), true);
  // 0x58: i32
  if (data?.bAutoPosition !== undefined) view.setInt32(88, Number(data.bAutoPosition), true);
  // 0x5c: u32
  if (data?.uHistoryBufferSize !== undefined) view.setUint32(92, Number(data.uHistoryBufferSize), true);
  // 0x60: u32
  if (data?.uNumberOfHistoryBuffers !== undefined) view.setUint32(96, Number(data.uNumberOfHistoryBuffers), true);
  // 0x64: i32
  if (data?.bHistoryNoDup !== undefined) view.setInt32(100, Number(data.bHistoryNoDup), true);
  // 0x68: pointer
  if (data?.ColorTable !== undefined) view.setBigUint64(104, data.ColorTable === null ? 0n : BigInt(util.toPointer(data.ColorTable)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NT_FE_CONSOLE_PROPS (size: 16)
 */
export interface NT_FE_CONSOLE_PROPS {
  /** Windows.Win32.UI.Shell.DATABLOCK_HEADER */
  dbh: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uCodePage: number;
}

export const sizeofNT_FE_CONSOLE_PROPS = 16;

export function allocNT_FE_CONSOLE_PROPS(data?: Partial<NT_FE_CONSOLE_PROPS>): Uint8Array {
  const buf = new Uint8Array(sizeofNT_FE_CONSOLE_PROPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dbh !== undefined) view.setBigUint64(0, data.dbh === null ? 0n : BigInt(util.toPointer(data.dbh)), true);
  // 0x08: u32
  if (data?.uCodePage !== undefined) view.setUint32(8, Number(data.uCodePage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.EXP_DARWIN_LINK (size: 24)
 */
export interface EXP_DARWIN_LINK {
  /** Windows.Win32.UI.Shell.DATABLOCK_HEADER */
  dbh: Uint8Array | Deno.PointerValue | null;
  /** array */
  szDarwinID: Deno.PointerValue | null;
  /** array */
  szwDarwinID: Deno.PointerValue | null;
}

export const sizeofEXP_DARWIN_LINK = 24;

export function allocEXP_DARWIN_LINK(data?: Partial<EXP_DARWIN_LINK>): Uint8Array {
  const buf = new Uint8Array(sizeofEXP_DARWIN_LINK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dbh !== undefined) view.setBigUint64(0, data.dbh === null ? 0n : BigInt(util.toPointer(data.dbh)), true);
  // 0x08: pointer
  if (data?.szDarwinID !== undefined) view.setBigUint64(8, data.szDarwinID === null ? 0n : BigInt(util.toPointer(data.szDarwinID)), true);
  // 0x10: pointer
  if (data?.szwDarwinID !== undefined) view.setBigUint64(16, data.szwDarwinID === null ? 0n : BigInt(util.toPointer(data.szwDarwinID)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.EXP_SPECIAL_FOLDER (size: 16)
 */
export interface EXP_SPECIAL_FOLDER {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSignature: number;
  /** u32 */
  idSpecialFolder: number;
  /** u32 */
  cbOffset: number;
}

export const sizeofEXP_SPECIAL_FOLDER = 16;

export function allocEXP_SPECIAL_FOLDER(data?: Partial<EXP_SPECIAL_FOLDER>): Uint8Array {
  const buf = new Uint8Array(sizeofEXP_SPECIAL_FOLDER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSignature !== undefined) view.setUint32(4, Number(data.dwSignature), true);
  // 0x08: u32
  if (data?.idSpecialFolder !== undefined) view.setUint32(8, Number(data.idSpecialFolder), true);
  // 0x0c: u32
  if (data?.cbOffset !== undefined) view.setUint32(12, Number(data.cbOffset), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.EXP_SZ_LINK (size: 24)
 */
export interface EXP_SZ_LINK {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSignature: number;
  /** array */
  szTarget: Deno.PointerValue | null;
  /** array */
  swzTarget: Deno.PointerValue | null;
}

export const sizeofEXP_SZ_LINK = 24;

export function allocEXP_SZ_LINK(data?: Partial<EXP_SZ_LINK>): Uint8Array {
  const buf = new Uint8Array(sizeofEXP_SZ_LINK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSignature !== undefined) view.setUint32(4, Number(data.dwSignature), true);
  // 0x08: pointer
  if (data?.szTarget !== undefined) view.setBigUint64(8, data.szTarget === null ? 0n : BigInt(util.toPointer(data.szTarget)), true);
  // 0x10: pointer
  if (data?.swzTarget !== undefined) view.setBigUint64(16, data.swzTarget === null ? 0n : BigInt(util.toPointer(data.swzTarget)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.EXP_PROPERTYSTORAGE (size: 16)
 */
export interface EXP_PROPERTYSTORAGE {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSignature: number;
  /** array */
  abPropertyStorage: Deno.PointerValue | null;
}

export const sizeofEXP_PROPERTYSTORAGE = 16;

export function allocEXP_PROPERTYSTORAGE(data?: Partial<EXP_PROPERTYSTORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofEXP_PROPERTYSTORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSignature !== undefined) view.setUint32(4, Number(data.dwSignature), true);
  // 0x08: pointer
  if (data?.abPropertyStorage !== undefined) view.setBigUint64(8, data.abPropertyStorage === null ? 0n : BigInt(util.toPointer(data.abPropertyStorage)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHFOLDERCUSTOMSETTINGS (size: 104)
 */
export interface SHFOLDERCUSTOMSETTINGS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwMask: number;
  /** ptr */
  pvid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszWebViewTemplate: string | null;
  /** u32 */
  cchWebViewTemplate: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszWebViewTemplateVersion: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInfoTip: string | null;
  /** u32 */
  cchInfoTip: number;
  /** ptr */
  pclsid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszIconFile: string | null;
  /** u32 */
  cchIconFile: number;
  /** i32 */
  iIconIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszLogo: string | null;
  /** u32 */
  cchLogo: number;
}

export const sizeofSHFOLDERCUSTOMSETTINGS = 104;

export function allocSHFOLDERCUSTOMSETTINGS(data?: Partial<SHFOLDERCUSTOMSETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofSHFOLDERCUSTOMSETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: pointer
  if (data?.pvid !== undefined) view.setBigUint64(8, data.pvid === null ? 0n : BigInt(util.toPointer(data.pvid)), true);
  // 0x10: buffer
  if (data?.pszWebViewTemplate !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszWebViewTemplate);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cchWebViewTemplate !== undefined) view.setUint32(24, Number(data.cchWebViewTemplate), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszWebViewTemplateVersion !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszWebViewTemplateVersion);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszInfoTip !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszInfoTip);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.cchInfoTip !== undefined) view.setUint32(48, Number(data.cchInfoTip), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pclsid !== undefined) view.setBigUint64(56, data.pclsid === null ? 0n : BigInt(util.toPointer(data.pclsid)), true);
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.pszIconFile !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszIconFile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.cchIconFile !== undefined) view.setUint32(80, Number(data.cchIconFile), true);
  // 0x54: i32
  if (data?.iIconIndex !== undefined) view.setInt32(84, Number(data.iIconIndex), true);
  // 0x58: buffer
  if (data?.pszLogo !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszLogo);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.cchLogo !== undefined) view.setUint32(96, Number(data.cchLogo), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BROWSEINFOA (size: 64)
 */
export interface BROWSEINFOA {
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pidlRoot: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  pszDisplayName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszTitle: string | null;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.UI.Shell.BFFCALLBACK */
  lpfn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iImage: number;
}

export const sizeofBROWSEINFOA = 64;

export function allocBROWSEINFOA(data?: Partial<BROWSEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofBROWSEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(0, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x08: pointer
  if (data?.pidlRoot !== undefined) view.setBigUint64(8, data.pidlRoot === null ? 0n : BigInt(util.toPointer(data.pidlRoot)), true);
  // 0x10: buffer
  if (data?.pszDisplayName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszTitle !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.ulFlags !== undefined) view.setUint32(32, Number(data.ulFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpfn !== undefined) view.setBigUint64(40, data.lpfn === null ? 0n : BigInt(util.toPointer(data.lpfn)), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x38: i32
  if (data?.iImage !== undefined) view.setInt32(56, Number(data.iImage), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BROWSEINFOW (size: 64)
 */
export interface BROWSEINFOW {
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** ptr */
  pidlRoot: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplayName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTitle: string | null;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.UI.Shell.BFFCALLBACK */
  lpfn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iImage: number;
}

export const sizeofBROWSEINFOW = 64;

export function allocBROWSEINFOW(data?: Partial<BROWSEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofBROWSEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(0, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x08: pointer
  if (data?.pidlRoot !== undefined) view.setBigUint64(8, data.pidlRoot === null ? 0n : BigInt(util.toPointer(data.pidlRoot)), true);
  // 0x10: buffer
  if (data?.pszDisplayName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.ulFlags !== undefined) view.setUint32(32, Number(data.ulFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpfn !== undefined) view.setBigUint64(40, data.lpfn === null ? 0n : BigInt(util.toPointer(data.lpfn)), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x38: i32
  if (data?.iImage !== undefined) view.setInt32(56, Number(data.iImage), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NRESARRAY (size: 16)
 */
export interface NRESARRAY {
  /** u32 */
  cItems: number;
  /** array */
  nr: Deno.PointerValue | null;
}

export const sizeofNRESARRAY = 16;

export function allocNRESARRAY(data?: Partial<NRESARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofNRESARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.nr !== undefined) view.setBigUint64(8, data.nr === null ? 0n : BigInt(util.toPointer(data.nr)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CIDA (size: 16)
 */
export interface CIDA {
  /** u32 */
  cidl: number;
  /** array */
  aoffset: Deno.PointerValue | null;
}

export const sizeofCIDA = 16;

export function allocCIDA(data?: Partial<CIDA>): Uint8Array {
  const buf = new Uint8Array(sizeofCIDA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cidl !== undefined) view.setUint32(0, Number(data.cidl), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aoffset !== undefined) view.setBigUint64(8, data.aoffset === null ? 0n : BigInt(util.toPointer(data.aoffset)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FILEDESCRIPTORA (size: 80)
 */
export interface FILEDESCRIPTORA {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  pointl: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFileAttributes: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftCreationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastWriteTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nFileSizeHigh: number;
  /** u32 */
  nFileSizeLow: number;
  /** array */
  cFileName: Deno.PointerValue | null;
}

export const sizeofFILEDESCRIPTORA = 80;

export function allocFILEDESCRIPTORA(data?: Partial<FILEDESCRIPTORA>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEDESCRIPTORA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: pointer
  if (data?.sizel !== undefined) view.setBigUint64(16, data.sizel === null ? 0n : BigInt(util.toPointer(data.sizel)), true);
  // 0x18: pointer
  if (data?.pointl !== undefined) view.setBigUint64(24, data.pointl === null ? 0n : BigInt(util.toPointer(data.pointl)), true);
  // 0x20: u32
  if (data?.dwFileAttributes !== undefined) view.setUint32(32, Number(data.dwFileAttributes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ftCreationTime !== undefined) view.setBigUint64(40, data.ftCreationTime === null ? 0n : BigInt(util.toPointer(data.ftCreationTime)), true);
  // 0x30: pointer
  if (data?.ftLastAccessTime !== undefined) view.setBigUint64(48, data.ftLastAccessTime === null ? 0n : BigInt(util.toPointer(data.ftLastAccessTime)), true);
  // 0x38: pointer
  if (data?.ftLastWriteTime !== undefined) view.setBigUint64(56, data.ftLastWriteTime === null ? 0n : BigInt(util.toPointer(data.ftLastWriteTime)), true);
  // 0x40: u32
  if (data?.nFileSizeHigh !== undefined) view.setUint32(64, Number(data.nFileSizeHigh), true);
  // 0x44: u32
  if (data?.nFileSizeLow !== undefined) view.setUint32(68, Number(data.nFileSizeLow), true);
  // 0x48: pointer
  if (data?.cFileName !== undefined) view.setBigUint64(72, data.cFileName === null ? 0n : BigInt(util.toPointer(data.cFileName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FILEDESCRIPTORW (size: 80)
 */
export interface FILEDESCRIPTORW {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTL */
  pointl: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFileAttributes: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftCreationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastWriteTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  nFileSizeHigh: number;
  /** u32 */
  nFileSizeLow: number;
  /** array */
  cFileName: Deno.PointerValue | null;
}

export const sizeofFILEDESCRIPTORW = 80;

export function allocFILEDESCRIPTORW(data?: Partial<FILEDESCRIPTORW>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEDESCRIPTORW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: pointer
  if (data?.sizel !== undefined) view.setBigUint64(16, data.sizel === null ? 0n : BigInt(util.toPointer(data.sizel)), true);
  // 0x18: pointer
  if (data?.pointl !== undefined) view.setBigUint64(24, data.pointl === null ? 0n : BigInt(util.toPointer(data.pointl)), true);
  // 0x20: u32
  if (data?.dwFileAttributes !== undefined) view.setUint32(32, Number(data.dwFileAttributes), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ftCreationTime !== undefined) view.setBigUint64(40, data.ftCreationTime === null ? 0n : BigInt(util.toPointer(data.ftCreationTime)), true);
  // 0x30: pointer
  if (data?.ftLastAccessTime !== undefined) view.setBigUint64(48, data.ftLastAccessTime === null ? 0n : BigInt(util.toPointer(data.ftLastAccessTime)), true);
  // 0x38: pointer
  if (data?.ftLastWriteTime !== undefined) view.setBigUint64(56, data.ftLastWriteTime === null ? 0n : BigInt(util.toPointer(data.ftLastWriteTime)), true);
  // 0x40: u32
  if (data?.nFileSizeHigh !== undefined) view.setUint32(64, Number(data.nFileSizeHigh), true);
  // 0x44: u32
  if (data?.nFileSizeLow !== undefined) view.setUint32(68, Number(data.nFileSizeLow), true);
  // 0x48: pointer
  if (data?.cFileName !== undefined) view.setBigUint64(72, data.cFileName === null ? 0n : BigInt(util.toPointer(data.cFileName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FILEGROUPDESCRIPTORA (size: 16)
 */
export interface FILEGROUPDESCRIPTORA {
  /** u32 */
  cItems: number;
  /** array */
  fgd: Deno.PointerValue | null;
}

export const sizeofFILEGROUPDESCRIPTORA = 16;

export function allocFILEGROUPDESCRIPTORA(data?: Partial<FILEGROUPDESCRIPTORA>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEGROUPDESCRIPTORA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.fgd !== undefined) view.setBigUint64(8, data.fgd === null ? 0n : BigInt(util.toPointer(data.fgd)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FILEGROUPDESCRIPTORW (size: 16)
 */
export interface FILEGROUPDESCRIPTORW {
  /** u32 */
  cItems: number;
  /** array */
  fgd: Deno.PointerValue | null;
}

export const sizeofFILEGROUPDESCRIPTORW = 16;

export function allocFILEGROUPDESCRIPTORW(data?: Partial<FILEGROUPDESCRIPTORW>): Uint8Array {
  const buf = new Uint8Array(sizeofFILEGROUPDESCRIPTORW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.fgd !== undefined) view.setBigUint64(8, data.fgd === null ? 0n : BigInt(util.toPointer(data.fgd)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DROPFILES (size: 24)
 */
export interface DROPFILES {
  /** u32 */
  pFiles: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fNC: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fWide: boolean;
}

export const sizeofDROPFILES = 24;

export function allocDROPFILES(data?: Partial<DROPFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofDROPFILES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.pFiles !== undefined) view.setUint32(0, Number(data.pFiles), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(util.toPointer(data.pt)), true);
  // 0x10: i32
  if (data?.fNC !== undefined) view.setInt32(16, Number(data.fNC), true);
  // 0x14: i32
  if (data?.fWide !== undefined) view.setInt32(20, Number(data.fWide), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FILE_ATTRIBUTES_ARRAY (size: 24)
 */
export interface FILE_ATTRIBUTES_ARRAY {
  /** u32 */
  cItems: number;
  /** u32 */
  dwSumFileAttributes: number;
  /** u32 */
  dwProductFileAttributes: number;
  /** array */
  rgdwFileAttributes: Deno.PointerValue | null;
}

export const sizeofFILE_ATTRIBUTES_ARRAY = 24;

export function allocFILE_ATTRIBUTES_ARRAY(data?: Partial<FILE_ATTRIBUTES_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_ATTRIBUTES_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: u32
  if (data?.dwSumFileAttributes !== undefined) view.setUint32(4, Number(data.dwSumFileAttributes), true);
  // 0x08: u32
  if (data?.dwProductFileAttributes !== undefined) view.setUint32(8, Number(data.dwProductFileAttributes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgdwFileAttributes !== undefined) view.setBigUint64(16, data.rgdwFileAttributes === null ? 0n : BigInt(util.toPointer(data.rgdwFileAttributes)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DROPDESCRIPTION (size: 24)
 */
export interface DROPDESCRIPTION {
  /** Windows.Win32.UI.Shell.DROPIMAGETYPE */
  type: DROPIMAGETYPE;
  /** array */
  szMessage: Deno.PointerValue | null;
  /** array */
  szInsert: Deno.PointerValue | null;
}

export const sizeofDROPDESCRIPTION = 24;

export function allocDROPDESCRIPTION(data?: Partial<DROPDESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDROPDESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szMessage !== undefined) view.setBigUint64(8, data.szMessage === null ? 0n : BigInt(util.toPointer(data.szMessage)), true);
  // 0x10: pointer
  if (data?.szInsert !== undefined) view.setBigUint64(16, data.szInsert === null ? 0n : BigInt(util.toPointer(data.szInsert)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHChangeNotifyEntry (size: 16)
 */
export interface SHChangeNotifyEntry {
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fRecursive: boolean;
}

export const sizeofSHChangeNotifyEntry = 16;

export function allocSHChangeNotifyEntry(data?: Partial<SHChangeNotifyEntry>): Uint8Array {
  const buf = new Uint8Array(sizeofSHChangeNotifyEntry);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pidl !== undefined) view.setBigUint64(0, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  // 0x08: i32
  if (data?.fRecursive !== undefined) view.setInt32(8, Number(data.fRecursive), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHARDAPPIDINFO (size: 16)
 */
export interface SHARDAPPIDINFO {
  /** Windows.Win32.UI.Shell.IShellItem */
  psi: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszAppID: string | null;
}

export const sizeofSHARDAPPIDINFO = 16;

export function allocSHARDAPPIDINFO(data?: Partial<SHARDAPPIDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSHARDAPPIDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.psi !== undefined) view.setBigUint64(0, data.psi === null ? 0n : BigInt(util.toPointer(data.psi)), true);
  // 0x08: buffer
  if (data?.pszAppID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszAppID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHARDAPPIDINFOIDLIST (size: 16)
 */
export interface SHARDAPPIDINFOIDLIST {
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszAppID: string | null;
}

export const sizeofSHARDAPPIDINFOIDLIST = 16;

export function allocSHARDAPPIDINFOIDLIST(data?: Partial<SHARDAPPIDINFOIDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSHARDAPPIDINFOIDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pidl !== undefined) view.setBigUint64(0, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  // 0x08: buffer
  if (data?.pszAppID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszAppID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHARDAPPIDINFOLINK (size: 16)
 */
export interface SHARDAPPIDINFOLINK {
  /** Windows.Win32.UI.Shell.IShellLinkA */
  psl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszAppID: string | null;
}

export const sizeofSHARDAPPIDINFOLINK = 16;

export function allocSHARDAPPIDINFOLINK(data?: Partial<SHARDAPPIDINFOLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofSHARDAPPIDINFOLINK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.psl !== undefined) view.setBigUint64(0, data.psl === null ? 0n : BigInt(util.toPointer(data.psl)), true);
  // 0x08: buffer
  if (data?.pszAppID !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszAppID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHChangeDWORDAsIDList (size: 16)
 */
export interface SHChangeDWORDAsIDList {
  /** u16 */
  cb: number;
  /** u32 */
  dwItem1: number;
  /** u32 */
  dwItem2: number;
  /** u16 */
  cbZero: number;
}

export const sizeofSHChangeDWORDAsIDList = 16;

export function allocSHChangeDWORDAsIDList(data?: Partial<SHChangeDWORDAsIDList>): Uint8Array {
  const buf = new Uint8Array(sizeofSHChangeDWORDAsIDList);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cb !== undefined) view.setUint16(0, Number(data.cb), true);
  // 0x02: u32
  if (data?.dwItem1 !== undefined) view.setUint32(2, Number(data.dwItem1), true);
  // 0x06: u32
  if (data?.dwItem2 !== undefined) view.setUint32(6, Number(data.dwItem2), true);
  // 0x0a: u16
  if (data?.cbZero !== undefined) view.setUint16(10, Number(data.cbZero), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHChangeUpdateImageIDList (size: 40)
 */
export interface SHChangeUpdateImageIDList {
  /** u16 */
  cb: number;
  /** i32 */
  iIconIndex: number;
  /** i32 */
  iCurIndex: number;
  /** u32 */
  uFlags: number;
  /** u32 */
  dwProcessID: number;
  /** array */
  szName: Deno.PointerValue | null;
  /** u16 */
  cbZero: number;
}

export const sizeofSHChangeUpdateImageIDList = 40;

export function allocSHChangeUpdateImageIDList(data?: Partial<SHChangeUpdateImageIDList>): Uint8Array {
  const buf = new Uint8Array(sizeofSHChangeUpdateImageIDList);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cb !== undefined) view.setUint16(0, Number(data.cb), true);
  // 0x02: i32
  if (data?.iIconIndex !== undefined) view.setInt32(2, Number(data.iIconIndex), true);
  // 0x06: i32
  if (data?.iCurIndex !== undefined) view.setInt32(6, Number(data.iCurIndex), true);
  // 0x0a: u32
  if (data?.uFlags !== undefined) view.setUint32(10, Number(data.uFlags), true);
  // 0x0e: u32
  if (data?.dwProcessID !== undefined) view.setUint32(14, Number(data.dwProcessID), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.szName !== undefined) view.setBigUint64(24, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x20: u16
  if (data?.cbZero !== undefined) view.setUint16(32, Number(data.cbZero), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHDESCRIPTIONID (size: 16)
 */
export interface SHDESCRIPTIONID {
  /** Windows.Win32.UI.Shell.SHDID_ID */
  dwDescriptionId: SHDID_ID;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSHDESCRIPTIONID = 16;

export function allocSHDESCRIPTIONID(data?: Partial<SHDESCRIPTIONID>): Uint8Array {
  const buf = new Uint8Array(sizeofSHDESCRIPTIONID);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwDescriptionId !== undefined) view.setInt32(0, Number(data.dwDescriptionId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.AUTO_SCROLL_DATA (size: 32)
 */
export interface AUTO_SCROLL_DATA {
  /** i32 */
  iNextSample: number;
  /** u32 */
  dwLastScroll: number;
  /** Windows.Win32.Foundation.BOOL */
  bFull: boolean;
  /** array */
  pts: Deno.PointerValue | null;
  /** array */
  dwTimes: Deno.PointerValue | null;
}

export const sizeofAUTO_SCROLL_DATA = 32;

export function allocAUTO_SCROLL_DATA(data?: Partial<AUTO_SCROLL_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTO_SCROLL_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iNextSample !== undefined) view.setInt32(0, Number(data.iNextSample), true);
  // 0x04: u32
  if (data?.dwLastScroll !== undefined) view.setUint32(4, Number(data.dwLastScroll), true);
  // 0x08: i32
  if (data?.bFull !== undefined) view.setInt32(8, Number(data.bFull), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pts !== undefined) view.setBigUint64(16, data.pts === null ? 0n : BigInt(util.toPointer(data.pts)), true);
  // 0x18: pointer
  if (data?.dwTimes !== undefined) view.setBigUint64(24, data.dwTimes === null ? 0n : BigInt(util.toPointer(data.dwTimes)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CABINETSTATE (size: 16)
 */
export interface CABINETSTATE {
  /** u16 */
  cLength: number;
  /** u16 */
  nVersion: number;
  /** i32 */
  _bitfield: number;
  /** u32 */
  fMenuEnumFilter: number;
}

export const sizeofCABINETSTATE = 16;

export function allocCABINETSTATE(data?: Partial<CABINETSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCABINETSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cLength !== undefined) view.setUint16(0, Number(data.cLength), true);
  // 0x02: u16
  if (data?.nVersion !== undefined) view.setUint16(2, Number(data.nVersion), true);
  // 0x04: i32
  if (data?._bitfield !== undefined) view.setInt32(4, Number(data._bitfield), true);
  // 0x08: u32
  if (data?.fMenuEnumFilter !== undefined) view.setUint32(8, Number(data.fMenuEnumFilter), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.OPENASINFO (size: 24)
 */
export interface OPENASINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pcszFile: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pcszClass: string | null;
  /** Windows.Win32.UI.Shell.OPEN_AS_INFO_FLAGS */
  oaifInFlags: OPEN_AS_INFO_FLAGS;
}

export const sizeofOPENASINFO = 24;

export function allocOPENASINFO(data?: Partial<OPENASINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENASINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pcszFile !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pcszFile);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pcszClass !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcszClass);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.oaifInFlags !== undefined) view.setUint32(16, Number(data.oaifInFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.QCMINFO_IDMAP_PLACEMENT (size: 8)
 */
export interface QCMINFO_IDMAP_PLACEMENT {
  /** u32 */
  id: number;
  /** u32 */
  fFlags: number;
}

export const sizeofQCMINFO_IDMAP_PLACEMENT = 8;

export function allocQCMINFO_IDMAP_PLACEMENT(data?: Partial<QCMINFO_IDMAP_PLACEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofQCMINFO_IDMAP_PLACEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.id !== undefined) view.setUint32(0, Number(data.id), true);
  // 0x04: u32
  if (data?.fFlags !== undefined) view.setUint32(4, Number(data.fFlags), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.QCMINFO_IDMAP (size: 16)
 */
export interface QCMINFO_IDMAP {
  /** u32 */
  nMaxIds: number;
  /** array */
  pIdList: Deno.PointerValue | null;
}

export const sizeofQCMINFO_IDMAP = 16;

export function allocQCMINFO_IDMAP(data?: Partial<QCMINFO_IDMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofQCMINFO_IDMAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nMaxIds !== undefined) view.setUint32(0, Number(data.nMaxIds), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIdList !== undefined) view.setBigUint64(8, data.pIdList === null ? 0n : BigInt(util.toPointer(data.pIdList)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.QCMINFO (size: 32)
 */
export interface QCMINFO {
  /** Windows.Win32.UI.WindowsAndMessaging.HMENU */
  hmenu: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  indexMenu: number;
  /** u32 */
  idCmdFirst: number;
  /** u32 */
  idCmdLast: number;
  /** ptr */
  pIdMap: Deno.PointerValue | Uint8Array | null;
}

export const sizeofQCMINFO = 32;

export function allocQCMINFO(data?: Partial<QCMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofQCMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hmenu !== undefined) view.setBigUint64(0, data.hmenu === null ? 0n : BigInt(util.toPointer(data.hmenu)), true);
  // 0x08: u32
  if (data?.indexMenu !== undefined) view.setUint32(8, Number(data.indexMenu), true);
  // 0x0c: u32
  if (data?.idCmdFirst !== undefined) view.setUint32(12, Number(data.idCmdFirst), true);
  // 0x10: u32
  if (data?.idCmdLast !== undefined) view.setUint32(16, Number(data.idCmdLast), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pIdMap !== undefined) view.setBigUint64(24, data.pIdMap === null ? 0n : BigInt(util.toPointer(data.pIdMap)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DETAILSINFO (size: 32)
 */
export interface DETAILSINFO {
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  fmt: number;
  /** i32 */
  cxChar: number;
  /** Windows.Win32.UI.Shell.Common.STRRET */
  str: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iImage: number;
}

export const sizeofDETAILSINFO = 32;

export function allocDETAILSINFO(data?: Partial<DETAILSINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDETAILSINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pidl !== undefined) view.setBigUint64(0, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  // 0x08: i32
  if (data?.fmt !== undefined) view.setInt32(8, Number(data.fmt), true);
  // 0x0c: i32
  if (data?.cxChar !== undefined) view.setInt32(12, Number(data.cxChar), true);
  // 0x10: pointer
  if (data?.str !== undefined) view.setBigUint64(16, data.str === null ? 0n : BigInt(util.toPointer(data.str)), true);
  // 0x18: i32
  if (data?.iImage !== undefined) view.setInt32(24, Number(data.iImage), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SFVM_PROPPAGE_DATA (size: 24)
 */
export interface SFVM_PROPPAGE_DATA {
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.UI.Controls.LPFNSVADDPROPSHEETPAGE */
  pfn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSFVM_PROPPAGE_DATA = 24;

export function allocSFVM_PROPPAGE_DATA(data?: Partial<SFVM_PROPPAGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSFVM_PROPPAGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReserved !== undefined) view.setUint32(0, Number(data.dwReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfn !== undefined) view.setBigUint64(8, data.pfn === null ? 0n : BigInt(util.toPointer(data.pfn)), true);
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SFVM_HELPTOPIC_DATA (size: 16)
 */
export interface SFVM_HELPTOPIC_DATA {
  /** array */
  wszHelpFile: Deno.PointerValue | null;
  /** array */
  wszHelpTopic: Deno.PointerValue | null;
}

export const sizeofSFVM_HELPTOPIC_DATA = 16;

export function allocSFVM_HELPTOPIC_DATA(data?: Partial<SFVM_HELPTOPIC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSFVM_HELPTOPIC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszHelpFile !== undefined) view.setBigUint64(0, data.wszHelpFile === null ? 0n : BigInt(util.toPointer(data.wszHelpFile)), true);
  // 0x08: pointer
  if (data?.wszHelpTopic !== undefined) view.setBigUint64(8, data.wszHelpTopic === null ? 0n : BigInt(util.toPointer(data.wszHelpTopic)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.ITEMSPACING (size: 16)
 */
export interface ITEMSPACING {
  /** i32 */
  cxSmall: number;
  /** i32 */
  cySmall: number;
  /** i32 */
  cxLarge: number;
  /** i32 */
  cyLarge: number;
}

export const sizeofITEMSPACING = 16;

export function allocITEMSPACING(data?: Partial<ITEMSPACING>): Uint8Array {
  const buf = new Uint8Array(sizeofITEMSPACING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cxSmall !== undefined) view.setInt32(0, Number(data.cxSmall), true);
  // 0x04: i32
  if (data?.cySmall !== undefined) view.setInt32(4, Number(data.cySmall), true);
  // 0x08: i32
  if (data?.cxLarge !== undefined) view.setInt32(8, Number(data.cxLarge), true);
  // 0x0c: i32
  if (data?.cyLarge !== undefined) view.setInt32(12, Number(data.cyLarge), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SFV_CREATE (size: 32)
 */
export interface SFV_CREATE {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Shell.IShellFolder */
  pshf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellView */
  psvOuter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellFolderViewCB */
  psfvcb: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSFV_CREATE = 32;

export function allocSFV_CREATE(data?: Partial<SFV_CREATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSFV_CREATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pshf !== undefined) view.setBigUint64(8, data.pshf === null ? 0n : BigInt(util.toPointer(data.pshf)), true);
  // 0x10: pointer
  if (data?.psvOuter !== undefined) view.setBigUint64(16, data.psvOuter === null ? 0n : BigInt(util.toPointer(data.psvOuter)), true);
  // 0x18: pointer
  if (data?.psfvcb !== undefined) view.setBigUint64(24, data.psfvcb === null ? 0n : BigInt(util.toPointer(data.psfvcb)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DEFCONTEXTMENU (size: 72)
 */
export interface DEFCONTEXTMENU {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IContextMenuCB */
  pcmcb: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pidlFolder: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellFolder */
  psf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cidl: number;
  /** ptr */
  apidl: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.IUnknown */
  punkAssociationInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cKeys: number;
  /** ptr */
  aKeys: Deno.PointerValue | Uint8Array | null;
}

export const sizeofDEFCONTEXTMENU = 72;

export function allocDEFCONTEXTMENU(data?: Partial<DEFCONTEXTMENU>): Uint8Array {
  const buf = new Uint8Array(sizeofDEFCONTEXTMENU);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x08: pointer
  if (data?.pcmcb !== undefined) view.setBigUint64(8, data.pcmcb === null ? 0n : BigInt(util.toPointer(data.pcmcb)), true);
  // 0x10: pointer
  if (data?.pidlFolder !== undefined) view.setBigUint64(16, data.pidlFolder === null ? 0n : BigInt(util.toPointer(data.pidlFolder)), true);
  // 0x18: pointer
  if (data?.psf !== undefined) view.setBigUint64(24, data.psf === null ? 0n : BigInt(util.toPointer(data.psf)), true);
  // 0x20: u32
  if (data?.cidl !== undefined) view.setUint32(32, Number(data.cidl), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.apidl !== undefined) view.setBigUint64(40, data.apidl === null ? 0n : BigInt(util.toPointer(data.apidl)), true);
  // 0x30: pointer
  if (data?.punkAssociationInfo !== undefined) view.setBigUint64(48, data.punkAssociationInfo === null ? 0n : BigInt(util.toPointer(data.punkAssociationInfo)), true);
  // 0x38: u32
  if (data?.cKeys !== undefined) view.setUint32(56, Number(data.cKeys), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.aKeys !== undefined) view.setBigUint64(64, data.aKeys === null ? 0n : BigInt(util.toPointer(data.aKeys)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DFMICS (size: 40)
 */
export interface DFMICS {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  idCmdFirst: number;
  /** u32 */
  idDefMax: number;
  /** ptr */
  pici: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.IUnknown */
  punkSite: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDFMICS = 40;

export function allocDFMICS(data?: Partial<DFMICS>): Uint8Array {
  const buf = new Uint8Array(sizeofDFMICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x10: u32
  if (data?.idCmdFirst !== undefined) view.setUint32(16, Number(data.idCmdFirst), true);
  // 0x14: u32
  if (data?.idDefMax !== undefined) view.setUint32(20, Number(data.idDefMax), true);
  // 0x18: pointer
  if (data?.pici !== undefined) view.setBigUint64(24, data.pici === null ? 0n : BigInt(util.toPointer(data.pici)), true);
  // 0x20: pointer
  if (data?.punkSite !== undefined) view.setBigUint64(32, data.punkSite === null ? 0n : BigInt(util.toPointer(data.punkSite)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CSFV (size: 56)
 */
export interface CSFV {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Shell.IShellFolder */
  pshf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellView */
  psvOuter: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  lEvents: number;
  /** Windows.Win32.UI.Shell.LPFNVIEWCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.FOLDERVIEWMODE */
  fvm: FOLDERVIEWMODE;
}

export const sizeofCSFV = 56;

export function allocCSFV(data?: Partial<CSFV>): Uint8Array {
  const buf = new Uint8Array(sizeofCSFV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pshf !== undefined) view.setBigUint64(8, data.pshf === null ? 0n : BigInt(util.toPointer(data.pshf)), true);
  // 0x10: pointer
  if (data?.psvOuter !== undefined) view.setBigUint64(16, data.psvOuter === null ? 0n : BigInt(util.toPointer(data.psvOuter)), true);
  // 0x18: pointer
  if (data?.pidl !== undefined) view.setBigUint64(24, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  // 0x20: i32
  if (data?.lEvents !== undefined) view.setInt32(32, Number(data.lEvents), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(40, data.pfnCallback === null ? 0n : BigInt(util.toPointer(data.pfnCallback)), true);
  // 0x30: i32
  if (data?.fvm !== undefined) view.setInt32(48, Number(data.fvm), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHELLSTATEA (size: 32)
 */
export interface SHELLSTATEA {
  /** i32 */
  _bitfield1: number;
  /** u32 */
  dwWin95Unused: number;
  /** u32 */
  uWin95Unused: number;
  /** i32 */
  lParamSort: number;
  /** i32 */
  iSortDirection: number;
  /** u32 */
  version: number;
  /** u32 */
  uNotUsed: number;
  /** i32 */
  _bitfield2: number;
}

export const sizeofSHELLSTATEA = 32;

export function allocSHELLSTATEA(data?: Partial<SHELLSTATEA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELLSTATEA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield1 !== undefined) view.setInt32(0, Number(data._bitfield1), true);
  // 0x04: u32
  if (data?.dwWin95Unused !== undefined) view.setUint32(4, Number(data.dwWin95Unused), true);
  // 0x08: u32
  if (data?.uWin95Unused !== undefined) view.setUint32(8, Number(data.uWin95Unused), true);
  // 0x0c: i32
  if (data?.lParamSort !== undefined) view.setInt32(12, Number(data.lParamSort), true);
  // 0x10: i32
  if (data?.iSortDirection !== undefined) view.setInt32(16, Number(data.iSortDirection), true);
  // 0x14: u32
  if (data?.version !== undefined) view.setUint32(20, Number(data.version), true);
  // 0x18: u32
  if (data?.uNotUsed !== undefined) view.setUint32(24, Number(data.uNotUsed), true);
  // 0x1c: i32
  if (data?._bitfield2 !== undefined) view.setInt32(28, Number(data._bitfield2), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHELLSTATEW (size: 32)
 */
export interface SHELLSTATEW {
  /** i32 */
  _bitfield1: number;
  /** u32 */
  dwWin95Unused: number;
  /** u32 */
  uWin95Unused: number;
  /** i32 */
  lParamSort: number;
  /** i32 */
  iSortDirection: number;
  /** u32 */
  version: number;
  /** u32 */
  uNotUsed: number;
  /** i32 */
  _bitfield2: number;
}

export const sizeofSHELLSTATEW = 32;

export function allocSHELLSTATEW(data?: Partial<SHELLSTATEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELLSTATEW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield1 !== undefined) view.setInt32(0, Number(data._bitfield1), true);
  // 0x04: u32
  if (data?.dwWin95Unused !== undefined) view.setUint32(4, Number(data.dwWin95Unused), true);
  // 0x08: u32
  if (data?.uWin95Unused !== undefined) view.setUint32(8, Number(data.uWin95Unused), true);
  // 0x0c: i32
  if (data?.lParamSort !== undefined) view.setInt32(12, Number(data.lParamSort), true);
  // 0x10: i32
  if (data?.iSortDirection !== undefined) view.setInt32(16, Number(data.iSortDirection), true);
  // 0x14: u32
  if (data?.version !== undefined) view.setUint32(20, Number(data.version), true);
  // 0x18: u32
  if (data?.uNotUsed !== undefined) view.setUint32(24, Number(data.uNotUsed), true);
  // 0x1c: i32
  if (data?._bitfield2 !== undefined) view.setInt32(28, Number(data._bitfield2), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHELLFLAGSTATE (size: 8)
 */
export interface SHELLFLAGSTATE {
  /** i32 */
  _bitfield: number;
}

export const sizeofSHELLFLAGSTATE = 8;

export function allocSHELLFLAGSTATE(data?: Partial<SHELLFLAGSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSHELLFLAGSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BANDINFOSFB (size: 64)
 */
export interface BANDINFOSFB {
  /** u32 */
  dwMask: number;
  /** u32 */
  dwStateMask: number;
  /** u32 */
  dwState: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBkgnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBtnLt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBtnDk: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wViewMode: number;
  /** u16 */
  wAlign: number;
  /** Windows.Win32.UI.Shell.IShellFolder */
  psf: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBANDINFOSFB = 64;

export function allocBANDINFOSFB(data?: Partial<BANDINFOSFB>): Uint8Array {
  const buf = new Uint8Array(sizeofBANDINFOSFB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMask !== undefined) view.setUint32(0, Number(data.dwMask), true);
  // 0x04: u32
  if (data?.dwStateMask !== undefined) view.setUint32(4, Number(data.dwStateMask), true);
  // 0x08: u32
  if (data?.dwState !== undefined) view.setUint32(8, Number(data.dwState), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.crBkgnd !== undefined) view.setBigUint64(16, data.crBkgnd === null ? 0n : BigInt(util.toPointer(data.crBkgnd)), true);
  // 0x18: pointer
  if (data?.crBtnLt !== undefined) view.setBigUint64(24, data.crBtnLt === null ? 0n : BigInt(util.toPointer(data.crBtnLt)), true);
  // 0x20: pointer
  if (data?.crBtnDk !== undefined) view.setBigUint64(32, data.crBtnDk === null ? 0n : BigInt(util.toPointer(data.crBtnDk)), true);
  // 0x28: u16
  if (data?.wViewMode !== undefined) view.setUint16(40, Number(data.wViewMode), true);
  // 0x2a: u16
  if (data?.wAlign !== undefined) view.setUint16(42, Number(data.wAlign), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.psf !== undefined) view.setBigUint64(48, data.psf === null ? 0n : BigInt(util.toPointer(data.psf)), true);
  // 0x38: pointer
  if (data?.pidl !== undefined) view.setBigUint64(56, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHCOLUMNINFO (size: 40)
 */
export interface SHCOLUMNINFO {
  /** Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY */
  scid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.VARENUM */
  vt: VARENUM;
  /** u32 */
  fmt: number;
  /** u32 */
  cChars: number;
  /** u32 */
  csFlags: number;
  /** array */
  wszTitle: Deno.PointerValue | null;
  /** array */
  wszDescription: Deno.PointerValue | null;
}

export const sizeofSHCOLUMNINFO = 40;

export function allocSHCOLUMNINFO(data?: Partial<SHCOLUMNINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSHCOLUMNINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.scid !== undefined) view.setBigUint64(0, data.scid === null ? 0n : BigInt(util.toPointer(data.scid)), true);
  // 0x08: u16
  if (data?.vt !== undefined) view.setUint16(8, Number(data.vt), true);
  // 0x0a: u32
  if (data?.fmt !== undefined) view.setUint32(10, Number(data.fmt), true);
  // 0x0e: u32
  if (data?.cChars !== undefined) view.setUint32(14, Number(data.cChars), true);
  // 0x12: u32
  if (data?.csFlags !== undefined) view.setUint32(18, Number(data.csFlags), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.wszTitle !== undefined) view.setBigUint64(24, data.wszTitle === null ? 0n : BigInt(util.toPointer(data.wszTitle)), true);
  // 0x20: pointer
  if (data?.wszDescription !== undefined) view.setBigUint64(32, data.wszDescription === null ? 0n : BigInt(util.toPointer(data.wszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHCOLUMNINIT (size: 16)
 */
export interface SHCOLUMNINIT {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved: number;
  /** array */
  wszFolder: Deno.PointerValue | null;
}

export const sizeofSHCOLUMNINIT = 16;

export function allocSHCOLUMNINIT(data?: Partial<SHCOLUMNINIT>): Uint8Array {
  const buf = new Uint8Array(sizeofSHCOLUMNINIT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.wszFolder !== undefined) view.setBigUint64(8, data.wszFolder === null ? 0n : BigInt(util.toPointer(data.wszFolder)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHCOLUMNDATA (size: 32)
 */
export interface SHCOLUMNDATA {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFileAttributes: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszExt: string | null;
  /** array */
  wszFile: Deno.PointerValue | null;
}

export const sizeofSHCOLUMNDATA = 32;

export function allocSHCOLUMNDATA(data?: Partial<SHCOLUMNDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSHCOLUMNDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwFileAttributes !== undefined) view.setUint32(4, Number(data.dwFileAttributes), true);
  // 0x08: u32
  if (data?.dwReserved !== undefined) view.setUint32(8, Number(data.dwReserved), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszExt !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszExt);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.wszFile !== undefined) view.setBigUint64(24, data.wszFile === null ? 0n : BigInt(util.toPointer(data.wszFile)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SHChangeProductKeyAsIDList (size: 24)
 */
export interface SHChangeProductKeyAsIDList {
  /** u16 */
  cb: number;
  /** array */
  wszProductKey: Deno.PointerValue | null;
  /** u16 */
  cbZero: number;
}

export const sizeofSHChangeProductKeyAsIDList = 24;

export function allocSHChangeProductKeyAsIDList(data?: Partial<SHChangeProductKeyAsIDList>): Uint8Array {
  const buf = new Uint8Array(sizeofSHChangeProductKeyAsIDList);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cb !== undefined) view.setUint16(0, Number(data.cb), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wszProductKey !== undefined) view.setBigUint64(8, data.wszProductKey === null ? 0n : BigInt(util.toPointer(data.wszProductKey)), true);
  // 0x10: u16
  if (data?.cbZero !== undefined) view.setUint16(16, Number(data.cbZero), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.UI.Shell.TBINFO (size: 8)
 */
export interface TBINFO {
  /** u32 */
  cbuttons: number;
  /** u32 */
  uFlags: number;
}

export const sizeofTBINFO = 8;

export function allocTBINFO(data?: Partial<TBINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTBINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbuttons !== undefined) view.setUint32(0, Number(data.cbuttons), true);
  // 0x04: u32
  if (data?.uFlags !== undefined) view.setUint32(4, Number(data.uFlags), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SFV_SETITEMPOS (size: 16)
 */
export interface SFV_SETITEMPOS {
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSFV_SETITEMPOS = 16;

export function allocSFV_SETITEMPOS(data?: Partial<SFV_SETITEMPOS>): Uint8Array {
  const buf = new Uint8Array(sizeofSFV_SETITEMPOS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pidl !== undefined) view.setBigUint64(0, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(util.toPointer(data.pt)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.AASHELLMENUFILENAME (size: 24)
 */
export interface AASHELLMENUFILENAME {
  /** i16 */
  cbTotal: number;
  /** array */
  rgbReserved: Deno.PointerValue | null;
  /** array */
  szFileName: Deno.PointerValue | null;
}

export const sizeofAASHELLMENUFILENAME = 24;

export function allocAASHELLMENUFILENAME(data?: Partial<AASHELLMENUFILENAME>): Uint8Array {
  const buf = new Uint8Array(sizeofAASHELLMENUFILENAME);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.cbTotal !== undefined) view.setInt16(0, Number(data.cbTotal), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.rgbReserved !== undefined) view.setBigUint64(8, data.rgbReserved === null ? 0n : BigInt(util.toPointer(data.rgbReserved)), true);
  // 0x10: pointer
  if (data?.szFileName !== undefined) view.setBigUint64(16, data.szFileName === null ? 0n : BigInt(util.toPointer(data.szFileName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.AASHELLMENUITEM (size: 32)
 */
export interface AASHELLMENUITEM {
  /** ptr */
  lpReserved1: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  iReserved: number;
  /** u32 */
  uiReserved: number;
  /** ptr */
  lpName: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  psz: string | null;
}

export const sizeofAASHELLMENUITEM = 32;

export function allocAASHELLMENUITEM(data?: Partial<AASHELLMENUITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofAASHELLMENUITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpReserved1 !== undefined) view.setBigUint64(0, data.lpReserved1 === null ? 0n : BigInt(util.toPointer(data.lpReserved1)), true);
  // 0x08: i32
  if (data?.iReserved !== undefined) view.setInt32(8, Number(data.iReserved), true);
  // 0x0c: u32
  if (data?.uiReserved !== undefined) view.setUint32(12, Number(data.uiReserved), true);
  // 0x10: pointer
  if (data?.lpName !== undefined) view.setBigUint64(16, data.lpName === null ? 0n : BigInt(util.toPointer(data.lpName)), true);
  // 0x18: buffer
  if (data?.psz !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.psz);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NC_ADDRESS (size: 16)
 */
export interface NC_ADDRESS {
  /** ptr */
  pAddrInfo: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  PortNumber: number;
  /** u8 */
  PrefixLength: number;
}

export const sizeofNC_ADDRESS = 16;

export function allocNC_ADDRESS(data?: Partial<NC_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofNC_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pAddrInfo !== undefined) view.setBigUint64(0, data.pAddrInfo === null ? 0n : BigInt(util.toPointer(data.pAddrInfo)), true);
  // 0x08: u16
  if (data?.PortNumber !== undefined) view.setUint16(8, Number(data.PortNumber), true);
  // 0x0a: u8
  if (data?.PrefixLength !== undefined) view.setUint8(10, Number(data.PrefixLength));
  // 0x0b: pad5
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PARSEDURLA (size: 40)
 */
export interface PARSEDURLA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszProtocol: string | null;
  /** u32 */
  cchProtocol: number;
  /** Windows.Win32.Foundation.PSTR */
  pszSuffix: string | null;
  /** u32 */
  cchSuffix: number;
  /** u32 */
  nScheme: number;
}

export const sizeofPARSEDURLA = 40;

export function allocPARSEDURLA(data?: Partial<PARSEDURLA>): Uint8Array {
  const buf = new Uint8Array(sizeofPARSEDURLA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszProtocol !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszProtocol);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cchProtocol !== undefined) view.setUint32(16, Number(data.cchProtocol), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszSuffix !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszSuffix);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cchSuffix !== undefined) view.setUint32(32, Number(data.cchSuffix), true);
  // 0x24: u32
  if (data?.nScheme !== undefined) view.setUint32(36, Number(data.nScheme), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PARSEDURLW (size: 40)
 */
export interface PARSEDURLW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszProtocol: string | null;
  /** u32 */
  cchProtocol: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSuffix: string | null;
  /** u32 */
  cchSuffix: number;
  /** u32 */
  nScheme: number;
}

export const sizeofPARSEDURLW = 40;

export function allocPARSEDURLW(data?: Partial<PARSEDURLW>): Uint8Array {
  const buf = new Uint8Array(sizeofPARSEDURLW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszProtocol !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszProtocol);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cchProtocol !== undefined) view.setUint32(16, Number(data.cchProtocol), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszSuffix !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSuffix);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cchSuffix !== undefined) view.setUint32(32, Number(data.cchSuffix), true);
  // 0x24: u32
  if (data?.nScheme !== undefined) view.setUint32(36, Number(data.nScheme), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.QITAB (size: 16)
 */
export interface QITAB {
  /** ptr */
  piid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwOffset: number;
}

export const sizeofQITAB = 16;

export function allocQITAB(data?: Partial<QITAB>): Uint8Array {
  const buf = new Uint8Array(sizeofQITAB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.piid !== undefined) view.setBigUint64(0, data.piid === null ? 0n : BigInt(util.toPointer(data.piid)), true);
  // 0x08: u32
  if (data?.dwOffset !== undefined) view.setUint32(8, Number(data.dwOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DLLVERSIONINFO (size: 24)
 */
export interface DLLVERSIONINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u32 */
  dwBuildNumber: number;
  /** u32 */
  dwPlatformID: number;
}

export const sizeofDLLVERSIONINFO = 24;

export function allocDLLVERSIONINFO(data?: Partial<DLLVERSIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDLLVERSIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: u32
  if (data?.dwBuildNumber !== undefined) view.setUint32(12, Number(data.dwBuildNumber), true);
  // 0x10: u32
  if (data?.dwPlatformID !== undefined) view.setUint32(16, Number(data.dwPlatformID), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.DLLVERSIONINFO2 (size: 24)
 */
export interface DLLVERSIONINFO2 {
  /** Windows.Win32.UI.Shell.DLLVERSIONINFO */
  info1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u64 */
  ullVersion: Deno.PointerValue;
}

export const sizeofDLLVERSIONINFO2 = 24;

export function allocDLLVERSIONINFO2(data?: Partial<DLLVERSIONINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofDLLVERSIONINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.info1 !== undefined) view.setBigUint64(0, data.info1 === null ? 0n : BigInt(util.toPointer(data.info1)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: u64
  if (data?.ullVersion !== undefined) view.setBigUint64(16, BigInt(data.ullVersion), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.APPINFODATA (size: 152)
 */
export interface APPINFODATA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplayName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszVersion: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPublisher: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszProductID: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszRegisteredOwner: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszRegisteredCompany: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLanguage: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSupportUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszSupportTelephone: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszHelpLink: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInstallLocation: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInstallSource: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszInstallDate: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszContact: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszComments: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszImage: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszReadmeUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszUpdateInfoUrl: string | null;
}

export const sizeofAPPINFODATA = 152;

export function allocAPPINFODATA(data?: Partial<APPINFODATA>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPINFODATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: buffer
  if (data?.pszDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszVersion !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszVersion);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszPublisher !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszPublisher);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszProductID !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszProductID);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszRegisteredOwner !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszRegisteredOwner);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pszRegisteredCompany !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszRegisteredCompany);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pszLanguage !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszLanguage);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pszSupportUrl !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pszSupportUrl);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pszSupportTelephone !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszSupportTelephone);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.pszHelpLink !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszHelpLink);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.pszInstallLocation !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszInstallLocation);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.pszInstallSource !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.pszInstallSource);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.pszInstallDate !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.pszInstallDate);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: buffer
  if (data?.pszContact !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.pszContact);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: buffer
  if (data?.pszComments !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.pszComments);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: buffer
  if (data?.pszImage !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.pszImage);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: buffer
  if (data?.pszReadmeUrl !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.pszReadmeUrl);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: buffer
  if (data?.pszUpdateInfoUrl !== undefined) {
    (buf as any)._f144 = util.pwstrToFfi(data.pszUpdateInfoUrl);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SLOWAPPINFO (size: 32)
 */
export interface SLOWAPPINFO {
  /** u64 */
  ullSize: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastUsed: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iTimesUsed: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszImage: string | null;
}

export const sizeofSLOWAPPINFO = 32;

export function allocSLOWAPPINFO(data?: Partial<SLOWAPPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSLOWAPPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullSize !== undefined) view.setBigUint64(0, BigInt(data.ullSize), true);
  // 0x08: pointer
  if (data?.ftLastUsed !== undefined) view.setBigUint64(8, data.ftLastUsed === null ? 0n : BigInt(util.toPointer(data.ftLastUsed)), true);
  // 0x10: i32
  if (data?.iTimesUsed !== undefined) view.setInt32(16, Number(data.iTimesUsed), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszImage !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszImage);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PUBAPPINFO (size: 48)
 */
export interface PUBAPPINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSource: string | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stAssigned: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stPublished: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stScheduled: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stExpire: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPUBAPPINFO = 48;

export function allocPUBAPPINFO(data?: Partial<PUBAPPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBAPPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: buffer
  if (data?.pszSource !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSource);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.stAssigned !== undefined) view.setBigUint64(16, data.stAssigned === null ? 0n : BigInt(util.toPointer(data.stAssigned)), true);
  // 0x18: pointer
  if (data?.stPublished !== undefined) view.setBigUint64(24, data.stPublished === null ? 0n : BigInt(util.toPointer(data.stPublished)), true);
  // 0x20: pointer
  if (data?.stScheduled !== undefined) view.setBigUint64(32, data.stScheduled === null ? 0n : BigInt(util.toPointer(data.stScheduled)), true);
  // 0x28: pointer
  if (data?.stExpire !== undefined) view.setBigUint64(40, data.stExpire === null ? 0n : BigInt(util.toPointer(data.stExpire)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR (size: 24)
 */
export interface CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR {
  /** u32 */
  dwFieldID: number;
  /** Windows.Win32.UI.Shell.CREDENTIAL_PROVIDER_FIELD_TYPE */
  cpft: CREDENTIAL_PROVIDER_FIELD_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pszLabel: string | null;
  /** System.Guid */
  guidFieldType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREDENTIAL_PROVIDER_FIELD_DESCRIPTOR = 24;

export function allocCREDENTIAL_PROVIDER_FIELD_DESCRIPTOR(data?: Partial<CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_PROVIDER_FIELD_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFieldID !== undefined) view.setUint32(0, Number(data.dwFieldID), true);
  // 0x04: i32
  if (data?.cpft !== undefined) view.setInt32(4, Number(data.cpft), true);
  // 0x08: buffer
  if (data?.pszLabel !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszLabel);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.guidFieldType !== undefined) view.setBigUint64(16, data.guidFieldType === null ? 0n : BigInt(util.toPointer(data.guidFieldType)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION (size: 32)
 */
export interface CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION {
  /** u32 */
  ulAuthenticationPackage: number;
  /** System.Guid */
  clsidCredentialProvider: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbSerialization: number;
  /** ptr */
  rgbSerialization: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION = 32;

export function allocCREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION(data?: Partial<CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulAuthenticationPackage !== undefined) view.setUint32(0, Number(data.ulAuthenticationPackage), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsidCredentialProvider !== undefined) view.setBigUint64(8, data.clsidCredentialProvider === null ? 0n : BigInt(util.toPointer(data.clsidCredentialProvider)), true);
  // 0x10: u32
  if (data?.cbSerialization !== undefined) view.setUint32(16, Number(data.cbSerialization), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgbSerialization !== undefined) view.setBigUint64(24, data.rgbSerialization === null ? 0n : BigInt(util.toPointer(data.rgbSerialization)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SYNCMGR_CONFLICT_ID_INFO (size: 16)
 */
export interface SYNCMGR_CONFLICT_ID_INFO {
  /** ptr */
  pblobID: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pblobExtra: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSYNCMGR_CONFLICT_ID_INFO = 16;

export function allocSYNCMGR_CONFLICT_ID_INFO(data?: Partial<SYNCMGR_CONFLICT_ID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNCMGR_CONFLICT_ID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pblobID !== undefined) view.setBigUint64(0, data.pblobID === null ? 0n : BigInt(util.toPointer(data.pblobID)), true);
  // 0x08: pointer
  if (data?.pblobExtra !== undefined) view.setBigUint64(8, data.pblobExtra === null ? 0n : BigInt(util.toPointer(data.pblobExtra)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CONFIRM_CONFLICT_ITEM (size: 48)
 */
export interface CONFIRM_CONFLICT_ITEM {
  /** Windows.Win32.UI.Shell.IShellItem2 */
  pShellItem: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszOriginalName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszAlternateName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocationShort: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszLocationFull: string | null;
  /** Windows.Win32.UI.Shell.SYNCMGR_CONFLICT_ITEM_TYPE */
  nType: SYNCMGR_CONFLICT_ITEM_TYPE;
}

export const sizeofCONFIRM_CONFLICT_ITEM = 48;

export function allocCONFIRM_CONFLICT_ITEM(data?: Partial<CONFIRM_CONFLICT_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIRM_CONFLICT_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pShellItem !== undefined) view.setBigUint64(0, data.pShellItem === null ? 0n : BigInt(util.toPointer(data.pShellItem)), true);
  // 0x08: buffer
  if (data?.pszOriginalName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszOriginalName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszAlternateName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszAlternateName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszLocationShort !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszLocationShort);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszLocationFull !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszLocationFull);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.nType !== undefined) view.setInt32(40, Number(data.nType), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CONFIRM_CONFLICT_RESULT_INFO (size: 16)
 */
export interface CONFIRM_CONFLICT_RESULT_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszNewName: string | null;
  /** u32 */
  iItemIndex: number;
}

export const sizeofCONFIRM_CONFLICT_RESULT_INFO = 16;

export function allocCONFIRM_CONFLICT_RESULT_INFO(data?: Partial<CONFIRM_CONFLICT_RESULT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIRM_CONFLICT_RESULT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszNewName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszNewName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.iItemIndex !== undefined) view.setUint32(8, Number(data.iItemIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.WTS_THUMBNAILID (size: 8)
 */
export interface WTS_THUMBNAILID {
  /** array */
  rgbKey: Deno.PointerValue | null;
}

export const sizeofWTS_THUMBNAILID = 8;

export function allocWTS_THUMBNAILID(data?: Partial<WTS_THUMBNAILID>): Uint8Array {
  const buf = new Uint8Array(sizeofWTS_THUMBNAILID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbKey !== undefined) view.setBigUint64(0, data.rgbKey === null ? 0n : BigInt(util.toPointer(data.rgbKey)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SYNCMGRPROGRESSITEM (size: 32)
 */
export interface SYNCMGRPROGRESSITEM {
  /** u32 */
  cbSize: number;
  /** u32 */
  mask: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpcStatusText: string | null;
  /** u32 */
  dwStatusType: number;
  /** i32 */
  iProgValue: number;
  /** i32 */
  iMaxValue: number;
}

export const sizeofSYNCMGRPROGRESSITEM = 32;

export function allocSYNCMGRPROGRESSITEM(data?: Partial<SYNCMGRPROGRESSITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNCMGRPROGRESSITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.mask !== undefined) view.setUint32(4, Number(data.mask), true);
  // 0x08: buffer
  if (data?.lpcStatusText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpcStatusText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwStatusType !== undefined) view.setUint32(16, Number(data.dwStatusType), true);
  // 0x14: i32
  if (data?.iProgValue !== undefined) view.setInt32(20, Number(data.iProgValue), true);
  // 0x18: i32
  if (data?.iMaxValue !== undefined) view.setInt32(24, Number(data.iMaxValue), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SYNCMGRLOGERRORINFO (size: 32)
 */
export interface SYNCMGRLOGERRORINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  mask: number;
  /** u32 */
  dwSyncMgrErrorFlags: number;
  /** System.Guid */
  ErrorID: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ItemID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYNCMGRLOGERRORINFO = 32;

export function allocSYNCMGRLOGERRORINFO(data?: Partial<SYNCMGRLOGERRORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNCMGRLOGERRORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.mask !== undefined) view.setUint32(4, Number(data.mask), true);
  // 0x08: u32
  if (data?.dwSyncMgrErrorFlags !== undefined) view.setUint32(8, Number(data.dwSyncMgrErrorFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ErrorID !== undefined) view.setBigUint64(16, data.ErrorID === null ? 0n : BigInt(util.toPointer(data.ErrorID)), true);
  // 0x18: pointer
  if (data?.ItemID !== undefined) view.setBigUint64(24, data.ItemID === null ? 0n : BigInt(util.toPointer(data.ItemID)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SYNCMGRITEM (size: 48)
 */
export interface SYNCMGRITEM {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  ItemID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwItemState: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** array */
  wszItemName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastUpdate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSYNCMGRITEM = 48;

export function allocSYNCMGRITEM(data?: Partial<SYNCMGRITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNCMGRITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.ItemID !== undefined) view.setBigUint64(8, data.ItemID === null ? 0n : BigInt(util.toPointer(data.ItemID)), true);
  // 0x10: u32
  if (data?.dwItemState !== undefined) view.setUint32(16, Number(data.dwItemState), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(24, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x20: pointer
  if (data?.wszItemName !== undefined) view.setBigUint64(32, data.wszItemName === null ? 0n : BigInt(util.toPointer(data.wszItemName)), true);
  // 0x28: pointer
  if (data?.ftLastUpdate !== undefined) view.setBigUint64(40, data.ftLastUpdate === null ? 0n : BigInt(util.toPointer(data.ftLastUpdate)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.SYNCMGRHANDLERINFO (size: 32)
 */
export interface SYNCMGRHANDLERINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SyncMgrHandlerFlags: number;
  /** array */
  wszHandlerName: Deno.PointerValue | null;
}

export const sizeofSYNCMGRHANDLERINFO = 32;

export function allocSYNCMGRHANDLERINFO(data?: Partial<SYNCMGRHANDLERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSYNCMGRHANDLERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(8, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x10: u32
  if (data?.SyncMgrHandlerFlags !== undefined) view.setUint32(16, Number(data.SyncMgrHandlerFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.wszHandlerName !== undefined) view.setBigUint64(24, data.wszHandlerName === null ? 0n : BigInt(util.toPointer(data.wszHandlerName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.WINDOWDATA (size: 40)
 */
export interface WINDOWDATA {
  /** u32 */
  dwWindowID: number;
  /** u32 */
  uiCP: number;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUrl: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUrlLocation: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszTitle: string | null;
}

export const sizeofWINDOWDATA = 40;

export function allocWINDOWDATA(data?: Partial<WINDOWDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDOWDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWindowID !== undefined) view.setUint32(0, Number(data.dwWindowID), true);
  // 0x04: u32
  if (data?.uiCP !== undefined) view.setUint32(4, Number(data.uiCP), true);
  // 0x08: pointer
  if (data?.pidl !== undefined) view.setBigUint64(8, data.pidl === null ? 0n : BigInt(util.toPointer(data.pidl)), true);
  // 0x10: buffer
  if (data?.lpszUrl !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszUrl);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszUrlLocation !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszUrlLocation);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.HLITEM (size: 16)
 */
export interface HLITEM {
  /** u32 */
  uHLID: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzFriendlyName: string | null;
}

export const sizeofHLITEM = 16;

export function allocHLITEM(data?: Partial<HLITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofHLITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uHLID !== undefined) view.setUint32(0, Number(data.uHLID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwzFriendlyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzFriendlyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.HLTBINFO (size: 16)
 */
export interface HLTBINFO {
  /** u32 */
  uDockType: number;
  /** Windows.Win32.Foundation.RECT */
  rcTbPos: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHLTBINFO = 16;

export function allocHLTBINFO(data?: Partial<HLTBINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHLTBINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uDockType !== undefined) view.setUint32(0, Number(data.uDockType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcTbPos !== undefined) view.setBigUint64(8, data.rcTbPos === null ? 0n : BigInt(util.toPointer(data.rcTbPos)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.HLBWINFO (size: 32)
 */
export interface HLBWINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  grfHLBWIF: number;
  /** Windows.Win32.Foundation.RECT */
  rcFramePos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcDocPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.HLTBINFO */
  hltbinfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHLBWINFO = 32;

export function allocHLBWINFO(data?: Partial<HLBWINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHLBWINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.grfHLBWIF !== undefined) view.setUint32(4, Number(data.grfHLBWIF), true);
  // 0x08: pointer
  if (data?.rcFramePos !== undefined) view.setBigUint64(8, data.rcFramePos === null ? 0n : BigInt(util.toPointer(data.rcFramePos)), true);
  // 0x10: pointer
  if (data?.rcDocPos !== undefined) view.setBigUint64(16, data.rcDocPos === null ? 0n : BigInt(util.toPointer(data.rcDocPos)), true);
  // 0x18: pointer
  if (data?.hltbinfo !== undefined) view.setBigUint64(24, data.hltbinfo === null ? 0n : BigInt(util.toPointer(data.hltbinfo)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BASEBROWSERDATAXP (size: 192)
 */
export interface BASEBROWSERDATAXP {
  /** Windows.Win32.Foundation.HWND */
  _hwnd: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.ITravelLog */
  _ptl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IHlinkFrame */
  _phlf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IWebBrowser2 */
  _pautoWB2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IExpDispSupportXP */
  _pautoEDS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellService */
  _pautoSS: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  _eSecureLockIcon: number;
  /** u32 */
  _bitfield: number;
  /** u32 */
  _uActivateState: number;
  /** ptr */
  _pidlViewState: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Ole.IOleCommandTarget */
  _pctView: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  _pidlCur: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellView */
  _psv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellFolder */
  _psf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  _hwndView: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  _pszTitleCur: string | null;
  /** ptr */
  _pidlPending: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellView */
  _psvPending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellFolder */
  _psfPending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  _hwndViewPending: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  _pszTitlePending: string | null;
  /** Windows.Win32.Foundation.BOOL */
  _fIsViewMSHTML: boolean;
  /** Windows.Win32.Foundation.BOOL */
  _fPrivacyImpacted: boolean;
  /** System.Guid */
  _clsidView: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  _clsidViewPending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  _hwndFrame: Deno.PointerValue | null;
}

export const sizeofBASEBROWSERDATAXP = 192;

export function allocBASEBROWSERDATAXP(data?: Partial<BASEBROWSERDATAXP>): Uint8Array {
  const buf = new Uint8Array(sizeofBASEBROWSERDATAXP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?._hwnd !== undefined) view.setBigUint64(0, data._hwnd === null ? 0n : BigInt(util.toPointer(data._hwnd)), true);
  // 0x08: pointer
  if (data?._ptl !== undefined) view.setBigUint64(8, data._ptl === null ? 0n : BigInt(util.toPointer(data._ptl)), true);
  // 0x10: pointer
  if (data?._phlf !== undefined) view.setBigUint64(16, data._phlf === null ? 0n : BigInt(util.toPointer(data._phlf)), true);
  // 0x18: pointer
  if (data?._pautoWB2 !== undefined) view.setBigUint64(24, data._pautoWB2 === null ? 0n : BigInt(util.toPointer(data._pautoWB2)), true);
  // 0x20: pointer
  if (data?._pautoEDS !== undefined) view.setBigUint64(32, data._pautoEDS === null ? 0n : BigInt(util.toPointer(data._pautoEDS)), true);
  // 0x28: pointer
  if (data?._pautoSS !== undefined) view.setBigUint64(40, data._pautoSS === null ? 0n : BigInt(util.toPointer(data._pautoSS)), true);
  // 0x30: i32
  if (data?._eSecureLockIcon !== undefined) view.setInt32(48, Number(data._eSecureLockIcon), true);
  // 0x34: u32
  if (data?._bitfield !== undefined) view.setUint32(52, Number(data._bitfield), true);
  // 0x38: u32
  if (data?._uActivateState !== undefined) view.setUint32(56, Number(data._uActivateState), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?._pidlViewState !== undefined) view.setBigUint64(64, data._pidlViewState === null ? 0n : BigInt(util.toPointer(data._pidlViewState)), true);
  // 0x48: pointer
  if (data?._pctView !== undefined) view.setBigUint64(72, data._pctView === null ? 0n : BigInt(util.toPointer(data._pctView)), true);
  // 0x50: pointer
  if (data?._pidlCur !== undefined) view.setBigUint64(80, data._pidlCur === null ? 0n : BigInt(util.toPointer(data._pidlCur)), true);
  // 0x58: pointer
  if (data?._psv !== undefined) view.setBigUint64(88, data._psv === null ? 0n : BigInt(util.toPointer(data._psv)), true);
  // 0x60: pointer
  if (data?._psf !== undefined) view.setBigUint64(96, data._psf === null ? 0n : BigInt(util.toPointer(data._psf)), true);
  // 0x68: pointer
  if (data?._hwndView !== undefined) view.setBigUint64(104, data._hwndView === null ? 0n : BigInt(util.toPointer(data._hwndView)), true);
  // 0x70: buffer
  if (data?._pszTitleCur !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data._pszTitleCur);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: pointer
  if (data?._pidlPending !== undefined) view.setBigUint64(120, data._pidlPending === null ? 0n : BigInt(util.toPointer(data._pidlPending)), true);
  // 0x80: pointer
  if (data?._psvPending !== undefined) view.setBigUint64(128, data._psvPending === null ? 0n : BigInt(util.toPointer(data._psvPending)), true);
  // 0x88: pointer
  if (data?._psfPending !== undefined) view.setBigUint64(136, data._psfPending === null ? 0n : BigInt(util.toPointer(data._psfPending)), true);
  // 0x90: pointer
  if (data?._hwndViewPending !== undefined) view.setBigUint64(144, data._hwndViewPending === null ? 0n : BigInt(util.toPointer(data._hwndViewPending)), true);
  // 0x98: buffer
  if (data?._pszTitlePending !== undefined) {
    (buf as any)._f152 = util.pwstrToFfi(data._pszTitlePending);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  // 0xa0: i32
  if (data?._fIsViewMSHTML !== undefined) view.setInt32(160, Number(data._fIsViewMSHTML), true);
  // 0xa4: i32
  if (data?._fPrivacyImpacted !== undefined) view.setInt32(164, Number(data._fPrivacyImpacted), true);
  // 0xa8: pointer
  if (data?._clsidView !== undefined) view.setBigUint64(168, data._clsidView === null ? 0n : BigInt(util.toPointer(data._clsidView)), true);
  // 0xb0: pointer
  if (data?._clsidViewPending !== undefined) view.setBigUint64(176, data._clsidViewPending === null ? 0n : BigInt(util.toPointer(data._clsidViewPending)), true);
  // 0xb8: pointer
  if (data?._hwndFrame !== undefined) view.setBigUint64(184, data._hwndFrame === null ? 0n : BigInt(util.toPointer(data._hwndFrame)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.BASEBROWSERDATALH (size: 200)
 */
export interface BASEBROWSERDATALH {
  /** Windows.Win32.Foundation.HWND */
  _hwnd: Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.ITravelLog */
  _ptl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IHlinkFrame */
  _phlf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IWebBrowser2 */
  _pautoWB2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IExpDispSupport */
  _pautoEDS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellService */
  _pautoSS: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  _eSecureLockIcon: number;
  /** u32 */
  _bitfield: number;
  /** u32 */
  _uActivateState: number;
  /** ptr */
  _pidlViewState: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Ole.IOleCommandTarget */
  _pctView: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  _pidlCur: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellView */
  _psv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellFolder */
  _psf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  _hwndView: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  _pszTitleCur: string | null;
  /** ptr */
  _pidlPending: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Shell.IShellView */
  _psvPending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Shell.IShellFolder */
  _psfPending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  _hwndViewPending: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  _pszTitlePending: string | null;
  /** Windows.Win32.Foundation.BOOL */
  _fIsViewMSHTML: boolean;
  /** Windows.Win32.Foundation.BOOL */
  _fPrivacyImpacted: boolean;
  /** System.Guid */
  _clsidView: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  _clsidViewPending: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  _hwndFrame: Deno.PointerValue | null;
  /** i32 */
  _lPhishingFilterStatus: number;
}

export const sizeofBASEBROWSERDATALH = 200;

export function allocBASEBROWSERDATALH(data?: Partial<BASEBROWSERDATALH>): Uint8Array {
  const buf = new Uint8Array(sizeofBASEBROWSERDATALH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?._hwnd !== undefined) view.setBigUint64(0, data._hwnd === null ? 0n : BigInt(util.toPointer(data._hwnd)), true);
  // 0x08: pointer
  if (data?._ptl !== undefined) view.setBigUint64(8, data._ptl === null ? 0n : BigInt(util.toPointer(data._ptl)), true);
  // 0x10: pointer
  if (data?._phlf !== undefined) view.setBigUint64(16, data._phlf === null ? 0n : BigInt(util.toPointer(data._phlf)), true);
  // 0x18: pointer
  if (data?._pautoWB2 !== undefined) view.setBigUint64(24, data._pautoWB2 === null ? 0n : BigInt(util.toPointer(data._pautoWB2)), true);
  // 0x20: pointer
  if (data?._pautoEDS !== undefined) view.setBigUint64(32, data._pautoEDS === null ? 0n : BigInt(util.toPointer(data._pautoEDS)), true);
  // 0x28: pointer
  if (data?._pautoSS !== undefined) view.setBigUint64(40, data._pautoSS === null ? 0n : BigInt(util.toPointer(data._pautoSS)), true);
  // 0x30: i32
  if (data?._eSecureLockIcon !== undefined) view.setInt32(48, Number(data._eSecureLockIcon), true);
  // 0x34: u32
  if (data?._bitfield !== undefined) view.setUint32(52, Number(data._bitfield), true);
  // 0x38: u32
  if (data?._uActivateState !== undefined) view.setUint32(56, Number(data._uActivateState), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?._pidlViewState !== undefined) view.setBigUint64(64, data._pidlViewState === null ? 0n : BigInt(util.toPointer(data._pidlViewState)), true);
  // 0x48: pointer
  if (data?._pctView !== undefined) view.setBigUint64(72, data._pctView === null ? 0n : BigInt(util.toPointer(data._pctView)), true);
  // 0x50: pointer
  if (data?._pidlCur !== undefined) view.setBigUint64(80, data._pidlCur === null ? 0n : BigInt(util.toPointer(data._pidlCur)), true);
  // 0x58: pointer
  if (data?._psv !== undefined) view.setBigUint64(88, data._psv === null ? 0n : BigInt(util.toPointer(data._psv)), true);
  // 0x60: pointer
  if (data?._psf !== undefined) view.setBigUint64(96, data._psf === null ? 0n : BigInt(util.toPointer(data._psf)), true);
  // 0x68: pointer
  if (data?._hwndView !== undefined) view.setBigUint64(104, data._hwndView === null ? 0n : BigInt(util.toPointer(data._hwndView)), true);
  // 0x70: buffer
  if (data?._pszTitleCur !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data._pszTitleCur);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: pointer
  if (data?._pidlPending !== undefined) view.setBigUint64(120, data._pidlPending === null ? 0n : BigInt(util.toPointer(data._pidlPending)), true);
  // 0x80: pointer
  if (data?._psvPending !== undefined) view.setBigUint64(128, data._psvPending === null ? 0n : BigInt(util.toPointer(data._psvPending)), true);
  // 0x88: pointer
  if (data?._psfPending !== undefined) view.setBigUint64(136, data._psfPending === null ? 0n : BigInt(util.toPointer(data._psfPending)), true);
  // 0x90: pointer
  if (data?._hwndViewPending !== undefined) view.setBigUint64(144, data._hwndViewPending === null ? 0n : BigInt(util.toPointer(data._hwndViewPending)), true);
  // 0x98: buffer
  if (data?._pszTitlePending !== undefined) {
    (buf as any)._f152 = util.pwstrToFfi(data._pszTitlePending);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  // 0xa0: i32
  if (data?._fIsViewMSHTML !== undefined) view.setInt32(160, Number(data._fIsViewMSHTML), true);
  // 0xa4: i32
  if (data?._fPrivacyImpacted !== undefined) view.setInt32(164, Number(data._fPrivacyImpacted), true);
  // 0xa8: pointer
  if (data?._clsidView !== undefined) view.setBigUint64(168, data._clsidView === null ? 0n : BigInt(util.toPointer(data._clsidView)), true);
  // 0xb0: pointer
  if (data?._clsidViewPending !== undefined) view.setBigUint64(176, data._clsidViewPending === null ? 0n : BigInt(util.toPointer(data._clsidViewPending)), true);
  // 0xb8: pointer
  if (data?._hwndFrame !== undefined) view.setBigUint64(184, data._hwndFrame === null ? 0n : BigInt(util.toPointer(data._hwndFrame)), true);
  // 0xc0: i32
  if (data?._lPhishingFilterStatus !== undefined) view.setInt32(192, Number(data._lPhishingFilterStatus), true);
  // 0xc4: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Shell.FOLDERSETDATA (size: 24)
 */
export interface FOLDERSETDATA {
  /** Windows.Win32.UI.Shell.FOLDERSETTINGS */
  _fs: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  _vidRestore: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  _dwViewPriority: number;
}

export const sizeofFOLDERSETDATA = 24;

export function allocFOLDERSETDATA(data?: Partial<FOLDERSETDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFOLDERSETDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?._fs !== undefined) view.setBigUint64(0, data._fs === null ? 0n : BigInt(util.toPointer(data._fs)), true);
  // 0x08: pointer
  if (data?._vidRestore !== undefined) view.setBigUint64(8, data._vidRestore === null ? 0n : BigInt(util.toPointer(data._vidRestore)), true);
  // 0x10: u32
  if (data?._dwViewPriority !== undefined) view.setUint32(16, Number(data._dwViewPriority), true);
  // 0x14: pad4
  return buf;
}

export type HMONITOR = Deno.PointerValue;

/**
 * Windows.Win32.UI.Shell.TOOLBARITEM (size: 40)
 */
export interface TOOLBARITEM {
  /** Windows.Win32.UI.Shell.IDockingWindow */
  ptbar: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcBorderTool: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszItem: string | null;
  /** Windows.Win32.Foundation.BOOL */
  fShow: boolean;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  hMon: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOOLBARITEM = 40;

export function allocTOOLBARITEM(data?: Partial<TOOLBARITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofTOOLBARITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ptbar !== undefined) view.setBigUint64(0, data.ptbar === null ? 0n : BigInt(util.toPointer(data.ptbar)), true);
  // 0x08: pointer
  if (data?.rcBorderTool !== undefined) view.setBigUint64(8, data.rcBorderTool === null ? 0n : BigInt(util.toPointer(data.rcBorderTool)), true);
  // 0x10: buffer
  if (data?.pwszItem !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszItem);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.fShow !== undefined) view.setInt32(24, Number(data.fShow), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hMon !== undefined) view.setBigUint64(32, data.hMon === null ? 0n : BigInt(util.toPointer(data.hMon)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.CPLINFO (size: 24)
 */
export interface CPLINFO {
  /** i32 */
  idIcon: number;
  /** i32 */
  idName: number;
  /** i32 */
  idInfo: number;
  /** isize */
  lData: Deno.PointerValue;
}

export const sizeofCPLINFO = 24;

export function allocCPLINFO(data?: Partial<CPLINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCPLINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.idIcon !== undefined) view.setInt32(0, Number(data.idIcon), true);
  // 0x04: i32
  if (data?.idName !== undefined) view.setInt32(4, Number(data.idName), true);
  // 0x08: i32
  if (data?.idInfo !== undefined) view.setInt32(8, Number(data.idInfo), true);
  // 0x0c: pad4
  // 0x10: isize
  if (data?.lData !== undefined) view.setBigInt64(16, BigInt(data.lData), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NEWCPLINFOA (size: 56)
 */
export interface NEWCPLINFOA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwHelpContext: number;
  /** isize */
  lData: Deno.PointerValue;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szInfo: Deno.PointerValue | null;
  /** array */
  szHelpFile: Deno.PointerValue | null;
}

export const sizeofNEWCPLINFOA = 56;

export function allocNEWCPLINFOA(data?: Partial<NEWCPLINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWCPLINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwHelpContext !== undefined) view.setUint32(8, Number(data.dwHelpContext), true);
  // 0x0c: pad4
  // 0x10: isize
  if (data?.lData !== undefined) view.setBigInt64(16, BigInt(data.lData), true);
  // 0x18: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(24, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.szInfo !== undefined) view.setBigUint64(40, data.szInfo === null ? 0n : BigInt(util.toPointer(data.szInfo)), true);
  // 0x30: pointer
  if (data?.szHelpFile !== undefined) view.setBigUint64(48, data.szHelpFile === null ? 0n : BigInt(util.toPointer(data.szHelpFile)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.NEWCPLINFOW (size: 56)
 */
export interface NEWCPLINFOW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwHelpContext: number;
  /** isize */
  lData: Deno.PointerValue;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** array */
  szName: Deno.PointerValue | null;
  /** array */
  szInfo: Deno.PointerValue | null;
  /** array */
  szHelpFile: Deno.PointerValue | null;
}

export const sizeofNEWCPLINFOW = 56;

export function allocNEWCPLINFOW(data?: Partial<NEWCPLINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNEWCPLINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwHelpContext !== undefined) view.setUint32(8, Number(data.dwHelpContext), true);
  // 0x0c: pad4
  // 0x10: isize
  if (data?.lData !== undefined) view.setBigInt64(16, BigInt(data.lData), true);
  // 0x18: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(24, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x20: pointer
  if (data?.szName !== undefined) view.setBigUint64(32, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x28: pointer
  if (data?.szInfo !== undefined) view.setBigUint64(40, data.szInfo === null ? 0n : BigInt(util.toPointer(data.szInfo)), true);
  // 0x30: pointer
  if (data?.szHelpFile !== undefined) view.setBigUint64(48, data.szHelpFile === null ? 0n : BigInt(util.toPointer(data.szHelpFile)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PROFILEINFOA (size: 56)
 */
export interface PROFILEINFOA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  lpUserName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpProfilePath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpDefaultPath: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpServerName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpPolicyPath: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProfile: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROFILEINFOA = 56;

export function allocPROFILEINFOA(data?: Partial<PROFILEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.lpUserName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpProfilePath !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpProfilePath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpDefaultPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpDefaultPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpServerName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpServerName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpPolicyPath !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpPolicyPath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.hProfile !== undefined) view.setBigUint64(48, data.hProfile === null ? 0n : BigInt(util.toPointer(data.hProfile)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PROFILEINFOW (size: 56)
 */
export interface PROFILEINFOW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpUserName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpProfilePath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpDefaultPath: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpServerName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpPolicyPath: string | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProfile: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPROFILEINFOW = 56;

export function allocPROFILEINFOW(data?: Partial<PROFILEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.lpUserName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpProfilePath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpProfilePath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpDefaultPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpDefaultPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpServerName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpServerName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpPolicyPath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpPolicyPath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.hProfile !== undefined) view.setBigUint64(48, data.hProfile === null ? 0n : BigInt(util.toPointer(data.hProfile)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Shell.URLINVOKECOMMANDINFOA (size: 24)
 */
export interface URLINVOKECOMMANDINFOA {
  /** u32 */
  dwcbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pcszVerb: string | null;
}

export const sizeofURLINVOKECOMMANDINFOA = 24;

export function allocURLINVOKECOMMANDINFOA(data?: Partial<URLINVOKECOMMANDINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofURLINVOKECOMMANDINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwcbSize !== undefined) view.setUint32(0, Number(data.dwcbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: buffer
  if (data?.pcszVerb !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pcszVerb);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.URLINVOKECOMMANDINFOW (size: 24)
 */
export interface URLINVOKECOMMANDINFOW {
  /** u32 */
  dwcbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pcszVerb: string | null;
}

export const sizeofURLINVOKECOMMANDINFOW = 24;

export function allocURLINVOKECOMMANDINFOW(data?: Partial<URLINVOKECOMMANDINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofURLINVOKECOMMANDINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwcbSize !== undefined) view.setUint32(0, Number(data.dwcbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: buffer
  if (data?.pcszVerb !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcszVerb);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPPRG (size: 80)
 */
export interface PROPPRG {
  /** u16 */
  flPrg: number;
  /** u16 */
  flPrgInit: number;
  /** array */
  achTitle: Deno.PointerValue | null;
  /** array */
  achCmdLine: Deno.PointerValue | null;
  /** array */
  achWorkDir: Deno.PointerValue | null;
  /** u16 */
  wHotKey: number;
  /** array */
  achIconFile: Deno.PointerValue | null;
  /** u16 */
  wIconIndex: number;
  /** u32 */
  dwEnhModeFlags: number;
  /** u32 */
  dwRealModeFlags: number;
  /** array */
  achOtherFile: Deno.PointerValue | null;
  /** array */
  achPIFFile: Deno.PointerValue | null;
}

export const sizeofPROPPRG = 80;

export function allocPROPPRG(data?: Partial<PROPPRG>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPPRG);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.flPrg !== undefined) view.setUint16(0, Number(data.flPrg), true);
  // 0x02: u16
  if (data?.flPrgInit !== undefined) view.setUint16(2, Number(data.flPrgInit), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.achTitle !== undefined) view.setBigUint64(8, data.achTitle === null ? 0n : BigInt(util.toPointer(data.achTitle)), true);
  // 0x10: pointer
  if (data?.achCmdLine !== undefined) view.setBigUint64(16, data.achCmdLine === null ? 0n : BigInt(util.toPointer(data.achCmdLine)), true);
  // 0x18: pointer
  if (data?.achWorkDir !== undefined) view.setBigUint64(24, data.achWorkDir === null ? 0n : BigInt(util.toPointer(data.achWorkDir)), true);
  // 0x20: u16
  if (data?.wHotKey !== undefined) view.setUint16(32, Number(data.wHotKey), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.achIconFile !== undefined) view.setBigUint64(40, data.achIconFile === null ? 0n : BigInt(util.toPointer(data.achIconFile)), true);
  // 0x30: u16
  if (data?.wIconIndex !== undefined) view.setUint16(48, Number(data.wIconIndex), true);
  // 0x32: u32
  if (data?.dwEnhModeFlags !== undefined) view.setUint32(50, Number(data.dwEnhModeFlags), true);
  // 0x36: u32
  if (data?.dwRealModeFlags !== undefined) view.setUint32(54, Number(data.dwRealModeFlags), true);
  // 0x3a: pad6
  // 0x40: pointer
  if (data?.achOtherFile !== undefined) view.setBigUint64(64, data.achOtherFile === null ? 0n : BigInt(util.toPointer(data.achOtherFile)), true);
  // 0x48: pointer
  if (data?.achPIFFile !== undefined) view.setBigUint64(72, data.achPIFFile === null ? 0n : BigInt(util.toPointer(data.achPIFFile)), true);
  return buf;
}

export type HRESULT = number;

export type WPARAM = Deno.PointerValue;

export type LRESULT = Deno.PointerValue;

export type HDC = Deno.PointerValue;

export type HPALETTE = Deno.PointerValue;

// Native Libraries

try {
  var libUSERENV_dll = Deno.dlopen("USERENV.dll", {
    LoadUserProfileA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    LoadUserProfileW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    UnloadUserProfile: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetProfilesDirectoryA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetProfilesDirectoryW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetProfileType: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteProfileA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    DeleteProfileW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    CreateProfile: {
      parameters: ["buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    GetDefaultUserProfileDirectoryA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetDefaultUserProfileDirectoryW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetAllUsersProfileDirectoryA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetAllUsersProfileDirectoryW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetUserProfileDirectoryA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    GetUserProfileDirectoryW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libCOMCTL32_dll = Deno.dlopen("COMCTL32.dll", {
    SetWindowSubclass: {
      parameters: ["pointer", "pointer", "usize", "usize"],
      result: "i32",
    },
    GetWindowSubclass: {
      parameters: ["pointer", "pointer", "usize", "pointer"],
      result: "i32",
    },
    RemoveWindowSubclass: {
      parameters: ["pointer", "pointer", "usize"],
      result: "i32",
    },
    DefSubclassProc: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    SetWindowContextHelpId: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetWindowContextHelpId: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetMenuContextHelpId: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetMenuContextHelpId: {
      parameters: ["pointer"],
      result: "u32",
    },
    WinHelpA: {
      parameters: ["pointer", "buffer", "u32", "usize"],
      result: "i32",
    },
    WinHelpW: {
      parameters: ["pointer", "buffer", "u32", "usize"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSHELL32_dll = Deno.dlopen("SHELL32.dll", {
    SHSimpleIDListFromPath: {
      parameters: ["buffer"],
      result: "pointer",
    },
    SHCreateItemFromIDList: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateItemFromParsingName: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateItemWithParent: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateItemFromRelativeName: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateItemInKnownFolder: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetIDListFromObject: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHGetItemFromObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetNameFromIDList: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SHGetItemFromDataObject: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateShellItemArray: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateShellItemArrayFromDataObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateShellItemArrayFromIDLists: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateShellItemArrayFromShellItem: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateAssociationRegistration: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHCreateDefaultExtractIcon: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetCurrentProcessExplicitAppUserModelID: {
      parameters: ["buffer"],
      result: "pointer",
    },
    GetCurrentProcessExplicitAppUserModelID: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHGetTemporaryPropertyForItem: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHSetTemporaryPropertyForItem: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHShowManageLibraryUI: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    SHResolveLibrary: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHAssocEnumHandlers: {
      parameters: ["buffer", "i32", "pointer"],
      result: "pointer",
    },
    SHAssocEnumHandlersForProtocolByApplication: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateDefaultPropertiesOp: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHSetDefaultProperties: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    SHGetMalloc: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHAlloc: {
      parameters: ["usize"],
      result: "pointer",
    },
    SHFree: {
      parameters: ["pointer"],
      result: "void",
    },
    SHGetIconOverlayIndexA: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    SHGetIconOverlayIndexW: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    ILClone: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ILCloneFirst: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ILCombine: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ILFree: {
      parameters: ["pointer"],
      result: "void",
    },
    ILGetNext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ILGetSize: {
      parameters: ["pointer"],
      result: "u32",
    },
    ILFindChild: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ILFindLastID: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ILRemoveLastID: {
      parameters: ["pointer"],
      result: "i32",
    },
    ILIsEqual: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ILIsParent: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    ILSaveToStream: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ILLoadFromStreamEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ILCreateFromPathA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    ILCreateFromPathW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    SHILCreateFromPath: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ILAppendID: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    SHGetPathFromIDListEx: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    SHGetPathFromIDListA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SHGetPathFromIDListW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SHCreateDirectory: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    SHCreateDirectoryExA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SHCreateDirectoryExW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SHOpenFolderAndSelectItems: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    SHCreateShellItem: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetSpecialFolderLocation: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SHCloneSpecialIDList: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    SHGetSpecialFolderPathA: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    SHGetSpecialFolderPathW: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    SHFlushSFCache: {
      parameters: [],
      result: "void",
    },
    SHGetFolderPathA: {
      parameters: ["pointer", "i32", "pointer", "u32", "buffer"],
      result: "pointer",
    },
    SHGetFolderPathW: {
      parameters: ["pointer", "i32", "pointer", "u32", "buffer"],
      result: "pointer",
    },
    SHGetFolderLocation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    SHSetFolderPathA: {
      parameters: ["i32", "pointer", "u32", "buffer"],
      result: "pointer",
    },
    SHSetFolderPathW: {
      parameters: ["i32", "pointer", "u32", "buffer"],
      result: "pointer",
    },
    SHGetFolderPathAndSubDirA: {
      parameters: ["pointer", "i32", "pointer", "u32", "buffer", "buffer"],
      result: "pointer",
    },
    SHGetFolderPathAndSubDirW: {
      parameters: ["pointer", "i32", "pointer", "u32", "buffer", "buffer"],
      result: "pointer",
    },
    SHGetKnownFolderIDList: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHSetKnownFolderPath: {
      parameters: ["pointer", "u32", "pointer", "buffer"],
      result: "pointer",
    },
    SHGetKnownFolderPath: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetKnownFolderItem: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetSetFolderCustomSettings: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHBrowseForFolderA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHBrowseForFolderW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHLoadInProc: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHGetDesktopFolder: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHChangeNotify: {
      parameters: ["u32", "u32", "pointer", "pointer"],
      result: "void",
    },
    SHAddToRecentDocs: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    SHHandleUpdateImage: {
      parameters: ["pointer"],
      result: "i32",
    },
    SHUpdateImageA: {
      parameters: ["buffer", "i32", "u32", "i32"],
      result: "void",
    },
    SHUpdateImageW: {
      parameters: ["buffer", "i32", "u32", "i32"],
      result: "void",
    },
    SHChangeNotifyRegister: {
      parameters: ["pointer", "i32", "i32", "u32", "i32", "pointer"],
      result: "u32",
    },
    SHChangeNotifyDeregister: {
      parameters: ["u32"],
      result: "i32",
    },
    SHChangeNotification_Lock: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHChangeNotification_Unlock: {
      parameters: ["pointer"],
      result: "i32",
    },
    SHGetRealIDL: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetInstanceExplorer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHGetDataFromIDListA: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    SHGetDataFromIDListW: {
      parameters: ["pointer", "pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    RestartDialog: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    RestartDialogEx: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    SHCoCreateInstance: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateDataObject: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CIDLData_CreateFromIDArray: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateStdEnumFmtEtc: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHDoDragDrop: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    DAD_SetDragImage: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DAD_DragEnterEx: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DAD_DragEnterEx2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DAD_ShowDragImage: {
      parameters: ["i32"],
      result: "i32",
    },
    DAD_DragMove: {
      parameters: ["pointer"],
      result: "i32",
    },
    DAD_DragLeave: {
      parameters: [],
      result: "i32",
    },
    DAD_AutoScroll: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ReadCabinetState: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    WriteCabinetState: {
      parameters: ["pointer"],
      result: "i32",
    },
    PathMakeUniqueName: {
      parameters: ["buffer", "u32", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    PathIsExe: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathCleanupSpec: {
      parameters: ["buffer", "buffer"],
      result: "u32",
    },
    PathResolve: {
      parameters: ["buffer", "pointer", "i32"],
      result: "i32",
    },
    GetFileNameFromBrowse: {
      parameters: ["pointer", "buffer", "u32", "buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    DriveType: {
      parameters: ["i32"],
      result: "i32",
    },
    RealDriveType: {
      parameters: ["i32", "i32"],
      result: "i32",
    },
    IsNetDrive: {
      parameters: ["i32"],
      result: "i32",
    },
    Shell_MergeMenus: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "u32"],
      result: "u32",
    },
    SHObjectProperties: {
      parameters: ["pointer", "i32", "buffer", "buffer"],
      result: "i32",
    },
    SHFormatDrive: {
      parameters: ["pointer", "u32", "u32", "i32"],
      result: "u32",
    },
    SHDestroyPropSheetExtArray: {
      parameters: ["pointer"],
      result: "void",
    },
    SHAddFromPropSheetExtArray: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHReplaceFromPropSheetExtArray: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    OpenRegStream: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    SHFindFiles: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PathGetShortPath: {
      parameters: ["buffer"],
      result: "void",
    },
    PathYetAnotherMakeUniqueName: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    Win32DeleteFile: {
      parameters: ["buffer"],
      result: "i32",
    },
    SHRestricted: {
      parameters: ["i32"],
      result: "u32",
    },
    SignalFileOpen: {
      parameters: ["pointer"],
      result: "i32",
    },
    AssocGetDetailsOfPropKey: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHStartNetConnectionDialogW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHDefExtractIconA: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    SHDefExtractIconW: {
      parameters: ["buffer", "i32", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    SHOpenWithDialog: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    Shell_GetImageLists: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    Shell_GetCachedImageIndex: {
      parameters: ["buffer", "i32", "u32"],
      result: "i32",
    },
    Shell_GetCachedImageIndexA: {
      parameters: ["buffer", "i32", "u32"],
      result: "i32",
    },
    Shell_GetCachedImageIndexW: {
      parameters: ["buffer", "i32", "u32"],
      result: "i32",
    },
    SHValidateUNC: {
      parameters: ["pointer", "buffer", "i32"],
      result: "i32",
    },
    SHSetInstanceExplorer: {
      parameters: ["pointer"],
      result: "void",
    },
    IsUserAnAdmin: {
      parameters: [],
      result: "i32",
    },
    SHShellFolderView_Message: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SHCreateShellFolderView: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CDefFolderMenu_Create2: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateDefaultContextMenu: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHFind_InitMenuPopup: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    SHCreateShellFolderViewEx: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHGetSetSettings: {
      parameters: ["pointer", "u32", "i32"],
      result: "void",
    },
    SHGetSettings: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    SHBindToParent: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHBindToFolderIDListParent: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHBindToFolderIDListParentEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHBindToObject: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHParseDisplayName: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    SHPathPrepareForWriteA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHPathPrepareForWriteW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHCreateFileExtractIconW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHLimitInputEdit: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHGetAttributesFromDataObject: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHMapPIDLToSystemImageListIndex: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    SHCLSIDFromString: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PickIconDlg: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    StgMakeUniqueName: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHChangeNotifyRegisterThread: {
      parameters: ["i32"],
      result: "void",
    },
    PathQualify: {
      parameters: ["buffer"],
      result: "void",
    },
    PathIsSlowA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    PathIsSlowW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    SHCreatePropSheetExtArray: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHOpenPropSheetW: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer", "buffer"],
      result: "i32",
    },
    SHMultiFileProperties: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SHCreateQueryCancelAutoPlayMoniker: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CommandLineToArgvW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    DragQueryFileA: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "u32",
    },
    DragQueryFileW: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "u32",
    },
    DragQueryPoint: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DragFinish: {
      parameters: ["pointer"],
      result: "void",
    },
    DragAcceptFiles: {
      parameters: ["pointer", "i32"],
      result: "void",
    },
    ShellExecuteA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    ShellExecuteW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    FindExecutableA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    FindExecutableW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    ShellAboutA: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    ShellAboutW: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    DuplicateIcon: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ExtractAssociatedIconA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ExtractAssociatedIconW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ExtractAssociatedIconExA: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ExtractAssociatedIconExW: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ExtractIconA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    ExtractIconW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHAppBarMessage: {
      parameters: ["u32", "pointer"],
      result: "usize",
    },
    DoEnvironmentSubstA: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    DoEnvironmentSubstW: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    ExtractIconExA: {
      parameters: ["buffer", "i32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    ExtractIconExW: {
      parameters: ["buffer", "i32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    SHFileOperationA: {
      parameters: ["pointer"],
      result: "i32",
    },
    SHFileOperationW: {
      parameters: ["pointer"],
      result: "i32",
    },
    SHFreeNameMappings: {
      parameters: ["pointer"],
      result: "void",
    },
    ShellExecuteExA: {
      parameters: ["pointer"],
      result: "i32",
    },
    ShellExecuteExW: {
      parameters: ["pointer"],
      result: "i32",
    },
    SHCreateProcessAsUserW: {
      parameters: ["pointer"],
      result: "i32",
    },
    SHEvaluateSystemCommandTemplate: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AssocCreateForClasses: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHQueryRecycleBinA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SHQueryRecycleBinW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SHEmptyRecycleBinA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHEmptyRecycleBinW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHQueryUserNotificationState: {
      parameters: ["pointer"],
      result: "pointer",
    },
    Shell_NotifyIconA: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    Shell_NotifyIconW: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    Shell_NotifyIconGetRect: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHGetFileInfoA: {
      parameters: ["buffer", "u32", "pointer", "u32", "i32"],
      result: "usize",
    },
    SHGetFileInfoW: {
      parameters: ["buffer", "u32", "pointer", "u32", "i32"],
      result: "usize",
    },
    SHGetStockIconInfo: {
      parameters: ["i32", "u32", "pointer"],
      result: "pointer",
    },
    SHGetDiskFreeSpaceExA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SHGetDiskFreeSpaceExW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SHGetNewLinkInfoA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SHGetNewLinkInfoW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    SHInvokePrinterCommandA: {
      parameters: ["pointer", "u32", "buffer", "buffer", "i32"],
      result: "i32",
    },
    SHInvokePrinterCommandW: {
      parameters: ["pointer", "u32", "buffer", "buffer", "i32"],
      result: "i32",
    },
    SHLoadNonloadedIconOverlayIdentifiers: {
      parameters: [],
      result: "pointer",
    },
    SHIsFileAvailableOffline: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SHSetLocalizedName: {
      parameters: ["buffer", "buffer", "i32"],
      result: "pointer",
    },
    SHRemoveLocalizedName: {
      parameters: ["buffer"],
      result: "pointer",
    },
    SHGetLocalizedName: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    IsLFNDriveA: {
      parameters: ["buffer"],
      result: "i32",
    },
    IsLFNDriveW: {
      parameters: ["buffer"],
      result: "i32",
    },
    SHEnumerateUnreadMailAccountsW: {
      parameters: ["pointer", "u32", "buffer", "i32"],
      result: "pointer",
    },
    SHGetUnreadMailCountW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    SHSetUnreadMailCountW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "pointer",
    },
    SHTestTokenMembership: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SHGetImageList: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
    },
    InitNetworkAddressControl: {
      parameters: [],
      result: "i32",
    },
    SHGetDriveMedia: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libOLE32_dll = Deno.dlopen("OLE32.dll", {
    HMONITOR_UserSize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HMONITOR_UserMarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMONITOR_UserUnmarshal: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMONITOR_UserFree: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    HMONITOR_UserSize64: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HMONITOR_UserMarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMONITOR_UserUnmarshal64: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HMONITOR_UserFree64: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSHDOCVW_dll = Deno.dlopen("SHDOCVW.dll", {
    SoftwareUpdateMessageBox: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    ImportPrivacySettings: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_shcore_scaling_l1_1_0_dll = Deno.dlopen("api-ms-win-shcore-scaling-l1-1-0.dll", {
    GetScaleFactorForDevice: {
      parameters: ["i32"],
      result: "i32",
    },
    RegisterScaleChangeNotifications: {
      parameters: ["i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    RevokeScaleChangeNotifications: {
      parameters: ["i32", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_shcore_scaling_l1_1_1_dll = Deno.dlopen("api-ms-win-shcore-scaling-l1-1-1.dll", {
    GetScaleFactorForMonitor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RegisterScaleChangeEvent: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UnregisterScaleChangeEvent: {
      parameters: ["usize"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_shcore_scaling_l1_1_2_dll = Deno.dlopen("api-ms-win-shcore-scaling-l1-1-2.dll", {
    GetDpiForShellUIComponent: {
      parameters: ["i32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSHLWAPI_dll = Deno.dlopen("SHLWAPI.dll", {
    ShellMessageBoxA: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    ShellMessageBoxW: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "u32"],
      result: "i32",
    },
    StrChrA: {
      parameters: ["buffer", "u16"],
      result: "buffer",
    },
    StrChrW: {
      parameters: ["buffer", "pointer"],
      result: "buffer",
    },
    StrChrIA: {
      parameters: ["buffer", "u16"],
      result: "buffer",
    },
    StrChrIW: {
      parameters: ["buffer", "pointer"],
      result: "buffer",
    },
    StrChrNW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "buffer",
    },
    StrChrNIW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "buffer",
    },
    StrCmpNA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCmpNW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCmpNIA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCmpNIW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCSpnA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCSpnW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCSpnIA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCSpnIW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrDupA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    StrDupW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    StrFormatByteSizeEx: {
      parameters: ["u64", "i32", "buffer", "u32"],
      result: "pointer",
    },
    StrFormatByteSizeA: {
      parameters: ["u32", "buffer", "u32"],
      result: "buffer",
    },
    StrFormatByteSize64A: {
      parameters: ["i64", "buffer", "u32"],
      result: "buffer",
    },
    StrFormatByteSizeW: {
      parameters: ["i64", "buffer", "u32"],
      result: "buffer",
    },
    StrFormatKBSizeW: {
      parameters: ["i64", "buffer", "u32"],
      result: "buffer",
    },
    StrFormatKBSizeA: {
      parameters: ["i64", "buffer", "u32"],
      result: "buffer",
    },
    StrFromTimeIntervalA: {
      parameters: ["buffer", "u32", "u32", "i32"],
      result: "i32",
    },
    StrFromTimeIntervalW: {
      parameters: ["buffer", "u32", "u32", "i32"],
      result: "i32",
    },
    StrIsIntlEqualA: {
      parameters: ["i32", "buffer", "buffer", "i32"],
      result: "i32",
    },
    StrIsIntlEqualW: {
      parameters: ["i32", "buffer", "buffer", "i32"],
      result: "i32",
    },
    StrNCatA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    StrNCatW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    StrPBrkA: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrPBrkW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrRChrA: {
      parameters: ["buffer", "buffer", "u16"],
      result: "buffer",
    },
    StrRChrW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "buffer",
    },
    StrRChrIA: {
      parameters: ["buffer", "buffer", "u16"],
      result: "buffer",
    },
    StrRChrIW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "buffer",
    },
    StrRStrIA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "buffer",
    },
    StrRStrIW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "buffer",
    },
    StrSpnA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrSpnW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrStrA: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrStrW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrStrIA: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrStrIW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrStrNW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "buffer",
    },
    StrStrNIW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "buffer",
    },
    StrToIntA: {
      parameters: ["buffer"],
      result: "i32",
    },
    StrToIntW: {
      parameters: ["buffer"],
      result: "i32",
    },
    StrToIntExA: {
      parameters: ["buffer", "i32", "pointer"],
      result: "i32",
    },
    StrToIntExW: {
      parameters: ["buffer", "i32", "pointer"],
      result: "i32",
    },
    StrToInt64ExA: {
      parameters: ["buffer", "i32", "pointer"],
      result: "i32",
    },
    StrToInt64ExW: {
      parameters: ["buffer", "i32", "pointer"],
      result: "i32",
    },
    StrTrimA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrTrimW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCatW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrCmpW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCmpIW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCpyW: {
      parameters: ["buffer", "buffer"],
      result: "buffer",
    },
    StrCpyNW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    StrCatBuffW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    StrCatBuffA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "buffer",
    },
    ChrCmpIA: {
      parameters: ["u16", "u16"],
      result: "i32",
    },
    ChrCmpIW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    wvnsprintfA: {
      parameters: ["buffer", "i32", "buffer", "pointer"],
      result: "i32",
    },
    wvnsprintfW: {
      parameters: ["buffer", "i32", "buffer", "pointer"],
      result: "i32",
    },
    wnsprintfA: {
      parameters: ["buffer", "i32", "buffer"],
      result: "i32",
    },
    wnsprintfW: {
      parameters: ["buffer", "i32", "buffer"],
      result: "i32",
    },
    StrRetToStrA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StrRetToStrW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    StrRetToBufA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "pointer",
    },
    StrRetToBufW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "pointer",
    },
    SHStrDupA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SHStrDupW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    StrCmpLogicalW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCatChainW: {
      parameters: ["buffer", "u32", "u32", "buffer"],
      result: "u32",
    },
    StrRetToBSTR: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHLoadIndirectString: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    IsCharSpaceA: {
      parameters: ["pointer"],
      result: "i32",
    },
    IsCharSpaceW: {
      parameters: ["pointer"],
      result: "i32",
    },
    StrCmpCA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCmpCW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCmpICA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCmpICW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    StrCmpNCA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCmpNCW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCmpNICA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    StrCmpNICW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    IntlStrEqWorkerA: {
      parameters: ["i32", "buffer", "buffer", "i32"],
      result: "i32",
    },
    IntlStrEqWorkerW: {
      parameters: ["i32", "buffer", "buffer", "i32"],
      result: "i32",
    },
    PathAddBackslashA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathAddBackslashW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathAddExtensionA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathAddExtensionW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathAppendA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathAppendW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathBuildRootA: {
      parameters: ["buffer", "i32"],
      result: "buffer",
    },
    PathBuildRootW: {
      parameters: ["buffer", "i32"],
      result: "buffer",
    },
    PathCanonicalizeA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathCanonicalizeW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathCombineA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "buffer",
    },
    PathCombineW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "buffer",
    },
    PathCompactPathA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    PathCompactPathW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    PathCompactPathExA: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "i32",
    },
    PathCompactPathExW: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "i32",
    },
    PathCommonPrefixA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    PathCommonPrefixW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    PathFileExistsA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathFileExistsW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathFindExtensionA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathFindExtensionW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathFindFileNameA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathFindFileNameW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathFindNextComponentA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathFindNextComponentW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathFindOnPathA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    PathFindOnPathW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    PathFindSuffixArrayA: {
      parameters: ["buffer", "pointer", "i32"],
      result: "buffer",
    },
    PathFindSuffixArrayW: {
      parameters: ["buffer", "pointer", "i32"],
      result: "buffer",
    },
    PathGetArgsA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathGetArgsW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathIsLFNFileSpecA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsLFNFileSpecW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathGetCharTypeA: {
      parameters: ["u8"],
      result: "u32",
    },
    PathGetCharTypeW: {
      parameters: ["pointer"],
      result: "u32",
    },
    PathGetDriveNumberA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathGetDriveNumberW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsDirectoryA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsDirectoryW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsDirectoryEmptyA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsDirectoryEmptyW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsFileSpecA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsFileSpecW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsPrefixA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathIsPrefixW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathIsRelativeA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsRelativeW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsRootA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsRootW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsSameRootA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathIsSameRootW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathIsUNCA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsUNCW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsNetworkPathA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsNetworkPathW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsUNCServerA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsUNCServerW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsUNCServerShareA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsUNCServerShareW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsContentTypeA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathIsContentTypeW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathIsURLA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsURLW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathMakePrettyA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathMakePrettyW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathMatchSpecA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathMatchSpecW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathMatchSpecExA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    PathMatchSpecExW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    PathParseIconLocationA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathParseIconLocationW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathQuoteSpacesA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathQuoteSpacesW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathRelativePathToA: {
      parameters: ["buffer", "buffer", "u32", "buffer", "u32"],
      result: "i32",
    },
    PathRelativePathToW: {
      parameters: ["buffer", "buffer", "u32", "buffer", "u32"],
      result: "i32",
    },
    PathRemoveArgsA: {
      parameters: ["buffer"],
      result: "void",
    },
    PathRemoveArgsW: {
      parameters: ["buffer"],
      result: "void",
    },
    PathRemoveBackslashA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathRemoveBackslashW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathRemoveBlanksA: {
      parameters: ["buffer"],
      result: "void",
    },
    PathRemoveBlanksW: {
      parameters: ["buffer"],
      result: "void",
    },
    PathRemoveExtensionA: {
      parameters: ["buffer"],
      result: "void",
    },
    PathRemoveExtensionW: {
      parameters: ["buffer"],
      result: "void",
    },
    PathRemoveFileSpecA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathRemoveFileSpecW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathRenameExtensionA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathRenameExtensionW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    PathSearchAndQualifyA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    PathSearchAndQualifyW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    PathSetDlgItemPathA: {
      parameters: ["pointer", "i32", "buffer"],
      result: "void",
    },
    PathSetDlgItemPathW: {
      parameters: ["pointer", "i32", "buffer"],
      result: "void",
    },
    PathSkipRootA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathSkipRootW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    PathStripPathA: {
      parameters: ["buffer"],
      result: "void",
    },
    PathStripPathW: {
      parameters: ["buffer"],
      result: "void",
    },
    PathStripToRootA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathStripToRootW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathUnquoteSpacesA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathUnquoteSpacesW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathMakeSystemFolderA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathMakeSystemFolderW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathUnmakeSystemFolderA: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathUnmakeSystemFolderW: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathIsSystemFolderA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    PathIsSystemFolderW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    PathUndecorateA: {
      parameters: ["buffer"],
      result: "void",
    },
    PathUndecorateW: {
      parameters: ["buffer"],
      result: "void",
    },
    PathUnExpandEnvStringsA: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    PathUnExpandEnvStringsW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    UrlCompareA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    UrlCompareW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    UrlCombineA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlCombineW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlCanonicalizeA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlCanonicalizeW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlIsOpaqueA: {
      parameters: ["buffer"],
      result: "i32",
    },
    UrlIsOpaqueW: {
      parameters: ["buffer"],
      result: "i32",
    },
    UrlIsNoHistoryA: {
      parameters: ["buffer"],
      result: "i32",
    },
    UrlIsNoHistoryW: {
      parameters: ["buffer"],
      result: "i32",
    },
    UrlIsA: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    UrlIsW: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    UrlGetLocationA: {
      parameters: ["buffer"],
      result: "buffer",
    },
    UrlGetLocationW: {
      parameters: ["buffer"],
      result: "buffer",
    },
    UrlUnescapeA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlUnescapeW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlEscapeA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlEscapeW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlCreateFromPathA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlCreateFromPathW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    PathCreateFromUrlA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    PathCreateFromUrlW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    PathCreateFromUrlAlloc: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlHashA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlHashW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlGetPartW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    UrlGetPartA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    UrlApplySchemeA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    UrlApplySchemeW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    HashData: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "pointer",
    },
    UrlFixupW: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    ParseURLA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    ParseURLW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    SHDeleteEmptyKeyA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    SHDeleteEmptyKeyW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    SHDeleteKeyA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    SHDeleteKeyW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    SHRegDuplicateHKey: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHDeleteValueA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    SHDeleteValueW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    SHGetValueA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHGetValueW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHSetValueA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SHSetValueW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SHRegGetValueA: {
      parameters: ["pointer", "buffer", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHRegGetValueW: {
      parameters: ["pointer", "buffer", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHRegGetValueFromHKCUHKLM: {
      parameters: ["buffer", "buffer", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHQueryValueExA: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHQueryValueExW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHEnumKeyExA: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    SHEnumKeyExW: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    SHEnumValueA: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHEnumValueW: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHQueryInfoKeyA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHQueryInfoKeyW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    SHCopyKeyA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    SHCopyKeyW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    SHRegGetPathA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    SHRegGetPathW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    SHRegSetPathA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    SHRegSetPathW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    SHRegCreateUSKeyA: {
      parameters: ["buffer", "u32", "isize", "pointer", "u32"],
      result: "u32",
    },
    SHRegCreateUSKeyW: {
      parameters: ["buffer", "u32", "isize", "pointer", "u32"],
      result: "u32",
    },
    SHRegOpenUSKeyA: {
      parameters: ["buffer", "u32", "isize", "pointer", "i32"],
      result: "u32",
    },
    SHRegOpenUSKeyW: {
      parameters: ["buffer", "u32", "isize", "pointer", "i32"],
      result: "u32",
    },
    SHRegQueryUSValueA: {
      parameters: ["isize", "buffer", "pointer", "pointer", "pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    SHRegQueryUSValueW: {
      parameters: ["isize", "buffer", "pointer", "pointer", "pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    SHRegWriteUSValueA: {
      parameters: ["isize", "buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    SHRegWriteUSValueW: {
      parameters: ["isize", "buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    SHRegDeleteUSValueA: {
      parameters: ["isize", "buffer", "i32"],
      result: "u32",
    },
    SHRegDeleteUSValueW: {
      parameters: ["isize", "buffer", "i32"],
      result: "u32",
    },
    SHRegDeleteEmptyUSKeyW: {
      parameters: ["isize", "buffer", "i32"],
      result: "u32",
    },
    SHRegDeleteEmptyUSKeyA: {
      parameters: ["isize", "buffer", "i32"],
      result: "u32",
    },
    SHRegEnumUSKeyA: {
      parameters: ["isize", "u32", "buffer", "pointer", "i32"],
      result: "u32",
    },
    SHRegEnumUSKeyW: {
      parameters: ["isize", "u32", "buffer", "pointer", "i32"],
      result: "u32",
    },
    SHRegEnumUSValueA: {
      parameters: ["isize", "u32", "buffer", "pointer", "pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
    SHRegEnumUSValueW: {
      parameters: ["isize", "u32", "buffer", "pointer", "pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
    SHRegQueryInfoUSKeyA: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
    SHRegQueryInfoUSKeyW: {
      parameters: ["isize", "pointer", "pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
    SHRegCloseUSKey: {
      parameters: ["isize"],
      result: "u32",
    },
    SHRegGetUSValueA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    SHRegGetUSValueW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    SHRegSetUSValueA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    SHRegSetUSValueW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    SHRegGetIntW: {
      parameters: ["pointer", "buffer", "i32"],
      result: "u32",
    },
    SHRegGetBoolUSValueA: {
      parameters: ["buffer", "buffer", "i32", "i32"],
      result: "i32",
    },
    SHRegGetBoolUSValueW: {
      parameters: ["buffer", "buffer", "i32", "i32"],
      result: "i32",
    },
    AssocCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AssocQueryStringA: {
      parameters: ["u32", "i32", "buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AssocQueryStringW: {
      parameters: ["u32", "i32", "buffer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AssocQueryStringByKeyA: {
      parameters: ["u32", "i32", "pointer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AssocQueryStringByKeyW: {
      parameters: ["u32", "i32", "pointer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AssocQueryKeyA: {
      parameters: ["u32", "i32", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AssocQueryKeyW: {
      parameters: ["u32", "i32", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    AssocIsDangerous: {
      parameters: ["buffer"],
      result: "i32",
    },
    AssocGetPerceivedType: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHOpenRegStreamA: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    SHOpenRegStreamW: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    SHOpenRegStream2A: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    SHOpenRegStream2W: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    SHCreateStreamOnFileA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    SHCreateStreamOnFileW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    SHCreateStreamOnFileEx: {
      parameters: ["buffer", "u32", "u32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    SHCreateMemStream: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetAcceptLanguagesA: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    GetAcceptLanguagesW: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    IUnknown_Set: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    IUnknown_AtomicRelease: {
      parameters: ["pointer"],
      result: "void",
    },
    IUnknown_GetWindow: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IUnknown_SetSite: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IUnknown_GetSite: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IUnknown_QueryService: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IStream_Read: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    IStream_Write: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    IStream_Reset: {
      parameters: ["pointer"],
      result: "pointer",
    },
    IStream_Size: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ConnectToConnectionPoint: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    IStream_ReadPidl: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IStream_WritePidl: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IStream_ReadStr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    IStream_WriteStr: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    IStream_Copy: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    SHGetViewStatePropertyBag: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHFormatDateTimeA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "i32",
    },
    SHFormatDateTimeW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "i32",
    },
    SHAnsiToUnicode: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SHAnsiToAnsi: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SHUnicodeToAnsi: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SHUnicodeToUnicode: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
    },
    SHMessageBoxCheckA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "i32", "buffer"],
      result: "i32",
    },
    SHMessageBoxCheckW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "i32", "buffer"],
      result: "i32",
    },
    SHSendMessageBroadcastA: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHSendMessageBroadcastW: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHStripMneumonicA: {
      parameters: ["buffer"],
      result: "pointer",
    },
    SHStripMneumonicW: {
      parameters: ["buffer"],
      result: "pointer",
    },
    IsOS: {
      parameters: ["u32"],
      result: "i32",
    },
    SHGlobalCounterGetValue: {
      parameters: ["i32"],
      result: "i32",
    },
    SHGlobalCounterIncrement: {
      parameters: ["i32"],
      result: "i32",
    },
    SHGlobalCounterDecrement: {
      parameters: ["i32"],
      result: "i32",
    },
    SHAllocShared: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    SHFreeShared: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SHLockShared: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SHUnlockShared: {
      parameters: ["pointer"],
      result: "i32",
    },
    WhichPlatform: {
      parameters: [],
      result: "u32",
    },
    QISearch: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SHIsLowMemoryMachine: {
      parameters: ["u32"],
      result: "i32",
    },
    GetMenuPosFromID: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SHGetInverseCMAP: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SHAutoComplete: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SHCreateThreadRef: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SHSetThreadRef: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHGetThreadRef: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SHSkipJunction: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SHCreateThread: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SHCreateThreadWithHandle: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SHReleaseThreadRef: {
      parameters: [],
      result: "pointer",
    },
    SHCreateShellPalette: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ColorRGBToHLS: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ColorHLSToRGB: {
      parameters: ["u16", "u16", "u16"],
      result: "pointer",
    },
    ColorAdjustLuma: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    IsInternetESCEnabled: {
      parameters: [],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libhlink_dll = Deno.dlopen("hlink.dll", {
    HlinkCreateFromMoniker: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkCreateFromString: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkCreateFromData: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkQueryCreateFromData: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HlinkClone: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    HlinkCreateBrowseContext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkNavigateToStringReference: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkNavigate: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkOnNavigate: {
      parameters: ["pointer", "pointer", "u32", "pointer", "buffer", "buffer", "pointer"],
      result: "pointer",
    },
    HlinkUpdateStackItem: {
      parameters: ["pointer", "pointer", "u32", "pointer", "buffer", "buffer"],
      result: "pointer",
    },
    HlinkOnRenameDocument: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkResolveMonikerForData: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkResolveStringForData: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkParseDisplayName: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkCreateExtensionServices: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkPreprocessMoniker: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    OleSaveToStreamEx: {
      parameters: ["pointer", "pointer", "i32"],
      result: "pointer",
    },
    HlinkSetSpecialReference: {
      parameters: ["u32", "buffer"],
      result: "pointer",
    },
    HlinkGetSpecialReference: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
    HlinkCreateShortcut: {
      parameters: ["u32", "pointer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    HlinkCreateShortcutFromMoniker: {
      parameters: ["u32", "pointer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    HlinkCreateShortcutFromString: {
      parameters: ["u32", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    HlinkResolveShortcut: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkResolveShortcutToMoniker: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkResolveShortcutToString: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    HlinkIsShortcut: {
      parameters: ["buffer"],
      result: "pointer",
    },
    HlinkGetValueFromParams: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "pointer",
    },
    HlinkTranslateURL: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_path_l1_1_0_dll = Deno.dlopen("api-ms-win-core-path-l1-1-0.dll", {
    PathIsUNCEx: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    PathCchIsRoot: {
      parameters: ["buffer"],
      result: "i32",
    },
    PathCchAddBackslashEx: {
      parameters: ["buffer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    PathCchAddBackslash: {
      parameters: ["buffer", "usize"],
      result: "pointer",
    },
    PathCchRemoveBackslashEx: {
      parameters: ["buffer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    PathCchRemoveBackslash: {
      parameters: ["buffer", "usize"],
      result: "pointer",
    },
    PathCchSkipRoot: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PathCchStripToRoot: {
      parameters: ["buffer", "usize"],
      result: "pointer",
    },
    PathCchRemoveFileSpec: {
      parameters: ["buffer", "usize"],
      result: "pointer",
    },
    PathCchFindExtension: {
      parameters: ["buffer", "usize", "pointer"],
      result: "pointer",
    },
    PathCchAddExtension: {
      parameters: ["buffer", "usize", "buffer"],
      result: "pointer",
    },
    PathCchRenameExtension: {
      parameters: ["buffer", "usize", "buffer"],
      result: "pointer",
    },
    PathCchRemoveExtension: {
      parameters: ["buffer", "usize"],
      result: "pointer",
    },
    PathCchCanonicalizeEx: {
      parameters: ["buffer", "usize", "buffer", "u32"],
      result: "pointer",
    },
    PathCchCanonicalize: {
      parameters: ["buffer", "usize", "buffer"],
      result: "pointer",
    },
    PathCchCombineEx: {
      parameters: ["buffer", "usize", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    PathCchCombine: {
      parameters: ["buffer", "usize", "buffer", "buffer"],
      result: "pointer",
    },
    PathCchAppendEx: {
      parameters: ["buffer", "usize", "buffer", "u32"],
      result: "pointer",
    },
    PathCchAppend: {
      parameters: ["buffer", "usize", "buffer"],
      result: "pointer",
    },
    PathCchStripPrefix: {
      parameters: ["buffer", "usize"],
      result: "pointer",
    },
    PathAllocCombine: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    PathAllocCanonicalize: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_psm_appnotify_l1_1_0_dll = Deno.dlopen("api-ms-win-core-psm-appnotify-l1-1-0.dll", {
    RegisterAppStateChangeNotification: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    UnregisterAppStateChangeNotification: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_core_psm_appnotify_l1_1_1_dll = Deno.dlopen("api-ms-win-core-psm-appnotify-l1-1-1.dll", {
    RegisterAppConstrainedChangeNotification: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    UnregisterAppConstrainedChangeNotification: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function LoadUserProfileA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.LoadUserProfileA(util.toPointer(hToken), util.toPointer(lpProfileInfo)));
}

export function LoadUserProfileW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpProfileInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.LoadUserProfileW(util.toPointer(hToken), util.toPointer(lpProfileInfo)));
}

export function UnloadUserProfile(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  hProfile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.UnloadUserProfile(util.toPointer(hToken), util.toPointer(hProfile)));
}

export function GetProfilesDirectoryA(
  lpProfileDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetProfilesDirectoryA(util.pstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetProfilesDirectoryW(
  lpProfileDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetProfilesDirectoryW(util.pwstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetProfileType(
  dwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetProfileType(util.toPointer(dwFlags)));
}

export function DeleteProfileA(
  lpSidString: string | null /* Windows.Win32.Foundation.PSTR */,
  lpProfilePath: string | null /* Windows.Win32.Foundation.PSTR */,
  lpComputerName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.DeleteProfileA(util.pstrToFfi(lpSidString), util.pstrToFfi(lpProfilePath), util.pstrToFfi(lpComputerName)));
}

export function DeleteProfileW(
  lpSidString: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProfilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpComputerName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.DeleteProfileW(util.pwstrToFfi(lpSidString), util.pwstrToFfi(lpProfilePath), util.pwstrToFfi(lpComputerName)));
}

export function CreateProfile(
  pszUserSid: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszUserName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszProfilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchProfilePath: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUSERENV_dll.CreateProfile(util.pwstrToFfi(pszUserSid), util.pwstrToFfi(pszUserName), util.pwstrToFfi(pszProfilePath), cchProfilePath));
}

export function GetDefaultUserProfileDirectoryA(
  lpProfileDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetDefaultUserProfileDirectoryA(util.pstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetDefaultUserProfileDirectoryW(
  lpProfileDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetDefaultUserProfileDirectoryW(util.pwstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetAllUsersProfileDirectoryA(
  lpProfileDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetAllUsersProfileDirectoryA(util.pstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetAllUsersProfileDirectoryW(
  lpProfileDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetAllUsersProfileDirectoryW(util.pwstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetUserProfileDirectoryA(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpProfileDir: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetUserProfileDirectoryA(util.toPointer(hToken), util.pstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function GetUserProfileDirectoryW(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpProfileDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSERENV_dll.GetUserProfileDirectoryW(util.toPointer(hToken), util.pwstrToFfi(lpProfileDir), util.toPointer(lpcchSize)));
}

export function SetWindowSubclass(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pfnSubclass: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.SUBCLASSPROC */,
  uIdSubclass: Deno.PointerValue /* usize */,
  dwRefData: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.SetWindowSubclass(util.hwndToFfi(hWnd), util.toPointer(pfnSubclass), uIdSubclass, dwRefData));
}

export function GetWindowSubclass(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pfnSubclass: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.SUBCLASSPROC */,
  uIdSubclass: Deno.PointerValue /* usize */,
  pdwRefData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.GetWindowSubclass(util.hwndToFfi(hWnd), util.toPointer(pfnSubclass), uIdSubclass, util.toPointer(pdwRefData)));
}

export function RemoveWindowSubclass(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pfnSubclass: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.SUBCLASSPROC */,
  uIdSubclass: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.RemoveWindowSubclass(util.hwndToFfi(hWnd), util.toPointer(pfnSubclass), uIdSubclass));
}

export function DefSubclassProc(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uMsg: number /* u32 */,
  wParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libCOMCTL32_dll.DefSubclassProc(util.hwndToFfi(hWnd), uMsg, util.toPointer(wParam), util.toPointer(lParam)));
}

export function SetWindowContextHelpId(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetWindowContextHelpId(util.hwndToFfi(param0), param1));
}

export function GetWindowContextHelpId(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libUSER32_dll.GetWindowContextHelpId(util.hwndToFfi(param0));
}

export function SetMenuContextHelpId(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  param1: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetMenuContextHelpId(util.toPointer(param0), param1));
}

export function GetMenuContextHelpId(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
): number /* u32 */ {
  return libUSER32_dll.GetMenuContextHelpId(util.toPointer(param0));
}

export function WinHelpA(
  hWndMain: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszHelp: string | null /* Windows.Win32.Foundation.PSTR */,
  uCommand: number /* u32 */,
  dwData: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.WinHelpA(util.hwndToFfi(hWndMain), util.pstrToFfi(lpszHelp), uCommand, dwData));
}

export function WinHelpW(
  hWndMain: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszHelp: string | null /* Windows.Win32.Foundation.PWSTR */,
  uCommand: number /* u32 */,
  dwData: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.WinHelpW(util.hwndToFfi(hWndMain), util.pwstrToFfi(lpszHelp), uCommand, dwData));
}

export function SHSimpleIDListFromPath(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSimpleIDListFromPath(util.pwstrToFfi(pszPath)));
}

export function SHCreateItemFromIDList(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateItemFromIDList(util.toPointer(pidl), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateItemFromParsingName(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateItemFromParsingName(util.pwstrToFfi(pszPath), util.toPointer(pbc), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateItemWithParent(
  pidlParent: Deno.PointerValue | Uint8Array | null /* ptr */,
  psfParent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvItem: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateItemWithParent(util.toPointer(pidlParent), util.toPointer(psfParent), util.toPointer(pidl), util.toPointer(riid), util.toPointer(ppvItem)));
}

export function SHCreateItemFromRelativeName(
  psiParent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateItemFromRelativeName(util.toPointer(psiParent), util.pwstrToFfi(pszName), util.toPointer(pbc), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateItemInKnownFolder(
  kfid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwKFFlags: number /* u32 */,
  pszItem: string | null /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateItemInKnownFolder(util.toPointer(kfid), dwKFFlags, util.pwstrToFfi(pszItem), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHGetIDListFromObject(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetIDListFromObject(util.toPointer(punk), util.toPointer(ppidl)));
}

export function SHGetItemFromObject(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetItemFromObject(util.toPointer(punk), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHGetNameFromIDList(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sigdnName: SIGDN /* Windows.Win32.UI.Shell.SIGDN */,
  ppszName: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetNameFromIDList(util.toPointer(pidl), sigdnName, util.toPointer(ppszName)));
}

export function SHGetItemFromDataObject(
  pdtobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  dwFlags: DATAOBJ_GET_ITEM_FLAGS /* Windows.Win32.UI.Shell.DATAOBJ_GET_ITEM_FLAGS */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetItemFromDataObject(util.toPointer(pdtobj), dwFlags, util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateShellItemArray(
  pidlParent: Deno.PointerValue | Uint8Array | null /* ptr */,
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  cidl: number /* u32 */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsiItemArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellItemArray(util.toPointer(pidlParent), util.toPointer(psf), cidl, util.toPointer(ppidl), util.toPointer(ppsiItemArray)));
}

export function SHCreateShellItemArrayFromDataObject(
  pdo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellItemArrayFromDataObject(util.toPointer(pdo), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateShellItemArrayFromIDLists(
  cidl: number /* u32 */,
  rgpidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsiItemArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellItemArrayFromIDLists(cidl, util.toPointer(rgpidl), util.toPointer(ppsiItemArray)));
}

export function SHCreateShellItemArrayFromShellItem(
  psi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellItemArrayFromShellItem(util.toPointer(psi), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateAssociationRegistration(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateAssociationRegistration(util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateDefaultExtractIcon(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateDefaultExtractIcon(util.toPointer(riid), util.toPointer(ppv)));
}

export function SetCurrentProcessExplicitAppUserModelID(
  AppID: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SetCurrentProcessExplicitAppUserModelID(util.pwstrToFfi(AppID)));
}

export function GetCurrentProcessExplicitAppUserModelID(
  AppID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.GetCurrentProcessExplicitAppUserModelID(util.toPointer(AppID)));
}

export function SHGetTemporaryPropertyForItem(
  psi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  propkey: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetTemporaryPropertyForItem(util.toPointer(psi), util.toPointer(propkey), util.toPointer(ppropvar)));
}

export function SHSetTemporaryPropertyForItem(
  psi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  propkey: Deno.PointerValue | Uint8Array | null /* ptr */,
  propvar: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetTemporaryPropertyForItem(util.toPointer(psi), util.toPointer(propkey), util.toPointer(propvar)));
}

export function SHShowManageLibraryUI(
  psiLibrary: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszInstruction: string | null /* Windows.Win32.Foundation.PWSTR */,
  lmdOptions: LIBRARYMANAGEDIALOGOPTIONS /* Windows.Win32.UI.Shell.LIBRARYMANAGEDIALOGOPTIONS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHShowManageLibraryUI(util.toPointer(psiLibrary), util.hwndToFfi(hwndOwner), util.pwstrToFfi(pszTitle), util.pwstrToFfi(pszInstruction), lmdOptions));
}

export function SHResolveLibrary(
  psiLibrary: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHResolveLibrary(util.toPointer(psiLibrary)));
}

export function SHAssocEnumHandlers(
  pszExtra: string | null /* Windows.Win32.Foundation.PWSTR */,
  afFilter: ASSOC_FILTER /* Windows.Win32.UI.Shell.ASSOC_FILTER */,
  ppEnumHandler: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHAssocEnumHandlers(util.pwstrToFfi(pszExtra), afFilter, util.toPointer(ppEnumHandler)));
}

export function SHAssocEnumHandlersForProtocolByApplication(
  protocol: string | null /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumHandlers: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHAssocEnumHandlersForProtocolByApplication(util.pwstrToFfi(protocol), util.toPointer(riid), util.toPointer(enumHandlers)));
}

export function HMONITOR_UserSize(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32_dll.HMONITOR_UserSize(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HMONITOR_UserMarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32_dll.HMONITOR_UserMarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMONITOR_UserUnmarshal(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32_dll.HMONITOR_UserUnmarshal(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMONITOR_UserFree(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32_dll.HMONITOR_UserFree(util.toPointer(param0), util.toPointer(param1));
}

export function HMONITOR_UserSize64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: number /* u32 */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libOLE32_dll.HMONITOR_UserSize64(util.toPointer(param0), param1, util.toPointer(param2));
}

export function HMONITOR_UserMarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32_dll.HMONITOR_UserMarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMONITOR_UserUnmarshal64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libOLE32_dll.HMONITOR_UserUnmarshal64(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function HMONITOR_UserFree64(
  param0: Deno.PointerValue | Uint8Array | null /* ptr */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLE32_dll.HMONITOR_UserFree64(util.toPointer(param0), util.toPointer(param1));
}

export function SHCreateDefaultPropertiesOp(
  psi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  ppFileOp: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateDefaultPropertiesOp(util.toPointer(psi), util.toPointer(ppFileOp)));
}

export function SHSetDefaultProperties(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  psi: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellItem */,
  dwFileOpFlags: number /* u32 */,
  pfops: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IFileOperationProgressSink */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetDefaultProperties(util.hwndToFfi(hwnd), util.toPointer(psi), dwFileOpFlags, util.toPointer(pfops)));
}

export function SHGetMalloc(
  ppMalloc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetMalloc(util.toPointer(ppMalloc)));
}

export function SHAlloc(
  cb: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.SHAlloc(cb));
}

export function SHFree(
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSHELL32_dll.SHFree(util.toPointer(pv));
}

export function SHGetIconOverlayIndexA(
  pszIconPath: string | null /* Windows.Win32.Foundation.PSTR */,
  iIconIndex: number /* i32 */,
): number /* i32 */ {
  return libSHELL32_dll.SHGetIconOverlayIndexA(util.pstrToFfi(pszIconPath), iIconIndex);
}

export function SHGetIconOverlayIndexW(
  pszIconPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  iIconIndex: number /* i32 */,
): number /* i32 */ {
  return libSHELL32_dll.SHGetIconOverlayIndexW(util.pwstrToFfi(pszIconPath), iIconIndex);
}

export function ILClone(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILClone(util.toPointer(pidl)));
}

export function ILCloneFirst(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILCloneFirst(util.toPointer(pidl)));
}

export function ILCombine(
  pidl1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl2: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILCombine(util.toPointer(pidl1), util.toPointer(pidl2)));
}

export function ILFree(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSHELL32_dll.ILFree(util.toPointer(pidl));
}

export function ILGetNext(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILGetNext(util.toPointer(pidl)));
}

export function ILGetSize(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSHELL32_dll.ILGetSize(util.toPointer(pidl));
}

export function ILFindChild(
  pidlParent: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidlChild: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILFindChild(util.toPointer(pidlParent), util.toPointer(pidlChild)));
}

export function ILFindLastID(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILFindLastID(util.toPointer(pidl)));
}

export function ILRemoveLastID(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.ILRemoveLastID(util.toPointer(pidl)));
}

export function ILIsEqual(
  pidl1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl2: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.ILIsEqual(util.toPointer(pidl1), util.toPointer(pidl2)));
}

export function ILIsParent(
  pidl1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl2: Deno.PointerValue | Uint8Array | null /* ptr */,
  fImmediate: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.ILIsParent(util.toPointer(pidl1), util.toPointer(pidl2), util.boolToFfi(fImmediate)));
}

export function ILSaveToStream(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.ILSaveToStream(util.toPointer(pstm), util.toPointer(pidl)));
}

export function ILLoadFromStreamEx(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.ILLoadFromStreamEx(util.toPointer(pstm), util.toPointer(pidl)));
}

export function ILCreateFromPathA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILCreateFromPathA(util.pstrToFfi(pszPath)));
}

export function ILCreateFromPathW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILCreateFromPathW(util.pwstrToFfi(pszPath)));
}

export function SHILCreateFromPath(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  rgfInOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHILCreateFromPath(util.pwstrToFfi(pszPath), util.toPointer(ppidl), util.toPointer(rgfInOut)));
}

export function ILAppendID(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pmkid: Deno.PointerValue | Uint8Array | null /* ptr */,
  fAppend: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.ILAppendID(util.toPointer(pidl), util.toPointer(pmkid), util.boolToFfi(fAppend)));
}

export function SHGetPathFromIDListEx(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: number /* u32 */,
  uOpts: GPFIDL_FLAGS /* Windows.Win32.UI.Shell.GPFIDL_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetPathFromIDListEx(util.toPointer(pidl), util.pwstrToFfi(pszPath), cchPath, uOpts));
}

export function SHGetPathFromIDListA(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetPathFromIDListA(util.toPointer(pidl), util.pstrToFfi(pszPath)));
}

export function SHGetPathFromIDListW(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetPathFromIDListW(util.toPointer(pidl), util.pwstrToFfi(pszPath)));
}

export function SHCreateDirectory(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHELL32_dll.SHCreateDirectory(util.hwndToFfi(hwnd), util.pwstrToFfi(pszPath));
}

export function SHCreateDirectoryExA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.SHCreateDirectoryExA(util.hwndToFfi(hwnd), util.pstrToFfi(pszPath), util.toPointer(psa));
}

export function SHCreateDirectoryExW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  psa: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.SHCreateDirectoryExW(util.hwndToFfi(hwnd), util.pwstrToFfi(pszPath), util.toPointer(psa));
}

export function SHOpenFolderAndSelectItems(
  pidlFolder: Deno.PointerValue | Uint8Array | null /* ptr */,
  cidl: number /* u32 */,
  apidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHOpenFolderAndSelectItems(util.toPointer(pidlFolder), cidl, util.toPointer(apidl), dwFlags));
}

export function SHCreateShellItem(
  pidlParent: Deno.PointerValue | Uint8Array | null /* ptr */,
  psfParent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellItem(util.toPointer(pidlParent), util.toPointer(psfParent), util.toPointer(pidl), util.toPointer(ppsi)));
}

export function SHGetSpecialFolderLocation(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetSpecialFolderLocation(util.hwndToFfi(hwnd), csidl, util.toPointer(ppidl)));
}

export function SHCloneSpecialIDList(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  fCreate: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCloneSpecialIDList(util.hwndToFfi(hwnd), csidl, util.boolToFfi(fCreate)));
}

export function SHGetSpecialFolderPathA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  csidl: number /* i32 */,
  fCreate: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetSpecialFolderPathA(util.hwndToFfi(hwnd), util.pstrToFfi(pszPath), csidl, util.boolToFfi(fCreate)));
}

export function SHGetSpecialFolderPathW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  csidl: number /* i32 */,
  fCreate: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetSpecialFolderPathW(util.hwndToFfi(hwnd), util.pwstrToFfi(pszPath), csidl, util.boolToFfi(fCreate)));
}

export function SHFlushSFCache(): void /* void */ {
  return libSHELL32_dll.SHFlushSFCache();
}

export function SHGetFolderPathA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetFolderPathA(util.hwndToFfi(hwnd), csidl, util.toPointer(hToken), dwFlags, util.pstrToFfi(pszPath)));
}

export function SHGetFolderPathW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetFolderPathW(util.hwndToFfi(hwnd), csidl, util.toPointer(hToken), dwFlags, util.pwstrToFfi(pszPath)));
}

export function SHGetFolderLocation(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetFolderLocation(util.hwndToFfi(hwnd), csidl, util.toPointer(hToken), dwFlags, util.toPointer(ppidl)));
}

export function SHSetFolderPathA(
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetFolderPathA(csidl, util.toPointer(hToken), dwFlags, util.pstrToFfi(pszPath)));
}

export function SHSetFolderPathW(
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetFolderPathW(csidl, util.toPointer(hToken), dwFlags, util.pwstrToFfi(pszPath)));
}

export function SHGetFolderPathAndSubDirA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  pszSubDir: string | null /* Windows.Win32.Foundation.PSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetFolderPathAndSubDirA(util.hwndToFfi(hwnd), csidl, util.toPointer(hToken), dwFlags, util.pstrToFfi(pszSubDir), util.pstrToFfi(pszPath)));
}

export function SHGetFolderPathAndSubDirW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  csidl: number /* i32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwFlags: number /* u32 */,
  pszSubDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetFolderPathAndSubDirW(util.hwndToFfi(hwnd), csidl, util.toPointer(hToken), dwFlags, util.pwstrToFfi(pszSubDir), util.pwstrToFfi(pszPath)));
}

export function SHGetKnownFolderIDList(
  rfid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetKnownFolderIDList(util.toPointer(rfid), dwFlags, util.toPointer(hToken), util.toPointer(ppidl)));
}

export function SHSetKnownFolderPath(
  rfid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetKnownFolderPath(util.toPointer(rfid), dwFlags, util.toPointer(hToken), util.pwstrToFfi(pszPath)));
}

export function SHGetKnownFolderPath(
  rfid: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: KNOWN_FOLDER_FLAG /* Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ppszPath: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetKnownFolderPath(util.toPointer(rfid), dwFlags, util.toPointer(hToken), util.toPointer(ppszPath)));
}

export function SHGetKnownFolderItem(
  rfid: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: KNOWN_FOLDER_FLAG /* Windows.Win32.UI.Shell.KNOWN_FOLDER_FLAG */,
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetKnownFolderItem(util.toPointer(rfid), flags, util.toPointer(hToken), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHGetSetFolderCustomSettings(
  pfcs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwReadWrite: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetSetFolderCustomSettings(util.toPointer(pfcs), util.pwstrToFfi(pszPath), dwReadWrite));
}

export function SHBrowseForFolderA(
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.SHBrowseForFolderA(util.toPointer(lpbi)));
}

export function SHBrowseForFolderW(
  lpbi: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.SHBrowseForFolderW(util.toPointer(lpbi)));
}

export function SHLoadInProc(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHLoadInProc(util.toPointer(rclsid)));
}

export function SHGetDesktopFolder(
  ppshf: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetDesktopFolder(util.toPointer(ppshf)));
}

export function SHChangeNotify(
  wEventId: SHCNE_ID /* Windows.Win32.UI.Shell.SHCNE_ID */,
  uFlags: SHCNF_FLAGS /* Windows.Win32.UI.Shell.SHCNF_FLAGS */,
  dwItem1: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwItem2: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSHELL32_dll.SHChangeNotify(wEventId, uFlags, util.toPointer(dwItem1), util.toPointer(dwItem2));
}

export function SHAddToRecentDocs(
  uFlags: number /* u32 */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSHELL32_dll.SHAddToRecentDocs(uFlags, util.toPointer(pv));
}

export function SHHandleUpdateImage(
  pidlExtra: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.SHHandleUpdateImage(util.toPointer(pidlExtra));
}

export function SHUpdateImageA(
  pszHashItem: string | null /* Windows.Win32.Foundation.PSTR */,
  iIndex: number /* i32 */,
  uFlags: number /* u32 */,
  iImageIndex: number /* i32 */,
): void /* void */ {
  return libSHELL32_dll.SHUpdateImageA(util.pstrToFfi(pszHashItem), iIndex, uFlags, iImageIndex);
}

export function SHUpdateImageW(
  pszHashItem: string | null /* Windows.Win32.Foundation.PWSTR */,
  iIndex: number /* i32 */,
  uFlags: number /* u32 */,
  iImageIndex: number /* i32 */,
): void /* void */ {
  return libSHELL32_dll.SHUpdateImageW(util.pwstrToFfi(pszHashItem), iIndex, uFlags, iImageIndex);
}

export function SHChangeNotifyRegister(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  fSources: SHCNRF_SOURCE /* Windows.Win32.UI.Shell.SHCNRF_SOURCE */,
  fEvents: number /* i32 */,
  wMsg: number /* u32 */,
  cEntries: number /* i32 */,
  pshcne: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSHELL32_dll.SHChangeNotifyRegister(util.hwndToFfi(hwnd), fSources, fEvents, wMsg, cEntries, util.toPointer(pshcne));
}

export function SHChangeNotifyDeregister(
  ulID: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHChangeNotifyDeregister(ulID));
}

export function SHChangeNotification_Lock(
  hChange: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProcId: number /* u32 */,
  pppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  plEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.UI.Shell.ShFindChangeNotificationHandle */ {
  return util.pointerFromFfi(libSHELL32_dll.SHChangeNotification_Lock(util.toPointer(hChange), dwProcId, util.toPointer(pppidl), util.toPointer(plEvent)));
}

export function SHChangeNotification_Unlock(
  hLock: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHChangeNotification_Unlock(util.toPointer(hLock)));
}

export function SHGetRealIDL(
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidlSimple: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppidlReal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetRealIDL(util.toPointer(psf), util.toPointer(pidlSimple), util.toPointer(ppidlReal)));
}

export function SHGetInstanceExplorer(
  ppunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetInstanceExplorer(util.toPointer(ppunk)));
}

export function SHGetDataFromIDListA(
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  nFormat: SHGDFIL_FORMAT /* Windows.Win32.UI.Shell.SHGDFIL_FORMAT */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetDataFromIDListA(util.toPointer(psf), util.toPointer(pidl), nFormat, util.toPointer(pv), cb));
}

export function SHGetDataFromIDListW(
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  nFormat: SHGDFIL_FORMAT /* Windows.Win32.UI.Shell.SHGDFIL_FORMAT */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetDataFromIDListW(util.toPointer(psf), util.toPointer(pidl), nFormat, util.toPointer(pv), cb));
}

export function RestartDialog(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPrompt: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwReturn: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.RestartDialog(util.hwndToFfi(hwnd), util.pwstrToFfi(pszPrompt), dwReturn);
}

export function RestartDialogEx(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszPrompt: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwReturn: number /* u32 */,
  dwReasonCode: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.RestartDialogEx(util.hwndToFfi(hwnd), util.pwstrToFfi(pszPrompt), dwReturn, dwReasonCode);
}

export function SHCoCreateInstance(
  pszCLSID: string | null /* Windows.Win32.Foundation.PWSTR */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCoCreateInstance(util.pwstrToFfi(pszCLSID), util.toPointer(pclsid), util.toPointer(pUnkOuter), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHCreateDataObject(
  pidlFolder: Deno.PointerValue | Uint8Array | null /* ptr */,
  cidl: number /* u32 */,
  apidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdtInner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateDataObject(util.toPointer(pidlFolder), cidl, util.toPointer(apidl), util.toPointer(pdtInner), util.toPointer(riid), util.toPointer(ppv)));
}

export function CIDLData_CreateFromIDArray(
  pidlFolder: Deno.PointerValue | Uint8Array | null /* ptr */,
  cidl: number /* u32 */,
  apidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppdtobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.CIDLData_CreateFromIDArray(util.toPointer(pidlFolder), cidl, util.toPointer(apidl), util.toPointer(ppdtobj)));
}

export function SHCreateStdEnumFmtEtc(
  cfmt: number /* u32 */,
  afmt: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppenumFormatEtc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateStdEnumFmtEtc(cfmt, util.toPointer(afmt), util.toPointer(ppenumFormatEtc)));
}

export function SHDoDragDrop(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pdata: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  pdsrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Ole.IDropSource */,
  dwEffect: DROPEFFECT /* Windows.Win32.System.Ole.DROPEFFECT */,
  pdwEffect: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHDoDragDrop(util.hwndToFfi(hwnd), util.toPointer(pdata), util.toPointer(pdsrc), dwEffect, util.toPointer(pdwEffect)));
}

export function DAD_SetDragImage(
  him: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Controls.HIMAGELIST */,
  pptOffset: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_SetDragImage(util.toPointer(him), util.toPointer(pptOffset)));
}

export function DAD_DragEnterEx(
  hwndTarget: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ptStart: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.POINT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_DragEnterEx(util.hwndToFfi(hwndTarget), util.toPointer(ptStart)));
}

export function DAD_DragEnterEx2(
  hwndTarget: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ptStart: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.POINT */,
  pdtObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_DragEnterEx2(util.hwndToFfi(hwndTarget), util.toPointer(ptStart), util.toPointer(pdtObject)));
}

export function DAD_ShowDragImage(
  fShow: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_ShowDragImage(util.boolToFfi(fShow)));
}

export function DAD_DragMove(
  pt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.POINT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_DragMove(util.toPointer(pt)));
}

export function DAD_DragLeave(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_DragLeave());
}

export function DAD_AutoScroll(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pad: Deno.PointerValue | Uint8Array | null /* ptr */,
  pptNow: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DAD_AutoScroll(util.hwndToFfi(hwnd), util.toPointer(pad), util.toPointer(pptNow)));
}

export function ReadCabinetState(
  pcs: Deno.PointerValue | Uint8Array | null /* ptr */,
  cLength: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.ReadCabinetState(util.toPointer(pcs), cLength));
}

export function WriteCabinetState(
  pcs: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.WriteCabinetState(util.toPointer(pcs)));
}

export function PathMakeUniqueName(
  pszUniqueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
  pszTemplate: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszLongPlate: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDir: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.PathMakeUniqueName(util.pwstrToFfi(pszUniqueName), cchMax, util.pwstrToFfi(pszTemplate), util.pwstrToFfi(pszLongPlate), util.pwstrToFfi(pszDir)));
}

export function PathIsExe(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.PathIsExe(util.pwstrToFfi(pszPath)));
}

export function PathCleanupSpec(
  pszDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSpec: string | null /* Windows.Win32.Foundation.PWSTR */,
): PCS_RET /* Windows.Win32.UI.Shell.PCS_RET */ {
  return libSHELL32_dll.PathCleanupSpec(util.pwstrToFfi(pszDir), util.pwstrToFfi(pszSpec));
}

export function PathResolve(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dirs: Deno.PointerValue | Uint8Array | null /* ptr */,
  fFlags: PRF_FLAGS /* Windows.Win32.UI.Shell.PRF_FLAGS */,
): number /* i32 */ {
  return libSHELL32_dll.PathResolve(util.pwstrToFfi(pszPath), util.toPointer(dirs), fFlags);
}

export function GetFileNameFromBrowse(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszFilePath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchFilePath: number /* u32 */,
  pszWorkingDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDefExt: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszFilters: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.GetFileNameFromBrowse(util.hwndToFfi(hwnd), util.pwstrToFfi(pszFilePath), cchFilePath, util.pwstrToFfi(pszWorkingDir), util.pwstrToFfi(pszDefExt), util.pwstrToFfi(pszFilters), util.pwstrToFfi(pszTitle)));
}

export function DriveType(
  iDrive: number /* i32 */,
): number /* i32 */ {
  return libSHELL32_dll.DriveType(iDrive);
}

export function RealDriveType(
  iDrive: number /* i32 */,
  fOKToHitNet: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libSHELL32_dll.RealDriveType(iDrive, util.boolToFfi(fOKToHitNet));
}

export function IsNetDrive(
  iDrive: number /* i32 */,
): number /* i32 */ {
  return libSHELL32_dll.IsNetDrive(iDrive);
}

export function Shell_MergeMenus(
  hmDst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  hmSrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  uInsert: number /* u32 */,
  uIDAdjust: number /* u32 */,
  uIDAdjustMax: number /* u32 */,
  uFlags: MM_FLAGS /* Windows.Win32.UI.Shell.MM_FLAGS */,
): number /* u32 */ {
  return libSHELL32_dll.Shell_MergeMenus(util.toPointer(hmDst), util.toPointer(hmSrc), uInsert, uIDAdjust, uIDAdjustMax, uFlags);
}

export function SHObjectProperties(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  shopObjectType: SHOP_TYPE /* Windows.Win32.UI.Shell.SHOP_TYPE */,
  pszObjectName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPropertyPage: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHObjectProperties(util.hwndToFfi(hwnd), shopObjectType, util.pwstrToFfi(pszObjectName), util.pwstrToFfi(pszPropertyPage)));
}

export function SHFormatDrive(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  drive: number /* u32 */,
  fmtID: SHFMT_ID /* Windows.Win32.UI.Shell.SHFMT_ID */,
  options: SHFMT_OPT /* Windows.Win32.UI.Shell.SHFMT_OPT */,
): number /* u32 */ {
  return libSHELL32_dll.SHFormatDrive(util.hwndToFfi(hwnd), drive, fmtID, options);
}

export function SHDestroyPropSheetExtArray(
  hpsxa: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HPSXA */,
): void /* void */ {
  return libSHELL32_dll.SHDestroyPropSheetExtArray(util.toPointer(hpsxa));
}

export function SHAddFromPropSheetExtArray(
  hpsxa: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HPSXA */,
  lpfnAddPage: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Controls.LPFNSVADDPROPSHEETPAGE */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): number /* u32 */ {
  return libSHELL32_dll.SHAddFromPropSheetExtArray(util.toPointer(hpsxa), util.toPointer(lpfnAddPage), util.toPointer(lParam));
}

export function SHReplaceFromPropSheetExtArray(
  hpsxa: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HPSXA */,
  uPageID: number /* u32 */,
  lpfnReplaceWith: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Controls.LPFNSVADDPROPSHEETPAGE */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): number /* u32 */ {
  return libSHELL32_dll.SHReplaceFromPropSheetExtArray(util.toPointer(hpsxa), uPageID, util.toPointer(lpfnReplaceWith), util.toPointer(lParam));
}

export function OpenRegStream(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubkey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */ {
  return util.pointerFromFfi(libSHELL32_dll.OpenRegStream(util.toPointer(hkey), util.pwstrToFfi(pszSubkey), util.pwstrToFfi(pszValue), grfMode));
}

export function SHFindFiles(
  pidlFolder: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidlSaveFile: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHFindFiles(util.toPointer(pidlFolder), util.toPointer(pidlSaveFile)));
}

export function PathGetShortPath(
  pszLongPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHELL32_dll.PathGetShortPath(util.pwstrToFfi(pszLongPath));
}

export function PathYetAnotherMakeUniqueName(
  pszUniqueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszShort: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszFileSpec: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.PathYetAnotherMakeUniqueName(util.pwstrToFfi(pszUniqueName), util.pwstrToFfi(pszPath), util.pwstrToFfi(pszShort), util.pwstrToFfi(pszFileSpec)));
}

export function Win32DeleteFile(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.Win32DeleteFile(util.pwstrToFfi(pszPath)));
}

export function SHRestricted(
  rest: RESTRICTIONS /* Windows.Win32.UI.Shell.RESTRICTIONS */,
): number /* u32 */ {
  return libSHELL32_dll.SHRestricted(rest);
}

export function SignalFileOpen(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SignalFileOpen(util.toPointer(pidl)));
}

export function AssocGetDetailsOfPropKey(
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pkey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfFoundPropKey: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.AssocGetDetailsOfPropKey(util.toPointer(psf), util.toPointer(pidl), util.toPointer(pkey), util.toPointer(pv), util.toPointer(pfFoundPropKey)));
}

export function SHStartNetConnectionDialogW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszRemoteName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHStartNetConnectionDialogW(util.hwndToFfi(hwnd), util.pwstrToFfi(pszRemoteName), dwType));
}

export function SHDefExtractIconA(
  pszIconFile: string | null /* Windows.Win32.Foundation.PSTR */,
  iIndex: number /* i32 */,
  uFlags: number /* u32 */,
  phiconLarge: Deno.PointerValue | Uint8Array | null /* ptr */,
  phiconSmall: Deno.PointerValue | Uint8Array | null /* ptr */,
  nIconSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHDefExtractIconA(util.pstrToFfi(pszIconFile), iIndex, uFlags, util.toPointer(phiconLarge), util.toPointer(phiconSmall), nIconSize));
}

export function SHDefExtractIconW(
  pszIconFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  iIndex: number /* i32 */,
  uFlags: number /* u32 */,
  phiconLarge: Deno.PointerValue | Uint8Array | null /* ptr */,
  phiconSmall: Deno.PointerValue | Uint8Array | null /* ptr */,
  nIconSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHDefExtractIconW(util.pwstrToFfi(pszIconFile), iIndex, uFlags, util.toPointer(phiconLarge), util.toPointer(phiconSmall), nIconSize));
}

export function SHOpenWithDialog(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  poainfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHOpenWithDialog(util.hwndToFfi(hwndParent), util.toPointer(poainfo)));
}

export function Shell_GetImageLists(
  phiml: Deno.PointerValue | Uint8Array | null /* ptr */,
  phimlSmall: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.Shell_GetImageLists(util.toPointer(phiml), util.toPointer(phimlSmall)));
}

export function Shell_GetCachedImageIndex(
  pwszIconPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  iIconIndex: number /* i32 */,
  uIconFlags: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.Shell_GetCachedImageIndex(util.pwstrToFfi(pwszIconPath), iIconIndex, uIconFlags);
}

export function Shell_GetCachedImageIndexA(
  pszIconPath: string | null /* Windows.Win32.Foundation.PSTR */,
  iIconIndex: number /* i32 */,
  uIconFlags: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.Shell_GetCachedImageIndexA(util.pstrToFfi(pszIconPath), iIconIndex, uIconFlags);
}

export function Shell_GetCachedImageIndexW(
  pszIconPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  iIconIndex: number /* i32 */,
  uIconFlags: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.Shell_GetCachedImageIndexW(util.pwstrToFfi(pszIconPath), iIconIndex, uIconFlags);
}

export function SHValidateUNC(
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  fConnect: VALIDATEUNC_OPTION /* Windows.Win32.UI.Shell.VALIDATEUNC_OPTION */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHValidateUNC(util.hwndToFfi(hwndOwner), util.pwstrToFfi(pszFile), fConnect));
}

export function SHSetInstanceExplorer(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): void /* void */ {
  return libSHELL32_dll.SHSetInstanceExplorer(util.toPointer(punk));
}

export function IsUserAnAdmin(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.IsUserAnAdmin());
}

export function SHShellFolderView_Message(
  hwndMain: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uMsg: number /* u32 */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHShellFolderView_Message(util.hwndToFfi(hwndMain), uMsg, util.toPointer(lParam)));
}

export function SHCreateShellFolderView(
  pcsfv: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellFolderView(util.toPointer(pcsfv), util.toPointer(ppsv)));
}

export function CDefFolderMenu_Create2(
  pidlFolder: Deno.PointerValue | Uint8Array | null /* ptr */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  cidl: number /* u32 */,
  apidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pfn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.LPFNDFMCALLBACK */,
  nKeys: number /* u32 */,
  ahkeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppcm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.CDefFolderMenu_Create2(util.toPointer(pidlFolder), util.hwndToFfi(hwnd), cidl, util.toPointer(apidl), util.toPointer(psf), util.toPointer(pfn), nKeys, util.toPointer(ahkeys), util.toPointer(ppcm)));
}

export function SHCreateDefaultContextMenu(
  pdcm: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateDefaultContextMenu(util.toPointer(pdcm), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHFind_InitMenuPopup(
  hmenu: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  hwndOwner: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  idCmdFirst: number /* u32 */,
  idCmdLast: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.UI.Shell.IContextMenu */ {
  return util.pointerFromFfi(libSHELL32_dll.SHFind_InitMenuPopup(util.toPointer(hmenu), util.hwndToFfi(hwndOwner), idCmdFirst, idCmdLast));
}

export function SHCreateShellFolderViewEx(
  pcsfv: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateShellFolderViewEx(util.toPointer(pcsfv), util.toPointer(ppsv)));
}

export function SHGetSetSettings(
  lpss: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMask: SSF_MASK /* Windows.Win32.UI.Shell.SSF_MASK */,
  bSet: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libSHELL32_dll.SHGetSetSettings(util.toPointer(lpss), dwMask, util.boolToFfi(bSet));
}

export function SHGetSettings(
  psfs: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMask: number /* u32 */,
): void /* void */ {
  return libSHELL32_dll.SHGetSettings(util.toPointer(psfs), dwMask);
}

export function SHBindToParent(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppidlLast: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHBindToParent(util.toPointer(pidl), util.toPointer(riid), util.toPointer(ppv), util.toPointer(ppidlLast)));
}

export function SHBindToFolderIDListParent(
  psfRoot: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppidlLast: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHBindToFolderIDListParent(util.toPointer(psfRoot), util.toPointer(pidl), util.toPointer(riid), util.toPointer(ppv), util.toPointer(ppidlLast)));
}

export function SHBindToFolderIDListParentEx(
  psfRoot: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppidlLast: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHBindToFolderIDListParentEx(util.toPointer(psfRoot), util.toPointer(pidl), util.toPointer(ppbc), util.toPointer(riid), util.toPointer(ppv), util.toPointer(ppidlLast)));
}

export function SHBindToObject(
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHBindToObject(util.toPointer(psf), util.toPointer(pidl), util.toPointer(pbc), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHParseDisplayName(
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  ppidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  sfgaoIn: number /* u32 */,
  psfgaoOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHParseDisplayName(util.pwstrToFfi(pszName), util.toPointer(pbc), util.toPointer(ppidl), sfgaoIn, util.toPointer(psfgaoOut)));
}

export function SHPathPrepareForWriteA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  punkEnableModless: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHPathPrepareForWriteA(util.hwndToFfi(hwnd), util.toPointer(punkEnableModless), util.pstrToFfi(pszPath), dwFlags));
}

export function SHPathPrepareForWriteW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  punkEnableModless: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHPathPrepareForWriteW(util.hwndToFfi(hwnd), util.toPointer(punkEnableModless), util.pwstrToFfi(pszPath), dwFlags));
}

export function SHCreateFileExtractIconW(
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFileAttributes: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateFileExtractIconW(util.pwstrToFfi(pszFile), dwFileAttributes, util.toPointer(riid), util.toPointer(ppv)));
}

export function SHLimitInputEdit(
  hwndEdit: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  psf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHLimitInputEdit(util.hwndToFfi(hwndEdit), util.toPointer(psf)));
}

export function SHGetAttributesFromDataObject(
  pdo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  dwAttributeMask: number /* u32 */,
  pdwAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcItems: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetAttributesFromDataObject(util.toPointer(pdo), dwAttributeMask, util.toPointer(pdwAttributes), util.toPointer(pcItems)));
}

export function SHMapPIDLToSystemImageListIndex(
  pshf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellFolder */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  piIndexSel: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.SHMapPIDLToSystemImageListIndex(util.toPointer(pshf), util.toPointer(pidl), util.toPointer(piIndexSel));
}

export function SHCLSIDFromString(
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCLSIDFromString(util.pwstrToFfi(psz), util.toPointer(pclsid)));
}

export function PickIconDlg(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszIconPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchIconPath: number /* u32 */,
  piIconIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.PickIconDlg(util.hwndToFfi(hwnd), util.pwstrToFfi(pszIconPath), cchIconPath, util.toPointer(piIconIndex));
}

export function StgMakeUniqueName(
  pstgParent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.StructuredStorage.IStorage */,
  pszFileSpec: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.StgMakeUniqueName(util.toPointer(pstgParent), util.pwstrToFfi(pszFileSpec), grfMode, util.toPointer(riid), util.toPointer(ppv)));
}

export function SHChangeNotifyRegisterThread(
  status: SCNRT_STATUS /* Windows.Win32.UI.Shell.SCNRT_STATUS */,
): void /* void */ {
  return libSHELL32_dll.SHChangeNotifyRegisterThread(status);
}

export function PathQualify(
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHELL32_dll.PathQualify(util.pwstrToFfi(psz));
}

export function PathIsSlowA(
  pszFile: string | null /* Windows.Win32.Foundation.PSTR */,
  dwAttr: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.PathIsSlowA(util.pstrToFfi(pszFile), dwAttr));
}

export function PathIsSlowW(
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAttr: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.PathIsSlowW(util.pwstrToFfi(pszFile), dwAttr));
}

export function SHCreatePropSheetExtArray(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  max_iface: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.UI.Shell.HPSXA */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreatePropSheetExtArray(util.toPointer(hKey), util.pwstrToFfi(pszSubKey), max_iface));
}

export function SHOpenPropSheetW(
  pszCaption: string | null /* Windows.Win32.Foundation.PWSTR */,
  ahkeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  ckeys: number /* u32 */,
  pclsidDefault: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdtobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  psb: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IShellBrowser */,
  pStartPage: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHOpenPropSheetW(util.pwstrToFfi(pszCaption), util.toPointer(ahkeys), ckeys, util.toPointer(pclsidDefault), util.toPointer(pdtobj), util.toPointer(psb), util.pwstrToFfi(pStartPage)));
}

export function SoftwareUpdateMessageBox(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszDistUnit: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  psdi: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libSHDOCVW_dll.SoftwareUpdateMessageBox(util.hwndToFfi(hWnd), util.pwstrToFfi(pszDistUnit), dwFlags, util.toPointer(psdi));
}

export function SHMultiFileProperties(
  pdtobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHMultiFileProperties(util.toPointer(pdtobj), dwFlags));
}

export function SHCreateQueryCancelAutoPlayMoniker(
  ppmoniker: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHCreateQueryCancelAutoPlayMoniker(util.toPointer(ppmoniker)));
}

export function ImportPrivacySettings(
  pszFilename: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfParsePrivacyPreferences: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfParsePerSiteRules: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHDOCVW_dll.ImportPrivacySettings(util.pwstrToFfi(pszFilename), util.toPointer(pfParsePrivacyPreferences), util.toPointer(pfParsePerSiteRules)));
}

export function GetScaleFactorForDevice(
  deviceType: DISPLAY_DEVICE_TYPE /* Windows.Win32.UI.Shell.DISPLAY_DEVICE_TYPE */,
): DEVICE_SCALE_FACTOR /* Windows.Win32.UI.Shell.Common.DEVICE_SCALE_FACTOR */ {
  return libapi_ms_win_shcore_scaling_l1_1_0_dll.GetScaleFactorForDevice(deviceType);
}

export function RegisterScaleChangeNotifications(
  displayDevice: DISPLAY_DEVICE_TYPE /* Windows.Win32.UI.Shell.DISPLAY_DEVICE_TYPE */,
  hwndNotify: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uMsgNotify: number /* u32 */,
  pdwCookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_0_dll.RegisterScaleChangeNotifications(displayDevice, util.hwndToFfi(hwndNotify), uMsgNotify, util.toPointer(pdwCookie)));
}

export function RevokeScaleChangeNotifications(
  displayDevice: DISPLAY_DEVICE_TYPE /* Windows.Win32.UI.Shell.DISPLAY_DEVICE_TYPE */,
  dwCookie: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_0_dll.RevokeScaleChangeNotifications(displayDevice, dwCookie));
}

export function GetScaleFactorForMonitor(
  hMon: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  pScale: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_1_dll.GetScaleFactorForMonitor(util.toPointer(hMon), util.toPointer(pScale)));
}

export function RegisterScaleChangeEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pdwCookie: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_1_dll.RegisterScaleChangeEvent(util.toPointer(hEvent), util.toPointer(pdwCookie)));
}

export function UnregisterScaleChangeEvent(
  dwCookie: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_1_dll.UnregisterScaleChangeEvent(dwCookie));
}

export function GetDpiForShellUIComponent(
  param0: SHELL_UI_COMPONENT /* Windows.Win32.UI.Shell.SHELL_UI_COMPONENT */,
): number /* u32 */ {
  return libapi_ms_win_shcore_scaling_l1_1_2_dll.GetDpiForShellUIComponent(param0);
}

export function CommandLineToArgvW(
  lpCmdLine: string | null /* Windows.Win32.Foundation.PWSTR */,
  pNumArgs: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHELL32_dll.CommandLineToArgvW(util.pwstrToFfi(lpCmdLine), util.toPointer(pNumArgs)));
}

export function DragQueryFileA(
  hDrop: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HDROP */,
  iFile: number /* u32 */,
  lpszFile: string | null /* Windows.Win32.Foundation.PSTR */,
  cch: number /* u32 */,
): number /* u32 */ {
  return libSHELL32_dll.DragQueryFileA(util.toPointer(hDrop), iFile, util.pstrToFfi(lpszFile), cch);
}

export function DragQueryFileW(
  hDrop: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HDROP */,
  iFile: number /* u32 */,
  lpszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  cch: number /* u32 */,
): number /* u32 */ {
  return libSHELL32_dll.DragQueryFileW(util.toPointer(hDrop), iFile, util.pwstrToFfi(lpszFile), cch);
}

export function DragQueryPoint(
  hDrop: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HDROP */,
  ppt: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.DragQueryPoint(util.toPointer(hDrop), util.toPointer(ppt)));
}

export function DragFinish(
  hDrop: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.HDROP */,
): void /* void */ {
  return libSHELL32_dll.DragFinish(util.toPointer(hDrop));
}

export function DragAcceptFiles(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  fAccept: boolean /* Windows.Win32.Foundation.BOOL */,
): void /* void */ {
  return libSHELL32_dll.DragAcceptFiles(util.hwndToFfi(hWnd), util.boolToFfi(fAccept));
}

export function ShellExecuteA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpOperation: string | null /* Windows.Win32.Foundation.PSTR */,
  lpFile: string | null /* Windows.Win32.Foundation.PSTR */,
  lpParameters: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDirectory: string | null /* Windows.Win32.Foundation.PSTR */,
  nShowCmd: SHOW_WINDOW_CMD /* Windows.Win32.UI.WindowsAndMessaging.SHOW_WINDOW_CMD */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libSHELL32_dll.ShellExecuteA(util.hwndToFfi(hwnd), util.pstrToFfi(lpOperation), util.pstrToFfi(lpFile), util.pstrToFfi(lpParameters), util.pstrToFfi(lpDirectory), nShowCmd));
}

export function ShellExecuteW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpOperation: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpParameters: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  nShowCmd: SHOW_WINDOW_CMD /* Windows.Win32.UI.WindowsAndMessaging.SHOW_WINDOW_CMD */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libSHELL32_dll.ShellExecuteW(util.hwndToFfi(hwnd), util.pwstrToFfi(lpOperation), util.pwstrToFfi(lpFile), util.pwstrToFfi(lpParameters), util.pwstrToFfi(lpDirectory), nShowCmd));
}

export function FindExecutableA(
  lpFile: string | null /* Windows.Win32.Foundation.PSTR */,
  lpDirectory: string | null /* Windows.Win32.Foundation.PSTR */,
  lpResult: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libSHELL32_dll.FindExecutableA(util.pstrToFfi(lpFile), util.pstrToFfi(lpDirectory), util.pstrToFfi(lpResult)));
}

export function FindExecutableW(
  lpFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpDirectory: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpResult: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */ {
  return util.pointerFromFfi(libSHELL32_dll.FindExecutableW(util.pwstrToFfi(lpFile), util.pwstrToFfi(lpDirectory), util.pwstrToFfi(lpResult)));
}

export function ShellAboutA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szApp: string | null /* Windows.Win32.Foundation.PSTR */,
  szOtherStuff: string | null /* Windows.Win32.Foundation.PSTR */,
  hIcon: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */,
): number /* i32 */ {
  return libSHELL32_dll.ShellAboutA(util.hwndToFfi(hWnd), util.pstrToFfi(szApp), util.pstrToFfi(szOtherStuff), util.toPointer(hIcon));
}

export function ShellAboutW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szApp: string | null /* Windows.Win32.Foundation.PWSTR */,
  szOtherStuff: string | null /* Windows.Win32.Foundation.PWSTR */,
  hIcon: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */,
): number /* i32 */ {
  return libSHELL32_dll.ShellAboutW(util.hwndToFfi(hWnd), util.pwstrToFfi(szApp), util.pwstrToFfi(szOtherStuff), util.toPointer(hIcon));
}

export function DuplicateIcon(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  hIcon: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.DuplicateIcon(util.toPointer(hInst), util.toPointer(hIcon)));
}

export function ExtractAssociatedIconA(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszIconPath: string | null /* Windows.Win32.Foundation.PSTR */,
  piIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.ExtractAssociatedIconA(util.toPointer(hInst), util.pstrToFfi(pszIconPath), util.toPointer(piIcon)));
}

export function ExtractAssociatedIconW(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszIconPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  piIcon: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.ExtractAssociatedIconW(util.toPointer(hInst), util.pwstrToFfi(pszIconPath), util.toPointer(piIcon)));
}

export function ExtractAssociatedIconExA(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszIconPath: string | null /* Windows.Win32.Foundation.PSTR */,
  piIconIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  piIconId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.ExtractAssociatedIconExA(util.toPointer(hInst), util.pstrToFfi(pszIconPath), util.toPointer(piIconIndex), util.toPointer(piIconId)));
}

export function ExtractAssociatedIconExW(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszIconPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  piIconIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  piIconId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.ExtractAssociatedIconExW(util.toPointer(hInst), util.pwstrToFfi(pszIconPath), util.toPointer(piIconIndex), util.toPointer(piIconId)));
}

export function ExtractIconA(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszExeFileName: string | null /* Windows.Win32.Foundation.PSTR */,
  nIconIndex: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.ExtractIconA(util.toPointer(hInst), util.pstrToFfi(pszExeFileName), nIconIndex));
}

export function ExtractIconW(
  hInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pszExeFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  nIconIndex: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return util.pointerFromFfi(libSHELL32_dll.ExtractIconW(util.toPointer(hInst), util.pwstrToFfi(pszExeFileName), nIconIndex));
}

export function SHAppBarMessage(
  dwMessage: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* usize */ {
  return libSHELL32_dll.SHAppBarMessage(dwMessage, util.toPointer(pData));
}

export function DoEnvironmentSubstA(
  pszSrc: string | null /* Windows.Win32.Foundation.PSTR */,
  cchSrc: number /* u32 */,
): number /* u32 */ {
  return libSHELL32_dll.DoEnvironmentSubstA(util.pstrToFfi(pszSrc), cchSrc);
}

export function DoEnvironmentSubstW(
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchSrc: number /* u32 */,
): number /* u32 */ {
  return libSHELL32_dll.DoEnvironmentSubstW(util.pwstrToFfi(pszSrc), cchSrc);
}

export function ExtractIconExA(
  lpszFile: string | null /* Windows.Win32.Foundation.PSTR */,
  nIconIndex: number /* i32 */,
  phiconLarge: Deno.PointerValue | Uint8Array | null /* ptr */,
  phiconSmall: Deno.PointerValue | Uint8Array | null /* ptr */,
  nIcons: number /* u32 */,
): number /* u32 */ {
  return libSHELL32_dll.ExtractIconExA(util.pstrToFfi(lpszFile), nIconIndex, util.toPointer(phiconLarge), util.toPointer(phiconSmall), nIcons);
}

export function ExtractIconExW(
  lpszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  nIconIndex: number /* i32 */,
  phiconLarge: Deno.PointerValue | Uint8Array | null /* ptr */,
  phiconSmall: Deno.PointerValue | Uint8Array | null /* ptr */,
  nIcons: number /* u32 */,
): number /* u32 */ {
  return libSHELL32_dll.ExtractIconExW(util.pwstrToFfi(lpszFile), nIconIndex, util.toPointer(phiconLarge), util.toPointer(phiconSmall), nIcons);
}

export function SHFileOperationA(
  lpFileOp: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.SHFileOperationA(util.toPointer(lpFileOp));
}

export function SHFileOperationW(
  lpFileOp: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHELL32_dll.SHFileOperationW(util.toPointer(lpFileOp));
}

export function SHFreeNameMappings(
  hNameMappings: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): void /* void */ {
  return libSHELL32_dll.SHFreeNameMappings(util.toPointer(hNameMappings));
}

export function ShellExecuteExA(
  pExecInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.ShellExecuteExA(util.toPointer(pExecInfo)));
}

export function ShellExecuteExW(
  pExecInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.ShellExecuteExW(util.toPointer(pExecInfo)));
}

export function SHCreateProcessAsUserW(
  pscpi: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHCreateProcessAsUserW(util.toPointer(pscpi)));
}

export function SHEvaluateSystemCommandTemplate(
  pszCmdTemplate: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszApplication: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppszCommandLine: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppszParameters: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHEvaluateSystemCommandTemplate(util.pwstrToFfi(pszCmdTemplate), util.toPointer(ppszApplication), util.toPointer(ppszCommandLine), util.toPointer(ppszParameters)));
}

export function AssocCreateForClasses(
  rgClasses: Deno.PointerValue | Uint8Array | null /* ptr */,
  cClasses: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.AssocCreateForClasses(util.toPointer(rgClasses), cClasses, util.toPointer(riid), util.toPointer(ppv)));
}

export function SHQueryRecycleBinA(
  pszRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pSHQueryRBInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHQueryRecycleBinA(util.pstrToFfi(pszRootPath), util.toPointer(pSHQueryRBInfo)));
}

export function SHQueryRecycleBinW(
  pszRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pSHQueryRBInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHQueryRecycleBinW(util.pwstrToFfi(pszRootPath), util.toPointer(pSHQueryRBInfo)));
}

export function SHEmptyRecycleBinA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszRootPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHEmptyRecycleBinA(util.hwndToFfi(hwnd), util.pstrToFfi(pszRootPath), dwFlags));
}

export function SHEmptyRecycleBinW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszRootPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHEmptyRecycleBinW(util.hwndToFfi(hwnd), util.pwstrToFfi(pszRootPath), dwFlags));
}

export function SHQueryUserNotificationState(
  pquns: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHQueryUserNotificationState(util.toPointer(pquns)));
}

export function Shell_NotifyIconA(
  dwMessage: NOTIFY_ICON_MESSAGE /* Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.Shell_NotifyIconA(dwMessage, util.toPointer(lpData)));
}

export function Shell_NotifyIconW(
  dwMessage: NOTIFY_ICON_MESSAGE /* Windows.Win32.UI.Shell.NOTIFY_ICON_MESSAGE */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.Shell_NotifyIconW(dwMessage, util.toPointer(lpData)));
}

export function Shell_NotifyIconGetRect(
  identifier: Deno.PointerValue | Uint8Array | null /* ptr */,
  iconLocation: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.Shell_NotifyIconGetRect(util.toPointer(identifier), util.toPointer(iconLocation)));
}

export function SHGetFileInfoA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFileAttributes: FILE_FLAGS_AND_ATTRIBUTES /* Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES */,
  psfi: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbFileInfo: number /* u32 */,
  uFlags: SHGFI_FLAGS /* Windows.Win32.UI.Shell.SHGFI_FLAGS */,
): Deno.PointerValue /* usize */ {
  return libSHELL32_dll.SHGetFileInfoA(util.pstrToFfi(pszPath), dwFileAttributes, util.toPointer(psfi), cbFileInfo, uFlags);
}

export function SHGetFileInfoW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFileAttributes: FILE_FLAGS_AND_ATTRIBUTES /* Windows.Win32.Storage.FileSystem.FILE_FLAGS_AND_ATTRIBUTES */,
  psfi: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbFileInfo: number /* u32 */,
  uFlags: SHGFI_FLAGS /* Windows.Win32.UI.Shell.SHGFI_FLAGS */,
): Deno.PointerValue /* usize */ {
  return libSHELL32_dll.SHGetFileInfoW(util.pwstrToFfi(pszPath), dwFileAttributes, util.toPointer(psfi), cbFileInfo, uFlags);
}

export function SHGetStockIconInfo(
  siid: SHSTOCKICONID /* Windows.Win32.UI.Shell.SHSTOCKICONID */,
  uFlags: number /* u32 */,
  psii: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetStockIconInfo(siid, uFlags, util.toPointer(psii)));
}

export function SHGetDiskFreeSpaceExA(
  pszDirectoryName: string | null /* Windows.Win32.Foundation.PSTR */,
  pulFreeBytesAvailableToCaller: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulTotalNumberOfBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulTotalNumberOfFreeBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetDiskFreeSpaceExA(util.pstrToFfi(pszDirectoryName), util.toPointer(pulFreeBytesAvailableToCaller), util.toPointer(pulTotalNumberOfBytes), util.toPointer(pulTotalNumberOfFreeBytes)));
}

export function SHGetDiskFreeSpaceExW(
  pszDirectoryName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pulFreeBytesAvailableToCaller: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulTotalNumberOfBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  pulTotalNumberOfFreeBytes: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetDiskFreeSpaceExW(util.pwstrToFfi(pszDirectoryName), util.toPointer(pulFreeBytesAvailableToCaller), util.toPointer(pulTotalNumberOfBytes), util.toPointer(pulTotalNumberOfFreeBytes)));
}

export function SHGetNewLinkInfoA(
  pszLinkTo: string | null /* Windows.Win32.Foundation.PSTR */,
  pszDir: string | null /* Windows.Win32.Foundation.PSTR */,
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  pfMustCopy: Deno.PointerValue | Uint8Array | null /* ptr */,
  uFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetNewLinkInfoA(util.pstrToFfi(pszLinkTo), util.pstrToFfi(pszDir), util.pstrToFfi(pszName), util.toPointer(pfMustCopy), uFlags));
}

export function SHGetNewLinkInfoW(
  pszLinkTo: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfMustCopy: Deno.PointerValue | Uint8Array | null /* ptr */,
  uFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHGetNewLinkInfoW(util.pwstrToFfi(pszLinkTo), util.pwstrToFfi(pszDir), util.pwstrToFfi(pszName), util.toPointer(pfMustCopy), uFlags));
}

export function SHInvokePrinterCommandA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uAction: number /* u32 */,
  lpBuf1: string | null /* Windows.Win32.Foundation.PSTR */,
  lpBuf2: string | null /* Windows.Win32.Foundation.PSTR */,
  fModal: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHInvokePrinterCommandA(util.hwndToFfi(hwnd), uAction, util.pstrToFfi(lpBuf1), util.pstrToFfi(lpBuf2), util.boolToFfi(fModal)));
}

export function SHInvokePrinterCommandW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uAction: number /* u32 */,
  lpBuf1: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpBuf2: string | null /* Windows.Win32.Foundation.PWSTR */,
  fModal: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHInvokePrinterCommandW(util.hwndToFfi(hwnd), uAction, util.pwstrToFfi(lpBuf1), util.pwstrToFfi(lpBuf2), util.boolToFfi(fModal)));
}

export function SHLoadNonloadedIconOverlayIdentifiers(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHLoadNonloadedIconOverlayIdentifiers());
}

export function SHIsFileAvailableOffline(
  pwszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHIsFileAvailableOffline(util.pwstrToFfi(pwszPath), util.toPointer(pdwStatus)));
}

export function SHSetLocalizedName(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszResModule: string | null /* Windows.Win32.Foundation.PWSTR */,
  idsRes: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetLocalizedName(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszResModule), idsRes));
}

export function SHRemoveLocalizedName(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHRemoveLocalizedName(util.pwstrToFfi(pszPath)));
}

export function SHGetLocalizedName(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszResModule: string | null /* Windows.Win32.Foundation.PWSTR */,
  cch: number /* u32 */,
  pidsRes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetLocalizedName(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszResModule), cch, util.toPointer(pidsRes)));
}

export function ShellMessageBoxA(
  hAppInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpcText: string | null /* Windows.Win32.Foundation.PSTR */,
  lpcTitle: string | null /* Windows.Win32.Foundation.PSTR */,
  fuStyle: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.ShellMessageBoxA(util.toPointer(hAppInst), util.hwndToFfi(hWnd), util.pstrToFfi(lpcText), util.pstrToFfi(lpcTitle), fuStyle);
}

export function ShellMessageBoxW(
  hAppInst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpcText: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcTitle: string | null /* Windows.Win32.Foundation.PWSTR */,
  fuStyle: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.ShellMessageBoxW(util.toPointer(hAppInst), util.hwndToFfi(hWnd), util.pwstrToFfi(lpcText), util.pwstrToFfi(lpcTitle), fuStyle);
}

export function IsLFNDriveA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.IsLFNDriveA(util.pstrToFfi(pszPath)));
}

export function IsLFNDriveW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.IsLFNDriveW(util.pwstrToFfi(pszPath)));
}

export function SHEnumerateUnreadMailAccountsW(
  hKeyUser: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  pszMailAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMailAddress: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHEnumerateUnreadMailAccountsW(util.toPointer(hKeyUser), dwIndex, util.pwstrToFfi(pszMailAddress), cchMailAddress));
}

export function SHGetUnreadMailCountW(
  hKeyUser: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszMailAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszShellExecuteCommand: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchShellExecuteCommand: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetUnreadMailCountW(util.toPointer(hKeyUser), util.pwstrToFfi(pszMailAddress), util.toPointer(pdwCount), util.toPointer(pFileTime), util.pwstrToFfi(pszShellExecuteCommand), cchShellExecuteCommand));
}

export function SHSetUnreadMailCountW(
  pszMailAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwCount: number /* u32 */,
  pszShellExecuteCommand: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHSetUnreadMailCountW(util.pwstrToFfi(pszMailAddress), dwCount, util.pwstrToFfi(pszShellExecuteCommand)));
}

export function SHTestTokenMembership(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ulRID: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.SHTestTokenMembership(util.toPointer(hToken), ulRID));
}

export function SHGetImageList(
  iImageList: number /* i32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetImageList(iImageList, util.toPointer(riid), util.toPointer(ppvObj)));
}

export function InitNetworkAddressControl(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHELL32_dll.InitNetworkAddressControl());
}

export function SHGetDriveMedia(
  pszDrive: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwMediaContent: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHELL32_dll.SHGetDriveMedia(util.pwstrToFfi(pszDrive), util.toPointer(pdwMediaContent)));
}

export function StrChrA(
  pszStart: string | null /* Windows.Win32.Foundation.PSTR */,
  wMatch: number /* u16 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrChrA(util.pstrToFfi(pszStart), wMatch));
}

export function StrChrW(
  pszStart: string | null /* Windows.Win32.Foundation.PWSTR */,
  wMatch: Uint8Array | Deno.PointerValue | null /* char */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrChrW(util.pwstrToFfi(pszStart), util.toPointer(wMatch)));
}

export function StrChrIA(
  pszStart: string | null /* Windows.Win32.Foundation.PSTR */,
  wMatch: number /* u16 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrChrIA(util.pstrToFfi(pszStart), wMatch));
}

export function StrChrIW(
  pszStart: string | null /* Windows.Win32.Foundation.PWSTR */,
  wMatch: Uint8Array | Deno.PointerValue | null /* char */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrChrIW(util.pwstrToFfi(pszStart), util.toPointer(wMatch)));
}

export function StrChrNW(
  pszStart: string | null /* Windows.Win32.Foundation.PWSTR */,
  wMatch: Uint8Array | Deno.PointerValue | null /* char */,
  cchMax: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrChrNW(util.pwstrToFfi(pszStart), util.toPointer(wMatch), cchMax));
}

export function StrChrNIW(
  pszStart: string | null /* Windows.Win32.Foundation.PWSTR */,
  wMatch: Uint8Array | Deno.PointerValue | null /* char */,
  cchMax: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrChrNIW(util.pwstrToFfi(pszStart), util.toPointer(wMatch), cchMax));
}

export function StrCmpNA(
  psz1: string | null /* Windows.Win32.Foundation.PSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNA(util.pstrToFfi(psz1), util.pstrToFfi(psz2), nChar);
}

export function StrCmpNW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2), nChar);
}

export function StrCmpNIA(
  psz1: string | null /* Windows.Win32.Foundation.PSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNIA(util.pstrToFfi(psz1), util.pstrToFfi(psz2), nChar);
}

export function StrCmpNIW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNIW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2), nChar);
}

export function StrCSpnA(
  pszStr: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCSpnA(util.pstrToFfi(pszStr), util.pstrToFfi(pszSet));
}

export function StrCSpnW(
  pszStr: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCSpnW(util.pwstrToFfi(pszStr), util.pwstrToFfi(pszSet));
}

export function StrCSpnIA(
  pszStr: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCSpnIA(util.pstrToFfi(pszStr), util.pstrToFfi(pszSet));
}

export function StrCSpnIW(
  pszStr: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCSpnIW(util.pwstrToFfi(pszStr), util.pwstrToFfi(pszSet));
}

export function StrDupA(
  pszSrch: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrDupA(util.pstrToFfi(pszSrch)));
}

export function StrDupW(
  pszSrch: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrDupW(util.pwstrToFfi(pszSrch)));
}

export function StrFormatByteSizeEx(
  ull: Deno.PointerValue /* u64 */,
  flags: SFBS_FLAGS /* Windows.Win32.UI.Shell.SFBS_FLAGS */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.StrFormatByteSizeEx(ull, flags, util.pwstrToFfi(pszBuf), cchBuf));
}

export function StrFormatByteSizeA(
  dw: number /* u32 */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrFormatByteSizeA(dw, util.pstrToFfi(pszBuf), cchBuf));
}

export function StrFormatByteSize64A(
  qdw: Deno.PointerValue /* i64 */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrFormatByteSize64A(qdw, util.pstrToFfi(pszBuf), cchBuf));
}

export function StrFormatByteSizeW(
  qdw: Deno.PointerValue /* i64 */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrFormatByteSizeW(qdw, util.pwstrToFfi(pszBuf), cchBuf));
}

export function StrFormatKBSizeW(
  qdw: Deno.PointerValue /* i64 */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrFormatKBSizeW(qdw, util.pwstrToFfi(pszBuf), cchBuf));
}

export function StrFormatKBSizeA(
  qdw: Deno.PointerValue /* i64 */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrFormatKBSizeA(qdw, util.pstrToFfi(pszBuf), cchBuf));
}

export function StrFromTimeIntervalA(
  pszOut: string | null /* Windows.Win32.Foundation.PSTR */,
  cchMax: number /* u32 */,
  dwTimeMS: number /* u32 */,
  digits: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrFromTimeIntervalA(util.pstrToFfi(pszOut), cchMax, dwTimeMS, digits);
}

export function StrFromTimeIntervalW(
  pszOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
  dwTimeMS: number /* u32 */,
  digits: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrFromTimeIntervalW(util.pwstrToFfi(pszOut), cchMax, dwTimeMS, digits);
}

export function StrIsIntlEqualA(
  fCaseSens: boolean /* Windows.Win32.Foundation.BOOL */,
  pszString1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszString2: string | null /* Windows.Win32.Foundation.PSTR */,
  nChar: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrIsIntlEqualA(util.boolToFfi(fCaseSens), util.pstrToFfi(pszString1), util.pstrToFfi(pszString2), nChar));
}

export function StrIsIntlEqualW(
  fCaseSens: boolean /* Windows.Win32.Foundation.BOOL */,
  pszString1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszString2: string | null /* Windows.Win32.Foundation.PWSTR */,
  nChar: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrIsIntlEqualW(util.boolToFfi(fCaseSens), util.pwstrToFfi(pszString1), util.pwstrToFfi(pszString2), nChar));
}

export function StrNCatA(
  psz1: string | null /* Windows.Win32.Foundation.PSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PSTR */,
  cchMax: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrNCatA(util.pstrToFfi(psz1), util.pstrToFfi(psz2), cchMax));
}

export function StrNCatW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrNCatW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2), cchMax));
}

export function StrPBrkA(
  psz: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrPBrkA(util.pstrToFfi(psz), util.pstrToFfi(pszSet)));
}

export function StrPBrkW(
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrPBrkW(util.pwstrToFfi(psz), util.pwstrToFfi(pszSet)));
}

export function StrRChrA(
  pszStart: string | null /* Windows.Win32.Foundation.PSTR */,
  pszEnd: string | null /* Windows.Win32.Foundation.PSTR */,
  wMatch: number /* u16 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrRChrA(util.pstrToFfi(pszStart), util.pstrToFfi(pszEnd), wMatch));
}

export function StrRChrW(
  pszStart: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszEnd: string | null /* Windows.Win32.Foundation.PWSTR */,
  wMatch: Uint8Array | Deno.PointerValue | null /* char */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrRChrW(util.pwstrToFfi(pszStart), util.pwstrToFfi(pszEnd), util.toPointer(wMatch)));
}

export function StrRChrIA(
  pszStart: string | null /* Windows.Win32.Foundation.PSTR */,
  pszEnd: string | null /* Windows.Win32.Foundation.PSTR */,
  wMatch: number /* u16 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrRChrIA(util.pstrToFfi(pszStart), util.pstrToFfi(pszEnd), wMatch));
}

export function StrRChrIW(
  pszStart: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszEnd: string | null /* Windows.Win32.Foundation.PWSTR */,
  wMatch: Uint8Array | Deno.PointerValue | null /* char */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrRChrIW(util.pwstrToFfi(pszStart), util.pwstrToFfi(pszEnd), util.toPointer(wMatch)));
}

export function StrRStrIA(
  pszSource: string | null /* Windows.Win32.Foundation.PSTR */,
  pszLast: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrRStrIA(util.pstrToFfi(pszSource), util.pstrToFfi(pszLast), util.pstrToFfi(pszSrch)));
}

export function StrRStrIW(
  pszSource: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszLast: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrRStrIW(util.pwstrToFfi(pszSource), util.pwstrToFfi(pszLast), util.pwstrToFfi(pszSrch)));
}

export function StrSpnA(
  psz: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrSpnA(util.pstrToFfi(psz), util.pstrToFfi(pszSet));
}

export function StrSpnW(
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSet: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrSpnW(util.pwstrToFfi(psz), util.pwstrToFfi(pszSet));
}

export function StrStrA(
  pszFirst: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrStrA(util.pstrToFfi(pszFirst), util.pstrToFfi(pszSrch)));
}

export function StrStrW(
  pszFirst: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrStrW(util.pwstrToFfi(pszFirst), util.pwstrToFfi(pszSrch)));
}

export function StrStrIA(
  pszFirst: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrStrIA(util.pstrToFfi(pszFirst), util.pstrToFfi(pszSrch)));
}

export function StrStrIW(
  pszFirst: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrStrIW(util.pwstrToFfi(pszFirst), util.pwstrToFfi(pszSrch)));
}

export function StrStrNW(
  pszFirst: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrStrNW(util.pwstrToFfi(pszFirst), util.pwstrToFfi(pszSrch), cchMax));
}

export function StrStrNIW(
  pszFirst: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrch: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrStrNIW(util.pwstrToFfi(pszFirst), util.pwstrToFfi(pszSrch), cchMax));
}

export function StrToIntA(
  pszSrc: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrToIntA(util.pstrToFfi(pszSrc));
}

export function StrToIntW(
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrToIntW(util.pwstrToFfi(pszSrc));
}

export function StrToIntExA(
  pszString: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* i32 */,
  piRet: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrToIntExA(util.pstrToFfi(pszString), dwFlags, util.toPointer(piRet)));
}

export function StrToIntExW(
  pszString: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* i32 */,
  piRet: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrToIntExW(util.pwstrToFfi(pszString), dwFlags, util.toPointer(piRet)));
}

export function StrToInt64ExA(
  pszString: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* i32 */,
  pllRet: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrToInt64ExA(util.pstrToFfi(pszString), dwFlags, util.toPointer(pllRet)));
}

export function StrToInt64ExW(
  pszString: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* i32 */,
  pllRet: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrToInt64ExW(util.pwstrToFfi(pszString), dwFlags, util.toPointer(pllRet)));
}

export function StrTrimA(
  psz: string | null /* Windows.Win32.Foundation.PSTR */,
  pszTrimChars: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrTrimA(util.pstrToFfi(psz), util.pstrToFfi(pszTrimChars)));
}

export function StrTrimW(
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTrimChars: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.StrTrimW(util.pwstrToFfi(psz), util.pwstrToFfi(pszTrimChars)));
}

export function StrCatW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrCatW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2)));
}

export function StrCmpW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2));
}

export function StrCmpIW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpIW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2));
}

export function StrCpyW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrCpyW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2)));
}

export function StrCpyNW(
  pszDst: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrCpyNW(util.pwstrToFfi(pszDst), util.pwstrToFfi(pszSrc), cchMax));
}

export function StrCatBuffW(
  pszDest: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchDestBuffSize: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.StrCatBuffW(util.pwstrToFfi(pszDest), util.pwstrToFfi(pszSrc), cchDestBuffSize));
}

export function StrCatBuffA(
  pszDest: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSrc: string | null /* Windows.Win32.Foundation.PSTR */,
  cchDestBuffSize: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.StrCatBuffA(util.pstrToFfi(pszDest), util.pstrToFfi(pszSrc), cchDestBuffSize));
}

export function ChrCmpIA(
  w1: number /* u16 */,
  w2: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.ChrCmpIA(w1, w2));
}

export function ChrCmpIW(
  w1: Uint8Array | Deno.PointerValue | null /* char */,
  w2: Uint8Array | Deno.PointerValue | null /* char */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.ChrCmpIW(util.toPointer(w1), util.toPointer(w2)));
}

export function wvnsprintfA(
  pszDest: string | null /* Windows.Win32.Foundation.PSTR */,
  cchDest: number /* i32 */,
  pszFmt: string | null /* Windows.Win32.Foundation.PSTR */,
  arglist: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHLWAPI_dll.wvnsprintfA(util.pstrToFfi(pszDest), cchDest, util.pstrToFfi(pszFmt), util.toPointer(arglist));
}

export function wvnsprintfW(
  pszDest: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchDest: number /* i32 */,
  pszFmt: string | null /* Windows.Win32.Foundation.PWSTR */,
  arglist: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libSHLWAPI_dll.wvnsprintfW(util.pwstrToFfi(pszDest), cchDest, util.pwstrToFfi(pszFmt), util.toPointer(arglist));
}

export function wnsprintfA(
  pszDest: string | null /* Windows.Win32.Foundation.PSTR */,
  cchDest: number /* i32 */,
  pszFmt: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.wnsprintfA(util.pstrToFfi(pszDest), cchDest, util.pstrToFfi(pszFmt));
}

export function wnsprintfW(
  pszDest: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchDest: number /* i32 */,
  pszFmt: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.wnsprintfW(util.pwstrToFfi(pszDest), cchDest, util.pwstrToFfi(pszFmt));
}

export function StrRetToStrA(
  pstr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.StrRetToStrA(util.toPointer(pstr), util.toPointer(pidl), util.toPointer(ppsz)));
}

export function StrRetToStrW(
  pstr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.StrRetToStrW(util.toPointer(pstr), util.toPointer(pidl), util.toPointer(ppsz)));
}

export function StrRetToBufA(
  pstr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.StrRetToBufA(util.toPointer(pstr), util.toPointer(pidl), util.pstrToFfi(pszBuf), cchBuf));
}

export function StrRetToBufW(
  pstr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.StrRetToBufW(util.toPointer(pstr), util.toPointer(pidl), util.pwstrToFfi(pszBuf), cchBuf));
}

export function SHStrDupA(
  psz: string | null /* Windows.Win32.Foundation.PSTR */,
  ppwsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHStrDupA(util.pstrToFfi(psz), util.toPointer(ppwsz)));
}

export function SHStrDupW(
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHStrDupW(util.pwstrToFfi(psz), util.toPointer(ppwsz)));
}

export function StrCmpLogicalW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpLogicalW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2));
}

export function StrCatChainW(
  pszDst: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchDst: number /* u32 */,
  ichAt: number /* u32 */,
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libSHLWAPI_dll.StrCatChainW(util.pwstrToFfi(pszDst), cchDst, ichAt, util.pwstrToFfi(pszSrc));
}

export function StrRetToBSTR(
  pstr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbstr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.StrRetToBSTR(util.toPointer(pstr), util.toPointer(pidl), util.toPointer(pbstr)));
}

export function SHLoadIndirectString(
  pszSource: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszOutBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchOutBuf: number /* u32 */,
  ppvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHLoadIndirectString(util.pwstrToFfi(pszSource), util.pwstrToFfi(pszOutBuf), cchOutBuf, util.toPointer(ppvReserved)));
}

export function IsCharSpaceA(
  wch: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.IsCharSpaceA(util.toPointer(wch)));
}

export function IsCharSpaceW(
  wch: Uint8Array | Deno.PointerValue | null /* char */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.IsCharSpaceW(util.toPointer(wch)));
}

export function StrCmpCA(
  pszStr1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpCA(util.pstrToFfi(pszStr1), util.pstrToFfi(pszStr2));
}

export function StrCmpCW(
  pszStr1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpCW(util.pwstrToFfi(pszStr1), util.pwstrToFfi(pszStr2));
}

export function StrCmpICA(
  pszStr1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpICA(util.pstrToFfi(pszStr1), util.pstrToFfi(pszStr2));
}

export function StrCmpICW(
  pszStr1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpICW(util.pwstrToFfi(pszStr1), util.pwstrToFfi(pszStr2));
}

export function StrCmpNCA(
  pszStr1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNCA(util.pstrToFfi(pszStr1), util.pstrToFfi(pszStr2), nChar);
}

export function StrCmpNCW(
  pszStr1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PWSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNCW(util.pwstrToFfi(pszStr1), util.pwstrToFfi(pszStr2), nChar);
}

export function StrCmpNICA(
  pszStr1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNICA(util.pstrToFfi(pszStr1), util.pstrToFfi(pszStr2), nChar);
}

export function StrCmpNICW(
  pszStr1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszStr2: string | null /* Windows.Win32.Foundation.PWSTR */,
  nChar: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.StrCmpNICW(util.pwstrToFfi(pszStr1), util.pwstrToFfi(pszStr2), nChar);
}

export function IntlStrEqWorkerA(
  fCaseSens: boolean /* Windows.Win32.Foundation.BOOL */,
  lpString1: string | null /* Windows.Win32.Foundation.PSTR */,
  lpString2: string | null /* Windows.Win32.Foundation.PSTR */,
  nChar: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.IntlStrEqWorkerA(util.boolToFfi(fCaseSens), util.pstrToFfi(lpString1), util.pstrToFfi(lpString2), nChar));
}

export function IntlStrEqWorkerW(
  fCaseSens: boolean /* Windows.Win32.Foundation.BOOL */,
  lpString1: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpString2: string | null /* Windows.Win32.Foundation.PWSTR */,
  nChar: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.IntlStrEqWorkerW(util.boolToFfi(fCaseSens), util.pwstrToFfi(lpString1), util.pwstrToFfi(lpString2), nChar));
}

export function PathAddBackslashA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathAddBackslashA(util.pstrToFfi(pszPath)));
}

export function PathAddBackslashW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathAddBackslashW(util.pwstrToFfi(pszPath)));
}

export function PathAddExtensionA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszExt: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathAddExtensionA(util.pstrToFfi(pszPath), util.pstrToFfi(pszExt)));
}

export function PathAddExtensionW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszExt: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathAddExtensionW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszExt)));
}

export function PathAppendA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszMore: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathAppendA(util.pstrToFfi(pszPath), util.pstrToFfi(pszMore)));
}

export function PathAppendW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszMore: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathAppendW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszMore)));
}

export function PathBuildRootA(
  pszRoot: string | null /* Windows.Win32.Foundation.PSTR */,
  iDrive: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathBuildRootA(util.pstrToFfi(pszRoot), iDrive));
}

export function PathBuildRootW(
  pszRoot: string | null /* Windows.Win32.Foundation.PWSTR */,
  iDrive: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathBuildRootW(util.pwstrToFfi(pszRoot), iDrive));
}

export function PathCanonicalizeA(
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathCanonicalizeA(util.pstrToFfi(pszBuf), util.pstrToFfi(pszPath)));
}

export function PathCanonicalizeW(
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathCanonicalizeW(util.pwstrToFfi(pszBuf), util.pwstrToFfi(pszPath)));
}

export function PathCombineA(
  pszDest: string | null /* Windows.Win32.Foundation.PSTR */,
  pszDir: string | null /* Windows.Win32.Foundation.PSTR */,
  pszFile: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathCombineA(util.pstrToFfi(pszDest), util.pstrToFfi(pszDir), util.pstrToFfi(pszFile)));
}

export function PathCombineW(
  pszDest: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathCombineW(util.pwstrToFfi(pszDest), util.pwstrToFfi(pszDir), util.pwstrToFfi(pszFile)));
}

export function PathCompactPathA(
  hDC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dx: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathCompactPathA(util.toPointer(hDC), util.pstrToFfi(pszPath), dx));
}

export function PathCompactPathW(
  hDC: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dx: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathCompactPathW(util.toPointer(hDC), util.pwstrToFfi(pszPath), dx));
}

export function PathCompactPathExA(
  pszOut: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSrc: string | null /* Windows.Win32.Foundation.PSTR */,
  cchMax: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathCompactPathExA(util.pstrToFfi(pszOut), util.pstrToFfi(pszSrc), cchMax, dwFlags));
}

export function PathCompactPathExW(
  pszOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathCompactPathExW(util.pwstrToFfi(pszOut), util.pwstrToFfi(pszSrc), cchMax, dwFlags));
}

export function PathCommonPrefixA(
  pszFile1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszFile2: string | null /* Windows.Win32.Foundation.PSTR */,
  achPath: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.PathCommonPrefixA(util.pstrToFfi(pszFile1), util.pstrToFfi(pszFile2), util.pstrToFfi(achPath));
}

export function PathCommonPrefixW(
  pszFile1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszFile2: string | null /* Windows.Win32.Foundation.PWSTR */,
  achPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.PathCommonPrefixW(util.pwstrToFfi(pszFile1), util.pwstrToFfi(pszFile2), util.pwstrToFfi(achPath));
}

export function PathFileExistsA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathFileExistsA(util.pstrToFfi(pszPath)));
}

export function PathFileExistsW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathFileExistsW(util.pwstrToFfi(pszPath)));
}

export function PathFindExtensionA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathFindExtensionA(util.pstrToFfi(pszPath)));
}

export function PathFindExtensionW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathFindExtensionW(util.pwstrToFfi(pszPath)));
}

export function PathFindFileNameA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathFindFileNameA(util.pstrToFfi(pszPath)));
}

export function PathFindFileNameW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathFindFileNameW(util.pwstrToFfi(pszPath)));
}

export function PathFindNextComponentA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathFindNextComponentA(util.pstrToFfi(pszPath)));
}

export function PathFindNextComponentW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathFindNextComponentW(util.pwstrToFfi(pszPath)));
}

export function PathFindOnPathA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  ppszOtherDirs: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathFindOnPathA(util.pstrToFfi(pszPath), util.toPointer(ppszOtherDirs)));
}

export function PathFindOnPathW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszOtherDirs: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathFindOnPathW(util.pwstrToFfi(pszPath), util.toPointer(ppszOtherDirs)));
}

export function PathFindSuffixArrayA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  apszSuffix: Deno.PointerValue | Uint8Array | null /* ptr */,
  iArraySize: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathFindSuffixArrayA(util.pstrToFfi(pszPath), util.toPointer(apszSuffix), iArraySize));
}

export function PathFindSuffixArrayW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  apszSuffix: Deno.PointerValue | Uint8Array | null /* ptr */,
  iArraySize: number /* i32 */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathFindSuffixArrayW(util.pwstrToFfi(pszPath), util.toPointer(apszSuffix), iArraySize));
}

export function PathGetArgsA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathGetArgsA(util.pstrToFfi(pszPath)));
}

export function PathGetArgsW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathGetArgsW(util.pwstrToFfi(pszPath)));
}

export function PathIsLFNFileSpecA(
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsLFNFileSpecA(util.pstrToFfi(pszName)));
}

export function PathIsLFNFileSpecW(
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsLFNFileSpecW(util.pwstrToFfi(pszName)));
}

export function PathGetCharTypeA(
  ch: number /* u8 */,
): number /* u32 */ {
  return libSHLWAPI_dll.PathGetCharTypeA(ch);
}

export function PathGetCharTypeW(
  ch: Uint8Array | Deno.PointerValue | null /* char */,
): number /* u32 */ {
  return libSHLWAPI_dll.PathGetCharTypeW(util.toPointer(ch));
}

export function PathGetDriveNumberA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.PathGetDriveNumberA(util.pstrToFfi(pszPath));
}

export function PathGetDriveNumberW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.PathGetDriveNumberW(util.pwstrToFfi(pszPath));
}

export function PathIsDirectoryA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsDirectoryA(util.pstrToFfi(pszPath)));
}

export function PathIsDirectoryW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsDirectoryW(util.pwstrToFfi(pszPath)));
}

export function PathIsDirectoryEmptyA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsDirectoryEmptyA(util.pstrToFfi(pszPath)));
}

export function PathIsDirectoryEmptyW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsDirectoryEmptyW(util.pwstrToFfi(pszPath)));
}

export function PathIsFileSpecA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsFileSpecA(util.pstrToFfi(pszPath)));
}

export function PathIsFileSpecW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsFileSpecW(util.pwstrToFfi(pszPath)));
}

export function PathIsPrefixA(
  pszPrefix: string | null /* Windows.Win32.Foundation.PSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsPrefixA(util.pstrToFfi(pszPrefix), util.pstrToFfi(pszPath)));
}

export function PathIsPrefixW(
  pszPrefix: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsPrefixW(util.pwstrToFfi(pszPrefix), util.pwstrToFfi(pszPath)));
}

export function PathIsRelativeA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsRelativeA(util.pstrToFfi(pszPath)));
}

export function PathIsRelativeW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsRelativeW(util.pwstrToFfi(pszPath)));
}

export function PathIsRootA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsRootA(util.pstrToFfi(pszPath)));
}

export function PathIsRootW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsRootW(util.pwstrToFfi(pszPath)));
}

export function PathIsSameRootA(
  pszPath1: string | null /* Windows.Win32.Foundation.PSTR */,
  pszPath2: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsSameRootA(util.pstrToFfi(pszPath1), util.pstrToFfi(pszPath2)));
}

export function PathIsSameRootW(
  pszPath1: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath2: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsSameRootW(util.pwstrToFfi(pszPath1), util.pwstrToFfi(pszPath2)));
}

export function PathIsUNCA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsUNCA(util.pstrToFfi(pszPath)));
}

export function PathIsUNCW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsUNCW(util.pwstrToFfi(pszPath)));
}

export function PathIsNetworkPathA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsNetworkPathA(util.pstrToFfi(pszPath)));
}

export function PathIsNetworkPathW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsNetworkPathW(util.pwstrToFfi(pszPath)));
}

export function PathIsUNCServerA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsUNCServerA(util.pstrToFfi(pszPath)));
}

export function PathIsUNCServerW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsUNCServerW(util.pwstrToFfi(pszPath)));
}

export function PathIsUNCServerShareA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsUNCServerShareA(util.pstrToFfi(pszPath)));
}

export function PathIsUNCServerShareW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsUNCServerShareW(util.pwstrToFfi(pszPath)));
}

export function PathIsContentTypeA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszContentType: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsContentTypeA(util.pstrToFfi(pszPath), util.pstrToFfi(pszContentType)));
}

export function PathIsContentTypeW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszContentType: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsContentTypeW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszContentType)));
}

export function PathIsURLA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsURLA(util.pstrToFfi(pszPath)));
}

export function PathIsURLW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsURLW(util.pwstrToFfi(pszPath)));
}

export function PathMakePrettyA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathMakePrettyA(util.pstrToFfi(pszPath)));
}

export function PathMakePrettyW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathMakePrettyW(util.pwstrToFfi(pszPath)));
}

export function PathMatchSpecA(
  pszFile: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSpec: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathMatchSpecA(util.pstrToFfi(pszFile), util.pstrToFfi(pszSpec)));
}

export function PathMatchSpecW(
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSpec: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathMatchSpecW(util.pwstrToFfi(pszFile), util.pwstrToFfi(pszSpec)));
}

export function PathMatchSpecExA(
  pszFile: string | null /* Windows.Win32.Foundation.PSTR */,
  pszSpec: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.PathMatchSpecExA(util.pstrToFfi(pszFile), util.pstrToFfi(pszSpec), dwFlags));
}

export function PathMatchSpecExW(
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszSpec: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.PathMatchSpecExW(util.pwstrToFfi(pszFile), util.pwstrToFfi(pszSpec), dwFlags));
}

export function PathParseIconLocationA(
  pszIconFile: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.PathParseIconLocationA(util.pstrToFfi(pszIconFile));
}

export function PathParseIconLocationW(
  pszIconFile: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.PathParseIconLocationW(util.pwstrToFfi(pszIconFile));
}

export function PathQuoteSpacesA(
  lpsz: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathQuoteSpacesA(util.pstrToFfi(lpsz)));
}

export function PathQuoteSpacesW(
  lpsz: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathQuoteSpacesW(util.pwstrToFfi(lpsz)));
}

export function PathRelativePathToA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszFrom: string | null /* Windows.Win32.Foundation.PSTR */,
  dwAttrFrom: number /* u32 */,
  pszTo: string | null /* Windows.Win32.Foundation.PSTR */,
  dwAttrTo: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathRelativePathToA(util.pstrToFfi(pszPath), util.pstrToFfi(pszFrom), dwAttrFrom, util.pstrToFfi(pszTo), dwAttrTo));
}

export function PathRelativePathToW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszFrom: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAttrFrom: number /* u32 */,
  pszTo: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAttrTo: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathRelativePathToW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszFrom), dwAttrFrom, util.pwstrToFfi(pszTo), dwAttrTo));
}

export function PathRemoveArgsA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathRemoveArgsA(util.pstrToFfi(pszPath));
}

export function PathRemoveArgsW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathRemoveArgsW(util.pwstrToFfi(pszPath));
}

export function PathRemoveBackslashA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathRemoveBackslashA(util.pstrToFfi(pszPath)));
}

export function PathRemoveBackslashW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathRemoveBackslashW(util.pwstrToFfi(pszPath)));
}

export function PathRemoveBlanksA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathRemoveBlanksA(util.pstrToFfi(pszPath));
}

export function PathRemoveBlanksW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathRemoveBlanksW(util.pwstrToFfi(pszPath));
}

export function PathRemoveExtensionA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathRemoveExtensionA(util.pstrToFfi(pszPath));
}

export function PathRemoveExtensionW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathRemoveExtensionW(util.pwstrToFfi(pszPath));
}

export function PathRemoveFileSpecA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathRemoveFileSpecA(util.pstrToFfi(pszPath)));
}

export function PathRemoveFileSpecW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathRemoveFileSpecW(util.pwstrToFfi(pszPath)));
}

export function PathRenameExtensionA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszExt: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathRenameExtensionA(util.pstrToFfi(pszPath), util.pstrToFfi(pszExt)));
}

export function PathRenameExtensionW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszExt: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathRenameExtensionW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszExt)));
}

export function PathSearchAndQualifyA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathSearchAndQualifyA(util.pstrToFfi(pszPath), util.pstrToFfi(pszBuf), cchBuf));
}

export function PathSearchAndQualifyW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathSearchAndQualifyW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszBuf), cchBuf));
}

export function PathSetDlgItemPathA(
  hDlg: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  id: number /* i32 */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathSetDlgItemPathA(util.hwndToFfi(hDlg), id, util.pstrToFfi(pszPath));
}

export function PathSetDlgItemPathW(
  hDlg: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  id: number /* i32 */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathSetDlgItemPathW(util.hwndToFfi(hDlg), id, util.pwstrToFfi(pszPath));
}

export function PathSkipRootA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.PathSkipRootA(util.pstrToFfi(pszPath)));
}

export function PathSkipRootW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.PathSkipRootW(util.pwstrToFfi(pszPath)));
}

export function PathStripPathA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathStripPathA(util.pstrToFfi(pszPath));
}

export function PathStripPathW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathStripPathW(util.pwstrToFfi(pszPath));
}

export function PathStripToRootA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathStripToRootA(util.pstrToFfi(pszPath)));
}

export function PathStripToRootW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathStripToRootW(util.pwstrToFfi(pszPath)));
}

export function PathUnquoteSpacesA(
  lpsz: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathUnquoteSpacesA(util.pstrToFfi(lpsz)));
}

export function PathUnquoteSpacesW(
  lpsz: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathUnquoteSpacesW(util.pwstrToFfi(lpsz)));
}

export function PathMakeSystemFolderA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathMakeSystemFolderA(util.pstrToFfi(pszPath)));
}

export function PathMakeSystemFolderW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathMakeSystemFolderW(util.pwstrToFfi(pszPath)));
}

export function PathUnmakeSystemFolderA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathUnmakeSystemFolderA(util.pstrToFfi(pszPath)));
}

export function PathUnmakeSystemFolderW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathUnmakeSystemFolderW(util.pwstrToFfi(pszPath)));
}

export function PathIsSystemFolderA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dwAttrb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsSystemFolderA(util.pstrToFfi(pszPath), dwAttrb));
}

export function PathIsSystemFolderW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAttrb: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathIsSystemFolderW(util.pwstrToFfi(pszPath), dwAttrb));
}

export function PathUndecorateA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathUndecorateA(util.pstrToFfi(pszPath));
}

export function PathUndecorateW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libSHLWAPI_dll.PathUndecorateW(util.pwstrToFfi(pszPath));
}

export function PathUnExpandEnvStringsA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathUnExpandEnvStringsA(util.pstrToFfi(pszPath), util.pstrToFfi(pszBuf), cchBuf));
}

export function PathUnExpandEnvStringsW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.PathUnExpandEnvStringsW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszBuf), cchBuf));
}

export function UrlCompareA(
  psz1: string | null /* Windows.Win32.Foundation.PSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PSTR */,
  fIgnoreSlash: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libSHLWAPI_dll.UrlCompareA(util.pstrToFfi(psz1), util.pstrToFfi(psz2), util.boolToFfi(fIgnoreSlash));
}

export function UrlCompareW(
  psz1: string | null /* Windows.Win32.Foundation.PWSTR */,
  psz2: string | null /* Windows.Win32.Foundation.PWSTR */,
  fIgnoreSlash: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libSHLWAPI_dll.UrlCompareW(util.pwstrToFfi(psz1), util.pwstrToFfi(psz2), util.boolToFfi(fIgnoreSlash));
}

export function UrlCombineA(
  pszBase: string | null /* Windows.Win32.Foundation.PSTR */,
  pszRelative: string | null /* Windows.Win32.Foundation.PSTR */,
  pszCombined: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchCombined: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlCombineA(util.pstrToFfi(pszBase), util.pstrToFfi(pszRelative), util.pstrToFfi(pszCombined), util.toPointer(pcchCombined), dwFlags));
}

export function UrlCombineW(
  pszBase: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszRelative: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszCombined: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchCombined: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlCombineW(util.pwstrToFfi(pszBase), util.pwstrToFfi(pszRelative), util.pwstrToFfi(pszCombined), util.toPointer(pcchCombined), dwFlags));
}

export function UrlCanonicalizeA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  pszCanonicalized: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchCanonicalized: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlCanonicalizeA(util.pstrToFfi(pszUrl), util.pstrToFfi(pszCanonicalized), util.toPointer(pcchCanonicalized), dwFlags));
}

export function UrlCanonicalizeW(
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszCanonicalized: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchCanonicalized: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlCanonicalizeW(util.pwstrToFfi(pszUrl), util.pwstrToFfi(pszCanonicalized), util.toPointer(pcchCanonicalized), dwFlags));
}

export function UrlIsOpaqueA(
  pszURL: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.UrlIsOpaqueA(util.pstrToFfi(pszURL)));
}

export function UrlIsOpaqueW(
  pszURL: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.UrlIsOpaqueW(util.pwstrToFfi(pszURL)));
}

export function UrlIsNoHistoryA(
  pszURL: string | null /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.UrlIsNoHistoryA(util.pstrToFfi(pszURL)));
}

export function UrlIsNoHistoryW(
  pszURL: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.UrlIsNoHistoryW(util.pwstrToFfi(pszURL)));
}

export function UrlIsA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  UrlIs: URLIS /* Windows.Win32.UI.Shell.URLIS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.UrlIsA(util.pstrToFfi(pszUrl), UrlIs));
}

export function UrlIsW(
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  UrlIs: URLIS /* Windows.Win32.UI.Shell.URLIS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.UrlIsW(util.pwstrToFfi(pszUrl), UrlIs));
}

export function UrlGetLocationA(
  pszURL: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libSHLWAPI_dll.UrlGetLocationA(util.pstrToFfi(pszURL)));
}

export function UrlGetLocationW(
  pszURL: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libSHLWAPI_dll.UrlGetLocationW(util.pwstrToFfi(pszURL)));
}

export function UrlUnescapeA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  pszUnescaped: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchUnescaped: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlUnescapeA(util.pstrToFfi(pszUrl), util.pstrToFfi(pszUnescaped), util.toPointer(pcchUnescaped), dwFlags));
}

export function UrlUnescapeW(
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszUnescaped: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchUnescaped: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlUnescapeW(util.pwstrToFfi(pszUrl), util.pwstrToFfi(pszUnescaped), util.toPointer(pcchUnescaped), dwFlags));
}

export function UrlEscapeA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  pszEscaped: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchEscaped: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlEscapeA(util.pstrToFfi(pszUrl), util.pstrToFfi(pszEscaped), util.toPointer(pcchEscaped), dwFlags));
}

export function UrlEscapeW(
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszEscaped: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchEscaped: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlEscapeW(util.pwstrToFfi(pszUrl), util.pwstrToFfi(pszEscaped), util.toPointer(pcchEscaped), dwFlags));
}

export function UrlCreateFromPathA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlCreateFromPathA(util.pstrToFfi(pszPath), util.pstrToFfi(pszUrl), util.toPointer(pcchUrl), dwFlags));
}

export function UrlCreateFromPathW(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlCreateFromPathW(util.pwstrToFfi(pszPath), util.pwstrToFfi(pszUrl), util.toPointer(pcchUrl), dwFlags));
}

export function PathCreateFromUrlA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchPath: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.PathCreateFromUrlA(util.pstrToFfi(pszUrl), util.pstrToFfi(pszPath), util.toPointer(pcchPath), dwFlags));
}

export function PathCreateFromUrlW(
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchPath: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.PathCreateFromUrlW(util.pwstrToFfi(pszUrl), util.pwstrToFfi(pszPath), util.toPointer(pcchPath), dwFlags));
}

export function PathCreateFromUrlAlloc(
  pszIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.PathCreateFromUrlAlloc(util.pwstrToFfi(pszIn), util.toPointer(ppszOut), dwFlags));
}

export function UrlHashA(
  pszUrl: string | null /* Windows.Win32.Foundation.PSTR */,
  pbHash: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbHash: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlHashA(util.pstrToFfi(pszUrl), util.toPointer(pbHash), cbHash));
}

export function UrlHashW(
  pszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbHash: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbHash: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlHashW(util.pwstrToFfi(pszUrl), util.toPointer(pbHash), cbHash));
}

export function UrlGetPartW(
  pszIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPart: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlGetPartW(util.pwstrToFfi(pszIn), util.pwstrToFfi(pszOut), util.toPointer(pcchOut), dwPart, dwFlags));
}

export function UrlGetPartA(
  pszIn: string | null /* Windows.Win32.Foundation.PSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwPart: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlGetPartA(util.pstrToFfi(pszIn), util.pstrToFfi(pszOut), util.toPointer(pcchOut), dwPart, dwFlags));
}

export function UrlApplySchemeA(
  pszIn: string | null /* Windows.Win32.Foundation.PSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlApplySchemeA(util.pstrToFfi(pszIn), util.pstrToFfi(pszOut), util.toPointer(pcchOut), dwFlags));
}

export function UrlApplySchemeW(
  pszIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlApplySchemeW(util.pwstrToFfi(pszIn), util.pwstrToFfi(pszOut), util.toPointer(pcchOut), dwFlags));
}

export function HashData(
  pbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  pbHash: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbHash: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.HashData(util.toPointer(pbData), cbData, util.toPointer(pbHash), cbHash));
}

export function UrlFixupW(
  pcszUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszTranslatedUrl: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchMax: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.UrlFixupW(util.pwstrToFfi(pcszUrl), util.pwstrToFfi(pszTranslatedUrl), cchMax));
}

export function ParseURLA(
  pcszURL: string | null /* Windows.Win32.Foundation.PSTR */,
  ppu: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.ParseURLA(util.pstrToFfi(pcszURL), util.toPointer(ppu)));
}

export function ParseURLW(
  pcszURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppu: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.ParseURLW(util.pwstrToFfi(pcszURL), util.toPointer(ppu)));
}

export function SHDeleteEmptyKeyA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHDeleteEmptyKeyA(util.toPointer(hkey), util.pstrToFfi(pszSubKey));
}

export function SHDeleteEmptyKeyW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHDeleteEmptyKeyW(util.toPointer(hkey), util.pwstrToFfi(pszSubKey));
}

export function SHDeleteKeyA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHDeleteKeyA(util.toPointer(hkey), util.pstrToFfi(pszSubKey));
}

export function SHDeleteKeyW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHDeleteKeyW(util.toPointer(hkey), util.pwstrToFfi(pszSubKey));
}

export function SHRegDuplicateHKey(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHRegDuplicateHKey(util.toPointer(hkey)));
}

export function SHDeleteValueA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHDeleteValueA(util.toPointer(hkey), util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue));
}

export function SHDeleteValueW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHDeleteValueW(util.toPointer(hkey), util.pwstrToFfi(pszSubKey), util.pwstrToFfi(pszValue));
}

export function SHGetValueA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHGetValueA(util.toPointer(hkey), util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHGetValueW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHGetValueW(util.toPointer(hkey), util.pwstrToFfi(pszSubKey), util.pwstrToFfi(pszValue), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHSetValueA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  dwType: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHSetValueA(util.toPointer(hkey), util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue), dwType, util.toPointer(pvData), cbData);
}

export function SHSetValueW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHSetValueW(util.toPointer(hkey), util.pwstrToFfi(pszSubKey), util.pwstrToFfi(pszValue), dwType, util.toPointer(pvData), cbData);
}

export function SHRegGetValueA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  srrfFlags: number /* i32 */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetValueA(util.toPointer(hkey), util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue), srrfFlags, util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHRegGetValueW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  srrfFlags: number /* i32 */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetValueW(util.toPointer(hkey), util.pwstrToFfi(pszSubKey), util.pwstrToFfi(pszValue), srrfFlags, util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHRegGetValueFromHKCUHKLM(
  pwszKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  srrfFlags: number /* i32 */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetValueFromHKCUHKLM(util.pwstrToFfi(pwszKey), util.pwstrToFfi(pwszValue), srrfFlags, util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHQueryValueExA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  pdwReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHQueryValueExA(util.toPointer(hkey), util.pstrToFfi(pszValue), util.toPointer(pdwReserved), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHQueryValueExW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHQueryValueExW(util.toPointer(hkey), util.pwstrToFfi(pszValue), util.toPointer(pdwReserved), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHEnumKeyExA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHEnumKeyExA(util.toPointer(hkey), dwIndex, util.pstrToFfi(pszName), util.toPointer(pcchName));
}

export function SHEnumKeyExW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  pszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHEnumKeyExW(util.toPointer(hkey), dwIndex, util.pwstrToFfi(pszName), util.toPointer(pcchName));
}

export function SHEnumValueA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  pszValueName: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchValueName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHEnumValueA(util.toPointer(hkey), dwIndex, util.pstrToFfi(pszValueName), util.toPointer(pcchValueName), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHEnumValueW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchValueName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHEnumValueW(util.toPointer(hkey), dwIndex, util.pwstrToFfi(pszValueName), util.toPointer(pcchValueName), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData));
}

export function SHQueryInfoKeyA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcSubKeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxSubKeyLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcValues: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxValueNameLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHQueryInfoKeyA(util.toPointer(hkey), util.toPointer(pcSubKeys), util.toPointer(pcchMaxSubKeyLen), util.toPointer(pcValues), util.toPointer(pcchMaxValueNameLen));
}

export function SHQueryInfoKeyW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcSubKeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxSubKeyLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcValues: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxValueNameLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHQueryInfoKeyW(util.toPointer(hkey), util.toPointer(pcSubKeys), util.toPointer(pcchMaxSubKeyLen), util.toPointer(pcValues), util.toPointer(pcchMaxValueNameLen));
}

export function SHCopyKeyA(
  hkeySrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSrcSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  hkeyDest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  fReserved: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHCopyKeyA(util.toPointer(hkeySrc), util.pstrToFfi(pszSrcSubKey), util.toPointer(hkeyDest), fReserved);
}

export function SHCopyKeyW(
  hkeySrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSrcSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  hkeyDest: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  fReserved: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHCopyKeyW(util.toPointer(hkeySrc), util.pwstrToFfi(pszSrcSubKey), util.toPointer(hkeyDest), fReserved);
}

export function SHRegGetPathA(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pcszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetPathA(util.toPointer(hKey), util.pstrToFfi(pcszSubKey), util.pstrToFfi(pcszValue), util.pstrToFfi(pszPath), dwFlags);
}

export function SHRegGetPathW(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetPathW(util.toPointer(hKey), util.pwstrToFfi(pcszSubKey), util.pwstrToFfi(pcszValue), util.pwstrToFfi(pszPath), dwFlags);
}

export function SHRegSetPathA(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pcszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  pcszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegSetPathA(util.toPointer(hKey), util.pstrToFfi(pcszSubKey), util.pstrToFfi(pcszValue), util.pstrToFfi(pcszPath), dwFlags);
}

export function SHRegSetPathW(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pcszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegSetPathW(util.toPointer(hKey), util.pwstrToFfi(pcszSubKey), util.pwstrToFfi(pcszValue), util.pwstrToFfi(pcszPath), dwFlags);
}

export function SHRegCreateUSKeyA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  samDesired: number /* u32 */,
  hRelativeUSKey: Deno.PointerValue /* isize */,
  phNewUSKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegCreateUSKeyA(util.pstrToFfi(pszPath), samDesired, hRelativeUSKey, util.toPointer(phNewUSKey), dwFlags);
}

export function SHRegCreateUSKeyW(
  pwzPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  hRelativeUSKey: Deno.PointerValue /* isize */,
  phNewUSKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegCreateUSKeyW(util.pwstrToFfi(pwzPath), samDesired, hRelativeUSKey, util.toPointer(phNewUSKey), dwFlags);
}

export function SHRegOpenUSKeyA(
  pszPath: string | null /* Windows.Win32.Foundation.PSTR */,
  samDesired: number /* u32 */,
  hRelativeUSKey: Deno.PointerValue /* isize */,
  phNewUSKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegOpenUSKeyA(util.pstrToFfi(pszPath), samDesired, hRelativeUSKey, util.toPointer(phNewUSKey), util.boolToFfi(fIgnoreHKCU));
}

export function SHRegOpenUSKeyW(
  pwzPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  hRelativeUSKey: Deno.PointerValue /* isize */,
  phNewUSKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegOpenUSKeyW(util.pwstrToFfi(pwzPath), samDesired, hRelativeUSKey, util.toPointer(phNewUSKey), util.boolToFfi(fIgnoreHKCU));
}

export function SHRegQueryUSValueA(
  hUSKey: Deno.PointerValue /* isize */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
  pvDefaultData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDefaultDataSize: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegQueryUSValueA(hUSKey, util.pstrToFfi(pszValue), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData), util.boolToFfi(fIgnoreHKCU), util.toPointer(pvDefaultData), dwDefaultDataSize);
}

export function SHRegQueryUSValueW(
  hUSKey: Deno.PointerValue /* isize */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
  pvDefaultData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDefaultDataSize: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegQueryUSValueW(hUSKey, util.pwstrToFfi(pszValue), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData), util.boolToFfi(fIgnoreHKCU), util.toPointer(pvDefaultData), dwDefaultDataSize);
}

export function SHRegWriteUSValueA(
  hUSKey: Deno.PointerValue /* isize */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  dwType: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegWriteUSValueA(hUSKey, util.pstrToFfi(pszValue), dwType, util.toPointer(pvData), cbData, dwFlags);
}

export function SHRegWriteUSValueW(
  hUSKey: Deno.PointerValue /* isize */,
  pwzValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegWriteUSValueW(hUSKey, util.pwstrToFfi(pwzValue), dwType, util.toPointer(pvData), cbData, dwFlags);
}

export function SHRegDeleteUSValueA(
  hUSKey: Deno.PointerValue /* isize */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  delRegFlags: SHREGDEL_FLAGS /* Windows.Win32.UI.Shell.SHREGDEL_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegDeleteUSValueA(hUSKey, util.pstrToFfi(pszValue), delRegFlags);
}

export function SHRegDeleteUSValueW(
  hUSKey: Deno.PointerValue /* isize */,
  pwzValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  delRegFlags: SHREGDEL_FLAGS /* Windows.Win32.UI.Shell.SHREGDEL_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegDeleteUSValueW(hUSKey, util.pwstrToFfi(pwzValue), delRegFlags);
}

export function SHRegDeleteEmptyUSKeyW(
  hUSKey: Deno.PointerValue /* isize */,
  pwzSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  delRegFlags: SHREGDEL_FLAGS /* Windows.Win32.UI.Shell.SHREGDEL_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegDeleteEmptyUSKeyW(hUSKey, util.pwstrToFfi(pwzSubKey), delRegFlags);
}

export function SHRegDeleteEmptyUSKeyA(
  hUSKey: Deno.PointerValue /* isize */,
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  delRegFlags: SHREGDEL_FLAGS /* Windows.Win32.UI.Shell.SHREGDEL_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegDeleteEmptyUSKeyA(hUSKey, util.pstrToFfi(pszSubKey), delRegFlags);
}

export function SHRegEnumUSKeyA(
  hUSKey: Deno.PointerValue /* isize */,
  dwIndex: number /* u32 */,
  pszName: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumRegFlags: SHREGENUM_FLAGS /* Windows.Win32.UI.Shell.SHREGENUM_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegEnumUSKeyA(hUSKey, dwIndex, util.pstrToFfi(pszName), util.toPointer(pcchName), enumRegFlags);
}

export function SHRegEnumUSKeyW(
  hUSKey: Deno.PointerValue /* isize */,
  dwIndex: number /* u32 */,
  pwzName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumRegFlags: SHREGENUM_FLAGS /* Windows.Win32.UI.Shell.SHREGENUM_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegEnumUSKeyW(hUSKey, dwIndex, util.pwstrToFfi(pwzName), util.toPointer(pcchName), enumRegFlags);
}

export function SHRegEnumUSValueA(
  hUSkey: Deno.PointerValue /* isize */,
  dwIndex: number /* u32 */,
  pszValueName: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchValueName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumRegFlags: SHREGENUM_FLAGS /* Windows.Win32.UI.Shell.SHREGENUM_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegEnumUSValueA(hUSkey, dwIndex, util.pstrToFfi(pszValueName), util.toPointer(pcchValueName), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData), enumRegFlags);
}

export function SHRegEnumUSValueW(
  hUSkey: Deno.PointerValue /* isize */,
  dwIndex: number /* u32 */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchValueName: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumRegFlags: SHREGENUM_FLAGS /* Windows.Win32.UI.Shell.SHREGENUM_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegEnumUSValueW(hUSkey, dwIndex, util.pwstrToFfi(pszValueName), util.toPointer(pcchValueName), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData), enumRegFlags);
}

export function SHRegQueryInfoUSKeyA(
  hUSKey: Deno.PointerValue /* isize */,
  pcSubKeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxSubKeyLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcValues: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxValueNameLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumRegFlags: SHREGENUM_FLAGS /* Windows.Win32.UI.Shell.SHREGENUM_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegQueryInfoUSKeyA(hUSKey, util.toPointer(pcSubKeys), util.toPointer(pcchMaxSubKeyLen), util.toPointer(pcValues), util.toPointer(pcchMaxValueNameLen), enumRegFlags);
}

export function SHRegQueryInfoUSKeyW(
  hUSKey: Deno.PointerValue /* isize */,
  pcSubKeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxSubKeyLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcValues: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchMaxValueNameLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumRegFlags: SHREGENUM_FLAGS /* Windows.Win32.UI.Shell.SHREGENUM_FLAGS */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegQueryInfoUSKeyW(hUSKey, util.toPointer(pcSubKeys), util.toPointer(pcchMaxSubKeyLen), util.toPointer(pcValues), util.toPointer(pcchMaxValueNameLen), enumRegFlags);
}

export function SHRegCloseUSKey(
  hUSKey: Deno.PointerValue /* isize */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegCloseUSKey(hUSKey);
}

export function SHRegGetUSValueA(
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
  pvDefaultData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDefaultDataSize: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetUSValueA(util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData), util.boolToFfi(fIgnoreHKCU), util.toPointer(pvDefaultData), dwDefaultDataSize);
}

export function SHRegGetUSValueW(
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
  pvDefaultData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDefaultDataSize: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetUSValueW(util.pwstrToFfi(pszSubKey), util.pwstrToFfi(pszValue), util.toPointer(pdwType), util.toPointer(pvData), util.toPointer(pcbData), util.boolToFfi(fIgnoreHKCU), util.toPointer(pvDefaultData), dwDefaultDataSize);
}

export function SHRegSetUSValueA(
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  dwType: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegSetUSValueA(util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue), dwType, util.toPointer(pvData), cbData, dwFlags);
}

export function SHRegSetUSValueW(
  pwzSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  dwFlags: number /* u32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegSetUSValueW(util.pwstrToFfi(pwzSubKey), util.pwstrToFfi(pwzValue), dwType, util.toPointer(pvData), cbData, dwFlags);
}

export function SHRegGetIntW(
  hk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pwzKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  iDefault: number /* i32 */,
): WIN32_ERROR /* Windows.Win32.Foundation.WIN32_ERROR */ {
  return libSHLWAPI_dll.SHRegGetIntW(util.toPointer(hk), util.pwstrToFfi(pwzKey), iDefault);
}

export function SHRegGetBoolUSValueA(
  pszSubKey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
  fDefault: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHRegGetBoolUSValueA(util.pstrToFfi(pszSubKey), util.pstrToFfi(pszValue), util.boolToFfi(fIgnoreHKCU), util.boolToFfi(fDefault)));
}

export function SHRegGetBoolUSValueW(
  pszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  fIgnoreHKCU: boolean /* Windows.Win32.Foundation.BOOL */,
  fDefault: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHRegGetBoolUSValueW(util.pwstrToFfi(pszSubKey), util.pwstrToFfi(pszValue), util.boolToFfi(fIgnoreHKCU), util.boolToFfi(fDefault)));
}

export function AssocCreate(
  clsid: Uint8Array | Deno.PointerValue | null /* System.Guid */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocCreate(util.toPointer(clsid), util.toPointer(riid), util.toPointer(ppv)));
}

export function AssocQueryStringA(
  flags: number /* u32 */,
  str: ASSOCSTR /* Windows.Win32.UI.Shell.ASSOCSTR */,
  pszAssoc: string | null /* Windows.Win32.Foundation.PSTR */,
  pszExtra: string | null /* Windows.Win32.Foundation.PSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocQueryStringA(flags, str, util.pstrToFfi(pszAssoc), util.pstrToFfi(pszExtra), util.pstrToFfi(pszOut), util.toPointer(pcchOut)));
}

export function AssocQueryStringW(
  flags: number /* u32 */,
  str: ASSOCSTR /* Windows.Win32.UI.Shell.ASSOCSTR */,
  pszAssoc: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszExtra: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocQueryStringW(flags, str, util.pwstrToFfi(pszAssoc), util.pwstrToFfi(pszExtra), util.pwstrToFfi(pszOut), util.toPointer(pcchOut)));
}

export function AssocQueryStringByKeyA(
  flags: number /* u32 */,
  str: ASSOCSTR /* Windows.Win32.UI.Shell.ASSOCSTR */,
  hkAssoc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszExtra: string | null /* Windows.Win32.Foundation.PSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocQueryStringByKeyA(flags, str, util.toPointer(hkAssoc), util.pstrToFfi(pszExtra), util.pstrToFfi(pszOut), util.toPointer(pcchOut)));
}

export function AssocQueryStringByKeyW(
  flags: number /* u32 */,
  str: ASSOCSTR /* Windows.Win32.UI.Shell.ASSOCSTR */,
  hkAssoc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszExtra: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocQueryStringByKeyW(flags, str, util.toPointer(hkAssoc), util.pwstrToFfi(pszExtra), util.pwstrToFfi(pszOut), util.toPointer(pcchOut)));
}

export function AssocQueryKeyA(
  flags: number /* u32 */,
  key: ASSOCKEY /* Windows.Win32.UI.Shell.ASSOCKEY */,
  pszAssoc: string | null /* Windows.Win32.Foundation.PSTR */,
  pszExtra: string | null /* Windows.Win32.Foundation.PSTR */,
  phkeyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocQueryKeyA(flags, key, util.pstrToFfi(pszAssoc), util.pstrToFfi(pszExtra), util.toPointer(phkeyOut)));
}

export function AssocQueryKeyW(
  flags: number /* u32 */,
  key: ASSOCKEY /* Windows.Win32.UI.Shell.ASSOCKEY */,
  pszAssoc: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszExtra: string | null /* Windows.Win32.Foundation.PWSTR */,
  phkeyOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocQueryKeyW(flags, key, util.pwstrToFfi(pszAssoc), util.pwstrToFfi(pszExtra), util.toPointer(phkeyOut)));
}

export function AssocIsDangerous(
  pszAssoc: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.AssocIsDangerous(util.pwstrToFfi(pszAssoc)));
}

export function AssocGetPerceivedType(
  pszExt: string | null /* Windows.Win32.Foundation.PWSTR */,
  ptype: Deno.PointerValue | Uint8Array | null /* ptr */,
  pflag: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppszType: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.AssocGetPerceivedType(util.pwstrToFfi(pszExt), util.toPointer(ptype), util.toPointer(pflag), util.toPointer(ppszType)));
}

export function SHOpenRegStreamA(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubkey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  grfMode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHOpenRegStreamA(util.toPointer(hkey), util.pstrToFfi(pszSubkey), util.pstrToFfi(pszValue), grfMode));
}

export function SHOpenRegStreamW(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubkey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHOpenRegStreamW(util.toPointer(hkey), util.pwstrToFfi(pszSubkey), util.pwstrToFfi(pszValue), grfMode));
}

export function SHOpenRegStream2A(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubkey: string | null /* Windows.Win32.Foundation.PSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PSTR */,
  grfMode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHOpenRegStream2A(util.toPointer(hkey), util.pstrToFfi(pszSubkey), util.pstrToFfi(pszValue), grfMode));
}

export function SHOpenRegStream2W(
  hkey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszSubkey: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHOpenRegStream2W(util.toPointer(hkey), util.pwstrToFfi(pszSubkey), util.pwstrToFfi(pszValue), grfMode));
}

export function SHCreateStreamOnFileA(
  pszFile: string | null /* Windows.Win32.Foundation.PSTR */,
  grfMode: number /* u32 */,
  ppstm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHCreateStreamOnFileA(util.pstrToFfi(pszFile), grfMode, util.toPointer(ppstm)));
}

export function SHCreateStreamOnFileW(
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
  ppstm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHCreateStreamOnFileW(util.pwstrToFfi(pszFile), grfMode, util.toPointer(ppstm)));
}

export function SHCreateStreamOnFileEx(
  pszFile: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfMode: number /* u32 */,
  dwAttributes: number /* u32 */,
  fCreate: boolean /* Windows.Win32.Foundation.BOOL */,
  pstmTemplate: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  ppstm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHCreateStreamOnFileEx(util.pwstrToFfi(pszFile), grfMode, dwAttributes, util.boolToFfi(fCreate), util.toPointer(pstmTemplate), util.toPointer(ppstm)));
}

export function SHCreateMemStream(
  pInit: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInit: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHCreateMemStream(util.toPointer(pInit), cbInit));
}

export function GetAcceptLanguagesA(
  pszLanguages: string | null /* Windows.Win32.Foundation.PSTR */,
  pcchLanguages: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.GetAcceptLanguagesA(util.pstrToFfi(pszLanguages), util.toPointer(pcchLanguages)));
}

export function GetAcceptLanguagesW(
  pszLanguages: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchLanguages: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.GetAcceptLanguagesW(util.pwstrToFfi(pszLanguages), util.toPointer(pcchLanguages)));
}

export function IUnknown_Set(
  ppunk: Deno.PointerValue | Uint8Array | null /* ptr */,
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): void /* void */ {
  return libSHLWAPI_dll.IUnknown_Set(util.toPointer(ppunk), util.toPointer(punk));
}

export function IUnknown_AtomicRelease(
  ppunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSHLWAPI_dll.IUnknown_AtomicRelease(util.toPointer(ppunk));
}

export function IUnknown_GetWindow(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  phwnd: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IUnknown_GetWindow(util.toPointer(punk), util.toPointer(phwnd)));
}

export function IUnknown_SetSite(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  punkSite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IUnknown_SetSite(util.toPointer(punk), util.toPointer(punkSite)));
}

export function IUnknown_GetSite(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IUnknown_GetSite(util.toPointer(punk), util.toPointer(riid), util.toPointer(ppv)));
}

export function IUnknown_QueryService(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  guidService: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IUnknown_QueryService(util.toPointer(punk), util.toPointer(guidService), util.toPointer(riid), util.toPointer(ppvOut)));
}

export function IStream_Read(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_Read(util.toPointer(pstm), util.toPointer(pv), cb));
}

export function IStream_Write(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pv: Deno.PointerValue | Uint8Array | null /* ptr */,
  cb: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_Write(util.toPointer(pstm), util.toPointer(pv), cb));
}

export function IStream_Reset(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_Reset(util.toPointer(pstm)));
}

export function IStream_Size(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pui: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_Size(util.toPointer(pstm), util.toPointer(pui)));
}

export function ConnectToConnectionPoint(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riidEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
  fConnect: boolean /* Windows.Win32.Foundation.BOOL */,
  punkTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pdwCookie: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppcpOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.ConnectToConnectionPoint(util.toPointer(punk), util.toPointer(riidEvent), util.boolToFfi(fConnect), util.toPointer(punkTarget), util.toPointer(pdwCookie), util.toPointer(ppcpOut)));
}

export function IStream_ReadPidl(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  ppidlOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_ReadPidl(util.toPointer(pstm), util.toPointer(ppidlOut)));
}

export function IStream_WritePidl(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pidlWrite: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_WritePidl(util.toPointer(pstm), util.toPointer(pidlWrite)));
}

export function IStream_ReadStr(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  ppsz: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_ReadStr(util.toPointer(pstm), util.toPointer(ppsz)));
}

export function IStream_WriteStr(
  pstm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  psz: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_WriteStr(util.toPointer(pstm), util.pwstrToFfi(psz)));
}

export function IStream_Copy(
  pstmFrom: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  pstmTo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  cb: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.IStream_Copy(util.toPointer(pstmFrom), util.toPointer(pstmTo), cb));
}

export function SHGetViewStatePropertyBag(
  pidl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszBagName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHGetViewStatePropertyBag(util.toPointer(pidl), util.pwstrToFfi(pszBagName), dwFlags, util.toPointer(riid), util.toPointer(ppv)));
}

export function SHFormatDateTimeA(
  pft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHFormatDateTimeA(util.toPointer(pft), util.toPointer(pdwFlags), util.pstrToFfi(pszBuf), cchBuf);
}

export function SHFormatDateTimeW(
  pft: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHFormatDateTimeW(util.toPointer(pft), util.toPointer(pdwFlags), util.pwstrToFfi(pszBuf), cchBuf);
}

export function SHAnsiToUnicode(
  pszSrc: string | null /* Windows.Win32.Foundation.PSTR */,
  pwszDst: string | null /* Windows.Win32.Foundation.PWSTR */,
  cwchBuf: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHAnsiToUnicode(util.pstrToFfi(pszSrc), util.pwstrToFfi(pwszDst), cwchBuf);
}

export function SHAnsiToAnsi(
  pszSrc: string | null /* Windows.Win32.Foundation.PSTR */,
  pszDst: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHAnsiToAnsi(util.pstrToFfi(pszSrc), util.pstrToFfi(pszDst), cchBuf);
}

export function SHUnicodeToAnsi(
  pwszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszDst: string | null /* Windows.Win32.Foundation.PSTR */,
  cchBuf: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHUnicodeToAnsi(util.pwstrToFfi(pwszSrc), util.pstrToFfi(pszDst), cchBuf);
}

export function SHUnicodeToUnicode(
  pwzSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzDst: string | null /* Windows.Win32.Foundation.PWSTR */,
  cwchBuf: number /* i32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHUnicodeToUnicode(util.pwstrToFfi(pwzSrc), util.pwstrToFfi(pwzDst), cwchBuf);
}

export function SHMessageBoxCheckA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszText: string | null /* Windows.Win32.Foundation.PSTR */,
  pszCaption: string | null /* Windows.Win32.Foundation.PSTR */,
  uType: number /* u32 */,
  iDefault: number /* i32 */,
  pszRegVal: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHMessageBoxCheckA(util.hwndToFfi(hwnd), util.pstrToFfi(pszText), util.pstrToFfi(pszCaption), uType, iDefault, util.pstrToFfi(pszRegVal));
}

export function SHMessageBoxCheckW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszText: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszCaption: string | null /* Windows.Win32.Foundation.PWSTR */,
  uType: number /* u32 */,
  iDefault: number /* i32 */,
  pszRegVal: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHMessageBoxCheckW(util.hwndToFfi(hwnd), util.pwstrToFfi(pszText), util.pwstrToFfi(pszCaption), uType, iDefault, util.pwstrToFfi(pszRegVal));
}

export function SHSendMessageBroadcastA(
  uMsg: number /* u32 */,
  wParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHSendMessageBroadcastA(uMsg, util.toPointer(wParam), util.toPointer(lParam)));
}

export function SHSendMessageBroadcastW(
  uMsg: number /* u32 */,
  wParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHSendMessageBroadcastW(uMsg, util.toPointer(wParam), util.toPointer(lParam)));
}

export function SHStripMneumonicA(
  pszMenu: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.CHAR */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHStripMneumonicA(util.pstrToFfi(pszMenu)));
}

export function SHStripMneumonicW(
  pszMenu: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* char */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHStripMneumonicW(util.pwstrToFfi(pszMenu)));
}

export function IsOS(
  dwOS: OS /* Windows.Win32.UI.Shell.OS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.IsOS(dwOS));
}

export function SHGlobalCounterGetValue(
  id: SHGLOBALCOUNTER /* Windows.Win32.UI.Shell.SHGLOBALCOUNTER */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHGlobalCounterGetValue(id);
}

export function SHGlobalCounterIncrement(
  id: SHGLOBALCOUNTER /* Windows.Win32.UI.Shell.SHGLOBALCOUNTER */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHGlobalCounterIncrement(id);
}

export function SHGlobalCounterDecrement(
  id: SHGLOBALCOUNTER /* Windows.Win32.UI.Shell.SHGLOBALCOUNTER */,
): number /* i32 */ {
  return libSHLWAPI_dll.SHGlobalCounterDecrement(id);
}

export function SHAllocShared(
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
  dwProcessId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHAllocShared(util.toPointer(pvData), dwSize, dwProcessId));
}

export function SHFreeShared(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProcessId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHFreeShared(util.toPointer(hData), dwProcessId));
}

export function SHLockShared(
  hData: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwProcessId: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHLockShared(util.toPointer(hData), dwProcessId));
}

export function SHUnlockShared(
  pvData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHUnlockShared(util.toPointer(pvData)));
}

export function WhichPlatform(): number /* u32 */ {
  return libSHLWAPI_dll.WhichPlatform();
}

export function QISearch(
  that: Deno.PointerValue | Uint8Array | null /* ptr */,
  pqit: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.QISearch(util.toPointer(that), util.toPointer(pqit), util.toPointer(riid), util.toPointer(ppv)));
}

export function SHIsLowMemoryMachine(
  dwType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHIsLowMemoryMachine(dwType));
}

export function GetMenuPosFromID(
  hmenu: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  id: number /* u32 */,
): number /* i32 */ {
  return libSHLWAPI_dll.GetMenuPosFromID(util.toPointer(hmenu), id);
}

export function SHGetInverseCMAP(
  pbMap: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbMap: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHGetInverseCMAP(util.toPointer(pbMap), cbMap));
}

export function SHAutoComplete(
  hwndEdit: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwFlags: SHELL_AUTOCOMPLETE_FLAGS /* Windows.Win32.UI.Shell.SHELL_AUTOCOMPLETE_FLAGS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHAutoComplete(util.hwndToFfi(hwndEdit), dwFlags));
}

export function SHCreateThreadRef(
  pcRef: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHCreateThreadRef(util.toPointer(pcRef), util.toPointer(ppunk)));
}

export function SHSetThreadRef(
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHSetThreadRef(util.toPointer(punk)));
}

export function SHGetThreadRef(
  ppunk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHGetThreadRef(util.toPointer(ppunk)));
}

export function SHSkipJunction(
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHSkipJunction(util.toPointer(pbc), util.toPointer(pclsid)));
}

export function SHCreateThread(
  pfnThreadProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHCreateThread(util.toPointer(pfnThreadProc), util.toPointer(pData), flags, util.toPointer(pfnCallback)));
}

export function SHCreateThreadWithHandle(
  pfnThreadProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  pfnCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */,
  pHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.SHCreateThreadWithHandle(util.toPointer(pfnThreadProc), util.toPointer(pData), flags, util.toPointer(pfnCallback), util.toPointer(pHandle)));
}

export function SHReleaseThreadRef(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHReleaseThreadRef());
}

export function SHCreateShellPalette(
  hdc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HPALETTE */ {
  return util.pointerFromFfi(libSHLWAPI_dll.SHCreateShellPalette(util.toPointer(hdc)));
}

export function ColorRGBToHLS(
  clrRGB: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.COLORREF */,
  pwHue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwLuminance: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwSaturation: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libSHLWAPI_dll.ColorRGBToHLS(util.toPointer(clrRGB), util.toPointer(pwHue), util.toPointer(pwLuminance), util.toPointer(pwSaturation));
}

export function ColorHLSToRGB(
  wHue: number /* u16 */,
  wLuminance: number /* u16 */,
  wSaturation: number /* u16 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.COLORREF */ {
  return util.pointerFromFfi(libSHLWAPI_dll.ColorHLSToRGB(wHue, wLuminance, wSaturation));
}

export function ColorAdjustLuma(
  clrRGB: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.COLORREF */,
  n: number /* i32 */,
  fScale: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.COLORREF */ {
  return util.pointerFromFfi(libSHLWAPI_dll.ColorAdjustLuma(util.toPointer(clrRGB), n, util.boolToFfi(fScale)));
}

export function IsInternetESCEnabled(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSHLWAPI_dll.IsInternetESCEnabled());
}

export function HlinkCreateFromMoniker(
  pimkTrgt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pihlsite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkSite */,
  dwSiteData: number /* u32 */,
  piunkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateFromMoniker(util.toPointer(pimkTrgt), util.pwstrToFfi(pwzLocation), util.pwstrToFfi(pwzFriendlyName), util.toPointer(pihlsite), dwSiteData, util.toPointer(piunkOuter), util.toPointer(riid), util.toPointer(ppvObj)));
}

export function HlinkCreateFromString(
  pwzTarget: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pihlsite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkSite */,
  dwSiteData: number /* u32 */,
  piunkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateFromString(util.pwstrToFfi(pwzTarget), util.pwstrToFfi(pwzLocation), util.pwstrToFfi(pwzFriendlyName), util.toPointer(pihlsite), dwSiteData, util.toPointer(piunkOuter), util.toPointer(riid), util.toPointer(ppvObj)));
}

export function HlinkCreateFromData(
  piDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
  pihlsite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkSite */,
  dwSiteData: number /* u32 */,
  piunkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateFromData(util.toPointer(piDataObj), util.toPointer(pihlsite), dwSiteData, util.toPointer(piunkOuter), util.toPointer(riid), util.toPointer(ppvObj)));
}

export function HlinkQueryCreateFromData(
  piDataObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IDataObject */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkQueryCreateFromData(util.toPointer(piDataObj)));
}

export function HlinkClone(
  pihl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlink */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pihlsiteForClone: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkSite */,
  dwSiteData: number /* u32 */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkClone(util.toPointer(pihl), util.toPointer(riid), util.toPointer(pihlsiteForClone), dwSiteData, util.toPointer(ppvObj)));
}

export function HlinkCreateBrowseContext(
  piunkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateBrowseContext(util.toPointer(piunkOuter), util.toPointer(riid), util.toPointer(ppvObj)));
}

export function HlinkNavigateToStringReference(
  pwzTarget: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pihlsite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkSite */,
  dwSiteData: number /* u32 */,
  pihlframe: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkFrame */,
  grfHLNF: number /* u32 */,
  pibc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pibsc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  pihlbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkBrowseContext */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkNavigateToStringReference(util.pwstrToFfi(pwzTarget), util.pwstrToFfi(pwzLocation), util.toPointer(pihlsite), dwSiteData, util.toPointer(pihlframe), grfHLNF, util.toPointer(pibc), util.toPointer(pibsc), util.toPointer(pihlbc)));
}

export function HlinkNavigate(
  pihl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlink */,
  pihlframe: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkFrame */,
  grfHLNF: number /* u32 */,
  pbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pibsc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  pihlbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkBrowseContext */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkNavigate(util.toPointer(pihl), util.toPointer(pihlframe), grfHLNF, util.toPointer(pbc), util.toPointer(pibsc), util.toPointer(pihlbc)));
}

export function HlinkOnNavigate(
  pihlframe: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkFrame */,
  pihlbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkBrowseContext */,
  grfHLNF: number /* u32 */,
  pimkTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  puHLID: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkOnNavigate(util.toPointer(pihlframe), util.toPointer(pihlbc), grfHLNF, util.toPointer(pimkTarget), util.pwstrToFfi(pwzLocation), util.pwstrToFfi(pwzFriendlyName), util.toPointer(puHLID)));
}

export function HlinkUpdateStackItem(
  pihlframe: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkFrame */,
  pihlbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkBrowseContext */,
  uHLID: number /* u32 */,
  pimkTrgt: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFriendlyName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkUpdateStackItem(util.toPointer(pihlframe), util.toPointer(pihlbc), uHLID, util.toPointer(pimkTrgt), util.pwstrToFfi(pwzLocation), util.pwstrToFfi(pwzFriendlyName)));
}

export function HlinkOnRenameDocument(
  dwReserved: number /* u32 */,
  pihlbc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkBrowseContext */,
  pimkOld: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pimkNew: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkOnRenameDocument(dwReserved, util.toPointer(pihlbc), util.toPointer(pimkOld), util.toPointer(pimkNew)));
}

export function HlinkResolveMonikerForData(
  pimkReference: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  reserved: number /* u32 */,
  pibc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  cFmtetc: number /* u32 */,
  rgFmtetc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pibsc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  pimkBase: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkResolveMonikerForData(util.toPointer(pimkReference), reserved, util.toPointer(pibc), cFmtetc, util.toPointer(rgFmtetc), util.toPointer(pibsc), util.toPointer(pimkBase)));
}

export function HlinkResolveStringForData(
  pwzReference: string | null /* Windows.Win32.Foundation.PWSTR */,
  reserved: number /* u32 */,
  pibc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  cFmtetc: number /* u32 */,
  rgFmtetc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pibsc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindStatusCallback */,
  pimkBase: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkResolveStringForData(util.pwstrToFfi(pwzReference), reserved, util.toPointer(pibc), cFmtetc, util.toPointer(rgFmtetc), util.toPointer(pibsc), util.toPointer(pimkBase)));
}

export function HlinkParseDisplayName(
  pibc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pwzDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  fNoForceAbs: boolean /* Windows.Win32.Foundation.BOOL */,
  pcchEaten: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppimk: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkParseDisplayName(util.toPointer(pibc), util.pwstrToFfi(pwzDisplayName), util.boolToFfi(fNoForceAbs), util.toPointer(pcchEaten), util.toPointer(ppimk)));
}

export function HlinkCreateExtensionServices(
  pwzAdditionalHeaders: string | null /* Windows.Win32.Foundation.PWSTR */,
  phwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszUsername: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  piunkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateExtensionServices(util.pwstrToFfi(pwzAdditionalHeaders), util.hwndToFfi(phwnd), util.pwstrToFfi(pszUsername), util.pwstrToFfi(pszPassword), util.toPointer(piunkOuter), util.toPointer(riid), util.toPointer(ppvObj)));
}

export function HlinkPreprocessMoniker(
  pibc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IBindCtx */,
  pimkIn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  ppimkOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkPreprocessMoniker(util.toPointer(pibc), util.toPointer(pimkIn), util.toPointer(ppimkOut)));
}

export function OleSaveToStreamEx(
  piunk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  pistm: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IStream */,
  fClearDirty: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.OleSaveToStreamEx(util.toPointer(piunk), util.toPointer(pistm), util.boolToFfi(fClearDirty)));
}

export function HlinkSetSpecialReference(
  uReference: number /* u32 */,
  pwzReference: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkSetSpecialReference(uReference, util.pwstrToFfi(pwzReference)));
}

export function HlinkGetSpecialReference(
  uReference: number /* u32 */,
  ppwzReference: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkGetSpecialReference(uReference, util.toPointer(ppwzReference)));
}

export function HlinkCreateShortcut(
  grfHLSHORTCUTF: number /* u32 */,
  pihl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlink */,
  pwzDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwzShortcutFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateShortcut(grfHLSHORTCUTF, util.toPointer(pihl), util.pwstrToFfi(pwzDir), util.pwstrToFfi(pwzFileName), util.toPointer(ppwzShortcutFile), dwReserved));
}

export function HlinkCreateShortcutFromMoniker(
  grfHLSHORTCUTF: number /* u32 */,
  pimkTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMoniker */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwzShortcutFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateShortcutFromMoniker(grfHLSHORTCUTF, util.toPointer(pimkTarget), util.pwstrToFfi(pwzLocation), util.pwstrToFfi(pwzDir), util.pwstrToFfi(pwzFileName), util.toPointer(ppwzShortcutFile), dwReserved));
}

export function HlinkCreateShortcutFromString(
  grfHLSHORTCUTF: number /* u32 */,
  pwzTarget: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzDir: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwzShortcutFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkCreateShortcutFromString(grfHLSHORTCUTF, util.pwstrToFfi(pwzTarget), util.pwstrToFfi(pwzLocation), util.pwstrToFfi(pwzDir), util.pwstrToFfi(pwzFileName), util.toPointer(ppwzShortcutFile), dwReserved));
}

export function HlinkResolveShortcut(
  pwzShortcutFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pihlsite: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.IHlinkSite */,
  dwSiteData: number /* u32 */,
  piunkOuter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkResolveShortcut(util.pwstrToFfi(pwzShortcutFileName), util.toPointer(pihlsite), dwSiteData, util.toPointer(piunkOuter), util.toPointer(riid), util.toPointer(ppvObj)));
}

export function HlinkResolveShortcutToMoniker(
  pwzShortcutFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppimkTarget: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppwzLocation: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkResolveShortcutToMoniker(util.pwstrToFfi(pwzShortcutFileName), util.toPointer(ppimkTarget), util.toPointer(ppwzLocation)));
}

export function HlinkResolveShortcutToString(
  pwzShortcutFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwzTarget: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppwzLocation: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkResolveShortcutToString(util.pwstrToFfi(pwzShortcutFileName), util.toPointer(ppwzTarget), util.toPointer(ppwzLocation)));
}

export function HlinkIsShortcut(
  pwzFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkIsShortcut(util.pwstrToFfi(pwzFileName)));
}

export function HlinkGetValueFromParams(
  pwzParams: string | null /* Windows.Win32.Foundation.PWSTR */,
  pwzName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppwzValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkGetValueFromParams(util.pwstrToFfi(pwzParams), util.pwstrToFfi(pwzName), util.toPointer(ppwzValue)));
}

export function HlinkTranslateURL(
  pwzURL: string | null /* Windows.Win32.Foundation.PWSTR */,
  grfFlags: number /* u32 */,
  ppwzTranslatedURL: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libhlink_dll.HlinkTranslateURL(util.pwstrToFfi(pwzURL), grfFlags, util.toPointer(ppwzTranslatedURL)));
}

export function PathIsUNCEx(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszServer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathIsUNCEx(util.pwstrToFfi(pszPath), util.toPointer(ppszServer)));
}

export function PathCchIsRoot(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchIsRoot(util.pwstrToFfi(pszPath)));
}

export function PathCchAddBackslashEx(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  ppszEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchRemaining: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchAddBackslashEx(util.pwstrToFfi(pszPath), cchPath, util.toPointer(ppszEnd), util.toPointer(pcchRemaining)));
}

export function PathCchAddBackslash(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchAddBackslash(util.pwstrToFfi(pszPath), cchPath));
}

export function PathCchRemoveBackslashEx(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  ppszEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcchRemaining: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchRemoveBackslashEx(util.pwstrToFfi(pszPath), cchPath, util.toPointer(ppszEnd), util.toPointer(pcchRemaining)));
}

export function PathCchRemoveBackslash(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchRemoveBackslash(util.pwstrToFfi(pszPath), cchPath));
}

export function PathCchSkipRoot(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszRootEnd: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchSkipRoot(util.pwstrToFfi(pszPath), util.toPointer(ppszRootEnd)));
}

export function PathCchStripToRoot(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchStripToRoot(util.pwstrToFfi(pszPath), cchPath));
}

export function PathCchRemoveFileSpec(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchRemoveFileSpec(util.pwstrToFfi(pszPath), cchPath));
}

export function PathCchFindExtension(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  ppszExt: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchFindExtension(util.pwstrToFfi(pszPath), cchPath, util.toPointer(ppszExt)));
}

export function PathCchAddExtension(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  pszExt: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchAddExtension(util.pwstrToFfi(pszPath), cchPath, util.pwstrToFfi(pszExt)));
}

export function PathCchRenameExtension(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  pszExt: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchRenameExtension(util.pwstrToFfi(pszPath), cchPath, util.pwstrToFfi(pszExt)));
}

export function PathCchRemoveExtension(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchRemoveExtension(util.pwstrToFfi(pszPath), cchPath));
}

export function PathCchCanonicalizeEx(
  pszPathOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPathOut: Deno.PointerValue /* usize */,
  pszPathIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: PATHCCH_OPTIONS /* Windows.Win32.UI.Shell.PATHCCH_OPTIONS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchCanonicalizeEx(util.pwstrToFfi(pszPathOut), cchPathOut, util.pwstrToFfi(pszPathIn), dwFlags));
}

export function PathCchCanonicalize(
  pszPathOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPathOut: Deno.PointerValue /* usize */,
  pszPathIn: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchCanonicalize(util.pwstrToFfi(pszPathOut), cchPathOut, util.pwstrToFfi(pszPathIn)));
}

export function PathCchCombineEx(
  pszPathOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPathOut: Deno.PointerValue /* usize */,
  pszPathIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszMore: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: PATHCCH_OPTIONS /* Windows.Win32.UI.Shell.PATHCCH_OPTIONS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchCombineEx(util.pwstrToFfi(pszPathOut), cchPathOut, util.pwstrToFfi(pszPathIn), util.pwstrToFfi(pszMore), dwFlags));
}

export function PathCchCombine(
  pszPathOut: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPathOut: Deno.PointerValue /* usize */,
  pszPathIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszMore: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchCombine(util.pwstrToFfi(pszPathOut), cchPathOut, util.pwstrToFfi(pszPathIn), util.pwstrToFfi(pszMore)));
}

export function PathCchAppendEx(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  pszMore: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: PATHCCH_OPTIONS /* Windows.Win32.UI.Shell.PATHCCH_OPTIONS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchAppendEx(util.pwstrToFfi(pszPath), cchPath, util.pwstrToFfi(pszMore), dwFlags));
}

export function PathCchAppend(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
  pszMore: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchAppend(util.pwstrToFfi(pszPath), cchPath, util.pwstrToFfi(pszMore)));
}

export function PathCchStripPrefix(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchPath: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathCchStripPrefix(util.pwstrToFfi(pszPath), cchPath));
}

export function PathAllocCombine(
  pszPathIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszMore: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: PATHCCH_OPTIONS /* Windows.Win32.UI.Shell.PATHCCH_OPTIONS */,
  ppszPathOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathAllocCombine(util.pwstrToFfi(pszPathIn), util.pwstrToFfi(pszMore), dwFlags, util.toPointer(ppszPathOut)));
}

export function PathAllocCanonicalize(
  pszPathIn: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: PATHCCH_OPTIONS /* Windows.Win32.UI.Shell.PATHCCH_OPTIONS */,
  ppszPathOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_core_path_l1_1_0_dll.PathAllocCanonicalize(util.pwstrToFfi(pszPathIn), dwFlags, util.toPointer(ppszPathOut)));
}

export function RegisterAppStateChangeNotification(
  Routine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.PAPPSTATE_CHANGE_ROUTINE */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Registration: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_psm_appnotify_l1_1_0_dll.RegisterAppStateChangeNotification(util.toPointer(Routine), util.toPointer(Context), util.toPointer(Registration));
}

export function UnregisterAppStateChangeNotification(
  Registration: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_psm_appnotify_l1_1_0_dll.UnregisterAppStateChangeNotification(util.toPointer(Registration));
}

export function RegisterAppConstrainedChangeNotification(
  Routine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Shell.PAPPCONSTRAIN_CHANGE_ROUTINE */,
  Context: Deno.PointerValue | Uint8Array | null /* ptr */,
  Registration: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libapi_ms_win_core_psm_appnotify_l1_1_1_dll.RegisterAppConstrainedChangeNotification(util.toPointer(Routine), util.toPointer(Context), util.toPointer(Registration));
}

export function UnregisterAppConstrainedChangeNotification(
  Registration: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libapi_ms_win_core_psm_appnotify_l1_1_1_dll.UnregisterAppConstrainedChangeNotification(util.toPointer(Registration));
}

