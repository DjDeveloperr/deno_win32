/// Auto-generated by Deno Win32: Windows.Win32.UI.Input.Apis

import * as util from "../../util.ts";

// Enums
export type RAW_INPUT_DATA_COMMAND_FLAGS = number;
export type RAW_INPUT_DEVICE_INFO_COMMAND = number;
export type RID_DEVICE_INFO_TYPE = number;
export type RAWINPUTDEVICE_FLAGS = number;
export type SET_COMPOSITION_STRING_TYPE = number;
export type GET_GUIDE_LINE_TYPE = number;
export type NOTIFY_IME_INDEX = number;
export type NOTIFY_IME_ACTION = number;
export type GET_CONVERSION_LIST_FLAG = number;
export type IME_PAD_REQUEST_FLAGS = number;
export type IME_CONVERSION_MODE = number;
export type IME_SENTENCE_MODE = number;
export type IME_COMPOSITION_STRING = number;
export type IME_ESCAPE = number;
export type IME_HOTKEY_IDENTIFIER = number;
export type HOT_KEY_MODIFIERS = number;
export type ACTIVATE_KEYBOARD_LAYOUT_FLAGS = number;
export type GET_MOUSE_MOVE_POINTS_EX_RESOLUTION = number;
export type KEYBD_EVENT_FLAGS = number;
export type MOUSE_EVENT_FLAGS = number;
export type INPUT_TYPE = number;
export type TRACKMOUSEEVENT_FLAGS = number;
export type VIRTUAL_KEY = number;
export type POINTER_FLAGS = number;
export type TOUCH_FEEDBACK_MODE = number;
export type GESTURECONFIG_ID = number;
export type TOUCHEVENTF_FLAGS = number;
export type TOUCHINPUTMASKF_MASK = number;
export type REGISTER_TOUCH_WINDOW_FLAGS = number;
export type XINPUT_VIRTUAL_KEY = number;
export type BATTERY_TYPE = number;
export type BATTERY_LEVEL = number;
export type BATTERY_DEVTYPE = number;
export type XINPUT_DEVTYPE = number;
export type XINPUT_DEVSUBTYPE = number;
export type XINPUT_CAPABILITIES_FLAGS = number;
export type XINPUT_GAMEPAD_BUTTON_FLAGS = number;
export type XINPUT_KEYSTROKE_FLAGS = number;
export type XINPUT_FLAG = number;
export type IMEREG = number;
export type IMEFMT = number;
export type IMEUCT = number;
export type IMEREL = number;
export type FONT_CHARSET = number;
export type FONT_OUTPUT_PRECISION = number;
export type FONT_CLIP_PRECISION = number;
export type FONT_QUALITY = number;
export type INK_HIGH_CONTRAST_ADJUSTMENT = number;
export type MANIPULATION_PROCESSOR_MANIPULATIONS = number;
export type POINTER_BUTTON_CHANGE_TYPE = number;
export type POINTER_INPUT_TYPE = number;
export type INPUT_MESSAGE_DEVICE_TYPE = number;
export type INPUT_MESSAGE_ORIGIN_ID = number;

// Constants
export const RID_HEADER = 268435461;
export const RID_INPUT = 268435459;
export const RIDI_PREPARSEDDATA = 536870917;
export const RIDI_DEVICENAME = 536870919;
export const RIDI_DEVICEINFO = 536870923;
export const RIM_TYPEMOUSE = 0;
export const RIM_TYPEKEYBOARD = 1;
export const RIM_TYPEHID = 2;
export const RIDEV_REMOVE = 1;
export const RIDEV_EXCLUDE = 16;
export const RIDEV_PAGEONLY = 32;
export const RIDEV_NOLEGACY = 48;
export const RIDEV_INPUTSINK = 256;
export const RIDEV_CAPTUREMOUSE = 512;
export const RIDEV_NOHOTKEYS = 512;
export const RIDEV_APPKEYS = 1024;
export const RIDEV_EXINPUTSINK = 4096;
export const RIDEV_DEVNOTIFY = 8192;
export const SCS_SETSTR = 9;
export const SCS_CHANGEATTR = 18;
export const SCS_CHANGECLAUSE = 36;
export const SCS_SETRECONVERTSTRING = 65536;
export const SCS_QUERYRECONVERTSTRING = 131072;
export const GGL_LEVEL = 1;
export const GGL_INDEX = 2;
export const GGL_STRING = 3;
export const GGL_PRIVATE = 4;
export const CPS_CANCEL = 4;
export const CPS_COMPLETE = 1;
export const CPS_CONVERT = 2;
export const CPS_REVERT = 3;
export const NI_CHANGECANDIDATELIST = 19;
export const NI_CLOSECANDIDATE = 17;
export const NI_COMPOSITIONSTR = 21;
export const NI_IMEMENUSELECTED = 24;
export const NI_OPENCANDIDATE = 16;
export const NI_SELECTCANDIDATESTR = 18;
export const NI_SETCANDIDATE_PAGESIZE = 23;
export const NI_SETCANDIDATE_PAGESTART = 22;
export const GCL_CONVERSION = 1;
export const GCL_REVERSECONVERSION = 2;
export const GCL_REVERSE_LENGTH = 3;
export const IMEPADREQ_INSERTSTRING = 4097;
export const IMEPADREQ_SENDCONTROL = 4100;
export const IMEPADREQ_SETAPPLETSIZE = 4104;
export const IMEPADREQ_GETCOMPOSITIONSTRING = 4102;
export const IMEPADREQ_GETCOMPOSITIONSTRINGINFO = 4108;
export const IMEPADREQ_DELETESTRING = 4112;
export const IMEPADREQ_CHANGESTRING = 4113;
export const IMEPADREQ_GETAPPLHWND = 4116;
export const IMEPADREQ_FORCEIMEPADWINDOWSHOW = 4117;
export const IMEPADREQ_POSTMODALNOTIFY = 4118;
export const IMEPADREQ_GETDEFAULTUILANGID = 4119;
export const IMEPADREQ_GETAPPLETUISTYLE = 4121;
export const IMEPADREQ_SETAPPLETUISTYLE = 4122;
export const IMEPADREQ_ISAPPLETACTIVE = 4123;
export const IMEPADREQ_ISIMEPADWINDOWVISIBLE = 4124;
export const IMEPADREQ_SETAPPLETMINMAXSIZE = 4125;
export const IMEPADREQ_GETCONVERSIONSTATUS = 4126;
export const IMEPADREQ_GETVERSION = 4127;
export const IMEPADREQ_GETCURRENTIMEINFO = 4128;
export const IME_CMODE_ALPHANUMERIC = 0;
export const IME_CMODE_NATIVE = 1;
export const IME_CMODE_CHINESE = 1;
export const IME_CMODE_HANGUL = 1;
export const IME_CMODE_JAPANESE = 1;
export const IME_CMODE_KATAKANA = 2;
export const IME_CMODE_LANGUAGE = 3;
export const IME_CMODE_FULLSHAPE = 8;
export const IME_CMODE_ROMAN = 16;
export const IME_CMODE_CHARCODE = 32;
export const IME_CMODE_HANJACONVERT = 64;
export const IME_CMODE_NATIVESYMBOL = 128;
export const IME_CMODE_HANGEUL = 1;
export const IME_CMODE_SOFTKBD = 128;
export const IME_CMODE_NOCONVERSION = 256;
export const IME_CMODE_EUDC = 512;
export const IME_CMODE_SYMBOL = 1024;
export const IME_CMODE_FIXED = 2048;
export const IME_CMODE_RESERVED = 4026531840;
export const IME_SMODE_NONE = 0;
export const IME_SMODE_PLAURALCLAUSE = 1;
export const IME_SMODE_SINGLECONVERT = 2;
export const IME_SMODE_AUTOMATIC = 4;
export const IME_SMODE_PHRASEPREDICT = 8;
export const IME_SMODE_CONVERSATION = 16;
export const IME_SMODE_RESERVED = 61440;
export const GCS_COMPREADSTR = 1;
export const GCS_COMPREADATTR = 2;
export const GCS_COMPREADCLAUSE = 4;
export const GCS_COMPSTR = 8;
export const GCS_COMPATTR = 16;
export const GCS_COMPCLAUSE = 32;
export const GCS_CURSORPOS = 128;
export const GCS_DELTASTART = 256;
export const GCS_RESULTREADSTR = 512;
export const GCS_RESULTREADCLAUSE = 1024;
export const GCS_RESULTSTR = 2048;
export const GCS_RESULTCLAUSE = 4096;
export const IME_ESC_QUERY_SUPPORT = 3;
export const IME_ESC_RESERVED_FIRST = 4;
export const IME_ESC_RESERVED_LAST = 2047;
export const IME_ESC_PRIVATE_FIRST = 2048;
export const IME_ESC_PRIVATE_LAST = 4095;
export const IME_ESC_SEQUENCE_TO_INTERNAL = 4097;
export const IME_ESC_GET_EUDC_DICTIONARY = 4099;
export const IME_ESC_SET_EUDC_DICTIONARY = 4100;
export const IME_ESC_MAX_KEY = 4101;
export const IME_ESC_IME_NAME = 4102;
export const IME_ESC_SYNC_HOTKEY = 4103;
export const IME_ESC_HANJA_MODE = 4104;
export const IME_ESC_AUTOMATA = 4105;
export const IME_ESC_PRIVATE_HOTKEY = 4106;
export const IME_ESC_GETHELPFILENAME = 4107;
export const IME_CHOTKEY_IME_NONIME_TOGGLE = 16;
export const IME_CHOTKEY_SHAPE_TOGGLE = 17;
export const IME_CHOTKEY_SYMBOL_TOGGLE = 18;
export const IME_JHOTKEY_CLOSE_OPEN = 48;
export const IME_KHOTKEY_SHAPE_TOGGLE = 80;
export const IME_KHOTKEY_HANJACONVERT = 81;
export const IME_KHOTKEY_ENGLISH = 82;
export const IME_THOTKEY_IME_NONIME_TOGGLE = 112;
export const IME_THOTKEY_SHAPE_TOGGLE = 113;
export const IME_THOTKEY_SYMBOL_TOGGLE = 114;
export const IME_ITHOTKEY_RESEND_RESULTSTR = 512;
export const IME_ITHOTKEY_PREVIOUS_COMPOSITION = 513;
export const IME_ITHOTKEY_UISTYLE_TOGGLE = 514;
export const IME_ITHOTKEY_RECONVERTSTRING = 515;
export const MOD_ALT = 1;
export const MOD_CONTROL = 2;
export const MOD_NOREPEAT = 16384;
export const MOD_SHIFT = 4;
export const MOD_WIN = 8;
export const KLF_REORDER = 8;
export const KLF_RESET = 1073741824;
export const KLF_SETFORPROCESS = 256;
export const KLF_SHIFTLOCK = 65536;
export const KLF_ACTIVATE = 1;
export const KLF_NOTELLSHELL = 128;
export const KLF_REPLACELANG = 16;
export const KLF_SUBSTITUTE_OK = 2;
export const GMMP_USE_DISPLAY_POINTS = 1;
export const GMMP_USE_HIGH_RESOLUTION_POINTS = 2;
export const KEYEVENTF_EXTENDEDKEY = 1;
export const KEYEVENTF_KEYUP = 2;
export const KEYEVENTF_SCANCODE = 8;
export const KEYEVENTF_UNICODE = 4;
export const MOUSEEVENTF_ABSOLUTE = 32768;
export const MOUSEEVENTF_LEFTDOWN = 2;
export const MOUSEEVENTF_LEFTUP = 4;
export const MOUSEEVENTF_MIDDLEDOWN = 32;
export const MOUSEEVENTF_MIDDLEUP = 64;
export const MOUSEEVENTF_MOVE = 1;
export const MOUSEEVENTF_RIGHTDOWN = 8;
export const MOUSEEVENTF_RIGHTUP = 16;
export const MOUSEEVENTF_WHEEL = 2048;
export const MOUSEEVENTF_XDOWN = 128;
export const MOUSEEVENTF_XUP = 256;
export const MOUSEEVENTF_HWHEEL = 4096;
export const MOUSEEVENTF_MOVE_NOCOALESCE = 8192;
export const MOUSEEVENTF_VIRTUALDESK = 16384;
export const INPUT_MOUSE = 0;
export const INPUT_KEYBOARD = 1;
export const INPUT_HARDWARE = 2;
export const TME_CANCEL = 2147483648;
export const TME_HOVER = 1;
export const TME_LEAVE = 2;
export const TME_NONCLIENT = 16;
export const TME_QUERY = 1073741824;
export const VK_0 = 48;
export const VK_1 = 49;
export const VK_2 = 50;
export const VK_3 = 51;
export const VK_4 = 52;
export const VK_5 = 53;
export const VK_6 = 54;
export const VK_7 = 55;
export const VK_8 = 56;
export const VK_9 = 57;
export const VK_A = 65;
export const VK_B = 66;
export const VK_C = 67;
export const VK_D = 68;
export const VK_E = 69;
export const VK_F = 70;
export const VK_G = 71;
export const VK_H = 72;
export const VK_I = 73;
export const VK_J = 74;
export const VK_K = 75;
export const VK_L = 76;
export const VK_M = 77;
export const VK_N = 78;
export const VK_O = 79;
export const VK_P = 80;
export const VK_Q = 81;
export const VK_R = 82;
export const VK_S = 83;
export const VK_T = 84;
export const VK_U = 85;
export const VK_V = 86;
export const VK_W = 87;
export const VK_X = 88;
export const VK_Y = 89;
export const VK_Z = 90;
export const VK_LBUTTON = 1;
export const VK_RBUTTON = 2;
export const VK_CANCEL = 3;
export const VK_MBUTTON = 4;
export const VK_XBUTTON1 = 5;
export const VK_XBUTTON2 = 6;
export const VK_BACK = 8;
export const VK_TAB = 9;
export const VK_CLEAR = 12;
export const VK_RETURN = 13;
export const VK_SHIFT = 16;
export const VK_CONTROL = 17;
export const VK_MENU = 18;
export const VK_PAUSE = 19;
export const VK_CAPITAL = 20;
export const VK_KANA = 21;
export const VK_HANGEUL = 21;
export const VK_HANGUL = 21;
export const VK_IME_ON = 22;
export const VK_JUNJA = 23;
export const VK_FINAL = 24;
export const VK_HANJA = 25;
export const VK_KANJI = 25;
export const VK_IME_OFF = 26;
export const VK_ESCAPE = 27;
export const VK_CONVERT = 28;
export const VK_NONCONVERT = 29;
export const VK_ACCEPT = 30;
export const VK_MODECHANGE = 31;
export const VK_SPACE = 32;
export const VK_PRIOR = 33;
export const VK_NEXT = 34;
export const VK_END = 35;
export const VK_HOME = 36;
export const VK_LEFT = 37;
export const VK_UP = 38;
export const VK_RIGHT = 39;
export const VK_DOWN = 40;
export const VK_SELECT = 41;
export const VK_PRINT = 42;
export const VK_EXECUTE = 43;
export const VK_SNAPSHOT = 44;
export const VK_INSERT = 45;
export const VK_DELETE = 46;
export const VK_HELP = 47;
export const VK_LWIN = 91;
export const VK_RWIN = 92;
export const VK_APPS = 93;
export const VK_SLEEP = 95;
export const VK_NUMPAD0 = 96;
export const VK_NUMPAD1 = 97;
export const VK_NUMPAD2 = 98;
export const VK_NUMPAD3 = 99;
export const VK_NUMPAD4 = 100;
export const VK_NUMPAD5 = 101;
export const VK_NUMPAD6 = 102;
export const VK_NUMPAD7 = 103;
export const VK_NUMPAD8 = 104;
export const VK_NUMPAD9 = 105;
export const VK_MULTIPLY = 106;
export const VK_ADD = 107;
export const VK_SEPARATOR = 108;
export const VK_SUBTRACT = 109;
export const VK_DECIMAL = 110;
export const VK_DIVIDE = 111;
export const VK_F1 = 112;
export const VK_F2 = 113;
export const VK_F3 = 114;
export const VK_F4 = 115;
export const VK_F5 = 116;
export const VK_F6 = 117;
export const VK_F7 = 118;
export const VK_F8 = 119;
export const VK_F9 = 120;
export const VK_F10 = 121;
export const VK_F11 = 122;
export const VK_F12 = 123;
export const VK_F13 = 124;
export const VK_F14 = 125;
export const VK_F15 = 126;
export const VK_F16 = 127;
export const VK_F17 = 128;
export const VK_F18 = 129;
export const VK_F19 = 130;
export const VK_F20 = 131;
export const VK_F21 = 132;
export const VK_F22 = 133;
export const VK_F23 = 134;
export const VK_F24 = 135;
export const VK_NAVIGATION_VIEW = 136;
export const VK_NAVIGATION_MENU = 137;
export const VK_NAVIGATION_UP = 138;
export const VK_NAVIGATION_DOWN = 139;
export const VK_NAVIGATION_LEFT = 140;
export const VK_NAVIGATION_RIGHT = 141;
export const VK_NAVIGATION_ACCEPT = 142;
export const VK_NAVIGATION_CANCEL = 143;
export const VK_NUMLOCK = 144;
export const VK_SCROLL = 145;
export const VK_OEM_NEC_EQUAL = 146;
export const VK_OEM_FJ_JISHO = 146;
export const VK_OEM_FJ_MASSHOU = 147;
export const VK_OEM_FJ_TOUROKU = 148;
export const VK_OEM_FJ_LOYA = 149;
export const VK_OEM_FJ_ROYA = 150;
export const VK_LSHIFT = 160;
export const VK_RSHIFT = 161;
export const VK_LCONTROL = 162;
export const VK_RCONTROL = 163;
export const VK_LMENU = 164;
export const VK_RMENU = 165;
export const VK_BROWSER_BACK = 166;
export const VK_BROWSER_FORWARD = 167;
export const VK_BROWSER_REFRESH = 168;
export const VK_BROWSER_STOP = 169;
export const VK_BROWSER_SEARCH = 170;
export const VK_BROWSER_FAVORITES = 171;
export const VK_BROWSER_HOME = 172;
export const VK_VOLUME_MUTE = 173;
export const VK_VOLUME_DOWN = 174;
export const VK_VOLUME_UP = 175;
export const VK_MEDIA_NEXT_TRACK = 176;
export const VK_MEDIA_PREV_TRACK = 177;
export const VK_MEDIA_STOP = 178;
export const VK_MEDIA_PLAY_PAUSE = 179;
export const VK_LAUNCH_MAIL = 180;
export const VK_LAUNCH_MEDIA_SELECT = 181;
export const VK_LAUNCH_APP1 = 182;
export const VK_LAUNCH_APP2 = 183;
export const VK_OEM_1 = 186;
export const VK_OEM_PLUS = 187;
export const VK_OEM_COMMA = 188;
export const VK_OEM_MINUS = 189;
export const VK_OEM_PERIOD = 190;
export const VK_OEM_2 = 191;
export const VK_OEM_3 = 192;
export const VK_GAMEPAD_A = 195;
export const VK_GAMEPAD_B = 196;
export const VK_GAMEPAD_X = 197;
export const VK_GAMEPAD_Y = 198;
export const VK_GAMEPAD_RIGHT_SHOULDER = 199;
export const VK_GAMEPAD_LEFT_SHOULDER = 200;
export const VK_GAMEPAD_LEFT_TRIGGER = 201;
export const VK_GAMEPAD_RIGHT_TRIGGER = 202;
export const VK_GAMEPAD_DPAD_UP = 203;
export const VK_GAMEPAD_DPAD_DOWN = 204;
export const VK_GAMEPAD_DPAD_LEFT = 205;
export const VK_GAMEPAD_DPAD_RIGHT = 206;
export const VK_GAMEPAD_MENU = 207;
export const VK_GAMEPAD_VIEW = 208;
export const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210;
export const VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211;
export const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212;
export const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213;
export const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218;
export const VK_OEM_4 = 219;
export const VK_OEM_5 = 220;
export const VK_OEM_6 = 221;
export const VK_OEM_7 = 222;
export const VK_OEM_8 = 223;
export const VK_OEM_AX = 225;
export const VK_OEM_102 = 226;
export const VK_ICO_HELP = 227;
export const VK_ICO_00 = 228;
export const VK_PROCESSKEY = 229;
export const VK_ICO_CLEAR = 230;
export const VK_PACKET = 231;
export const VK_OEM_RESET = 233;
export const VK_OEM_JUMP = 234;
export const VK_OEM_PA1 = 235;
export const VK_OEM_PA2 = 236;
export const VK_OEM_PA3 = 237;
export const VK_OEM_WSCTRL = 238;
export const VK_OEM_CUSEL = 239;
export const VK_OEM_ATTN = 240;
export const VK_OEM_FINISH = 241;
export const VK_OEM_COPY = 242;
export const VK_OEM_AUTO = 243;
export const VK_OEM_ENLW = 244;
export const VK_OEM_BACKTAB = 245;
export const VK_ATTN = 246;
export const VK_CRSEL = 247;
export const VK_EXSEL = 248;
export const VK_EREOF = 249;
export const VK_PLAY = 250;
export const VK_ZOOM = 251;
export const VK_NONAME = 252;
export const VK_PA1 = 253;
export const VK_OEM_CLEAR = 254;
export const POINTER_FLAG_NONE = 0;
export const POINTER_FLAG_NEW = 1;
export const POINTER_FLAG_INRANGE = 2;
export const POINTER_FLAG_INCONTACT = 4;
export const POINTER_FLAG_FIRSTBUTTON = 16;
export const POINTER_FLAG_SECONDBUTTON = 32;
export const POINTER_FLAG_THIRDBUTTON = 64;
export const POINTER_FLAG_FOURTHBUTTON = 128;
export const POINTER_FLAG_FIFTHBUTTON = 256;
export const POINTER_FLAG_PRIMARY = 8192;
export const POINTER_FLAG_CONFIDENCE = 16384;
export const POINTER_FLAG_CANCELED = 32768;
export const POINTER_FLAG_DOWN = 65536;
export const POINTER_FLAG_UPDATE = 131072;
export const POINTER_FLAG_UP = 262144;
export const POINTER_FLAG_WHEEL = 524288;
export const POINTER_FLAG_HWHEEL = 1048576;
export const POINTER_FLAG_CAPTURECHANGED = 2097152;
export const POINTER_FLAG_HASTRANSFORM = 4194304;
export const TOUCH_FEEDBACK_DEFAULT = 1;
export const TOUCH_FEEDBACK_INDIRECT = 2;
export const TOUCH_FEEDBACK_NONE = 3;
export const GID_BEGIN = 1;
export const GID_END = 2;
export const GID_ZOOM = 3;
export const GID_PAN = 4;
export const GID_ROTATE = 5;
export const GID_TWOFINGERTAP = 6;
export const GID_PRESSANDTAP = 7;
export const GID_ROLLOVER = 7;
export const TOUCHEVENTF_MOVE = 1;
export const TOUCHEVENTF_DOWN = 2;
export const TOUCHEVENTF_UP = 4;
export const TOUCHEVENTF_INRANGE = 8;
export const TOUCHEVENTF_PRIMARY = 16;
export const TOUCHEVENTF_NOCOALESCE = 32;
export const TOUCHEVENTF_PEN = 64;
export const TOUCHEVENTF_PALM = 128;
export const TOUCHINPUTMASKF_TIMEFROMSYSTEM = 1;
export const TOUCHINPUTMASKF_EXTRAINFO = 2;
export const TOUCHINPUTMASKF_CONTACTAREA = 4;
export const TWF_FINETOUCH = 1;
export const TWF_WANTPALM = 2;
export const VK_PAD_A = 22528;
export const VK_PAD_B = 22529;
export const VK_PAD_X = 22530;
export const VK_PAD_Y = 22531;
export const VK_PAD_RSHOULDER = 22532;
export const VK_PAD_LSHOULDER = 22533;
export const VK_PAD_LTRIGGER = 22534;
export const VK_PAD_RTRIGGER = 22535;
export const VK_PAD_DPAD_UP = 22544;
export const VK_PAD_DPAD_DOWN = 22545;
export const VK_PAD_DPAD_LEFT = 22546;
export const VK_PAD_DPAD_RIGHT = 22547;
export const VK_PAD_START = 22548;
export const VK_PAD_BACK = 22549;
export const VK_PAD_LTHUMB_PRESS = 22550;
export const VK_PAD_RTHUMB_PRESS = 22551;
export const VK_PAD_LTHUMB_UP = 22560;
export const VK_PAD_LTHUMB_DOWN = 22561;
export const VK_PAD_LTHUMB_RIGHT = 22562;
export const VK_PAD_LTHUMB_LEFT = 22563;
export const VK_PAD_LTHUMB_UPLEFT = 22564;
export const VK_PAD_LTHUMB_UPRIGHT = 22565;
export const VK_PAD_LTHUMB_DOWNRIGHT = 22566;
export const VK_PAD_LTHUMB_DOWNLEFT = 22567;
export const VK_PAD_RTHUMB_UP = 22576;
export const VK_PAD_RTHUMB_DOWN = 22577;
export const VK_PAD_RTHUMB_RIGHT = 22578;
export const VK_PAD_RTHUMB_LEFT = 22579;
export const VK_PAD_RTHUMB_UPLEFT = 22580;
export const VK_PAD_RTHUMB_UPRIGHT = 22581;
export const VK_PAD_RTHUMB_DOWNRIGHT = 22582;
export const VK_PAD_RTHUMB_DOWNLEFT = 22583;
export const BATTERY_TYPE_DISCONNECTED = 0;
export const BATTERY_TYPE_WIRED = 1;
export const BATTERY_TYPE_ALKALINE = 2;
export const BATTERY_TYPE_NIMH = 3;
export const BATTERY_TYPE_UNKNOWN = 255;
export const BATTERY_LEVEL_EMPTY = 0;
export const BATTERY_LEVEL_LOW = 1;
export const BATTERY_LEVEL_MEDIUM = 2;
export const BATTERY_LEVEL_FULL = 3;
export const BATTERY_DEVTYPE_GAMEPAD = 0;
export const BATTERY_DEVTYPE_HEADSET = 1;
export const XINPUT_DEVTYPE_GAMEPAD = 1;
export const XINPUT_DEVSUBTYPE_GAMEPAD = 1;
export const XINPUT_DEVSUBTYPE_UNKNOWN = 0;
export const XINPUT_DEVSUBTYPE_WHEEL = 2;
export const XINPUT_DEVSUBTYPE_ARCADE_STICK = 3;
export const XINPUT_DEVSUBTYPE_FLIGHT_STICK = 4;
export const XINPUT_DEVSUBTYPE_DANCE_PAD = 5;
export const XINPUT_DEVSUBTYPE_GUITAR = 6;
export const XINPUT_DEVSUBTYPE_GUITAR_ALTERNATE = 7;
export const XINPUT_DEVSUBTYPE_DRUM_KIT = 8;
export const XINPUT_DEVSUBTYPE_GUITAR_BASS = 11;
export const XINPUT_DEVSUBTYPE_ARCADE_PAD = 19;
export const XINPUT_CAPS_VOICE_SUPPORTED = 4;
export const XINPUT_CAPS_FFB_SUPPORTED = 1;
export const XINPUT_CAPS_WIRELESS = 2;
export const XINPUT_CAPS_PMD_SUPPORTED = 8;
export const XINPUT_CAPS_NO_NAVIGATION = 16;
export const XINPUT_GAMEPAD_DPAD_UP = 1;
export const XINPUT_GAMEPAD_DPAD_DOWN = 2;
export const XINPUT_GAMEPAD_DPAD_LEFT = 4;
export const XINPUT_GAMEPAD_DPAD_RIGHT = 8;
export const XINPUT_GAMEPAD_START = 16;
export const XINPUT_GAMEPAD_BACK = 32;
export const XINPUT_GAMEPAD_LEFT_THUMB = 64;
export const XINPUT_GAMEPAD_RIGHT_THUMB = 128;
export const XINPUT_GAMEPAD_LEFT_SHOULDER = 256;
export const XINPUT_GAMEPAD_RIGHT_SHOULDER = 512;
export const XINPUT_GAMEPAD_A = 4096;
export const XINPUT_GAMEPAD_B = 8192;
export const XINPUT_GAMEPAD_X = 16384;
export const XINPUT_GAMEPAD_Y = 32768;
export const XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE = 7849;
export const XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE = 8689;
export const XINPUT_GAMEPAD_TRIGGER_THRESHOLD = 30;
export const XINPUT_KEYSTROKE_KEYDOWN = 1;
export const XINPUT_KEYSTROKE_KEYUP = 2;
export const XINPUT_KEYSTROKE_REPEAT = 4;
export const XINPUT_FLAG_ALL = 0;
export const XINPUT_FLAG_GAMEPAD = 1;
export const FEID_NONE = 0;
export const FEID_CHINESE_TRADITIONAL = 1;
export const FEID_CHINESE_SIMPLIFIED = 2;
export const FEID_CHINESE_HONGKONG = 3;
export const FEID_CHINESE_SINGAPORE = 4;
export const FEID_JAPANESE = 5;
export const FEID_KOREAN = 6;
export const FEID_KOREAN_JOHAB = 7;
export const INFOMASK_NONE = 0;
export const INFOMASK_QUERY_CAND = 1;
export const INFOMASK_APPLY_CAND = 2;
export const INFOMASK_APPLY_CAND_EX = 4;
export const INFOMASK_STRING_FIX = 65536;
export const INFOMASK_HIDE_CAND = 131072;
export const INFOMASK_BLOCK_CAND = 262144;
export const IMEFAREASTINFO_TYPE_DEFAULT = 0;
export const IMEFAREASTINFO_TYPE_READING = 1;
export const IMEFAREASTINFO_TYPE_COMMENT = 2;
export const IMEFAREASTINFO_TYPE_COSTTIME = 3;
export const CHARINFO_APPLETID_MASK = 4278190080;
export const CHARINFO_FEID_MASK = 15728640;
export const CHARINFO_CHARID_MASK = 65535;
export const MAX_APPLETTITLE = 64;
export const MAX_FONTFACE = 32;
export const IPACFG_NONE = 0;
export const IPACFG_PROPERTY = 1;
export const IPACFG_HELP = 2;
export const IPACFG_TITLE = 65536;
export const IPACFG_TITLEFONTFACE = 131072;
export const IPACFG_CATEGORY = 262144;
export const IPACFG_LANG = 16;
export const IPACID_NONE = 0;
export const IPACID_SOFTKEY = 1;
export const IPACID_HANDWRITING = 2;
export const IPACID_STROKESEARCH = 3;
export const IPACID_RADICALSEARCH = 4;
export const IPACID_SYMBOLSEARCH = 5;
export const IPACID_VOICE = 6;
export const IPACID_EPWING = 7;
export const IPACID_OCR = 8;
export const IPACID_CHARLIST = 9;
export const IPACID_USER = 256;
export const IMEPADREQ_FIRST = 4096;
export const IMEPADREQ_INSERTSTRINGCANDIDATE = 4098;
export const IMEPADREQ_INSERTITEMCANDIDATE = 4099;
export const IMEPADREQ_SENDKEYCONTROL = 4101;
export const IMEPADREQ_GETSELECTEDSTRING = 4103;
export const IMEPADREQ_SETAPPLETDATA = 4105;
export const IMEPADREQ_GETAPPLETDATA = 4106;
export const IMEPADREQ_SETTITLEFONT = 4107;
export const IMEPADREQ_GETCOMPOSITIONSTRINGID = 4109;
export const IMEPADREQ_INSERTSTRINGCANDIDATEINFO = 4110;
export const IMEPADREQ_CHANGESTRINGCANDIDATEINFO = 4111;
export const IMEPADREQ_INSERTSTRINGINFO = 4114;
export const IMEPADREQ_CHANGESTRINGINFO = 4115;
export const IMEPADREQ_GETCURRENTUILANGID = 4120;
export const IMEPADCTRL_CONVERTALL = 1;
export const IMEPADCTRL_DETERMINALL = 2;
export const IMEPADCTRL_DETERMINCHAR = 3;
export const IMEPADCTRL_CLEARALL = 4;
export const IMEPADCTRL_CARETSET = 5;
export const IMEPADCTRL_CARETLEFT = 6;
export const IMEPADCTRL_CARETRIGHT = 7;
export const IMEPADCTRL_CARETTOP = 8;
export const IMEPADCTRL_CARETBOTTOM = 9;
export const IMEPADCTRL_CARETBACKSPACE = 10;
export const IMEPADCTRL_CARETDELETE = 11;
export const IMEPADCTRL_PHRASEDELETE = 12;
export const IMEPADCTRL_INSERTSPACE = 13;
export const IMEPADCTRL_INSERTFULLSPACE = 14;
export const IMEPADCTRL_INSERTHALFSPACE = 15;
export const IMEPADCTRL_ONIME = 16;
export const IMEPADCTRL_OFFIME = 17;
export const IMEPADCTRL_ONPRECONVERSION = 18;
export const IMEPADCTRL_OFFPRECONVERSION = 19;
export const IMEPADCTRL_PHONETICCANDIDATE = 20;
export const IMEKEYCTRLMASK_ALT = 1;
export const IMEKEYCTRLMASK_CTRL = 2;
export const IMEKEYCTRLMASK_SHIFT = 4;
export const IMEKEYCTRL_UP = 1;
export const IMEKEYCTRL_DOWN = 0;
export const IMEPN_FIRST = 256;
export const IMEPN_ACTIVATE = 257;
export const IMEPN_INACTIVATE = 258;
export const IMEPN_SHOW = 260;
export const IMEPN_HIDE = 261;
export const IMEPN_SIZECHANGING = 262;
export const IMEPN_SIZECHANGED = 263;
export const IMEPN_CONFIG = 264;
export const IMEPN_HELP = 265;
export const IMEPN_QUERYCAND = 266;
export const IMEPN_APPLYCAND = 267;
export const IMEPN_APPLYCANDEX = 268;
export const IMEPN_SETTINGCHANGED = 269;
export const IMEPN_USER = 356;
export const IPAWS_ENABLED = 1;
export const IPAWS_SIZINGNOTIFY = 4;
export const IPAWS_VERTICALFIXED = 256;
export const IPAWS_HORIZONTALFIXED = 512;
export const IPAWS_SIZEFIXED = 768;
export const IPAWS_MAXWIDTHFIXED = 4096;
export const IPAWS_MAXHEIGHTFIXED = 8192;
export const IPAWS_MAXSIZEFIXED = 12288;
export const IPAWS_MINWIDTHFIXED = 65536;
export const IPAWS_MINHEIGHTFIXED = 131072;
export const IPAWS_MINSIZEFIXED = 196608;
export const STYLE_DESCRIPTION_SIZE = 32;
export const IMEMENUITEM_STRING_SIZE = 80;
export const IMC_GETCANDIDATEPOS = 7;
export const IMC_SETCANDIDATEPOS = 8;
export const IMC_GETCOMPOSITIONFONT = 9;
export const IMC_SETCOMPOSITIONFONT = 10;
export const IMC_GETCOMPOSITIONWINDOW = 11;
export const IMC_SETCOMPOSITIONWINDOW = 12;
export const IMC_GETSTATUSWINDOWPOS = 15;
export const IMC_SETSTATUSWINDOWPOS = 16;
export const IMC_CLOSESTATUSWINDOW = 33;
export const IMC_OPENSTATUSWINDOW = 34;
export const NI_FINALIZECONVERSIONRESULT = 20;
export const ISC_SHOWUICANDIDATEWINDOW = 1;
export const ISC_SHOWUICOMPOSITIONWINDOW = 2147483648;
export const ISC_SHOWUIGUIDELINE = 1073741824;
export const ISC_SHOWUIALLCANDIDATEWINDOW = 15;
export const ISC_SHOWUIALL = 3221225487;
export const MOD_LEFT = 32768;
export const MOD_RIGHT = 16384;
export const MOD_ON_KEYUP = 2048;
export const MOD_IGNORE_ALL_MODIFIER = 1024;
export const IME_HOTKEY_DSWITCH_FIRST = 256;
export const IME_HOTKEY_DSWITCH_LAST = 287;
export const IME_HOTKEY_PRIVATE_FIRST = 512;
export const IME_HOTKEY_PRIVATE_LAST = 543;
export const CS_INSERTCHAR = 8192;
export const CS_NOMOVECARET = 16384;
export const IMEVER_0310 = 196618;
export const IMEVER_0400 = 262144;
export const IME_PROP_AT_CARET = 65536;
export const IME_PROP_SPECIAL_UI = 131072;
export const IME_PROP_CANDLIST_START_FROM_1 = 262144;
export const IME_PROP_UNICODE = 524288;
export const IME_PROP_COMPLETE_ON_UNSELECT = 1048576;
export const UI_CAP_2700 = 1;
export const UI_CAP_ROT90 = 2;
export const UI_CAP_ROTANY = 4;
export const SCS_CAP_COMPSTR = 1;
export const SCS_CAP_MAKEREAD = 2;
export const SCS_CAP_SETRECONVERTSTRING = 4;
export const SELECT_CAP_CONVERSION = 1;
export const SELECT_CAP_SENTENCE = 2;
export const GL_LEVEL_NOGUIDELINE = 0;
export const GL_LEVEL_FATAL = 1;
export const GL_LEVEL_ERROR = 2;
export const GL_LEVEL_WARNING = 3;
export const GL_LEVEL_INFORMATION = 4;
export const GL_ID_UNKNOWN = 0;
export const GL_ID_NOMODULE = 1;
export const GL_ID_NODICTIONARY = 16;
export const GL_ID_CANNOTSAVE = 17;
export const GL_ID_NOCONVERT = 32;
export const GL_ID_TYPINGERROR = 33;
export const GL_ID_TOOMANYSTROKE = 34;
export const GL_ID_READINGCONFLICT = 35;
export const GL_ID_INPUTREADING = 36;
export const GL_ID_INPUTRADICAL = 37;
export const GL_ID_INPUTCODE = 38;
export const GL_ID_INPUTSYMBOL = 39;
export const GL_ID_CHOOSECANDIDATE = 40;
export const GL_ID_REVERSECONVERSION = 41;
export const GL_ID_PRIVATE_FIRST = 32768;
export const GL_ID_PRIVATE_LAST = 65535;
export const ATTR_INPUT = 0;
export const ATTR_TARGET_CONVERTED = 1;
export const ATTR_CONVERTED = 2;
export const ATTR_TARGET_NOTCONVERTED = 3;
export const ATTR_INPUT_ERROR = 4;
export const ATTR_FIXEDCONVERTED = 5;
export const CFS_DEFAULT = 0;
export const CFS_RECT = 1;
export const CFS_POINT = 2;
export const CFS_FORCE_POSITION = 32;
export const CFS_CANDIDATEPOS = 64;
export const CFS_EXCLUDE = 128;
export const IME_CAND_UNKNOWN = 0;
export const IME_CAND_READ = 1;
export const IME_CAND_CODE = 2;
export const IME_CAND_MEANING = 3;
export const IME_CAND_RADICAL = 4;
export const IME_CAND_STROKE = 5;
export const IMN_CLOSESTATUSWINDOW = 1;
export const IMN_OPENSTATUSWINDOW = 2;
export const IMN_CHANGECANDIDATE = 3;
export const IMN_CLOSECANDIDATE = 4;
export const IMN_OPENCANDIDATE = 5;
export const IMN_SETCONVERSIONMODE = 6;
export const IMN_SETSENTENCEMODE = 7;
export const IMN_SETOPENSTATUS = 8;
export const IMN_SETCANDIDATEPOS = 9;
export const IMN_SETCOMPOSITIONFONT = 10;
export const IMN_SETCOMPOSITIONWINDOW = 11;
export const IMN_SETSTATUSWINDOWPOS = 12;
export const IMN_GUIDELINE = 13;
export const IMN_PRIVATE = 14;
export const IMR_COMPOSITIONWINDOW = 1;
export const IMR_CANDIDATEWINDOW = 2;
export const IMR_COMPOSITIONFONT = 3;
export const IMR_RECONVERTSTRING = 4;
export const IMR_CONFIRMRECONVERTSTRING = 5;
export const IMR_QUERYCHARPOSITION = 6;
export const IMR_DOCUMENTFEED = 7;
export const IMM_ERROR_NODATA = `-1`;
export const IMM_ERROR_GENERAL = `-2`;
export const IME_CONFIG_GENERAL = 1;
export const IME_CONFIG_REGISTERWORD = 2;
export const IME_CONFIG_SELECTDICTIONARY = 3;
export const IME_REGWORD_STYLE_EUDC = 1;
export const IME_REGWORD_STYLE_USER_FIRST = 2147483648;
export const IME_REGWORD_STYLE_USER_LAST = 4294967295;
export const IACE_CHILDREN = 1;
export const IACE_DEFAULT = 16;
export const IACE_IGNORENOCONTEXT = 32;
export const IGIMIF_RIGHTMENU = 1;
export const IGIMII_CMODE = 1;
export const IGIMII_SMODE = 2;
export const IGIMII_CONFIGURE = 4;
export const IGIMII_TOOLS = 8;
export const IGIMII_HELP = 16;
export const IGIMII_OTHER = 32;
export const IGIMII_INPUTTOOLS = 64;
export const IMFT_RADIOCHECK = 1;
export const IMFT_SEPARATOR = 2;
export const IMFT_SUBMENU = 4;
export const SOFTKEYBOARD_TYPE_T1 = 1;
export const SOFTKEYBOARD_TYPE_C1 = 2;
export const IMMGWL_IMC = 0;
export const IMMGWLP_IMC = 0;
export const IMC_SETCONVERSIONMODE = 2;
export const IMC_SETSENTENCEMODE = 4;
export const IMC_SETOPENSTATUS = 6;
export const IMC_GETSOFTKBDFONT = 17;
export const IMC_SETSOFTKBDFONT = 18;
export const IMC_GETSOFTKBDPOS = 19;
export const IMC_SETSOFTKBDPOS = 20;
export const IMC_GETSOFTKBDSUBTYPE = 21;
export const IMC_SETSOFTKBDSUBTYPE = 22;
export const IMC_SETSOFTKBDDATA = 24;
export const NI_CONTEXTUPDATED = 3;
export const IME_SYSINFO_WINLOGON = 1;
export const IME_SYSINFO_WOW16 = 2;
export const INIT_STATUSWNDPOS = 1;
export const INIT_CONVERSION = 2;
export const INIT_SENTENCE = 4;
export const INIT_LOGFONT = 8;
export const INIT_COMPFORM = 16;
export const INIT_SOFTKBDPOS = 32;
export const IME_PROP_END_UNLOAD = 1;
export const IME_PROP_KBD_CHAR_FIRST = 2;
export const IME_PROP_IGNORE_UPKEYS = 4;
export const IME_PROP_NEED_ALTKEY = 8;
export const IME_PROP_NO_KEYS_ON_CLOSE = 16;
export const IME_PROP_ACCEPT_WIDE_VKEY = 32;
export const UI_CAP_SOFTKBD = 65536;
export const IMN_SOFTKBDDESTROYED = 17;
export const IME_UI_CLASS_NAME_SIZE = 16;
export const IME_ESC_STRING_BUFFER_SIZE = 80;
export const szImeJapan = `MSIME.Japan`;
export const szImeKorea = `MSIME.Korea`;
export const szImeChina = `MSIME.China`;
export const szImeTaiwan = `MSIME.Taiwan`;
export const IFEC_S_ALREADY_DEFAULT = 320318540676887552n;
export const FELANG_REQ_CONV = 65536;
export const FELANG_REQ_RECONV = 131072;
export const FELANG_REQ_REV = 196608;
export const FELANG_CMODE_MONORUBY = 2;
export const FELANG_CMODE_NOPRUNING = 4;
export const FELANG_CMODE_KATAKANAOUT = 8;
export const FELANG_CMODE_HIRAGANAOUT = 0;
export const FELANG_CMODE_HALFWIDTHOUT = 16;
export const FELANG_CMODE_FULLWIDTHOUT = 32;
export const FELANG_CMODE_BOPOMOFO = 64;
export const FELANG_CMODE_HANGUL = 128;
export const FELANG_CMODE_PINYIN = 256;
export const FELANG_CMODE_PRECONV = 512;
export const FELANG_CMODE_RADICAL = 1024;
export const FELANG_CMODE_UNKNOWNREADING = 2048;
export const FELANG_CMODE_MERGECAND = 4096;
export const FELANG_CMODE_ROMAN = 8192;
export const FELANG_CMODE_BESTFIRST = 16384;
export const FELANG_CMODE_USENOREVWORDS = 32768;
export const FELANG_CMODE_NONE = 16777216;
export const FELANG_CMODE_PLAURALCLAUSE = 33554432;
export const FELANG_CMODE_SINGLECONVERT = 67108864;
export const FELANG_CMODE_AUTOMATIC = 134217728;
export const FELANG_CMODE_PHRASEPREDICT = 268435456;
export const FELANG_CMODE_CONVERSATION = 536870912;
export const FELANG_CMODE_NAME = 268435456;
export const FELANG_CMODE_NOINVISIBLECHAR = 1073741824;
export const E_NOCAND = 48;
export const E_NOTENOUGH_BUFFER = 49;
export const E_NOTENOUGH_WDD = 50;
export const E_LARGEINPUT = 51;
export const FELANG_CLMN_WBREAK = 1;
export const FELANG_CLMN_NOWBREAK = 2;
export const FELANG_CLMN_PBREAK = 4;
export const FELANG_CLMN_NOPBREAK = 8;
export const FELANG_CLMN_FIXR = 16;
export const FELANG_CLMN_FIXD = 32;
export const FELANG_INVALD_PO = 65535;
export const IFED_POS_NONE = 0;
export const IFED_POS_NOUN = 1;
export const IFED_POS_VERB = 2;
export const IFED_POS_ADJECTIVE = 4;
export const IFED_POS_ADJECTIVE_VERB = 8;
export const IFED_POS_ADVERB = 16;
export const IFED_POS_ADNOUN = 32;
export const IFED_POS_CONJUNCTION = 64;
export const IFED_POS_INTERJECTION = 128;
export const IFED_POS_INDEPENDENT = 255;
export const IFED_POS_INFLECTIONALSUFFIX = 256;
export const IFED_POS_PREFIX = 512;
export const IFED_POS_SUFFIX = 1024;
export const IFED_POS_AFFIX = 1536;
export const IFED_POS_TANKANJI = 2048;
export const IFED_POS_IDIOMS = 4096;
export const IFED_POS_SYMBOLS = 8192;
export const IFED_POS_PARTICLE = 16384;
export const IFED_POS_AUXILIARY_VERB = 32768;
export const IFED_POS_SUB_VERB = 65536;
export const IFED_POS_DEPENDENT = 114688;
export const IFED_POS_ALL = 131071;
export const IFED_SELECT_NONE = 0;
export const IFED_SELECT_READING = 1;
export const IFED_SELECT_DISPLAY = 2;
export const IFED_SELECT_POS = 4;
export const IFED_SELECT_COMMENT = 8;
export const IFED_SELECT_ALL = 15;
export const IFED_REG_NONE = 0;
export const IFED_REG_USER = 1;
export const IFED_REG_AUTO = 2;
export const IFED_REG_GRAMMAR = 4;
export const IFED_REG_ALL = 7;
export const IFED_TYPE_NONE = 0;
export const IFED_TYPE_GENERAL = 1;
export const IFED_TYPE_NAMEPLACE = 2;
export const IFED_TYPE_SPEECH = 4;
export const IFED_TYPE_REVERSE = 8;
export const IFED_TYPE_ENGLISH = 16;
export const IFED_TYPE_ALL = 31;
export const IFED_S_MORE_ENTRIES = 320319640188514816n;
export const IFED_S_EMPTY_DICTIONARY = 320320739700142593n;
export const IFED_S_WORD_EXISTS = 320321839211770370n;
export const IFED_S_COMMENT_CHANGED = 320601115165225475n;
export const IFED_E_NOT_FOUND = 320601117312709376n;
export const IFED_E_INVALID_FORMAT = 320603316335964929n;
export const IFED_E_OPEN_FAILED = 320603316335964930n;
export const IFED_E_WRITE_FAILED = 320604415847592707n;
export const IFED_E_NO_ENTRY = 320605515359220484n;
export const IFED_E_REGISTER_FAILED = 320606614870848261n;
export const IFED_E_NOT_USER_DIC = 320607714382476038n;
export const IFED_E_NOT_SUPPORTED = 320608813894103815n;
export const IFED_E_USER_COMMENT = 320609913405731592n;
export const IFED_E_REGISTER_ILLEGAL_POS = 320611012917359369n;
export const IFED_E_REGISTER_IMPROPER_WORD = 320612112428987146n;
export const IFED_E_REGISTER_DISCONNECTED = 5980865072770347787n;
export const cbCommentMax = 256;
export const wchPrivate1 = 57344;
export const POS_UNDEFINED = 0;
export const JPOS_UNDEFINED = 0;
export const JPOS_MEISHI_FUTSU = 100;
export const JPOS_MEISHI_SAHEN = 101;
export const JPOS_MEISHI_ZAHEN = 102;
export const JPOS_MEISHI_KEIYOUDOUSHI = 103;
export const JPOS_HUKUSIMEISHI = 104;
export const JPOS_MEISA_KEIDOU = 105;
export const JPOS_JINMEI = 106;
export const JPOS_JINMEI_SEI = 107;
export const JPOS_JINMEI_MEI = 108;
export const JPOS_CHIMEI = 109;
export const JPOS_CHIMEI_KUNI = 110;
export const JPOS_CHIMEI_KEN = 111;
export const JPOS_CHIMEI_GUN = 112;
export const JPOS_CHIMEI_KU = 113;
export const JPOS_CHIMEI_SHI = 114;
export const JPOS_CHIMEI_MACHI = 115;
export const JPOS_CHIMEI_MURA = 116;
export const JPOS_CHIMEI_EKI = 117;
export const JPOS_SONOTA = 118;
export const JPOS_SHAMEI = 119;
export const JPOS_SOSHIKI = 120;
export const JPOS_KENCHIKU = 121;
export const JPOS_BUPPIN = 122;
export const JPOS_DAIMEISHI = 123;
export const JPOS_DAIMEISHI_NINSHOU = 124;
export const JPOS_DAIMEISHI_SHIJI = 125;
export const JPOS_KAZU = 126;
export const JPOS_KAZU_SURYOU = 127;
export const JPOS_KAZU_SUSHI = 128;
export const JPOS_5DAN_AWA = 200;
export const JPOS_5DAN_KA = 201;
export const JPOS_5DAN_GA = 202;
export const JPOS_5DAN_SA = 203;
export const JPOS_5DAN_TA = 204;
export const JPOS_5DAN_NA = 205;
export const JPOS_5DAN_BA = 206;
export const JPOS_5DAN_MA = 207;
export const JPOS_5DAN_RA = 208;
export const JPOS_5DAN_AWAUON = 209;
export const JPOS_5DAN_KASOKUON = 210;
export const JPOS_5DAN_RAHEN = 211;
export const JPOS_4DAN_HA = 212;
export const JPOS_1DAN = 213;
export const JPOS_TOKUSHU_KAHEN = 214;
export const JPOS_TOKUSHU_SAHENSURU = 215;
export const JPOS_TOKUSHU_SAHEN = 216;
export const JPOS_TOKUSHU_ZAHEN = 217;
export const JPOS_TOKUSHU_NAHEN = 218;
export const JPOS_KURU_KI = 219;
export const JPOS_KURU_KITA = 220;
export const JPOS_KURU_KITARA = 221;
export const JPOS_KURU_KITARI = 222;
export const JPOS_KURU_KITAROU = 223;
export const JPOS_KURU_KITE = 224;
export const JPOS_KURU_KUREBA = 225;
export const JPOS_KURU_KO = 226;
export const JPOS_KURU_KOI = 227;
export const JPOS_KURU_KOYOU = 228;
export const JPOS_SURU_SA = 229;
export const JPOS_SURU_SI = 230;
export const JPOS_SURU_SITA = 231;
export const JPOS_SURU_SITARA = 232;
export const JPOS_SURU_SIATRI = 233;
export const JPOS_SURU_SITAROU = 234;
export const JPOS_SURU_SITE = 235;
export const JPOS_SURU_SIYOU = 236;
export const JPOS_SURU_SUREBA = 237;
export const JPOS_SURU_SE = 238;
export const JPOS_SURU_SEYO = 239;
export const JPOS_KEIYOU = 300;
export const JPOS_KEIYOU_GARU = 301;
export const JPOS_KEIYOU_GE = 302;
export const JPOS_KEIYOU_ME = 303;
export const JPOS_KEIYOU_YUU = 304;
export const JPOS_KEIYOU_U = 305;
export const JPOS_KEIDOU = 400;
export const JPOS_KEIDOU_NO = 401;
export const JPOS_KEIDOU_TARU = 402;
export const JPOS_KEIDOU_GARU = 403;
export const JPOS_FUKUSHI = 500;
export const JPOS_FUKUSHI_SAHEN = 501;
export const JPOS_FUKUSHI_NI = 502;
export const JPOS_FUKUSHI_NANO = 503;
export const JPOS_FUKUSHI_DA = 504;
export const JPOS_FUKUSHI_TO = 505;
export const JPOS_FUKUSHI_TOSURU = 506;
export const JPOS_RENTAISHI = 600;
export const JPOS_RENTAISHI_SHIJI = 601;
export const JPOS_SETSUZOKUSHI = 650;
export const JPOS_KANDOUSHI = 670;
export const JPOS_SETTOU = 700;
export const JPOS_SETTOU_KAKU = 701;
export const JPOS_SETTOU_SAI = 702;
export const JPOS_SETTOU_FUKU = 703;
export const JPOS_SETTOU_MI = 704;
export const JPOS_SETTOU_DAISHOU = 705;
export const JPOS_SETTOU_KOUTEI = 706;
export const JPOS_SETTOU_CHOUTAN = 707;
export const JPOS_SETTOU_SHINKYU = 708;
export const JPOS_SETTOU_JINMEI = 709;
export const JPOS_SETTOU_CHIMEI = 710;
export const JPOS_SETTOU_SONOTA = 711;
export const JPOS_SETTOU_JOSUSHI = 712;
export const JPOS_SETTOU_TEINEI_O = 713;
export const JPOS_SETTOU_TEINEI_GO = 714;
export const JPOS_SETTOU_TEINEI_ON = 715;
export const JPOS_SETSUBI = 800;
export const JPOS_SETSUBI_TEKI = 801;
export const JPOS_SETSUBI_SEI = 802;
export const JPOS_SETSUBI_KA = 803;
export const JPOS_SETSUBI_CHU = 804;
export const JPOS_SETSUBI_FU = 805;
export const JPOS_SETSUBI_RYU = 806;
export const JPOS_SETSUBI_YOU = 807;
export const JPOS_SETSUBI_KATA = 808;
export const JPOS_SETSUBI_MEISHIRENDAKU = 809;
export const JPOS_SETSUBI_JINMEI = 810;
export const JPOS_SETSUBI_CHIMEI = 811;
export const JPOS_SETSUBI_KUNI = 812;
export const JPOS_SETSUBI_KEN = 813;
export const JPOS_SETSUBI_GUN = 814;
export const JPOS_SETSUBI_KU = 815;
export const JPOS_SETSUBI_SHI = 816;
export const JPOS_SETSUBI_MACHI = 817;
export const JPOS_SETSUBI_CHOU = 818;
export const JPOS_SETSUBI_MURA = 819;
export const JPOS_SETSUBI_SON = 820;
export const JPOS_SETSUBI_EKI = 821;
export const JPOS_SETSUBI_SONOTA = 822;
export const JPOS_SETSUBI_SHAMEI = 823;
export const JPOS_SETSUBI_SOSHIKI = 824;
export const JPOS_SETSUBI_KENCHIKU = 825;
export const JPOS_RENYOU_SETSUBI = 826;
export const JPOS_SETSUBI_JOSUSHI = 827;
export const JPOS_SETSUBI_JOSUSHIPLUS = 828;
export const JPOS_SETSUBI_JIKAN = 829;
export const JPOS_SETSUBI_JIKANPLUS = 830;
export const JPOS_SETSUBI_TEINEI = 831;
export const JPOS_SETSUBI_SAN = 832;
export const JPOS_SETSUBI_KUN = 833;
export const JPOS_SETSUBI_SAMA = 834;
export const JPOS_SETSUBI_DONO = 835;
export const JPOS_SETSUBI_FUKUSU = 836;
export const JPOS_SETSUBI_TACHI = 837;
export const JPOS_SETSUBI_RA = 838;
export const JPOS_TANKANJI = 900;
export const JPOS_TANKANJI_KAO = 901;
export const JPOS_KANYOUKU = 902;
export const JPOS_DOKURITSUGO = 903;
export const JPOS_FUTEIGO = 904;
export const JPOS_KIGOU = 905;
export const JPOS_EIJI = 906;
export const JPOS_KUTEN = 907;
export const JPOS_TOUTEN = 908;
export const JPOS_KANJI = 909;
export const JPOS_OPENBRACE = 910;
export const JPOS_CLOSEBRACE = 911;
export const JPOS_YOKUSEI = 912;
export const JPOS_TANSHUKU = 913;
export const VERSION_ID_JAPANESE = 16777216;
export const VERSION_ID_KOREAN = 33554432;
export const VERSION_ID_CHINESE_TRADITIONAL = 67108864;
export const VERSION_ID_CHINESE_SIMPLIFIED = 134217728;
export const RWM_SERVICE = `MSIMEService`;
export const FID_MSIME_VERSION = 0;
export const RWM_UIREADY = `MSIMEUIReady`;
export const RWM_MOUSE = `MSIMEMouseOperation`;
export const VERSION_MOUSE_OPERATION = 1;
export const IMEMOUSERET_NOTHANDLED = `-1`;
export const IMEMOUSE_VERSION = 255;
export const IMEMOUSE_NONE = 0;
export const IMEMOUSE_LDOWN = 1;
export const IMEMOUSE_RDOWN = 2;
export const IMEMOUSE_MDOWN = 4;
export const IMEMOUSE_WUP = 16;
export const IMEMOUSE_WDOWN = 32;
export const RWM_RECONVERT = `MSIMEReconvert`;
export const FID_RECONVERT_VERSION = 268435456;
export const VERSION_RECONVERSION = 1;
export const RWM_RECONVERTREQUEST = `MSIMEReconvertRequest`;
export const VERSION_DOCUMENTFEED = 1;
export const RWM_DOCUMENTFEED = `MSIMEDocumentFeed`;
export const VERSION_QUERYPOSITION = 1;
export const RWM_QUERYPOSITION = `MSIMEQueryPosition`;
export const RWM_MODEBIAS = `MSIMEModeBias`;
export const VERSION_MODEBIAS = 1;
export const MODEBIAS_GETVERSION = 0;
export const MODEBIAS_SETVALUE = 1;
export const MODEBIAS_GETVALUE = 2;
export const MODEBIASMODE_DEFAULT = 0;
export const MODEBIASMODE_FILENAME = 1;
export const MODEBIASMODE_READING = 2;
export const MODEBIASMODE_DIGIT = 4;
export const RWM_SHOWIMEPAD = `MSIMEShowImePad`;
export const SHOWIMEPAD_DEFAULT = 0;
export const SHOWIMEPAD_CATEGORY = 1;
export const SHOWIMEPAD_GUID = 2;
export const RWM_KEYMAP = `MSIMEKeyMap`;
export const RWM_CHGKEYMAP = `MSIMEChangeKeyMap`;
export const RWM_NTFYKEYMAP = `MSIMENotifyKeyMap`;
export const FID_MSIME_KMS_VERSION = 1;
export const FID_MSIME_KMS_INIT = 2;
export const FID_MSIME_KMS_TERM = 3;
export const FID_MSIME_KMS_DEL_KEYLIST = 4;
export const FID_MSIME_KMS_NOTIFY = 5;
export const FID_MSIME_KMS_GETMAP = 6;
export const FID_MSIME_KMS_INVOKE = 7;
export const FID_MSIME_KMS_SETMAP = 8;
export const FID_MSIME_KMS_FUNCDESC = 9;
export const FID_MSIME_KMS_GETMAPSEAMLESS = 10;
export const FID_MSIME_KMS_GETMAPFAST = 11;
export const IMEKMS_NOCOMPOSITION = 0;
export const IMEKMS_COMPOSITION = 1;
export const IMEKMS_SELECTION = 2;
export const IMEKMS_IMEOFF = 3;
export const IMEKMS_2NDLEVEL = 4;
export const IMEKMS_INPTGL = 5;
export const IMEKMS_CANDIDATE = 6;
export const IMEKMS_TYPECAND = 7;
export const RWM_RECONVERTOPTIONS = `MSIMEReconvertOptions`;
export const RECONVOPT_NONE = 0;
export const RECONVOPT_USECANCELNOTIFY = 1;
export const GCSEX_CANCELRECONVERT = 268435456;
export const EXTENDED_BIT = 16777216;
export const DONTCARE_BIT = 33554432;
export const FAKE_KEYSTROKE = 33554432;
export const KBDBASE = 0;
export const KBDSHIFT = 1;
export const KBDCTRL = 2;
export const KBDALT = 4;
export const KBDKANA = 8;
export const KBDROYA = 16;
export const KBDLOYA = 32;
export const KBDGRPSELTAP = 128;
export const GRAVE = 768;
export const ACUTE = 769;
export const CIRCUMFLEX = 770;
export const TILDE = 771;
export const MACRON = 772;
export const OVERSCORE = 773;
export const BREVE = 774;
export const DOT_ABOVE = 775;
export const UMLAUT = 776;
export const DIARESIS = 776;
export const HOOK_ABOVE = 777;
export const RING = 778;
export const DOUBLE_ACUTE = 779;
export const HACEK = 780;
export const CEDILLA = 807;
export const OGONEK = 808;
export const TONOS = 900;
export const DIARESIS_TONOS = 901;
export const wszGRAVE = `\0`;
export const wszACUTE = `\x01`;
export const wszCIRCUMFLEX = `\x02`;
export const wszTILDE = `\x03`;
export const wszMACRON = `\x04`;
export const wszOVERSCORE = `\x05`;
export const wszBREVE = `\x06`;
export const wszDOT_ABOVE = `\x07`;
export const wszUMLAUT = `\b`;
export const wszHOOK_ABOVE = `\t`;
export const wszRING = `\n`;
export const wszDOUBLE_ACUTE = `\v`;
export const wszHACEK = `\f`;
export const wszCEDILLA = `'`;
export const wszOGONEK = `(`;
export const wszTONOS = `\xfffd`;
export const wszDIARESIS_TONOS = `\xfffd`;
export const SHFT_INVALID = 15;
export const WCH_NONE = 61440;
export const WCH_DEAD = 61441;
export const WCH_LGTR = 61442;
export const CAPLOK = 1;
export const SGCAPS = 2;
export const CAPLOKALTGR = 4;
export const KANALOK = 8;
export const GRPSELTAP = 128;
export const DKF_DEAD = 1;
export const KBD_VERSION = 1;
export const KLLF_ALTGR = 1;
export const KLLF_SHIFTLOCK = 2;
export const KLLF_LRM_RLM = 4;
export const KLLF_GLOBAL_ATTRS = 2;
export const KBDTABLE_MULTI_MAX = 8;
export const KEYBOARD_TYPE_GENERIC_101 = 4;
export const KEYBOARD_TYPE_JAPAN = 7;
export const KEYBOARD_TYPE_KOREA = 8;
export const KEYBOARD_TYPE_UNKNOWN = 81;
export const NLSKBD_OEM_MICROSOFT = 0;
export const NLSKBD_OEM_AX = 1;
export const NLSKBD_OEM_EPSON = 4;
export const NLSKBD_OEM_FUJITSU = 5;
export const NLSKBD_OEM_IBM = 7;
export const NLSKBD_OEM_MATSUSHITA = 10;
export const NLSKBD_OEM_NEC = 13;
export const NLSKBD_OEM_TOSHIBA = 18;
export const NLSKBD_OEM_DEC = 24;
export const MICROSOFT_KBD_101_TYPE = 0;
export const MICROSOFT_KBD_AX_TYPE = 1;
export const MICROSOFT_KBD_106_TYPE = 2;
export const MICROSOFT_KBD_002_TYPE = 3;
export const MICROSOFT_KBD_001_TYPE = 4;
export const MICROSOFT_KBD_FUNC = 12;
export const AX_KBD_DESKTOP_TYPE = 1;
export const FMR_KBD_JIS_TYPE = 0;
export const FMR_KBD_OASYS_TYPE = 1;
export const FMV_KBD_OASYS_TYPE = 2;
export const NEC_KBD_NORMAL_TYPE = 1;
export const NEC_KBD_N_MODE_TYPE = 2;
export const NEC_KBD_H_MODE_TYPE = 3;
export const NEC_KBD_LAPTOP_TYPE = 4;
export const NEC_KBD_106_TYPE = 5;
export const TOSHIBA_KBD_DESKTOP_TYPE = 13;
export const TOSHIBA_KBD_LAPTOP_TYPE = 15;
export const DEC_KBD_ANSI_LAYOUT_TYPE = 1;
export const DEC_KBD_JIS_LAYOUT_TYPE = 2;
export const MICROSOFT_KBD_101A_TYPE = 0;
export const MICROSOFT_KBD_101B_TYPE = 4;
export const MICROSOFT_KBD_101C_TYPE = 5;
export const MICROSOFT_KBD_103_TYPE = 6;
export const NLSKBD_INFO_SEND_IME_NOTIFICATION = 1;
export const NLSKBD_INFO_ACCESSIBILITY_KEYMAP = 2;
export const NLSKBD_INFO_EMURATE_101_KEYBOARD = 16;
export const NLSKBD_INFO_EMURATE_106_KEYBOARD = 32;
export const KBDNLS_TYPE_NULL = 0;
export const KBDNLS_TYPE_NORMAL = 1;
export const KBDNLS_TYPE_TOGGLE = 2;
export const KBDNLS_INDEX_NORMAL = 1;
export const KBDNLS_INDEX_ALT = 2;
export const KBDNLS_NULL = 0;
export const KBDNLS_NOEVENT = 1;
export const KBDNLS_SEND_BASE_VK = 2;
export const KBDNLS_SEND_PARAM_VK = 3;
export const KBDNLS_KANALOCK = 4;
export const KBDNLS_ALPHANUM = 5;
export const KBDNLS_HIRAGANA = 6;
export const KBDNLS_KATAKANA = 7;
export const KBDNLS_SBCSDBCS = 8;
export const KBDNLS_ROMAN = 9;
export const KBDNLS_CODEINPUT = 10;
export const KBDNLS_HELP_OR_END = 11;
export const KBDNLS_HOME_OR_CLEAR = 12;
export const KBDNLS_NUMPAD = 13;
export const KBDNLS_KANAEVENT = 14;
export const KBDNLS_CONV_OR_NONCONV = 15;
export const KBD_TYPE = 4;
export const VK__none_ = 255;
export const VK_ABNT_C1 = 193;
export const VK_ABNT_C2 = 194;
export const SCANCODE_LSHIFT = 42;
export const SCANCODE_RSHIFT = 54;
export const SCANCODE_CTRL = 29;
export const SCANCODE_ALT = 56;
export const SCANCODE_NUMPAD_FIRST = 71;
export const SCANCODE_NUMPAD_LAST = 82;
export const SCANCODE_LWIN = 91;
export const SCANCODE_RWIN = 92;
export const SCANCODE_THAI_LAYOUT_TOGGLE = 41;
export const VK_DBE_ALPHANUMERIC = 240;
export const VK_DBE_KATAKANA = 241;
export const VK_DBE_HIRAGANA = 242;
export const VK_DBE_SBCSCHAR = 243;
export const VK_DBE_DBCSCHAR = 244;
export const VK_DBE_ROMAN = 245;
export const VK_DBE_NOROMAN = 246;
export const VK_DBE_ENTERWORDREGISTERMODE = 247;
export const VK_DBE_ENTERIMECONFIGMODE = 248;
export const VK_DBE_FLUSHSTRING = 249;
export const VK_DBE_CODEINPUT = 250;
export const VK_DBE_NOCODEINPUT = 251;
export const VK_DBE_DETERMINESTRING = 252;
export const VK_DBE_ENTERDLGCONVERSIONMODE = 253;
export const XINPUT_DLL_A = `xinput1_4.dll`;
export const XINPUT_DLL_W = `xinput1_4.dll`;
export const XINPUT_DLL = `xinput1_4.dll`;
export const XUSER_MAX_COUNT = 4;
export const XUSER_INDEX_ANY = 255;
export const IFED_REG_HEAD = 0;
export const IFED_REG_TAIL = 1;
export const IFED_REG_DEL = 2;
export const IFED_UNKNOWN = 0;
export const IFED_MSIME2_BIN_SYSTEM = 1;
export const IFED_MSIME2_BIN_USER = 2;
export const IFED_MSIME2_TEXT_USER = 3;
export const IFED_MSIME95_BIN_SYSTEM = 4;
export const IFED_MSIME95_BIN_USER = 5;
export const IFED_MSIME95_TEXT_USER = 6;
export const IFED_MSIME97_BIN_SYSTEM = 7;
export const IFED_MSIME97_BIN_USER = 8;
export const IFED_MSIME97_TEXT_USER = 9;
export const IFED_MSIME98_BIN_SYSTEM = 10;
export const IFED_MSIME98_BIN_USER = 11;
export const IFED_MSIME98_TEXT_USER = 12;
export const IFED_ACTIVE_DICT = 13;
export const IFED_ATOK9 = 14;
export const IFED_ATOK10 = 15;
export const IFED_NEC_AI_ = 16;
export const IFED_WX_II = 17;
export const IFED_WX_III = 18;
export const IFED_VJE_20 = 19;
export const IFED_MSIME98_SYSTEM_CE = 20;
export const IFED_MSIME_BIN_SYSTEM = 21;
export const IFED_MSIME_BIN_USER = 22;
export const IFED_MSIME_TEXT_USER = 23;
export const IFED_PIME2_BIN_USER = 24;
export const IFED_PIME2_BIN_SYSTEM = 25;
export const IFED_PIME2_BIN_STANDARD_SYSTEM = 26;
export const IFED_UCT_NONE = 0;
export const IFED_UCT_STRING_SJIS = 1;
export const IFED_UCT_STRING_UNICODE = 2;
export const IFED_UCT_USER_DEFINED = 3;
export const IFED_UCT_MAX = 4;
export const IFED_REL_NONE = 0;
export const IFED_REL_NO = 1;
export const IFED_REL_GA = 2;
export const IFED_REL_WO = 3;
export const IFED_REL_NI = 4;
export const IFED_REL_DE = 5;
export const IFED_REL_YORI = 6;
export const IFED_REL_KARA = 7;
export const IFED_REL_MADE = 8;
export const IFED_REL_HE = 9;
export const IFED_REL_TO = 10;
export const IFED_REL_IDEOM = 11;
export const IFED_REL_FUKU_YOUGEN = 12;
export const IFED_REL_KEIYOU_YOUGEN = 13;
export const IFED_REL_KEIDOU1_YOUGEN = 14;
export const IFED_REL_KEIDOU2_YOUGEN = 15;
export const IFED_REL_TAIGEN = 16;
export const IFED_REL_YOUGEN = 17;
export const IFED_REL_RENTAI_MEI = 18;
export const IFED_REL_RENSOU = 19;
export const IFED_REL_KEIYOU_TO_YOUGEN = 20;
export const IFED_REL_KEIYOU_TARU_YOUGEN = 21;
export const IFED_REL_UNKNOWN1 = 22;
export const IFED_REL_UNKNOWN2 = 23;
export const IFED_REL_ALL = 24;
export const ANSI_CHARSET = 0;
export const DEFAULT_CHARSET = 1;
export const SYMBOL_CHARSET = 2;
export const SHIFTJIS_CHARSET = 128;
export const HANGEUL_CHARSET = 129;
export const HANGUL_CHARSET = 129;
export const GB2312_CHARSET = 134;
export const CHINESEBIG5_CHARSET = 136;
export const OEM_CHARSET = 255;
export const JOHAB_CHARSET = 130;
export const HEBREW_CHARSET = 177;
export const ARABIC_CHARSET = 178;
export const GREEK_CHARSET = 161;
export const TURKISH_CHARSET = 162;
export const VIETNAMESE_CHARSET = 163;
export const THAI_CHARSET = 222;
export const EASTEUROPE_CHARSET = 238;
export const RUSSIAN_CHARSET = 204;
export const MAC_CHARSET = 77;
export const BALTIC_CHARSET = 186;
export const OUT_DEFAULT_PRECIS = 0;
export const OUT_STRING_PRECIS = 1;
export const OUT_CHARACTER_PRECIS = 2;
export const OUT_STROKE_PRECIS = 3;
export const OUT_TT_PRECIS = 4;
export const OUT_DEVICE_PRECIS = 5;
export const OUT_RASTER_PRECIS = 6;
export const OUT_TT_ONLY_PRECIS = 7;
export const OUT_OUTLINE_PRECIS = 8;
export const OUT_SCREEN_OUTLINE_PRECIS = 9;
export const OUT_PS_ONLY_PRECIS = 10;
export const CLIP_DEFAULT_PRECIS = 0;
export const CLIP_CHARACTER_PRECIS = 1;
export const CLIP_STROKE_PRECIS = 2;
export const CLIP_MASK = 15;
export const CLIP_LH_ANGLES = 16;
export const CLIP_TT_ALWAYS = 32;
export const CLIP_DFA_DISABLE = 64;
export const CLIP_EMBEDDED = 128;
export const CLIP_DFA_OVERRIDE = 64;
export const DEFAULT_QUALITY = 0;
export const DRAFT_QUALITY = 1;
export const PROOF_QUALITY = 2;
export const NONANTIALIASED_QUALITY = 3;
export const ANTIALIASED_QUALITY = 4;
export const CLEARTYPE_QUALITY = 5;
export const USE_SYSTEM_COLORS_WHEN_NECESSARY = 0;
export const USE_SYSTEM_COLORS = 1;
export const USE_ORIGINAL_COLORS = 2;
export const MANIPULATION_NONE = 0;
export const MANIPULATION_TRANSLATE_X = 1;
export const MANIPULATION_TRANSLATE_Y = 2;
export const MANIPULATION_SCALE = 4;
export const MANIPULATION_ROTATE = 8;
export const MANIPULATION_ALL = 15;
export const POINTER_CHANGE_NONE = 0;
export const POINTER_CHANGE_FIRSTBUTTON_DOWN = 1;
export const POINTER_CHANGE_FIRSTBUTTON_UP = 2;
export const POINTER_CHANGE_SECONDBUTTON_DOWN = 3;
export const POINTER_CHANGE_SECONDBUTTON_UP = 4;
export const POINTER_CHANGE_THIRDBUTTON_DOWN = 5;
export const POINTER_CHANGE_THIRDBUTTON_UP = 6;
export const POINTER_CHANGE_FOURTHBUTTON_DOWN = 7;
export const POINTER_CHANGE_FOURTHBUTTON_UP = 8;
export const POINTER_CHANGE_FIFTHBUTTON_DOWN = 9;
export const POINTER_CHANGE_FIFTHBUTTON_UP = 10;
export const PT_POINTER = 1;
export const PT_TOUCH = 2;
export const PT_PEN = 3;
export const PT_MOUSE = 4;
export const PT_TOUCHPAD = 5;
export const IMDT_UNAVAILABLE = 0;
export const IMDT_KEYBOARD = 1;
export const IMDT_MOUSE = 2;
export const IMDT_TOUCH = 4;
export const IMDT_PEN = 8;
export const IMDT_TOUCHPAD = 16;
export const IMO_UNAVAILABLE = 0;
export const IMO_HARDWARE = 1;
export const IMO_INJECTED = 2;
export const IMO_SYSTEM = 4;

// Structs

export type HRAWINPUT = number | bigint;

export type HGESTUREINFO = number | bigint;

export type HTOUCHINPUT = number | bigint;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.COMPOSITIONFORM (size: 24)
 */
export interface COMPOSITIONFORM {
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.POINT */
  ptCurrentPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcArea: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOMPOSITIONFORM = 24;

export function allocCOMPOSITIONFORM(data?: Partial<COMPOSITIONFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITIONFORM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStyle !== undefined) view.setUint32(0, Number(data.dwStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ptCurrentPos !== undefined) view.setBigUint64(8, data.ptCurrentPos === null ? 0n : util.toBigInt(util.toPointer(data.ptCurrentPos)), true);
  // 0x10: pointer
  if (data?.rcArea !== undefined) view.setBigUint64(16, data.rcArea === null ? 0n : util.toBigInt(util.toPointer(data.rcArea)), true);
  return buf;
}

export class COMPOSITIONFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ptCurrentPos(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rcArea(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ptCurrentPos(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set rcArea(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.CANDIDATEFORM (size: 24)
 */
export interface CANDIDATEFORM {
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.POINT */
  ptCurrentPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcArea: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCANDIDATEFORM = 24;

export function allocCANDIDATEFORM(data?: Partial<CANDIDATEFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCANDIDATEFORM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIndex !== undefined) view.setUint32(0, Number(data.dwIndex), true);
  // 0x04: u32
  if (data?.dwStyle !== undefined) view.setUint32(4, Number(data.dwStyle), true);
  // 0x08: pointer
  if (data?.ptCurrentPos !== undefined) view.setBigUint64(8, data.ptCurrentPos === null ? 0n : util.toBigInt(util.toPointer(data.ptCurrentPos)), true);
  // 0x10: pointer
  if (data?.rcArea !== undefined) view.setBigUint64(16, data.rcArea === null ? 0n : util.toBigInt(util.toPointer(data.rcArea)), true);
  return buf;
}

export class CANDIDATEFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwStyle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ptCurrentPos(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rcArea(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwStyle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ptCurrentPos(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set rcArea(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.CANDIDATELIST (size: 32)
 */
export interface CANDIDATELIST {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwStyle: number;
  /** u32 */
  dwCount: number;
  /** u32 */
  dwSelection: number;
  /** u32 */
  dwPageStart: number;
  /** u32 */
  dwPageSize: number;
  /** array */
  dwOffset: Deno.PointerValue | null;
}

export const sizeofCANDIDATELIST = 32;

export function allocCANDIDATELIST(data?: Partial<CANDIDATELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCANDIDATELIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwStyle !== undefined) view.setUint32(4, Number(data.dwStyle), true);
  // 0x08: u32
  if (data?.dwCount !== undefined) view.setUint32(8, Number(data.dwCount), true);
  // 0x0c: u32
  if (data?.dwSelection !== undefined) view.setUint32(12, Number(data.dwSelection), true);
  // 0x10: u32
  if (data?.dwPageStart !== undefined) view.setUint32(16, Number(data.dwPageStart), true);
  // 0x14: u32
  if (data?.dwPageSize !== undefined) view.setUint32(20, Number(data.dwPageSize), true);
  // 0x18: pointer
  if (data?.dwOffset !== undefined) view.setBigUint64(24, data.dwOffset === null ? 0n : util.toBigInt(util.toPointer(data.dwOffset)), true);
  return buf;
}

export class CANDIDATELISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwStyle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSelection(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwPageStart(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPageSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get dwOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwStyle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSelection(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwPageStart(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPageSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set dwOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Input.Ime.REGISTERWORDA (size: 16)
 */
export interface REGISTERWORDA {
  /** Windows.Win32.Foundation.PSTR */
  lpReading: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpWord: string | null | Uint8Array;
}

export const sizeofREGISTERWORDA = 16;

export function allocREGISTERWORDA(data?: Partial<REGISTERWORDA>): Uint8Array {
  const buf = new Uint8Array(sizeofREGISTERWORDA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpReading !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpReading);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpWord !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpWord);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class REGISTERWORDAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpReading(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get lpWord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set lpReading(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set lpWord(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Input.Ime.REGISTERWORDW (size: 16)
 */
export interface REGISTERWORDW {
  /** Windows.Win32.Foundation.PWSTR */
  lpReading: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpWord: string | null | Uint8Array | Uint16Array;
}

export const sizeofREGISTERWORDW = 16;

export function allocREGISTERWORDW(data?: Partial<REGISTERWORDW>): Uint8Array {
  const buf = new Uint8Array(sizeofREGISTERWORDW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpReading !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpReading);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpWord !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpWord);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class REGISTERWORDWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpReading(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get lpWord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set lpReading(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set lpWord(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.RECONVERTSTRING (size: 32)
 */
export interface RECONVERTSTRING {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwStrLen: number;
  /** u32 */
  dwStrOffset: number;
  /** u32 */
  dwCompStrLen: number;
  /** u32 */
  dwCompStrOffset: number;
  /** u32 */
  dwTargetStrLen: number;
  /** u32 */
  dwTargetStrOffset: number;
}

export const sizeofRECONVERTSTRING = 32;

export function allocRECONVERTSTRING(data?: Partial<RECONVERTSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofRECONVERTSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwStrLen !== undefined) view.setUint32(8, Number(data.dwStrLen), true);
  // 0x0c: u32
  if (data?.dwStrOffset !== undefined) view.setUint32(12, Number(data.dwStrOffset), true);
  // 0x10: u32
  if (data?.dwCompStrLen !== undefined) view.setUint32(16, Number(data.dwCompStrLen), true);
  // 0x14: u32
  if (data?.dwCompStrOffset !== undefined) view.setUint32(20, Number(data.dwCompStrOffset), true);
  // 0x18: u32
  if (data?.dwTargetStrLen !== undefined) view.setUint32(24, Number(data.dwTargetStrLen), true);
  // 0x1c: u32
  if (data?.dwTargetStrOffset !== undefined) view.setUint32(28, Number(data.dwTargetStrOffset), true);
  return buf;
}

export class RECONVERTSTRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStrLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwStrOffset(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwCompStrLen(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwCompStrOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwTargetStrLen(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwTargetStrOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStrLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwStrOffset(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwCompStrLen(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwCompStrOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwTargetStrLen(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwTargetStrOffset(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.STYLEBUFA (size: 16)
 */
export interface STYLEBUFA {
  /** u32 */
  dwStyle: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofSTYLEBUFA = 16;

export function allocSTYLEBUFA(data?: Partial<STYLEBUFA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTYLEBUFA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStyle !== undefined) view.setUint32(0, Number(data.dwStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : util.toBigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

export class STYLEBUFAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.STYLEBUFW (size: 16)
 */
export interface STYLEBUFW {
  /** u32 */
  dwStyle: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofSTYLEBUFW = 16;

export function allocSTYLEBUFW(data?: Partial<STYLEBUFW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTYLEBUFW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStyle !== undefined) view.setUint32(0, Number(data.dwStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : util.toBigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

export class STYLEBUFWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HBITMAP = number | bigint;

/**
 * Windows.Win32.UI.Input.Ime.IMEMENUITEMINFOA (size: 56)
 */
export interface IMEMENUITEMINFOA {
  /** u32 */
  cbSize: number;
  /** u32 */
  fType: number;
  /** u32 */
  fState: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpChecked: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpUnchecked: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwItemData: number;
  /** array */
  szString: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEMENUITEMINFOA = 56;

export function allocIMEMENUITEMINFOA(data?: Partial<IMEMENUITEMINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEMENUITEMINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fType !== undefined) view.setUint32(4, Number(data.fType), true);
  // 0x08: u32
  if (data?.fState !== undefined) view.setUint32(8, Number(data.fState), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.hbmpChecked !== undefined) view.setBigUint64(16, data.hbmpChecked === null ? 0n : util.toBigInt(util.toPointer(data.hbmpChecked)), true);
  // 0x18: pointer
  if (data?.hbmpUnchecked !== undefined) view.setBigUint64(24, data.hbmpUnchecked === null ? 0n : util.toBigInt(util.toPointer(data.hbmpUnchecked)), true);
  // 0x20: u32
  if (data?.dwItemData !== undefined) view.setUint32(32, Number(data.dwItemData), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szString !== undefined) view.setBigUint64(40, data.szString === null ? 0n : util.toBigInt(util.toPointer(data.szString)), true);
  // 0x30: pointer
  if (data?.hbmpItem !== undefined) view.setBigUint64(48, data.hbmpItem === null ? 0n : util.toBigInt(util.toPointer(data.hbmpItem)), true);
  return buf;
}

export class IMEMENUITEMINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get wID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get hbmpChecked(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get hbmpUnchecked(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwItemData(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hbmpItem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set wID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set hbmpChecked(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set hbmpUnchecked(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwItemData(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hbmpItem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEMENUITEMINFOW (size: 56)
 */
export interface IMEMENUITEMINFOW {
  /** u32 */
  cbSize: number;
  /** u32 */
  fType: number;
  /** u32 */
  fState: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpChecked: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpUnchecked: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwItemData: number;
  /** array */
  szString: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEMENUITEMINFOW = 56;

export function allocIMEMENUITEMINFOW(data?: Partial<IMEMENUITEMINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEMENUITEMINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fType !== undefined) view.setUint32(4, Number(data.fType), true);
  // 0x08: u32
  if (data?.fState !== undefined) view.setUint32(8, Number(data.fState), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.hbmpChecked !== undefined) view.setBigUint64(16, data.hbmpChecked === null ? 0n : util.toBigInt(util.toPointer(data.hbmpChecked)), true);
  // 0x18: pointer
  if (data?.hbmpUnchecked !== undefined) view.setBigUint64(24, data.hbmpUnchecked === null ? 0n : util.toBigInt(util.toPointer(data.hbmpUnchecked)), true);
  // 0x20: u32
  if (data?.dwItemData !== undefined) view.setUint32(32, Number(data.dwItemData), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szString !== undefined) view.setBigUint64(40, data.szString === null ? 0n : util.toBigInt(util.toPointer(data.szString)), true);
  // 0x30: pointer
  if (data?.hbmpItem !== undefined) view.setBigUint64(48, data.hbmpItem === null ? 0n : util.toBigInt(util.toPointer(data.hbmpItem)), true);
  return buf;
}

export class IMEMENUITEMINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get wID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get hbmpChecked(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get hbmpUnchecked(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwItemData(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hbmpItem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set wID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set hbmpChecked(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set hbmpUnchecked(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwItemData(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hbmpItem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMECHARPOSITION (size: 32)
 */
export interface IMECHARPOSITION {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCharPos: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cLineHeight: number;
  /** Windows.Win32.Foundation.RECT */
  rcDocument: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMECHARPOSITION = 32;

export function allocIMECHARPOSITION(data?: Partial<IMECHARPOSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECHARPOSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCharPos !== undefined) view.setUint32(4, Number(data.dwCharPos), true);
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : util.toBigInt(util.toPointer(data.pt)), true);
  // 0x10: u32
  if (data?.cLineHeight !== undefined) view.setUint32(16, Number(data.cLineHeight), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rcDocument !== undefined) view.setBigUint64(24, data.rcDocument === null ? 0n : util.toBigInt(util.toPointer(data.rcDocument)), true);
  return buf;
}

export class IMECHARPOSITIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCharPos(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cLineHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rcDocument(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCharPos(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cLineHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rcDocument(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HWND = number | bigint;

/**
 * Windows.Win32.UI.Input.Ime.IMEDLG (size: 32)
 */
export interface IMEDLG {
  /** i32 */
  cbIMEDLG: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrWord: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nTabId: number;
}

export const sizeofIMEDLG = 32;

export function allocIMEDLG(data?: Partial<IMEDLG>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEDLG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbIMEDLG !== undefined) view.setInt32(0, Number(data.cbIMEDLG), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : util.toBigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpwstrWord !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwstrWord);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.nTabId !== undefined) view.setInt32(24, Number(data.nTabId), true);
  // 0x1c: pad4
  return buf;
}

export class IMEDLGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbIMEDLG(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpwstrWord(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get nTabId(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set cbIMEDLG(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set lpwstrWord(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: i32
  set nTabId(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: number | bigint;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: number | bigint;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, util.toBigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : util.toBigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : util.toBigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : util.toBigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : util.toBigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get u(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set Data0(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set u(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: number | bigint;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, util.toBigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Input.Ime.WDD (size: 48)
 */
export interface WDD {
  /** u16 */
  wDispPos: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cchDisp: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  WDD_nReserve1: number;
  /** u16 */
  nPos: number;
  /** u16 */
  _bitfield: number;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWDD = 48;

export function allocWDD(data?: Partial<WDD>): Uint8Array {
  const buf = new Uint8Array(sizeofWDD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDispPos !== undefined) view.setUint16(0, Number(data.wDispPos), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u16
  if (data?.cchDisp !== undefined) view.setUint16(16, Number(data.cchDisp), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.WDD_nReserve1 !== undefined) view.setUint32(32, Number(data.WDD_nReserve1), true);
  // 0x24: u16
  if (data?.nPos !== undefined) view.setUint16(36, Number(data.nPos), true);
  // 0x26: u16
  if (data?._bitfield !== undefined) view.setUint16(38, Number(data._bitfield), true);
  // 0x28: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(40, data.pReserved === null ? 0n : util.toBigInt(util.toPointer(data.pReserved)), true);
  return buf;
}

export class WDDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wDispPos(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get cchDisp(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get WDD_nReserve1(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get nPos(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get _bitfield(): number {
    return this.view.getUint16(38, true);
  }

  // 0x28: pointer
  get pReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set wDispPos(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set cchDisp(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set WDD_nReserve1(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set nPos(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set _bitfield(value: number) {
    this.view.setUint16(38, value, true);
  }

  // 0x28: pointer
  set pReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : util.toBigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

export class _Anonymous3_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaDestConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaDest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwAlphaDestConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaDest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.MORRSLT (size: 104)
 */
export interface MORRSLT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwchOutput: string | null | Uint8Array | Uint16Array;
  /** u16 */
  cchOutput: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pchInputPos: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchOutputIdxWDD: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  paMonoRubyPos: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pWDD: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cWDD: number;
  /** ptr */
  pPrivate: Deno.PointerValue | Uint8Array | null;
  /** array */
  BLKBuff: Deno.PointerValue | null;
}

export const sizeofMORRSLT = 104;

export function allocMORRSLT(data?: Partial<MORRSLT>): Uint8Array {
  const buf = new Uint8Array(sizeofMORRSLT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwchOutput !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwchOutput);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.cchOutput !== undefined) view.setUint16(16, Number(data.cchOutput), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: pointer
  if (data?.pchInputPos !== undefined) view.setBigUint64(40, data.pchInputPos === null ? 0n : util.toBigInt(util.toPointer(data.pchInputPos)), true);
  // 0x30: pointer
  if (data?.pchOutputIdxWDD !== undefined) view.setBigUint64(48, data.pchOutputIdxWDD === null ? 0n : util.toBigInt(util.toPointer(data.pchOutputIdxWDD)), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous3)), true);
  // 0x40: pointer
  if (data?.paMonoRubyPos !== undefined) view.setBigUint64(64, data.paMonoRubyPos === null ? 0n : util.toBigInt(util.toPointer(data.paMonoRubyPos)), true);
  // 0x48: pointer
  if (data?.pWDD !== undefined) view.setBigUint64(72, data.pWDD === null ? 0n : util.toBigInt(util.toPointer(data.pWDD)), true);
  // 0x50: i32
  if (data?.cWDD !== undefined) view.setInt32(80, Number(data.cWDD), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pPrivate !== undefined) view.setBigUint64(88, data.pPrivate === null ? 0n : util.toBigInt(util.toPointer(data.pPrivate)), true);
  // 0x60: pointer
  if (data?.BLKBuff !== undefined) view.setBigUint64(96, data.BLKBuff === null ? 0n : util.toBigInt(util.toPointer(data.BLKBuff)), true);
  return buf;
}

export class MORRSLTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwchOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get cchOutput(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pchInputPos(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pchOutputIdxWDD(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get paMonoRubyPos(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pWDD(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: i32
  get cWDD(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pPrivate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get BLKBuff(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwchOutput(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u16
  set cchOutput(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pchInputPos(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pchOutputIdxWDD(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set paMonoRubyPos(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pWDD(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: i32
  set cWDD(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pPrivate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set BLKBuff(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEWRD (size: 48)
 */
export interface IMEWRD {
  /** Windows.Win32.Foundation.PWSTR */
  pwchReading: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwchDisplay: string | null | Uint8Array | Uint16Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  rgulAttrs: Deno.PointerValue | null;
  /** i32 */
  cbComment: number;
  /** Windows.Win32.UI.Input.Ime.IMEUCT */
  uct: IMEUCT;
  /** ptr */
  pvComment: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEWRD = 48;

export function allocIMEWRD(data?: Partial<IMEWRD>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEWRD);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwchReading !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwchReading);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwchDisplay !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwchDisplay);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.rgulAttrs !== undefined) view.setBigUint64(24, data.rgulAttrs === null ? 0n : util.toBigInt(util.toPointer(data.rgulAttrs)), true);
  // 0x20: i32
  if (data?.cbComment !== undefined) view.setInt32(32, Number(data.cbComment), true);
  // 0x24: i32
  if (data?.uct !== undefined) view.setInt32(36, Number(data.uct), true);
  // 0x28: pointer
  if (data?.pvComment !== undefined) view.setBigUint64(40, data.pvComment === null ? 0n : util.toBigInt(util.toPointer(data.pvComment)), true);
  return buf;
}

export class IMEWRDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwchReading(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwchDisplay(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get rgulAttrs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get cbComment(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get uct(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get pvComment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwchReading(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pwchDisplay(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set rgulAttrs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set cbComment(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set uct(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set pvComment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMESHF (size: 32)
 */
export interface IMESHF {
  /** u16 */
  cbShf: number;
  /** u16 */
  verDic: number;
  /** array */
  szTitle: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szCopyright: Deno.PointerValue | null;
}

export const sizeofIMESHF = 32;

export function allocIMESHF(data?: Partial<IMESHF>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESHF);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbShf !== undefined) view.setUint16(0, Number(data.cbShf), true);
  // 0x02: u16
  if (data?.verDic !== undefined) view.setUint16(2, Number(data.verDic), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szTitle !== undefined) view.setBigUint64(8, data.szTitle === null ? 0n : util.toBigInt(util.toPointer(data.szTitle)), true);
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : util.toBigInt(util.toPointer(data.szDescription)), true);
  // 0x18: pointer
  if (data?.szCopyright !== undefined) view.setBigUint64(24, data.szCopyright === null ? 0n : util.toBigInt(util.toPointer(data.szCopyright)), true);
  return buf;
}

export class IMESHFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbShf(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get verDic(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get szDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szCopyright(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set cbShf(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set verDic(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szCopyright(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.POSTBL (size: 16)
 */
export interface POSTBL {
  /** u16 */
  nPos: number;
  /** ptr */
  szName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPOSTBL = 16;

export function allocPOSTBL(data?: Partial<POSTBL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOSTBL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.nPos !== undefined) view.setUint16(0, Number(data.nPos), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : util.toBigInt(util.toPointer(data.szName)), true);
  return buf;
}

export class POSTBLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get nPos(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get szName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set nPos(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set szName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEDP (size: 24)
 */
export interface IMEDP {
  /** Windows.Win32.UI.Input.Ime.IMEWRD */
  wrdModifier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.Ime.IMEWRD */
  wrdModifiee: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.Ime.IMEREL */
  relID: IMEREL;
}

export const sizeofIMEDP = 24;

export function allocIMEDP(data?: Partial<IMEDP>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEDP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wrdModifier !== undefined) view.setBigUint64(0, data.wrdModifier === null ? 0n : util.toBigInt(util.toPointer(data.wrdModifier)), true);
  // 0x08: pointer
  if (data?.wrdModifiee !== undefined) view.setBigUint64(8, data.wrdModifiee === null ? 0n : util.toBigInt(util.toPointer(data.wrdModifiee)), true);
  // 0x10: i32
  if (data?.relID !== undefined) view.setInt32(16, Number(data.relID), true);
  // 0x14: pad4
  return buf;
}

export class IMEDPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wrdModifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get wrdModifiee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get relID(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set wrdModifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set wrdModifiee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set relID(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSINIT (size: 16)
 */
export interface IMEKMSINIT {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
}

export const sizeofIMEKMSINIT = 16;

export function allocIMEKMSINIT(data?: Partial<IMEKMSINIT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSINIT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : util.toBigInt(util.toPointer(data.hWnd)), true);
  return buf;
}

export class IMEKMSINITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hWnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hWnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSKEY (size: 32)
 */
export interface IMEKMSKEY {
  /** u32 */
  dwStatus: number;
  /** u32 */
  dwCompStatus: number;
  /** u32 */
  dwVKEY: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEKMSKEY = 32;

export function allocIMEKMSKEY(data?: Partial<IMEKMSKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: u32
  if (data?.dwCompStatus !== undefined) view.setUint32(4, Number(data.dwCompStatus), true);
  // 0x08: u32
  if (data?.dwVKEY !== undefined) view.setUint32(8, Number(data.dwVKEY), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class IMEKMSKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCompStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwVKEY(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCompStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwVKEY(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HIMC = number | bigint;

/**
 * Windows.Win32.UI.Input.Ime.IMEKMS (size: 32)
 */
export interface IMEKMS {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cKeyList: number;
  /** ptr */
  pKeyList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEKMS = 32;

export function allocIMEKMS(data?: Partial<IMEKMS>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : util.toBigInt(util.toPointer(data.hIMC)), true);
  // 0x10: u32
  if (data?.cKeyList !== undefined) view.setUint32(16, Number(data.cKeyList), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pKeyList !== undefined) view.setBigUint64(24, data.pKeyList === null ? 0n : util.toBigInt(util.toPointer(data.pKeyList)), true);
  return buf;
}

export class IMEKMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hIMC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cKeyList(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pKeyList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hIMC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cKeyList(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pKeyList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSNTFY (size: 24)
 */
export interface IMEKMSNTFY {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSelect: boolean;
}

export const sizeofIMEKMSNTFY = 24;

export function allocIMEKMSNTFY(data?: Partial<IMEKMSNTFY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSNTFY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : util.toBigInt(util.toPointer(data.hIMC)), true);
  // 0x10: i32
  if (data?.fSelect !== undefined) view.setInt32(16, Number(data.fSelect), true);
  // 0x14: pad4
  return buf;
}

export class IMEKMSNTFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hIMC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get fSelect(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hIMC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set fSelect(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSKMP (size: 40)
 */
export interface IMEKMSKMP {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  idLang: number;
  /** u16 */
  wVKStart: number;
  /** u16 */
  wVKEnd: number;
  /** i32 */
  cKeyList: number;
  /** ptr */
  pKeyList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEKMSKMP = 40;

export function allocIMEKMSKMP(data?: Partial<IMEKMSKMP>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSKMP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : util.toBigInt(util.toPointer(data.hIMC)), true);
  // 0x10: u16
  if (data?.idLang !== undefined) view.setUint16(16, Number(data.idLang), true);
  // 0x12: u16
  if (data?.wVKStart !== undefined) view.setUint16(18, Number(data.wVKStart), true);
  // 0x14: u16
  if (data?.wVKEnd !== undefined) view.setUint16(20, Number(data.wVKEnd), true);
  // 0x16: i32
  if (data?.cKeyList !== undefined) view.setInt32(22, Number(data.cKeyList), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.pKeyList !== undefined) view.setBigUint64(32, data.pKeyList === null ? 0n : util.toBigInt(util.toPointer(data.pKeyList)), true);
  return buf;
}

export class IMEKMSKMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hIMC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get idLang(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wVKStart(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get wVKEnd(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: i32
  get cKeyList(): number {
    return this.view.getInt32(22, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get pKeyList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hIMC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set idLang(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wVKStart(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set wVKEnd(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: i32
  set cKeyList(value: number) {
    this.view.setInt32(22, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set pKeyList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSINVK (size: 24)
 */
export interface IMEKMSINVK {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwControl: number;
}

export const sizeofIMEKMSINVK = 24;

export function allocIMEKMSINVK(data?: Partial<IMEKMSINVK>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSINVK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : util.toBigInt(util.toPointer(data.hIMC)), true);
  // 0x10: u32
  if (data?.dwControl !== undefined) view.setUint32(16, Number(data.dwControl), true);
  // 0x14: pad4
  return buf;
}

export class IMEKMSINVKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hIMC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwControl(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hIMC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwControl(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSFUNCDESC (size: 24)
 */
export interface IMEKMSFUNCDESC {
  /** i32 */
  cbSize: number;
  /** u16 */
  idLang: number;
  /** u32 */
  dwControl: number;
  /** array */
  pwszDescription: Deno.PointerValue | null;
}

export const sizeofIMEKMSFUNCDESC = 24;

export function allocIMEKMSFUNCDESC(data?: Partial<IMEKMSFUNCDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSFUNCDESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.idLang !== undefined) view.setUint16(4, Number(data.idLang), true);
  // 0x06: u32
  if (data?.dwControl !== undefined) view.setUint32(6, Number(data.dwControl), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.pwszDescription !== undefined) view.setBigUint64(16, data.pwszDescription === null ? 0n : util.toBigInt(util.toPointer(data.pwszDescription)), true);
  return buf;
}

export class IMEKMSFUNCDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get idLang(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get dwControl(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get pwszDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set idLang(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set dwControl(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set pwszDescription(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.COMPOSITIONSTRING (size: 104)
 */
export interface COMPOSITIONSTRING {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCompReadAttrLen: number;
  /** u32 */
  dwCompReadAttrOffset: number;
  /** u32 */
  dwCompReadClauseLen: number;
  /** u32 */
  dwCompReadClauseOffset: number;
  /** u32 */
  dwCompReadStrLen: number;
  /** u32 */
  dwCompReadStrOffset: number;
  /** u32 */
  dwCompAttrLen: number;
  /** u32 */
  dwCompAttrOffset: number;
  /** u32 */
  dwCompClauseLen: number;
  /** u32 */
  dwCompClauseOffset: number;
  /** u32 */
  dwCompStrLen: number;
  /** u32 */
  dwCompStrOffset: number;
  /** u32 */
  dwCursorPos: number;
  /** u32 */
  dwDeltaStart: number;
  /** u32 */
  dwResultReadClauseLen: number;
  /** u32 */
  dwResultReadClauseOffset: number;
  /** u32 */
  dwResultReadStrLen: number;
  /** u32 */
  dwResultReadStrOffset: number;
  /** u32 */
  dwResultClauseLen: number;
  /** u32 */
  dwResultClauseOffset: number;
  /** u32 */
  dwResultStrLen: number;
  /** u32 */
  dwResultStrOffset: number;
  /** u32 */
  dwPrivateSize: number;
  /** u32 */
  dwPrivateOffset: number;
}

export const sizeofCOMPOSITIONSTRING = 104;

export function allocCOMPOSITIONSTRING(data?: Partial<COMPOSITIONSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITIONSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCompReadAttrLen !== undefined) view.setUint32(4, Number(data.dwCompReadAttrLen), true);
  // 0x08: u32
  if (data?.dwCompReadAttrOffset !== undefined) view.setUint32(8, Number(data.dwCompReadAttrOffset), true);
  // 0x0c: u32
  if (data?.dwCompReadClauseLen !== undefined) view.setUint32(12, Number(data.dwCompReadClauseLen), true);
  // 0x10: u32
  if (data?.dwCompReadClauseOffset !== undefined) view.setUint32(16, Number(data.dwCompReadClauseOffset), true);
  // 0x14: u32
  if (data?.dwCompReadStrLen !== undefined) view.setUint32(20, Number(data.dwCompReadStrLen), true);
  // 0x18: u32
  if (data?.dwCompReadStrOffset !== undefined) view.setUint32(24, Number(data.dwCompReadStrOffset), true);
  // 0x1c: u32
  if (data?.dwCompAttrLen !== undefined) view.setUint32(28, Number(data.dwCompAttrLen), true);
  // 0x20: u32
  if (data?.dwCompAttrOffset !== undefined) view.setUint32(32, Number(data.dwCompAttrOffset), true);
  // 0x24: u32
  if (data?.dwCompClauseLen !== undefined) view.setUint32(36, Number(data.dwCompClauseLen), true);
  // 0x28: u32
  if (data?.dwCompClauseOffset !== undefined) view.setUint32(40, Number(data.dwCompClauseOffset), true);
  // 0x2c: u32
  if (data?.dwCompStrLen !== undefined) view.setUint32(44, Number(data.dwCompStrLen), true);
  // 0x30: u32
  if (data?.dwCompStrOffset !== undefined) view.setUint32(48, Number(data.dwCompStrOffset), true);
  // 0x34: u32
  if (data?.dwCursorPos !== undefined) view.setUint32(52, Number(data.dwCursorPos), true);
  // 0x38: u32
  if (data?.dwDeltaStart !== undefined) view.setUint32(56, Number(data.dwDeltaStart), true);
  // 0x3c: u32
  if (data?.dwResultReadClauseLen !== undefined) view.setUint32(60, Number(data.dwResultReadClauseLen), true);
  // 0x40: u32
  if (data?.dwResultReadClauseOffset !== undefined) view.setUint32(64, Number(data.dwResultReadClauseOffset), true);
  // 0x44: u32
  if (data?.dwResultReadStrLen !== undefined) view.setUint32(68, Number(data.dwResultReadStrLen), true);
  // 0x48: u32
  if (data?.dwResultReadStrOffset !== undefined) view.setUint32(72, Number(data.dwResultReadStrOffset), true);
  // 0x4c: u32
  if (data?.dwResultClauseLen !== undefined) view.setUint32(76, Number(data.dwResultClauseLen), true);
  // 0x50: u32
  if (data?.dwResultClauseOffset !== undefined) view.setUint32(80, Number(data.dwResultClauseOffset), true);
  // 0x54: u32
  if (data?.dwResultStrLen !== undefined) view.setUint32(84, Number(data.dwResultStrLen), true);
  // 0x58: u32
  if (data?.dwResultStrOffset !== undefined) view.setUint32(88, Number(data.dwResultStrOffset), true);
  // 0x5c: u32
  if (data?.dwPrivateSize !== undefined) view.setUint32(92, Number(data.dwPrivateSize), true);
  // 0x60: u32
  if (data?.dwPrivateOffset !== undefined) view.setUint32(96, Number(data.dwPrivateOffset), true);
  // 0x64: pad4
  return buf;
}

export class COMPOSITIONSTRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCompReadAttrLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCompReadAttrOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCompReadClauseLen(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwCompReadClauseOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwCompReadStrLen(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwCompReadStrOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwCompAttrLen(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwCompAttrOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwCompClauseLen(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwCompClauseOffset(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwCompStrLen(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwCompStrOffset(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwCursorPos(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwDeltaStart(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwResultReadClauseLen(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwResultReadClauseOffset(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwResultReadStrLen(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwResultReadStrOffset(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwResultClauseLen(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwResultClauseOffset(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwResultStrLen(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwResultStrOffset(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwPrivateSize(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwPrivateOffset(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCompReadAttrLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCompReadAttrOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCompReadClauseLen(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwCompReadClauseOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwCompReadStrLen(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwCompReadStrOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwCompAttrLen(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwCompAttrOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwCompClauseLen(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwCompClauseOffset(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwCompStrLen(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwCompStrOffset(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwCursorPos(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwDeltaStart(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwResultReadClauseLen(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwResultReadClauseOffset(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwResultReadStrLen(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwResultReadStrOffset(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwResultClauseLen(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwResultClauseOffset(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwResultStrLen(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwResultStrOffset(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwPrivateSize(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwPrivateOffset(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.UI.Input.Ime.GUIDELINE (size: 32)
 */
export interface GUIDELINE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwStrLen: number;
  /** u32 */
  dwStrOffset: number;
  /** u32 */
  dwPrivateSize: number;
  /** u32 */
  dwPrivateOffset: number;
}

export const sizeofGUIDELINE = 32;

export function allocGUIDELINE(data?: Partial<GUIDELINE>): Uint8Array {
  const buf = new Uint8Array(sizeofGUIDELINE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwLevel !== undefined) view.setUint32(4, Number(data.dwLevel), true);
  // 0x08: u32
  if (data?.dwIndex !== undefined) view.setUint32(8, Number(data.dwIndex), true);
  // 0x0c: u32
  if (data?.dwStrLen !== undefined) view.setUint32(12, Number(data.dwStrLen), true);
  // 0x10: u32
  if (data?.dwStrOffset !== undefined) view.setUint32(16, Number(data.dwStrOffset), true);
  // 0x14: u32
  if (data?.dwPrivateSize !== undefined) view.setUint32(20, Number(data.dwPrivateSize), true);
  // 0x18: u32
  if (data?.dwPrivateOffset !== undefined) view.setUint32(24, Number(data.dwPrivateOffset), true);
  // 0x1c: pad4
  return buf;
}

export class GUIDELINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwStrLen(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwStrOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPrivateSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPrivateOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwStrLen(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwStrOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPrivateSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPrivateOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

export type WPARAM = number | bigint;

export type LPARAM = number | bigint;

/**
 * Windows.Win32.UI.Input.Ime.TRANSMSG (size: 24)
 */
export interface TRANSMSG {
  /** u32 */
  message: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSMSG = 24;

export function allocTRANSMSG(data?: Partial<TRANSMSG>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSMSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.message !== undefined) view.setUint32(0, Number(data.message), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wParam !== undefined) view.setBigUint64(8, data.wParam === null ? 0n : util.toBigInt(util.toPointer(data.wParam)), true);
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : util.toBigInt(util.toPointer(data.lParam)), true);
  return buf;
}

export class TRANSMSGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get message(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set message(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.TRANSMSGLIST (size: 16)
 */
export interface TRANSMSGLIST {
  /** u32 */
  uMsgCount: number;
  /** array */
  TransMsg: Deno.PointerValue | null;
}

export const sizeofTRANSMSGLIST = 16;

export function allocTRANSMSGLIST(data?: Partial<TRANSMSGLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSMSGLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uMsgCount !== undefined) view.setUint32(0, Number(data.uMsgCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TransMsg !== undefined) view.setBigUint64(8, data.TransMsg === null ? 0n : util.toBigInt(util.toPointer(data.TransMsg)), true);
  return buf;
}

export class TRANSMSGLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uMsgCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TransMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set uMsgCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TransMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.CANDIDATEINFO (size: 24)
 */
export interface CANDIDATEINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCount: number;
  /** array */
  dwOffset: Deno.PointerValue | null;
  /** u32 */
  dwPrivateSize: number;
  /** u32 */
  dwPrivateOffset: number;
}

export const sizeofCANDIDATEINFO = 24;

export function allocCANDIDATEINFO(data?: Partial<CANDIDATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCANDIDATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCount !== undefined) view.setUint32(4, Number(data.dwCount), true);
  // 0x08: pointer
  if (data?.dwOffset !== undefined) view.setBigUint64(8, data.dwOffset === null ? 0n : util.toBigInt(util.toPointer(data.dwOffset)), true);
  // 0x10: u32
  if (data?.dwPrivateSize !== undefined) view.setUint32(16, Number(data.dwPrivateSize), true);
  // 0x14: u32
  if (data?.dwPrivateOffset !== undefined) view.setUint32(20, Number(data.dwPrivateOffset), true);
  return buf;
}

export class CANDIDATEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dwOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwPrivateSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwPrivateOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dwOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwPrivateSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwPrivateOffset(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTA (size: 40)
 */
export interface LOGFONTA {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue | null;
}

export const sizeofLOGFONTA = 40;

export function allocLOGFONTA(data?: Partial<LOGFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : util.toBigInt(util.toPointer(data.lfFaceName)), true);
  return buf;
}

export class LOGFONTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lfHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lfWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lfEscapement(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lfOrientation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lfWeight(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u8
  get lfItalic(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get lfUnderline(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get lfStrikeOut(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get lfCharSet(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get lfOutPrecision(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get lfClipPrecision(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get lfQuality(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u8
  get lfPitchAndFamily(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lfFaceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lfHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lfWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lfEscapement(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lfOrientation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lfWeight(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u8
  set lfItalic(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set lfUnderline(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set lfStrikeOut(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set lfCharSet(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set lfOutPrecision(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set lfClipPrecision(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set lfQuality(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u8
  set lfPitchAndFamily(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lfFaceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTW (size: 40)
 */
export interface LOGFONTW {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue | null;
}

export const sizeofLOGFONTW = 40;

export function allocLOGFONTW(data?: Partial<LOGFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : util.toBigInt(util.toPointer(data.lfFaceName)), true);
  return buf;
}

export class LOGFONTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get lfHeight(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lfWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lfEscapement(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lfOrientation(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lfWeight(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u8
  get lfItalic(): number {
    return this.view.getUint8(20);
  }

  // 0x15: u8
  get lfUnderline(): number {
    return this.view.getUint8(21);
  }

  // 0x16: u8
  get lfStrikeOut(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get lfCharSet(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u8
  get lfOutPrecision(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get lfClipPrecision(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: u8
  get lfQuality(): number {
    return this.view.getUint8(26);
  }

  // 0x1b: u8
  get lfPitchAndFamily(): number {
    return this.view.getUint8(27);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lfFaceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set lfHeight(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lfWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lfEscapement(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lfOrientation(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lfWeight(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u8
  set lfItalic(value: number) {
    this.view.setUint8(20, value);
  }

  // 0x15: u8
  set lfUnderline(value: number) {
    this.view.setUint8(21, value);
  }

  // 0x16: u8
  set lfStrikeOut(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set lfCharSet(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u8
  set lfOutPrecision(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set lfClipPrecision(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: u8
  set lfQuality(value: number) {
    this.view.setUint8(26, value);
  }

  // 0x1b: u8
  set lfPitchAndFamily(value: number) {
    this.view.setUint8(27, value);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lfFaceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * _lfFont_e__Union (size: 16)
 */
export interface _lfFont_e__Union {
  /** Windows.Win32.Graphics.Gdi.LOGFONTA */
  A: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  W: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_lfFont_e__Union = 16;

export function alloc_lfFont_e__Union(data?: Partial<_lfFont_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_lfFont_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.A !== undefined) view.setBigUint64(0, data.A === null ? 0n : util.toBigInt(util.toPointer(data.A)), true);
  // 0x08: pointer
  if (data?.W !== undefined) view.setBigUint64(8, data.W === null ? 0n : util.toBigInt(util.toPointer(data.W)), true);
  return buf;
}

export class _lfFont_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get A(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get W(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set A(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set W(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HIMCC = number | bigint;

/**
 * Windows.Win32.UI.Input.Ime.INPUTCONTEXT (size: 128)
 */
export interface INPUTCONTEXT {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fOpen: boolean;
  /** Windows.Win32.Foundation.POINT */
  ptStatusWndPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptSoftKbdPos: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fdwConversion: number;
  /** u32 */
  fdwSentence: number;
  /** _lfFont_e__Union */
  lfFont: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.Ime.COMPOSITIONFORM */
  cfCompForm: Uint8Array | Deno.PointerValue | null;
  /** array */
  cfCandForm: Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hCompStr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hCandInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hGuideLine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hPrivate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumMsgBuf: number;
  /** Windows.Win32.Globalization.HIMCC */
  hMsgBuf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fdwInit: number;
  /** array */
  dwReserve: Deno.PointerValue | null;
}

export const sizeofINPUTCONTEXT = 128;

export function allocINPUTCONTEXT(data?: Partial<INPUTCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUTCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : util.toBigInt(util.toPointer(data.hWnd)), true);
  // 0x08: i32
  if (data?.fOpen !== undefined) view.setInt32(8, Number(data.fOpen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ptStatusWndPos !== undefined) view.setBigUint64(16, data.ptStatusWndPos === null ? 0n : util.toBigInt(util.toPointer(data.ptStatusWndPos)), true);
  // 0x18: pointer
  if (data?.ptSoftKbdPos !== undefined) view.setBigUint64(24, data.ptSoftKbdPos === null ? 0n : util.toBigInt(util.toPointer(data.ptSoftKbdPos)), true);
  // 0x20: u32
  if (data?.fdwConversion !== undefined) view.setUint32(32, Number(data.fdwConversion), true);
  // 0x24: u32
  if (data?.fdwSentence !== undefined) view.setUint32(36, Number(data.fdwSentence), true);
  // 0x28: pointer
  if (data?.lfFont !== undefined) view.setBigUint64(40, data.lfFont === null ? 0n : util.toBigInt(util.toPointer(data.lfFont)), true);
  // 0x30: pointer
  if (data?.cfCompForm !== undefined) view.setBigUint64(48, data.cfCompForm === null ? 0n : util.toBigInt(util.toPointer(data.cfCompForm)), true);
  // 0x38: pointer
  if (data?.cfCandForm !== undefined) view.setBigUint64(56, data.cfCandForm === null ? 0n : util.toBigInt(util.toPointer(data.cfCandForm)), true);
  // 0x40: pointer
  if (data?.hCompStr !== undefined) view.setBigUint64(64, data.hCompStr === null ? 0n : util.toBigInt(util.toPointer(data.hCompStr)), true);
  // 0x48: pointer
  if (data?.hCandInfo !== undefined) view.setBigUint64(72, data.hCandInfo === null ? 0n : util.toBigInt(util.toPointer(data.hCandInfo)), true);
  // 0x50: pointer
  if (data?.hGuideLine !== undefined) view.setBigUint64(80, data.hGuideLine === null ? 0n : util.toBigInt(util.toPointer(data.hGuideLine)), true);
  // 0x58: pointer
  if (data?.hPrivate !== undefined) view.setBigUint64(88, data.hPrivate === null ? 0n : util.toBigInt(util.toPointer(data.hPrivate)), true);
  // 0x60: u32
  if (data?.dwNumMsgBuf !== undefined) view.setUint32(96, Number(data.dwNumMsgBuf), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.hMsgBuf !== undefined) view.setBigUint64(104, data.hMsgBuf === null ? 0n : util.toBigInt(util.toPointer(data.hMsgBuf)), true);
  // 0x70: u32
  if (data?.fdwInit !== undefined) view.setUint32(112, Number(data.fdwInit), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.dwReserve !== undefined) view.setBigUint64(120, data.dwReserve === null ? 0n : util.toBigInt(util.toPointer(data.dwReserve)), true);
  return buf;
}

export class INPUTCONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hWnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get fOpen(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ptStatusWndPos(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ptSoftKbdPos(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get fdwConversion(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get fdwSentence(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lfFont(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get cfCompForm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get cfCandForm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get hCompStr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get hCandInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get hGuideLine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get hPrivate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get dwNumMsgBuf(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get hMsgBuf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get fdwInit(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get dwReserve(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hWnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set fOpen(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ptStatusWndPos(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ptSoftKbdPos(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set fdwConversion(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set fdwSentence(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lfFont(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set cfCompForm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set cfCandForm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set hCompStr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set hCandInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set hGuideLine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set hPrivate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set dwNumMsgBuf(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set hMsgBuf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set fdwInit(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set dwReserve(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEINFO (size: 32)
 */
export interface IMEINFO {
  /** u32 */
  dwPrivateDataSize: number;
  /** u32 */
  fdwProperty: number;
  /** u32 */
  fdwConversionCaps: number;
  /** u32 */
  fdwSentenceCaps: number;
  /** u32 */
  fdwUICaps: number;
  /** u32 */
  fdwSCSCaps: number;
  /** u32 */
  fdwSelectCaps: number;
}

export const sizeofIMEINFO = 32;

export function allocIMEINFO(data?: Partial<IMEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPrivateDataSize !== undefined) view.setUint32(0, Number(data.dwPrivateDataSize), true);
  // 0x04: u32
  if (data?.fdwProperty !== undefined) view.setUint32(4, Number(data.fdwProperty), true);
  // 0x08: u32
  if (data?.fdwConversionCaps !== undefined) view.setUint32(8, Number(data.fdwConversionCaps), true);
  // 0x0c: u32
  if (data?.fdwSentenceCaps !== undefined) view.setUint32(12, Number(data.fdwSentenceCaps), true);
  // 0x10: u32
  if (data?.fdwUICaps !== undefined) view.setUint32(16, Number(data.fdwUICaps), true);
  // 0x14: u32
  if (data?.fdwSCSCaps !== undefined) view.setUint32(20, Number(data.fdwSCSCaps), true);
  // 0x18: u32
  if (data?.fdwSelectCaps !== undefined) view.setUint32(24, Number(data.fdwSelectCaps), true);
  // 0x1c: pad4
  return buf;
}

export class IMEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwPrivateDataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fdwProperty(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fdwConversionCaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fdwSentenceCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fdwUICaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fdwSCSCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get fdwSelectCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwPrivateDataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fdwProperty(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fdwConversionCaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fdwSentenceCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fdwUICaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fdwSCSCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set fdwSelectCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Input.Ime.SOFTKBDDATA (size: 16)
 */
export interface SOFTKBDDATA {
  /** u32 */
  uCount: number;
  /** array */
  wCode: Deno.PointerValue | null;
}

export const sizeofSOFTKBDDATA = 16;

export function allocSOFTKBDDATA(data?: Partial<SOFTKBDDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSOFTKBDDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wCode !== undefined) view.setBigUint64(8, data.wCode === null ? 0n : util.toBigInt(util.toPointer(data.wCode)), true);
  return buf;
}

export class SOFTKBDDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set uCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.APPLETIDLIST (size: 16)
 */
export interface APPLETIDLIST {
  /** i32 */
  count: number;
  /** ptr */
  pIIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPPLETIDLIST = 16;

export function allocAPPLETIDLIST(data?: Partial<APPLETIDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLETIDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.count !== undefined) view.setInt32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIIDList !== undefined) view.setBigUint64(8, data.pIIDList === null ? 0n : util.toBigInt(util.toPointer(data.pIIDList)), true);
  return buf;
}

export class APPLETIDLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get count(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pIIDList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set count(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pIIDList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMESTRINGCANDIDATE (size: 16)
 */
export interface IMESTRINGCANDIDATE {
  /** u32 */
  uCount: number;
  /** array */
  lpwstr: Deno.PointerValue | null;
}

export const sizeofIMESTRINGCANDIDATE = 16;

export function allocIMESTRINGCANDIDATE(data?: Partial<IMESTRINGCANDIDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRINGCANDIDATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpwstr !== undefined) view.setBigUint64(8, data.lpwstr === null ? 0n : util.toBigInt(util.toPointer(data.lpwstr)), true);
  return buf;
}

export class IMESTRINGCANDIDATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpwstr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set uCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpwstr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEITEM (size: 16)
 */
export interface IMEITEM {
  /** i32 */
  cbSize: number;
  /** i32 */
  iType: number;
  /** ptr */
  lpItemData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEITEM = 16;

export function allocIMEITEM(data?: Partial<IMEITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEITEM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.iType !== undefined) view.setInt32(4, Number(data.iType), true);
  // 0x08: pointer
  if (data?.lpItemData !== undefined) view.setBigUint64(8, data.lpItemData === null ? 0n : util.toBigInt(util.toPointer(data.lpItemData)), true);
  return buf;
}

export class IMEITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cbSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get lpItemData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set cbSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set lpItemData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEITEMCANDIDATE (size: 16)
 */
export interface IMEITEMCANDIDATE {
  /** u32 */
  uCount: number;
  /** array */
  imeItem: Deno.PointerValue | null;
}

export const sizeofIMEITEMCANDIDATE = 16;

export function allocIMEITEMCANDIDATE(data?: Partial<IMEITEMCANDIDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEITEMCANDIDATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.imeItem !== undefined) view.setBigUint64(8, data.imeItem === null ? 0n : util.toBigInt(util.toPointer(data.imeItem)), true);
  return buf;
}

export class IMEITEMCANDIDATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get imeItem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set uCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set imeItem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMESTRINGINFO (size: 16)
 */
export interface IMESTRINGINFO {
  /** u32 */
  dwFarEastId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstr: string | null | Uint8Array | Uint16Array;
}

export const sizeofIMESTRINGINFO = 16;

export function allocIMESTRINGINFO(data?: Partial<IMESTRINGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRINGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFarEastId !== undefined) view.setUint32(0, Number(data.dwFarEastId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwstr !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwstr);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class IMESTRINGINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFarEastId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpwstr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFarEastId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpwstr(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEFAREASTINFO (size: 16)
 */
export interface IMEFAREASTINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwType: number;
  /** array */
  dwData: Deno.PointerValue | null;
}

export const sizeofIMEFAREASTINFO = 16;

export function allocIMEFAREASTINFO(data?: Partial<IMEFAREASTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEFAREASTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: pointer
  if (data?.dwData !== undefined) view.setBigUint64(8, data.dwData === null ? 0n : util.toBigInt(util.toPointer(data.dwData)), true);
  return buf;
}

export class IMEFAREASTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get dwData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set dwData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMESTRINGCANDIDATEINFO (size: 40)
 */
export interface IMESTRINGCANDIDATEINFO {
  /** u32 */
  dwFarEastId: number;
  /** ptr */
  lpFarEastInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fInfoMask: number;
  /** i32 */
  iSelIndex: number;
  /** u32 */
  uCount: number;
  /** array */
  lpwstr: Deno.PointerValue | null;
}

export const sizeofIMESTRINGCANDIDATEINFO = 40;

export function allocIMESTRINGCANDIDATEINFO(data?: Partial<IMESTRINGCANDIDATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRINGCANDIDATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFarEastId !== undefined) view.setUint32(0, Number(data.dwFarEastId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpFarEastInfo !== undefined) view.setBigUint64(8, data.lpFarEastInfo === null ? 0n : util.toBigInt(util.toPointer(data.lpFarEastInfo)), true);
  // 0x10: u32
  if (data?.fInfoMask !== undefined) view.setUint32(16, Number(data.fInfoMask), true);
  // 0x14: i32
  if (data?.iSelIndex !== undefined) view.setInt32(20, Number(data.iSelIndex), true);
  // 0x18: u32
  if (data?.uCount !== undefined) view.setUint32(24, Number(data.uCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpwstr !== undefined) view.setBigUint64(32, data.lpwstr === null ? 0n : util.toBigInt(util.toPointer(data.lpwstr)), true);
  return buf;
}

export class IMESTRINGCANDIDATEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFarEastId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpFarEastInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get fInfoMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get iSelIndex(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get uCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpwstr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFarEastId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpFarEastInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set fInfoMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set iSelIndex(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set uCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpwstr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMECOMPOSITIONSTRINGINFO (size: 24)
 */
export interface IMECOMPOSITIONSTRINGINFO {
  /** i32 */
  iCompStrLen: number;
  /** i32 */
  iCaretPos: number;
  /** i32 */
  iEditStart: number;
  /** i32 */
  iEditLen: number;
  /** i32 */
  iTargetStart: number;
  /** i32 */
  iTargetLen: number;
}

export const sizeofIMECOMPOSITIONSTRINGINFO = 24;

export function allocIMECOMPOSITIONSTRINGINFO(data?: Partial<IMECOMPOSITIONSTRINGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECOMPOSITIONSTRINGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iCompStrLen !== undefined) view.setInt32(0, Number(data.iCompStrLen), true);
  // 0x04: i32
  if (data?.iCaretPos !== undefined) view.setInt32(4, Number(data.iCaretPos), true);
  // 0x08: i32
  if (data?.iEditStart !== undefined) view.setInt32(8, Number(data.iEditStart), true);
  // 0x0c: i32
  if (data?.iEditLen !== undefined) view.setInt32(12, Number(data.iEditLen), true);
  // 0x10: i32
  if (data?.iTargetStart !== undefined) view.setInt32(16, Number(data.iTargetStart), true);
  // 0x14: i32
  if (data?.iTargetLen !== undefined) view.setInt32(20, Number(data.iTargetLen), true);
  return buf;
}

export class IMECOMPOSITIONSTRINGINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iCompStrLen(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iCaretPos(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get iEditStart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iEditLen(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get iTargetStart(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iTargetLen(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set iCompStrLen(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iCaretPos(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set iEditStart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iEditLen(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set iTargetStart(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iTargetLen(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMECHARINFO (size: 16)
 */
export interface IMECHARINFO {
  /** char */
  wch: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCharInfo: number;
}

export const sizeofIMECHARINFO = 16;

export function allocIMECHARINFO(data?: Partial<IMECHARINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECHARINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wch !== undefined) view.setBigUint64(0, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  // 0x08: u32
  if (data?.dwCharInfo !== undefined) view.setUint32(8, Number(data.dwCharInfo), true);
  // 0x0c: pad4
  return buf;
}

export class IMECHARINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwCharInfo(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwCharInfo(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HICON = number | bigint;

/**
 * Windows.Win32.UI.Input.Ime.IMEAPPLETCFG (size: 56)
 */
export interface IMEAPPLETCFG {
  /** u32 */
  dwConfig: number;
  /** array */
  wchTitle: Deno.PointerValue | null;
  /** array */
  wchTitleFontFace: Deno.PointerValue | null;
  /** u32 */
  dwCharSet: number;
  /** i32 */
  iCategory: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  langID: number;
  /** u16 */
  dummy: number;
  /** Windows.Win32.Foundation.LPARAM */
  lReserved1: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEAPPLETCFG = 56;

export function allocIMEAPPLETCFG(data?: Partial<IMEAPPLETCFG>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEAPPLETCFG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwConfig !== undefined) view.setUint32(0, Number(data.dwConfig), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wchTitle !== undefined) view.setBigUint64(8, data.wchTitle === null ? 0n : util.toBigInt(util.toPointer(data.wchTitle)), true);
  // 0x10: pointer
  if (data?.wchTitleFontFace !== undefined) view.setBigUint64(16, data.wchTitleFontFace === null ? 0n : util.toBigInt(util.toPointer(data.wchTitleFontFace)), true);
  // 0x18: u32
  if (data?.dwCharSet !== undefined) view.setUint32(24, Number(data.dwCharSet), true);
  // 0x1c: i32
  if (data?.iCategory !== undefined) view.setInt32(28, Number(data.iCategory), true);
  // 0x20: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(32, data.hIcon === null ? 0n : util.toBigInt(util.toPointer(data.hIcon)), true);
  // 0x28: u16
  if (data?.langID !== undefined) view.setUint16(40, Number(data.langID), true);
  // 0x2a: u16
  if (data?.dummy !== undefined) view.setUint16(42, Number(data.dummy), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lReserved1 !== undefined) view.setBigUint64(48, data.lReserved1 === null ? 0n : util.toBigInt(util.toPointer(data.lReserved1)), true);
  return buf;
}

export class IMEAPPLETCFGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwConfig(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wchTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wchTitleFontFace(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwCharSet(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get iCategory(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get hIcon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u16
  get langID(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get dummy(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lReserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwConfig(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wchTitle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wchTitleFontFace(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwCharSet(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set iCategory(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: u16
  set langID(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set dummy(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lReserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.IMEAPPLETUI (size: 56)
 */
export interface IMEAPPLETUI {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** u32 */
  dwStyle: number;
  /** i32 */
  width: number;
  /** i32 */
  height: number;
  /** i32 */
  minWidth: number;
  /** i32 */
  minHeight: number;
  /** i32 */
  maxWidth: number;
  /** i32 */
  maxHeight: number;
  /** Windows.Win32.Foundation.LPARAM */
  lReserved1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lReserved2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEAPPLETUI = 56;

export function allocIMEAPPLETUI(data?: Partial<IMEAPPLETUI>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEAPPLETUI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : util.toBigInt(util.toPointer(data.hwnd)), true);
  // 0x08: u32
  if (data?.dwStyle !== undefined) view.setUint32(8, Number(data.dwStyle), true);
  // 0x0c: i32
  if (data?.width !== undefined) view.setInt32(12, Number(data.width), true);
  // 0x10: i32
  if (data?.height !== undefined) view.setInt32(16, Number(data.height), true);
  // 0x14: i32
  if (data?.minWidth !== undefined) view.setInt32(20, Number(data.minWidth), true);
  // 0x18: i32
  if (data?.minHeight !== undefined) view.setInt32(24, Number(data.minHeight), true);
  // 0x1c: i32
  if (data?.maxWidth !== undefined) view.setInt32(28, Number(data.maxWidth), true);
  // 0x20: i32
  if (data?.maxHeight !== undefined) view.setInt32(32, Number(data.maxHeight), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lReserved1 !== undefined) view.setBigUint64(40, data.lReserved1 === null ? 0n : util.toBigInt(util.toPointer(data.lReserved1)), true);
  // 0x30: pointer
  if (data?.lReserved2 !== undefined) view.setBigUint64(48, data.lReserved2 === null ? 0n : util.toBigInt(util.toPointer(data.lReserved2)), true);
  return buf;
}

export class IMEAPPLETUIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwStyle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get width(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get height(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get minWidth(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get minHeight(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get maxWidth(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get maxHeight(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lReserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get lReserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwStyle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set width(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set height(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set minWidth(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set minHeight(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set maxWidth(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set maxHeight(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lReserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set lReserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.Ime.APPLYCANDEXPARAM (size: 32)
 */
export interface APPLYCANDEXPARAM {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrDisplay: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrReading: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwReserved: number;
}

export const sizeofAPPLYCANDEXPARAM = 32;

export function allocAPPLYCANDEXPARAM(data?: Partial<APPLYCANDEXPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLYCANDEXPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwstrDisplay !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwstrDisplay);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwstrReading !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwstrReading);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwReserved !== undefined) view.setUint32(24, Number(data.dwReserved), true);
  // 0x1c: pad4
  return buf;
}

export class APPLYCANDEXPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpwstrDisplay(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpwstrReading(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwReserved(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpwstrDisplay(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set lpwstrReading(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, util.toBigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwReserved(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_BIT (size: 8)
 */
export interface VK_TO_BIT {
  /** u8 */
  Vk: number;
  /** u8 */
  ModBits: number;
}

export const sizeofVK_TO_BIT = 8;

export function allocVK_TO_BIT(data?: Partial<VK_TO_BIT>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_BIT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vk !== undefined) view.setUint8(0, Number(data.Vk));
  // 0x01: u8
  if (data?.ModBits !== undefined) view.setUint8(1, Number(data.ModBits));
  // 0x02: pad6
  return buf;
}

export class VK_TO_BITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vk(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ModBits(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set Vk(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ModBits(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.MODIFIERS (size: 24)
 */
export interface MODIFIERS {
  /** ptr */
  pVkToBit: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  wMaxModBits: number;
  /** array */
  ModNumber: Deno.PointerValue | null;
}

export const sizeofMODIFIERS = 24;

export function allocMODIFIERS(data?: Partial<MODIFIERS>): Uint8Array {
  const buf = new Uint8Array(sizeofMODIFIERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pVkToBit !== undefined) view.setBigUint64(0, data.pVkToBit === null ? 0n : util.toBigInt(util.toPointer(data.pVkToBit)), true);
  // 0x08: u16
  if (data?.wMaxModBits !== undefined) view.setUint16(8, Number(data.wMaxModBits), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.ModNumber !== undefined) view.setBigUint64(16, data.ModNumber === null ? 0n : util.toBigInt(util.toPointer(data.ModNumber)), true);
  return buf;
}

export class MODIFIERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pVkToBit(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get wMaxModBits(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get ModNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pVkToBit(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set wMaxModBits(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set ModNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VSC_VK (size: 8)
 */
export interface VSC_VK {
  /** u8 */
  Vsc: number;
  /** u16 */
  Vk: number;
}

export const sizeofVSC_VK = 8;

export function allocVSC_VK(data?: Partial<VSC_VK>): Uint8Array {
  const buf = new Uint8Array(sizeofVSC_VK);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vsc !== undefined) view.setUint8(0, Number(data.Vsc));
  // 0x01: u16
  if (data?.Vk !== undefined) view.setUint16(1, Number(data.Vk), true);
  // 0x03: pad5
  return buf;
}

export class VSC_VKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vsc(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get Vk(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x00: u8
  set Vsc(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set Vk(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_VSC (size: 8)
 */
export interface VK_VSC {
  /** u8 */
  Vk: number;
  /** u8 */
  Vsc: number;
}

export const sizeofVK_VSC = 8;

export function allocVK_VSC(data?: Partial<VK_VSC>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_VSC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vk !== undefined) view.setUint8(0, Number(data.Vk));
  // 0x01: u8
  if (data?.Vsc !== undefined) view.setUint8(1, Number(data.Vsc));
  // 0x02: pad6
  return buf;
}

export class VK_VSCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vk(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Vsc(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set Vk(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Vsc(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS1 (size: 16)
 */
export interface VK_TO_WCHARS1 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS1 = 16;

export function allocVK_TO_WCHARS1(data?: Partial<VK_TO_WCHARS1>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS1);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS2 (size: 16)
 */
export interface VK_TO_WCHARS2 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS2 = 16;

export function allocVK_TO_WCHARS2(data?: Partial<VK_TO_WCHARS2>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS3 (size: 16)
 */
export interface VK_TO_WCHARS3 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS3 = 16;

export function allocVK_TO_WCHARS3(data?: Partial<VK_TO_WCHARS3>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS3);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS4 (size: 16)
 */
export interface VK_TO_WCHARS4 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS4 = 16;

export function allocVK_TO_WCHARS4(data?: Partial<VK_TO_WCHARS4>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS4);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS5 (size: 16)
 */
export interface VK_TO_WCHARS5 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS5 = 16;

export function allocVK_TO_WCHARS5(data?: Partial<VK_TO_WCHARS5>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS5);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS6 (size: 16)
 */
export interface VK_TO_WCHARS6 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS6 = 16;

export function allocVK_TO_WCHARS6(data?: Partial<VK_TO_WCHARS6>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS6);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS7 (size: 16)
 */
export interface VK_TO_WCHARS7 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS7 = 16;

export function allocVK_TO_WCHARS7(data?: Partial<VK_TO_WCHARS7>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS7);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS7View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS8 (size: 16)
 */
export interface VK_TO_WCHARS8 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS8 = 16;

export function allocVK_TO_WCHARS8(data?: Partial<VK_TO_WCHARS8>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS8);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS8View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS9 (size: 16)
 */
export interface VK_TO_WCHARS9 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS9 = 16;

export function allocVK_TO_WCHARS9(data?: Partial<VK_TO_WCHARS9>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS9);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS10 (size: 16)
 */
export interface VK_TO_WCHARS10 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofVK_TO_WCHARS10 = 16;

export function allocVK_TO_WCHARS10(data?: Partial<VK_TO_WCHARS10>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS10);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class VK_TO_WCHARS10View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHAR_TABLE (size: 16)
 */
export interface VK_TO_WCHAR_TABLE {
  /** ptr */
  pVkToWchars: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  nModifications: number;
  /** u8 */
  cbSize: number;
}

export const sizeofVK_TO_WCHAR_TABLE = 16;

export function allocVK_TO_WCHAR_TABLE(data?: Partial<VK_TO_WCHAR_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHAR_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pVkToWchars !== undefined) view.setBigUint64(0, data.pVkToWchars === null ? 0n : util.toBigInt(util.toPointer(data.pVkToWchars)), true);
  // 0x08: u8
  if (data?.nModifications !== undefined) view.setUint8(8, Number(data.nModifications));
  // 0x09: u8
  if (data?.cbSize !== undefined) view.setUint8(9, Number(data.cbSize));
  // 0x0a: pad6
  return buf;
}

export class VK_TO_WCHAR_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pVkToWchars(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get nModifications(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get cbSize(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set pVkToWchars(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set nModifications(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set cbSize(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.DEADKEY (size: 24)
 */
export interface DEADKEY {
  /** u32 */
  dwBoth: number;
  /** char */
  wchComposed: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  uFlags: number;
}

export const sizeofDEADKEY = 24;

export function allocDEADKEY(data?: Partial<DEADKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEADKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBoth !== undefined) view.setUint32(0, Number(data.dwBoth), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wchComposed !== undefined) view.setBigUint64(8, data.wchComposed === null ? 0n : util.toBigInt(util.toPointer(data.wchComposed)), true);
  // 0x10: u16
  if (data?.uFlags !== undefined) view.setUint16(16, Number(data.uFlags), true);
  // 0x12: pad6
  return buf;
}

export class DEADKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBoth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wchComposed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get uFlags(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: u32
  set dwBoth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wchComposed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set uFlags(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE1 (size: 16)
 */
export interface LIGATURE1 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofLIGATURE1 = 16;

export function allocLIGATURE1(data?: Partial<LIGATURE1>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE1);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class LIGATURE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE2 (size: 16)
 */
export interface LIGATURE2 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofLIGATURE2 = 16;

export function allocLIGATURE2(data?: Partial<LIGATURE2>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class LIGATURE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE3 (size: 16)
 */
export interface LIGATURE3 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofLIGATURE3 = 16;

export function allocLIGATURE3(data?: Partial<LIGATURE3>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE3);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class LIGATURE3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE4 (size: 16)
 */
export interface LIGATURE4 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofLIGATURE4 = 16;

export function allocLIGATURE4(data?: Partial<LIGATURE4>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE4);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class LIGATURE4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE5 (size: 16)
 */
export interface LIGATURE5 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue | null;
}

export const sizeofLIGATURE5 = 16;

export function allocLIGATURE5(data?: Partial<LIGATURE5>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE5);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : util.toBigInt(util.toPointer(data.wch)), true);
  return buf;
}

export class LIGATURE5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VSC_LPWSTR (size: 16)
 */
export interface VSC_LPWSTR {
  /** u8 */
  vsc: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwsz: string | null | Uint8Array | Uint16Array;
}

export const sizeofVSC_LPWSTR = 16;

export function allocVSC_LPWSTR(data?: Partial<VSC_LPWSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofVSC_LPWSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.vsc !== undefined) view.setUint8(0, Number(data.vsc));
  // 0x01: pad7
  // 0x08: buffer
  if (data?.pwsz !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwsz);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class VSC_LPWSTRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get vsc(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: buffer
  get pwsz(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set vsc(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: buffer
  set pwsz(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, util.toBigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLES (size: 104)
 */
export interface KBDTABLES {
  /** ptr */
  pCharModifiers: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pVkToWcharTable: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDeadKey: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKeyNames: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKeyNamesExt: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKeyNamesDead: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pusVSCtoVK: Deno.PointerValue | Uint8Array | null;
  /** u8 */
  bMaxVSCtoVK: number;
  /** ptr */
  pVSCtoVK_E0: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pVSCtoVK_E1: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fLocaleFlags: number;
  /** u8 */
  nLgMax: number;
  /** u8 */
  cbLgEntry: number;
  /** ptr */
  pLigature: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
}

export const sizeofKBDTABLES = 104;

export function allocKBDTABLES(data?: Partial<KBDTABLES>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDTABLES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCharModifiers !== undefined) view.setBigUint64(0, data.pCharModifiers === null ? 0n : util.toBigInt(util.toPointer(data.pCharModifiers)), true);
  // 0x08: pointer
  if (data?.pVkToWcharTable !== undefined) view.setBigUint64(8, data.pVkToWcharTable === null ? 0n : util.toBigInt(util.toPointer(data.pVkToWcharTable)), true);
  // 0x10: pointer
  if (data?.pDeadKey !== undefined) view.setBigUint64(16, data.pDeadKey === null ? 0n : util.toBigInt(util.toPointer(data.pDeadKey)), true);
  // 0x18: pointer
  if (data?.pKeyNames !== undefined) view.setBigUint64(24, data.pKeyNames === null ? 0n : util.toBigInt(util.toPointer(data.pKeyNames)), true);
  // 0x20: pointer
  if (data?.pKeyNamesExt !== undefined) view.setBigUint64(32, data.pKeyNamesExt === null ? 0n : util.toBigInt(util.toPointer(data.pKeyNamesExt)), true);
  // 0x28: pointer
  if (data?.pKeyNamesDead !== undefined) view.setBigUint64(40, data.pKeyNamesDead === null ? 0n : util.toBigInt(util.toPointer(data.pKeyNamesDead)), true);
  // 0x30: pointer
  if (data?.pusVSCtoVK !== undefined) view.setBigUint64(48, data.pusVSCtoVK === null ? 0n : util.toBigInt(util.toPointer(data.pusVSCtoVK)), true);
  // 0x38: u8
  if (data?.bMaxVSCtoVK !== undefined) view.setUint8(56, Number(data.bMaxVSCtoVK));
  // 0x39: pad7
  // 0x40: pointer
  if (data?.pVSCtoVK_E0 !== undefined) view.setBigUint64(64, data.pVSCtoVK_E0 === null ? 0n : util.toBigInt(util.toPointer(data.pVSCtoVK_E0)), true);
  // 0x48: pointer
  if (data?.pVSCtoVK_E1 !== undefined) view.setBigUint64(72, data.pVSCtoVK_E1 === null ? 0n : util.toBigInt(util.toPointer(data.pVSCtoVK_E1)), true);
  // 0x50: u32
  if (data?.fLocaleFlags !== undefined) view.setUint32(80, Number(data.fLocaleFlags), true);
  // 0x54: u8
  if (data?.nLgMax !== undefined) view.setUint8(84, Number(data.nLgMax));
  // 0x55: u8
  if (data?.cbLgEntry !== undefined) view.setUint8(85, Number(data.cbLgEntry));
  // 0x56: pad2
  // 0x58: pointer
  if (data?.pLigature !== undefined) view.setBigUint64(88, data.pLigature === null ? 0n : util.toBigInt(util.toPointer(data.pLigature)), true);
  // 0x60: u32
  if (data?.dwType !== undefined) view.setUint32(96, Number(data.dwType), true);
  // 0x64: u32
  if (data?.dwSubType !== undefined) view.setUint32(100, Number(data.dwSubType), true);
  return buf;
}

export class KBDTABLESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCharModifiers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pVkToWcharTable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pDeadKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pKeyNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pKeyNamesExt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pKeyNamesDead(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pusVSCtoVK(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u8
  get bMaxVSCtoVK(): number {
    return this.view.getUint8(56);
  }

  // 0x39: pad7

  // 0x40: pointer
  get pVSCtoVK_E0(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pVSCtoVK_E1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get fLocaleFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u8
  get nLgMax(): number {
    return this.view.getUint8(84);
  }

  // 0x55: u8
  get cbLgEntry(): number {
    return this.view.getUint8(85);
  }

  // 0x56: pad2

  // 0x58: pointer
  get pLigature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get dwType(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwSubType(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: pointer
  set pCharModifiers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pVkToWcharTable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pDeadKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pKeyNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pKeyNamesExt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pKeyNamesDead(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pusVSCtoVK(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u8
  set bMaxVSCtoVK(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: pad7

  // 0x40: pointer
  set pVSCtoVK_E0(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pVSCtoVK_E1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set fLocaleFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u8
  set nLgMax(value: number) {
    this.view.setUint8(84, value);
  }

  // 0x55: u8
  set cbLgEntry(value: number) {
    this.view.setUint8(85, value);
  }

  // 0x56: pad2

  // 0x58: pointer
  set pLigature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set dwType(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwSubType(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_FPARAM (size: 8)
 */
export interface VK_FPARAM {
  /** u8 */
  NLSFEProcIndex: number;
  /** u32 */
  NLSFEProcParam: number;
}

export const sizeofVK_FPARAM = 8;

export function allocVK_FPARAM(data?: Partial<VK_FPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_FPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NLSFEProcIndex !== undefined) view.setUint8(0, Number(data.NLSFEProcIndex));
  // 0x01: u32
  if (data?.NLSFEProcParam !== undefined) view.setUint32(1, Number(data.NLSFEProcParam), true);
  // 0x05: pad3
  return buf;
}

export class VK_FPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NLSFEProcIndex(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get NLSFEProcParam(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: pad3

  // 0x00: u8
  set NLSFEProcIndex(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set NLSFEProcParam(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_F (size: 24)
 */
export interface VK_F {
  /** u8 */
  Vk: number;
  /** u8 */
  NLSFEProcType: number;
  /** u8 */
  NLSFEProcCurrent: number;
  /** u8 */
  NLSFEProcSwitch: number;
  /** array */
  NLSFEProc: Deno.PointerValue | null;
  /** array */
  NLSFEProcAlt: Deno.PointerValue | null;
}

export const sizeofVK_F = 24;

export function allocVK_F(data?: Partial<VK_F>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_F);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vk !== undefined) view.setUint8(0, Number(data.Vk));
  // 0x01: u8
  if (data?.NLSFEProcType !== undefined) view.setUint8(1, Number(data.NLSFEProcType));
  // 0x02: u8
  if (data?.NLSFEProcCurrent !== undefined) view.setUint8(2, Number(data.NLSFEProcCurrent));
  // 0x03: u8
  if (data?.NLSFEProcSwitch !== undefined) view.setUint8(3, Number(data.NLSFEProcSwitch));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.NLSFEProc !== undefined) view.setBigUint64(8, data.NLSFEProc === null ? 0n : util.toBigInt(util.toPointer(data.NLSFEProc)), true);
  // 0x10: pointer
  if (data?.NLSFEProcAlt !== undefined) view.setBigUint64(16, data.NLSFEProcAlt === null ? 0n : util.toBigInt(util.toPointer(data.NLSFEProcAlt)), true);
  return buf;
}

export class VK_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vk(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get NLSFEProcType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get NLSFEProcCurrent(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get NLSFEProcSwitch(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get NLSFEProc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get NLSFEProcAlt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Vk(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set NLSFEProcType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set NLSFEProcCurrent(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set NLSFEProcSwitch(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set NLSFEProc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set NLSFEProcAlt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDNLSTABLES (size: 32)
 */
export interface KBDNLSTABLES {
  /** u16 */
  OEMIdentifier: number;
  /** u16 */
  LayoutInformation: number;
  /** u32 */
  NumOfVkToF: number;
  /** ptr */
  pVkToF: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  NumOfMouseVKey: number;
  /** ptr */
  pusMouseVKey: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKBDNLSTABLES = 32;

export function allocKBDNLSTABLES(data?: Partial<KBDNLSTABLES>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDNLSTABLES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.OEMIdentifier !== undefined) view.setUint16(0, Number(data.OEMIdentifier), true);
  // 0x02: u16
  if (data?.LayoutInformation !== undefined) view.setUint16(2, Number(data.LayoutInformation), true);
  // 0x04: u32
  if (data?.NumOfVkToF !== undefined) view.setUint32(4, Number(data.NumOfVkToF), true);
  // 0x08: pointer
  if (data?.pVkToF !== undefined) view.setBigUint64(8, data.pVkToF === null ? 0n : util.toBigInt(util.toPointer(data.pVkToF)), true);
  // 0x10: i32
  if (data?.NumOfMouseVKey !== undefined) view.setInt32(16, Number(data.NumOfMouseVKey), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pusMouseVKey !== undefined) view.setBigUint64(24, data.pusMouseVKey === null ? 0n : util.toBigInt(util.toPointer(data.pusMouseVKey)), true);
  return buf;
}

export class KBDNLSTABLESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get OEMIdentifier(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LayoutInformation(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get NumOfVkToF(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pVkToF(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get NumOfMouseVKey(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pusMouseVKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set OEMIdentifier(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LayoutInformation(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set NumOfVkToF(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pVkToF(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set NumOfMouseVKey(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pusMouseVKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_DESC (size: 16)
 */
export interface KBDTABLE_DESC {
  /** array */
  wszDllName: Deno.PointerValue | null;
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
}

export const sizeofKBDTABLE_DESC = 16;

export function allocKBDTABLE_DESC(data?: Partial<KBDTABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDTABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszDllName !== undefined) view.setBigUint64(0, data.wszDllName === null ? 0n : util.toBigInt(util.toPointer(data.wszDllName)), true);
  // 0x08: u32
  if (data?.dwType !== undefined) view.setUint32(8, Number(data.dwType), true);
  // 0x0c: u32
  if (data?.dwSubType !== undefined) view.setUint32(12, Number(data.dwSubType), true);
  return buf;
}

export class KBDTABLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wszDllName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSubType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set wszDllName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSubType(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_MULTI (size: 16)
 */
export interface KBDTABLE_MULTI {
  /** u32 */
  nTables: number;
  /** array */
  aKbdTables: Deno.PointerValue | null;
}

export const sizeofKBDTABLE_MULTI = 16;

export function allocKBDTABLE_MULTI(data?: Partial<KBDTABLE_MULTI>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDTABLE_MULTI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nTables !== undefined) view.setUint32(0, Number(data.nTables), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aKbdTables !== undefined) view.setBigUint64(8, data.aKbdTables === null ? 0n : util.toBigInt(util.toPointer(data.aKbdTables)), true);
  return buf;
}

export class KBDTABLE_MULTIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nTables(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aKbdTables(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nTables(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aKbdTables(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBD_TYPE_INFO (size: 16)
 */
export interface KBD_TYPE_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
}

export const sizeofKBD_TYPE_INFO = 16;

export function allocKBD_TYPE_INFO(data?: Partial<KBD_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKBD_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.dwSubType !== undefined) view.setUint32(8, Number(data.dwSubType), true);
  // 0x0c: pad4
  return buf;
}

export class KBD_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSubType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSubType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Input.XboxController.XINPUT_GAMEPAD (size: 16)
 */
export interface XINPUT_GAMEPAD {
  /** Windows.Win32.UI.Input.XboxController.XINPUT_GAMEPAD_BUTTON_FLAGS */
  wButtons: XINPUT_GAMEPAD_BUTTON_FLAGS;
  /** u8 */
  bLeftTrigger: number;
  /** u8 */
  bRightTrigger: number;
  /** i16 */
  sThumbLX: number;
  /** i16 */
  sThumbLY: number;
  /** i16 */
  sThumbRX: number;
  /** i16 */
  sThumbRY: number;
}

export const sizeofXINPUT_GAMEPAD = 16;

export function allocXINPUT_GAMEPAD(data?: Partial<XINPUT_GAMEPAD>): Uint8Array {
  const buf = new Uint8Array(sizeofXINPUT_GAMEPAD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wButtons !== undefined) view.setUint16(0, Number(data.wButtons), true);
  // 0x02: u8
  if (data?.bLeftTrigger !== undefined) view.setUint8(2, Number(data.bLeftTrigger));
  // 0x03: u8
  if (data?.bRightTrigger !== undefined) view.setUint8(3, Number(data.bRightTrigger));
  // 0x04: i16
  if (data?.sThumbLX !== undefined) view.setInt16(4, Number(data.sThumbLX), true);
  // 0x06: i16
  if (data?.sThumbLY !== undefined) view.setInt16(6, Number(data.sThumbLY), true);
  // 0x08: i16
  if (data?.sThumbRX !== undefined) view.setInt16(8, Number(data.sThumbRX), true);
  // 0x0a: i16
  if (data?.sThumbRY !== undefined) view.setInt16(10, Number(data.sThumbRY), true);
  // 0x0c: pad4
  return buf;
}

export class XINPUT_GAMEPADView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wButtons(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get bLeftTrigger(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bRightTrigger(): number {
    return this.view.getUint8(3);
  }

  // 0x04: i16
  get sThumbLX(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get sThumbLY(): number {
    return this.view.getInt16(6, true);
  }

  // 0x08: i16
  get sThumbRX(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: i16
  get sThumbRY(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: pad4

  // 0x00: u16
  set wButtons(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set bLeftTrigger(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bRightTrigger(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: i16
  set sThumbLX(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set sThumbLY(value: number) {
    this.view.setInt16(6, value, true);
  }

  // 0x08: i16
  set sThumbRX(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: i16
  set sThumbRY(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Input.XboxController.XINPUT_STATE (size: 16)
 */
export interface XINPUT_STATE {
  /** u32 */
  dwPacketNumber: number;
  /** Windows.Win32.UI.Input.XboxController.XINPUT_GAMEPAD */
  Gamepad: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXINPUT_STATE = 16;

export function allocXINPUT_STATE(data?: Partial<XINPUT_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofXINPUT_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPacketNumber !== undefined) view.setUint32(0, Number(data.dwPacketNumber), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Gamepad !== undefined) view.setBigUint64(8, data.Gamepad === null ? 0n : util.toBigInt(util.toPointer(data.Gamepad)), true);
  return buf;
}

export class XINPUT_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwPacketNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Gamepad(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwPacketNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Gamepad(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.XboxController.XINPUT_VIBRATION (size: 8)
 */
export interface XINPUT_VIBRATION {
  /** u16 */
  wLeftMotorSpeed: number;
  /** u16 */
  wRightMotorSpeed: number;
}

export const sizeofXINPUT_VIBRATION = 8;

export function allocXINPUT_VIBRATION(data?: Partial<XINPUT_VIBRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofXINPUT_VIBRATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wLeftMotorSpeed !== undefined) view.setUint16(0, Number(data.wLeftMotorSpeed), true);
  // 0x02: u16
  if (data?.wRightMotorSpeed !== undefined) view.setUint16(2, Number(data.wRightMotorSpeed), true);
  // 0x04: pad4
  return buf;
}

export class XINPUT_VIBRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wLeftMotorSpeed(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wRightMotorSpeed(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set wLeftMotorSpeed(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wRightMotorSpeed(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.UI.Input.XboxController.XINPUT_CAPABILITIES (size: 32)
 */
export interface XINPUT_CAPABILITIES {
  /** Windows.Win32.UI.Input.XboxController.XINPUT_DEVTYPE */
  Type: XINPUT_DEVTYPE;
  /** Windows.Win32.UI.Input.XboxController.XINPUT_DEVSUBTYPE */
  SubType: XINPUT_DEVSUBTYPE;
  /** Windows.Win32.UI.Input.XboxController.XINPUT_CAPABILITIES_FLAGS */
  Flags: XINPUT_CAPABILITIES_FLAGS;
  /** Windows.Win32.UI.Input.XboxController.XINPUT_GAMEPAD */
  Gamepad: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.XboxController.XINPUT_VIBRATION */
  Vibration: Uint8Array | Deno.PointerValue | null;
}

export const sizeofXINPUT_CAPABILITIES = 32;

export function allocXINPUT_CAPABILITIES(data?: Partial<XINPUT_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofXINPUT_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.SubType !== undefined) view.setUint32(4, Number(data.SubType), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Gamepad !== undefined) view.setBigUint64(16, data.Gamepad === null ? 0n : util.toBigInt(util.toPointer(data.Gamepad)), true);
  // 0x18: pointer
  if (data?.Vibration !== undefined) view.setBigUint64(24, data.Vibration === null ? 0n : util.toBigInt(util.toPointer(data.Vibration)), true);
  return buf;
}

export class XINPUT_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Flags(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Gamepad(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Vibration(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Flags(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Gamepad(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Vibration(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.XboxController.XINPUT_BATTERY_INFORMATION (size: 8)
 */
export interface XINPUT_BATTERY_INFORMATION {
  /** Windows.Win32.UI.Input.XboxController.BATTERY_TYPE */
  BatteryType: BATTERY_TYPE;
  /** Windows.Win32.UI.Input.XboxController.BATTERY_LEVEL */
  BatteryLevel: BATTERY_LEVEL;
}

export const sizeofXINPUT_BATTERY_INFORMATION = 8;

export function allocXINPUT_BATTERY_INFORMATION(data?: Partial<XINPUT_BATTERY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofXINPUT_BATTERY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BatteryType !== undefined) view.setUint32(0, Number(data.BatteryType), true);
  // 0x04: u32
  if (data?.BatteryLevel !== undefined) view.setUint32(4, Number(data.BatteryLevel), true);
  return buf;
}

export class XINPUT_BATTERY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BatteryType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BatteryLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set BatteryType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BatteryLevel(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.XboxController.XINPUT_KEYSTROKE (size: 24)
 */
export interface XINPUT_KEYSTROKE {
  /** Windows.Win32.UI.Input.XboxController.XINPUT_VIRTUAL_KEY */
  VirtualKey: XINPUT_VIRTUAL_KEY;
  /** char */
  Unicode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.XboxController.XINPUT_KEYSTROKE_FLAGS */
  Flags: XINPUT_KEYSTROKE_FLAGS;
  /** u8 */
  UserIndex: number;
  /** u8 */
  HidCode: number;
}

export const sizeofXINPUT_KEYSTROKE = 24;

export function allocXINPUT_KEYSTROKE(data?: Partial<XINPUT_KEYSTROKE>): Uint8Array {
  const buf = new Uint8Array(sizeofXINPUT_KEYSTROKE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.VirtualKey !== undefined) view.setUint16(0, Number(data.VirtualKey), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Unicode !== undefined) view.setBigUint64(8, data.Unicode === null ? 0n : util.toBigInt(util.toPointer(data.Unicode)), true);
  // 0x10: u16
  if (data?.Flags !== undefined) view.setUint16(16, Number(data.Flags), true);
  // 0x12: u8
  if (data?.UserIndex !== undefined) view.setUint8(18, Number(data.UserIndex));
  // 0x13: u8
  if (data?.HidCode !== undefined) view.setUint8(19, Number(data.HidCode));
  // 0x14: pad4
  return buf;
}

export class XINPUT_KEYSTROKEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get VirtualKey(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Unicode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get Flags(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u8
  get UserIndex(): number {
    return this.view.getUint8(18);
  }

  // 0x13: u8
  get HidCode(): number {
    return this.view.getUint8(19);
  }

  // 0x14: pad4

  // 0x00: u16
  set VirtualKey(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Unicode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set Flags(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u8
  set UserIndex(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: u8
  set HidCode(value: number) {
    this.view.setUint8(19, value);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT (size: 24)
 */
export interface MOUSEMOVEPOINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** u32 */
  time: number;
  /** usize */
  dwExtraInfo: number | bigint;
}

export const sizeofMOUSEMOVEPOINT = 24;

export function allocMOUSEMOVEPOINT(data?: Partial<MOUSEMOVEPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSEMOVEPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: u32
  if (data?.time !== undefined) view.setUint32(8, Number(data.time), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(16, util.toBigInt(data.dwExtraInfo), true);
  return buf;
}

export class MOUSEMOVEPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get time(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get dwExtraInfo(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set time(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set dwExtraInfo(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT (size: 24)
 */
export interface TRACKMOUSEEVENT {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT_FLAGS */
  dwFlags: TRACKMOUSEEVENT_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hwndTrack: Deno.PointerValue | null;
  /** u32 */
  dwHoverTime: number;
}

export const sizeofTRACKMOUSEEVENT = 24;

export function allocTRACKMOUSEEVENT(data?: Partial<TRACKMOUSEEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACKMOUSEEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndTrack !== undefined) view.setBigUint64(8, data.hwndTrack === null ? 0n : util.toBigInt(util.toPointer(data.hwndTrack)), true);
  // 0x10: u32
  if (data?.dwHoverTime !== undefined) view.setUint32(16, Number(data.dwHoverTime), true);
  // 0x14: pad4
  return buf;
}

export class TRACKMOUSEEVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndTrack(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwHoverTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndTrack(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwHoverTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT (size: 32)
 */
export interface MOUSEINPUT {
  /** i32 */
  dx: number;
  /** i32 */
  dy: number;
  /** i32 */
  mouseData: number;
  /** Windows.Win32.UI.Input.KeyboardAndMouse.MOUSE_EVENT_FLAGS */
  dwFlags: MOUSE_EVENT_FLAGS;
  /** u32 */
  time: number;
  /** usize */
  dwExtraInfo: number | bigint;
}

export const sizeofMOUSEINPUT = 32;

export function allocMOUSEINPUT(data?: Partial<MOUSEINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSEINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dx !== undefined) view.setInt32(0, Number(data.dx), true);
  // 0x04: i32
  if (data?.dy !== undefined) view.setInt32(4, Number(data.dy), true);
  // 0x08: i32
  if (data?.mouseData !== undefined) view.setInt32(8, Number(data.mouseData), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.time !== undefined) view.setUint32(16, Number(data.time), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(24, util.toBigInt(data.dwExtraInfo), true);
  return buf;
}

export class MOUSEINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get dy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get mouseData(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get time(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get dwExtraInfo(): number | bigint {
    return this.view.getBigUint64(24, true);
  }

  // 0x00: i32
  set dx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set dy(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set mouseData(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set time(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set dwExtraInfo(value: number | bigint) {
    this.view.setBigUint64(24, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT (size: 24)
 */
export interface KEYBDINPUT {
  /** Windows.Win32.UI.Input.KeyboardAndMouse.VIRTUAL_KEY */
  wVk: VIRTUAL_KEY;
  /** u16 */
  wScan: number;
  /** Windows.Win32.UI.Input.KeyboardAndMouse.KEYBD_EVENT_FLAGS */
  dwFlags: KEYBD_EVENT_FLAGS;
  /** u32 */
  time: number;
  /** usize */
  dwExtraInfo: number | bigint;
}

export const sizeofKEYBDINPUT = 24;

export function allocKEYBDINPUT(data?: Partial<KEYBDINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBDINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wVk !== undefined) view.setUint16(0, Number(data.wVk), true);
  // 0x02: u16
  if (data?.wScan !== undefined) view.setUint16(2, Number(data.wScan), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.time !== undefined) view.setUint32(8, Number(data.time), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(16, util.toBigInt(data.dwExtraInfo), true);
  return buf;
}

export class KEYBDINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wVk(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wScan(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get time(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get dwExtraInfo(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x00: u16
  set wVk(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wScan(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set time(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set dwExtraInfo(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT (size: 8)
 */
export interface HARDWAREINPUT {
  /** u32 */
  uMsg: number;
  /** u16 */
  wParamL: number;
  /** u16 */
  wParamH: number;
}

export const sizeofHARDWAREINPUT = 8;

export function allocHARDWAREINPUT(data?: Partial<HARDWAREINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofHARDWAREINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uMsg !== undefined) view.setUint32(0, Number(data.uMsg), true);
  // 0x04: u16
  if (data?.wParamL !== undefined) view.setUint16(4, Number(data.wParamL), true);
  // 0x06: u16
  if (data?.wParamH !== undefined) view.setUint16(6, Number(data.wParamH), true);
  return buf;
}

export class HARDWAREINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uMsg(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wParamL(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wParamH(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set uMsg(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wParamL(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wParamH(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.INPUT (size: 16)
 */
export interface INPUT {
  /** Windows.Win32.UI.Input.KeyboardAndMouse.INPUT_TYPE */
  type: INPUT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINPUT = 16;

export function allocINPUT(data?: Partial<INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.type !== undefined) view.setUint32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LASTINPUTINFO (size: 8)
 */
export interface LASTINPUTINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwTime: number;
}

export const sizeofLASTINPUTINFO = 8;

export function allocLASTINPUTINFO(data?: Partial<LASTINPUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLASTINPUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwTime !== undefined) view.setUint32(4, Number(data.dwTime), true);
  return buf;
}

export class LASTINPUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type HANDLE = number | bigint;

/**
 * Windows.Win32.UI.Input.Touch.TOUCHINPUT (size: 48)
 */
export interface TOUCHINPUT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** Windows.Win32.Foundation.HANDLE */
  hSource: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwID: number;
  /** Windows.Win32.UI.Input.Touch.TOUCHEVENTF_FLAGS */
  dwFlags: TOUCHEVENTF_FLAGS;
  /** Windows.Win32.UI.Input.Touch.TOUCHINPUTMASKF_MASK */
  dwMask: TOUCHINPUTMASKF_MASK;
  /** u32 */
  dwTime: number;
  /** usize */
  dwExtraInfo: number | bigint;
  /** u32 */
  cxContact: number;
  /** u32 */
  cyContact: number;
}

export const sizeofTOUCHINPUT = 48;

export function allocTOUCHINPUT(data?: Partial<TOUCHINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofTOUCHINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: pointer
  if (data?.hSource !== undefined) view.setBigUint64(8, data.hSource === null ? 0n : util.toBigInt(util.toPointer(data.hSource)), true);
  // 0x10: u32
  if (data?.dwID !== undefined) view.setUint32(16, Number(data.dwID), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: u32
  if (data?.dwMask !== undefined) view.setUint32(24, Number(data.dwMask), true);
  // 0x1c: u32
  if (data?.dwTime !== undefined) view.setUint32(28, Number(data.dwTime), true);
  // 0x20: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(32, util.toBigInt(data.dwExtraInfo), true);
  // 0x28: u32
  if (data?.cxContact !== undefined) view.setUint32(40, Number(data.cxContact), true);
  // 0x2c: u32
  if (data?.cyContact !== undefined) view.setUint32(44, Number(data.cyContact), true);
  return buf;
}

export class TOUCHINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get hSource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwID(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwMask(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwTime(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: usize
  get dwExtraInfo(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u32
  get cxContact(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get cyContact(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set hSource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwID(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwMask(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwTime(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: usize
  set dwExtraInfo(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u32
  set cxContact(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set cyContact(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Foundation.POINTS (size: 8)
 */
export interface POINTS {
  /** i16 */
  x: number;
  /** i16 */
  y: number;
}

export const sizeofPOINTS = 8;

export function allocPOINTS(data?: Partial<POINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTS);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.x !== undefined) view.setInt16(0, Number(data.x), true);
  // 0x02: i16
  if (data?.y !== undefined) view.setInt16(2, Number(data.y), true);
  // 0x04: pad4
  return buf;
}

export class POINTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get x(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get y(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: pad4

  // 0x00: i16
  set x(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set y(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.UI.Input.Touch.GESTUREINFO (size: 56)
 */
export interface GESTUREINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwID: number;
  /** Windows.Win32.Foundation.HWND */
  hwndTarget: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTS */
  ptsLocation: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwInstanceID: number;
  /** u32 */
  dwSequenceID: number;
  /** u64 */
  ullArguments: number | bigint;
  /** u32 */
  cbExtraArgs: number;
}

export const sizeofGESTUREINFO = 56;

export function allocGESTUREINFO(data?: Partial<GESTUREINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGESTUREINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwID !== undefined) view.setUint32(8, Number(data.dwID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndTarget !== undefined) view.setBigUint64(16, data.hwndTarget === null ? 0n : util.toBigInt(util.toPointer(data.hwndTarget)), true);
  // 0x18: pointer
  if (data?.ptsLocation !== undefined) view.setBigUint64(24, data.ptsLocation === null ? 0n : util.toBigInt(util.toPointer(data.ptsLocation)), true);
  // 0x20: u32
  if (data?.dwInstanceID !== undefined) view.setUint32(32, Number(data.dwInstanceID), true);
  // 0x24: u32
  if (data?.dwSequenceID !== undefined) view.setUint32(36, Number(data.dwSequenceID), true);
  // 0x28: u64
  if (data?.ullArguments !== undefined) view.setBigUint64(40, util.toBigInt(data.ullArguments), true);
  // 0x30: u32
  if (data?.cbExtraArgs !== undefined) view.setUint32(48, Number(data.cbExtraArgs), true);
  // 0x34: pad4
  return buf;
}

export class GESTUREINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hwndTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ptsLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwInstanceID(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwSequenceID(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u64
  get ullArguments(): number | bigint {
    return this.view.getBigUint64(40, true);
  }

  // 0x30: u32
  get cbExtraArgs(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hwndTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ptsLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwInstanceID(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwSequenceID(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u64
  set ullArguments(value: number | bigint) {
    this.view.setBigUint64(40, util.toBigInt(value), true);
  }

  // 0x30: u32
  set cbExtraArgs(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.UI.Input.Touch.GESTURENOTIFYSTRUCT (size: 32)
 */
export interface GESTURENOTIFYSTRUCT {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndTarget: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINTS */
  ptsLocation: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwInstanceID: number;
}

export const sizeofGESTURENOTIFYSTRUCT = 32;

export function allocGESTURENOTIFYSTRUCT(data?: Partial<GESTURENOTIFYSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofGESTURENOTIFYSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndTarget !== undefined) view.setBigUint64(8, data.hwndTarget === null ? 0n : util.toBigInt(util.toPointer(data.hwndTarget)), true);
  // 0x10: pointer
  if (data?.ptsLocation !== undefined) view.setBigUint64(16, data.ptsLocation === null ? 0n : util.toBigInt(util.toPointer(data.ptsLocation)), true);
  // 0x18: u32
  if (data?.dwInstanceID !== undefined) view.setUint32(24, Number(data.dwInstanceID), true);
  // 0x1c: pad4
  return buf;
}

export class GESTURENOTIFYSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ptsLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwInstanceID(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ptsLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwInstanceID(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Input.Touch.GESTURECONFIG (size: 16)
 */
export interface GESTURECONFIG {
  /** Windows.Win32.UI.Input.Touch.GESTURECONFIG_ID */
  dwID: GESTURECONFIG_ID;
  /** u32 */
  dwWant: number;
  /** u32 */
  dwBlock: number;
}

export const sizeofGESTURECONFIG = 16;

export function allocGESTURECONFIG(data?: Partial<GESTURECONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofGESTURECONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwID !== undefined) view.setUint32(0, Number(data.dwID), true);
  // 0x04: u32
  if (data?.dwWant !== undefined) view.setUint32(4, Number(data.dwWant), true);
  // 0x08: u32
  if (data?.dwBlock !== undefined) view.setUint32(8, Number(data.dwBlock), true);
  // 0x0c: pad4
  return buf;
}

export class GESTURECONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwWant(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwBlock(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwWant(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwBlock(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Input.Pointer.POINTER_INFO (size: 96)
 */
export interface POINTER_INFO {
  /** Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */
  pointerType: POINTER_INPUT_TYPE;
  /** u32 */
  pointerId: number;
  /** u32 */
  frameId: number;
  /** Windows.Win32.UI.Input.Pointer.POINTER_FLAGS */
  pointerFlags: POINTER_FLAGS;
  /** Windows.Win32.Foundation.HANDLE */
  sourceDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndTarget: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptPixelLocation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptHimetricLocation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptPixelLocationRaw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptHimetricLocationRaw: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTime: number;
  /** u32 */
  historyCount: number;
  /** i32 */
  InputData: number;
  /** u32 */
  dwKeyStates: number;
  /** u64 */
  PerformanceCount: number | bigint;
  /** Windows.Win32.UI.Input.Pointer.POINTER_BUTTON_CHANGE_TYPE */
  ButtonChangeType: POINTER_BUTTON_CHANGE_TYPE;
}

export const sizeofPOINTER_INFO = 96;

export function allocPOINTER_INFO(data?: Partial<POINTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.pointerType !== undefined) view.setInt32(0, Number(data.pointerType), true);
  // 0x04: u32
  if (data?.pointerId !== undefined) view.setUint32(4, Number(data.pointerId), true);
  // 0x08: u32
  if (data?.frameId !== undefined) view.setUint32(8, Number(data.frameId), true);
  // 0x0c: u32
  if (data?.pointerFlags !== undefined) view.setUint32(12, Number(data.pointerFlags), true);
  // 0x10: pointer
  if (data?.sourceDevice !== undefined) view.setBigUint64(16, data.sourceDevice === null ? 0n : util.toBigInt(util.toPointer(data.sourceDevice)), true);
  // 0x18: pointer
  if (data?.hwndTarget !== undefined) view.setBigUint64(24, data.hwndTarget === null ? 0n : util.toBigInt(util.toPointer(data.hwndTarget)), true);
  // 0x20: pointer
  if (data?.ptPixelLocation !== undefined) view.setBigUint64(32, data.ptPixelLocation === null ? 0n : util.toBigInt(util.toPointer(data.ptPixelLocation)), true);
  // 0x28: pointer
  if (data?.ptHimetricLocation !== undefined) view.setBigUint64(40, data.ptHimetricLocation === null ? 0n : util.toBigInt(util.toPointer(data.ptHimetricLocation)), true);
  // 0x30: pointer
  if (data?.ptPixelLocationRaw !== undefined) view.setBigUint64(48, data.ptPixelLocationRaw === null ? 0n : util.toBigInt(util.toPointer(data.ptPixelLocationRaw)), true);
  // 0x38: pointer
  if (data?.ptHimetricLocationRaw !== undefined) view.setBigUint64(56, data.ptHimetricLocationRaw === null ? 0n : util.toBigInt(util.toPointer(data.ptHimetricLocationRaw)), true);
  // 0x40: u32
  if (data?.dwTime !== undefined) view.setUint32(64, Number(data.dwTime), true);
  // 0x44: u32
  if (data?.historyCount !== undefined) view.setUint32(68, Number(data.historyCount), true);
  // 0x48: i32
  if (data?.InputData !== undefined) view.setInt32(72, Number(data.InputData), true);
  // 0x4c: u32
  if (data?.dwKeyStates !== undefined) view.setUint32(76, Number(data.dwKeyStates), true);
  // 0x50: u64
  if (data?.PerformanceCount !== undefined) view.setBigUint64(80, util.toBigInt(data.PerformanceCount), true);
  // 0x58: i32
  if (data?.ButtonChangeType !== undefined) view.setInt32(88, Number(data.ButtonChangeType), true);
  // 0x5c: pad4
  return buf;
}

export class POINTER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get pointerType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get pointerId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get frameId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get pointerFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get sourceDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get hwndTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ptPixelLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ptHimetricLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get ptPixelLocationRaw(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ptHimetricLocationRaw(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwTime(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get historyCount(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: i32
  get InputData(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: u32
  get dwKeyStates(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u64
  get PerformanceCount(): number | bigint {
    return this.view.getBigUint64(80, true);
  }

  // 0x58: i32
  get ButtonChangeType(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: i32
  set pointerType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set pointerId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set frameId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set pointerFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set sourceDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set hwndTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ptPixelLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ptHimetricLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set ptPixelLocationRaw(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ptHimetricLocationRaw(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set dwTime(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set historyCount(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: i32
  set InputData(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: u32
  set dwKeyStates(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u64
  set PerformanceCount(value: number | bigint) {
    this.view.setBigUint64(80, util.toBigInt(value), true);
  }

  // 0x58: i32
  set ButtonChangeType(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.UI.Input.Pointer.POINTER_TOUCH_INFO (size: 40)
 */
export interface POINTER_TOUCH_INFO {
  /** Windows.Win32.UI.Input.Pointer.POINTER_INFO */
  pointerInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  touchFlags: number;
  /** u32 */
  touchMask: number;
  /** Windows.Win32.Foundation.RECT */
  rcContact: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcContactRaw: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  orientation: number;
  /** u32 */
  pressure: number;
}

export const sizeofPOINTER_TOUCH_INFO = 40;

export function allocPOINTER_TOUCH_INFO(data?: Partial<POINTER_TOUCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_TOUCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pointerInfo !== undefined) view.setBigUint64(0, data.pointerInfo === null ? 0n : util.toBigInt(util.toPointer(data.pointerInfo)), true);
  // 0x08: u32
  if (data?.touchFlags !== undefined) view.setUint32(8, Number(data.touchFlags), true);
  // 0x0c: u32
  if (data?.touchMask !== undefined) view.setUint32(12, Number(data.touchMask), true);
  // 0x10: pointer
  if (data?.rcContact !== undefined) view.setBigUint64(16, data.rcContact === null ? 0n : util.toBigInt(util.toPointer(data.rcContact)), true);
  // 0x18: pointer
  if (data?.rcContactRaw !== undefined) view.setBigUint64(24, data.rcContactRaw === null ? 0n : util.toBigInt(util.toPointer(data.rcContactRaw)), true);
  // 0x20: u32
  if (data?.orientation !== undefined) view.setUint32(32, Number(data.orientation), true);
  // 0x24: u32
  if (data?.pressure !== undefined) view.setUint32(36, Number(data.pressure), true);
  return buf;
}

export class POINTER_TOUCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pointerInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get touchFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get touchMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rcContact(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get rcContactRaw(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get orientation(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get pressure(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: pointer
  set pointerInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set touchFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set touchMask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rcContact(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set rcContactRaw(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set orientation(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set pressure(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.Pointer.POINTER_PEN_INFO (size: 32)
 */
export interface POINTER_PEN_INFO {
  /** Windows.Win32.UI.Input.Pointer.POINTER_INFO */
  pointerInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  penFlags: number;
  /** u32 */
  penMask: number;
  /** u32 */
  pressure: number;
  /** u32 */
  rotation: number;
  /** i32 */
  tiltX: number;
  /** i32 */
  tiltY: number;
}

export const sizeofPOINTER_PEN_INFO = 32;

export function allocPOINTER_PEN_INFO(data?: Partial<POINTER_PEN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_PEN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pointerInfo !== undefined) view.setBigUint64(0, data.pointerInfo === null ? 0n : util.toBigInt(util.toPointer(data.pointerInfo)), true);
  // 0x08: u32
  if (data?.penFlags !== undefined) view.setUint32(8, Number(data.penFlags), true);
  // 0x0c: u32
  if (data?.penMask !== undefined) view.setUint32(12, Number(data.penMask), true);
  // 0x10: u32
  if (data?.pressure !== undefined) view.setUint32(16, Number(data.pressure), true);
  // 0x14: u32
  if (data?.rotation !== undefined) view.setUint32(20, Number(data.rotation), true);
  // 0x18: i32
  if (data?.tiltX !== undefined) view.setInt32(24, Number(data.tiltX), true);
  // 0x1c: i32
  if (data?.tiltY !== undefined) view.setInt32(28, Number(data.tiltY), true);
  return buf;
}

export class POINTER_PEN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pointerInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get penFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get penMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get pressure(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get rotation(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get tiltX(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get tiltY(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: pointer
  set pointerInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set penFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set penMask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set pressure(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set rotation(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set tiltX(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set tiltY(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.Pointer.INPUT_INJECTION_VALUE (size: 16)
 */
export interface INPUT_INJECTION_VALUE {
  /** u16 */
  page: number;
  /** u16 */
  usage: number;
  /** i32 */
  value: number;
  /** u16 */
  index: number;
}

export const sizeofINPUT_INJECTION_VALUE = 16;

export function allocINPUT_INJECTION_VALUE(data?: Partial<INPUT_INJECTION_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_INJECTION_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.page !== undefined) view.setUint16(0, Number(data.page), true);
  // 0x02: u16
  if (data?.usage !== undefined) view.setUint16(2, Number(data.usage), true);
  // 0x04: i32
  if (data?.value !== undefined) view.setInt32(4, Number(data.value), true);
  // 0x08: u16
  if (data?.index !== undefined) view.setUint16(8, Number(data.index), true);
  // 0x0a: pad6
  return buf;
}

export class INPUT_INJECTION_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get page(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usage(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: i32
  get value(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u16
  get index(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: u16
  set page(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usage(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: i32
  set value(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u16
  set index(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.UI.Input.Pointer.INPUT_TRANSFORM (size: 8)
 */
export interface INPUT_TRANSFORM {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINPUT_TRANSFORM = 8;

export function allocINPUT_TRANSFORM(data?: Partial<INPUT_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class INPUT_TRANSFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWINPUTHEADER (size: 24)
 */
export interface RAWINPUTHEADER {
  /** u32 */
  dwType: number;
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAWINPUTHEADER = 24;

export function allocRAWINPUTHEADER(data?: Partial<RAWINPUTHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWINPUTHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: pointer
  if (data?.hDevice !== undefined) view.setBigUint64(8, data.hDevice === null ? 0n : util.toBigInt(util.toPointer(data.hDevice)), true);
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : util.toBigInt(util.toPointer(data.wParam)), true);
  return buf;
}

export class RAWINPUTHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get wParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set wParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWMOUSE (size: 32)
 */
export interface RAWMOUSE {
  /** u16 */
  usFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ulRawButtons: number;
  /** i32 */
  lLastX: number;
  /** i32 */
  lLastY: number;
  /** u32 */
  ulExtraInformation: number;
}

export const sizeofRAWMOUSE = 32;

export function allocRAWMOUSE(data?: Partial<RAWMOUSE>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWMOUSE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usFlags !== undefined) view.setUint16(0, Number(data.usFlags), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.ulRawButtons !== undefined) view.setUint32(16, Number(data.ulRawButtons), true);
  // 0x14: i32
  if (data?.lLastX !== undefined) view.setInt32(20, Number(data.lLastX), true);
  // 0x18: i32
  if (data?.lLastY !== undefined) view.setInt32(24, Number(data.lLastY), true);
  // 0x1c: u32
  if (data?.ulExtraInformation !== undefined) view.setUint32(28, Number(data.ulExtraInformation), true);
  return buf;
}

export class RAWMOUSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usFlags(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ulRawButtons(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get lLastX(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get lLastY(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get ulExtraInformation(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u16
  set usFlags(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ulRawButtons(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set lLastX(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set lLastY(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set ulExtraInformation(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWKEYBOARD (size: 16)
 */
export interface RAWKEYBOARD {
  /** u16 */
  MakeCode: number;
  /** u16 */
  Flags: number;
  /** u16 */
  Reserved: number;
  /** u16 */
  VKey: number;
  /** u32 */
  Message: number;
  /** u32 */
  ExtraInformation: number;
}

export const sizeofRAWKEYBOARD = 16;

export function allocRAWKEYBOARD(data?: Partial<RAWKEYBOARD>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWKEYBOARD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MakeCode !== undefined) view.setUint16(0, Number(data.MakeCode), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u16
  if (data?.Reserved !== undefined) view.setUint16(4, Number(data.Reserved), true);
  // 0x06: u16
  if (data?.VKey !== undefined) view.setUint16(6, Number(data.VKey), true);
  // 0x08: u32
  if (data?.Message !== undefined) view.setUint32(8, Number(data.Message), true);
  // 0x0c: u32
  if (data?.ExtraInformation !== undefined) view.setUint32(12, Number(data.ExtraInformation), true);
  return buf;
}

export class RAWKEYBOARDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MakeCode(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Reserved(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get VKey(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get Message(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ExtraInformation(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u16
  set MakeCode(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Reserved(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set VKey(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set Message(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ExtraInformation(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWHID (size: 16)
 */
export interface RAWHID {
  /** u32 */
  dwSizeHid: number;
  /** u32 */
  dwCount: number;
  /** array */
  bRawData: Deno.PointerValue | null;
}

export const sizeofRAWHID = 16;

export function allocRAWHID(data?: Partial<RAWHID>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWHID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeHid !== undefined) view.setUint32(0, Number(data.dwSizeHid), true);
  // 0x04: u32
  if (data?.dwCount !== undefined) view.setUint32(4, Number(data.dwCount), true);
  // 0x08: pointer
  if (data?.bRawData !== undefined) view.setBigUint64(8, data.bRawData === null ? 0n : util.toBigInt(util.toPointer(data.bRawData)), true);
  return buf;
}

export class RAWHIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeHid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get bRawData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSizeHid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set bRawData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Devices.Bluetooth.SDP_LARGE_INTEGER_16 (size: 16)
 */
export interface SDP_LARGE_INTEGER_16 {
  /** u64 */
  LowPart: number | bigint;
  /** i64 */
  HighPart: number | bigint;
}

export const sizeofSDP_LARGE_INTEGER_16 = 16;

export function allocSDP_LARGE_INTEGER_16(data?: Partial<SDP_LARGE_INTEGER_16>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_LARGE_INTEGER_16);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LowPart !== undefined) view.setBigUint64(0, util.toBigInt(data.LowPart), true);
  // 0x08: i64
  if (data?.HighPart !== undefined) view.setBigInt64(8, util.toBigInt(data.HighPart), true);
  return buf;
}

export class SDP_LARGE_INTEGER_16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get LowPart(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: i64
  get HighPart(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x00: u64
  set LowPart(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: i64
  set HighPart(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }
}

export type CHAR = number;

/**
 * Windows.Win32.Devices.Bluetooth.SDP_ULARGE_INTEGER_16 (size: 16)
 */
export interface SDP_ULARGE_INTEGER_16 {
  /** u64 */
  LowPart: number | bigint;
  /** u64 */
  HighPart: number | bigint;
}

export const sizeofSDP_ULARGE_INTEGER_16 = 16;

export function allocSDP_ULARGE_INTEGER_16(data?: Partial<SDP_ULARGE_INTEGER_16>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_ULARGE_INTEGER_16);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LowPart !== undefined) view.setBigUint64(0, util.toBigInt(data.LowPart), true);
  // 0x08: u64
  if (data?.HighPart !== undefined) view.setBigUint64(8, util.toBigInt(data.HighPart), true);
  return buf;
}

export class SDP_ULARGE_INTEGER_16View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get LowPart(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get HighPart(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set LowPart(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set HighPart(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _string_e__Struct (size: 16)
 */
export interface _string_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_string_e__Struct = 16;

export function alloc_string_e__Struct(data?: Partial<_string_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_string_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : util.toBigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

export class _string_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _url_e__Struct (size: 16)
 */
export interface _url_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_url_e__Struct = 16;

export function alloc_url_e__Struct(data?: Partial<_url_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_url_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : util.toBigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

export class _url_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _sequence_e__Struct (size: 16)
 */
export interface _sequence_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_sequence_e__Struct = 16;

export function alloc_sequence_e__Struct(data?: Partial<_sequence_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_sequence_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : util.toBigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

export class _sequence_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _alternative_e__Struct (size: 16)
 */
export interface _alternative_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_alternative_e__Struct = 16;

export function alloc_alternative_e__Struct(data?: Partial<_alternative_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_alternative_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : util.toBigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

export class _alternative_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _data_e__Union (size: 96)
 */
export interface _data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.SDP_LARGE_INTEGER_16 */
  int128: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: number | bigint;
  /** i32 */
  int32: number;
  /** i16 */
  int16: number;
  /** Windows.Win32.Foundation.CHAR */
  int8: string | number;
  /** Windows.Win32.Devices.Bluetooth.SDP_ULARGE_INTEGER_16 */
  uint128: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  uint64: number | bigint;
  /** u32 */
  uint32: number;
  /** u16 */
  uint16: number;
  /** u8 */
  uint8: number;
  /** u8 */
  booleanVal: number;
  /** System.Guid */
  uuid128: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uuid32: number;
  /** u16 */
  uuid16: number;
  /** _string_e__Struct */
  string: Uint8Array | Deno.PointerValue | null;
  /** _url_e__Struct */
  url: Uint8Array | Deno.PointerValue | null;
  /** _sequence_e__Struct */
  sequence: Uint8Array | Deno.PointerValue | null;
  /** _alternative_e__Struct */
  alternative: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_data_e__Union = 96;

export function alloc_data_e__Union(data?: Partial<_data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.int128 !== undefined) view.setBigUint64(0, data.int128 === null ? 0n : util.toBigInt(util.toPointer(data.int128)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, util.toBigInt(data.int64), true);
  // 0x10: i32
  if (data?.int32 !== undefined) view.setInt32(16, Number(data.int32), true);
  // 0x14: i16
  if (data?.int16 !== undefined) view.setInt16(20, Number(data.int16), true);
  // 0x16: u8
  if (data?.int8 !== undefined) view.setUint8(22, Number(data.int8));
  // 0x17: pad1
  // 0x18: pointer
  if (data?.uint128 !== undefined) view.setBigUint64(24, data.uint128 === null ? 0n : util.toBigInt(util.toPointer(data.uint128)), true);
  // 0x20: u64
  if (data?.uint64 !== undefined) view.setBigUint64(32, util.toBigInt(data.uint64), true);
  // 0x28: u32
  if (data?.uint32 !== undefined) view.setUint32(40, Number(data.uint32), true);
  // 0x2c: u16
  if (data?.uint16 !== undefined) view.setUint16(44, Number(data.uint16), true);
  // 0x2e: u8
  if (data?.uint8 !== undefined) view.setUint8(46, Number(data.uint8));
  // 0x2f: u8
  if (data?.booleanVal !== undefined) view.setUint8(47, Number(data.booleanVal));
  // 0x30: pointer
  if (data?.uuid128 !== undefined) view.setBigUint64(48, data.uuid128 === null ? 0n : util.toBigInt(util.toPointer(data.uuid128)), true);
  // 0x38: u32
  if (data?.uuid32 !== undefined) view.setUint32(56, Number(data.uuid32), true);
  // 0x3c: u16
  if (data?.uuid16 !== undefined) view.setUint16(60, Number(data.uuid16), true);
  // 0x3e: pad2
  // 0x40: pointer
  if (data?.string !== undefined) view.setBigUint64(64, data.string === null ? 0n : util.toBigInt(util.toPointer(data.string)), true);
  // 0x48: pointer
  if (data?.url !== undefined) view.setBigUint64(72, data.url === null ? 0n : util.toBigInt(util.toPointer(data.url)), true);
  // 0x50: pointer
  if (data?.sequence !== undefined) view.setBigUint64(80, data.sequence === null ? 0n : util.toBigInt(util.toPointer(data.sequence)), true);
  // 0x58: pointer
  if (data?.alternative !== undefined) view.setBigUint64(88, data.alternative === null ? 0n : util.toBigInt(util.toPointer(data.alternative)), true);
  return buf;
}

export class _data_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get int128(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i64
  get int64(): number | bigint {
    return this.view.getBigInt64(8, true);
  }

  // 0x10: i32
  get int32(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i16
  get int16(): number {
    return this.view.getInt16(20, true);
  }

  // 0x16: u8
  get int8(): number {
    return this.view.getUint8(22);
  }

  // 0x17: pad1

  // 0x18: pointer
  get uint128(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get uint64(): number | bigint {
    return this.view.getBigUint64(32, true);
  }

  // 0x28: u32
  get uint32(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get uint16(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u8
  get uint8(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get booleanVal(): number {
    return this.view.getUint8(47);
  }

  // 0x30: pointer
  get uuid128(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get uuid32(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u16
  get uuid16(): number {
    return this.view.getUint16(60, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  get string(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get url(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get sequence(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get alternative(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set int128(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: i64
  set int64(value: number | bigint) {
    this.view.setBigInt64(8, util.toBigInt(value), true);
  }

  // 0x10: i32
  set int32(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i16
  set int16(value: number) {
    this.view.setInt16(20, value, true);
  }

  // 0x16: u8
  set int8(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: pad1

  // 0x18: pointer
  set uint128(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set uint64(value: number | bigint) {
    this.view.setBigUint64(32, util.toBigInt(value), true);
  }

  // 0x28: u32
  set uint32(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set uint16(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u8
  set uint8(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set booleanVal(value: number) {
    this.view.setUint8(47, value);
  }

  // 0x30: pointer
  set uuid128(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set uuid32(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u16
  set uuid16(value: number) {
    this.view.setUint16(60, value, true);
  }

  // 0x3e: pad2

  // 0x40: pointer
  set string(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set url(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set sequence(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set alternative(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWINPUT (size: 16)
 */
export interface RAWINPUT {
  /** Windows.Win32.UI.Input.RAWINPUTHEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** _data_e__Union */
  data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRAWINPUT = 16;

export function allocRAWINPUT(data?: Partial<RAWINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : util.toBigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : util.toBigInt(util.toPointer(data.data)), true);
  return buf;
}

export class RAWINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.RID_DEVICE_INFO_MOUSE (size: 16)
 */
export interface RID_DEVICE_INFO_MOUSE {
  /** u32 */
  dwId: number;
  /** u32 */
  dwNumberOfButtons: number;
  /** u32 */
  dwSampleRate: number;
  /** Windows.Win32.Foundation.BOOL */
  fHasHorizontalWheel: boolean;
}

export const sizeofRID_DEVICE_INFO_MOUSE = 16;

export function allocRID_DEVICE_INFO_MOUSE(data?: Partial<RID_DEVICE_INFO_MOUSE>): Uint8Array {
  const buf = new Uint8Array(sizeofRID_DEVICE_INFO_MOUSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwId !== undefined) view.setUint32(0, Number(data.dwId), true);
  // 0x04: u32
  if (data?.dwNumberOfButtons !== undefined) view.setUint32(4, Number(data.dwNumberOfButtons), true);
  // 0x08: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(8, Number(data.dwSampleRate), true);
  // 0x0c: i32
  if (data?.fHasHorizontalWheel !== undefined) view.setInt32(12, Number(data.fHasHorizontalWheel), true);
  return buf;
}

export class RID_DEVICE_INFO_MOUSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumberOfButtons(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSampleRate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get fHasHorizontalWheel(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set dwId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumberOfButtons(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSampleRate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set fHasHorizontalWheel(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.RID_DEVICE_INFO_KEYBOARD (size: 24)
 */
export interface RID_DEVICE_INFO_KEYBOARD {
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
  /** u32 */
  dwKeyboardMode: number;
  /** u32 */
  dwNumberOfFunctionKeys: number;
  /** u32 */
  dwNumberOfIndicators: number;
  /** u32 */
  dwNumberOfKeysTotal: number;
}

export const sizeofRID_DEVICE_INFO_KEYBOARD = 24;

export function allocRID_DEVICE_INFO_KEYBOARD(data?: Partial<RID_DEVICE_INFO_KEYBOARD>): Uint8Array {
  const buf = new Uint8Array(sizeofRID_DEVICE_INFO_KEYBOARD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.dwSubType !== undefined) view.setUint32(4, Number(data.dwSubType), true);
  // 0x08: u32
  if (data?.dwKeyboardMode !== undefined) view.setUint32(8, Number(data.dwKeyboardMode), true);
  // 0x0c: u32
  if (data?.dwNumberOfFunctionKeys !== undefined) view.setUint32(12, Number(data.dwNumberOfFunctionKeys), true);
  // 0x10: u32
  if (data?.dwNumberOfIndicators !== undefined) view.setUint32(16, Number(data.dwNumberOfIndicators), true);
  // 0x14: u32
  if (data?.dwNumberOfKeysTotal !== undefined) view.setUint32(20, Number(data.dwNumberOfKeysTotal), true);
  return buf;
}

export class RID_DEVICE_INFO_KEYBOARDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSubType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwKeyboardMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumberOfFunctionKeys(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNumberOfIndicators(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNumberOfKeysTotal(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSubType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwKeyboardMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumberOfFunctionKeys(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNumberOfIndicators(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNumberOfKeysTotal(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.RID_DEVICE_INFO_HID (size: 16)
 */
export interface RID_DEVICE_INFO_HID {
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwProductId: number;
  /** u32 */
  dwVersionNumber: number;
  /** u16 */
  usUsagePage: number;
  /** u16 */
  usUsage: number;
}

export const sizeofRID_DEVICE_INFO_HID = 16;

export function allocRID_DEVICE_INFO_HID(data?: Partial<RID_DEVICE_INFO_HID>): Uint8Array {
  const buf = new Uint8Array(sizeofRID_DEVICE_INFO_HID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVendorId !== undefined) view.setUint32(0, Number(data.dwVendorId), true);
  // 0x04: u32
  if (data?.dwProductId !== undefined) view.setUint32(4, Number(data.dwProductId), true);
  // 0x08: u32
  if (data?.dwVersionNumber !== undefined) view.setUint32(8, Number(data.dwVersionNumber), true);
  // 0x0c: u16
  if (data?.usUsagePage !== undefined) view.setUint16(12, Number(data.usUsagePage), true);
  // 0x0e: u16
  if (data?.usUsage !== undefined) view.setUint16(14, Number(data.usUsage), true);
  return buf;
}

export class RID_DEVICE_INFO_HIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVendorId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProductId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwVersionNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get usUsagePage(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get usUsage(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u32
  set dwVendorId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProductId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwVersionNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set usUsagePage(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set usUsage(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.RID_DEVICE_INFO (size: 16)
 */
export interface RID_DEVICE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Input.RID_DEVICE_INFO_TYPE */
  dwType: RID_DEVICE_INFO_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRID_DEVICE_INFO = 16;

export function allocRID_DEVICE_INFO(data?: Partial<RID_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRID_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class RID_DEVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWINPUTDEVICE (size: 16)
 */
export interface RAWINPUTDEVICE {
  /** u16 */
  usUsagePage: number;
  /** u16 */
  usUsage: number;
  /** Windows.Win32.UI.Input.RAWINPUTDEVICE_FLAGS */
  dwFlags: RAWINPUTDEVICE_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hwndTarget: Deno.PointerValue | null;
}

export const sizeofRAWINPUTDEVICE = 16;

export function allocRAWINPUTDEVICE(data?: Partial<RAWINPUTDEVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWINPUTDEVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.usUsagePage !== undefined) view.setUint16(0, Number(data.usUsagePage), true);
  // 0x02: u16
  if (data?.usUsage !== undefined) view.setUint16(2, Number(data.usUsage), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndTarget !== undefined) view.setBigUint64(8, data.hwndTarget === null ? 0n : util.toBigInt(util.toPointer(data.hwndTarget)), true);
  return buf;
}

export class RAWINPUTDEVICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get usUsagePage(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get usUsage(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndTarget(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set usUsagePage(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set usUsage(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndTarget(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.UI.Input.RAWINPUTDEVICELIST (size: 16)
 */
export interface RAWINPUTDEVICELIST {
  /** Windows.Win32.Foundation.HANDLE */
  hDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.RID_DEVICE_INFO_TYPE */
  dwType: RID_DEVICE_INFO_TYPE;
}

export const sizeofRAWINPUTDEVICELIST = 16;

export function allocRAWINPUTDEVICELIST(data?: Partial<RAWINPUTDEVICELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofRAWINPUTDEVICELIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hDevice !== undefined) view.setBigUint64(0, data.hDevice === null ? 0n : util.toBigInt(util.toPointer(data.hDevice)), true);
  // 0x08: u32
  if (data?.dwType !== undefined) view.setUint32(8, Number(data.dwType), true);
  // 0x0c: pad4
  return buf;
}

export class RAWINPUTDEVICELISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hDevice(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hDevice(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Input.INPUT_MESSAGE_SOURCE (size: 8)
 */
export interface INPUT_MESSAGE_SOURCE {
  /** Windows.Win32.UI.Input.INPUT_MESSAGE_DEVICE_TYPE */
  deviceType: INPUT_MESSAGE_DEVICE_TYPE;
  /** Windows.Win32.UI.Input.INPUT_MESSAGE_ORIGIN_ID */
  originId: INPUT_MESSAGE_ORIGIN_ID;
}

export const sizeofINPUT_MESSAGE_SOURCE = 8;

export function allocINPUT_MESSAGE_SOURCE(data?: Partial<INPUT_MESSAGE_SOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_MESSAGE_SOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.deviceType !== undefined) view.setInt32(0, Number(data.deviceType), true);
  // 0x04: i32
  if (data?.originId !== undefined) view.setInt32(4, Number(data.originId), true);
  return buf;
}

export class INPUT_MESSAGE_SOURCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get deviceType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get originId(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set deviceType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set originId(value: number) {
    this.view.setInt32(4, value, true);
  }
}

export type LRESULT = number | bigint;

// Native Libraries

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    GetRawInputData: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    GetRawInputDeviceInfoA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetRawInputDeviceInfoW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetRawInputBuffer: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    RegisterRawInputDevices: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    GetRegisteredRawInputDevices: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    GetRawInputDeviceList: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    DefRawInputProc: {
      parameters: ["pointer", "i32", "u32"],
      result: "pointer",
    },
    GetCurrentInputMessageSource: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetCIMSSM: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetRawInputData(
  hRawInput: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Input.HRAWINPUT */,
  uiCommand: RAW_INPUT_DATA_COMMAND_FLAGS /* Windows.Win32.UI.Input.RAW_INPUT_DATA_COMMAND_FLAGS */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSizeHeader: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.GetRawInputData(util.toPointer(hRawInput), uiCommand, util.toPointer(pData), util.toPointer(pcbSize), cbSizeHeader);
}

export function GetRawInputDeviceInfoA(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uiCommand: RAW_INPUT_DEVICE_INFO_COMMAND /* Windows.Win32.UI.Input.RAW_INPUT_DEVICE_INFO_COMMAND */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libUSER32_dll.GetRawInputDeviceInfoA(util.toPointer(hDevice), uiCommand, util.toPointer(pData), util.toPointer(pcbSize));
}

export function GetRawInputDeviceInfoW(
  hDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  uiCommand: RAW_INPUT_DEVICE_INFO_COMMAND /* Windows.Win32.UI.Input.RAW_INPUT_DEVICE_INFO_COMMAND */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libUSER32_dll.GetRawInputDeviceInfoW(util.toPointer(hDevice), uiCommand, util.toPointer(pData), util.toPointer(pcbSize));
}

export function GetRawInputBuffer(
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSizeHeader: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.GetRawInputBuffer(util.toPointer(pData), util.toPointer(pcbSize), cbSizeHeader);
}

export function RegisterRawInputDevices(
  pRawInputDevices: Deno.PointerValue | Uint8Array | null /* ptr */,
  uiNumDevices: number /* u32 */,
  cbSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RegisterRawInputDevices(util.toPointer(pRawInputDevices), uiNumDevices, cbSize));
}

export function GetRegisteredRawInputDevices(
  pRawInputDevices: Deno.PointerValue | Uint8Array | null /* ptr */,
  puiNumDevices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSize: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.GetRegisteredRawInputDevices(util.toPointer(pRawInputDevices), util.toPointer(puiNumDevices), cbSize);
}

export function GetRawInputDeviceList(
  pRawInputDeviceList: Deno.PointerValue | Uint8Array | null /* ptr */,
  puiNumDevices: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbSize: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.GetRawInputDeviceList(util.toPointer(pRawInputDeviceList), util.toPointer(puiNumDevices), cbSize);
}

export function DefRawInputProc(
  paRawInput: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInput: number /* i32 */,
  cbSizeHeader: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libUSER32_dll.DefRawInputProc(util.toPointer(paRawInput), nInput, cbSizeHeader));
}

export function GetCurrentInputMessageSource(
  inputMessageSource: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetCurrentInputMessageSource(util.toPointer(inputMessageSource)));
}

export function GetCIMSSM(
  inputMessageSource: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetCIMSSM(util.toPointer(inputMessageSource)));
}

