/// Auto-generated by Deno Win32: Windows.Win32.UI.HiDpi.Apis

import * as util from "../../util.ts";

// Enums
export type DPI_AWARENESS = number;
export type DPI_HOSTING_BEHAVIOR = number;
export type DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = number;
export type DIALOG_DPI_CHANGE_BEHAVIORS = number;
export type PROCESS_DPI_AWARENESS = number;
export type MONITOR_DPI_TYPE = number;
export type WINDOW_STYLE = number;
export type WINDOW_EX_STYLE = number;

// Constants
export const DPI_AWARENESS_CONTEXT_UNAWARE = 1120986464255;
export const DPI_AWARENESS_CONTEXT_SYSTEM_AWARE = 1127020893306878;
export const DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE = 4840071660306429;
export const DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 = 18446738597626249212n;
export const DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED = 179241870163963;
export const DPI_AWARENESS_INVALID = "-1";
export const DPI_AWARENESS_UNAWARE = 0;
export const DPI_AWARENESS_SYSTEM_AWARE = 1;
export const DPI_AWARENESS_PER_MONITOR_AWARE = 2;
export const DPI_HOSTING_BEHAVIOR_INVALID = "-1";
export const DPI_HOSTING_BEHAVIOR_DEFAULT = 0;
export const DPI_HOSTING_BEHAVIOR_MIXED = 1;
export const DCDC_DEFAULT = 0;
export const DCDC_DISABLE_FONT_UPDATE = 1;
export const DCDC_DISABLE_RELAYOUT = 2;
export const DDC_DEFAULT = 0;
export const DDC_DISABLE_ALL = 1;
export const DDC_DISABLE_RESIZE = 2;
export const DDC_DISABLE_CONTROL_RELAYOUT = 4;
export const PROCESS_DPI_UNAWARE = 0;
export const PROCESS_SYSTEM_DPI_AWARE = 1;
export const PROCESS_PER_MONITOR_DPI_AWARE = 2;
export const MDT_EFFECTIVE_DPI = 0;
export const MDT_ANGULAR_DPI = 1;
export const MDT_RAW_DPI = 2;
export const MDT_DEFAULT = 0;
export const WS_OVERLAPPED = 0;
export const WS_POPUP = 2147483648;
export const WS_CHILD = 1073741824;
export const WS_MINIMIZE = 536870912;
export const WS_VISIBLE = 268435456;
export const WS_DISABLED = 134217728;
export const WS_CLIPSIBLINGS = 67108864;
export const WS_CLIPCHILDREN = 33554432;
export const WS_MAXIMIZE = 16777216;
export const WS_CAPTION = 12582912;
export const WS_BORDER = 8388608;
export const WS_DLGFRAME = 4194304;
export const WS_VSCROLL = 2097152;
export const WS_HSCROLL = 1048576;
export const WS_SYSMENU = 524288;
export const WS_THICKFRAME = 262144;
export const WS_GROUP = 131072;
export const WS_TABSTOP = 65536;
export const WS_MINIMIZEBOX = 131072;
export const WS_MAXIMIZEBOX = 65536;
export const WS_TILED = 0;
export const WS_ICONIC = 536870912;
export const WS_SIZEBOX = 262144;
export const WS_TILEDWINDOW = 13565952;
export const WS_OVERLAPPEDWINDOW = 13565952;
export const WS_POPUPWINDOW = 2156396544;
export const WS_CHILDWINDOW = 1073741824;
export const WS_ACTIVECAPTION = 1;
export const WS_EX_DLGMODALFRAME = 1;
export const WS_EX_NOPARENTNOTIFY = 4;
export const WS_EX_TOPMOST = 8;
export const WS_EX_ACCEPTFILES = 16;
export const WS_EX_TRANSPARENT = 32;
export const WS_EX_MDICHILD = 64;
export const WS_EX_TOOLWINDOW = 128;
export const WS_EX_WINDOWEDGE = 256;
export const WS_EX_CLIENTEDGE = 512;
export const WS_EX_CONTEXTHELP = 1024;
export const WS_EX_RIGHT = 4096;
export const WS_EX_LEFT = 0;
export const WS_EX_RTLREADING = 8192;
export const WS_EX_LTRREADING = 0;
export const WS_EX_LEFTSCROLLBAR = 16384;
export const WS_EX_RIGHTSCROLLBAR = 0;
export const WS_EX_CONTROLPARENT = 65536;
export const WS_EX_STATICEDGE = 131072;
export const WS_EX_APPWINDOW = 262144;
export const WS_EX_OVERLAPPEDWINDOW = 768;
export const WS_EX_PALETTEWINDOW = 392;
export const WS_EX_LAYERED = 524288;
export const WS_EX_NOINHERITLAYOUT = 1048576;
export const WS_EX_NOREDIRECTIONBITMAP = 2097152;
export const WS_EX_LAYOUTRTL = 4194304;
export const WS_EX_COMPOSITED = 33554432;
export const WS_EX_NOACTIVATE = 134217728;

// Structs

export type DPI_AWARENESS_CONTEXT = Deno.PointerValue;

export type HWND = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

export type BOOL = number;

export type HANDLE = Deno.PointerValue;

export type HRESULT = number;

export type HMONITOR = Deno.PointerValue;

// Native Libraries

try {
  var libUxTheme = Deno.dlopen("UxTheme", {
    OpenThemeDataForDpi: {
      parameters: ["pointer", "buffer", "u32"],
      result: "isize",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32 = Deno.dlopen("USER32", {
    SetDialogControlDpiChangeBehavior: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    GetDialogControlDpiChangeBehavior: {
      parameters: ["pointer"],
      result: "u32",
    },
    SetDialogDpiChangeBehavior: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    GetDialogDpiChangeBehavior: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetSystemMetricsForDpi: {
      parameters: ["i32", "u32"],
      result: "i32",
    },
    AdjustWindowRectExForDpi: {
      parameters: ["pointer", "u32", "i32", "u32", "u32"],
      result: "i32",
    },
    LogicalToPhysicalPointForPerMonitorDPI: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    PhysicalToLogicalPointForPerMonitorDPI: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SystemParametersInfoForDpi: {
      parameters: ["u32", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    SetThreadDpiAwarenessContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetThreadDpiAwarenessContext: {
      parameters: [],
      result: "pointer",
    },
    GetWindowDpiAwarenessContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetAwarenessFromDpiAwarenessContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetDpiFromDpiAwarenessContext: {
      parameters: ["pointer"],
      result: "u32",
    },
    AreDpiAwarenessContextsEqual: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    IsValidDpiAwarenessContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetDpiForWindow: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetDpiForSystem: {
      parameters: [],
      result: "u32",
    },
    GetSystemDpiForProcess: {
      parameters: ["pointer"],
      result: "u32",
    },
    EnableNonClientDpiScaling: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetProcessDpiAwarenessContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetDpiAwarenessContextForProcess: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetThreadDpiHostingBehavior: {
      parameters: ["i32"],
      result: "i32",
    },
    GetThreadDpiHostingBehavior: {
      parameters: [],
      result: "i32",
    },
    GetWindowDpiHostingBehavior: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_shcore_scaling_l1_1_1 = Deno.dlopen("api-ms-win-shcore-scaling-l1-1-1", {
    SetProcessDpiAwareness: {
      parameters: ["i32"],
      result: "pointer",
    },
    GetProcessDpiAwareness: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetDpiForMonitor: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function OpenThemeDataForDpi(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pszClassList: string | null /* Windows.Win32.Foundation.PWSTR */,
  dpi: number /* u32 */,
): Deno.PointerValue /* isize */ {
  return libUxTheme.OpenThemeDataForDpi(util.hwndToFfi(hwnd), util.pwstrToFfi(pszClassList), dpi);
}

export function SetDialogControlDpiChangeBehavior(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  mask: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS /* Windows.Win32.UI.HiDpi.DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS */,
  values: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS /* Windows.Win32.UI.HiDpi.DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.SetDialogControlDpiChangeBehavior(util.hwndToFfi(hWnd), mask, values));
}

export function GetDialogControlDpiChangeBehavior(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS /* Windows.Win32.UI.HiDpi.DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS */ {
  return libUSER32.GetDialogControlDpiChangeBehavior(util.hwndToFfi(hWnd));
}

export function SetDialogDpiChangeBehavior(
  hDlg: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  mask: DIALOG_DPI_CHANGE_BEHAVIORS /* Windows.Win32.UI.HiDpi.DIALOG_DPI_CHANGE_BEHAVIORS */,
  values: DIALOG_DPI_CHANGE_BEHAVIORS /* Windows.Win32.UI.HiDpi.DIALOG_DPI_CHANGE_BEHAVIORS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.SetDialogDpiChangeBehavior(util.hwndToFfi(hDlg), mask, values));
}

export function GetDialogDpiChangeBehavior(
  hDlg: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): DIALOG_DPI_CHANGE_BEHAVIORS /* Windows.Win32.UI.HiDpi.DIALOG_DPI_CHANGE_BEHAVIORS */ {
  return libUSER32.GetDialogDpiChangeBehavior(util.hwndToFfi(hDlg));
}

export function GetSystemMetricsForDpi(
  nIndex: number /* i32 */,
  dpi: number /* u32 */,
): number /* i32 */ {
  return libUSER32.GetSystemMetricsForDpi(nIndex, dpi);
}

export function AdjustWindowRectExForDpi(
  lpRect: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwStyle: WINDOW_STYLE /* Windows.Win32.UI.WindowsAndMessaging.WINDOW_STYLE */,
  bMenu: boolean /* Windows.Win32.Foundation.BOOL */,
  dwExStyle: WINDOW_EX_STYLE /* Windows.Win32.UI.WindowsAndMessaging.WINDOW_EX_STYLE */,
  dpi: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.AdjustWindowRectExForDpi(util.toPointer(lpRect), dwStyle, util.boolToFfi(bMenu), dwExStyle, dpi));
}

export function LogicalToPhysicalPointForPerMonitorDPI(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpPoint: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.LogicalToPhysicalPointForPerMonitorDPI(util.hwndToFfi(hWnd), util.toPointer(lpPoint)));
}

export function PhysicalToLogicalPointForPerMonitorDPI(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpPoint: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.PhysicalToLogicalPointForPerMonitorDPI(util.hwndToFfi(hWnd), util.toPointer(lpPoint)));
}

export function SystemParametersInfoForDpi(
  uiAction: number /* u32 */,
  uiParam: number /* u32 */,
  pvParam: Deno.PointerValue | Uint8Array | null /* ptr */,
  fWinIni: number /* u32 */,
  dpi: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.SystemParametersInfoForDpi(uiAction, uiParam, util.toPointer(pvParam), fWinIni, dpi));
}

export function SetThreadDpiAwarenessContext(
  dpiContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */ {
  return util.pointerFromFfi(libUSER32.SetThreadDpiAwarenessContext(util.toPointer(dpiContext)));
}

export function GetThreadDpiAwarenessContext(): Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */ {
  return util.pointerFromFfi(libUSER32.GetThreadDpiAwarenessContext());
}

export function GetWindowDpiAwarenessContext(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */ {
  return util.pointerFromFfi(libUSER32.GetWindowDpiAwarenessContext(util.hwndToFfi(hwnd)));
}

export function GetAwarenessFromDpiAwarenessContext(
  value: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
): DPI_AWARENESS /* Windows.Win32.UI.HiDpi.DPI_AWARENESS */ {
  return libUSER32.GetAwarenessFromDpiAwarenessContext(util.toPointer(value));
}

export function GetDpiFromDpiAwarenessContext(
  value: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
): number /* u32 */ {
  return libUSER32.GetDpiFromDpiAwarenessContext(util.toPointer(value));
}

export function AreDpiAwarenessContextsEqual(
  dpiContextA: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
  dpiContextB: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.AreDpiAwarenessContextsEqual(util.toPointer(dpiContextA), util.toPointer(dpiContextB)));
}

export function IsValidDpiAwarenessContext(
  value: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.IsValidDpiAwarenessContext(util.toPointer(value)));
}

export function GetDpiForWindow(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libUSER32.GetDpiForWindow(util.hwndToFfi(hwnd));
}

export function GetDpiForSystem(): number /* u32 */ {
  return libUSER32.GetDpiForSystem();
}

export function GetSystemDpiForProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libUSER32.GetSystemDpiForProcess(util.toPointer(hProcess));
}

export function EnableNonClientDpiScaling(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.EnableNonClientDpiScaling(util.hwndToFfi(hwnd)));
}

export function SetProcessDpiAwarenessContext(
  value: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32.SetProcessDpiAwarenessContext(util.toPointer(value)));
}

export function GetDpiAwarenessContextForProcess(
  hProcess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue | null /* Windows.Win32.UI.HiDpi.DPI_AWARENESS_CONTEXT */ {
  return util.pointerFromFfi(libUSER32.GetDpiAwarenessContextForProcess(util.toPointer(hProcess)));
}

export function SetThreadDpiHostingBehavior(
  value: DPI_HOSTING_BEHAVIOR /* Windows.Win32.UI.HiDpi.DPI_HOSTING_BEHAVIOR */,
): DPI_HOSTING_BEHAVIOR /* Windows.Win32.UI.HiDpi.DPI_HOSTING_BEHAVIOR */ {
  return libUSER32.SetThreadDpiHostingBehavior(value);
}

export function GetThreadDpiHostingBehavior(): DPI_HOSTING_BEHAVIOR /* Windows.Win32.UI.HiDpi.DPI_HOSTING_BEHAVIOR */ {
  return libUSER32.GetThreadDpiHostingBehavior();
}

export function GetWindowDpiHostingBehavior(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): DPI_HOSTING_BEHAVIOR /* Windows.Win32.UI.HiDpi.DPI_HOSTING_BEHAVIOR */ {
  return libUSER32.GetWindowDpiHostingBehavior(util.hwndToFfi(hwnd));
}

export function SetProcessDpiAwareness(
  value: PROCESS_DPI_AWARENESS /* Windows.Win32.UI.HiDpi.PROCESS_DPI_AWARENESS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_1.SetProcessDpiAwareness(value));
}

export function GetProcessDpiAwareness(
  hprocess: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_1.GetProcessDpiAwareness(util.toPointer(hprocess), util.toPointer(value)));
}

export function GetDpiForMonitor(
  hmonitor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Gdi.HMONITOR */,
  dpiType: MONITOR_DPI_TYPE /* Windows.Win32.UI.HiDpi.MONITOR_DPI_TYPE */,
  dpiX: Deno.PointerValue | Uint8Array | null /* ptr */,
  dpiY: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libapi_ms_win_shcore_scaling_l1_1_1.GetDpiForMonitor(util.toPointer(hmonitor), dpiType, util.toPointer(dpiX), util.toPointer(dpiY)));
}

