/// Auto-generated by Deno Win32: Windows.Win32.UI.ColorSystem.Apis

import * as util from "../../util.ts";

// Enums
export type ICM_COMMAND = number;
export type ICM_MODE = number;
export type COLOR_MATCH_TO_TARGET_ACTION = number;
export type ENHANCED_METAFILE_RECORD_TYPE = number;
export type COLORTYPE = number;
export type COLORPROFILETYPE = number;
export type COLORPROFILESUBTYPE = number;
export type COLORDATATYPE = number;
export type BMFORMAT = number;
export type WCS_PROFILE_MANAGEMENT_SCOPE = number;
export type WCS_DEVICE_CAPABILITIES_TYPE = number;

// Constants
export const ICM_ADDPROFILE = 1;
export const ICM_DELETEPROFILE = 2;
export const ICM_QUERYPROFILE = 3;
export const ICM_SETDEFAULTPROFILE = 4;
export const ICM_REGISTERICMATCHER = 5;
export const ICM_UNREGISTERICMATCHER = 6;
export const ICM_QUERYMATCH = 7;
export const ICM_OFF = 1;
export const ICM_ON = 2;
export const ICM_QUERY = 3;
export const ICM_DONE_OUTSIDEDC = 4;
export const CS_ENABLE = 1;
export const CS_DISABLE = 2;
export const CS_DELETE_TRANSFORM = 3;
export const MAX_COLOR_CHANNELS = 8;
export const INTENT_PERCEPTUAL = 0;
export const INTENT_RELATIVE_COLORIMETRIC = 1;
export const INTENT_SATURATION = 2;
export const INTENT_ABSOLUTE_COLORIMETRIC = 3;
export const FLAG_EMBEDDEDPROFILE = 1;
export const FLAG_DEPENDENTONDATA = 2;
export const FLAG_ENABLE_CHROMATIC_ADAPTATION = 33554432;
export const ATTRIB_TRANSPARENCY = 1;
export const ATTRIB_MATTE = 2;
export const PROFILE_FILENAME = 1;
export const PROFILE_MEMBUFFER = 2;
export const PROFILE_READ = 1;
export const PROFILE_READWRITE = 2;
export const INDEX_DONT_CARE = 0;
export const CMM_FROM_PROFILE = 0;
export const ENUM_TYPE_VERSION = 768;
export const ET_DEVICENAME = 1;
export const ET_MEDIATYPE = 2;
export const ET_DITHERMODE = 4;
export const ET_RESOLUTION = 8;
export const ET_CMMTYPE = 16;
export const ET_CLASS = 32;
export const ET_DATACOLORSPACE = 64;
export const ET_CONNECTIONSPACE = 128;
export const ET_SIGNATURE = 256;
export const ET_PLATFORM = 512;
export const ET_PROFILEFLAGS = 1024;
export const ET_MANUFACTURER = 2048;
export const ET_MODEL = 4096;
export const ET_ATTRIBUTES = 8192;
export const ET_RENDERINGINTENT = 16384;
export const ET_CREATOR = 32768;
export const ET_DEVICECLASS = 65536;
export const ET_STANDARDDISPLAYCOLOR = 131072;
export const ET_EXTENDEDDISPLAYCOLOR = 262144;
export const PROOF_MODE = 1;
export const NORMAL_MODE = 2;
export const BEST_MODE = 3;
export const ENABLE_GAMUT_CHECKING = 65536;
export const USE_RELATIVE_COLORIMETRIC = 131072;
export const FAST_TRANSLATE = 262144;
export const PRESERVEBLACK = 1048576;
export const WCS_ALWAYS = 2097152;
export const SEQUENTIAL_TRANSFORM = 2155872256;
export const RESERVED = 2147483648;
export const CSA_A = 1;
export const CSA_ABC = 2;
export const CSA_DEF = 3;
export const CSA_DEFG = 4;
export const CSA_GRAY = 5;
export const CSA_RGB = 6;
export const CSA_CMYK = 7;
export const CSA_Lab = 8;
export const CMM_WIN_VERSION = 0;
export const CMM_IDENT = 1;
export const CMM_DRIVER_VERSION = 2;
export const CMM_DLL_VERSION = 3;
export const CMM_VERSION = 4;
export const CMM_DESCRIPTION = 5;
export const CMM_LOGOICON = 6;
export const CMS_FORWARD = 0;
export const CMS_BACKWARD = 1;
export const COLOR_MATCH_VERSION = 512;
export const CMS_DISABLEICM = 1;
export const CMS_ENABLEPROOFING = 2;
export const CMS_SETRENDERINTENT = 4;
export const CMS_SETPROOFINTENT = 8;
export const CMS_SETMONITORPROFILE = 16;
export const CMS_SETPRINTERPROFILE = 32;
export const CMS_SETTARGETPROFILE = 64;
export const CMS_USEHOOK = 128;
export const CMS_USEAPPLYCALLBACK = 256;
export const CMS_USEDESCRIPTION = 512;
export const CMS_DISABLEINTENT = 1024;
export const CMS_DISABLERENDERINTENT = 2048;
export const CMS_MONITOROVERFLOW = `-2147483648`;
export const CMS_PRINTEROVERFLOW = 1073741824;
export const CMS_TARGETOVERFLOW = 536870912;
export const DONT_USE_EMBEDDED_WCS_PROFILES = 1;
export const WCS_DEFAULT = 0;
export const WCS_ICCONLY = 65536;
export const EMR_HEADER = 1;
export const EMR_POLYBEZIER = 2;
export const EMR_POLYGON = 3;
export const EMR_POLYLINE = 4;
export const EMR_POLYBEZIERTO = 5;
export const EMR_POLYLINETO = 6;
export const EMR_POLYPOLYLINE = 7;
export const EMR_POLYPOLYGON = 8;
export const EMR_SETWINDOWEXTEX = 9;
export const EMR_SETWINDOWORGEX = 10;
export const EMR_SETVIEWPORTEXTEX = 11;
export const EMR_SETVIEWPORTORGEX = 12;
export const EMR_SETBRUSHORGEX = 13;
export const EMR_EOF = 14;
export const EMR_SETPIXELV = 15;
export const EMR_SETMAPPERFLAGS = 16;
export const EMR_SETMAPMODE = 17;
export const EMR_SETBKMODE = 18;
export const EMR_SETPOLYFILLMODE = 19;
export const EMR_SETROP2 = 20;
export const EMR_SETSTRETCHBLTMODE = 21;
export const EMR_SETTEXTALIGN = 22;
export const EMR_SETCOLORADJUSTMENT = 23;
export const EMR_SETTEXTCOLOR = 24;
export const EMR_SETBKCOLOR = 25;
export const EMR_OFFSETCLIPRGN = 26;
export const EMR_MOVETOEX = 27;
export const EMR_SETMETARGN = 28;
export const EMR_EXCLUDECLIPRECT = 29;
export const EMR_INTERSECTCLIPRECT = 30;
export const EMR_SCALEVIEWPORTEXTEX = 31;
export const EMR_SCALEWINDOWEXTEX = 32;
export const EMR_SAVEDC = 33;
export const EMR_RESTOREDC = 34;
export const EMR_SETWORLDTRANSFORM = 35;
export const EMR_MODIFYWORLDTRANSFORM = 36;
export const EMR_SELECTOBJECT = 37;
export const EMR_CREATEPEN = 38;
export const EMR_CREATEBRUSHINDIRECT = 39;
export const EMR_DELETEOBJECT = 40;
export const EMR_ANGLEARC = 41;
export const EMR_ELLIPSE = 42;
export const EMR_RECTANGLE = 43;
export const EMR_ROUNDRECT = 44;
export const EMR_ARC = 45;
export const EMR_CHORD = 46;
export const EMR_PIE = 47;
export const EMR_SELECTPALETTE = 48;
export const EMR_CREATEPALETTE = 49;
export const EMR_SETPALETTEENTRIES = 50;
export const EMR_RESIZEPALETTE = 51;
export const EMR_REALIZEPALETTE = 52;
export const EMR_EXTFLOODFILL = 53;
export const EMR_LINETO = 54;
export const EMR_ARCTO = 55;
export const EMR_POLYDRAW = 56;
export const EMR_SETARCDIRECTION = 57;
export const EMR_SETMITERLIMIT = 58;
export const EMR_BEGINPATH = 59;
export const EMR_ENDPATH = 60;
export const EMR_CLOSEFIGURE = 61;
export const EMR_FILLPATH = 62;
export const EMR_STROKEANDFILLPATH = 63;
export const EMR_STROKEPATH = 64;
export const EMR_FLATTENPATH = 65;
export const EMR_WIDENPATH = 66;
export const EMR_SELECTCLIPPATH = 67;
export const EMR_ABORTPATH = 68;
export const EMR_GDICOMMENT = 70;
export const EMR_FILLRGN = 71;
export const EMR_FRAMERGN = 72;
export const EMR_INVERTRGN = 73;
export const EMR_PAINTRGN = 74;
export const EMR_EXTSELECTCLIPRGN = 75;
export const EMR_BITBLT = 76;
export const EMR_STRETCHBLT = 77;
export const EMR_MASKBLT = 78;
export const EMR_PLGBLT = 79;
export const EMR_SETDIBITSTODEVICE = 80;
export const EMR_STRETCHDIBITS = 81;
export const EMR_EXTCREATEFONTINDIRECTW = 82;
export const EMR_EXTTEXTOUTA = 83;
export const EMR_EXTTEXTOUTW = 84;
export const EMR_POLYBEZIER16 = 85;
export const EMR_POLYGON16 = 86;
export const EMR_POLYLINE16 = 87;
export const EMR_POLYBEZIERTO16 = 88;
export const EMR_POLYLINETO16 = 89;
export const EMR_POLYPOLYLINE16 = 90;
export const EMR_POLYPOLYGON16 = 91;
export const EMR_POLYDRAW16 = 92;
export const EMR_CREATEMONOBRUSH = 93;
export const EMR_CREATEDIBPATTERNBRUSHPT = 94;
export const EMR_EXTCREATEPEN = 95;
export const EMR_POLYTEXTOUTA = 96;
export const EMR_POLYTEXTOUTW = 97;
export const EMR_SETICMMODE = 98;
export const EMR_CREATECOLORSPACE = 99;
export const EMR_SETCOLORSPACE = 100;
export const EMR_DELETECOLORSPACE = 101;
export const EMR_GLSRECORD = 102;
export const EMR_GLSBOUNDEDRECORD = 103;
export const EMR_PIXELFORMAT = 104;
export const EMR_RESERVED_105 = 105;
export const EMR_RESERVED_106 = 106;
export const EMR_RESERVED_107 = 107;
export const EMR_RESERVED_108 = 108;
export const EMR_RESERVED_109 = 109;
export const EMR_RESERVED_110 = 110;
export const EMR_COLORCORRECTPALETTE = 111;
export const EMR_SETICMPROFILEA = 112;
export const EMR_SETICMPROFILEW = 113;
export const EMR_ALPHABLEND = 114;
export const EMR_SETLAYOUT = 115;
export const EMR_TRANSPARENTBLT = 116;
export const EMR_RESERVED_117 = 117;
export const EMR_GRADIENTFILL = 118;
export const EMR_RESERVED_119 = 119;
export const EMR_RESERVED_120 = 120;
export const EMR_COLORMATCHTOTARGETW = 121;
export const EMR_CREATECOLORSPACEW = 122;
export const EMR_MIN = 1;
export const EMR_MAX = 122;
export const COLOR_GRAY = 1;
export const COLOR_RGB = 2;
export const COLOR_XYZ = 3;
export const COLOR_Yxy = 4;
export const COLOR_Lab = 5;
export const COLOR_3_CHANNEL = 6;
export const COLOR_CMYK = 7;
export const COLOR_5_CHANNEL = 8;
export const COLOR_6_CHANNEL = 9;
export const COLOR_7_CHANNEL = 10;
export const COLOR_8_CHANNEL = 11;
export const COLOR_NAMED = 12;
export const CPT_ICC = 0;
export const CPT_DMP = 1;
export const CPT_CAMP = 2;
export const CPT_GMMP = 3;
export const CPST_PERCEPTUAL = 0;
export const CPST_RELATIVE_COLORIMETRIC = 1;
export const CPST_SATURATION = 2;
export const CPST_ABSOLUTE_COLORIMETRIC = 3;
export const CPST_NONE = 4;
export const CPST_RGB_WORKING_SPACE = 5;
export const CPST_CUSTOM_WORKING_SPACE = 6;
export const CPST_STANDARD_DISPLAY_COLOR_MODE = 7;
export const CPST_EXTENDED_DISPLAY_COLOR_MODE = 8;
export const COLOR_BYTE = 1;
export const COLOR_WORD = 2;
export const COLOR_FLOAT = 3;
export const COLOR_S2DOT13FIXED = 4;
export const COLOR_10b_R10G10B10A2 = 5;
export const COLOR_10b_R10G10B10A2_XR = 6;
export const COLOR_FLOAT16 = 7;
export const BM_x555RGB = 0;
export const BM_x555XYZ = 257;
export const BM_x555Yxy = 258;
export const BM_x555Lab = 259;
export const BM_x555G3CH = 260;
export const BM_RGBTRIPLETS = 2;
export const BM_BGRTRIPLETS = 4;
export const BM_XYZTRIPLETS = 513;
export const BM_YxyTRIPLETS = 514;
export const BM_LabTRIPLETS = 515;
export const BM_G3CHTRIPLETS = 516;
export const BM_5CHANNEL = 517;
export const BM_6CHANNEL = 518;
export const BM_7CHANNEL = 519;
export const BM_8CHANNEL = 520;
export const BM_GRAY = 521;
export const BM_xRGBQUADS = 8;
export const BM_xBGRQUADS = 16;
export const BM_xG3CHQUADS = 772;
export const BM_KYMCQUADS = 773;
export const BM_CMYKQUADS = 32;
export const BM_10b_RGB = 9;
export const BM_10b_XYZ = 1025;
export const BM_10b_Yxy = 1026;
export const BM_10b_Lab = 1027;
export const BM_10b_G3CH = 1028;
export const BM_NAMED_INDEX = 1029;
export const BM_16b_RGB = 10;
export const BM_16b_XYZ = 1281;
export const BM_16b_Yxy = 1282;
export const BM_16b_Lab = 1283;
export const BM_16b_G3CH = 1284;
export const BM_16b_GRAY = 1285;
export const BM_565RGB = 1;
export const BM_32b_scRGB = 1537;
export const BM_32b_scARGB = 1538;
export const BM_S2DOT13FIXED_scRGB = 1539;
export const BM_S2DOT13FIXED_scARGB = 1540;
export const BM_R10G10B10A2 = 1793;
export const BM_R10G10B10A2_XR = 1794;
export const BM_R16G16B16A16_FLOAT = 1795;
export const WCS_PROFILE_MANAGEMENT_SCOPE_SYSTEM_WIDE = 0;
export const WCS_PROFILE_MANAGEMENT_SCOPE_CURRENT_USER = 1;
export const VideoCardGammaTable = 1;
export const MicrosoftHardwareColorV2 = 2;

// Structs

export type HCOLORSPACE = bigint | number;

/**
 * Windows.Win32.Graphics.Gdi.CIEXYZ (size: 16)
 */
export interface CIEXYZ {
  /** i32 */
  ciexyzX: number;
  /** i32 */
  ciexyzY: number;
  /** i32 */
  ciexyzZ: number;
}

export const sizeofCIEXYZ = 16;

export function allocCIEXYZ(data?: Partial<CIEXYZ>): Uint8Array {
  const buf = new Uint8Array(sizeofCIEXYZ);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ciexyzX !== undefined) view.setInt32(0, Number(data.ciexyzX), true);
  // 0x04: i32
  if (data?.ciexyzY !== undefined) view.setInt32(4, Number(data.ciexyzY), true);
  // 0x08: i32
  if (data?.ciexyzZ !== undefined) view.setInt32(8, Number(data.ciexyzZ), true);
  // 0x0c: pad4
  return buf;
}

export class CIEXYZView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ciexyzX(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ciexyzY(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get ciexyzZ(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set ciexyzX(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ciexyzY(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set ciexyzZ(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Gdi.CIEXYZTRIPLE (size: 24)
 */
export interface CIEXYZTRIPLE {
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  ciexyzRed: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  ciexyzGreen: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  ciexyzBlue: Uint8Array | Deno.PointerValue;
}

export const sizeofCIEXYZTRIPLE = 24;

export function allocCIEXYZTRIPLE(data?: Partial<CIEXYZTRIPLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCIEXYZTRIPLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ciexyzRed !== undefined) view.setBigUint64(0, data.ciexyzRed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ciexyzRed))), true);
  // 0x08: pointer
  if (data?.ciexyzGreen !== undefined) view.setBigUint64(8, data.ciexyzGreen === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ciexyzGreen))), true);
  // 0x10: pointer
  if (data?.ciexyzBlue !== undefined) view.setBigUint64(16, data.ciexyzBlue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ciexyzBlue))), true);
  return buf;
}

export class CIEXYZTRIPLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ciexyzRed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ciexyzGreen(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ciexyzBlue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ciexyzRed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ciexyzGreen(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ciexyzBlue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.LOGCOLORSPACEA (size: 56)
 */
export interface LOGCOLORSPACEA {
  /** u32 */
  lcsSignature: number;
  /** u32 */
  lcsVersion: number;
  /** u32 */
  lcsSize: number;
  /** i32 */
  lcsCSType: number;
  /** i32 */
  lcsIntent: number;
  /** Windows.Win32.Graphics.Gdi.CIEXYZTRIPLE */
  lcsEndpoints: Uint8Array | Deno.PointerValue;
  /** u32 */
  lcsGammaRed: number;
  /** u32 */
  lcsGammaGreen: number;
  /** u32 */
  lcsGammaBlue: number;
  /** array */
  lcsFilename: Deno.PointerValue;
}

export const sizeofLOGCOLORSPACEA = 56;

export function allocLOGCOLORSPACEA(data?: Partial<LOGCOLORSPACEA>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGCOLORSPACEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lcsSignature !== undefined) view.setUint32(0, Number(data.lcsSignature), true);
  // 0x04: u32
  if (data?.lcsVersion !== undefined) view.setUint32(4, Number(data.lcsVersion), true);
  // 0x08: u32
  if (data?.lcsSize !== undefined) view.setUint32(8, Number(data.lcsSize), true);
  // 0x0c: i32
  if (data?.lcsCSType !== undefined) view.setInt32(12, Number(data.lcsCSType), true);
  // 0x10: i32
  if (data?.lcsIntent !== undefined) view.setInt32(16, Number(data.lcsIntent), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lcsEndpoints !== undefined) view.setBigUint64(24, data.lcsEndpoints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lcsEndpoints))), true);
  // 0x20: u32
  if (data?.lcsGammaRed !== undefined) view.setUint32(32, Number(data.lcsGammaRed), true);
  // 0x24: u32
  if (data?.lcsGammaGreen !== undefined) view.setUint32(36, Number(data.lcsGammaGreen), true);
  // 0x28: u32
  if (data?.lcsGammaBlue !== undefined) view.setUint32(40, Number(data.lcsGammaBlue), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lcsFilename !== undefined) view.setBigUint64(48, data.lcsFilename === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lcsFilename))), true);
  return buf;
}

export class LOGCOLORSPACEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lcsSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get lcsVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get lcsSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get lcsCSType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lcsIntent(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lcsEndpoints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get lcsGammaRed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get lcsGammaGreen(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get lcsGammaBlue(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lcsFilename(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lcsSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set lcsVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set lcsSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set lcsCSType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lcsIntent(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lcsEndpoints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set lcsGammaRed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set lcsGammaGreen(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set lcsGammaBlue(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lcsFilename(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.LOGCOLORSPACEW (size: 56)
 */
export interface LOGCOLORSPACEW {
  /** u32 */
  lcsSignature: number;
  /** u32 */
  lcsVersion: number;
  /** u32 */
  lcsSize: number;
  /** i32 */
  lcsCSType: number;
  /** i32 */
  lcsIntent: number;
  /** Windows.Win32.Graphics.Gdi.CIEXYZTRIPLE */
  lcsEndpoints: Uint8Array | Deno.PointerValue;
  /** u32 */
  lcsGammaRed: number;
  /** u32 */
  lcsGammaGreen: number;
  /** u32 */
  lcsGammaBlue: number;
  /** array */
  lcsFilename: Deno.PointerValue;
}

export const sizeofLOGCOLORSPACEW = 56;

export function allocLOGCOLORSPACEW(data?: Partial<LOGCOLORSPACEW>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGCOLORSPACEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lcsSignature !== undefined) view.setUint32(0, Number(data.lcsSignature), true);
  // 0x04: u32
  if (data?.lcsVersion !== undefined) view.setUint32(4, Number(data.lcsVersion), true);
  // 0x08: u32
  if (data?.lcsSize !== undefined) view.setUint32(8, Number(data.lcsSize), true);
  // 0x0c: i32
  if (data?.lcsCSType !== undefined) view.setInt32(12, Number(data.lcsCSType), true);
  // 0x10: i32
  if (data?.lcsIntent !== undefined) view.setInt32(16, Number(data.lcsIntent), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lcsEndpoints !== undefined) view.setBigUint64(24, data.lcsEndpoints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lcsEndpoints))), true);
  // 0x20: u32
  if (data?.lcsGammaRed !== undefined) view.setUint32(32, Number(data.lcsGammaRed), true);
  // 0x24: u32
  if (data?.lcsGammaGreen !== undefined) view.setUint32(36, Number(data.lcsGammaGreen), true);
  // 0x28: u32
  if (data?.lcsGammaBlue !== undefined) view.setUint32(40, Number(data.lcsGammaBlue), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lcsFilename !== undefined) view.setBigUint64(48, data.lcsFilename === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lcsFilename))), true);
  return buf;
}

export class LOGCOLORSPACEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lcsSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get lcsVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get lcsSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get lcsCSType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lcsIntent(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lcsEndpoints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get lcsGammaRed(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get lcsGammaGreen(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get lcsGammaBlue(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lcsFilename(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lcsSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set lcsVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set lcsSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set lcsCSType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lcsIntent(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lcsEndpoints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set lcsGammaRed(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set lcsGammaGreen(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set lcsGammaBlue(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lcsFilename(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.EMR (size: 8)
 */
export interface EMR {
  /** Windows.Win32.Graphics.Gdi.ENHANCED_METAFILE_RECORD_TYPE */
  iType: ENHANCED_METAFILE_RECORD_TYPE;
  /** u32 */
  nSize: number;
}

export const sizeofEMR = 8;

export function allocEMR(data?: Partial<EMR>): Uint8Array {
  const buf = new Uint8Array(sizeofEMR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iType !== undefined) view.setUint32(0, Number(data.iType), true);
  // 0x04: u32
  if (data?.nSize !== undefined) view.setUint32(4, Number(data.nSize), true);
  return buf;
}

export class EMRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set iType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nSize(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.EMRCREATECOLORSPACE (size: 24)
 */
export interface EMRCREATECOLORSPACE {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihCS: number;
  /** Windows.Win32.UI.ColorSystem.LOGCOLORSPACEA */
  lcs: Uint8Array | Deno.PointerValue;
}

export const sizeofEMRCREATECOLORSPACE = 24;

export function allocEMRCREATECOLORSPACE(data?: Partial<EMRCREATECOLORSPACE>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATECOLORSPACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihCS !== undefined) view.setUint32(8, Number(data.ihCS), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lcs !== undefined) view.setBigUint64(16, data.lcs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lcs))), true);
  return buf;
}

export class EMRCREATECOLORSPACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihCS(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lcs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihCS(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lcs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.EMRCREATECOLORSPACEW (size: 40)
 */
export interface EMRCREATECOLORSPACEW {
  /** Windows.Win32.Graphics.Gdi.EMR */
  emr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ihCS: number;
  /** Windows.Win32.UI.ColorSystem.LOGCOLORSPACEW */
  lcs: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbData: number;
  /** array */
  Data: Deno.PointerValue;
}

export const sizeofEMRCREATECOLORSPACEW = 40;

export function allocEMRCREATECOLORSPACEW(data?: Partial<EMRCREATECOLORSPACEW>): Uint8Array {
  const buf = new Uint8Array(sizeofEMRCREATECOLORSPACEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.emr !== undefined) view.setBigUint64(0, data.emr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.emr))), true);
  // 0x08: u32
  if (data?.ihCS !== undefined) view.setUint32(8, Number(data.ihCS), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lcs !== undefined) view.setBigUint64(16, data.lcs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lcs))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: u32
  if (data?.cbData !== undefined) view.setUint32(28, Number(data.cbData), true);
  // 0x20: pointer
  if (data?.Data !== undefined) view.setBigUint64(32, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class EMRCREATECOLORSPACEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get emr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ihCS(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lcs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbData(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set emr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ihCS(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lcs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbData(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.XYZColorF (size: 16)
 */
export interface XYZColorF {
  /** f32 */
  X: number;
  /** f32 */
  Y: number;
  /** f32 */
  Z: number;
}

export const sizeofXYZColorF = 16;

export function allocXYZColorF(data?: Partial<XYZColorF>): Uint8Array {
  const buf = new Uint8Array(sizeofXYZColorF);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.X !== undefined) view.setFloat32(0, Number(data.X), true);
  // 0x04: f32
  if (data?.Y !== undefined) view.setFloat32(4, Number(data.Y), true);
  // 0x08: f32
  if (data?.Z !== undefined) view.setFloat32(8, Number(data.Z), true);
  // 0x0c: pad4
  return buf;
}

export class XYZColorFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get X(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set X(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.ColorSystem.JChColorF (size: 16)
 */
export interface JChColorF {
  /** f32 */
  J: number;
  /** f32 */
  C: number;
  /** f32 */
  h: number;
}

export const sizeofJChColorF = 16;

export function allocJChColorF(data?: Partial<JChColorF>): Uint8Array {
  const buf = new Uint8Array(sizeofJChColorF);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.J !== undefined) view.setFloat32(0, Number(data.J), true);
  // 0x04: f32
  if (data?.C !== undefined) view.setFloat32(4, Number(data.C), true);
  // 0x08: f32
  if (data?.h !== undefined) view.setFloat32(8, Number(data.h), true);
  // 0x0c: pad4
  return buf;
}

export class JChColorFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get J(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get C(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get h(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set J(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set C(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set h(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.ColorSystem.JabColorF (size: 16)
 */
export interface JabColorF {
  /** f32 */
  J: number;
  /** f32 */
  a: number;
  /** f32 */
  b: number;
}

export const sizeofJabColorF = 16;

export function allocJabColorF(data?: Partial<JabColorF>): Uint8Array {
  const buf = new Uint8Array(sizeofJabColorF);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.J !== undefined) view.setFloat32(0, Number(data.J), true);
  // 0x04: f32
  if (data?.a !== undefined) view.setFloat32(4, Number(data.a), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: pad4
  return buf;
}

export class JabColorFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get J(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get a(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set J(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set a(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.ColorSystem.GamutShellTriangle (size: 8)
 */
export interface GamutShellTriangle {
  /** array */
  aVertexIndex: Deno.PointerValue;
}

export const sizeofGamutShellTriangle = 8;

export function allocGamutShellTriangle(data?: Partial<GamutShellTriangle>): Uint8Array {
  const buf = new Uint8Array(sizeofGamutShellTriangle);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.aVertexIndex !== undefined) view.setBigUint64(0, data.aVertexIndex === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aVertexIndex))), true);
  return buf;
}

export class GamutShellTriangleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get aVertexIndex(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set aVertexIndex(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.GamutShell (size: 32)
 */
export interface GamutShell {
  /** f32 */
  JMin: number;
  /** f32 */
  JMax: number;
  /** u32 */
  cVertices: number;
  /** u32 */
  cTriangles: number;
  /** ptr */
  pVertices: Deno.PointerValue | Uint8Array;
  /** ptr */
  pTriangles: Deno.PointerValue | Uint8Array;
}

export const sizeofGamutShell = 32;

export function allocGamutShell(data?: Partial<GamutShell>): Uint8Array {
  const buf = new Uint8Array(sizeofGamutShell);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.JMin !== undefined) view.setFloat32(0, Number(data.JMin), true);
  // 0x04: f32
  if (data?.JMax !== undefined) view.setFloat32(4, Number(data.JMax), true);
  // 0x08: u32
  if (data?.cVertices !== undefined) view.setUint32(8, Number(data.cVertices), true);
  // 0x0c: u32
  if (data?.cTriangles !== undefined) view.setUint32(12, Number(data.cTriangles), true);
  // 0x10: pointer
  if (data?.pVertices !== undefined) view.setBigUint64(16, data.pVertices === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVertices))), true);
  // 0x18: pointer
  if (data?.pTriangles !== undefined) view.setBigUint64(24, data.pTriangles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTriangles))), true);
  return buf;
}

export class GamutShellView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get JMin(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get JMax(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: u32
  get cVertices(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cTriangles(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pVertices(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pTriangles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: f32
  set JMin(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set JMax(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: u32
  set cVertices(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cTriangles(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pVertices(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pTriangles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.PrimaryJabColors (size: 64)
 */
export interface PrimaryJabColors {
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  red: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  yellow: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  green: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  cyan: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  blue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  magenta: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  black: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.JabColorF */
  white: Uint8Array | Deno.PointerValue;
}

export const sizeofPrimaryJabColors = 64;

export function allocPrimaryJabColors(data?: Partial<PrimaryJabColors>): Uint8Array {
  const buf = new Uint8Array(sizeofPrimaryJabColors);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.red !== undefined) view.setBigUint64(0, data.red === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.red))), true);
  // 0x08: pointer
  if (data?.yellow !== undefined) view.setBigUint64(8, data.yellow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.yellow))), true);
  // 0x10: pointer
  if (data?.green !== undefined) view.setBigUint64(16, data.green === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.green))), true);
  // 0x18: pointer
  if (data?.cyan !== undefined) view.setBigUint64(24, data.cyan === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cyan))), true);
  // 0x20: pointer
  if (data?.blue !== undefined) view.setBigUint64(32, data.blue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.blue))), true);
  // 0x28: pointer
  if (data?.magenta !== undefined) view.setBigUint64(40, data.magenta === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.magenta))), true);
  // 0x30: pointer
  if (data?.black !== undefined) view.setBigUint64(48, data.black === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.black))), true);
  // 0x38: pointer
  if (data?.white !== undefined) view.setBigUint64(56, data.white === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.white))), true);
  return buf;
}

export class PrimaryJabColorsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get red(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get yellow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get green(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get cyan(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get blue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get magenta(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get black(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get white(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set red(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set yellow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set green(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set cyan(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set blue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set magenta(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set black(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set white(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.PrimaryXYZColors (size: 64)
 */
export interface PrimaryXYZColors {
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  red: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  yellow: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  green: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  cyan: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  blue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  magenta: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  black: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZColorF */
  white: Uint8Array | Deno.PointerValue;
}

export const sizeofPrimaryXYZColors = 64;

export function allocPrimaryXYZColors(data?: Partial<PrimaryXYZColors>): Uint8Array {
  const buf = new Uint8Array(sizeofPrimaryXYZColors);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.red !== undefined) view.setBigUint64(0, data.red === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.red))), true);
  // 0x08: pointer
  if (data?.yellow !== undefined) view.setBigUint64(8, data.yellow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.yellow))), true);
  // 0x10: pointer
  if (data?.green !== undefined) view.setBigUint64(16, data.green === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.green))), true);
  // 0x18: pointer
  if (data?.cyan !== undefined) view.setBigUint64(24, data.cyan === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cyan))), true);
  // 0x20: pointer
  if (data?.blue !== undefined) view.setBigUint64(32, data.blue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.blue))), true);
  // 0x28: pointer
  if (data?.magenta !== undefined) view.setBigUint64(40, data.magenta === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.magenta))), true);
  // 0x30: pointer
  if (data?.black !== undefined) view.setBigUint64(48, data.black === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.black))), true);
  // 0x38: pointer
  if (data?.white !== undefined) view.setBigUint64(56, data.white === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.white))), true);
  return buf;
}

export class PrimaryXYZColorsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get red(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get yellow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get green(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get cyan(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get blue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get magenta(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get black(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get white(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set red(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set yellow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set green(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set cyan(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set blue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set magenta(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set black(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set white(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.GamutBoundaryDescription (size: 48)
 */
export interface GamutBoundaryDescription {
  /** ptr */
  pPrimaries: Deno.PointerValue | Uint8Array;
  /** u32 */
  cNeutralSamples: number;
  /** ptr */
  pNeutralSamples: Deno.PointerValue | Uint8Array;
  /** ptr */
  pReferenceShell: Deno.PointerValue | Uint8Array;
  /** ptr */
  pPlausibleShell: Deno.PointerValue | Uint8Array;
  /** ptr */
  pPossibleShell: Deno.PointerValue | Uint8Array;
}

export const sizeofGamutBoundaryDescription = 48;

export function allocGamutBoundaryDescription(data?: Partial<GamutBoundaryDescription>): Uint8Array {
  const buf = new Uint8Array(sizeofGamutBoundaryDescription);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPrimaries !== undefined) view.setBigUint64(0, data.pPrimaries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrimaries))), true);
  // 0x08: u32
  if (data?.cNeutralSamples !== undefined) view.setUint32(8, Number(data.cNeutralSamples), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pNeutralSamples !== undefined) view.setBigUint64(16, data.pNeutralSamples === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pNeutralSamples))), true);
  // 0x18: pointer
  if (data?.pReferenceShell !== undefined) view.setBigUint64(24, data.pReferenceShell === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pReferenceShell))), true);
  // 0x20: pointer
  if (data?.pPlausibleShell !== undefined) view.setBigUint64(32, data.pPlausibleShell === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPlausibleShell))), true);
  // 0x28: pointer
  if (data?.pPossibleShell !== undefined) view.setBigUint64(40, data.pPossibleShell === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPossibleShell))), true);
  return buf;
}

export class GamutBoundaryDescriptionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pPrimaries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cNeutralSamples(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pNeutralSamples(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pReferenceShell(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pPlausibleShell(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pPossibleShell(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pPrimaries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cNeutralSamples(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pNeutralSamples(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pReferenceShell(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pPlausibleShell(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pPossibleShell(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.UI.ColorSystem.BlackInformation (size: 8)
 */
export interface BlackInformation {
  /** Windows.Win32.Foundation.BOOL */
  fBlackOnly: boolean;
  /** f32 */
  blackWeight: number;
}

export const sizeofBlackInformation = 8;

export function allocBlackInformation(data?: Partial<BlackInformation>): Uint8Array {
  const buf = new Uint8Array(sizeofBlackInformation);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fBlackOnly !== undefined) view.setInt32(0, Number(data.fBlackOnly), true);
  // 0x04: f32
  if (data?.blackWeight !== undefined) view.setFloat32(4, Number(data.blackWeight), true);
  return buf;
}

export class BlackInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fBlackOnly(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get blackWeight(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: i32
  set fBlackOnly(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set blackWeight(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.NAMED_PROFILE_INFO (size: 32)
 */
export interface NAMED_PROFILE_INFO {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCount: number;
  /** u32 */
  dwCountDevCoordinates: number;
  /** array */
  szPrefix: Deno.PointerValue;
  /** array */
  szSuffix: Deno.PointerValue;
}

export const sizeofNAMED_PROFILE_INFO = 32;

export function allocNAMED_PROFILE_INFO(data?: Partial<NAMED_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNAMED_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwCount !== undefined) view.setUint32(4, Number(data.dwCount), true);
  // 0x08: u32
  if (data?.dwCountDevCoordinates !== undefined) view.setUint32(8, Number(data.dwCountDevCoordinates), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szPrefix !== undefined) view.setBigUint64(16, data.szPrefix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szPrefix))), true);
  // 0x18: pointer
  if (data?.szSuffix !== undefined) view.setBigUint64(24, data.szSuffix === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szSuffix))), true);
  return buf;
}

export class NAMED_PROFILE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCountDevCoordinates(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szPrefix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szSuffix(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCountDevCoordinates(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szPrefix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szSuffix(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.GRAYCOLOR (size: 8)
 */
export interface GRAYCOLOR {
  /** u16 */
  gray: number;
}

export const sizeofGRAYCOLOR = 8;

export function allocGRAYCOLOR(data?: Partial<GRAYCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofGRAYCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.gray !== undefined) view.setUint16(0, Number(data.gray), true);
  // 0x02: pad6
  return buf;
}

export class GRAYCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get gray(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set gray(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.UI.ColorSystem.RGBCOLOR (size: 8)
 */
export interface RGBCOLOR {
  /** u16 */
  red: number;
  /** u16 */
  green: number;
  /** u16 */
  blue: number;
}

export const sizeofRGBCOLOR = 8;

export function allocRGBCOLOR(data?: Partial<RGBCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofRGBCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.red !== undefined) view.setUint16(0, Number(data.red), true);
  // 0x02: u16
  if (data?.green !== undefined) view.setUint16(2, Number(data.green), true);
  // 0x04: u16
  if (data?.blue !== undefined) view.setUint16(4, Number(data.blue), true);
  // 0x06: pad2
  return buf;
}

export class RGBCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get red(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get green(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get blue(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set red(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set green(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set blue(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.UI.ColorSystem.CMYKCOLOR (size: 8)
 */
export interface CMYKCOLOR {
  /** u16 */
  cyan: number;
  /** u16 */
  magenta: number;
  /** u16 */
  yellow: number;
  /** u16 */
  black: number;
}

export const sizeofCMYKCOLOR = 8;

export function allocCMYKCOLOR(data?: Partial<CMYKCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCMYKCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cyan !== undefined) view.setUint16(0, Number(data.cyan), true);
  // 0x02: u16
  if (data?.magenta !== undefined) view.setUint16(2, Number(data.magenta), true);
  // 0x04: u16
  if (data?.yellow !== undefined) view.setUint16(4, Number(data.yellow), true);
  // 0x06: u16
  if (data?.black !== undefined) view.setUint16(6, Number(data.black), true);
  return buf;
}

export class CMYKCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cyan(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get magenta(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get yellow(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get black(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set cyan(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set magenta(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set yellow(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set black(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.XYZCOLOR (size: 8)
 */
export interface XYZCOLOR {
  /** u16 */
  X: number;
  /** u16 */
  Y: number;
  /** u16 */
  Z: number;
}

export const sizeofXYZCOLOR = 8;

export function allocXYZCOLOR(data?: Partial<XYZCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofXYZCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.X !== undefined) view.setUint16(0, Number(data.X), true);
  // 0x02: u16
  if (data?.Y !== undefined) view.setUint16(2, Number(data.Y), true);
  // 0x04: u16
  if (data?.Z !== undefined) view.setUint16(4, Number(data.Z), true);
  // 0x06: pad2
  return buf;
}

export class XYZCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get X(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Y(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Z(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set X(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Y(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Z(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.UI.ColorSystem.YxyCOLOR (size: 8)
 */
export interface YxyCOLOR {
  /** u16 */
  Y: number;
  /** u16 */
  x: number;
  /** u16 */
  y: number;
}

export const sizeofYxyCOLOR = 8;

export function allocYxyCOLOR(data?: Partial<YxyCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofYxyCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Y !== undefined) view.setUint16(0, Number(data.Y), true);
  // 0x02: u16
  if (data?.x !== undefined) view.setUint16(2, Number(data.x), true);
  // 0x04: u16
  if (data?.y !== undefined) view.setUint16(4, Number(data.y), true);
  // 0x06: pad2
  return buf;
}

export class YxyCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Y(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get x(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get y(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set Y(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set x(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set y(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.UI.ColorSystem.LabCOLOR (size: 8)
 */
export interface LabCOLOR {
  /** u16 */
  L: number;
  /** u16 */
  a: number;
  /** u16 */
  b: number;
}

export const sizeofLabCOLOR = 8;

export function allocLabCOLOR(data?: Partial<LabCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofLabCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.L !== undefined) view.setUint16(0, Number(data.L), true);
  // 0x02: u16
  if (data?.a !== undefined) view.setUint16(2, Number(data.a), true);
  // 0x04: u16
  if (data?.b !== undefined) view.setUint16(4, Number(data.b), true);
  // 0x06: pad2
  return buf;
}

export class LabCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get L(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get a(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get b(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set L(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set a(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set b(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.UI.ColorSystem.GENERIC3CHANNEL (size: 8)
 */
export interface GENERIC3CHANNEL {
  /** u16 */
  ch1: number;
  /** u16 */
  ch2: number;
  /** u16 */
  ch3: number;
}

export const sizeofGENERIC3CHANNEL = 8;

export function allocGENERIC3CHANNEL(data?: Partial<GENERIC3CHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofGENERIC3CHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ch1 !== undefined) view.setUint16(0, Number(data.ch1), true);
  // 0x02: u16
  if (data?.ch2 !== undefined) view.setUint16(2, Number(data.ch2), true);
  // 0x04: u16
  if (data?.ch3 !== undefined) view.setUint16(4, Number(data.ch3), true);
  // 0x06: pad2
  return buf;
}

export class GENERIC3CHANNELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ch1(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get ch2(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get ch3(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set ch1(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set ch2(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set ch3(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.UI.ColorSystem.NAMEDCOLOR (size: 8)
 */
export interface NAMEDCOLOR {
  /** u32 */
  dwIndex: number;
}

export const sizeofNAMEDCOLOR = 8;

export function allocNAMEDCOLOR(data?: Partial<NAMEDCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofNAMEDCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIndex !== undefined) view.setUint32(0, Number(data.dwIndex), true);
  // 0x04: pad4
  return buf;
}

export class NAMEDCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.UI.ColorSystem.HiFiCOLOR (size: 8)
 */
export interface HiFiCOLOR {
  /** array */
  channel: Deno.PointerValue;
}

export const sizeofHiFiCOLOR = 8;

export function allocHiFiCOLOR(data?: Partial<HiFiCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofHiFiCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channel !== undefined) view.setBigUint64(0, data.channel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.channel))), true);
  return buf;
}

export class HiFiCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get channel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set channel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.COLOR (size: 80)
 */
export interface COLOR {
  /** Windows.Win32.UI.ColorSystem.GRAYCOLOR */
  gray: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.RGBCOLOR */
  rgb: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.CMYKCOLOR */
  cmyk: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.XYZCOLOR */
  XYZ: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.YxyCOLOR */
  Yxy: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.LabCOLOR */
  Lab: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.GENERIC3CHANNEL */
  gen3ch: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.NAMEDCOLOR */
  named: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.HiFiCOLOR */
  hifi: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofCOLOR = 80;

export function allocCOLOR(data?: Partial<COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.gray !== undefined) view.setBigUint64(0, data.gray === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gray))), true);
  // 0x08: pointer
  if (data?.rgb !== undefined) view.setBigUint64(8, data.rgb === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgb))), true);
  // 0x10: pointer
  if (data?.cmyk !== undefined) view.setBigUint64(16, data.cmyk === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cmyk))), true);
  // 0x18: pointer
  if (data?.XYZ !== undefined) view.setBigUint64(24, data.XYZ === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.XYZ))), true);
  // 0x20: pointer
  if (data?.Yxy !== undefined) view.setBigUint64(32, data.Yxy === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Yxy))), true);
  // 0x28: pointer
  if (data?.Lab !== undefined) view.setBigUint64(40, data.Lab === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Lab))), true);
  // 0x30: pointer
  if (data?.gen3ch !== undefined) view.setBigUint64(48, data.gen3ch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gen3ch))), true);
  // 0x38: pointer
  if (data?.named !== undefined) view.setBigUint64(56, data.named === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.named))), true);
  // 0x40: pointer
  if (data?.hifi !== undefined) view.setBigUint64(64, data.hifi === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hifi))), true);
  // 0x48: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(72, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class COLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get gray(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rgb(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get cmyk(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get XYZ(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Yxy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Lab(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get gen3ch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get named(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hifi(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set gray(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rgb(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set cmyk(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set XYZ(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Yxy(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Lab(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set gen3ch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set named(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hifi(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.PROFILEHEADER (size: 96)
 */
export interface PROFILEHEADER {
  /** u32 */
  phSize: number;
  /** u32 */
  phCMMType: number;
  /** u32 */
  phVersion: number;
  /** u32 */
  phClass: number;
  /** u32 */
  phDataColorSpace: number;
  /** u32 */
  phConnectionSpace: number;
  /** array */
  phDateTime: Deno.PointerValue;
  /** u32 */
  phSignature: number;
  /** u32 */
  phPlatform: number;
  /** u32 */
  phProfileFlags: number;
  /** u32 */
  phManufacturer: number;
  /** u32 */
  phModel: number;
  /** array */
  phAttributes: Deno.PointerValue;
  /** u32 */
  phRenderingIntent: number;
  /** Windows.Win32.Graphics.Gdi.CIEXYZ */
  phIlluminant: Uint8Array | Deno.PointerValue;
  /** u32 */
  phCreator: number;
  /** array */
  phReserved: Deno.PointerValue;
}

export const sizeofPROFILEHEADER = 96;

export function allocPROFILEHEADER(data?: Partial<PROFILEHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILEHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.phSize !== undefined) view.setUint32(0, Number(data.phSize), true);
  // 0x04: u32
  if (data?.phCMMType !== undefined) view.setUint32(4, Number(data.phCMMType), true);
  // 0x08: u32
  if (data?.phVersion !== undefined) view.setUint32(8, Number(data.phVersion), true);
  // 0x0c: u32
  if (data?.phClass !== undefined) view.setUint32(12, Number(data.phClass), true);
  // 0x10: u32
  if (data?.phDataColorSpace !== undefined) view.setUint32(16, Number(data.phDataColorSpace), true);
  // 0x14: u32
  if (data?.phConnectionSpace !== undefined) view.setUint32(20, Number(data.phConnectionSpace), true);
  // 0x18: pointer
  if (data?.phDateTime !== undefined) view.setBigUint64(24, data.phDateTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.phDateTime))), true);
  // 0x20: u32
  if (data?.phSignature !== undefined) view.setUint32(32, Number(data.phSignature), true);
  // 0x24: u32
  if (data?.phPlatform !== undefined) view.setUint32(36, Number(data.phPlatform), true);
  // 0x28: u32
  if (data?.phProfileFlags !== undefined) view.setUint32(40, Number(data.phProfileFlags), true);
  // 0x2c: u32
  if (data?.phManufacturer !== undefined) view.setUint32(44, Number(data.phManufacturer), true);
  // 0x30: u32
  if (data?.phModel !== undefined) view.setUint32(48, Number(data.phModel), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.phAttributes !== undefined) view.setBigUint64(56, data.phAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.phAttributes))), true);
  // 0x40: u32
  if (data?.phRenderingIntent !== undefined) view.setUint32(64, Number(data.phRenderingIntent), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.phIlluminant !== undefined) view.setBigUint64(72, data.phIlluminant === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.phIlluminant))), true);
  // 0x50: u32
  if (data?.phCreator !== undefined) view.setUint32(80, Number(data.phCreator), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.phReserved !== undefined) view.setBigUint64(88, data.phReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.phReserved))), true);
  return buf;
}

export class PROFILEHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get phSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get phCMMType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get phVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get phClass(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get phDataColorSpace(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get phConnectionSpace(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get phDateTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get phSignature(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get phPlatform(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get phProfileFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get phManufacturer(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get phModel(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get phAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get phRenderingIntent(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get phIlluminant(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get phCreator(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get phReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set phSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set phCMMType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set phVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set phClass(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set phDataColorSpace(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set phConnectionSpace(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set phDateTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set phSignature(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set phPlatform(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set phProfileFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set phManufacturer(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set phModel(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set phAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set phRenderingIntent(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set phIlluminant(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set phCreator(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set phReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.PROFILE (size: 24)
 */
export interface PROFILE {
  /** u32 */
  dwType: number;
  /** ptr */
  pProfileData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbDataSize: number;
}

export const sizeofPROFILE = 24;

export function allocPROFILE(data?: Partial<PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofPROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pProfileData !== undefined) view.setBigUint64(8, data.pProfileData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pProfileData))), true);
  // 0x10: u32
  if (data?.cbDataSize !== undefined) view.setUint32(16, Number(data.cbDataSize), true);
  // 0x14: pad4
  return buf;
}

export class PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pProfileData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pProfileData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cbDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.UI.ColorSystem.ENUMTYPEA (size: 104)
 */
export interface ENUMTYPEA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFields: number;
  /** Windows.Win32.Foundation.PSTR */
  pDeviceName: string | null | Uint8Array;
  /** u32 */
  dwMediaType: number;
  /** u32 */
  dwDitheringMode: number;
  /** array */
  dwResolution: Deno.PointerValue;
  /** u32 */
  dwCMMType: number;
  /** u32 */
  dwClass: number;
  /** u32 */
  dwDataColorSpace: number;
  /** u32 */
  dwConnectionSpace: number;
  /** u32 */
  dwSignature: number;
  /** u32 */
  dwPlatform: number;
  /** u32 */
  dwProfileFlags: number;
  /** u32 */
  dwManufacturer: number;
  /** u32 */
  dwModel: number;
  /** array */
  dwAttributes: Deno.PointerValue;
  /** u32 */
  dwRenderingIntent: number;
  /** u32 */
  dwCreator: number;
  /** u32 */
  dwDeviceClass: number;
}

export const sizeofENUMTYPEA = 104;

export function allocENUMTYPEA(data?: Partial<ENUMTYPEA>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMTYPEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwFields !== undefined) view.setUint32(8, Number(data.dwFields), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pDeviceName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDeviceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwMediaType !== undefined) view.setUint32(24, Number(data.dwMediaType), true);
  // 0x1c: u32
  if (data?.dwDitheringMode !== undefined) view.setUint32(28, Number(data.dwDitheringMode), true);
  // 0x20: pointer
  if (data?.dwResolution !== undefined) view.setBigUint64(32, data.dwResolution === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwResolution))), true);
  // 0x28: u32
  if (data?.dwCMMType !== undefined) view.setUint32(40, Number(data.dwCMMType), true);
  // 0x2c: u32
  if (data?.dwClass !== undefined) view.setUint32(44, Number(data.dwClass), true);
  // 0x30: u32
  if (data?.dwDataColorSpace !== undefined) view.setUint32(48, Number(data.dwDataColorSpace), true);
  // 0x34: u32
  if (data?.dwConnectionSpace !== undefined) view.setUint32(52, Number(data.dwConnectionSpace), true);
  // 0x38: u32
  if (data?.dwSignature !== undefined) view.setUint32(56, Number(data.dwSignature), true);
  // 0x3c: u32
  if (data?.dwPlatform !== undefined) view.setUint32(60, Number(data.dwPlatform), true);
  // 0x40: u32
  if (data?.dwProfileFlags !== undefined) view.setUint32(64, Number(data.dwProfileFlags), true);
  // 0x44: u32
  if (data?.dwManufacturer !== undefined) view.setUint32(68, Number(data.dwManufacturer), true);
  // 0x48: u32
  if (data?.dwModel !== undefined) view.setUint32(72, Number(data.dwModel), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.dwAttributes !== undefined) view.setBigUint64(80, data.dwAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwAttributes))), true);
  // 0x58: u32
  if (data?.dwRenderingIntent !== undefined) view.setUint32(88, Number(data.dwRenderingIntent), true);
  // 0x5c: u32
  if (data?.dwCreator !== undefined) view.setUint32(92, Number(data.dwCreator), true);
  // 0x60: u32
  if (data?.dwDeviceClass !== undefined) view.setUint32(96, Number(data.dwDeviceClass), true);
  // 0x64: pad4
  return buf;
}

export class ENUMTYPEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFields(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMediaType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwDitheringMode(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get dwResolution(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwCMMType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwClass(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwDataColorSpace(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwConnectionSpace(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwSignature(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwPlatform(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwProfileFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwManufacturer(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwModel(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get dwAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwRenderingIntent(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwCreator(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwDeviceClass(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFields(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pDeviceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwMediaType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwDitheringMode(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set dwResolution(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwCMMType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwClass(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwDataColorSpace(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwConnectionSpace(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwSignature(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwPlatform(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwProfileFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwManufacturer(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwModel(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set dwAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwRenderingIntent(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwCreator(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwDeviceClass(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.UI.ColorSystem.ENUMTYPEW (size: 104)
 */
export interface ENUMTYPEW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFields: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDeviceName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMediaType: number;
  /** u32 */
  dwDitheringMode: number;
  /** array */
  dwResolution: Deno.PointerValue;
  /** u32 */
  dwCMMType: number;
  /** u32 */
  dwClass: number;
  /** u32 */
  dwDataColorSpace: number;
  /** u32 */
  dwConnectionSpace: number;
  /** u32 */
  dwSignature: number;
  /** u32 */
  dwPlatform: number;
  /** u32 */
  dwProfileFlags: number;
  /** u32 */
  dwManufacturer: number;
  /** u32 */
  dwModel: number;
  /** array */
  dwAttributes: Deno.PointerValue;
  /** u32 */
  dwRenderingIntent: number;
  /** u32 */
  dwCreator: number;
  /** u32 */
  dwDeviceClass: number;
}

export const sizeofENUMTYPEW = 104;

export function allocENUMTYPEW(data?: Partial<ENUMTYPEW>): Uint8Array {
  const buf = new Uint8Array(sizeofENUMTYPEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwFields !== undefined) view.setUint32(8, Number(data.dwFields), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pDeviceName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDeviceName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwMediaType !== undefined) view.setUint32(24, Number(data.dwMediaType), true);
  // 0x1c: u32
  if (data?.dwDitheringMode !== undefined) view.setUint32(28, Number(data.dwDitheringMode), true);
  // 0x20: pointer
  if (data?.dwResolution !== undefined) view.setBigUint64(32, data.dwResolution === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwResolution))), true);
  // 0x28: u32
  if (data?.dwCMMType !== undefined) view.setUint32(40, Number(data.dwCMMType), true);
  // 0x2c: u32
  if (data?.dwClass !== undefined) view.setUint32(44, Number(data.dwClass), true);
  // 0x30: u32
  if (data?.dwDataColorSpace !== undefined) view.setUint32(48, Number(data.dwDataColorSpace), true);
  // 0x34: u32
  if (data?.dwConnectionSpace !== undefined) view.setUint32(52, Number(data.dwConnectionSpace), true);
  // 0x38: u32
  if (data?.dwSignature !== undefined) view.setUint32(56, Number(data.dwSignature), true);
  // 0x3c: u32
  if (data?.dwPlatform !== undefined) view.setUint32(60, Number(data.dwPlatform), true);
  // 0x40: u32
  if (data?.dwProfileFlags !== undefined) view.setUint32(64, Number(data.dwProfileFlags), true);
  // 0x44: u32
  if (data?.dwManufacturer !== undefined) view.setUint32(68, Number(data.dwManufacturer), true);
  // 0x48: u32
  if (data?.dwModel !== undefined) view.setUint32(72, Number(data.dwModel), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.dwAttributes !== undefined) view.setBigUint64(80, data.dwAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwAttributes))), true);
  // 0x58: u32
  if (data?.dwRenderingIntent !== undefined) view.setUint32(88, Number(data.dwRenderingIntent), true);
  // 0x5c: u32
  if (data?.dwCreator !== undefined) view.setUint32(92, Number(data.dwCreator), true);
  // 0x60: u32
  if (data?.dwDeviceClass !== undefined) view.setUint32(96, Number(data.dwDeviceClass), true);
  // 0x64: pad4
  return buf;
}

export class ENUMTYPEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFields(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pDeviceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMediaType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwDitheringMode(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get dwResolution(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwCMMType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwClass(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwDataColorSpace(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwConnectionSpace(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwSignature(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwPlatform(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwProfileFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwManufacturer(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwModel(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get dwAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwRenderingIntent(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwCreator(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwDeviceClass(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFields(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pDeviceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwMediaType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwDitheringMode(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set dwResolution(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwCMMType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwClass(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwDataColorSpace(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwConnectionSpace(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwSignature(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwPlatform(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwProfileFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwManufacturer(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwModel(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set dwAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwRenderingIntent(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwCreator(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwDeviceClass(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

export type HWND = bigint | number;

export type LPARAM = bigint | number;

/**
 * Windows.Win32.UI.ColorSystem.COLORMATCHSETUPW (size: 136)
 */
export interface COLORMATCHSETUPW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pSourceName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDisplayName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwRenderIntent: number;
  /** u32 */
  dwProofingIntent: number;
  /** Windows.Win32.Foundation.PWSTR */
  pMonitorProfile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ccMonitorProfile: number;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterProfile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ccPrinterProfile: number;
  /** Windows.Win32.Foundation.PWSTR */
  pTargetProfile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ccTargetProfile: number;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.PCMSCALLBACKW */
  lpfnApplyCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParamApplyCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofCOLORMATCHSETUPW = 136;

export function allocCOLORMATCHSETUPW(data?: Partial<COLORMATCHSETUPW>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORMATCHSETUPW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(16, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x18: buffer
  if (data?.pSourceName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pSourceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.dwRenderIntent !== undefined) view.setUint32(48, Number(data.dwRenderIntent), true);
  // 0x34: u32
  if (data?.dwProofingIntent !== undefined) view.setUint32(52, Number(data.dwProofingIntent), true);
  // 0x38: buffer
  if (data?.pMonitorProfile !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pMonitorProfile);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.ccMonitorProfile !== undefined) view.setUint32(64, Number(data.ccMonitorProfile), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.pPrinterProfile !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pPrinterProfile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.ccPrinterProfile !== undefined) view.setUint32(80, Number(data.ccPrinterProfile), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.pTargetProfile !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pTargetProfile);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.ccTargetProfile !== undefined) view.setUint32(96, Number(data.ccTargetProfile), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(104, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x70: pointer
  if (data?.lParam !== undefined) view.setBigUint64(112, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x78: pointer
  if (data?.lpfnApplyCallback !== undefined) view.setBigUint64(120, data.lpfnApplyCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnApplyCallback))), true);
  // 0x80: pointer
  if (data?.lParamApplyCallback !== undefined) view.setBigUint64(128, data.lParamApplyCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParamApplyCallback))), true);
  return buf;
}

export class COLORMATCHSETUPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pSourceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwRenderIntent(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwProofingIntent(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: buffer
  get pMonitorProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get ccMonitorProfile(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get pPrinterProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get ccPrinterProfile(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get pTargetProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get ccTargetProfile(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnApplyCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get lParamApplyCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pSourceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set dwRenderIntent(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwProofingIntent(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: buffer
  set pMonitorProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set ccMonitorProfile(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set pPrinterProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set ccPrinterProfile(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set pTargetProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set ccTargetProfile(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnApplyCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set lParamApplyCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.COLORMATCHSETUPA (size: 136)
 */
export interface COLORMATCHSETUPA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pSourceName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDisplayName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** u32 */
  dwRenderIntent: number;
  /** u32 */
  dwProofingIntent: number;
  /** Windows.Win32.Foundation.PSTR */
  pMonitorProfile: string | null | Uint8Array;
  /** u32 */
  ccMonitorProfile: number;
  /** Windows.Win32.Foundation.PSTR */
  pPrinterProfile: string | null | Uint8Array;
  /** u32 */
  ccPrinterProfile: number;
  /** Windows.Win32.Foundation.PSTR */
  pTargetProfile: string | null | Uint8Array;
  /** u32 */
  ccTargetProfile: number;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.ColorSystem.PCMSCALLBACKA */
  lpfnApplyCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParamApplyCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofCOLORMATCHSETUPA = 136;

export function allocCOLORMATCHSETUPA(data?: Partial<COLORMATCHSETUPA>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORMATCHSETUPA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(16, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x18: buffer
  if (data?.pSourceName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pSourceName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDisplayName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.dwRenderIntent !== undefined) view.setUint32(48, Number(data.dwRenderIntent), true);
  // 0x34: u32
  if (data?.dwProofingIntent !== undefined) view.setUint32(52, Number(data.dwProofingIntent), true);
  // 0x38: buffer
  if (data?.pMonitorProfile !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pMonitorProfile);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.ccMonitorProfile !== undefined) view.setUint32(64, Number(data.ccMonitorProfile), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.pPrinterProfile !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pPrinterProfile);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.ccPrinterProfile !== undefined) view.setUint32(80, Number(data.ccPrinterProfile), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.pTargetProfile !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pTargetProfile);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.ccTargetProfile !== undefined) view.setUint32(96, Number(data.ccTargetProfile), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(104, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x70: pointer
  if (data?.lParam !== undefined) view.setBigUint64(112, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x78: pointer
  if (data?.lpfnApplyCallback !== undefined) view.setBigUint64(120, data.lpfnApplyCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnApplyCallback))), true);
  // 0x80: pointer
  if (data?.lParamApplyCallback !== undefined) view.setBigUint64(128, data.lParamApplyCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParamApplyCallback))), true);
  return buf;
}

export class COLORMATCHSETUPAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pSourceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwRenderIntent(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwProofingIntent(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: buffer
  get pMonitorProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get ccMonitorProfile(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get pPrinterProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get ccPrinterProfile(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get pTargetProfile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get ccTargetProfile(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnApplyCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get lParamApplyCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pSourceName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set dwRenderIntent(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwProofingIntent(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: buffer
  set pMonitorProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set ccMonitorProfile(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set pPrinterProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set ccPrinterProfile(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set pTargetProfile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set ccTargetProfile(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnApplyCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set lParamApplyCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.WCS_DEVICE_VCGT_CAPABILITIES (size: 8)
 */
export interface WCS_DEVICE_VCGT_CAPABILITIES {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOL */
  SupportsVcgt: boolean;
}

export const sizeofWCS_DEVICE_VCGT_CAPABILITIES = 8;

export function allocWCS_DEVICE_VCGT_CAPABILITIES(data?: Partial<WCS_DEVICE_VCGT_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWCS_DEVICE_VCGT_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.SupportsVcgt !== undefined) view.setInt32(4, Number(data.SupportsVcgt), true);
  return buf;
}

export class WCS_DEVICE_VCGT_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get SupportsVcgt(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set SupportsVcgt(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.ColorSystem.WCS_DEVICE_MHC2_CAPABILITIES (size: 24)
 */
export interface WCS_DEVICE_MHC2_CAPABILITIES {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.BOOL */
  SupportsMhc2: boolean;
  /** u32 */
  RegammaLutEntryCount: number;
  /** u32 */
  CscXyzMatrixRows: number;
  /** u32 */
  CscXyzMatrixColumns: number;
}

export const sizeofWCS_DEVICE_MHC2_CAPABILITIES = 24;

export function allocWCS_DEVICE_MHC2_CAPABILITIES(data?: Partial<WCS_DEVICE_MHC2_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWCS_DEVICE_MHC2_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: i32
  if (data?.SupportsMhc2 !== undefined) view.setInt32(4, Number(data.SupportsMhc2), true);
  // 0x08: u32
  if (data?.RegammaLutEntryCount !== undefined) view.setUint32(8, Number(data.RegammaLutEntryCount), true);
  // 0x0c: u32
  if (data?.CscXyzMatrixRows !== undefined) view.setUint32(12, Number(data.CscXyzMatrixRows), true);
  // 0x10: u32
  if (data?.CscXyzMatrixColumns !== undefined) view.setUint32(16, Number(data.CscXyzMatrixColumns), true);
  // 0x14: pad4
  return buf;
}

export class WCS_DEVICE_MHC2_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get SupportsMhc2(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get RegammaLutEntryCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CscXyzMatrixRows(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get CscXyzMatrixColumns(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set SupportsMhc2(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set RegammaLutEntryCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CscXyzMatrixRows(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set CscXyzMatrixColumns(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type HDC = bigint | number;

export type HPALETTE = bigint | number;

export type COLORREF = number;

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

export class LUIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LowPart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get HighPart(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set LowPart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set HighPart(value: number) {
    this.view.setInt32(4, value, true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    SetICMMode: {
      parameters: ["pointer", "i32"],
      result: "i32",
      optional: true,
    },
    CheckColorsInGamut: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    GetColorSpace: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    GetLogColorSpaceA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    GetLogColorSpaceW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CreateColorSpaceA: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    CreateColorSpaceW: {
      parameters: ["pointer"],
      result: "pointer",
      optional: true,
    },
    SetColorSpace: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DeleteColorSpace: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    GetICMProfileA: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    GetICMProfileW: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    SetICMProfileA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    SetICMProfileW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
      optional: true,
    },
    GetDeviceGammaRamp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SetDeviceGammaRamp: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    ColorMatchToTarget: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
      optional: true,
    },
    EnumICMProfilesA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    EnumICMProfilesW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    UpdateICMRegKeyA: {
      parameters: ["u32", "buffer", "buffer", "u32"],
      result: "i32",
      optional: true,
    },
    UpdateICMRegKeyW: {
      parameters: ["u32", "buffer", "buffer", "u32"],
      result: "i32",
      optional: true,
    },
    ColorCorrectPalette: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libmscms_dll = Deno.dlopen("mscms.dll", {
    OpenColorProfileA: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "isize",
      optional: true,
    },
    OpenColorProfileW: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "isize",
      optional: true,
    },
    CloseColorProfile: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    GetColorProfileFromHandle: {
      parameters: ["isize", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    IsColorProfileValid: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    CreateProfileFromLogColorSpaceA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CreateProfileFromLogColorSpaceW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetCountColorProfileElements: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    GetColorProfileHeader: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    GetColorProfileElementTag: {
      parameters: ["isize", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    IsColorProfileTagPresent: {
      parameters: ["isize", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    GetColorProfileElement: {
      parameters: ["isize", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SetColorProfileHeader: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    SetColorProfileElementSize: {
      parameters: ["isize", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    SetColorProfileElement: {
      parameters: ["isize", "u32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SetColorProfileElementReference: {
      parameters: ["isize", "u32", "u32"],
      result: "i32",
      optional: true,
    },
    GetPS2ColorSpaceArray: {
      parameters: ["isize", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetPS2ColorRenderingIntent: {
      parameters: ["isize", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetPS2ColorRenderingDictionary: {
      parameters: ["isize", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetNamedProfileInfo: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    ConvertColorNameToIndex: {
      parameters: ["isize", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    ConvertIndexToColorName: {
      parameters: ["isize", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CreateDeviceLinkProfile: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CreateColorTransformA: {
      parameters: ["pointer", "isize", "isize", "u32"],
      result: "isize",
      optional: true,
    },
    CreateColorTransformW: {
      parameters: ["pointer", "isize", "isize", "u32"],
      result: "isize",
      optional: true,
    },
    CreateMultiProfileTransform: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "u32"],
      result: "isize",
      optional: true,
    },
    DeleteColorTransform: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    TranslateBitmapBits: {
      parameters: ["isize", "pointer", "i32", "u32", "u32", "u32", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CheckBitmapBits: {
      parameters: ["isize", "pointer", "i32", "u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    TranslateColors: {
      parameters: ["isize", "pointer", "u32", "i32", "pointer", "i32"],
      result: "i32",
      optional: true,
    },
    CheckColors: {
      parameters: ["isize", "pointer", "u32", "i32", "pointer"],
      result: "i32",
      optional: true,
    },
    GetCMMInfo: {
      parameters: ["isize", "u32"],
      result: "u32",
      optional: true,
    },
    RegisterCMMA: {
      parameters: ["buffer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    RegisterCMMW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    UnregisterCMMA: {
      parameters: ["buffer", "u32"],
      result: "i32",
      optional: true,
    },
    UnregisterCMMW: {
      parameters: ["buffer", "u32"],
      result: "i32",
      optional: true,
    },
    SelectCMM: {
      parameters: ["u32"],
      result: "i32",
      optional: true,
    },
    GetColorDirectoryA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetColorDirectoryW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    InstallColorProfileA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    InstallColorProfileW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    UninstallColorProfileA: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
      optional: true,
    },
    UninstallColorProfileW: {
      parameters: ["buffer", "buffer", "i32"],
      result: "i32",
      optional: true,
    },
    EnumColorProfilesA: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    EnumColorProfilesW: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    SetStandardColorSpaceProfileA: {
      parameters: ["buffer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    SetStandardColorSpaceProfileW: {
      parameters: ["buffer", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    GetStandardColorSpaceProfileA: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    GetStandardColorSpaceProfileW: {
      parameters: ["buffer", "u32", "buffer", "pointer"],
      result: "i32",
      optional: true,
    },
    AssociateColorProfileWithDeviceA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    AssociateColorProfileWithDeviceW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    DisassociateColorProfileFromDeviceA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    DisassociateColorProfileFromDeviceW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WcsAssociateColorProfileWithDevice: {
      parameters: ["i32", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WcsDisassociateColorProfileFromDevice: {
      parameters: ["i32", "buffer", "buffer"],
      result: "i32",
      optional: true,
    },
    WcsEnumColorProfilesSize: {
      parameters: ["i32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsEnumColorProfiles: {
      parameters: ["i32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsGetDefaultColorProfileSize: {
      parameters: ["i32", "buffer", "i32", "i32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsGetDefaultColorProfile: {
      parameters: ["i32", "buffer", "i32", "i32", "u32", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    WcsSetDefaultColorProfile: {
      parameters: ["i32", "buffer", "i32", "i32", "u32", "buffer"],
      result: "i32",
      optional: true,
    },
    WcsSetDefaultRenderingIntent: {
      parameters: ["i32", "u32"],
      result: "i32",
      optional: true,
    },
    WcsGetDefaultRenderingIntent: {
      parameters: ["i32", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsGetUsePerUserProfiles: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsSetUsePerUserProfiles: {
      parameters: ["buffer", "u32", "i32"],
      result: "i32",
      optional: true,
    },
    WcsTranslateColors: {
      parameters: ["isize", "u32", "u32", "i32", "u32", "pointer", "u32", "i32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsCheckColors: {
      parameters: ["isize", "u32", "u32", "i32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    WcsOpenColorProfileA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "u32"],
      result: "isize",
      optional: true,
    },
    WcsOpenColorProfileW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "u32"],
      result: "isize",
      optional: true,
    },
    WcsCreateIccProfile: {
      parameters: ["isize", "u32"],
      result: "isize",
      optional: true,
    },
    WcsGetCalibrationManagementState: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    WcsSetCalibrationManagementState: {
      parameters: ["i32"],
      result: "i32",
      optional: true,
    },
    ColorProfileAddDisplayAssociation: {
      parameters: ["i32", "buffer", "pointer", "u32", "i32", "i32"],
      result: "pointer",
      optional: true,
    },
    ColorProfileRemoveDisplayAssociation: {
      parameters: ["i32", "buffer", "pointer", "u32", "i32"],
      result: "pointer",
      optional: true,
    },
    ColorProfileSetDisplayDefaultAssociation: {
      parameters: ["i32", "buffer", "i32", "i32", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    ColorProfileGetDisplayList: {
      parameters: ["i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    ColorProfileGetDisplayDefault: {
      parameters: ["i32", "pointer", "u32", "i32", "i32", "pointer"],
      result: "pointer",
      optional: true,
    },
    ColorProfileGetDisplayUserScope: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libICMUI_dll = Deno.dlopen("ICMUI.dll", {
    SetupColorMatchingW: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
    SetupColorMatchingA: {
      parameters: ["pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libICM32_dll = Deno.dlopen("ICM32.dll", {
    CMCheckColors: {
      parameters: ["isize", "pointer", "u32", "i32", "pointer"],
      result: "i32",
      optional: true,
    },
    CMCheckRGBs: {
      parameters: ["isize", "pointer", "i32", "u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CMConvertColorNameToIndex: {
      parameters: ["isize", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CMConvertIndexToColorName: {
      parameters: ["isize", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CMCreateDeviceLinkProfile: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer"],
      result: "i32",
      optional: true,
    },
    CMCreateMultiProfileTransform: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32"],
      result: "isize",
      optional: true,
    },
    CMCreateProfileW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CMCreateTransform: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "isize",
      optional: true,
    },
    CMCreateTransformW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "isize",
      optional: true,
    },
    CMCreateTransformExt: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "isize",
      optional: true,
    },
    CMCheckColorsInGamut: {
      parameters: ["isize", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CMCreateProfile: {
      parameters: ["pointer", "pointer"],
      result: "i32",
      optional: true,
    },
    CMTranslateRGB: {
      parameters: ["isize", "pointer", "pointer", "u32"],
      result: "i32",
      optional: true,
    },
    CMTranslateRGBs: {
      parameters: ["isize", "pointer", "i32", "u32", "u32", "u32", "pointer", "i32", "u32"],
      result: "i32",
      optional: true,
    },
    CMCreateTransformExtW: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "isize",
      optional: true,
    },
    CMDeleteTransform: {
      parameters: ["isize"],
      result: "i32",
      optional: true,
    },
    CMGetInfo: {
      parameters: ["u32"],
      result: "u32",
      optional: true,
    },
    CMGetNamedProfileInfo: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    CMIsProfileValid: {
      parameters: ["isize", "pointer"],
      result: "i32",
      optional: true,
    },
    CMTranslateColors: {
      parameters: ["isize", "pointer", "u32", "i32", "pointer", "i32"],
      result: "i32",
      optional: true,
    },
    CMTranslateRGBsExt: {
      parameters: ["isize", "pointer", "i32", "u32", "u32", "u32", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function SetICMMode(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  mode: ICM_MODE /* Windows.Win32.UI.ColorSystem.ICM_MODE */,
): number /* i32 */ {
  return libGDI32_dll.SetICMMode!(util.toPointer(hdc), mode);
}

export function CheckColorsInGamut(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpRGBTriple: Deno.PointerValue | Uint8Array /* ptr */,
  dlpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.CheckColorsInGamut!(util.toPointer(hdc), util.toPointer(lpRGBTriple), util.toPointer(dlpBuffer), nCount));
}

export function GetColorSpace(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */ {
  return libGDI32_dll.GetColorSpace!(util.toPointer(hdc));
}

export function GetLogColorSpaceA(
  hColorSpace: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetLogColorSpaceA!(util.toPointer(hColorSpace), util.toPointer(lpBuffer), nSize));
}

export function GetLogColorSpaceW(
  hColorSpace: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetLogColorSpaceW!(util.toPointer(hColorSpace), util.toPointer(lpBuffer), nSize));
}

export function CreateColorSpaceA(
  lplcs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */ {
  return libGDI32_dll.CreateColorSpaceA!(util.toPointer(lplcs));
}

export function CreateColorSpaceW(
  lplcs: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */ {
  return libGDI32_dll.CreateColorSpaceW!(util.toPointer(lplcs));
}

export function SetColorSpace(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hcs: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */,
): Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */ {
  return libGDI32_dll.SetColorSpace!(util.toPointer(hdc), util.toPointer(hcs));
}

export function DeleteColorSpace(
  hcs: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.HCOLORSPACE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.DeleteColorSpace!(util.toPointer(hcs)));
}

export function GetICMProfileA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pBufSize: Deno.PointerValue | Uint8Array /* ptr */,
  pszFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetICMProfileA!(util.toPointer(hdc), util.toPointer(pBufSize), util.pstrToFfi(pszFilename)));
}

export function GetICMProfileW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pBufSize: Deno.PointerValue | Uint8Array /* ptr */,
  pszFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetICMProfileW!(util.toPointer(hdc), util.toPointer(pBufSize), util.pwstrToFfi(pszFilename)));
}

export function SetICMProfileA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetICMProfileA!(util.toPointer(hdc), util.pstrToFfi(lpFileName)));
}

export function SetICMProfileW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetICMProfileW!(util.toPointer(hdc), util.pwstrToFfi(lpFileName)));
}

export function GetDeviceGammaRamp(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpRamp: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GetDeviceGammaRamp!(util.toPointer(hdc), util.toPointer(lpRamp)));
}

export function SetDeviceGammaRamp(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lpRamp: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.SetDeviceGammaRamp!(util.toPointer(hdc), util.toPointer(lpRamp)));
}

export function ColorMatchToTarget(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hdcTarget: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  action: COLOR_MATCH_TO_TARGET_ACTION /* Windows.Win32.UI.ColorSystem.COLOR_MATCH_TO_TARGET_ACTION */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ColorMatchToTarget!(util.toPointer(hdc), util.toPointer(hdcTarget), action));
}

export function EnumICMProfilesA(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  proc: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.ICMENUMPROCA */,
  param2: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumICMProfilesA!(util.toPointer(hdc), util.toPointer(proc), util.toPointer(param2));
}

export function EnumICMProfilesW(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  proc: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.ICMENUMPROCW */,
  param2: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): number /* i32 */ {
  return libGDI32_dll.EnumICMProfilesW!(util.toPointer(hdc), util.toPointer(proc), util.toPointer(param2));
}

export function UpdateICMRegKeyA(
  reserved: number /* u32 */,
  lpszCMID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  command: ICM_COMMAND /* Windows.Win32.UI.ColorSystem.ICM_COMMAND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.UpdateICMRegKeyA!(reserved, util.pstrToFfi(lpszCMID), util.pstrToFfi(lpszFileName), command));
}

export function UpdateICMRegKeyW(
  reserved: number /* u32 */,
  lpszCMID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  command: ICM_COMMAND /* Windows.Win32.UI.ColorSystem.ICM_COMMAND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.UpdateICMRegKeyW!(reserved, util.pwstrToFfi(lpszCMID), util.pwstrToFfi(lpszFileName), command));
}

export function ColorCorrectPalette(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  hPal: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HPALETTE */,
  deFirst: number /* u32 */,
  num: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.ColorCorrectPalette!(util.toPointer(hdc), util.toPointer(hPal), deFirst, num));
}

export function OpenColorProfileA(
  pProfile: Deno.PointerValue | Uint8Array /* ptr */,
  dwDesiredAccess: number /* u32 */,
  dwShareMode: number /* u32 */,
  dwCreationMode: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.OpenColorProfileA!(util.toPointer(pProfile), dwDesiredAccess, dwShareMode, dwCreationMode);
}

export function OpenColorProfileW(
  pProfile: Deno.PointerValue | Uint8Array /* ptr */,
  dwDesiredAccess: number /* u32 */,
  dwShareMode: number /* u32 */,
  dwCreationMode: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.OpenColorProfileW!(util.toPointer(pProfile), dwDesiredAccess, dwShareMode, dwCreationMode);
}

export function CloseColorProfile(
  hProfile: bigint | number /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.CloseColorProfile!(hProfile));
}

export function GetColorProfileFromHandle(
  hProfile: bigint | number /* isize */,
  pProfile: Deno.PointerValue | Uint8Array /* ptr */,
  pcbProfile: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetColorProfileFromHandle!(hProfile, util.toPointer(pProfile), util.toPointer(pcbProfile)));
}

export function IsColorProfileValid(
  hProfile: bigint | number /* isize */,
  pbValid: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.IsColorProfileValid!(hProfile, util.toPointer(pbValid)));
}

export function CreateProfileFromLogColorSpaceA(
  pLogColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  pProfile: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.CreateProfileFromLogColorSpaceA!(util.toPointer(pLogColorSpace), util.toPointer(pProfile)));
}

export function CreateProfileFromLogColorSpaceW(
  pLogColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  pProfile: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.CreateProfileFromLogColorSpaceW!(util.toPointer(pLogColorSpace), util.toPointer(pProfile)));
}

export function GetCountColorProfileElements(
  hProfile: bigint | number /* isize */,
  pnElementCount: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetCountColorProfileElements!(hProfile, util.toPointer(pnElementCount)));
}

export function GetColorProfileHeader(
  hProfile: bigint | number /* isize */,
  pHeader: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetColorProfileHeader!(hProfile, util.toPointer(pHeader)));
}

export function GetColorProfileElementTag(
  hProfile: bigint | number /* isize */,
  dwIndex: number /* u32 */,
  pTag: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetColorProfileElementTag!(hProfile, dwIndex, util.toPointer(pTag)));
}

export function IsColorProfileTagPresent(
  hProfile: bigint | number /* isize */,
  tag: number /* u32 */,
  pbPresent: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.IsColorProfileTagPresent!(hProfile, tag, util.toPointer(pbPresent)));
}

export function GetColorProfileElement(
  hProfile: bigint | number /* isize */,
  tag: number /* u32 */,
  dwOffset: number /* u32 */,
  pcbElement: Deno.PointerValue | Uint8Array /* ptr */,
  pElement: Deno.PointerValue | Uint8Array /* ptr */,
  pbReference: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetColorProfileElement!(hProfile, tag, dwOffset, util.toPointer(pcbElement), util.toPointer(pElement), util.toPointer(pbReference)));
}

export function SetColorProfileHeader(
  hProfile: bigint | number /* isize */,
  pHeader: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SetColorProfileHeader!(hProfile, util.toPointer(pHeader)));
}

export function SetColorProfileElementSize(
  hProfile: bigint | number /* isize */,
  tagType: number /* u32 */,
  pcbElement: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SetColorProfileElementSize!(hProfile, tagType, pcbElement));
}

export function SetColorProfileElement(
  hProfile: bigint | number /* isize */,
  tag: number /* u32 */,
  dwOffset: number /* u32 */,
  pcbElement: Deno.PointerValue | Uint8Array /* ptr */,
  pElement: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SetColorProfileElement!(hProfile, tag, dwOffset, util.toPointer(pcbElement), util.toPointer(pElement)));
}

export function SetColorProfileElementReference(
  hProfile: bigint | number /* isize */,
  newTag: number /* u32 */,
  refTag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SetColorProfileElementReference!(hProfile, newTag, refTag));
}

export function GetPS2ColorSpaceArray(
  hProfile: bigint | number /* isize */,
  dwIntent: number /* u32 */,
  dwCSAType: number /* u32 */,
  pPS2ColorSpaceArray: Deno.PointerValue | Uint8Array /* ptr */,
  pcbPS2ColorSpaceArray: Deno.PointerValue | Uint8Array /* ptr */,
  pbBinary: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetPS2ColorSpaceArray!(hProfile, dwIntent, dwCSAType, util.toPointer(pPS2ColorSpaceArray), util.toPointer(pcbPS2ColorSpaceArray), util.toPointer(pbBinary)));
}

export function GetPS2ColorRenderingIntent(
  hProfile: bigint | number /* isize */,
  dwIntent: number /* u32 */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pcbPS2ColorRenderingIntent: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetPS2ColorRenderingIntent!(hProfile, dwIntent, util.toPointer(pBuffer), util.toPointer(pcbPS2ColorRenderingIntent)));
}

export function GetPS2ColorRenderingDictionary(
  hProfile: bigint | number /* isize */,
  dwIntent: number /* u32 */,
  pPS2ColorRenderingDictionary: Deno.PointerValue | Uint8Array /* ptr */,
  pcbPS2ColorRenderingDictionary: Deno.PointerValue | Uint8Array /* ptr */,
  pbBinary: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetPS2ColorRenderingDictionary!(hProfile, dwIntent, util.toPointer(pPS2ColorRenderingDictionary), util.toPointer(pcbPS2ColorRenderingDictionary), util.toPointer(pbBinary)));
}

export function GetNamedProfileInfo(
  hProfile: bigint | number /* isize */,
  pNamedProfileInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetNamedProfileInfo!(hProfile, util.toPointer(pNamedProfileInfo)));
}

export function ConvertColorNameToIndex(
  hProfile: bigint | number /* isize */,
  paColorName: Deno.PointerValue | Uint8Array /* ptr */,
  paIndex: Deno.PointerValue | Uint8Array /* ptr */,
  dwCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.ConvertColorNameToIndex!(hProfile, util.toPointer(paColorName), util.toPointer(paIndex), dwCount));
}

export function ConvertIndexToColorName(
  hProfile: bigint | number /* isize */,
  paIndex: Deno.PointerValue | Uint8Array /* ptr */,
  paColorName: Deno.PointerValue | Uint8Array /* ptr */,
  dwCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.ConvertIndexToColorName!(hProfile, util.toPointer(paIndex), util.toPointer(paColorName), dwCount));
}

export function CreateDeviceLinkProfile(
  hProfile: Deno.PointerValue | Uint8Array /* ptr */,
  nProfiles: number /* u32 */,
  padwIntent: Deno.PointerValue | Uint8Array /* ptr */,
  nIntents: number /* u32 */,
  dwFlags: number /* u32 */,
  pProfileData: Deno.PointerValue | Uint8Array /* ptr */,
  indexPreferredCMM: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.CreateDeviceLinkProfile!(util.toPointer(hProfile), nProfiles, util.toPointer(padwIntent), nIntents, dwFlags, util.toPointer(pProfileData), indexPreferredCMM));
}

export function CreateColorTransformA(
  pLogColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  hDestProfile: bigint | number /* isize */,
  hTargetProfile: bigint | number /* isize */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.CreateColorTransformA!(util.toPointer(pLogColorSpace), hDestProfile, hTargetProfile, dwFlags);
}

export function CreateColorTransformW(
  pLogColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  hDestProfile: bigint | number /* isize */,
  hTargetProfile: bigint | number /* isize */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.CreateColorTransformW!(util.toPointer(pLogColorSpace), hDestProfile, hTargetProfile, dwFlags);
}

export function CreateMultiProfileTransform(
  pahProfiles: Deno.PointerValue | Uint8Array /* ptr */,
  nProfiles: number /* u32 */,
  padwIntent: Deno.PointerValue | Uint8Array /* ptr */,
  nIntents: number /* u32 */,
  dwFlags: number /* u32 */,
  indexPreferredCMM: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.CreateMultiProfileTransform!(util.toPointer(pahProfiles), nProfiles, util.toPointer(padwIntent), nIntents, dwFlags, indexPreferredCMM);
}

export function DeleteColorTransform(
  hxform: bigint | number /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.DeleteColorTransform!(hxform));
}

export function TranslateBitmapBits(
  hColorTransform: bigint | number /* isize */,
  pSrcBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmInput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwInputStride: number /* u32 */,
  pDestBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmOutput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwOutputStride: number /* u32 */,
  pfnCallBack: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.LPBMCALLBACKFN */,
  ulCallbackData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.TranslateBitmapBits!(hColorTransform, util.toPointer(pSrcBits), bmInput, dwWidth, dwHeight, dwInputStride, util.toPointer(pDestBits), bmOutput, dwOutputStride, util.toPointer(pfnCallBack), util.toPointer(ulCallbackData)));
}

export function CheckBitmapBits(
  hColorTransform: bigint | number /* isize */,
  pSrcBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmInput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwStride: number /* u32 */,
  paResult: Deno.PointerValue | Uint8Array /* ptr */,
  pfnCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.LPBMCALLBACKFN */,
  lpCallbackData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.CheckBitmapBits!(hColorTransform, util.toPointer(pSrcBits), bmInput, dwWidth, dwHeight, dwStride, util.toPointer(paResult), util.toPointer(pfnCallback), util.toPointer(lpCallbackData)));
}

export function TranslateColors(
  hColorTransform: bigint | number /* isize */,
  paInputColors: Deno.PointerValue | Uint8Array /* ptr */,
  nColors: number /* u32 */,
  ctInput: COLORTYPE /* Windows.Win32.UI.ColorSystem.COLORTYPE */,
  paOutputColors: Deno.PointerValue | Uint8Array /* ptr */,
  ctOutput: COLORTYPE /* Windows.Win32.UI.ColorSystem.COLORTYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.TranslateColors!(hColorTransform, util.toPointer(paInputColors), nColors, ctInput, util.toPointer(paOutputColors), ctOutput));
}

export function CheckColors(
  hColorTransform: bigint | number /* isize */,
  paInputColors: Deno.PointerValue | Uint8Array /* ptr */,
  nColors: number /* u32 */,
  ctInput: COLORTYPE /* Windows.Win32.UI.ColorSystem.COLORTYPE */,
  paResult: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.CheckColors!(hColorTransform, util.toPointer(paInputColors), nColors, ctInput, util.toPointer(paResult)));
}

export function GetCMMInfo(
  hColorTransform: bigint | number /* isize */,
  param1: number /* u32 */,
): number /* u32 */ {
  return libmscms_dll.GetCMMInfo!(hColorTransform, param1);
}

export function RegisterCMMA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cmmID: number /* u32 */,
  pCMMdll: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.RegisterCMMA!(util.pstrToFfi(pMachineName), cmmID, util.pstrToFfi(pCMMdll)));
}

export function RegisterCMMW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cmmID: number /* u32 */,
  pCMMdll: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.RegisterCMMW!(util.pwstrToFfi(pMachineName), cmmID, util.pwstrToFfi(pCMMdll)));
}

export function UnregisterCMMA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cmmID: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.UnregisterCMMA!(util.pstrToFfi(pMachineName), cmmID));
}

export function UnregisterCMMW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cmmID: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.UnregisterCMMW!(util.pwstrToFfi(pMachineName), cmmID));
}

export function SelectCMM(
  dwCMMType: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SelectCMM!(dwCMMType));
}

export function GetColorDirectoryA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetColorDirectoryA!(util.pstrToFfi(pMachineName), util.pstrToFfi(pBuffer), util.toPointer(pdwSize)));
}

export function GetColorDirectoryW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetColorDirectoryW!(util.pwstrToFfi(pMachineName), util.pwstrToFfi(pBuffer), util.toPointer(pdwSize)));
}

export function InstallColorProfileA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pProfileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.InstallColorProfileA!(util.pstrToFfi(pMachineName), util.pstrToFfi(pProfileName)));
}

export function InstallColorProfileW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.InstallColorProfileW!(util.pwstrToFfi(pMachineName), util.pwstrToFfi(pProfileName)));
}

export function UninstallColorProfileA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pProfileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bDelete: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.UninstallColorProfileA!(util.pstrToFfi(pMachineName), util.pstrToFfi(pProfileName), util.boolToFfi(bDelete)));
}

export function UninstallColorProfileW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bDelete: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.UninstallColorProfileW!(util.pwstrToFfi(pMachineName), util.pwstrToFfi(pProfileName), util.boolToFfi(bDelete)));
}

export function EnumColorProfilesA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnumRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pEnumerationBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSizeOfEnumerationBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pnProfiles: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.EnumColorProfilesA!(util.pstrToFfi(pMachineName), util.toPointer(pEnumRecord), util.toPointer(pEnumerationBuffer), util.toPointer(pdwSizeOfEnumerationBuffer), util.toPointer(pnProfiles)));
}

export function EnumColorProfilesW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnumRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pEnumerationBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSizeOfEnumerationBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pnProfiles: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.EnumColorProfilesW!(util.pwstrToFfi(pMachineName), util.toPointer(pEnumRecord), util.toPointer(pEnumerationBuffer), util.toPointer(pdwSizeOfEnumerationBuffer), util.toPointer(pnProfiles)));
}

export function SetStandardColorSpaceProfileA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwProfileID: number /* u32 */,
  pProfilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SetStandardColorSpaceProfileA!(util.pstrToFfi(pMachineName), dwProfileID, util.pstrToFfi(pProfilename)));
}

export function SetStandardColorSpaceProfileW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwProfileID: number /* u32 */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SetStandardColorSpaceProfileW!(util.pwstrToFfi(pMachineName), dwProfileID, util.pwstrToFfi(pProfileName)));
}

export function GetStandardColorSpaceProfileA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwSCS: number /* u32 */,
  pBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcbSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetStandardColorSpaceProfileA!(util.pstrToFfi(pMachineName), dwSCS, util.pstrToFfi(pBuffer), util.toPointer(pcbSize)));
}

export function GetStandardColorSpaceProfileW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwSCS: number /* u32 */,
  pBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcbSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.GetStandardColorSpaceProfileW!(util.pwstrToFfi(pMachineName), dwSCS, util.pwstrToFfi(pBuffer), util.toPointer(pcbSize)));
}

export function AssociateColorProfileWithDeviceA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pProfileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.AssociateColorProfileWithDeviceA!(util.pstrToFfi(pMachineName), util.pstrToFfi(pProfileName), util.pstrToFfi(pDeviceName)));
}

export function AssociateColorProfileWithDeviceW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.AssociateColorProfileWithDeviceW!(util.pwstrToFfi(pMachineName), util.pwstrToFfi(pProfileName), util.pwstrToFfi(pDeviceName)));
}

export function DisassociateColorProfileFromDeviceA(
  pMachineName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pProfileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.DisassociateColorProfileFromDeviceA!(util.pstrToFfi(pMachineName), util.pstrToFfi(pProfileName), util.pstrToFfi(pDeviceName)));
}

export function DisassociateColorProfileFromDeviceW(
  pMachineName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.DisassociateColorProfileFromDeviceW!(util.pwstrToFfi(pMachineName), util.pwstrToFfi(pProfileName), util.pwstrToFfi(pDeviceName)));
}

export function SetupColorMatchingW(
  pcms: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICMUI_dll.SetupColorMatchingW!(util.toPointer(pcms)));
}

export function SetupColorMatchingA(
  pcms: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICMUI_dll.SetupColorMatchingA!(util.toPointer(pcms)));
}

export function WcsAssociateColorProfileWithDevice(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsAssociateColorProfileWithDevice!(scope, util.pwstrToFfi(pProfileName), util.pwstrToFfi(pDeviceName)));
}

export function WcsDisassociateColorProfileFromDevice(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsDisassociateColorProfileFromDevice!(scope, util.pwstrToFfi(pProfileName), util.pwstrToFfi(pDeviceName)));
}

export function WcsEnumColorProfilesSize(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pEnumRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSize: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsEnumColorProfilesSize!(scope, util.toPointer(pEnumRecord), util.toPointer(pdwSize)));
}

export function WcsEnumColorProfiles(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pEnumRecord: Deno.PointerValue | Uint8Array /* ptr */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwSize: number /* u32 */,
  pnProfiles: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsEnumColorProfiles!(scope, util.toPointer(pEnumRecord), util.toPointer(pBuffer), dwSize, util.toPointer(pnProfiles)));
}

export function WcsGetDefaultColorProfileSize(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cptColorProfileType: COLORPROFILETYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILETYPE */,
  cpstColorProfileSubType: COLORPROFILESUBTYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILESUBTYPE */,
  dwProfileID: number /* u32 */,
  pcbProfileName: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsGetDefaultColorProfileSize!(scope, util.pwstrToFfi(pDeviceName), cptColorProfileType, cpstColorProfileSubType, dwProfileID, util.toPointer(pcbProfileName)));
}

export function WcsGetDefaultColorProfile(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cptColorProfileType: COLORPROFILETYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILETYPE */,
  cpstColorProfileSubType: COLORPROFILESUBTYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILESUBTYPE */,
  dwProfileID: number /* u32 */,
  cbProfileName: number /* u32 */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsGetDefaultColorProfile!(scope, util.pwstrToFfi(pDeviceName), cptColorProfileType, cpstColorProfileSubType, dwProfileID, cbProfileName, util.pwstrToFfi(pProfileName)));
}

export function WcsSetDefaultColorProfile(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cptColorProfileType: COLORPROFILETYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILETYPE */,
  cpstColorProfileSubType: COLORPROFILESUBTYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILESUBTYPE */,
  dwProfileID: number /* u32 */,
  pProfileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsSetDefaultColorProfile!(scope, util.pwstrToFfi(pDeviceName), cptColorProfileType, cpstColorProfileSubType, dwProfileID, util.pwstrToFfi(pProfileName)));
}

export function WcsSetDefaultRenderingIntent(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  dwRenderingIntent: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsSetDefaultRenderingIntent!(scope, dwRenderingIntent));
}

export function WcsGetDefaultRenderingIntent(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  pdwRenderingIntent: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsGetDefaultRenderingIntent!(scope, util.toPointer(pdwRenderingIntent)));
}

export function WcsGetUsePerUserProfiles(
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwDeviceClass: number /* u32 */,
  pUsePerUserProfiles: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsGetUsePerUserProfiles!(util.pwstrToFfi(pDeviceName), dwDeviceClass, util.toPointer(pUsePerUserProfiles)));
}

export function WcsSetUsePerUserProfiles(
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwDeviceClass: number /* u32 */,
  usePerUserProfiles: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsSetUsePerUserProfiles!(util.pwstrToFfi(pDeviceName), dwDeviceClass, util.boolToFfi(usePerUserProfiles)));
}

export function WcsTranslateColors(
  hColorTransform: bigint | number /* isize */,
  nColors: number /* u32 */,
  nInputChannels: number /* u32 */,
  cdtInput: COLORDATATYPE /* Windows.Win32.UI.ColorSystem.COLORDATATYPE */,
  cbInput: number /* u32 */,
  pInputData: Deno.PointerValue | Uint8Array /* ptr */,
  nOutputChannels: number /* u32 */,
  cdtOutput: COLORDATATYPE /* Windows.Win32.UI.ColorSystem.COLORDATATYPE */,
  cbOutput: number /* u32 */,
  pOutputData: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsTranslateColors!(hColorTransform, nColors, nInputChannels, cdtInput, cbInput, util.toPointer(pInputData), nOutputChannels, cdtOutput, cbOutput, util.toPointer(pOutputData)));
}

export function WcsCheckColors(
  hColorTransform: bigint | number /* isize */,
  nColors: number /* u32 */,
  nInputChannels: number /* u32 */,
  cdtInput: COLORDATATYPE /* Windows.Win32.UI.ColorSystem.COLORDATATYPE */,
  cbInput: number /* u32 */,
  pInputData: Deno.PointerValue | Uint8Array /* ptr */,
  paResult: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsCheckColors!(hColorTransform, nColors, nInputChannels, cdtInput, cbInput, util.toPointer(pInputData), util.toPointer(paResult)));
}

export function CMCheckColors(
  hcmTransform: bigint | number /* isize */,
  lpaInputColors: Deno.PointerValue | Uint8Array /* ptr */,
  nColors: number /* u32 */,
  ctInput: COLORTYPE /* Windows.Win32.UI.ColorSystem.COLORTYPE */,
  lpaResult: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMCheckColors!(hcmTransform, util.toPointer(lpaInputColors), nColors, ctInput, util.toPointer(lpaResult)));
}

export function CMCheckRGBs(
  hcmTransform: bigint | number /* isize */,
  lpSrcBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmInput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwStride: number /* u32 */,
  lpaResult: Deno.PointerValue | Uint8Array /* ptr */,
  pfnCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.LPBMCALLBACKFN */,
  ulCallbackData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMCheckRGBs!(hcmTransform, util.toPointer(lpSrcBits), bmInput, dwWidth, dwHeight, dwStride, util.toPointer(lpaResult), util.toPointer(pfnCallback), util.toPointer(ulCallbackData)));
}

export function CMConvertColorNameToIndex(
  hProfile: bigint | number /* isize */,
  paColorName: Deno.PointerValue | Uint8Array /* ptr */,
  paIndex: Deno.PointerValue | Uint8Array /* ptr */,
  dwCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMConvertColorNameToIndex!(hProfile, util.toPointer(paColorName), util.toPointer(paIndex), dwCount));
}

export function CMConvertIndexToColorName(
  hProfile: bigint | number /* isize */,
  paIndex: Deno.PointerValue | Uint8Array /* ptr */,
  paColorName: Deno.PointerValue | Uint8Array /* ptr */,
  dwCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMConvertIndexToColorName!(hProfile, util.toPointer(paIndex), util.toPointer(paColorName), dwCount));
}

export function CMCreateDeviceLinkProfile(
  pahProfiles: Deno.PointerValue | Uint8Array /* ptr */,
  nProfiles: number /* u32 */,
  padwIntents: Deno.PointerValue | Uint8Array /* ptr */,
  nIntents: number /* u32 */,
  dwFlags: number /* u32 */,
  lpProfileData: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMCreateDeviceLinkProfile!(util.toPointer(pahProfiles), nProfiles, util.toPointer(padwIntents), nIntents, dwFlags, util.toPointer(lpProfileData)));
}

export function CMCreateMultiProfileTransform(
  pahProfiles: Deno.PointerValue | Uint8Array /* ptr */,
  nProfiles: number /* u32 */,
  padwIntents: Deno.PointerValue | Uint8Array /* ptr */,
  nIntents: number /* u32 */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libICM32_dll.CMCreateMultiProfileTransform!(util.toPointer(pahProfiles), nProfiles, util.toPointer(padwIntents), nIntents, dwFlags);
}

export function CMCreateProfileW(
  lpColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  lpProfileData: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMCreateProfileW!(util.toPointer(lpColorSpace), util.toPointer(lpProfileData)));
}

export function CMCreateTransform(
  lpColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  lpDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
  lpTargetDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libICM32_dll.CMCreateTransform!(util.toPointer(lpColorSpace), util.toPointer(lpDevCharacter), util.toPointer(lpTargetDevCharacter));
}

export function CMCreateTransformW(
  lpColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  lpDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
  lpTargetDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libICM32_dll.CMCreateTransformW!(util.toPointer(lpColorSpace), util.toPointer(lpDevCharacter), util.toPointer(lpTargetDevCharacter));
}

export function CMCreateTransformExt(
  lpColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  lpDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
  lpTargetDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libICM32_dll.CMCreateTransformExt!(util.toPointer(lpColorSpace), util.toPointer(lpDevCharacter), util.toPointer(lpTargetDevCharacter), dwFlags);
}

export function CMCheckColorsInGamut(
  hcmTransform: bigint | number /* isize */,
  lpaRGBTriple: Deno.PointerValue | Uint8Array /* ptr */,
  lpaResult: Deno.PointerValue | Uint8Array /* ptr */,
  nCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMCheckColorsInGamut!(hcmTransform, util.toPointer(lpaRGBTriple), util.toPointer(lpaResult), nCount));
}

export function CMCreateProfile(
  lpColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  lpProfileData: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMCreateProfile!(util.toPointer(lpColorSpace), util.toPointer(lpProfileData)));
}

export function CMTranslateRGB(
  hcmTransform: bigint | number /* isize */,
  ColorRef: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  lpColorRef: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMTranslateRGB!(hcmTransform, util.toPointer(ColorRef), util.toPointer(lpColorRef), dwFlags));
}

export function CMTranslateRGBs(
  hcmTransform: bigint | number /* isize */,
  lpSrcBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmInput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwStride: number /* u32 */,
  lpDestBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmOutput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwTranslateDirection: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMTranslateRGBs!(hcmTransform, util.toPointer(lpSrcBits), bmInput, dwWidth, dwHeight, dwStride, util.toPointer(lpDestBits), bmOutput, dwTranslateDirection));
}

export function CMCreateTransformExtW(
  lpColorSpace: Deno.PointerValue | Uint8Array /* ptr */,
  lpDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
  lpTargetDevCharacter: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libICM32_dll.CMCreateTransformExtW!(util.toPointer(lpColorSpace), util.toPointer(lpDevCharacter), util.toPointer(lpTargetDevCharacter), dwFlags);
}

export function CMDeleteTransform(
  hcmTransform: bigint | number /* isize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMDeleteTransform!(hcmTransform));
}

export function CMGetInfo(
  dwInfo: number /* u32 */,
): number /* u32 */ {
  return libICM32_dll.CMGetInfo!(dwInfo);
}

export function CMGetNamedProfileInfo(
  hProfile: bigint | number /* isize */,
  pNamedProfileInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMGetNamedProfileInfo!(hProfile, util.toPointer(pNamedProfileInfo)));
}

export function CMIsProfileValid(
  hProfile: bigint | number /* isize */,
  lpbValid: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMIsProfileValid!(hProfile, util.toPointer(lpbValid)));
}

export function CMTranslateColors(
  hcmTransform: bigint | number /* isize */,
  lpaInputColors: Deno.PointerValue | Uint8Array /* ptr */,
  nColors: number /* u32 */,
  ctInput: COLORTYPE /* Windows.Win32.UI.ColorSystem.COLORTYPE */,
  lpaOutputColors: Deno.PointerValue | Uint8Array /* ptr */,
  ctOutput: COLORTYPE /* Windows.Win32.UI.ColorSystem.COLORTYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMTranslateColors!(hcmTransform, util.toPointer(lpaInputColors), nColors, ctInput, util.toPointer(lpaOutputColors), ctOutput));
}

export function CMTranslateRGBsExt(
  hcmTransform: bigint | number /* isize */,
  lpSrcBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmInput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwWidth: number /* u32 */,
  dwHeight: number /* u32 */,
  dwInputStride: number /* u32 */,
  lpDestBits: Deno.PointerValue | Uint8Array /* ptr */,
  bmOutput: BMFORMAT /* Windows.Win32.UI.ColorSystem.BMFORMAT */,
  dwOutputStride: number /* u32 */,
  lpfnCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.ColorSystem.LPBMCALLBACKFN */,
  ulCallbackData: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libICM32_dll.CMTranslateRGBsExt!(hcmTransform, util.toPointer(lpSrcBits), bmInput, dwWidth, dwHeight, dwInputStride, util.toPointer(lpDestBits), bmOutput, dwOutputStride, util.toPointer(lpfnCallback), util.toPointer(ulCallbackData)));
}

export function WcsOpenColorProfileA(
  pCDMPProfile: Deno.PointerValue | Uint8Array /* ptr */,
  pCAMPProfile: Deno.PointerValue | Uint8Array /* ptr */,
  pGMMPProfile: Deno.PointerValue | Uint8Array /* ptr */,
  dwDesireAccess: number /* u32 */,
  dwShareMode: number /* u32 */,
  dwCreationMode: number /* u32 */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.WcsOpenColorProfileA!(util.toPointer(pCDMPProfile), util.toPointer(pCAMPProfile), util.toPointer(pGMMPProfile), dwDesireAccess, dwShareMode, dwCreationMode, dwFlags);
}

export function WcsOpenColorProfileW(
  pCDMPProfile: Deno.PointerValue | Uint8Array /* ptr */,
  pCAMPProfile: Deno.PointerValue | Uint8Array /* ptr */,
  pGMMPProfile: Deno.PointerValue | Uint8Array /* ptr */,
  dwDesireAccess: number /* u32 */,
  dwShareMode: number /* u32 */,
  dwCreationMode: number /* u32 */,
  dwFlags: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.WcsOpenColorProfileW!(util.toPointer(pCDMPProfile), util.toPointer(pCAMPProfile), util.toPointer(pGMMPProfile), dwDesireAccess, dwShareMode, dwCreationMode, dwFlags);
}

export function WcsCreateIccProfile(
  hWcsProfile: bigint | number /* isize */,
  dwOptions: number /* u32 */,
): bigint | number /* isize */ {
  return libmscms_dll.WcsCreateIccProfile!(hWcsProfile, dwOptions);
}

export function WcsGetCalibrationManagementState(
  pbIsEnabled: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsGetCalibrationManagementState!(util.toPointer(pbIsEnabled)));
}

export function WcsSetCalibrationManagementState(
  bIsEnabled: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.WcsSetCalibrationManagementState!(util.boolToFfi(bIsEnabled)));
}

export function ColorProfileAddDisplayAssociation(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  profileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  targetAdapterID: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LUID */,
  sourceID: number /* u32 */,
  setAsDefault: boolean /* Windows.Win32.Foundation.BOOL */,
  associateAsAdvancedColor: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmscms_dll.ColorProfileAddDisplayAssociation!(scope, util.pwstrToFfi(profileName), util.toPointer(targetAdapterID), sourceID, util.boolToFfi(setAsDefault), util.boolToFfi(associateAsAdvancedColor));
}

export function ColorProfileRemoveDisplayAssociation(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  profileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  targetAdapterID: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LUID */,
  sourceID: number /* u32 */,
  dissociateAdvancedColor: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmscms_dll.ColorProfileRemoveDisplayAssociation!(scope, util.pwstrToFfi(profileName), util.toPointer(targetAdapterID), sourceID, util.boolToFfi(dissociateAdvancedColor));
}

export function ColorProfileSetDisplayDefaultAssociation(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  profileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  profileType: COLORPROFILETYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILETYPE */,
  profileSubType: COLORPROFILESUBTYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILESUBTYPE */,
  targetAdapterID: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LUID */,
  sourceID: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmscms_dll.ColorProfileSetDisplayDefaultAssociation!(scope, util.pwstrToFfi(profileName), profileType, profileSubType, util.toPointer(targetAdapterID), sourceID);
}

export function ColorProfileGetDisplayList(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  targetAdapterID: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LUID */,
  sourceID: number /* u32 */,
  profileList: Deno.PointerValue | Uint8Array /* ptr */,
  profileCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmscms_dll.ColorProfileGetDisplayList!(scope, util.toPointer(targetAdapterID), sourceID, util.toPointer(profileList), util.toPointer(profileCount));
}

export function ColorProfileGetDisplayDefault(
  scope: WCS_PROFILE_MANAGEMENT_SCOPE /* Windows.Win32.UI.ColorSystem.WCS_PROFILE_MANAGEMENT_SCOPE */,
  targetAdapterID: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LUID */,
  sourceID: number /* u32 */,
  profileType: COLORPROFILETYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILETYPE */,
  profileSubType: COLORPROFILESUBTYPE /* Windows.Win32.UI.ColorSystem.COLORPROFILESUBTYPE */,
  profileName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmscms_dll.ColorProfileGetDisplayDefault!(scope, util.toPointer(targetAdapterID), sourceID, profileType, profileSubType, util.toPointer(profileName));
}

export function ColorProfileGetDisplayUserScope(
  targetAdapterID: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LUID */,
  sourceID: number /* u32 */,
  scope: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libmscms_dll.ColorProfileGetDisplayUserScope!(util.toPointer(targetAdapterID), sourceID, util.toPointer(scope));
}

