/// Auto-generated by Deno Win32: Windows.Win32.UI.Controls.Apis

import * as util from "../../util.ts";

// Enums
export type COMMON_DLG_ERRORS = number;
export type CHOOSECOLOR_FLAGS = number;
export type OPEN_FILENAME_FLAGS = number;
export type OPEN_FILENAME_FLAGS_EX = number;
export type PAGESETUPDLG_FLAGS = number;
export type CHOOSEFONT_FLAGS = number;
export type FINDREPLACE_FLAGS = number;
export type PRINTDLGEX_FLAGS = number;
export type CHOOSEFONT_FONT_TYPE = number;
export type THEME_PROPERTY_SYMBOL_ID = number;
export type SET_THEME_APP_PROPERTIES_FLAGS = number;
export type DRAGLISTINFO_NOTIFICATION_FLAGS = number;
export type WORD_BREAK_ACTION = number;
export type DPAMM_MESSAGE = number;
export type DLG_DIR_LIST_FILE_TYPE = number;
export type OPEN_THEME_DATA_FLAGS = number;
export type GET_THEME_BITMAP_FLAGS = number;
export type ENABLE_SCROLL_BAR_ARROWS = number;
export type IMAGE_LIST_DRAW_STYLE = number;
export type WSB_PROP = number;
export type PSPCB_MESSAGE = number;
export type HEADER_CONTROL_NOTIFICATION_BUTTON = number;
export type IMAGE_LIST_COPY_FLAGS = number;
export type DLG_BUTTON_CHECK_STATE = number;
export type DRAW_THEME_PARENT_BACKGROUND_FLAGS = number;
export type IMAGE_LIST_ITEM_FLAGS = number;
export type HDI_MASK = number;
export type NMREBAR_MASK_FLAGS = number;
export type EDITBALLOONTIP_ICON = number;
export type LVCOLUMNW_FORMAT = number;
export type NMPGSCROLL_KEYS = number;
export type COMBOBOX_EX_ITEM_FLAGS = number;
export type TVITEMEXW_CHILDREN = number;
export type TVITEM_MASK = number;
export type TCITEMHEADERA_MASK = number;
export type TCHITTESTINFO_FLAGS = number;
export type COMBOBOXINFO_BUTTON_STATE = number;
export type NMCUSTOMDRAW_DRAW_STAGE = number;
export type MCGRIDINFO_PART = number;
export type LVITEMA_GROUP_ID = number;
export type NMTBHOTITEM_FLAGS = number;
export type TOOLTIP_FLAGS = number;
export type LVTILEVIEWINFO_FLAGS = number;
export type LVTILEVIEWINFO_MASK = number;
export type NMPGSCROLL_DIR = number;
export type LVCOLUMNW_MASK = number;
export type LVFINDINFOW_FLAGS = number;
export type BUTTON_IMAGELIST_ALIGN = number;
export type TBBUTTONINFOW_MASK = number;
export type TBINSERTMARK_FLAGS = number;
export type LVGROUP_MASK = number;
export type BP_PAINTPARAMS_FLAGS = number;
export type TVHITTESTINFO_FLAGS = number;
export type DRAWITEMSTRUCT_CTL_TYPE = number;
export type NMPGCALCSIZE_FLAGS = number;
export type MCGRIDINFO_FLAGS = number;
export type LVHITTESTINFO_FLAGS = number;
export type INITCOMMONCONTROLSEX_ICC = number;
export type NMLVCUSTOMDRAW_ITEM_TYPE = number;
export type NMTBDISPINFOW_MASK = number;
export type NMLVEMPTYMARKUP_FLAGS = number;
export type LVFOOTERITEM_MASK = number;
export type IMAGELIST_CREATION_FLAGS = number;
export type DTTOPTS_FLAGS = number;
export type NMLVGETINFOTIP_FLAGS = number;
export type LIST_VIEW_ITEM_STATE_FLAGS = number;
export type NM_TREEVIEW_ACTION = number;
export type MONTH_CALDENDAR_MESSAGES_VIEW = number;
export type TAB_CONTROL_ITEM_STATE = number;
export type TREE_VIEW_ITEM_STATE_FLAGS = number;
export type HEADER_CONTROL_FORMAT_FLAGS = number;
export type HEADER_CONTROL_FORMAT_TYPE = number;
export type HEADER_CONTROL_FORMAT_STATE = number;
export type HEADER_HITTEST_INFO_FLAGS = number;
export type IMAGE_LIST_WRITE_STREAM_FLAGS = number;
export type LIST_ITEM_FLAGS = number;
export type LIST_ITEM_STATE_FLAGS = number;
export type LIST_VIEW_BACKGROUND_IMAGE_FLAGS = number;
export type LIST_VIEW_GROUP_STATE_FLAGS = number;
export type LIST_VIEW_GROUP_ALIGN_FLAGS = number;
export type LIST_VIEW_INSERT_MARK_FLAGS = number;
export type LIST_VIEW_ITEM_COLUMN_FORMAT_FLAGS = number;
export type MCHITTESTINFO_HIT_FLAGS = number;
export type NMCUSTOMDRAW_DRAW_STATE_FLAGS = number;
export type NMDATETIMECHANGE_FLAGS = number;
export type LIST_VIEW_ITEM_FLAGS = number;
export type ODA_FLAGS = number;
export type ODS_FLAGS = number;
export type HIT_TEST_BACKGROUND_OPTIONS = number;
export type CFM_MASK = number;
export type CFE_EFFECTS = number;
export type PARAFORMAT_MASK = number;
export type RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE = number;
export type RICH_EDIT_GET_OBJECT_FLAGS = number;
export type PARAFORMAT_BORDERS = number;
export type PARAFORMAT_SHADING_STYLE = number;
export type GETTEXTEX_FLAGS = number;
export type ENDCOMPOSITIONNOTIFY_CODE = number;
export type IMECOMPTEXT_FLAGS = number;
export type GETTEXTLENGTHEX_FLAGS = number;
export type REOBJECT_FLAGS = number;
export type PARAFORMAT_NUMBERING_STYLE = number;
export type PARAFORMAT_ALIGNMENT = number;
export type PARAFORMAT_NUMBERING = number;
export type TVITEMPART = number;
export type EC_ENDOFLINE = number;
export type EC_SEARCHWEB_ENTRYPOINT = number;
export type TASKDIALOG_FLAGS = number;
export type TASKDIALOG_MESSAGES = number;
export type TASKDIALOG_NOTIFICATIONS = number;
export type TASKDIALOG_ELEMENTS = number;
export type TASKDIALOG_ICON_ELEMENTS = number;
export type TASKDIALOG_COMMON_BUTTON_FLAGS = number;
export type _LI_METRIC = number;
export type TA_PROPERTY = number;
export type TA_PROPERTY_FLAG = number;
export type TA_TRANSFORM_TYPE = number;
export type TA_TRANSFORM_FLAG = number;
export type TA_TIMINGFUNCTION_TYPE = number;
export type THEMESIZE = number;
export type PROPERTYORIGIN = number;
export type WINDOWTHEMEATTRIBUTETYPE = number;
export type BP_BUFFERFORMAT = number;
export type BP_ANIMATIONSTYLE = number;
export type AEROWIZARDPARTS = number;
export type TITLEBARSTATES = number;
export type HEADERAREASTATES = number;
export type CONTENTAREASTATES = number;
export type BUTTONPARTS = number;
export type PUSHBUTTONSTATES = number;
export type RADIOBUTTONSTATES = number;
export type CHECKBOXSTATES = number;
export type GROUPBOXSTATES = number;
export type COMMANDLINKSTATES = number;
export type COMMANDLINKGLYPHSTATES = number;
export type PUSHBUTTONDROPDOWNSTATES = number;
export type COMBOBOXPARTS = number;
export type COMBOBOXSTYLESTATES = number;
export type DROPDOWNBUTTONRIGHTSTATES = number;
export type DROPDOWNBUTTONLEFTSTATES = number;
export type TRANSPARENTBACKGROUNDSTATES = number;
export type BORDERSTATES = number;
export type READONLYSTATES = number;
export type CUEBANNERSTATES = number;
export type DROPDOWNITEMSTATES = number;
export type COMMUNICATIONSPARTS = number;
export type TABSTATES = number;
export type CONTROLPANELPARTS = number;
export type HELPLINKSTATES = number;
export type TASKLINKSTATES = number;
export type CONTENTLINKSTATES = number;
export type SECTIONTITLELINKSTATES = number;
export type DATEPICKERPARTS = number;
export type DATETEXTSTATES = number;
export type DATEBORDERSTATES = number;
export type SHOWCALENDARBUTTONRIGHTSTATES = number;
export type DRAGDROPPARTS = number;
export type COPYSTATES = number;
export type MOVESTATES = number;
export type UPDATEMETADATASTATES = number;
export type CREATELINKSTATES = number;
export type WARNINGSTATES = number;
export type NONESTATES = number;
export type EDITPARTS = number;
export type EDITTEXTSTATES = number;
export type BACKGROUNDSTATES = number;
export type BACKGROUNDWITHBORDERSTATES = number;
export type EDITBORDER_NOSCROLLSTATES = number;
export type EDITBORDER_HSCROLLSTATES = number;
export type EDITBORDER_VSCROLLSTATES = number;
export type EDITBORDER_HVSCROLLSTATES = number;
export type EXPLORERBARPARTS = number;
export type HEADERCLOSESTATES = number;
export type HEADERPINSTATES = number;
export type IEBARMENUSTATES = number;
export type NORMALGROUPCOLLAPSESTATES = number;
export type NORMALGROUPEXPANDSTATES = number;
export type SPECIALGROUPCOLLAPSESTATES = number;
export type SPECIALGROUPEXPANDSTATES = number;
export type FLYOUTPARTS = number;
export type LABELSTATES = number;
export type LINKSTATES = number;
export type BODYSTATES = number;
export type LINKHEADERSTATES = number;
export type HEADERPARTS = number;
export type HEADERSTYLESTATES = number;
export type HEADERITEMSTATES = number;
export type HEADERITEMLEFTSTATES = number;
export type HEADERITEMRIGHTSTATES = number;
export type HEADERSORTARROWSTATES = number;
export type HEADERDROPDOWNSTATES = number;
export type HEADERDROPDOWNFILTERSTATES = number;
export type HEADEROVERFLOWSTATES = number;
export type LISTBOXPARTS = number;
export type BORDER_HSCROLLSTATES = number;
export type BORDER_HVSCROLLSTATES = number;
export type BORDER_NOSCROLLSTATES = number;
export type BORDER_VSCROLLSTATES = number;
export type ITEMSTATES = number;
export type LISTVIEWPARTS = number;
export type LISTITEMSTATES = number;
export type GROUPHEADERSTATES = number;
export type GROUPHEADERLINESTATES = number;
export type EXPANDBUTTONSTATES = number;
export type COLLAPSEBUTTONSTATES = number;
export type MENUPARTS = number;
export type BARBACKGROUNDSTATES = number;
export type BARITEMSTATES = number;
export type POPUPCHECKSTATES = number;
export type POPUPCHECKBACKGROUNDSTATES = number;
export type POPUPITEMSTATES = number;
export type POPUPSUBMENUSTATES = number;
export type SYSTEMCLOSESTATES = number;
export type SYSTEMMAXIMIZESTATES = number;
export type SYSTEMMINIMIZESTATES = number;
export type SYSTEMRESTORESTATES = number;
export type NAVIGATIONPARTS = number;
export type NAV_BACKBUTTONSTATES = number;
export type NAV_FORWARDBUTTONSTATES = number;
export type NAV_MENUBUTTONSTATES = number;
export type PROGRESSPARTS = number;
export type TRANSPARENTBARSTATES = number;
export type TRANSPARENTBARVERTSTATES = number;
export type FILLSTATES = number;
export type FILLVERTSTATES = number;
export type REBARPARTS = number;
export type CHEVRONSTATES = number;
export type CHEVRONVERTSTATES = number;
export type SPLITTERSTATES = number;
export type SPLITTERVERTSTATES = number;
export type SCROLLBARPARTS = number;
export type ARROWBTNSTATES = number;
export type SCROLLBARSTYLESTATES = number;
export type SIZEBOXSTATES = number;
export type SPINPARTS = number;
export type UPSTATES = number;
export type DOWNSTATES = number;
export type UPHORZSTATES = number;
export type DOWNHORZSTATES = number;
export type STATUSPARTS = number;
export type TABPARTS = number;
export type TABITEMSTATES = number;
export type TABITEMLEFTEDGESTATES = number;
export type TABITEMRIGHTEDGESTATES = number;
export type TABITEMBOTHEDGESTATES = number;
export type TOPTABITEMSTATES = number;
export type TOPTABITEMLEFTEDGESTATES = number;
export type TOPTABITEMRIGHTEDGESTATES = number;
export type TOPTABITEMBOTHEDGESTATES = number;
export type TASKDIALOGPARTS = number;
export type CONTENTPANESTATES = number;
export type EXPANDOBUTTONSTATES = number;
export type TEXTSTYLEPARTS = number;
export type HYPERLINKTEXTSTATES = number;
export type CONTROLLABELSTATES = number;
export type TOOLBARPARTS = number;
export type TOOLBARSTYLESTATES = number;
export type TOOLTIPPARTS = number;
export type CLOSESTATES = number;
export type STANDARDSTATES = number;
export type BALLOONSTATES = number;
export type BALLOONSTEMSTATES = number;
export type WRENCHSTATES = number;
export type TRACKBARPARTS = number;
export type TRACKBARSTYLESTATES = number;
export type TRACKSTATES = number;
export type TRACKVERTSTATES = number;
export type THUMBSTATES = number;
export type THUMBBOTTOMSTATES = number;
export type THUMBTOPSTATES = number;
export type THUMBVERTSTATES = number;
export type THUMBLEFTSTATES = number;
export type THUMBRIGHTSTATES = number;
export type TICSSTATES = number;
export type TICSVERTSTATES = number;
export type TREEVIEWPARTS = number;
export type TREEITEMSTATES = number;
export type GLYPHSTATES = number;
export type HOTGLYPHSTATES = number;
export type USERTILEPARTS = number;
export type HOVERBACKGROUNDSTATES = number;
export type TEXTSELECTIONGRIPPERPARTS = number;
export type GRIPPERSTATES = number;
export type WINDOWPARTS = number;
export type FRAMESTATES = number;
export type CAPTIONSTATES = number;
export type MAXCAPTIONSTATES = number;
export type MINCAPTIONSTATES = number;
export type HORZSCROLLSTATES = number;
export type HORZTHUMBSTATES = number;
export type VERTSCROLLSTATES = number;
export type VERTTHUMBSTATES = number;
export type SYSBUTTONSTATES = number;
export type MINBUTTONSTATES = number;
export type MAXBUTTONSTATES = number;
export type RESTOREBUTTONSTATES = number;
export type HELPBUTTONSTATES = number;
export type CLOSEBUTTONSTATES = number;
export type SMALLCLOSEBUTTONSTATES = number;
export type FRAMEBOTTOMSTATES = number;
export type FRAMELEFTSTATES = number;
export type FRAMERIGHTSTATES = number;
export type SMALLCAPTIONSTATES = number;
export type SMALLFRAMEBOTTOMSTATES = number;
export type SMALLFRAMELEFTSTATES = number;
export type SMALLFRAMERIGHTSTATES = number;
export type MDICLOSEBUTTONSTATES = number;
export type MDIMINBUTTONSTATES = number;
export type MDIRESTOREBUTTONSTATES = number;
export type BGTYPE = number;
export type IMAGELAYOUT = number;
export type BORDERTYPE = number;
export type FILLTYPE = number;
export type SIZINGTYPE = number;
export type HALIGN = number;
export type CONTENTALIGNMENT = number;
export type VALIGN = number;
export type OFFSETTYPE = number;
export type ICONEFFECT = number;
export type TEXTSHADOWTYPE = number;
export type GLYPHTYPE = number;
export type IMAGESELECTTYPE = number;
export type TRUESIZESCALINGTYPE = number;
export type GLYPHFONTSIZINGTYPE = number;
export type LINKPARTS = number;
export type HYPERLINKSTATES = number;
export type EMPTYMARKUPPARTS = number;
export type MARKUPTEXTSTATES = number;
export type STATICPARTS = number;
export type PAGEPARTS = number;
export type MONTHCALPARTS = number;
export type GRIDCELLBACKGROUNDSTATES = number;
export type GRIDCELLSTATES = number;
export type GRIDCELLUPPERSTATES = number;
export type TRAILINGGRIDCELLSTATES = number;
export type TRAILINGGRIDCELLUPPERSTATES = number;
export type NAVNEXTSTATES = number;
export type NAVPREVSTATES = number;
export type CLOCKPARTS = number;
export type CLOCKSTATES = number;
export type TRAYNOTIFYPARTS = number;
export type TASKBARPARTS = number;
export type TASKBANDPARTS = number;
export type STARTPANELPARTS = number;
export type MOREPROGRAMSTABSTATES = number;
export type SOFTWAREEXPLORERSTATES = number;
export type OPENBOXSTATES = number;
export type MOREPROGRAMSARROWSTATES = number;
export type MOREPROGRAMSARROWBACKSTATES = number;
export type LOGOFFBUTTONSSTATES = number;
export type MENUBANDPARTS = number;
export type MENUBANDSTATES = number;
export type TEXTMODE = number;
export type TEXT_ALIGN_OPTIONS = number;
export type EMBED_FONT_CHARSET = number;
export type DVASPECT = number;
export type UNDONAMEID = number;
export type KHYPH = number;
export type TXTBACKSTYLE = number;
export type TXTHITRESULT = number;
export type TXTNATURALSIZE = number;
export type TXTVIEW = number;
export type CHANGETYPE = number;
export type CARET_FLAGS = number;
export type tomConstants = number;
export type OBJECTTYPE = number;
export type MANCODE = number;
export type POINTER_FEEDBACK_MODE = number;
export type POINTER_INPUT_TYPE = number;
export type FEEDBACK_TYPE = number;
export type POINTER_DEVICE_TYPE = number;
export type POINTER_DEVICE_CURSOR_TYPE = number;
export type IMAGE_FLAGS = number;
export type SCROLLBAR_CONSTANTS = number;
export type DRAW_TEXT_FORMAT = number;
export type DRAWEDGE_FLAGS = number;
export type DRAW_EDGE_FLAGS = number;

// Constants
export const TVI_ROOT = 18374687600658022400n;
export const TVI_FIRST = 18374688700169650177n;
export const TVI_LAST = 18374689799681277954n;
export const TVI_SORT = 18445369705649602563n;
export const BCN_FIRST = 4294966046;
export const EM_SCROLLCARET = 183;
export const EM_SETLIMITTEXT = 197;
export const EM_GETLIMITTEXT = 213;
export const EM_POSFROMCHAR = 214;
export const EM_CHARFROMPOS = 215;
export const WM_CTLCOLOR = 25;
export const ODT_HEADER = 100;
export const LVM_FIRST = 4096;
export const TV_FIRST = 4352;
export const HDM_FIRST = 4608;
export const TCM_FIRST = 4864;
export const PGM_FIRST = 5120;
export const ECM_FIRST = 5376;
export const BCM_FIRST = 5632;
export const CBM_FIRST = 5888;
export const CCM_FIRST = 8192;
export const CCM_LAST = 8704;
export const CCM_SETBKCOLOR = 8193;
export const CCM_SETCOLORSCHEME = 8194;
export const CCM_GETCOLORSCHEME = 8195;
export const CCM_GETDROPTARGET = 8196;
export const CCM_SETUNICODEFORMAT = 8197;
export const CCM_GETUNICODEFORMAT = 8198;
export const COMCTL32_VERSION = 6;
export const CCM_SETVERSION = 8199;
export const CCM_GETVERSION = 8200;
export const CCM_SETNOTIFYWINDOW = 8201;
export const CCM_SETWINDOWTHEME = 8203;
export const CCM_DPISCALE = 8204;
export const INFOTIPSIZE = 1024;
export const MSGF_COMMCTRL_BEGINDRAG = 16896;
export const MSGF_COMMCTRL_SIZEHEADER = 16897;
export const MSGF_COMMCTRL_DRAGSELECT = 16898;
export const MSGF_COMMCTRL_TOOLBARCUST = 16899;
export const CDRF_DODEFAULT = 0;
export const CDRF_NEWFONT = 2;
export const CDRF_SKIPDEFAULT = 4;
export const CDRF_DOERASE = 8;
export const CDRF_SKIPPOSTPAINT = 256;
export const CDRF_NOTIFYPOSTPAINT = 16;
export const CDRF_NOTIFYITEMDRAW = 32;
export const CDRF_NOTIFYSUBITEMDRAW = 32;
export const CDRF_NOTIFYPOSTERASE = 64;
export const CDDS_POSTERASE = 4;
export const CDDS_ITEM = 65536;
export const NM_GETCUSTOMSPLITRECT = 4294966049;
export const CLR_NONE = `-1`;
export const CLR_DEFAULT = `-16777216`;
export const ILD_TRANSPARENT = 1;
export const ILD_IMAGE = 32;
export const ILD_ROP = 64;
export const ILD_BLEND25 = 2;
export const ILD_OVERLAYMASK = 3840;
export const ILD_PRESERVEALPHA = 4096;
export const ILD_SCALE = 8192;
export const ILD_DPISCALE = 16384;
export const ILD_ASYNC = 32768;
export const CLR_HILIGHT = `-16777216`;
export const ILS_NORMAL = 0;
export const ILS_GLOW = 1;
export const ILS_SHADOW = 2;
export const ILS_SATURATE = 4;
export const ILS_ALPHA = 8;
export const ILGT_NORMAL = 0;
export const ILGT_ASYNC = 1;
export const WC_HEADERA = `SysHeader32`;
export const WC_HEADERW = `SysHeader32`;
export const WC_HEADER = `SysHeader32`;
export const HDS_HORZ = 0;
export const HDS_BUTTONS = 2;
export const HDS_HOTTRACK = 4;
export const HDS_HIDDEN = 8;
export const HDS_DRAGDROP = 64;
export const HDS_FULLDRAG = 128;
export const HDS_FILTERBAR = 256;
export const HDS_FLAT = 512;
export const HDS_CHECKBOXES = 1024;
export const HDS_NOSIZING = 2048;
export const HDS_OVERFLOW = 4096;
export const HDM_GETITEMCOUNT = 4608;
export const HDM_INSERTITEMA = 4609;
export const HDM_INSERTITEMW = 4618;
export const HDM_INSERTITEM = 4618;
export const HDM_DELETEITEM = 4610;
export const HDM_GETITEMA = 4611;
export const HDM_GETITEMW = 4619;
export const HDM_GETITEM = 4619;
export const HDM_SETITEMA = 4612;
export const HDM_SETITEMW = 4620;
export const HDM_SETITEM = 4620;
export const HDM_LAYOUT = 4613;
export const HDSIL_NORMAL = 0;
export const HDSIL_STATE = 1;
export const HDM_HITTEST = 4614;
export const HDM_GETITEMRECT = 4615;
export const HDM_SETIMAGELIST = 4616;
export const HDM_GETIMAGELIST = 4617;
export const HDM_ORDERTOINDEX = 4623;
export const HDM_CREATEDRAGIMAGE = 4624;
export const HDM_GETORDERARRAY = 4625;
export const HDM_SETORDERARRAY = 4626;
export const HDM_SETHOTDIVIDER = 4627;
export const HDM_SETBITMAPMARGIN = 4628;
export const HDM_GETBITMAPMARGIN = 4629;
export const HDM_SETUNICODEFORMAT = 8197;
export const HDM_GETUNICODEFORMAT = 8198;
export const HDM_SETFILTERCHANGETIMEOUT = 4630;
export const HDM_EDITFILTER = 4631;
export const HDM_CLEARFILTER = 4632;
export const HDM_GETITEMDROPDOWNRECT = 4633;
export const HDM_GETOVERFLOWRECT = 4634;
export const HDM_GETFOCUSEDITEM = 4635;
export const HDM_SETFOCUSEDITEM = 4636;
export const TOOLBARCLASSNAMEW = `ToolbarWindow32`;
export const TOOLBARCLASSNAMEA = `ToolbarWindow32`;
export const TOOLBARCLASSNAME = `ToolbarWindow32`;
export const CMB_MASKED = 2;
export const TBSTATE_CHECKED = 1;
export const TBSTATE_PRESSED = 2;
export const TBSTATE_ENABLED = 4;
export const TBSTATE_HIDDEN = 8;
export const TBSTATE_INDETERMINATE = 16;
export const TBSTATE_WRAP = 32;
export const TBSTATE_ELLIPSES = 64;
export const TBSTATE_MARKED = 128;
export const TBSTYLE_BUTTON = 0;
export const TBSTYLE_SEP = 1;
export const TBSTYLE_CHECK = 2;
export const TBSTYLE_GROUP = 4;
export const TBSTYLE_DROPDOWN = 8;
export const TBSTYLE_AUTOSIZE = 16;
export const TBSTYLE_NOPREFIX = 32;
export const TBSTYLE_TOOLTIPS = 256;
export const TBSTYLE_WRAPABLE = 512;
export const TBSTYLE_ALTDRAG = 1024;
export const TBSTYLE_FLAT = 2048;
export const TBSTYLE_LIST = 4096;
export const TBSTYLE_CUSTOMERASE = 8192;
export const TBSTYLE_REGISTERDROP = 16384;
export const TBSTYLE_TRANSPARENT = 32768;
export const TBSTYLE_EX_DRAWDDARROWS = 1;
export const BTNS_BUTTON = 0;
export const BTNS_SEP = 1;
export const BTNS_CHECK = 2;
export const BTNS_GROUP = 4;
export const BTNS_DROPDOWN = 8;
export const BTNS_AUTOSIZE = 16;
export const BTNS_NOPREFIX = 32;
export const BTNS_SHOWTEXT = 64;
export const BTNS_WHOLEDROPDOWN = 128;
export const TBSTYLE_EX_MIXEDBUTTONS = 8;
export const TBSTYLE_EX_HIDECLIPPEDBUTTONS = 16;
export const TBSTYLE_EX_MULTICOLUMN = 2;
export const TBSTYLE_EX_VERTICAL = 4;
export const TBSTYLE_EX_DOUBLEBUFFER = 128;
export const TBCDRF_NOEDGES = 65536;
export const TBCDRF_HILITEHOTTRACK = 131072;
export const TBCDRF_NOOFFSET = 262144;
export const TBCDRF_NOMARK = 524288;
export const TBCDRF_NOETCHEDEFFECT = 1048576;
export const TBCDRF_BLENDICON = 2097152;
export const TBCDRF_NOBACKGROUND = 4194304;
export const TBCDRF_USECDCOLORS = 8388608;
export const TB_ENABLEBUTTON = 1025;
export const TB_CHECKBUTTON = 1026;
export const TB_PRESSBUTTON = 1027;
export const TB_HIDEBUTTON = 1028;
export const TB_INDETERMINATE = 1029;
export const TB_MARKBUTTON = 1030;
export const TB_ISBUTTONENABLED = 1033;
export const TB_ISBUTTONCHECKED = 1034;
export const TB_ISBUTTONPRESSED = 1035;
export const TB_ISBUTTONHIDDEN = 1036;
export const TB_ISBUTTONINDETERMINATE = 1037;
export const TB_ISBUTTONHIGHLIGHTED = 1038;
export const TB_SETSTATE = 1041;
export const TB_GETSTATE = 1042;
export const TB_ADDBITMAP = 1043;
export const IDB_STD_SMALL_COLOR = 0;
export const IDB_STD_LARGE_COLOR = 1;
export const IDB_VIEW_SMALL_COLOR = 4;
export const IDB_VIEW_LARGE_COLOR = 5;
export const IDB_HIST_SMALL_COLOR = 8;
export const IDB_HIST_LARGE_COLOR = 9;
export const IDB_HIST_NORMAL = 12;
export const IDB_HIST_HOT = 13;
export const IDB_HIST_DISABLED = 14;
export const IDB_HIST_PRESSED = 15;
export const STD_CUT = 0;
export const STD_COPY = 1;
export const STD_PASTE = 2;
export const STD_UNDO = 3;
export const STD_REDOW = 4;
export const STD_DELETE = 5;
export const STD_FILENEW = 6;
export const STD_FILEOPEN = 7;
export const STD_FILESAVE = 8;
export const STD_PRINTPRE = 9;
export const STD_PROPERTIES = 10;
export const STD_HELP = 11;
export const STD_FIND = 12;
export const STD_REPLACE = 13;
export const STD_PRINT = 14;
export const VIEW_LARGEICONS = 0;
export const VIEW_SMALLICONS = 1;
export const VIEW_LIST = 2;
export const VIEW_DETAILS = 3;
export const VIEW_SORTNAME = 4;
export const VIEW_SORTSIZE = 5;
export const VIEW_SORTDATE = 6;
export const VIEW_SORTTYPE = 7;
export const VIEW_PARENTFOLDER = 8;
export const VIEW_NETCONNECT = 9;
export const VIEW_NETDISCONNECT = 10;
export const VIEW_NEWFOLDER = 11;
export const VIEW_VIEWMENU = 12;
export const HIST_BACK = 0;
export const HIST_FORWARD = 1;
export const HIST_FAVORITES = 2;
export const HIST_ADDTOFAVORITES = 3;
export const HIST_VIEWTREE = 4;
export const TB_ADDBUTTONSA = 1044;
export const TB_INSERTBUTTONA = 1045;
export const TB_DELETEBUTTON = 1046;
export const TB_GETBUTTON = 1047;
export const TB_BUTTONCOUNT = 1048;
export const TB_COMMANDTOINDEX = 1049;
export const TB_SAVERESTOREA = 1050;
export const TB_SAVERESTOREW = 1100;
export const TB_CUSTOMIZE = 1051;
export const TB_ADDSTRINGA = 1052;
export const TB_ADDSTRINGW = 1101;
export const TB_GETITEMRECT = 1053;
export const TB_BUTTONSTRUCTSIZE = 1054;
export const TB_SETBUTTONSIZE = 1055;
export const TB_SETBITMAPSIZE = 1056;
export const TB_AUTOSIZE = 1057;
export const TB_GETTOOLTIPS = 1059;
export const TB_SETTOOLTIPS = 1060;
export const TB_SETPARENT = 1061;
export const TB_SETROWS = 1063;
export const TB_GETROWS = 1064;
export const TB_SETCMDID = 1066;
export const TB_CHANGEBITMAP = 1067;
export const TB_GETBITMAP = 1068;
export const TB_GETBUTTONTEXTA = 1069;
export const TB_GETBUTTONTEXTW = 1099;
export const TB_REPLACEBITMAP = 1070;
export const TB_SETINDENT = 1071;
export const TB_SETIMAGELIST = 1072;
export const TB_GETIMAGELIST = 1073;
export const TB_LOADIMAGES = 1074;
export const TB_GETRECT = 1075;
export const TB_SETHOTIMAGELIST = 1076;
export const TB_GETHOTIMAGELIST = 1077;
export const TB_SETDISABLEDIMAGELIST = 1078;
export const TB_GETDISABLEDIMAGELIST = 1079;
export const TB_SETSTYLE = 1080;
export const TB_GETSTYLE = 1081;
export const TB_GETBUTTONSIZE = 1082;
export const TB_SETBUTTONWIDTH = 1083;
export const TB_SETMAXTEXTROWS = 1084;
export const TB_GETTEXTROWS = 1085;
export const TB_GETBUTTONTEXT = 1099;
export const TB_SAVERESTORE = 1100;
export const TB_ADDSTRING = 1101;
export const TB_GETOBJECT = 1086;
export const TB_GETHOTITEM = 1095;
export const TB_SETHOTITEM = 1096;
export const TB_SETANCHORHIGHLIGHT = 1097;
export const TB_GETANCHORHIGHLIGHT = 1098;
export const TB_MAPACCELERATORA = 1102;
export const TB_GETINSERTMARK = 1103;
export const TB_SETINSERTMARK = 1104;
export const TB_INSERTMARKHITTEST = 1105;
export const TB_MOVEBUTTON = 1106;
export const TB_GETMAXSIZE = 1107;
export const TB_SETEXTENDEDSTYLE = 1108;
export const TB_GETEXTENDEDSTYLE = 1109;
export const TB_GETPADDING = 1110;
export const TB_SETPADDING = 1111;
export const TB_SETINSERTMARKCOLOR = 1112;
export const TB_GETINSERTMARKCOLOR = 1113;
export const TB_SETCOLORSCHEME = 8194;
export const TB_GETCOLORSCHEME = 8195;
export const TB_SETUNICODEFORMAT = 8197;
export const TB_GETUNICODEFORMAT = 8198;
export const TB_MAPACCELERATORW = 1114;
export const TB_MAPACCELERATOR = 1114;
export const TBBF_LARGE = 1;
export const TB_GETBITMAPFLAGS = 1065;
export const TB_GETBUTTONINFOW = 1087;
export const TB_SETBUTTONINFOW = 1088;
export const TB_GETBUTTONINFOA = 1089;
export const TB_SETBUTTONINFOA = 1090;
export const TB_GETBUTTONINFO = 1087;
export const TB_SETBUTTONINFO = 1088;
export const TB_INSERTBUTTONW = 1091;
export const TB_ADDBUTTONSW = 1092;
export const TB_HITTEST = 1093;
export const TB_INSERTBUTTON = 1091;
export const TB_ADDBUTTONS = 1092;
export const TB_SETDRAWTEXTFLAGS = 1094;
export const TB_GETSTRINGW = 1115;
export const TB_GETSTRINGA = 1116;
export const TB_GETSTRING = 1115;
export const TB_SETBOUNDINGSIZE = 1117;
export const TB_SETHOTITEM2 = 1118;
export const TB_HASACCELERATOR = 1119;
export const TB_SETLISTGAP = 1120;
export const TB_GETIMAGELISTCOUNT = 1122;
export const TB_GETIDEALSIZE = 1123;
export const TBMF_PAD = 1;
export const TBMF_BARPAD = 2;
export const TBMF_BUTTONSPACING = 4;
export const TB_GETMETRICS = 1125;
export const TB_SETMETRICS = 1126;
export const TB_GETITEMDROPDOWNRECT = 1127;
export const TB_SETPRESSEDIMAGELIST = 1128;
export const TB_GETPRESSEDIMAGELIST = 1129;
export const TB_SETWINDOWTHEME = 8203;
export const TBNRF_HIDEHELP = 1;
export const TBNRF_ENDCUSTOMIZE = 2;
export const TBDDRET_DEFAULT = 0;
export const TBDDRET_NODEFAULT = 1;
export const TBDDRET_TREATPRESSED = 2;
export const REBARCLASSNAMEW = `ReBarWindow32`;
export const REBARCLASSNAMEA = `ReBarWindow32`;
export const REBARCLASSNAME = `ReBarWindow32`;
export const RBIM_IMAGELIST = 1;
export const RBS_TOOLTIPS = 256;
export const RBS_VARHEIGHT = 512;
export const RBS_BANDBORDERS = 1024;
export const RBS_FIXEDORDER = 2048;
export const RBS_REGISTERDROP = 4096;
export const RBS_AUTOSIZE = 8192;
export const RBS_VERTICALGRIPPER = 16384;
export const RBS_DBLCLKTOGGLE = 32768;
export const RBBS_BREAK = 1;
export const RBBS_FIXEDSIZE = 2;
export const RBBS_CHILDEDGE = 4;
export const RBBS_HIDDEN = 8;
export const RBBS_NOVERT = 16;
export const RBBS_FIXEDBMP = 32;
export const RBBS_VARIABLEHEIGHT = 64;
export const RBBS_GRIPPERALWAYS = 128;
export const RBBS_NOGRIPPER = 256;
export const RBBS_USECHEVRON = 512;
export const RBBS_HIDETITLE = 1024;
export const RBBS_TOPALIGN = 2048;
export const RBBIM_STYLE = 1;
export const RBBIM_COLORS = 2;
export const RBBIM_TEXT = 4;
export const RBBIM_IMAGE = 8;
export const RBBIM_CHILD = 16;
export const RBBIM_CHILDSIZE = 32;
export const RBBIM_SIZE = 64;
export const RBBIM_BACKGROUND = 128;
export const RBBIM_ID = 256;
export const RBBIM_IDEALSIZE = 512;
export const RBBIM_LPARAM = 1024;
export const RBBIM_HEADERSIZE = 2048;
export const RBBIM_CHEVRONLOCATION = 4096;
export const RBBIM_CHEVRONSTATE = 8192;
export const RB_INSERTBANDA = 1025;
export const RB_DELETEBAND = 1026;
export const RB_GETBARINFO = 1027;
export const RB_SETBARINFO = 1028;
export const RB_SETBANDINFOA = 1030;
export const RB_SETPARENT = 1031;
export const RB_HITTEST = 1032;
export const RB_GETRECT = 1033;
export const RB_INSERTBANDW = 1034;
export const RB_SETBANDINFOW = 1035;
export const RB_GETBANDCOUNT = 1036;
export const RB_GETROWCOUNT = 1037;
export const RB_GETROWHEIGHT = 1038;
export const RB_IDTOINDEX = 1040;
export const RB_GETTOOLTIPS = 1041;
export const RB_SETTOOLTIPS = 1042;
export const RB_SETBKCOLOR = 1043;
export const RB_GETBKCOLOR = 1044;
export const RB_SETTEXTCOLOR = 1045;
export const RB_GETTEXTCOLOR = 1046;
export const RBSTR_CHANGERECT = 1;
export const RB_SIZETORECT = 1047;
export const RB_SETCOLORSCHEME = 8194;
export const RB_GETCOLORSCHEME = 8195;
export const RB_INSERTBAND = 1034;
export const RB_SETBANDINFO = 1035;
export const RB_BEGINDRAG = 1048;
export const RB_ENDDRAG = 1049;
export const RB_DRAGMOVE = 1050;
export const RB_GETBARHEIGHT = 1051;
export const RB_GETBANDINFOW = 1052;
export const RB_GETBANDINFOA = 1053;
export const RB_GETBANDINFO = 1052;
export const RB_MINIMIZEBAND = 1054;
export const RB_MAXIMIZEBAND = 1055;
export const RB_GETDROPTARGET = 8196;
export const RB_GETBANDBORDERS = 1058;
export const RB_SHOWBAND = 1059;
export const RB_SETPALETTE = 1061;
export const RB_GETPALETTE = 1062;
export const RB_MOVEBAND = 1063;
export const RB_SETUNICODEFORMAT = 8197;
export const RB_GETUNICODEFORMAT = 8198;
export const RB_GETBANDMARGINS = 1064;
export const RB_SETWINDOWTHEME = 8203;
export const RB_SETEXTENDEDSTYLE = 1065;
export const RB_GETEXTENDEDSTYLE = 1066;
export const RB_PUSHCHEVRON = 1067;
export const RB_SETBANDWIDTH = 1068;
export const RBAB_AUTOSIZE = 1;
export const RBAB_ADDBAND = 2;
export const RBHT_NOWHERE = 1;
export const RBHT_CAPTION = 2;
export const RBHT_CLIENT = 3;
export const RBHT_GRABBER = 4;
export const RBHT_CHEVRON = 8;
export const RBHT_SPLITTER = 16;
export const TOOLTIPS_CLASSW = `tooltips_class32`;
export const TOOLTIPS_CLASSA = `tooltips_class32`;
export const TOOLTIPS_CLASS = `tooltips_class32`;
export const TTS_ALWAYSTIP = 1;
export const TTS_NOPREFIX = 2;
export const TTS_NOANIMATE = 16;
export const TTS_NOFADE = 32;
export const TTS_BALLOON = 64;
export const TTS_CLOSE = 128;
export const TTS_USEVISUALSTYLE = 256;
export const TTDT_AUTOMATIC = 0;
export const TTDT_RESHOW = 1;
export const TTDT_AUTOPOP = 2;
export const TTDT_INITIAL = 3;
export const TTM_ACTIVATE = 1025;
export const TTM_SETDELAYTIME = 1027;
export const TTM_ADDTOOLA = 1028;
export const TTM_ADDTOOLW = 1074;
export const TTM_DELTOOLA = 1029;
export const TTM_DELTOOLW = 1075;
export const TTM_NEWTOOLRECTA = 1030;
export const TTM_NEWTOOLRECTW = 1076;
export const TTM_RELAYEVENT = 1031;
export const TTM_GETTOOLINFOA = 1032;
export const TTM_GETTOOLINFOW = 1077;
export const TTM_SETTOOLINFOA = 1033;
export const TTM_SETTOOLINFOW = 1078;
export const TTM_HITTESTA = 1034;
export const TTM_HITTESTW = 1079;
export const TTM_GETTEXTA = 1035;
export const TTM_GETTEXTW = 1080;
export const TTM_UPDATETIPTEXTA = 1036;
export const TTM_UPDATETIPTEXTW = 1081;
export const TTM_GETTOOLCOUNT = 1037;
export const TTM_ENUMTOOLSA = 1038;
export const TTM_ENUMTOOLSW = 1082;
export const TTM_GETCURRENTTOOLA = 1039;
export const TTM_GETCURRENTTOOLW = 1083;
export const TTM_WINDOWFROMPOINT = 1040;
export const TTM_TRACKACTIVATE = 1041;
export const TTM_TRACKPOSITION = 1042;
export const TTM_SETTIPBKCOLOR = 1043;
export const TTM_SETTIPTEXTCOLOR = 1044;
export const TTM_GETDELAYTIME = 1045;
export const TTM_GETTIPBKCOLOR = 1046;
export const TTM_GETTIPTEXTCOLOR = 1047;
export const TTM_SETMAXTIPWIDTH = 1048;
export const TTM_GETMAXTIPWIDTH = 1049;
export const TTM_SETMARGIN = 1050;
export const TTM_GETMARGIN = 1051;
export const TTM_POP = 1052;
export const TTM_UPDATE = 1053;
export const TTM_GETBUBBLESIZE = 1054;
export const TTM_ADJUSTRECT = 1055;
export const TTM_SETTITLEA = 1056;
export const TTM_SETTITLEW = 1057;
export const TTM_POPUP = 1058;
export const TTM_GETTITLE = 1059;
export const TTM_ADDTOOL = 1074;
export const TTM_DELTOOL = 1075;
export const TTM_NEWTOOLRECT = 1076;
export const TTM_GETTOOLINFO = 1077;
export const TTM_SETTOOLINFO = 1078;
export const TTM_HITTEST = 1079;
export const TTM_GETTEXT = 1080;
export const TTM_UPDATETIPTEXT = 1081;
export const TTM_ENUMTOOLS = 1082;
export const TTM_GETCURRENTTOOL = 1083;
export const TTM_SETTITLE = 1057;
export const TTM_SETWINDOWTHEME = 8203;
export const SBARS_SIZEGRIP = 256;
export const SBARS_TOOLTIPS = 2048;
export const SBT_TOOLTIPS = 2048;
export const STATUSCLASSNAMEW = `msctls_statusbar32`;
export const STATUSCLASSNAMEA = `msctls_statusbar32`;
export const STATUSCLASSNAME = `msctls_statusbar32`;
export const SB_SETTEXTA = 1025;
export const SB_SETTEXTW = 1035;
export const SB_GETTEXTA = 1026;
export const SB_GETTEXTW = 1037;
export const SB_GETTEXTLENGTHA = 1027;
export const SB_GETTEXTLENGTHW = 1036;
export const SB_GETTEXT = 1037;
export const SB_SETTEXT = 1035;
export const SB_GETTEXTLENGTH = 1036;
export const SB_SETPARTS = 1028;
export const SB_GETPARTS = 1030;
export const SB_GETBORDERS = 1031;
export const SB_SETMINHEIGHT = 1032;
export const SB_SIMPLE = 1033;
export const SB_GETRECT = 1034;
export const SB_ISSIMPLE = 1038;
export const SB_SETICON = 1039;
export const SB_SETTIPTEXTA = 1040;
export const SB_SETTIPTEXTW = 1041;
export const SB_GETTIPTEXTA = 1042;
export const SB_GETTIPTEXTW = 1043;
export const SB_GETICON = 1044;
export const SB_SETUNICODEFORMAT = 8197;
export const SB_GETUNICODEFORMAT = 8198;
export const SBT_OWNERDRAW = 4096;
export const SBT_NOBORDERS = 256;
export const SBT_POPOUT = 512;
export const SBT_RTLREADING = 1024;
export const SBT_NOTABPARSING = 2048;
export const SB_SETBKCOLOR = 8193;
export const SB_SIMPLEID = 255;
export const TRACKBAR_CLASSA = `msctls_trackbar32`;
export const TRACKBAR_CLASSW = `msctls_trackbar32`;
export const TRACKBAR_CLASS = `msctls_trackbar32`;
export const TBS_AUTOTICKS = 1;
export const TBS_VERT = 2;
export const TBS_HORZ = 0;
export const TBS_TOP = 4;
export const TBS_BOTTOM = 0;
export const TBS_LEFT = 4;
export const TBS_RIGHT = 0;
export const TBS_BOTH = 8;
export const TBS_NOTICKS = 16;
export const TBS_ENABLESELRANGE = 32;
export const TBS_FIXEDLENGTH = 64;
export const TBS_NOTHUMB = 128;
export const TBS_TOOLTIPS = 256;
export const TBS_REVERSED = 512;
export const TBS_DOWNISLEFT = 1024;
export const TBS_NOTIFYBEFOREMOVE = 2048;
export const TBS_TRANSPARENTBKGND = 4096;
export const TBM_GETRANGEMIN = 1025;
export const TBM_GETRANGEMAX = 1026;
export const TBM_GETTIC = 1027;
export const TBM_SETTIC = 1028;
export const TBM_SETPOS = 1029;
export const TBM_SETRANGE = 1030;
export const TBM_SETRANGEMIN = 1031;
export const TBM_SETRANGEMAX = 1032;
export const TBM_CLEARTICS = 1033;
export const TBM_SETSEL = 1034;
export const TBM_SETSELSTART = 1035;
export const TBM_SETSELEND = 1036;
export const TBM_GETPTICS = 1038;
export const TBM_GETTICPOS = 1039;
export const TBM_GETNUMTICS = 1040;
export const TBM_GETSELSTART = 1041;
export const TBM_GETSELEND = 1042;
export const TBM_CLEARSEL = 1043;
export const TBM_SETTICFREQ = 1044;
export const TBM_SETPAGESIZE = 1045;
export const TBM_GETPAGESIZE = 1046;
export const TBM_SETLINESIZE = 1047;
export const TBM_GETLINESIZE = 1048;
export const TBM_GETTHUMBRECT = 1049;
export const TBM_GETCHANNELRECT = 1050;
export const TBM_SETTHUMBLENGTH = 1051;
export const TBM_GETTHUMBLENGTH = 1052;
export const TBM_SETTOOLTIPS = 1053;
export const TBM_GETTOOLTIPS = 1054;
export const TBM_SETTIPSIDE = 1055;
export const TBTS_TOP = 0;
export const TBTS_LEFT = 1;
export const TBTS_BOTTOM = 2;
export const TBTS_RIGHT = 3;
export const TBM_SETBUDDY = 1056;
export const TBM_GETBUDDY = 1057;
export const TBM_SETPOSNOTIFY = 1058;
export const TBM_SETUNICODEFORMAT = 8197;
export const TBM_GETUNICODEFORMAT = 8198;
export const TB_LINEUP = 0;
export const TB_LINEDOWN = 1;
export const TB_PAGEUP = 2;
export const TB_PAGEDOWN = 3;
export const TB_THUMBPOSITION = 4;
export const TB_THUMBTRACK = 5;
export const TB_TOP = 6;
export const TB_BOTTOM = 7;
export const TB_ENDTRACK = 8;
export const TBCD_TICS = 1;
export const TBCD_THUMB = 2;
export const TBCD_CHANNEL = 3;
export const DL_CURSORSET = 0;
export const DL_STOPCURSOR = 1;
export const DL_COPYCURSOR = 2;
export const DL_MOVECURSOR = 3;
export const DRAGLISTMSGSTRING = `commctrl_DragListMsg`;
export const UPDOWN_CLASSA = `msctls_updown32`;
export const UPDOWN_CLASSW = `msctls_updown32`;
export const UPDOWN_CLASS = `msctls_updown32`;
export const UD_MAXVAL = 32767;
export const UDS_WRAP = 1;
export const UDS_SETBUDDYINT = 2;
export const UDS_ALIGNRIGHT = 4;
export const UDS_ALIGNLEFT = 8;
export const UDS_AUTOBUDDY = 16;
export const UDS_ARROWKEYS = 32;
export const UDS_HORZ = 64;
export const UDS_NOTHOUSANDS = 128;
export const UDS_HOTTRACK = 256;
export const UDM_SETRANGE = 1125;
export const UDM_GETRANGE = 1126;
export const UDM_SETPOS = 1127;
export const UDM_GETPOS = 1128;
export const UDM_SETBUDDY = 1129;
export const UDM_GETBUDDY = 1130;
export const UDM_SETACCEL = 1131;
export const UDM_GETACCEL = 1132;
export const UDM_SETBASE = 1133;
export const UDM_GETBASE = 1134;
export const UDM_SETRANGE32 = 1135;
export const UDM_GETRANGE32 = 1136;
export const UDM_SETUNICODEFORMAT = 8197;
export const UDM_GETUNICODEFORMAT = 8198;
export const UDM_SETPOS32 = 1137;
export const UDM_GETPOS32 = 1138;
export const PROGRESS_CLASSA = `msctls_progress32`;
export const PROGRESS_CLASSW = `msctls_progress32`;
export const PROGRESS_CLASS = `msctls_progress32`;
export const PBS_SMOOTH = 1;
export const PBS_VERTICAL = 4;
export const PBM_SETRANGE = 1025;
export const PBM_SETPOS = 1026;
export const PBM_DELTAPOS = 1027;
export const PBM_SETSTEP = 1028;
export const PBM_STEPIT = 1029;
export const PBM_SETRANGE32 = 1030;
export const PBM_GETRANGE = 1031;
export const PBM_GETPOS = 1032;
export const PBM_SETBARCOLOR = 1033;
export const PBM_SETBKCOLOR = 8193;
export const PBS_MARQUEE = 8;
export const PBM_SETMARQUEE = 1034;
export const PBS_SMOOTHREVERSE = 16;
export const PBM_GETSTEP = 1037;
export const PBM_GETBKCOLOR = 1038;
export const PBM_GETBARCOLOR = 1039;
export const PBM_SETSTATE = 1040;
export const PBM_GETSTATE = 1041;
export const PBST_NORMAL = 1;
export const PBST_ERROR = 2;
export const PBST_PAUSED = 3;
export const HOTKEYF_SHIFT = 1;
export const HOTKEYF_CONTROL = 2;
export const HOTKEYF_ALT = 4;
export const HOTKEYF_EXT = 128;
export const HKCOMB_NONE = 1;
export const HKCOMB_S = 2;
export const HKCOMB_C = 4;
export const HKCOMB_A = 8;
export const HKCOMB_SC = 16;
export const HKCOMB_SA = 32;
export const HKCOMB_CA = 64;
export const HKCOMB_SCA = 128;
export const HKM_SETHOTKEY = 1025;
export const HKM_GETHOTKEY = 1026;
export const HKM_SETRULES = 1027;
export const HOTKEY_CLASSA = `msctls_hotkey32`;
export const HOTKEY_CLASSW = `msctls_hotkey32`;
export const HOTKEY_CLASS = `msctls_hotkey32`;
export const CCS_TOP = 1;
export const CCS_NOMOVEY = 2;
export const CCS_BOTTOM = 3;
export const CCS_NORESIZE = 4;
export const CCS_NOPARENTALIGN = 8;
export const CCS_ADJUSTABLE = 32;
export const CCS_NODIVIDER = 64;
export const CCS_VERT = 128;
export const INVALID_LINK_INDEX = `-1`;
export const MAX_LINKID_TEXT = 48;
export const WC_LINK = `SysLink`;
export const LWS_TRANSPARENT = 1;
export const LWS_IGNORERETURN = 2;
export const LWS_NOPREFIX = 4;
export const LWS_USEVISUALSTYLE = 8;
export const LWS_USECUSTOMTEXT = 16;
export const LWS_RIGHT = 32;
export const LM_HITTEST = 1792;
export const LM_GETIDEALHEIGHT = 1793;
export const LM_SETITEM = 1794;
export const LM_GETITEM = 1795;
export const LM_GETIDEALSIZE = 1793;
export const WC_LISTVIEWA = `SysListView32`;
export const WC_LISTVIEWW = `SysListView32`;
export const WC_LISTVIEW = `SysListView32`;
export const LVS_ICON = 0;
export const LVS_REPORT = 1;
export const LVS_SMALLICON = 2;
export const LVS_LIST = 3;
export const LVS_TYPEMASK = 3;
export const LVS_SINGLESEL = 4;
export const LVS_SHOWSELALWAYS = 8;
export const LVS_SORTASCENDING = 16;
export const LVS_SORTDESCENDING = 32;
export const LVS_SHAREIMAGELISTS = 64;
export const LVS_NOLABELWRAP = 128;
export const LVS_AUTOARRANGE = 256;
export const LVS_EDITLABELS = 512;
export const LVS_OWNERDATA = 4096;
export const LVS_NOSCROLL = 8192;
export const LVS_TYPESTYLEMASK = 64512;
export const LVS_ALIGNTOP = 0;
export const LVS_ALIGNLEFT = 2048;
export const LVS_ALIGNMASK = 3072;
export const LVS_OWNERDRAWFIXED = 1024;
export const LVS_NOCOLUMNHEADER = 16384;
export const LVS_NOSORTHEADER = 32768;
export const LVM_SETUNICODEFORMAT = 8197;
export const LVM_GETUNICODEFORMAT = 8198;
export const LVM_GETBKCOLOR = 4096;
export const LVM_SETBKCOLOR = 4097;
export const LVM_GETIMAGELIST = 4098;
export const LVSIL_NORMAL = 0;
export const LVSIL_SMALL = 1;
export const LVSIL_STATE = 2;
export const LVSIL_GROUPHEADER = 3;
export const LVM_SETIMAGELIST = 4099;
export const LVM_GETITEMCOUNT = 4100;
export const I_INDENTCALLBACK = `-1`;
export const I_IMAGECALLBACK = `-1`;
export const I_IMAGENONE = `-2`;
export const LVM_GETITEMA = 4101;
export const LVM_GETITEMW = 4171;
export const LVM_GETITEM = 4171;
export const LVM_SETITEMA = 4102;
export const LVM_SETITEMW = 4172;
export const LVM_SETITEM = 4172;
export const LVM_INSERTITEMA = 4103;
export const LVM_INSERTITEMW = 4173;
export const LVM_INSERTITEM = 4173;
export const LVM_DELETEITEM = 4104;
export const LVM_DELETEALLITEMS = 4105;
export const LVM_GETCALLBACKMASK = 4106;
export const LVM_SETCALLBACKMASK = 4107;
export const LVNI_ALL = 0;
export const LVNI_FOCUSED = 1;
export const LVNI_SELECTED = 2;
export const LVNI_CUT = 4;
export const LVNI_DROPHILITED = 8;
export const LVNI_VISIBLEORDER = 16;
export const LVNI_PREVIOUS = 32;
export const LVNI_VISIBLEONLY = 64;
export const LVNI_SAMEGROUPONLY = 128;
export const LVNI_ABOVE = 256;
export const LVNI_BELOW = 512;
export const LVNI_TOLEFT = 1024;
export const LVNI_TORIGHT = 2048;
export const LVM_GETNEXTITEM = 4108;
export const LVM_FINDITEMA = 4109;
export const LVM_FINDITEMW = 4179;
export const LVM_FINDITEM = 4179;
export const LVIR_BOUNDS = 0;
export const LVIR_ICON = 1;
export const LVIR_LABEL = 2;
export const LVIR_SELECTBOUNDS = 3;
export const LVM_GETITEMRECT = 4110;
export const LVM_SETITEMPOSITION = 4111;
export const LVM_GETITEMPOSITION = 4112;
export const LVM_GETSTRINGWIDTHA = 4113;
export const LVM_GETSTRINGWIDTHW = 4183;
export const LVM_GETSTRINGWIDTH = 4183;
export const LVM_HITTEST = 4114;
export const LVM_ENSUREVISIBLE = 4115;
export const LVM_SCROLL = 4116;
export const LVM_REDRAWITEMS = 4117;
export const LVA_DEFAULT = 0;
export const LVA_ALIGNLEFT = 1;
export const LVA_ALIGNTOP = 2;
export const LVA_SNAPTOGRID = 5;
export const LVM_ARRANGE = 4118;
export const LVM_EDITLABELA = 4119;
export const LVM_EDITLABELW = 4214;
export const LVM_EDITLABEL = 4214;
export const LVM_GETEDITCONTROL = 4120;
export const LVM_GETCOLUMNA = 4121;
export const LVM_GETCOLUMNW = 4191;
export const LVM_GETCOLUMN = 4191;
export const LVM_SETCOLUMNA = 4122;
export const LVM_SETCOLUMNW = 4192;
export const LVM_SETCOLUMN = 4192;
export const LVM_INSERTCOLUMNA = 4123;
export const LVM_INSERTCOLUMNW = 4193;
export const LVM_INSERTCOLUMN = 4193;
export const LVM_DELETECOLUMN = 4124;
export const LVM_GETCOLUMNWIDTH = 4125;
export const LVSCW_AUTOSIZE = `-1`;
export const LVSCW_AUTOSIZE_USEHEADER = `-2`;
export const LVM_SETCOLUMNWIDTH = 4126;
export const LVM_GETHEADER = 4127;
export const LVM_CREATEDRAGIMAGE = 4129;
export const LVM_GETVIEWRECT = 4130;
export const LVM_GETTEXTCOLOR = 4131;
export const LVM_SETTEXTCOLOR = 4132;
export const LVM_GETTEXTBKCOLOR = 4133;
export const LVM_SETTEXTBKCOLOR = 4134;
export const LVM_GETTOPINDEX = 4135;
export const LVM_GETCOUNTPERPAGE = 4136;
export const LVM_GETORIGIN = 4137;
export const LVM_UPDATE = 4138;
export const LVM_SETITEMSTATE = 4139;
export const LVM_GETITEMSTATE = 4140;
export const LVM_GETITEMTEXTA = 4141;
export const LVM_GETITEMTEXTW = 4211;
export const LVM_GETITEMTEXT = 4211;
export const LVM_SETITEMTEXTA = 4142;
export const LVM_SETITEMTEXTW = 4212;
export const LVM_SETITEMTEXT = 4212;
export const LVSICF_NOINVALIDATEALL = 1;
export const LVSICF_NOSCROLL = 2;
export const LVM_SETITEMCOUNT = 4143;
export const LVM_SORTITEMS = 4144;
export const LVM_SETITEMPOSITION32 = 4145;
export const LVM_GETSELECTEDCOUNT = 4146;
export const LVM_GETITEMSPACING = 4147;
export const LVM_GETISEARCHSTRINGA = 4148;
export const LVM_GETISEARCHSTRINGW = 4213;
export const LVM_GETISEARCHSTRING = 4213;
export const LVM_SETICONSPACING = 4149;
export const LVM_SETEXTENDEDLISTVIEWSTYLE = 4150;
export const LVM_GETEXTENDEDLISTVIEWSTYLE = 4151;
export const LVS_EX_GRIDLINES = 1;
export const LVS_EX_SUBITEMIMAGES = 2;
export const LVS_EX_CHECKBOXES = 4;
export const LVS_EX_TRACKSELECT = 8;
export const LVS_EX_HEADERDRAGDROP = 16;
export const LVS_EX_FULLROWSELECT = 32;
export const LVS_EX_ONECLICKACTIVATE = 64;
export const LVS_EX_TWOCLICKACTIVATE = 128;
export const LVS_EX_FLATSB = 256;
export const LVS_EX_REGIONAL = 512;
export const LVS_EX_INFOTIP = 1024;
export const LVS_EX_UNDERLINEHOT = 2048;
export const LVS_EX_UNDERLINECOLD = 4096;
export const LVS_EX_MULTIWORKAREAS = 8192;
export const LVS_EX_LABELTIP = 16384;
export const LVS_EX_BORDERSELECT = 32768;
export const LVS_EX_DOUBLEBUFFER = 65536;
export const LVS_EX_HIDELABELS = 131072;
export const LVS_EX_SINGLEROW = 262144;
export const LVS_EX_SNAPTOGRID = 524288;
export const LVS_EX_SIMPLESELECT = 1048576;
export const LVS_EX_JUSTIFYCOLUMNS = 2097152;
export const LVS_EX_TRANSPARENTBKGND = 4194304;
export const LVS_EX_TRANSPARENTSHADOWTEXT = 8388608;
export const LVS_EX_AUTOAUTOARRANGE = 16777216;
export const LVS_EX_HEADERINALLVIEWS = 33554432;
export const LVS_EX_AUTOCHECKSELECT = 134217728;
export const LVS_EX_AUTOSIZECOLUMNS = 268435456;
export const LVS_EX_COLUMNSNAPPOINTS = 1073741824;
export const LVS_EX_COLUMNOVERFLOW = 2147483648;
export const LVM_GETSUBITEMRECT = 4152;
export const LVM_SUBITEMHITTEST = 4153;
export const LVM_SETCOLUMNORDERARRAY = 4154;
export const LVM_GETCOLUMNORDERARRAY = 4155;
export const LVM_SETHOTITEM = 4156;
export const LVM_GETHOTITEM = 4157;
export const LVM_SETHOTCURSOR = 4158;
export const LVM_GETHOTCURSOR = 4159;
export const LVM_APPROXIMATEVIEWRECT = 4160;
export const LV_MAX_WORKAREAS = 16;
export const LVM_SETWORKAREAS = 4161;
export const LVM_GETWORKAREAS = 4166;
export const LVM_GETNUMBEROFWORKAREAS = 4169;
export const LVM_GETSELECTIONMARK = 4162;
export const LVM_SETSELECTIONMARK = 4163;
export const LVM_SETHOVERTIME = 4167;
export const LVM_GETHOVERTIME = 4168;
export const LVM_SETTOOLTIPS = 4170;
export const LVM_GETTOOLTIPS = 4174;
export const LVM_SORTITEMSEX = 4177;
export const LVM_SETBKIMAGEA = 4164;
export const LVM_SETBKIMAGEW = 4234;
export const LVM_GETBKIMAGEA = 4165;
export const LVM_GETBKIMAGEW = 4235;
export const LVM_SETSELECTEDCOLUMN = 4236;
export const LV_VIEW_ICON = 0;
export const LV_VIEW_DETAILS = 1;
export const LV_VIEW_SMALLICON = 2;
export const LV_VIEW_LIST = 3;
export const LV_VIEW_TILE = 4;
export const LV_VIEW_MAX = 4;
export const LVM_SETVIEW = 4238;
export const LVM_GETVIEW = 4239;
export const LVGF_ALIGN = 8;
export const LVGF_GROUPID = 16;
export const LVGF_SUBTITLE = 256;
export const LVGF_TASK = 512;
export const LVGF_DESCRIPTIONTOP = 1024;
export const LVGF_DESCRIPTIONBOTTOM = 2048;
export const LVGF_TITLEIMAGE = 4096;
export const LVGF_EXTENDEDIMAGE = 8192;
export const LVGF_ITEMS = 16384;
export const LVGF_SUBSET = 32768;
export const LVGF_SUBSETITEMS = 65536;
export const LVM_INSERTGROUP = 4241;
export const LVM_SETGROUPINFO = 4243;
export const LVM_GETGROUPINFO = 4245;
export const LVM_REMOVEGROUP = 4246;
export const LVM_MOVEGROUP = 4247;
export const LVM_GETGROUPCOUNT = 4248;
export const LVM_GETGROUPINFOBYINDEX = 4249;
export const LVM_MOVEITEMTOGROUP = 4250;
export const LVGGR_GROUP = 0;
export const LVGGR_HEADER = 1;
export const LVGGR_LABEL = 2;
export const LVGGR_SUBSETLINK = 3;
export const LVM_GETGROUPRECT = 4194;
export const LVGMF_NONE = 0;
export const LVGMF_BORDERSIZE = 1;
export const LVGMF_BORDERCOLOR = 2;
export const LVGMF_TEXTCOLOR = 4;
export const LVM_SETGROUPMETRICS = 4251;
export const LVM_GETGROUPMETRICS = 4252;
export const LVM_ENABLEGROUPVIEW = 4253;
export const LVM_SORTGROUPS = 4254;
export const LVM_INSERTGROUPSORTED = 4255;
export const LVM_REMOVEALLGROUPS = 4256;
export const LVM_HASGROUP = 4257;
export const LVM_GETGROUPSTATE = 4188;
export const LVM_GETFOCUSEDGROUP = 4189;
export const LVTVIF_EXTENDED = 4;
export const LVM_SETTILEVIEWINFO = 4258;
export const LVM_GETTILEVIEWINFO = 4259;
export const LVM_SETTILEINFO = 4260;
export const LVM_GETTILEINFO = 4261;
export const LVM_SETINSERTMARK = 4262;
export const LVM_GETINSERTMARK = 4263;
export const LVM_INSERTMARKHITTEST = 4264;
export const LVM_GETINSERTMARKRECT = 4265;
export const LVM_SETINSERTMARKCOLOR = 4266;
export const LVM_GETINSERTMARKCOLOR = 4267;
export const LVM_SETINFOTIP = 4269;
export const LVM_GETSELECTEDCOLUMN = 4270;
export const LVM_ISGROUPVIEWENABLED = 4271;
export const LVM_GETOUTLINECOLOR = 4272;
export const LVM_SETOUTLINECOLOR = 4273;
export const LVM_CANCELEDITLABEL = 4275;
export const LVM_MAPINDEXTOID = 4276;
export const LVM_MAPIDTOINDEX = 4277;
export const LVM_ISITEMVISIBLE = 4278;
export const LVM_GETEMPTYTEXT = 4300;
export const LVM_GETFOOTERRECT = 4301;
export const LVFF_ITEMCOUNT = 1;
export const LVM_GETFOOTERINFO = 4302;
export const LVM_GETFOOTERITEMRECT = 4303;
export const LVFIS_FOCUSED = 1;
export const LVM_GETFOOTERITEM = 4304;
export const LVM_GETITEMINDEXRECT = 4305;
export const LVM_SETITEMINDEXSTATE = 4306;
export const LVM_GETNEXTITEMINDEX = 4307;
export const LVM_SETBKIMAGE = 4234;
export const LVM_GETBKIMAGE = 4235;
export const LVKF_ALT = 1;
export const LVKF_CONTROL = 2;
export const LVKF_SHIFT = 4;
export const LVCDRF_NOSELECT = 65536;
export const LVCDRF_NOGROUPFRAME = 131072;
export const LVNSCH_DEFAULT = `-1`;
export const LVNSCH_ERROR = `-2`;
export const LVNSCH_IGNORE = `-3`;
export const WC_TREEVIEWA = `SysTreeView32`;
export const WC_TREEVIEWW = `SysTreeView32`;
export const WC_TREEVIEW = `SysTreeView32`;
export const TVS_HASBUTTONS = 1;
export const TVS_HASLINES = 2;
export const TVS_LINESATROOT = 4;
export const TVS_EDITLABELS = 8;
export const TVS_DISABLEDRAGDROP = 16;
export const TVS_SHOWSELALWAYS = 32;
export const TVS_RTLREADING = 64;
export const TVS_NOTOOLTIPS = 128;
export const TVS_CHECKBOXES = 256;
export const TVS_TRACKSELECT = 512;
export const TVS_SINGLEEXPAND = 1024;
export const TVS_INFOTIP = 2048;
export const TVS_FULLROWSELECT = 4096;
export const TVS_NOSCROLL = 8192;
export const TVS_NONEVENHEIGHT = 16384;
export const TVS_NOHSCROLL = 32768;
export const TVS_EX_NOSINGLECOLLAPSE = 1;
export const TVS_EX_MULTISELECT = 2;
export const TVS_EX_DOUBLEBUFFER = 4;
export const TVS_EX_NOINDENTSTATE = 8;
export const TVS_EX_RICHTOOLTIP = 16;
export const TVS_EX_AUTOHSCROLL = 32;
export const TVS_EX_FADEINOUTEXPANDOS = 64;
export const TVS_EX_PARTIALCHECKBOXES = 128;
export const TVS_EX_EXCLUSIONCHECKBOXES = 256;
export const TVS_EX_DIMMEDCHECKBOXES = 512;
export const TVS_EX_DRAWIMAGEASYNC = 1024;
export const TVM_INSERTITEMA = 4352;
export const TVM_INSERTITEMW = 4402;
export const TVM_INSERTITEM = 4402;
export const TVM_DELETEITEM = 4353;
export const TVM_EXPAND = 4354;
export const TVM_GETITEMRECT = 4356;
export const TVM_GETCOUNT = 4357;
export const TVM_GETINDENT = 4358;
export const TVM_SETINDENT = 4359;
export const TVM_GETIMAGELIST = 4360;
export const TVSIL_NORMAL = 0;
export const TVSIL_STATE = 2;
export const TVM_SETIMAGELIST = 4361;
export const TVM_GETNEXTITEM = 4362;
export const TVGN_ROOT = 0;
export const TVGN_NEXT = 1;
export const TVGN_PREVIOUS = 2;
export const TVGN_PARENT = 3;
export const TVGN_CHILD = 4;
export const TVGN_FIRSTVISIBLE = 5;
export const TVGN_NEXTVISIBLE = 6;
export const TVGN_PREVIOUSVISIBLE = 7;
export const TVGN_DROPHILITE = 8;
export const TVGN_CARET = 9;
export const TVGN_LASTVISIBLE = 10;
export const TVGN_NEXTSELECTED = 11;
export const TVSI_NOSINGLEEXPAND = 32768;
export const TVM_SELECTITEM = 4363;
export const TVM_GETITEMA = 4364;
export const TVM_GETITEMW = 4414;
export const TVM_GETITEM = 4414;
export const TVM_SETITEMA = 4365;
export const TVM_SETITEMW = 4415;
export const TVM_SETITEM = 4415;
export const TVM_EDITLABELA = 4366;
export const TVM_EDITLABELW = 4417;
export const TVM_EDITLABEL = 4417;
export const TVM_GETEDITCONTROL = 4367;
export const TVM_GETVISIBLECOUNT = 4368;
export const TVM_HITTEST = 4369;
export const TVM_CREATEDRAGIMAGE = 4370;
export const TVM_SORTCHILDREN = 4371;
export const TVM_ENSUREVISIBLE = 4372;
export const TVM_SORTCHILDRENCB = 4373;
export const TVM_ENDEDITLABELNOW = 4374;
export const TVM_GETISEARCHSTRINGA = 4375;
export const TVM_GETISEARCHSTRINGW = 4416;
export const TVM_GETISEARCHSTRING = 4416;
export const TVM_SETTOOLTIPS = 4376;
export const TVM_GETTOOLTIPS = 4377;
export const TVM_SETINSERTMARK = 4378;
export const TVM_SETUNICODEFORMAT = 8197;
export const TVM_GETUNICODEFORMAT = 8198;
export const TVM_SETITEMHEIGHT = 4379;
export const TVM_GETITEMHEIGHT = 4380;
export const TVM_SETBKCOLOR = 4381;
export const TVM_SETTEXTCOLOR = 4382;
export const TVM_GETBKCOLOR = 4383;
export const TVM_GETTEXTCOLOR = 4384;
export const TVM_SETSCROLLTIME = 4385;
export const TVM_GETSCROLLTIME = 4386;
export const TVM_SETINSERTMARKCOLOR = 4389;
export const TVM_GETINSERTMARKCOLOR = 4390;
export const TVM_SETBORDER = 4387;
export const TVSBF_XBORDER = 1;
export const TVSBF_YBORDER = 2;
export const TVM_GETITEMSTATE = 4391;
export const TVM_SETLINECOLOR = 4392;
export const TVM_GETLINECOLOR = 4393;
export const TVM_MAPACCIDTOHTREEITEM = 4394;
export const TVM_MAPHTREEITEMTOACCID = 4395;
export const TVM_SETEXTENDEDSTYLE = 4396;
export const TVM_GETEXTENDEDSTYLE = 4397;
export const TVM_SETAUTOSCROLLINFO = 4411;
export const TVM_SETHOT = 4410;
export const TVM_GETSELECTEDCOUNT = 4422;
export const TVM_SHOWINFOTIP = 4423;
export const TVM_GETITEMPARTRECT = 4424;
export const TVNRET_DEFAULT = 0;
export const TVNRET_SKIPOLD = 1;
export const TVNRET_SKIPNEW = 2;
export const TVCDRF_NOIMAGES = 65536;
export const WC_COMBOBOXEXW = `ComboBoxEx32`;
export const WC_COMBOBOXEXA = `ComboBoxEx32`;
export const WC_COMBOBOXEX = `ComboBoxEx32`;
export const CBEM_INSERTITEMA = 1025;
export const CBEM_SETIMAGELIST = 1026;
export const CBEM_GETIMAGELIST = 1027;
export const CBEM_GETITEMA = 1028;
export const CBEM_SETITEMA = 1029;
export const CBEM_GETCOMBOCONTROL = 1030;
export const CBEM_GETEDITCONTROL = 1031;
export const CBEM_SETEXSTYLE = 1032;
export const CBEM_SETEXTENDEDSTYLE = 1038;
export const CBEM_GETEXSTYLE = 1033;
export const CBEM_GETEXTENDEDSTYLE = 1033;
export const CBEM_SETUNICODEFORMAT = 8197;
export const CBEM_GETUNICODEFORMAT = 8198;
export const CBEM_HASEDITCHANGED = 1034;
export const CBEM_INSERTITEMW = 1035;
export const CBEM_SETITEMW = 1036;
export const CBEM_GETITEMW = 1037;
export const CBEM_INSERTITEM = 1035;
export const CBEM_SETITEM = 1036;
export const CBEM_GETITEM = 1037;
export const CBEM_SETWINDOWTHEME = 8203;
export const CBES_EX_NOEDITIMAGE = 1;
export const CBES_EX_NOEDITIMAGEINDENT = 2;
export const CBES_EX_PATHWORDBREAKPROC = 4;
export const CBES_EX_NOSIZELIMIT = 8;
export const CBES_EX_CASESENSITIVE = 16;
export const CBES_EX_TEXTENDELLIPSIS = 32;
export const CBENF_KILLFOCUS = 1;
export const CBENF_RETURN = 2;
export const CBENF_ESCAPE = 3;
export const CBENF_DROPDOWN = 4;
export const CBEMAXSTRLEN = 260;
export const WC_TABCONTROLA = `SysTabControl32`;
export const WC_TABCONTROLW = `SysTabControl32`;
export const WC_TABCONTROL = `SysTabControl32`;
export const TCS_SCROLLOPPOSITE = 1;
export const TCS_BOTTOM = 2;
export const TCS_RIGHT = 2;
export const TCS_MULTISELECT = 4;
export const TCS_FLATBUTTONS = 8;
export const TCS_FORCEICONLEFT = 16;
export const TCS_FORCELABELLEFT = 32;
export const TCS_HOTTRACK = 64;
export const TCS_VERTICAL = 128;
export const TCS_TABS = 0;
export const TCS_BUTTONS = 256;
export const TCS_SINGLELINE = 0;
export const TCS_MULTILINE = 512;
export const TCS_RIGHTJUSTIFY = 0;
export const TCS_FIXEDWIDTH = 1024;
export const TCS_RAGGEDRIGHT = 2048;
export const TCS_FOCUSONBUTTONDOWN = 4096;
export const TCS_OWNERDRAWFIXED = 8192;
export const TCS_TOOLTIPS = 16384;
export const TCS_FOCUSNEVER = 32768;
export const TCS_EX_FLATSEPARATORS = 1;
export const TCS_EX_REGISTERDROP = 2;
export const TCM_GETIMAGELIST = 4866;
export const TCM_SETIMAGELIST = 4867;
export const TCM_GETITEMCOUNT = 4868;
export const TCM_GETITEMA = 4869;
export const TCM_GETITEMW = 4924;
export const TCM_GETITEM = 4924;
export const TCM_SETITEMA = 4870;
export const TCM_SETITEMW = 4925;
export const TCM_SETITEM = 4925;
export const TCM_INSERTITEMA = 4871;
export const TCM_INSERTITEMW = 4926;
export const TCM_INSERTITEM = 4926;
export const TCM_DELETEITEM = 4872;
export const TCM_DELETEALLITEMS = 4873;
export const TCM_GETITEMRECT = 4874;
export const TCM_GETCURSEL = 4875;
export const TCM_SETCURSEL = 4876;
export const TCM_HITTEST = 4877;
export const TCM_SETITEMEXTRA = 4878;
export const TCM_ADJUSTRECT = 4904;
export const TCM_SETITEMSIZE = 4905;
export const TCM_REMOVEIMAGE = 4906;
export const TCM_SETPADDING = 4907;
export const TCM_GETROWCOUNT = 4908;
export const TCM_GETTOOLTIPS = 4909;
export const TCM_SETTOOLTIPS = 4910;
export const TCM_GETCURFOCUS = 4911;
export const TCM_SETCURFOCUS = 4912;
export const TCM_SETMINTABWIDTH = 4913;
export const TCM_DESELECTALL = 4914;
export const TCM_HIGHLIGHTITEM = 4915;
export const TCM_SETEXTENDEDSTYLE = 4916;
export const TCM_GETEXTENDEDSTYLE = 4917;
export const TCM_SETUNICODEFORMAT = 8197;
export const TCM_GETUNICODEFORMAT = 8198;
export const ANIMATE_CLASSW = `SysAnimate32`;
export const ANIMATE_CLASSA = `SysAnimate32`;
export const ANIMATE_CLASS = `SysAnimate32`;
export const ACS_CENTER = 1;
export const ACS_TRANSPARENT = 2;
export const ACS_AUTOPLAY = 4;
export const ACS_TIMER = 8;
export const ACM_OPENA = 1124;
export const ACM_OPENW = 1127;
export const ACM_OPEN = 1127;
export const ACM_PLAY = 1125;
export const ACM_STOP = 1126;
export const ACM_ISPLAYING = 1128;
export const ACN_START = 1;
export const ACN_STOP = 2;
export const MONTHCAL_CLASSW = `SysMonthCal32`;
export const MONTHCAL_CLASSA = `SysMonthCal32`;
export const MONTHCAL_CLASS = `SysMonthCal32`;
export const MCM_FIRST = 4096;
export const MCM_GETCURSEL = 4097;
export const MCM_SETCURSEL = 4098;
export const MCM_GETMAXSELCOUNT = 4099;
export const MCM_SETMAXSELCOUNT = 4100;
export const MCM_GETSELRANGE = 4101;
export const MCM_SETSELRANGE = 4102;
export const MCM_GETMONTHRANGE = 4103;
export const MCM_SETDAYSTATE = 4104;
export const MCM_GETMINREQRECT = 4105;
export const MCM_SETCOLOR = 4106;
export const MCM_GETCOLOR = 4107;
export const MCSC_BACKGROUND = 0;
export const MCSC_TEXT = 1;
export const MCSC_TITLEBK = 2;
export const MCSC_TITLETEXT = 3;
export const MCSC_MONTHBK = 4;
export const MCSC_TRAILINGTEXT = 5;
export const MCM_SETTODAY = 4108;
export const MCM_GETTODAY = 4109;
export const MCM_HITTEST = 4110;
export const MCM_SETFIRSTDAYOFWEEK = 4111;
export const MCM_GETFIRSTDAYOFWEEK = 4112;
export const MCM_GETRANGE = 4113;
export const MCM_SETRANGE = 4114;
export const MCM_GETMONTHDELTA = 4115;
export const MCM_SETMONTHDELTA = 4116;
export const MCM_GETMAXTODAYWIDTH = 4117;
export const MCM_SETUNICODEFORMAT = 8197;
export const MCM_GETUNICODEFORMAT = 8198;
export const MCM_GETCURRENTVIEW = 4118;
export const MCM_GETCALENDARCOUNT = 4119;
export const MCM_GETCALENDARGRIDINFO = 4120;
export const MCM_GETCALID = 4123;
export const MCM_SETCALID = 4124;
export const MCM_SIZERECTTOMIN = 4125;
export const MCM_SETCALENDARBORDER = 4126;
export const MCM_GETCALENDARBORDER = 4127;
export const MCM_SETCURRENTVIEW = 4128;
export const MCS_DAYSTATE = 1;
export const MCS_MULTISELECT = 2;
export const MCS_WEEKNUMBERS = 4;
export const MCS_NOTODAYCIRCLE = 8;
export const MCS_NOTODAY = 16;
export const MCS_NOTRAILINGDATES = 64;
export const MCS_SHORTDAYSOFWEEK = 128;
export const MCS_NOSELCHANGEONNAV = 256;
export const GMR_VISIBLE = 0;
export const GMR_DAYSTATE = 1;
export const DATETIMEPICK_CLASSW = `SysDateTimePick32`;
export const DATETIMEPICK_CLASSA = `SysDateTimePick32`;
export const DATETIMEPICK_CLASS = `SysDateTimePick32`;
export const DTM_FIRST = 4096;
export const DTM_GETSYSTEMTIME = 4097;
export const DTM_SETSYSTEMTIME = 4098;
export const DTM_GETRANGE = 4099;
export const DTM_SETRANGE = 4100;
export const DTM_SETFORMATA = 4101;
export const DTM_SETFORMATW = 4146;
export const DTM_SETFORMAT = 4146;
export const DTM_SETMCCOLOR = 4102;
export const DTM_GETMCCOLOR = 4103;
export const DTM_GETMONTHCAL = 4104;
export const DTM_SETMCFONT = 4105;
export const DTM_GETMCFONT = 4106;
export const DTM_SETMCSTYLE = 4107;
export const DTM_GETMCSTYLE = 4108;
export const DTM_CLOSEMONTHCAL = 4109;
export const DTM_GETDATETIMEPICKERINFO = 4110;
export const DTM_GETIDEALSIZE = 4111;
export const DTS_UPDOWN = 1;
export const DTS_SHOWNONE = 2;
export const DTS_SHORTDATEFORMAT = 0;
export const DTS_LONGDATEFORMAT = 4;
export const DTS_SHORTDATECENTURYFORMAT = 12;
export const DTS_TIMEFORMAT = 9;
export const DTS_APPCANPARSE = 16;
export const DTS_RIGHTALIGN = 32;
export const GDTR_MIN = 1;
export const GDTR_MAX = 2;
export const GDT_ERROR = `-1`;
export const IPM_CLEARADDRESS = 1124;
export const IPM_SETADDRESS = 1125;
export const IPM_GETADDRESS = 1126;
export const IPM_SETRANGE = 1127;
export const IPM_SETFOCUS = 1128;
export const IPM_ISBLANK = 1129;
export const WC_IPADDRESSW = `SysIPAddress32`;
export const WC_IPADDRESSA = `SysIPAddress32`;
export const WC_IPADDRESS = `SysIPAddress32`;
export const WC_PAGESCROLLERW = `SysPager`;
export const WC_PAGESCROLLERA = `SysPager`;
export const WC_PAGESCROLLER = `SysPager`;
export const PGS_VERT = 0;
export const PGS_HORZ = 1;
export const PGS_AUTOSCROLL = 2;
export const PGS_DRAGNDROP = 4;
export const PGF_INVISIBLE = 0;
export const PGF_NORMAL = 1;
export const PGF_GRAYED = 2;
export const PGF_DEPRESSED = 4;
export const PGF_HOT = 8;
export const PGB_TOPORLEFT = 0;
export const PGB_BOTTOMORRIGHT = 1;
export const PGM_SETCHILD = 5121;
export const PGM_RECALCSIZE = 5122;
export const PGM_FORWARDMOUSE = 5123;
export const PGM_SETBKCOLOR = 5124;
export const PGM_GETBKCOLOR = 5125;
export const PGM_SETBORDER = 5126;
export const PGM_GETBORDER = 5127;
export const PGM_SETPOS = 5128;
export const PGM_GETPOS = 5129;
export const PGM_SETBUTTONSIZE = 5130;
export const PGM_GETBUTTONSIZE = 5131;
export const PGM_GETBUTTONSTATE = 5132;
export const PGM_GETDROPTARGET = 8196;
export const PGM_SETSCROLLINFO = 5133;
export const WC_NATIVEFONTCTLW = `NativeFontCtl`;
export const WC_NATIVEFONTCTLA = `NativeFontCtl`;
export const WC_NATIVEFONTCTL = `NativeFontCtl`;
export const NFS_EDIT = 1;
export const NFS_STATIC = 2;
export const NFS_LISTCOMBO = 4;
export const NFS_BUTTON = 8;
export const NFS_ALL = 16;
export const NFS_USEFONTASSOC = 32;
export const WC_BUTTONA = `Button`;
export const WC_BUTTONW = `Button`;
export const WC_BUTTON = `Button`;
export const BCM_GETIDEALSIZE = 5633;
export const BCM_SETIMAGELIST = 5634;
export const BCM_GETIMAGELIST = 5635;
export const BCM_SETTEXTMARGIN = 5636;
export const BCM_GETTEXTMARGIN = 5637;
export const BCN_HOTITEMCHANGE = 4294966047;
export const BST_HOT = 512;
export const BST_DROPDOWNPUSHED = 1024;
export const BS_SPLITBUTTON = 12;
export const BS_DEFSPLITBUTTON = 13;
export const BS_COMMANDLINK = 14;
export const BS_DEFCOMMANDLINK = 15;
export const BCSIF_GLYPH = 1;
export const BCSIF_IMAGE = 2;
export const BCSIF_STYLE = 4;
export const BCSIF_SIZE = 8;
export const BCSS_NOSPLIT = 1;
export const BCSS_STRETCH = 2;
export const BCSS_ALIGNLEFT = 4;
export const BCSS_IMAGE = 8;
export const BCM_SETDROPDOWNSTATE = 5638;
export const BCM_SETSPLITINFO = 5639;
export const BCM_GETSPLITINFO = 5640;
export const BCM_SETNOTE = 5641;
export const BCM_GETNOTE = 5642;
export const BCM_GETNOTELENGTH = 5643;
export const BCM_SETSHIELD = 5644;
export const BCN_DROPDOWN = 4294966048;
export const WC_STATICA = `Static`;
export const WC_STATICW = `Static`;
export const WC_STATIC = `Static`;
export const WC_EDITA = `Edit`;
export const WC_EDITW = `Edit`;
export const WC_EDIT = `Edit`;
export const ES_EX_ALLOWEOL_CR = 1;
export const ES_EX_ALLOWEOL_LF = 2;
export const ES_EX_CONVERT_EOL_ON_PASTE = 4;
export const ES_EX_ZOOMABLE = 16;
export const EM_SETCUEBANNER = 5377;
export const EM_GETCUEBANNER = 5378;
export const EM_SHOWBALLOONTIP = 5379;
export const EM_HIDEBALLOONTIP = 5380;
export const EM_SETHILITE = 5381;
export const EM_GETHILITE = 5382;
export const EM_NOSETFOCUS = 5383;
export const EM_TAKEFOCUS = 5384;
export const EM_SETEXTENDEDSTYLE = 5386;
export const EM_GETEXTENDEDSTYLE = 5387;
export const EM_SETENDOFLINE = 5388;
export const EM_GETENDOFLINE = 5389;
export const EM_ENABLESEARCHWEB = 5390;
export const EM_SEARCHWEB = 5391;
export const EM_SETCARETINDEX = 5393;
export const EM_GETCARETINDEX = 5394;
export const EM_FILELINEFROMCHAR = 5395;
export const EM_FILELINEINDEX = 5396;
export const EM_FILELINELENGTH = 5397;
export const EM_GETFILELINE = 5398;
export const EM_GETFILELINECOUNT = 5399;
export const WC_LISTBOXA = `ListBox`;
export const WC_LISTBOXW = `ListBox`;
export const WC_LISTBOX = `ListBox`;
export const WC_COMBOBOXA = `ComboBox`;
export const WC_COMBOBOXW = `ComboBox`;
export const WC_COMBOBOX = `ComboBox`;
export const CB_SETMINVISIBLE = 5889;
export const CB_GETMINVISIBLE = 5890;
export const CB_SETCUEBANNER = 5891;
export const CB_GETCUEBANNER = 5892;
export const WC_SCROLLBARA = `ScrollBar`;
export const WC_SCROLLBARW = `ScrollBar`;
export const WC_SCROLLBAR = `ScrollBar`;
export const TD_WARNING_ICON = 1120986464255;
export const TD_ERROR_ICON = 1127020893306878;
export const TD_INFORMATION_ICON = 8719060254018502653n;
export const TD_SHIELD_ICON = 739992800329724;
export const WM_MOUSEHOVER = 673;
export const WM_MOUSELEAVE = 675;
export const HOVER_DEFAULT = 4294967295;
export const WSB_PROP_MASK = 4095;
export const FSB_FLAT_MODE = 2;
export const FSB_ENCARTA_MODE = 1;
export const FSB_REGULAR_MODE = 0;
export const ILDRF_IMAGELOWQUALITY = 1;
export const ILDRF_OVERLAYLOWQUALITY = 16;
export const ILR_DEFAULT = 0;
export const ILR_HORIZONTAL_LEFT = 0;
export const ILR_HORIZONTAL_CENTER = 1;
export const ILR_HORIZONTAL_RIGHT = 2;
export const ILR_VERTICAL_TOP = 0;
export const ILR_VERTICAL_CENTER = 16;
export const ILR_VERTICAL_BOTTOM = 32;
export const ILR_SCALE_CLIP = 0;
export const ILR_SCALE_ASPECTRATIO = 256;
export const ILGOS_ALWAYS = 0;
export const ILGOS_FROMSTANDBY = 1;
export const ILFIP_ALWAYS = 0;
export const ILFIP_FROMSTANDBY = 1;
export const ILDI_PURGE = 1;
export const ILDI_STANDBY = 2;
export const ILDI_RESETACCESS = 4;
export const ILDI_QUERYACCESS = 8;
export const CCHCCCLASS = 32;
export const CCHCCDESC = 32;
export const CCHCCTEXT = 256;
export const CCF_NOTEXT = 1;
export const ctlFirst = 1024;
export const ctlLast = 1279;
export const psh1 = 1024;
export const psh2 = 1025;
export const psh3 = 1026;
export const psh4 = 1027;
export const psh5 = 1028;
export const psh6 = 1029;
export const psh7 = 1030;
export const psh8 = 1031;
export const psh9 = 1032;
export const psh10 = 1033;
export const psh11 = 1034;
export const psh12 = 1035;
export const psh13 = 1036;
export const psh14 = 1037;
export const psh15 = 1038;
export const pshHelp = 1038;
export const psh16 = 1039;
export const chx1 = 1040;
export const chx2 = 1041;
export const chx3 = 1042;
export const chx4 = 1043;
export const chx5 = 1044;
export const chx6 = 1045;
export const chx7 = 1046;
export const chx8 = 1047;
export const chx9 = 1048;
export const chx10 = 1049;
export const chx11 = 1050;
export const chx12 = 1051;
export const chx13 = 1052;
export const chx14 = 1053;
export const chx15 = 1054;
export const chx16 = 1055;
export const rad1 = 1056;
export const rad2 = 1057;
export const rad3 = 1058;
export const rad4 = 1059;
export const rad5 = 1060;
export const rad6 = 1061;
export const rad7 = 1062;
export const rad8 = 1063;
export const rad9 = 1064;
export const rad10 = 1065;
export const rad11 = 1066;
export const rad12 = 1067;
export const rad13 = 1068;
export const rad14 = 1069;
export const rad15 = 1070;
export const rad16 = 1071;
export const grp1 = 1072;
export const grp2 = 1073;
export const grp3 = 1074;
export const grp4 = 1075;
export const frm1 = 1076;
export const frm2 = 1077;
export const frm3 = 1078;
export const frm4 = 1079;
export const rct1 = 1080;
export const rct2 = 1081;
export const rct3 = 1082;
export const rct4 = 1083;
export const ico1 = 1084;
export const ico2 = 1085;
export const ico3 = 1086;
export const ico4 = 1087;
export const stc1 = 1088;
export const stc2 = 1089;
export const stc3 = 1090;
export const stc4 = 1091;
export const stc5 = 1092;
export const stc6 = 1093;
export const stc7 = 1094;
export const stc8 = 1095;
export const stc9 = 1096;
export const stc10 = 1097;
export const stc11 = 1098;
export const stc12 = 1099;
export const stc13 = 1100;
export const stc14 = 1101;
export const stc15 = 1102;
export const stc16 = 1103;
export const stc17 = 1104;
export const stc18 = 1105;
export const stc19 = 1106;
export const stc20 = 1107;
export const stc21 = 1108;
export const stc22 = 1109;
export const stc23 = 1110;
export const stc24 = 1111;
export const stc25 = 1112;
export const stc26 = 1113;
export const stc27 = 1114;
export const stc28 = 1115;
export const stc29 = 1116;
export const stc30 = 1117;
export const stc31 = 1118;
export const stc32 = 1119;
export const lst1 = 1120;
export const lst2 = 1121;
export const lst3 = 1122;
export const lst4 = 1123;
export const lst5 = 1124;
export const lst6 = 1125;
export const lst7 = 1126;
export const lst8 = 1127;
export const lst9 = 1128;
export const lst10 = 1129;
export const lst11 = 1130;
export const lst12 = 1131;
export const lst13 = 1132;
export const lst14 = 1133;
export const lst15 = 1134;
export const lst16 = 1135;
export const cmb1 = 1136;
export const cmb2 = 1137;
export const cmb3 = 1138;
export const cmb4 = 1139;
export const cmb5 = 1140;
export const cmb6 = 1141;
export const cmb7 = 1142;
export const cmb8 = 1143;
export const cmb9 = 1144;
export const cmb10 = 1145;
export const cmb11 = 1146;
export const cmb12 = 1147;
export const cmb13 = 1148;
export const cmb14 = 1149;
export const cmb15 = 1150;
export const cmb16 = 1151;
export const edt1 = 1152;
export const edt2 = 1153;
export const edt3 = 1154;
export const edt4 = 1155;
export const edt5 = 1156;
export const edt6 = 1157;
export const edt7 = 1158;
export const edt8 = 1159;
export const edt9 = 1160;
export const edt10 = 1161;
export const edt11 = 1162;
export const edt12 = 1163;
export const edt13 = 1164;
export const edt14 = 1165;
export const edt15 = 1166;
export const edt16 = 1167;
export const scr1 = 1168;
export const scr2 = 1169;
export const scr3 = 1170;
export const scr4 = 1171;
export const scr5 = 1172;
export const scr6 = 1173;
export const scr7 = 1174;
export const scr8 = 1175;
export const ctl1 = 1184;
export const FILEOPENORD = 1536;
export const MULTIFILEOPENORD = 1537;
export const PRINTDLGORD = 1538;
export const PRNSETUPDLGORD = 1539;
export const FINDDLGORD = 1540;
export const REPLACEDLGORD = 1541;
export const FONTDLGORD = 1542;
export const FORMATDLGORD31 = 1543;
export const FORMATDLGORD30 = 1544;
export const RUNDLGORD = 1545;
export const PAGESETUPDLGORD = 1546;
export const NEWFILEOPENORD = 1547;
export const PRINTDLGEXORD = 1549;
export const PAGESETUPDLGORDMOTIF = 1550;
export const COLORMGMTDLGORD = 1551;
export const NEWFILEOPENV2ORD = 1552;
export const NEWFILEOPENV3ORD = 1553;
export const NEWFORMATDLGWITHLINK = 1591;
export const IDC_MANAGE_LINK = 1592;
export const DA_LAST = 2147483647;
export const DA_ERR = `-1`;
export const DSA_APPEND = 2147483647;
export const DSA_ERR = `-1`;
export const DPAM_SORTED = 1;
export const DPAM_NORMAL = 2;
export const DPAM_UNION = 4;
export const DPAM_INTERSECT = 8;
export const DPAS_SORTED = 1;
export const DPAS_INSERTBEFORE = 2;
export const DPAS_INSERTAFTER = 4;
export const DPA_APPEND = 2147483647;
export const DPA_ERR = `-1`;
export const MAXPROPPAGES = 100;
export const PSP_DEFAULT = 0;
export const PSP_DLGINDIRECT = 1;
export const PSP_USEHICON = 2;
export const PSP_USEICONID = 4;
export const PSP_USETITLE = 8;
export const PSP_RTLREADING = 16;
export const PSP_HASHELP = 32;
export const PSP_USEREFPARENT = 64;
export const PSP_USECALLBACK = 128;
export const PSP_PREMATURE = 1024;
export const PSP_HIDEHEADER = 2048;
export const PSP_USEHEADERTITLE = 4096;
export const PSP_USEHEADERSUBTITLE = 8192;
export const PSP_USEFUSIONCONTEXT = 16384;
export const PSH_DEFAULT = 0;
export const PSH_PROPTITLE = 1;
export const PSH_USEHICON = 2;
export const PSH_USEICONID = 4;
export const PSH_PROPSHEETPAGE = 8;
export const PSH_WIZARDHASFINISH = 16;
export const PSH_WIZARD = 32;
export const PSH_USEPSTARTPAGE = 64;
export const PSH_NOAPPLYNOW = 128;
export const PSH_USECALLBACK = 256;
export const PSH_HASHELP = 512;
export const PSH_MODELESS = 1024;
export const PSH_RTLREADING = 2048;
export const PSH_WIZARDCONTEXTHELP = 4096;
export const PSH_WIZARD97 = 8192;
export const PSH_WATERMARK = 32768;
export const PSH_USEHBMWATERMARK = 65536;
export const PSH_USEHPLWATERMARK = 131072;
export const PSH_STRETCHWATERMARK = 262144;
export const PSH_HEADER = 524288;
export const PSH_USEHBMHEADER = 1048576;
export const PSH_USEPAGELANG = 2097152;
export const PSH_WIZARD_LITE = 4194304;
export const PSH_NOCONTEXTHELP = 33554432;
export const PSH_AEROWIZARD = 16384;
export const PSH_RESIZABLE = 67108864;
export const PSH_HEADERBITMAP = 134217728;
export const PSH_NOMARGIN = 268435456;
export const PSCB_INITIALIZED = 1;
export const PSCB_PRECREATE = 2;
export const PSCB_BUTTONPRESSED = 3;
export const PSNRET_NOERROR = 0;
export const PSNRET_INVALID = 1;
export const PSNRET_INVALID_NOCHANGEPAGE = 2;
export const PSNRET_MESSAGEHANDLED = 3;
export const PSM_SETCURSEL = 1125;
export const PSM_REMOVEPAGE = 1126;
export const PSM_ADDPAGE = 1127;
export const PSM_CHANGED = 1128;
export const PSM_RESTARTWINDOWS = 1129;
export const PSM_REBOOTSYSTEM = 1130;
export const PSM_CANCELTOCLOSE = 1131;
export const PSM_QUERYSIBLINGS = 1132;
export const PSM_UNCHANGED = 1133;
export const PSM_APPLY = 1134;
export const PSM_SETTITLEA = 1135;
export const PSM_SETTITLEW = 1144;
export const PSM_SETTITLE = 1144;
export const PSM_SETWIZBUTTONS = 1136;
export const PSWIZB_BACK = 1;
export const PSWIZB_NEXT = 2;
export const PSWIZB_FINISH = 4;
export const PSWIZB_DISABLEDFINISH = 8;
export const PSWIZBF_ELEVATIONREQUIRED = 1;
export const PSWIZB_CANCEL = 16;
export const PSM_PRESSBUTTON = 1137;
export const PSBTN_BACK = 0;
export const PSBTN_NEXT = 1;
export const PSBTN_FINISH = 2;
export const PSBTN_OK = 3;
export const PSBTN_APPLYNOW = 4;
export const PSBTN_CANCEL = 5;
export const PSBTN_HELP = 6;
export const PSBTN_MAX = 6;
export const PSM_SETCURSELID = 1138;
export const PSM_SETFINISHTEXTA = 1139;
export const PSM_SETFINISHTEXTW = 1145;
export const PSM_SETFINISHTEXT = 1145;
export const PSM_GETTABCONTROL = 1140;
export const PSM_ISDIALOGMESSAGE = 1141;
export const PSM_GETCURRENTPAGEHWND = 1142;
export const PSM_INSERTPAGE = 1143;
export const PSM_SETHEADERTITLEA = 1149;
export const PSM_SETHEADERTITLEW = 1150;
export const PSM_SETHEADERTITLE = 1150;
export const PSM_SETHEADERSUBTITLEA = 1151;
export const PSM_SETHEADERSUBTITLEW = 1152;
export const PSM_SETHEADERSUBTITLE = 1152;
export const PSM_HWNDTOINDEX = 1153;
export const PSM_INDEXTOHWND = 1154;
export const PSM_PAGETOINDEX = 1155;
export const PSM_INDEXTOPAGE = 1156;
export const PSM_IDTOINDEX = 1157;
export const PSM_INDEXTOID = 1158;
export const PSM_GETRESULT = 1159;
export const PSM_RECALCPAGESIZES = 1160;
export const PSM_SETNEXTTEXTW = 1161;
export const PSM_SETNEXTTEXT = 1161;
export const PSWIZB_SHOW = 0;
export const PSWIZB_RESTORE = 1;
export const PSM_SHOWWIZBUTTONS = 1162;
export const PSM_ENABLEWIZBUTTONS = 1163;
export const PSM_SETBUTTONTEXTW = 1164;
export const PSM_SETBUTTONTEXT = 1164;
export const ID_PSRESTARTWINDOWS = 2;
export const WIZ_CXDLG = 276;
export const WIZ_CYDLG = 140;
export const WIZ_CXBMP = 80;
export const WIZ_BODYX = 92;
export const WIZ_BODYCX = 184;
export const PROP_SM_CXDLG = 212;
export const PROP_SM_CYDLG = 188;
export const PROP_MED_CXDLG = 227;
export const PROP_MED_CYDLG = 215;
export const PROP_LG_CXDLG = 252;
export const PROP_LG_CYDLG = 218;
export const MAX_THEMECOLOR = 64;
export const MAX_THEMESIZE = 64;
export const DTBG_CLIPRECT = 1;
export const DTBG_DRAWSOLID = 2;
export const DTBG_OMITBORDER = 4;
export const DTBG_OMITCONTENT = 8;
export const DTBG_COMPUTINGREGION = 16;
export const DTBG_MIRRORDC = 32;
export const DTBG_NOMIRROR = 64;
export const DTT_GRAYED = 1;
export const DTT_FLAGS2VALIDBITS = 1;
export const MAX_INTLIST_COUNT = 402;
export const ETDT_DISABLE = 1;
export const ETDT_ENABLE = 2;
export const ETDT_USETABTEXTURE = 4;
export const ETDT_USEAEROWIZARDTABTEXTURE = 8;
export const SZ_THDOCPROP_DISPLAYNAME = `DisplayName`;
export const SZ_THDOCPROP_CANONICALNAME = `ThemeName`;
export const SZ_THDOCPROP_TOOLTIP = `ToolTip`;
export const SZ_THDOCPROP_AUTHOR = `author`;
export const WTNCA_NODRAWCAPTION = 1;
export const WTNCA_NODRAWICON = 2;
export const WTNCA_NOSYSMENU = 4;
export const WTNCA_NOMIRRORHELP = 8;
export const TMTVS_RESERVEDLOW = 100000;
export const TMTVS_RESERVEDHIGH = 19999;
export const VSCLASS_AEROWIZARDSTYLE = `AEROWIZARDSTYLE`;
export const VSCLASS_AEROWIZARD = `AEROWIZARD`;
export const VSCLASS_BUTTONSTYLE = `BUTTONSTYLE`;
export const VSCLASS_BUTTON = `BUTTON`;
export const VSCLASS_COMBOBOXSTYLE = `COMBOBOXSTYLE`;
export const VSCLASS_COMBOBOX = `COMBOBOX`;
export const VSCLASS_COMMUNICATIONSSTYLE = `COMMUNICATIONSSTYLE`;
export const VSCLASS_COMMUNICATIONS = `COMMUNICATIONS`;
export const VSCLASS_CONTROLPANELSTYLE = `CONTROLPANELSTYLE`;
export const VSCLASS_CONTROLPANEL = `CONTROLPANEL`;
export const VSCLASS_DATEPICKERSTYLE = `DATEPICKERSTYLE`;
export const VSCLASS_DATEPICKER = `DATEPICKER`;
export const VSCLASS_DRAGDROPSTYLE = `DRAGDROPSTYLE`;
export const VSCLASS_DRAGDROP = `DRAGDROP`;
export const VSCLASS_EDITSTYLE = `EDITSTYLE`;
export const VSCLASS_EDIT = `EDIT`;
export const VSCLASS_EXPLORERBARSTYLE = `EXPLORERBARSTYLE`;
export const VSCLASS_EXPLORERBAR = `EXPLORERBAR`;
export const VSCLASS_FLYOUTSTYLE = `FLYOUTSTYLE`;
export const VSCLASS_FLYOUT = `FLYOUT`;
export const VSCLASS_HEADERSTYLE = `HEADERSTYLE`;
export const VSCLASS_HEADER = `HEADER`;
export const VSCLASS_LISTBOXSTYLE = `LISTBOXSTYLE`;
export const VSCLASS_LISTBOX = `LISTBOX`;
export const VSCLASS_LISTVIEWSTYLE = `LISTVIEWSTYLE`;
export const VSCLASS_LISTVIEW = `LISTVIEW`;
export const VSCLASS_MENUSTYLE = `MENUSTYLE`;
export const VSCLASS_MENU = `MENU`;
export const VSCLASS_NAVIGATION = `NAVIGATION`;
export const VSCLASS_PROGRESSSTYLE = `PROGRESSSTYLE`;
export const VSCLASS_PROGRESS = `PROGRESS`;
export const VSCLASS_REBARSTYLE = `REBARSTYLE`;
export const VSCLASS_REBAR = `REBAR`;
export const VSCLASS_SCROLLBARSTYLE = `SCROLLBARSTYLE`;
export const VSCLASS_SCROLLBAR = `SCROLLBAR`;
export const VSCLASS_SPINSTYLE = `SPINSTYLE`;
export const VSCLASS_SPIN = `SPIN`;
export const VSCLASS_STATUSSTYLE = `STATUSSTYLE`;
export const VSCLASS_STATUS = `STATUS`;
export const VSCLASS_TABSTYLE = `TABSTYLE`;
export const VSCLASS_TAB = `TAB`;
export const VSCLASS_TASKDIALOGSTYLE = `TASKDIALOGSTYLE`;
export const VSCLASS_TASKDIALOG = `TASKDIALOG`;
export const VSCLASS_TEXTSTYLE = `TEXTSTYLE`;
export const VSCLASS_TOOLBARSTYLE = `TOOLBARSTYLE`;
export const VSCLASS_TOOLBAR = `TOOLBAR`;
export const VSCLASS_TOOLTIPSTYLE = `TOOLTIPSTYLE`;
export const VSCLASS_TOOLTIP = `TOOLTIP`;
export const VSCLASS_TRACKBARSTYLE = `TRACKBARSTYLE`;
export const VSCLASS_TRACKBAR = `TRACKBAR`;
export const VSCLASS_TREEVIEWSTYLE = `TREEVIEWSTYLE`;
export const VSCLASS_TREEVIEW = `TREEVIEW`;
export const VSCLASS_USERTILE = `USERTILE`;
export const VSCLASS_TEXTSELECTIONGRIPPER = `TEXTSELECTIONGRIPPER`;
export const VSCLASS_WINDOWSTYLE = `WINDOWSTYLE`;
export const VSCLASS_WINDOW = `WINDOW`;
export const VSCLASS_LINK = `LINK`;
export const VSCLASS_EMPTYMARKUP = `EMPTYMARKUP`;
export const VSCLASS_STATIC = `STATIC`;
export const VSCLASS_PAGE = `PAGE`;
export const VSCLASS_MONTHCAL = `MONTHCAL`;
export const VSCLASS_CLOCK = `CLOCK`;
export const VSCLASS_TRAYNOTIFY = `TRAYNOTIFY`;
export const VSCLASS_TASKBAR = `TASKBAR`;
export const VSCLASS_TASKBAND = `TASKBAND`;
export const VSCLASS_STARTPANEL = `STARTPANEL`;
export const VSCLASS_MENUBAND = `MENUBAND`;
export const EM_GETSEL = 176;
export const EM_SETSEL = 177;
export const EM_GETRECT = 178;
export const EM_SETRECT = 179;
export const EM_SETRECTNP = 180;
export const EM_SCROLL = 181;
export const EM_LINESCROLL = 182;
export const EM_GETMODIFY = 184;
export const EM_SETMODIFY = 185;
export const EM_GETLINECOUNT = 186;
export const EM_LINEINDEX = 187;
export const EM_SETHANDLE = 188;
export const EM_GETHANDLE = 189;
export const EM_GETTHUMB = 190;
export const EM_LINELENGTH = 193;
export const EM_REPLACESEL = 194;
export const EM_GETLINE = 196;
export const EM_LIMITTEXT = 197;
export const EM_CANUNDO = 198;
export const EM_UNDO = 199;
export const EM_FMTLINES = 200;
export const EM_LINEFROMCHAR = 201;
export const EM_SETTABSTOPS = 203;
export const EM_SETPASSWORDCHAR = 204;
export const EM_EMPTYUNDOBUFFER = 205;
export const EM_GETFIRSTVISIBLELINE = 206;
export const EM_SETREADONLY = 207;
export const EM_SETWORDBREAKPROC = 208;
export const EM_GETWORDBREAKPROC = 209;
export const EM_GETPASSWORDCHAR = 210;
export const EM_SETMARGINS = 211;
export const EM_GETMARGINS = 212;
export const EM_SETIMESTATUS = 216;
export const EM_GETIMESTATUS = 217;
export const EM_ENABLEFEATURE = 218;
export const CDERR_DIALOGFAILURE = 65535;
export const CDERR_GENERALCODES = 0;
export const CDERR_STRUCTSIZE = 1;
export const CDERR_INITIALIZATION = 2;
export const CDERR_NOTEMPLATE = 3;
export const CDERR_NOHINSTANCE = 4;
export const CDERR_LOADSTRFAILURE = 5;
export const CDERR_FINDRESFAILURE = 6;
export const CDERR_LOADRESFAILURE = 7;
export const CDERR_LOCKRESFAILURE = 8;
export const CDERR_MEMALLOCFAILURE = 9;
export const CDERR_MEMLOCKFAILURE = 10;
export const CDERR_NOHOOK = 11;
export const CDERR_REGISTERMSGFAIL = 12;
export const PDERR_PRINTERCODES = 4096;
export const PDERR_SETUPFAILURE = 4097;
export const PDERR_PARSEFAILURE = 4098;
export const PDERR_RETDEFFAILURE = 4099;
export const PDERR_LOADDRVFAILURE = 4100;
export const PDERR_GETDEVMODEFAIL = 4101;
export const PDERR_INITFAILURE = 4102;
export const PDERR_NODEVICES = 4103;
export const PDERR_NODEFAULTPRN = 4104;
export const PDERR_DNDMMISMATCH = 4105;
export const PDERR_CREATEICFAILURE = 4106;
export const PDERR_PRINTERNOTFOUND = 4107;
export const PDERR_DEFAULTDIFFERENT = 4108;
export const CFERR_CHOOSEFONTCODES = 8192;
export const CFERR_NOFONTS = 8193;
export const CFERR_MAXLESSTHANMIN = 8194;
export const FNERR_FILENAMECODES = 12288;
export const FNERR_SUBCLASSFAILURE = 12289;
export const FNERR_INVALIDFILENAME = 12290;
export const FNERR_BUFFERTOOSMALL = 12291;
export const FRERR_FINDREPLACECODES = 16384;
export const FRERR_BUFFERLENGTHZERO = 16385;
export const CCERR_CHOOSECOLORCODES = 20480;
export const CC_RGBINIT = 1;
export const CC_FULLOPEN = 2;
export const CC_PREVENTFULLOPEN = 4;
export const CC_SHOWHELP = 8;
export const CC_ENABLEHOOK = 16;
export const CC_ENABLETEMPLATE = 32;
export const CC_ENABLETEMPLATEHANDLE = 64;
export const CC_SOLIDCOLOR = 128;
export const CC_ANYCOLOR = 256;
export const OFN_READONLY = 1;
export const OFN_OVERWRITEPROMPT = 2;
export const OFN_HIDEREADONLY = 4;
export const OFN_NOCHANGEDIR = 8;
export const OFN_SHOWHELP = 16;
export const OFN_ENABLEHOOK = 32;
export const OFN_ENABLETEMPLATE = 64;
export const OFN_ENABLETEMPLATEHANDLE = 128;
export const OFN_NOVALIDATE = 256;
export const OFN_ALLOWMULTISELECT = 512;
export const OFN_EXTENSIONDIFFERENT = 1024;
export const OFN_PATHMUSTEXIST = 2048;
export const OFN_FILEMUSTEXIST = 4096;
export const OFN_CREATEPROMPT = 8192;
export const OFN_SHAREAWARE = 16384;
export const OFN_NOREADONLYRETURN = 32768;
export const OFN_NOTESTFILECREATE = 65536;
export const OFN_NONETWORKBUTTON = 131072;
export const OFN_NOLONGNAMES = 262144;
export const OFN_EXPLORER = 524288;
export const OFN_NODEREFERENCELINKS = 1048576;
export const OFN_LONGNAMES = 2097152;
export const OFN_ENABLEINCLUDENOTIFY = 4194304;
export const OFN_ENABLESIZING = 8388608;
export const OFN_DONTADDTORECENT = 33554432;
export const OFN_FORCESHOWHIDDEN = 268435456;
export const OFN_EX_NONE = 0;
export const OFN_EX_NOPLACESBAR = 1;
export const PSD_DEFAULTMINMARGINS = 0;
export const PSD_DISABLEMARGINS = 16;
export const PSD_DISABLEORIENTATION = 256;
export const PSD_DISABLEPAGEPAINTING = 524288;
export const PSD_DISABLEPAPER = 512;
export const PSD_DISABLEPRINTER = 32;
export const PSD_ENABLEPAGEPAINTHOOK = 262144;
export const PSD_ENABLEPAGESETUPHOOK = 8192;
export const PSD_ENABLEPAGESETUPTEMPLATE = 32768;
export const PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 131072;
export const PSD_INHUNDREDTHSOFMILLIMETERS = 8;
export const PSD_INTHOUSANDTHSOFINCHES = 4;
export const PSD_INWININIINTLMEASURE = 0;
export const PSD_MARGINS = 2;
export const PSD_MINMARGINS = 1;
export const PSD_NONETWORKBUTTON = 2097152;
export const PSD_NOWARNING = 128;
export const PSD_RETURNDEFAULT = 1024;
export const PSD_SHOWHELP = 2048;
export const CF_APPLY = 512;
export const CF_ANSIONLY = 1024;
export const CF_BOTH = 3;
export const CF_EFFECTS = 256;
export const CF_ENABLEHOOK = 8;
export const CF_ENABLETEMPLATE = 16;
export const CF_ENABLETEMPLATEHANDLE = 32;
export const CF_FIXEDPITCHONLY = 16384;
export const CF_FORCEFONTEXIST = 65536;
export const CF_INACTIVEFONTS = 33554432;
export const CF_INITTOLOGFONTSTRUCT = 64;
export const CF_LIMITSIZE = 8192;
export const CF_NOOEMFONTS = 2048;
export const CF_NOFACESEL = 524288;
export const CF_NOSCRIPTSEL = 8388608;
export const CF_NOSIMULATIONS = 4096;
export const CF_NOSIZESEL = 2097152;
export const CF_NOSTYLESEL = 1048576;
export const CF_NOVECTORFONTS = 2048;
export const CF_NOVERTFONTS = 16777216;
export const CF_PRINTERFONTS = 2;
export const CF_SCALABLEONLY = 131072;
export const CF_SCREENFONTS = 1;
export const CF_SCRIPTSONLY = 1024;
export const CF_SELECTSCRIPT = 4194304;
export const CF_SHOWHELP = 4;
export const CF_TTONLY = 262144;
export const CF_USESTYLE = 128;
export const CF_WYSIWYG = 32768;
export const FR_DIALOGTERM = 64;
export const FR_DOWN = 1;
export const FR_ENABLEHOOK = 256;
export const FR_ENABLETEMPLATE = 512;
export const FR_ENABLETEMPLATEHANDLE = 8192;
export const FR_FINDNEXT = 8;
export const FR_HIDEUPDOWN = 16384;
export const FR_HIDEMATCHCASE = 32768;
export const FR_HIDEWHOLEWORD = 65536;
export const FR_MATCHCASE = 4;
export const FR_NOMATCHCASE = 2048;
export const FR_NOUPDOWN = 1024;
export const FR_NOWHOLEWORD = 4096;
export const FR_REPLACE = 16;
export const FR_REPLACEALL = 32;
export const FR_SHOWHELP = 128;
export const FR_WHOLEWORD = 2;
export const PD_ALLPAGES = 0;
export const PD_COLLATE = 16;
export const PD_CURRENTPAGE = 4194304;
export const PD_DISABLEPRINTTOFILE = 524288;
export const PD_ENABLEPRINTTEMPLATE = 16384;
export const PD_ENABLEPRINTTEMPLATEHANDLE = 65536;
export const PD_EXCLUSIONFLAGS = 16777216;
export const PD_HIDEPRINTTOFILE = 1048576;
export const PD_NOCURRENTPAGE = 8388608;
export const PD_NOPAGENUMS = 8;
export const PD_NOSELECTION = 4;
export const PD_NOWARNING = 128;
export const PD_PAGENUMS = 2;
export const PD_PRINTTOFILE = 32;
export const PD_RETURNDC = 256;
export const PD_RETURNDEFAULT = 1024;
export const PD_RETURNIC = 512;
export const PD_SELECTION = 1;
export const PD_USEDEVMODECOPIES = 262144;
export const PD_USEDEVMODECOPIESANDCOLLATE = 262144;
export const PD_USELARGETEMPLATE = 268435456;
export const PD_ENABLEPRINTHOOK = 4096;
export const PD_ENABLESETUPHOOK = 8192;
export const PD_ENABLESETUPTEMPLATE = 32768;
export const PD_ENABLESETUPTEMPLATEHANDLE = 131072;
export const PD_NONETWORKBUTTON = 2097152;
export const PD_PRINTSETUP = 64;
export const PD_SHOWHELP = 2048;
export const BOLD_FONTTYPE = 256;
export const ITALIC_FONTTYPE = 512;
export const PRINTER_FONTTYPE = 16384;
export const REGULAR_FONTTYPE = 1024;
export const SCREEN_FONTTYPE = 8192;
export const SIMULATED_FONTTYPE = 32768;
export const TMT_RESERVEDLOW = 0;
export const TMT_RESERVEDHIGH = 7999;
export const TMT_DIBDATA = 2;
export const TMT_GLYPHDIBDATA = 8;
export const TMT_ENUM = 200;
export const TMT_STRING = 201;
export const TMT_INT = 202;
export const TMT_BOOL = 203;
export const TMT_COLOR = 204;
export const TMT_MARGINS = 205;
export const TMT_FILENAME = 206;
export const TMT_SIZE = 207;
export const TMT_POSITION = 208;
export const TMT_RECT = 209;
export const TMT_FONT = 210;
export const TMT_INTLIST = 211;
export const TMT_HBITMAP = 212;
export const TMT_DISKSTREAM = 213;
export const TMT_STREAM = 214;
export const TMT_BITMAPREF = 215;
export const TMT_FLOAT = 216;
export const TMT_FLOATLIST = 217;
export const TMT_COLORSCHEMES = 401;
export const TMT_SIZES = 402;
export const TMT_CHARSET = 403;
export const TMT_NAME = 600;
export const TMT_DISPLAYNAME = 601;
export const TMT_TOOLTIP = 602;
export const TMT_COMPANY = 603;
export const TMT_AUTHOR = 604;
export const TMT_COPYRIGHT = 605;
export const TMT_URL = 606;
export const TMT_VERSION = 607;
export const TMT_DESCRIPTION = 608;
export const TMT_FIRST_RCSTRING_NAME = 601;
export const TMT_LAST_RCSTRING_NAME = 608;
export const TMT_CAPTIONFONT = 801;
export const TMT_SMALLCAPTIONFONT = 802;
export const TMT_MENUFONT = 803;
export const TMT_STATUSFONT = 804;
export const TMT_MSGBOXFONT = 805;
export const TMT_ICONTITLEFONT = 806;
export const TMT_HEADING1FONT = 807;
export const TMT_HEADING2FONT = 808;
export const TMT_BODYFONT = 809;
export const TMT_FIRSTFONT = 801;
export const TMT_LASTFONT = 809;
export const TMT_FLATMENUS = 1001;
export const TMT_FIRSTBOOL = 1001;
export const TMT_LASTBOOL = 1001;
export const TMT_SIZINGBORDERWIDTH = 1201;
export const TMT_SCROLLBARWIDTH = 1202;
export const TMT_SCROLLBARHEIGHT = 1203;
export const TMT_CAPTIONBARWIDTH = 1204;
export const TMT_CAPTIONBARHEIGHT = 1205;
export const TMT_SMCAPTIONBARWIDTH = 1206;
export const TMT_SMCAPTIONBARHEIGHT = 1207;
export const TMT_MENUBARWIDTH = 1208;
export const TMT_MENUBARHEIGHT = 1209;
export const TMT_PADDEDBORDERWIDTH = 1210;
export const TMT_FIRSTSIZE = 1201;
export const TMT_LASTSIZE = 1210;
export const TMT_MINCOLORDEPTH = 1301;
export const TMT_FIRSTINT = 1301;
export const TMT_LASTINT = 1301;
export const TMT_CSSNAME = 1401;
export const TMT_XMLNAME = 1402;
export const TMT_LASTUPDATED = 1403;
export const TMT_ALIAS = 1404;
export const TMT_FIRSTSTRING = 1401;
export const TMT_LASTSTRING = 1404;
export const TMT_SCROLLBAR = 1601;
export const TMT_BACKGROUND = 1602;
export const TMT_ACTIVECAPTION = 1603;
export const TMT_INACTIVECAPTION = 1604;
export const TMT_MENU = 1605;
export const TMT_WINDOW = 1606;
export const TMT_WINDOWFRAME = 1607;
export const TMT_MENUTEXT = 1608;
export const TMT_WINDOWTEXT = 1609;
export const TMT_CAPTIONTEXT = 1610;
export const TMT_ACTIVEBORDER = 1611;
export const TMT_INACTIVEBORDER = 1612;
export const TMT_APPWORKSPACE = 1613;
export const TMT_HIGHLIGHT = 1614;
export const TMT_HIGHLIGHTTEXT = 1615;
export const TMT_BTNFACE = 1616;
export const TMT_BTNSHADOW = 1617;
export const TMT_GRAYTEXT = 1618;
export const TMT_BTNTEXT = 1619;
export const TMT_INACTIVECAPTIONTEXT = 1620;
export const TMT_BTNHIGHLIGHT = 1621;
export const TMT_DKSHADOW3D = 1622;
export const TMT_LIGHT3D = 1623;
export const TMT_INFOTEXT = 1624;
export const TMT_INFOBK = 1625;
export const TMT_BUTTONALTERNATEFACE = 1626;
export const TMT_HOTTRACKING = 1627;
export const TMT_GRADIENTACTIVECAPTION = 1628;
export const TMT_GRADIENTINACTIVECAPTION = 1629;
export const TMT_MENUHILIGHT = 1630;
export const TMT_MENUBAR = 1631;
export const TMT_FIRSTCOLOR = 1601;
export const TMT_LASTCOLOR = 1631;
export const TMT_FROMHUE1 = 1801;
export const TMT_FROMHUE2 = 1802;
export const TMT_FROMHUE3 = 1803;
export const TMT_FROMHUE4 = 1804;
export const TMT_FROMHUE5 = 1805;
export const TMT_TOHUE1 = 1806;
export const TMT_TOHUE2 = 1807;
export const TMT_TOHUE3 = 1808;
export const TMT_TOHUE4 = 1809;
export const TMT_TOHUE5 = 1810;
export const TMT_FROMCOLOR1 = 2001;
export const TMT_FROMCOLOR2 = 2002;
export const TMT_FROMCOLOR3 = 2003;
export const TMT_FROMCOLOR4 = 2004;
export const TMT_FROMCOLOR5 = 2005;
export const TMT_TOCOLOR1 = 2006;
export const TMT_TOCOLOR2 = 2007;
export const TMT_TOCOLOR3 = 2008;
export const TMT_TOCOLOR4 = 2009;
export const TMT_TOCOLOR5 = 2010;
export const TMT_TRANSPARENT = 2201;
export const TMT_AUTOSIZE = 2202;
export const TMT_BORDERONLY = 2203;
export const TMT_COMPOSITED = 2204;
export const TMT_BGFILL = 2205;
export const TMT_GLYPHTRANSPARENT = 2206;
export const TMT_GLYPHONLY = 2207;
export const TMT_ALWAYSSHOWSIZINGBAR = 2208;
export const TMT_MIRRORIMAGE = 2209;
export const TMT_UNIFORMSIZING = 2210;
export const TMT_INTEGRALSIZING = 2211;
export const TMT_SOURCEGROW = 2212;
export const TMT_SOURCESHRINK = 2213;
export const TMT_DRAWBORDERS = 2214;
export const TMT_NOETCHEDEFFECT = 2215;
export const TMT_TEXTAPPLYOVERLAY = 2216;
export const TMT_TEXTGLOW = 2217;
export const TMT_TEXTITALIC = 2218;
export const TMT_COMPOSITEDOPAQUE = 2219;
export const TMT_LOCALIZEDMIRRORIMAGE = 2220;
export const TMT_IMAGECOUNT = 2401;
export const TMT_ALPHALEVEL = 2402;
export const TMT_BORDERSIZE = 2403;
export const TMT_ROUNDCORNERWIDTH = 2404;
export const TMT_ROUNDCORNERHEIGHT = 2405;
export const TMT_GRADIENTRATIO1 = 2406;
export const TMT_GRADIENTRATIO2 = 2407;
export const TMT_GRADIENTRATIO3 = 2408;
export const TMT_GRADIENTRATIO4 = 2409;
export const TMT_GRADIENTRATIO5 = 2410;
export const TMT_PROGRESSCHUNKSIZE = 2411;
export const TMT_PROGRESSSPACESIZE = 2412;
export const TMT_SATURATION = 2413;
export const TMT_TEXTBORDERSIZE = 2414;
export const TMT_ALPHATHRESHOLD = 2415;
export const TMT_WIDTH = 2416;
export const TMT_HEIGHT = 2417;
export const TMT_GLYPHINDEX = 2418;
export const TMT_TRUESIZESTRETCHMARK = 2419;
export const TMT_MINDPI1 = 2420;
export const TMT_MINDPI2 = 2421;
export const TMT_MINDPI3 = 2422;
export const TMT_MINDPI4 = 2423;
export const TMT_MINDPI5 = 2424;
export const TMT_TEXTGLOWSIZE = 2425;
export const TMT_FRAMESPERSECOND = 2426;
export const TMT_PIXELSPERFRAME = 2427;
export const TMT_ANIMATIONDELAY = 2428;
export const TMT_GLOWINTENSITY = 2429;
export const TMT_OPACITY = 2430;
export const TMT_COLORIZATIONCOLOR = 2431;
export const TMT_COLORIZATIONOPACITY = 2432;
export const TMT_MINDPI6 = 2433;
export const TMT_MINDPI7 = 2434;
export const TMT_GLYPHFONT = 2601;
export const TMT_IMAGEFILE = 3001;
export const TMT_IMAGEFILE1 = 3002;
export const TMT_IMAGEFILE2 = 3003;
export const TMT_IMAGEFILE3 = 3004;
export const TMT_IMAGEFILE4 = 3005;
export const TMT_IMAGEFILE5 = 3006;
export const TMT_GLYPHIMAGEFILE = 3008;
export const TMT_IMAGEFILE6 = 3009;
export const TMT_IMAGEFILE7 = 3010;
export const TMT_TEXT = 3201;
export const TMT_CLASSICVALUE = 3202;
export const TMT_OFFSET = 3401;
export const TMT_TEXTSHADOWOFFSET = 3402;
export const TMT_MINSIZE = 3403;
export const TMT_MINSIZE1 = 3404;
export const TMT_MINSIZE2 = 3405;
export const TMT_MINSIZE3 = 3406;
export const TMT_MINSIZE4 = 3407;
export const TMT_MINSIZE5 = 3408;
export const TMT_NORMALSIZE = 3409;
export const TMT_MINSIZE6 = 3410;
export const TMT_MINSIZE7 = 3411;
export const TMT_SIZINGMARGINS = 3601;
export const TMT_CONTENTMARGINS = 3602;
export const TMT_CAPTIONMARGINS = 3603;
export const TMT_BORDERCOLOR = 3801;
export const TMT_FILLCOLOR = 3802;
export const TMT_TEXTCOLOR = 3803;
export const TMT_EDGELIGHTCOLOR = 3804;
export const TMT_EDGEHIGHLIGHTCOLOR = 3805;
export const TMT_EDGESHADOWCOLOR = 3806;
export const TMT_EDGEDKSHADOWCOLOR = 3807;
export const TMT_EDGEFILLCOLOR = 3808;
export const TMT_TRANSPARENTCOLOR = 3809;
export const TMT_GRADIENTCOLOR1 = 3810;
export const TMT_GRADIENTCOLOR2 = 3811;
export const TMT_GRADIENTCOLOR3 = 3812;
export const TMT_GRADIENTCOLOR4 = 3813;
export const TMT_GRADIENTCOLOR5 = 3814;
export const TMT_SHADOWCOLOR = 3815;
export const TMT_GLOWCOLOR = 3816;
export const TMT_TEXTBORDERCOLOR = 3817;
export const TMT_TEXTSHADOWCOLOR = 3818;
export const TMT_GLYPHTEXTCOLOR = 3819;
export const TMT_GLYPHTRANSPARENTCOLOR = 3820;
export const TMT_FILLCOLORHINT = 3821;
export const TMT_BORDERCOLORHINT = 3822;
export const TMT_ACCENTCOLORHINT = 3823;
export const TMT_TEXTCOLORHINT = 3824;
export const TMT_HEADING1TEXTCOLOR = 3825;
export const TMT_HEADING2TEXTCOLOR = 3826;
export const TMT_BODYTEXTCOLOR = 3827;
export const TMT_BGTYPE = 4001;
export const TMT_BORDERTYPE = 4002;
export const TMT_FILLTYPE = 4003;
export const TMT_SIZINGTYPE = 4004;
export const TMT_HALIGN = 4005;
export const TMT_CONTENTALIGNMENT = 4006;
export const TMT_VALIGN = 4007;
export const TMT_OFFSETTYPE = 4008;
export const TMT_ICONEFFECT = 4009;
export const TMT_TEXTSHADOWTYPE = 4010;
export const TMT_IMAGELAYOUT = 4011;
export const TMT_GLYPHTYPE = 4012;
export const TMT_IMAGESELECTTYPE = 4013;
export const TMT_GLYPHFONTSIZINGTYPE = 4014;
export const TMT_TRUESIZESCALINGTYPE = 4015;
export const TMT_USERPICTURE = 5001;
export const TMT_DEFAULTPANESIZE = 5002;
export const TMT_BLENDCOLOR = 5003;
export const TMT_CUSTOMSPLITRECT = 5004;
export const TMT_ANIMATIONBUTTONRECT = 5005;
export const TMT_ANIMATIONDURATION = 5006;
export const TMT_TRANSITIONDURATIONS = 6000;
export const TMT_SCALEDBACKGROUND = 7001;
export const TMT_ATLASIMAGE = 8000;
export const TMT_ATLASINPUTIMAGE = 8001;
export const TMT_ATLASRECT = 8002;
export const ALLOW_NONCLIENT = 1;
export const ALLOW_CONTROLS = 2;
export const ALLOW_WEBCONTENT = 4;
export const VALIDBITS = 7;
export const DL_BEGINDRAG = 1157;
export const DL_CANCELDRAG = 1160;
export const DL_DRAGGING = 1158;
export const DL_DROPPED = 1159;
export const WB_CLASSIFY = 3;
export const WB_ISDELIMITER = 2;
export const WB_LEFT = 0;
export const WB_LEFTBREAK = 6;
export const WB_MOVEWORDLEFT = 4;
export const WB_MOVEWORDRIGHT = 5;
export const WB_RIGHT = 1;
export const WB_RIGHTBREAK = 7;
export const DPAMM_MERGE = 1;
export const DPAMM_DELETE = 2;
export const DPAMM_INSERT = 3;
export const DDL_ARCHIVE = 32;
export const DDL_DIRECTORY = 16;
export const DDL_DRIVES = 16384;
export const DDL_EXCLUSIVE = 32768;
export const DDL_HIDDEN = 2;
export const DDL_READONLY = 1;
export const DDL_READWRITE = 0;
export const DDL_SYSTEM = 4;
export const DDL_POSTMSGS = 8192;
export const OTD_FORCE_RECT_SIZING = 1;
export const OTD_NONCLIENT = 2;
export const GBF_DIRECT = 1;
export const GBF_COPY = 2;
export const GBF_VALIDBITS = 3;
export const ESB_DISABLE_BOTH = 3;
export const ESB_DISABLE_DOWN = 2;
export const ESB_DISABLE_LEFT = 1;
export const ESB_DISABLE_LTUP = 1;
export const ESB_DISABLE_RIGHT = 2;
export const ESB_DISABLE_RTDN = 2;
export const ESB_DISABLE_UP = 1;
export const ESB_ENABLE_BOTH = 0;
export const ILD_BLEND = 4;
export const ILD_BLEND50 = 4;
export const ILD_FOCUS = 2;
export const ILD_MASK = 16;
export const ILD_NORMAL = 0;
export const ILD_SELECTED = 4;
export const WSB_PROP_CXHSCROLL = 2;
export const WSB_PROP_CXHTHUMB = 16;
export const WSB_PROP_CXVSCROLL = 8;
export const WSB_PROP_CYHSCROLL = 4;
export const WSB_PROP_CYVSCROLL = 1;
export const WSB_PROP_CYVTHUMB = 32;
export const WSB_PROP_HBKGCOLOR = 128;
export const WSB_PROP_HSTYLE = 512;
export const WSB_PROP_PALETTE = 2048;
export const WSB_PROP_VBKGCOLOR = 64;
export const WSB_PROP_VSTYLE = 256;
export const WSB_PROP_WINSTYLE = 1024;
export const PSPCB_ADDREF = 0;
export const PSPCB_CREATE = 2;
export const PSPCB_RELEASE = 1;
export const PSPCB_SI_INITDIALOG = 1025;
export const HEADER_CONTROL_NOTIFICATION_BUTTON_LEFT = 0;
export const HEADER_CONTROL_NOTIFICATION_BUTTON_RIGHT = 1;
export const HEADER_CONTROL_NOTIFICATION_BUTTON_MIDDLE = 2;
export const ILCF_MOVE = 0;
export const ILCF_SWAP = 1;
export const BST_CHECKED = 1;
export const BST_INDETERMINATE = 2;
export const BST_UNCHECKED = 0;
export const DTPB_WINDOWDC = 1;
export const DTPB_USECTLCOLORSTATIC = 2;
export const DTPB_USEERASEBKGND = 4;
export const ILIF_ALPHA = 1;
export const ILIF_LOWQUALITY = 2;
export const HDI_WIDTH = 1;
export const HDI_HEIGHT = 1;
export const HDI_TEXT = 2;
export const HDI_FORMAT = 4;
export const HDI_LPARAM = 8;
export const HDI_BITMAP = 16;
export const HDI_IMAGE = 32;
export const HDI_DI_SETITEM = 64;
export const HDI_ORDER = 128;
export const HDI_FILTER = 256;
export const HDI_STATE = 512;
export const RBNM_ID = 1;
export const RBNM_LPARAM = 4;
export const RBNM_STYLE = 2;
export const TTI_ERROR = 3;
export const TTI_INFO = 1;
export const TTI_NONE = 0;
export const TTI_WARNING = 2;
export const TTI_INFO_LARGE = 4;
export const TTI_WARNING_LARGE = 5;
export const TTI_ERROR_LARGE = 6;
export const LVCFMT_LEFT = 0;
export const LVCFMT_RIGHT = 1;
export const LVCFMT_CENTER = 2;
export const LVCFMT_JUSTIFYMASK = 3;
export const LVCFMT_IMAGE = 2048;
export const LVCFMT_BITMAP_ON_RIGHT = 4096;
export const LVCFMT_COL_HAS_IMAGES = 32768;
export const LVCFMT_FIXED_WIDTH = 256;
export const LVCFMT_NO_DPI_SCALE = 262144;
export const LVCFMT_FIXED_RATIO = 524288;
export const LVCFMT_SPLITBUTTON = 16777216;
export const PGK_NONE = 0;
export const PGK_SHIFT = 1;
export const PGK_CONTROL = 2;
export const PGK_MENU = 4;
export const CBEIF_DI_SETITEM = 268435456;
export const CBEIF_IMAGE = 2;
export const CBEIF_INDENT = 16;
export const CBEIF_LPARAM = 32;
export const CBEIF_OVERLAY = 8;
export const CBEIF_SELECTEDIMAGE = 4;
export const CBEIF_TEXT = 1;
export const I_ZERO = 0;
export const I_ONE_OR_MORE = 1;
export const I_CHILDRENCALLBACK = `-1`;
export const I_CHILDRENAUTO = `-2`;
export const TVIF_CHILDREN = 64;
export const TVIF_DI_SETITEM = 4096;
export const TVIF_HANDLE = 16;
export const TVIF_IMAGE = 2;
export const TVIF_PARAM = 4;
export const TVIF_SELECTEDIMAGE = 32;
export const TVIF_STATE = 8;
export const TVIF_TEXT = 1;
export const TVIF_EXPANDEDIMAGE = 512;
export const TVIF_INTEGRAL = 128;
export const TVIF_STATEEX = 256;
export const TCIF_IMAGE = 2;
export const TCIF_RTLREADING = 4;
export const TCIF_TEXT = 1;
export const TCIF_PARAM = 8;
export const TCIF_STATE = 16;
export const TCHT_NOWHERE = 1;
export const TCHT_ONITEM = 6;
export const TCHT_ONITEMICON = 2;
export const TCHT_ONITEMLABEL = 4;
export const STATE_SYSTEM_INVISIBLE = 32768;
export const STATE_SYSTEM_PRESSED = 8;
export const STATE_SYSTEM_FOCUSABLE = 1048576;
export const STATE_SYSTEM_OFFSCREEN = 65536;
export const STATE_SYSTEM_UNAVAILABLE = 1;
export const CDDS_POSTPAINT = 2;
export const CDDS_PREERASE = 3;
export const CDDS_PREPAINT = 1;
export const CDDS_ITEMPOSTERASE = 65540;
export const CDDS_ITEMPOSTPAINT = 65538;
export const CDDS_ITEMPREERASE = 65539;
export const CDDS_ITEMPREPAINT = 65537;
export const CDDS_SUBITEM = 131072;
export const MCGIP_CALENDARCONTROL = 0;
export const MCGIP_NEXT = 1;
export const MCGIP_PREV = 2;
export const MCGIP_FOOTER = 3;
export const MCGIP_CALENDAR = 4;
export const MCGIP_CALENDARHEADER = 5;
export const MCGIP_CALENDARBODY = 6;
export const MCGIP_CALENDARROW = 7;
export const MCGIP_CALENDARCELL = 8;
export const I_GROUPIDCALLBACK = `-1`;
export const I_GROUPIDNONE = `-2`;
export const HICF_ACCELERATOR = 4;
export const HICF_ARROWKEYS = 2;
export const HICF_DUPACCEL = 8;
export const HICF_ENTERING = 16;
export const HICF_LEAVING = 32;
export const HICF_LMOUSE = 128;
export const HICF_MOUSE = 1;
export const HICF_OTHER = 0;
export const HICF_RESELECT = 64;
export const HICF_TOGGLEDROPDOWN = 256;
export const TTF_IDISHWND = 1;
export const TTF_CENTERTIP = 2;
export const TTF_RTLREADING = 4;
export const TTF_SUBCLASS = 16;
export const TTF_TRACK = 32;
export const TTF_ABSOLUTE = 128;
export const TTF_TRANSPARENT = 256;
export const TTF_PARSELINKS = 4096;
export const TTF_DI_SETITEM = 32768;
export const LVTVIF_AUTOSIZE = 0;
export const LVTVIF_FIXEDWIDTH = 1;
export const LVTVIF_FIXEDHEIGHT = 2;
export const LVTVIF_FIXEDSIZE = 3;
export const LVTVIM_TILESIZE = 1;
export const LVTVIM_COLUMNS = 2;
export const LVTVIM_LABELMARGIN = 4;
export const PGF_SCROLLDOWN = 2;
export const PGF_SCROLLLEFT = 4;
export const PGF_SCROLLRIGHT = 8;
export const PGF_SCROLLUP = 1;
export const LVCF_FMT = 1;
export const LVCF_WIDTH = 2;
export const LVCF_TEXT = 4;
export const LVCF_SUBITEM = 8;
export const LVCF_IMAGE = 16;
export const LVCF_ORDER = 32;
export const LVCF_MINWIDTH = 64;
export const LVCF_DEFAULTWIDTH = 128;
export const LVCF_IDEALWIDTH = 256;
export const LVFI_PARAM = 1;
export const LVFI_PARTIAL = 8;
export const LVFI_STRING = 2;
export const LVFI_SUBSTRING = 4;
export const LVFI_WRAP = 32;
export const LVFI_NEARESTXY = 64;
export const BUTTON_IMAGELIST_ALIGN_LEFT = 0;
export const BUTTON_IMAGELIST_ALIGN_RIGHT = 1;
export const BUTTON_IMAGELIST_ALIGN_TOP = 2;
export const BUTTON_IMAGELIST_ALIGN_BOTTOM = 3;
export const BUTTON_IMAGELIST_ALIGN_CENTER = 4;
export const TBIF_BYINDEX = 2147483648;
export const TBIF_COMMAND = 32;
export const TBIF_IMAGE = 1;
export const TBIF_LPARAM = 16;
export const TBIF_SIZE = 64;
export const TBIF_STATE = 4;
export const TBIF_STYLE = 8;
export const TBIF_TEXT = 2;
export const TBIMHT_NONE = 0;
export const TBIMHT_AFTER = 1;
export const TBIMHT_BACKGROUND = 2;
export const LVGF_NONE = 0;
export const LVGF_HEADER = 1;
export const LVGF_FOOTER = 2;
export const LVGF_STATE = 4;
export const BPPF_ERASE = 1;
export const BPPF_NOCLIP = 2;
export const BPPF_NONCLIENT = 4;
export const TVHT_ABOVE = 256;
export const TVHT_BELOW = 512;
export const TVHT_NOWHERE = 1;
export const TVHT_ONITEM = 70;
export const TVHT_ONITEMBUTTON = 16;
export const TVHT_ONITEMICON = 2;
export const TVHT_ONITEMINDENT = 8;
export const TVHT_ONITEMLABEL = 4;
export const TVHT_ONITEMRIGHT = 32;
export const TVHT_ONITEMSTATEICON = 64;
export const TVHT_TOLEFT = 2048;
export const TVHT_TORIGHT = 1024;
export const ODT_BUTTON = 4;
export const ODT_COMBOBOX = 3;
export const ODT_LISTBOX = 2;
export const ODT_LISTVIEW = 102;
export const ODT_MENU = 1;
export const ODT_STATIC = 5;
export const ODT_TAB = 101;
export const PGF_CALCHEIGHT = 2;
export const PGF_CALCWIDTH = 1;
export const MCGIF_DATE = 1;
export const MCGIF_RECT = 2;
export const MCGIF_NAME = 4;
export const LVHT_ABOVE = 8;
export const LVHT_BELOW = 16;
export const LVHT_NOWHERE = 1;
export const LVHT_ONITEMICON = 2;
export const LVHT_ONITEMLABEL = 4;
export const LVHT_ONITEMSTATEICON = 8;
export const LVHT_TOLEFT = 64;
export const LVHT_TORIGHT = 32;
export const LVHT_EX_GROUP_HEADER = 268435456;
export const LVHT_EX_GROUP_FOOTER = 536870912;
export const LVHT_EX_GROUP_COLLAPSE = 1073741824;
export const LVHT_EX_GROUP_BACKGROUND = 2147483648;
export const LVHT_EX_GROUP_STATEICON = 16777216;
export const LVHT_EX_GROUP_SUBSETLINK = 33554432;
export const LVHT_EX_GROUP = 4076863488;
export const LVHT_EX_ONCONTENTS = 67108864;
export const LVHT_EX_FOOTER = 134217728;
export const ICC_ANIMATE_CLASS = 128;
export const ICC_BAR_CLASSES = 4;
export const ICC_COOL_CLASSES = 1024;
export const ICC_DATE_CLASSES = 256;
export const ICC_HOTKEY_CLASS = 64;
export const ICC_INTERNET_CLASSES = 2048;
export const ICC_LINK_CLASS = 32768;
export const ICC_LISTVIEW_CLASSES = 1;
export const ICC_NATIVEFNTCTL_CLASS = 8192;
export const ICC_PAGESCROLLER_CLASS = 4096;
export const ICC_PROGRESS_CLASS = 32;
export const ICC_STANDARD_CLASSES = 16384;
export const ICC_TAB_CLASSES = 8;
export const ICC_TREEVIEW_CLASSES = 2;
export const ICC_UPDOWN_CLASS = 16;
export const ICC_USEREX_CLASSES = 512;
export const ICC_WIN95_CLASSES = 255;
export const LVCDI_ITEM = 0;
export const LVCDI_GROUP = 1;
export const LVCDI_ITEMSLIST = 2;
export const TBNF_IMAGE = 1;
export const TBNF_TEXT = 2;
export const TBNF_DI_SETITEM = 268435456;
export const EMF_CENTERED = 1;
export const LVFIF_TEXT = 1;
export const LVFIF_STATE = 2;
export const ILC_MASK = 1;
export const ILC_COLOR = 0;
export const ILC_COLORDDB = 254;
export const ILC_COLOR4 = 4;
export const ILC_COLOR8 = 8;
export const ILC_COLOR16 = 16;
export const ILC_COLOR24 = 24;
export const ILC_COLOR32 = 32;
export const ILC_PALETTE = 2048;
export const ILC_MIRROR = 8192;
export const ILC_PERITEMMIRROR = 32768;
export const ILC_ORIGINALSIZE = 65536;
export const ILC_HIGHQUALITYSCALE = 131072;
export const DTT_TEXTCOLOR = 1;
export const DTT_BORDERCOLOR = 2;
export const DTT_SHADOWCOLOR = 4;
export const DTT_SHADOWTYPE = 8;
export const DTT_SHADOWOFFSET = 16;
export const DTT_BORDERSIZE = 32;
export const DTT_FONTPROP = 64;
export const DTT_COLORPROP = 128;
export const DTT_STATEID = 256;
export const DTT_CALCRECT = 512;
export const DTT_APPLYOVERLAY = 1024;
export const DTT_GLOWSIZE = 2048;
export const DTT_CALLBACK = 4096;
export const DTT_COMPOSITED = 8192;
export const DTT_VALIDBITS = 12287;
export const LVGIT_UNFOLDED = 1;
export const LVGIT_ZERO = 0;
export const LVIS_FOCUSED = 1;
export const LVIS_SELECTED = 2;
export const LVIS_CUT = 4;
export const LVIS_DROPHILITED = 8;
export const LVIS_GLOW = 16;
export const LVIS_ACTIVATING = 32;
export const LVIS_OVERLAYMASK = 3840;
export const LVIS_STATEIMAGEMASK = 61440;
export const TVE_COLLAPSE = 1;
export const TVE_EXPAND = 2;
export const TVE_TOGGLE = 3;
export const TVE_EXPANDPARTIAL = 16384;
export const TVE_COLLAPSERESET = 32768;
export const TVC_UNKNOWN = 0;
export const TVC_BYMOUSE = 1;
export const TVC_BYKEYBOARD = 2;
export const MCMV_MONTH = 0;
export const MCMV_YEAR = 1;
export const MCMV_DECADE = 2;
export const MCMV_CENTURY = 3;
export const MCMV_MAX = 3;
export const TCIS_BUTTONPRESSED = 1;
export const TCIS_HIGHLIGHTED = 2;
export const TVIS_SELECTED = 2;
export const TVIS_CUT = 4;
export const TVIS_DROPHILITED = 8;
export const TVIS_BOLD = 16;
export const TVIS_EXPANDED = 32;
export const TVIS_EXPANDEDONCE = 64;
export const TVIS_EXPANDPARTIAL = 128;
export const TVIS_OVERLAYMASK = 3840;
export const TVIS_STATEIMAGEMASK = 61440;
export const TVIS_USERMASK = 61440;
export const TVIS_EX_FLAT = 1;
export const TVIS_EX_DISABLED = 2;
export const TVIS_EX_ALL = 2;
export const HDF_LEFT = 0;
export const HDF_RIGHT = 1;
export const HDF_CENTER = 2;
export const HDF_JUSTIFYMASK = 3;
export const HDF_RTLREADING = 4;
export const HDF_BITMAP = 8192;
export const HDF_STRING = 16384;
export const HDF_OWNERDRAW = 32768;
export const HDF_IMAGE = 2048;
export const HDF_BITMAP_ON_RIGHT = 4096;
export const HDF_SORTUP = 1024;
export const HDF_SORTDOWN = 512;
export const HDF_CHECKBOX = 64;
export const HDF_CHECKED = 128;
export const HDF_FIXEDWIDTH = 256;
export const HDF_SPLITBUTTON = 16777216;
export const HDFT_ISSTRING = 0;
export const HDFT_ISNUMBER = 1;
export const HDFT_ISDATE = 2;
export const HDFT_HASNOVALUE = 32768;
export const HDIS_FOCUSED = 1;
export const HHT_NOWHERE = 1;
export const HHT_ONHEADER = 2;
export const HHT_ONDIVIDER = 4;
export const HHT_ONDIVOPEN = 8;
export const HHT_ONFILTER = 16;
export const HHT_ONFILTERBUTTON = 32;
export const HHT_ABOVE = 256;
export const HHT_BELOW = 512;
export const HHT_TORIGHT = 1024;
export const HHT_TOLEFT = 2048;
export const HHT_ONITEMSTATEICON = 4096;
export const HHT_ONDROPDOWN = 8192;
export const HHT_ONOVERFLOW = 16384;
export const ILP_NORMAL = 0;
export const ILP_DOWNLEVEL = 1;
export const LIF_ITEMINDEX = 1;
export const LIF_STATE = 2;
export const LIF_ITEMID = 4;
export const LIF_URL = 8;
export const LIS_FOCUSED = 1;
export const LIS_ENABLED = 2;
export const LIS_VISITED = 4;
export const LIS_HOTTRACK = 8;
export const LIS_DEFAULTCOLORS = 16;
export const LVBKIF_SOURCE_NONE = 0;
export const LVBKIF_SOURCE_HBITMAP = 1;
export const LVBKIF_SOURCE_URL = 2;
export const LVBKIF_SOURCE_MASK = 3;
export const LVBKIF_STYLE_NORMAL = 0;
export const LVBKIF_STYLE_TILE = 16;
export const LVBKIF_STYLE_MASK = 16;
export const LVBKIF_FLAG_TILEOFFSET = 256;
export const LVBKIF_TYPE_WATERMARK = 268435456;
export const LVBKIF_FLAG_ALPHABLEND = 536870912;
export const LVGS_NORMAL = 0;
export const LVGS_COLLAPSED = 1;
export const LVGS_HIDDEN = 2;
export const LVGS_NOHEADER = 4;
export const LVGS_COLLAPSIBLE = 8;
export const LVGS_FOCUSED = 16;
export const LVGS_SELECTED = 32;
export const LVGS_SUBSETED = 64;
export const LVGS_SUBSETLINKFOCUSED = 128;
export const LVGA_HEADER_LEFT = 1;
export const LVGA_HEADER_CENTER = 2;
export const LVGA_HEADER_RIGHT = 4;
export const LVGA_FOOTER_LEFT = 8;
export const LVGA_FOOTER_CENTER = 16;
export const LVGA_FOOTER_RIGHT = 32;
export const LVIM_AFTER = 1;
export const LVCFMT_LINE_BREAK = 1048576;
export const LVCFMT_FILL = 2097152;
export const LVCFMT_WRAP = 4194304;
export const LVCFMT_NO_TITLE = 8388608;
export const LVCFMT_TILE_PLACEMENTMASK = 3145728;
export const MCHT_TITLE = 65536;
export const MCHT_CALENDAR = 131072;
export const MCHT_TODAYLINK = 196608;
export const MCHT_CALENDARCONTROL = 1048576;
export const MCHT_NEXT = 16777216;
export const MCHT_PREV = 33554432;
export const MCHT_NOWHERE = 0;
export const MCHT_TITLEBK = 65536;
export const MCHT_TITLEMONTH = 65537;
export const MCHT_TITLEYEAR = 65538;
export const MCHT_TITLEBTNNEXT = 16842755;
export const MCHT_TITLEBTNPREV = 33619971;
export const MCHT_CALENDARBK = 131072;
export const MCHT_CALENDARDATE = 131073;
export const MCHT_CALENDARDATENEXT = 16908289;
export const MCHT_CALENDARDATEPREV = 33685505;
export const MCHT_CALENDARDAY = 131074;
export const MCHT_CALENDARWEEKNUM = 131075;
export const MCHT_CALENDARDATEMIN = 131076;
export const MCHT_CALENDARDATEMAX = 131077;
export const CDIS_SELECTED = 1;
export const CDIS_GRAYED = 2;
export const CDIS_DISABLED = 4;
export const CDIS_CHECKED = 8;
export const CDIS_FOCUS = 16;
export const CDIS_DEFAULT = 32;
export const CDIS_HOT = 64;
export const CDIS_MARKED = 128;
export const CDIS_INDETERMINATE = 256;
export const CDIS_SHOWKEYBOARDCUES = 512;
export const CDIS_NEARHOT = 1024;
export const CDIS_OTHERSIDEHOT = 2048;
export const CDIS_DROPHILITED = 4096;
export const GDT_NONE = 1;
export const GDT_VALID = 0;
export const LVIF_TEXT = 1;
export const LVIF_IMAGE = 2;
export const LVIF_PARAM = 4;
export const LVIF_STATE = 8;
export const LVIF_INDENT = 16;
export const LVIF_NORECOMPUTE = 2048;
export const LVIF_GROUPID = 256;
export const LVIF_COLUMNS = 512;
export const LVIF_COLFMT = 65536;
export const LVIF_DI_SETITEM = 4096;
export const ODA_DRAWENTIRE = 1;
export const ODA_SELECT = 2;
export const ODA_FOCUS = 4;
export const ODS_SELECTED = 1;
export const ODS_GRAYED = 2;
export const ODS_DISABLED = 4;
export const ODS_CHECKED = 8;
export const ODS_FOCUS = 16;
export const ODS_DEFAULT = 32;
export const ODS_COMBOBOXEDIT = 4096;
export const ODS_HOTLIGHT = 64;
export const ODS_INACTIVE = 128;
export const ODS_NOACCEL = 256;
export const ODS_NOFOCUSRECT = 512;
export const HTTB_BACKGROUNDSEG = 0;
export const HTTB_FIXEDBORDER = 2;
export const HTTB_CAPTION = 4;
export const HTTB_RESIZINGBORDER_LEFT = 16;
export const HTTB_RESIZINGBORDER_TOP = 32;
export const HTTB_RESIZINGBORDER_RIGHT = 64;
export const HTTB_RESIZINGBORDER_BOTTOM = 128;
export const HTTB_RESIZINGBORDER = 240;
export const HTTB_SIZINGTEMPLATE = 256;
export const HTTB_SYSTEMSIZINGMARGINS = 512;
export const CFM_SUBSCRIPT = 196608;
export const CFM_SUPERSCRIPT = 196608;
export const CFM_EFFECTS = 1073741887;
export const CFM_ALL = 4160749631;
export const CFM_BOLD = 1;
export const CFM_CHARSET = 134217728;
export const CFM_COLOR = 1073741824;
export const CFM_FACE = 536870912;
export const CFM_ITALIC = 2;
export const CFM_OFFSET = 268435456;
export const CFM_PROTECTED = 16;
export const CFM_SIZE = 2147483648;
export const CFM_STRIKEOUT = 8;
export const CFM_UNDERLINE = 4;
export const CFM_LINK = 32;
export const CFM_SMALLCAPS = 64;
export const CFM_ALLCAPS = 128;
export const CFM_HIDDEN = 256;
export const CFM_OUTLINE = 512;
export const CFM_SHADOW = 1024;
export const CFM_EMBOSS = 2048;
export const CFM_IMPRINT = 4096;
export const CFM_DISABLED = 8192;
export const CFM_REVISED = 16384;
export const CFM_REVAUTHOR = 32768;
export const CFM_ANIMATION = 262144;
export const CFM_STYLE = 524288;
export const CFM_KERNING = 1048576;
export const CFM_SPACING = 2097152;
export const CFM_WEIGHT = 4194304;
export const CFM_UNDERLINETYPE = 8388608;
export const CFM_COOKIE = 16777216;
export const CFM_LCID = 33554432;
export const CFM_BACKCOLOR = 67108864;
export const CFM_EFFECTS2 = 1141080063;
export const CFM_ALL2 = 4294967295;
export const CFM_FONTBOUND = 1048576;
export const CFM_LINKPROTECTED = 8388608;
export const CFM_EXTENDED = 33554432;
export const CFM_MATHNOBUILDUP = 134217728;
export const CFM_MATH = 268435456;
export const CFM_MATHORDINARY = 536870912;
export const CFM_ALLEFFECTS = 2115207167;
export const CFE_ALLCAPS = 128;
export const CFE_AUTOBACKCOLOR = 67108864;
export const CFE_DISABLED = 8192;
export const CFE_EMBOSS = 2048;
export const CFE_HIDDEN = 256;
export const CFE_IMPRINT = 4096;
export const CFE_OUTLINE = 512;
export const CFE_REVISED = 16384;
export const CFE_SHADOW = 1024;
export const CFE_SMALLCAPS = 64;
export const CFE_AUTOCOLOR = 1073741824;
export const CFE_BOLD = 1;
export const CFE_ITALIC = 2;
export const CFE_STRIKEOUT = 8;
export const CFE_UNDERLINE = 4;
export const CFE_PROTECTED = 16;
export const CFE_LINK = 32;
export const CFE_SUBSCRIPT = 65536;
export const CFE_SUPERSCRIPT = 131072;
export const CFE_FONTBOUND = 1048576;
export const CFE_LINKPROTECTED = 8388608;
export const CFE_EXTENDED = 33554432;
export const CFE_MATHNOBUILDUP = 134217728;
export const CFE_MATH = 268435456;
export const CFE_MATHORDINARY = 536870912;
export const PFM_ALIGNMENT = 8;
export const PFM_NUMBERING = 32;
export const PFM_OFFSET = 4;
export const PFM_OFFSETINDENT = 2147483648;
export const PFM_RIGHTINDENT = 2;
export const PFM_RTLPARA = 65536;
export const PFM_STARTINDENT = 1;
export const PFM_TABSTOPS = 16;
export const SEL_EMPTY = 0;
export const SEL_TEXT = 1;
export const SEL_OBJECT = 2;
export const SEL_MULTICHAR = 4;
export const SEL_MULTIOBJECT = 8;
export const GCM_RIGHTMOUSEDROP = 32768;
export const REO_GETOBJ_POLEOBJ = 1;
export const REO_GETOBJ_PSTG = 2;
export const REO_GETOBJ_POLESITE = 4;
export const REO_GETOBJ_NO_INTERFACES = 0;
export const REO_GETOBJ_ALL_INTERFACES = 7;
export const PARAFORMAT_BORDERS_LEFT = 1;
export const PARAFORMAT_BORDERS_RIGHT = 2;
export const PARAFORMAT_BORDERS_TOP = 4;
export const PARAFORMAT_BORDERS_BOTTOM = 8;
export const PARAFORMAT_BORDERS_INSIDE = 16;
export const PARAFORMAT_BORDERS_OUTSIDE = 32;
export const PARAFORMAT_BORDERS_AUTOCOLOR = 64;
export const PARAFORMAT_SHADING_STYLE_NONE = 0;
export const PARAFORMAT_SHADING_STYLE_DARK_HORIZ = 1;
export const PARAFORMAT_SHADING_STYLE_DARK_VERT = 2;
export const PARAFORMAT_SHADING_STYLE_DARK_DOWN_DIAG = 3;
export const PARAFORMAT_SHADING_STYLE_DARK_UP_DIAG = 4;
export const PARAFORMAT_SHADING_STYLE_DARK_GRID = 5;
export const PARAFORMAT_SHADING_STYLE_DARK_TRELLIS = 6;
export const PARAFORMAT_SHADING_STYLE_LIGHT_HORZ = 7;
export const PARAFORMAT_SHADING_STYLE_LIGHT_VERT = 8;
export const PARAFORMAT_SHADING_STYLE_LIGHT_DOWN_DIAG = 9;
export const PARAFORMAT_SHADING_STYLE_LIGHT_UP_DIAG = 10;
export const PARAFORMAT_SHADING_STYLE_LIGHT_GRID = 11;
export const PARAFORMAT_SHADING_STYLE_LIGHT_TRELLIS = 12;
export const GT_DEFAULT = 0;
export const GT_NOHIDDENTEXT = 8;
export const GT_RAWTEXT = 4;
export const GT_SELECTION = 2;
export const GT_USECRLF = 1;
export const ECN_ENDCOMPOSITION = 1;
export const ECN_NEWTEXT = 2;
export const ICT_RESULTREADSTR = 1;
export const GTL_DEFAULT = 0;
export const GTL_USECRLF = 1;
export const GTL_PRECISE = 2;
export const GTL_CLOSE = 4;
export const GTL_NUMCHARS = 8;
export const GTL_NUMBYTES = 16;
export const REO_ALIGNTORIGHT = 256;
export const REO_BELOWBASELINE = 2;
export const REO_BLANK = 16;
export const REO_CANROTATE = 128;
export const REO_DONTNEEDPALETTE = 32;
export const REO_DYNAMICSIZE = 8;
export const REO_GETMETAFILE = 4194304;
export const REO_HILITED = 16777216;
export const REO_INPLACEACTIVE = 33554432;
export const REO_INVERTEDSELECT = 4;
export const REO_LINK = 2147483648;
export const REO_LINKAVAILABLE = 8388608;
export const REO_OPEN = 67108864;
export const REO_OWNERDRAWSELECT = 64;
export const REO_RESIZABLE = 1;
export const REO_SELECTED = 134217728;
export const REO_STATIC = 1073741824;
export const REO_USEASBACKGROUND = 1024;
export const REO_WRAPTEXTAROUND = 512;
export const PFNS_PAREN = 0;
export const PFNS_PARENS = 256;
export const PFNS_PERIOD = 512;
export const PFNS_PLAIN = 768;
export const PFNS_NONUMBER = 1024;
export const PFNS_NEWNUMBER = 32768;
export const PFA_CENTER = 3;
export const PFA_LEFT = 1;
export const PFA_RIGHT = 2;
export const PFN_BULLET = 1;
export const PFN_ARABIC = 2;
export const PFN_LCLETTER = 3;
export const PFN_UCLETTER = 4;
export const PFN_LCROMAN = 5;
export const PFN_UCROMAN = 6;
export const OFN_SHAREFALLTHROUGH = 2;
export const OFN_SHARENOWARN = 1;
export const OFN_SHAREWARN = 0;
export const CDM_FIRST = 1124;
export const CDM_LAST = 1224;
export const CDM_GETSPEC = 1124;
export const CDM_GETFILEPATH = 1125;
export const CDM_GETFOLDERPATH = 1126;
export const CDM_GETFOLDERIDLIST = 1127;
export const CDM_SETCONTROLTEXT = 1128;
export const CDM_HIDECONTROL = 1129;
export const CDM_SETDEFEXT = 1130;
export const FR_RAW = 131072;
export const FR_SHOWWRAPAROUND = 262144;
export const FR_NOWRAPAROUND = 524288;
export const FR_WRAPAROUND = 1048576;
export const FRM_FIRST = 1124;
export const FRM_LAST = 1224;
export const FRM_SETOPERATIONRESULT = 1124;
export const FRM_SETOPERATIONRESULTTEXT = 1125;
export const PS_OPENTYPE_FONTTYPE = 65536;
export const TT_OPENTYPE_FONTTYPE = 131072;
export const TYPE1_FONTTYPE = 262144;
export const SYMBOL_FONTTYPE = 524288;
export const WM_CHOOSEFONT_GETLOGFONT = 1025;
export const WM_CHOOSEFONT_SETLOGFONT = 1125;
export const WM_CHOOSEFONT_SETFLAGS = 1126;
export const LBSELCHSTRINGA = `commdlg_LBSelChangedNotify`;
export const SHAREVISTRINGA = `commdlg_ShareViolation`;
export const FILEOKSTRINGA = `commdlg_FileNameOK`;
export const COLOROKSTRINGA = `commdlg_ColorOK`;
export const SETRGBSTRINGA = `commdlg_SetRGBColor`;
export const HELPMSGSTRINGA = `commdlg_help`;
export const FINDMSGSTRINGA = `commdlg_FindReplace`;
export const LBSELCHSTRINGW = `commdlg_LBSelChangedNotify`;
export const SHAREVISTRINGW = `commdlg_ShareViolation`;
export const FILEOKSTRINGW = `commdlg_FileNameOK`;
export const COLOROKSTRINGW = `commdlg_ColorOK`;
export const SETRGBSTRINGW = `commdlg_SetRGBColor`;
export const HELPMSGSTRINGW = `commdlg_help`;
export const FINDMSGSTRINGW = `commdlg_FindReplace`;
export const LBSELCHSTRING = `commdlg_LBSelChangedNotify`;
export const SHAREVISTRING = `commdlg_ShareViolation`;
export const FILEOKSTRING = `commdlg_FileNameOK`;
export const COLOROKSTRING = `commdlg_ColorOK`;
export const SETRGBSTRING = `commdlg_SetRGBColor`;
export const HELPMSGSTRING = `commdlg_help`;
export const FINDMSGSTRING = `commdlg_FindReplace`;
export const CD_LBSELNOITEMS = `-1`;
export const CD_LBSELCHANGE = 0;
export const CD_LBSELSUB = 1;
export const CD_LBSELADD = 2;
export const START_PAGE_GENERAL = 4294967295;
export const PD_RESULT_CANCEL = 0;
export const PD_RESULT_PRINT = 1;
export const PD_RESULT_APPLY = 2;
export const DN_DEFAULTPRN = 1;
export const WM_PSD_FULLPAGERECT = 1025;
export const WM_PSD_MINMARGINRECT = 1026;
export const WM_PSD_MARGINRECT = 1027;
export const WM_PSD_GREEKTEXTRECT = 1028;
export const WM_PSD_ENVSTAMPRECT = 1029;
export const WM_PSD_YAFULLPAGERECT = 1030;
export const DLG_COLOR = 10;
export const COLOR_HUESCROLL = 700;
export const COLOR_SATSCROLL = 701;
export const COLOR_LUMSCROLL = 702;
export const COLOR_HUE = 703;
export const COLOR_SAT = 704;
export const COLOR_LUM = 705;
export const COLOR_RED = 706;
export const COLOR_GREEN = 707;
export const COLOR_BLUE = 708;
export const COLOR_CURRENT = 709;
export const COLOR_RAINBOW = 710;
export const COLOR_SAVE = 711;
export const COLOR_ADD = 712;
export const COLOR_SOLID = 713;
export const COLOR_TUNE = 714;
export const COLOR_SCHEMES = 715;
export const COLOR_ELEMENT = 716;
export const COLOR_SAMPLES = 717;
export const COLOR_PALETTE = 718;
export const COLOR_MIX = 719;
export const COLOR_BOX1 = 720;
export const COLOR_CUSTOM1 = 721;
export const COLOR_HUEACCEL = 723;
export const COLOR_SATACCEL = 724;
export const COLOR_LUMACCEL = 725;
export const COLOR_REDACCEL = 726;
export const COLOR_GREENACCEL = 727;
export const COLOR_BLUEACCEL = 728;
export const COLOR_SOLID_LEFT = 730;
export const COLOR_SOLID_RIGHT = 731;
export const NUM_BASIC_COLORS = 48;
export const NUM_CUSTOM_COLORS = 16;
export const cchTextLimitDefault = 32767;
export const MSFTEDIT_CLASS = `RICHEDIT50W`;
export const CERICHEDIT_CLASSA = `RichEditCEA`;
export const CERICHEDIT_CLASSW = `RichEditCEW`;
export const RICHEDIT_CLASSA = `RichEdit20A`;
export const RICHEDIT_CLASS10A = `RICHEDIT`;
export const RICHEDIT_CLASSW = `RichEdit20W`;
export const RICHEDIT_CLASS = `RichEdit20W`;
export const EM_CANPASTE = 1074;
export const EM_DISPLAYBAND = 1075;
export const EM_EXGETSEL = 1076;
export const EM_EXLIMITTEXT = 1077;
export const EM_EXLINEFROMCHAR = 1078;
export const EM_EXSETSEL = 1079;
export const EM_FINDTEXT = 1080;
export const EM_FORMATRANGE = 1081;
export const EM_GETCHARFORMAT = 1082;
export const EM_GETEVENTMASK = 1083;
export const EM_GETOLEINTERFACE = 1084;
export const EM_GETPARAFORMAT = 1085;
export const EM_GETSELTEXT = 1086;
export const EM_HIDESELECTION = 1087;
export const EM_PASTESPECIAL = 1088;
export const EM_REQUESTRESIZE = 1089;
export const EM_SELECTIONTYPE = 1090;
export const EM_SETBKGNDCOLOR = 1091;
export const EM_SETCHARFORMAT = 1092;
export const EM_SETEVENTMASK = 1093;
export const EM_SETOLECALLBACK = 1094;
export const EM_SETPARAFORMAT = 1095;
export const EM_SETTARGETDEVICE = 1096;
export const EM_STREAMIN = 1097;
export const EM_STREAMOUT = 1098;
export const EM_GETTEXTRANGE = 1099;
export const EM_FINDWORDBREAK = 1100;
export const EM_SETOPTIONS = 1101;
export const EM_GETOPTIONS = 1102;
export const EM_FINDTEXTEX = 1103;
export const EM_GETWORDBREAKPROCEX = 1104;
export const EM_SETWORDBREAKPROCEX = 1105;
export const EM_SETUNDOLIMIT = 1106;
export const EM_REDO = 1108;
export const EM_CANREDO = 1109;
export const EM_GETUNDONAME = 1110;
export const EM_GETREDONAME = 1111;
export const EM_STOPGROUPTYPING = 1112;
export const EM_SETTEXTMODE = 1113;
export const EM_GETTEXTMODE = 1114;
export const EM_AUTOURLDETECT = 1115;
export const AURL_ENABLEURL = 1;
export const AURL_ENABLEEMAILADDR = 2;
export const AURL_ENABLETELNO = 4;
export const AURL_ENABLEEAURLS = 8;
export const AURL_ENABLEDRIVELETTERS = 16;
export const AURL_DISABLEMIXEDLGC = 32;
export const EM_GETAUTOURLDETECT = 1116;
export const EM_SETPALETTE = 1117;
export const EM_GETTEXTEX = 1118;
export const EM_GETTEXTLENGTHEX = 1119;
export const EM_SHOWSCROLLBAR = 1120;
export const EM_SETTEXTEX = 1121;
export const EM_SETPUNCTUATION = 1124;
export const EM_GETPUNCTUATION = 1125;
export const EM_SETWORDWRAPMODE = 1126;
export const EM_GETWORDWRAPMODE = 1127;
export const EM_SETIMECOLOR = 1128;
export const EM_GETIMECOLOR = 1129;
export const EM_SETIMEOPTIONS = 1130;
export const EM_GETIMEOPTIONS = 1131;
export const EM_CONVPOSITION = 1132;
export const EM_SETLANGOPTIONS = 1144;
export const EM_GETLANGOPTIONS = 1145;
export const EM_GETIMECOMPMODE = 1146;
export const EM_FINDTEXTW = 1147;
export const EM_FINDTEXTEXW = 1148;
export const EM_RECONVERSION = 1149;
export const EM_SETIMEMODEBIAS = 1150;
export const EM_GETIMEMODEBIAS = 1151;
export const EM_SETBIDIOPTIONS = 1224;
export const EM_GETBIDIOPTIONS = 1225;
export const EM_SETTYPOGRAPHYOPTIONS = 1226;
export const EM_GETTYPOGRAPHYOPTIONS = 1227;
export const EM_SETEDITSTYLE = 1228;
export const EM_GETEDITSTYLE = 1229;
export const SES_EMULATESYSEDIT = 1;
export const SES_BEEPONMAXTEXT = 2;
export const SES_EXTENDBACKCOLOR = 4;
export const SES_MAPCPS = 8;
export const SES_HYPERLINKTOOLTIPS = 8;
export const SES_EMULATE10 = 16;
export const SES_DEFAULTLATINLIGA = 16;
export const SES_USECRLF = 32;
export const SES_NOFOCUSLINKNOTIFY = 32;
export const SES_USEAIMM = 64;
export const SES_NOIME = 128;
export const SES_ALLOWBEEPS = 256;
export const SES_UPPERCASE = 512;
export const SES_LOWERCASE = 1024;
export const SES_NOINPUTSEQUENCECHK = 2048;
export const SES_BIDI = 4096;
export const SES_SCROLLONKILLFOCUS = 8192;
export const SES_XLTCRCRLFTOCR = 16384;
export const SES_DRAFTMODE = 32768;
export const SES_USECTF = 65536;
export const SES_HIDEGRIDLINES = 131072;
export const SES_USEATFONT = 262144;
export const SES_CUSTOMLOOK = 524288;
export const SES_LBSCROLLNOTIFY = 1048576;
export const SES_CTFALLOWEMBED = 2097152;
export const SES_CTFALLOWSMARTTAG = 4194304;
export const SES_CTFALLOWPROOFING = 8388608;
export const SES_LOGICALCARET = 16777216;
export const SES_WORDDRAGDROP = 33554432;
export const SES_SMARTDRAGDROP = 67108864;
export const SES_MULTISELECT = 134217728;
export const SES_CTFNOLOCK = 268435456;
export const SES_NOEALINEHEIGHTADJUST = 536870912;
export const SES_MAX = 536870912;
export const IMF_AUTOKEYBOARD = 1;
export const IMF_AUTOFONT = 2;
export const IMF_IMECANCELCOMPLETE = 4;
export const IMF_IMEALWAYSSENDNOTIFY = 8;
export const IMF_AUTOFONTSIZEADJUST = 16;
export const IMF_UIFONTS = 32;
export const IMF_NOIMPLICITLANG = 64;
export const IMF_DUALFONT = 128;
export const IMF_NOKBDLIDFIXUP = 512;
export const IMF_NORTFFONTSUBSTITUTE = 1024;
export const IMF_SPELLCHECKING = 2048;
export const IMF_TKBPREDICTION = 4096;
export const IMF_IMEUIINTEGRATION = 8192;
export const ICM_NOTOPEN = 0;
export const ICM_LEVEL3 = 1;
export const ICM_LEVEL2 = 2;
export const ICM_LEVEL2_5 = 3;
export const ICM_LEVEL2_SUI = 4;
export const ICM_CTF = 5;
export const TO_ADVANCEDTYPOGRAPHY = 1;
export const TO_SIMPLELINEBREAK = 2;
export const TO_DISABLECUSTOMTEXTOUT = 4;
export const TO_ADVANCEDLAYOUT = 8;
export const EM_OUTLINE = 1244;
export const EM_GETSCROLLPOS = 1245;
export const EM_SETSCROLLPOS = 1246;
export const EM_SETFONTSIZE = 1247;
export const EM_GETZOOM = 1248;
export const EM_SETZOOM = 1249;
export const EM_GETVIEWKIND = 1250;
export const EM_SETVIEWKIND = 1251;
export const EM_GETPAGE = 1252;
export const EM_SETPAGE = 1253;
export const EM_GETHYPHENATEINFO = 1254;
export const EM_SETHYPHENATEINFO = 1255;
export const EM_GETPAGEROTATE = 1259;
export const EM_SETPAGEROTATE = 1260;
export const EM_GETCTFMODEBIAS = 1261;
export const EM_SETCTFMODEBIAS = 1262;
export const EM_GETCTFOPENSTATUS = 1264;
export const EM_SETCTFOPENSTATUS = 1265;
export const EM_GETIMECOMPTEXT = 1266;
export const EM_ISIME = 1267;
export const EM_GETIMEPROPERTY = 1268;
export const EM_GETQUERYRTFOBJ = 1293;
export const EM_SETQUERYRTFOBJ = 1294;
export const EPR_0 = 0;
export const EPR_270 = 1;
export const EPR_180 = 2;
export const EPR_90 = 3;
export const EPR_SE = 5;
export const CTFMODEBIAS_DEFAULT = 0;
export const CTFMODEBIAS_FILENAME = 1;
export const CTFMODEBIAS_NAME = 2;
export const CTFMODEBIAS_READING = 3;
export const CTFMODEBIAS_DATETIME = 4;
export const CTFMODEBIAS_CONVERSATION = 5;
export const CTFMODEBIAS_NUMERIC = 6;
export const CTFMODEBIAS_HIRAGANA = 7;
export const CTFMODEBIAS_KATAKANA = 8;
export const CTFMODEBIAS_HANGUL = 9;
export const CTFMODEBIAS_HALFWIDTHKATAKANA = 10;
export const CTFMODEBIAS_FULLWIDTHALPHANUMERIC = 11;
export const CTFMODEBIAS_HALFWIDTHALPHANUMERIC = 12;
export const IMF_SMODE_PLAURALCLAUSE = 1;
export const IMF_SMODE_NONE = 2;
export const EMO_EXIT = 0;
export const EMO_ENTER = 1;
export const EMO_PROMOTE = 2;
export const EMO_EXPAND = 3;
export const EMO_MOVESELECTION = 4;
export const EMO_GETVIEWMODE = 5;
export const EMO_EXPANDSELECTION = 0;
export const EMO_EXPANDDOCUMENT = 1;
export const VM_NORMAL = 4;
export const VM_OUTLINE = 2;
export const VM_PAGE = 9;
export const EM_INSERTTABLE = 1256;
export const EM_GETAUTOCORRECTPROC = 1257;
export const EM_SETAUTOCORRECTPROC = 1258;
export const EM_CALLAUTOCORRECTPROC = 1279;
export const ATP_NOCHANGE = 0;
export const ATP_CHANGE = 1;
export const ATP_NODELIMITER = 2;
export const ATP_REPLACEALLTEXT = 4;
export const EM_GETTABLEPARMS = 1289;
export const EM_SETEDITSTYLEEX = 1299;
export const EM_GETEDITSTYLEEX = 1300;
export const SES_EX_NOTABLE = 4;
export const SES_EX_NOMATH = 64;
export const SES_EX_HANDLEFRIENDLYURL = 256;
export const SES_EX_NOTHEMING = 524288;
export const SES_EX_NOACETATESELECTION = 1048576;
export const SES_EX_USESINGLELINE = 2097152;
export const SES_EX_MULTITOUCH = 134217728;
export const SES_EX_HIDETEMPFORMAT = 268435456;
export const SES_EX_USEMOUSEWPARAM = 536870912;
export const EM_GETSTORYTYPE = 1314;
export const EM_SETSTORYTYPE = 1315;
export const EM_GETELLIPSISMODE = 1329;
export const EM_SETELLIPSISMODE = 1330;
export const ELLIPSIS_MASK = 3;
export const ELLIPSIS_NONE = 0;
export const ELLIPSIS_END = 1;
export const ELLIPSIS_WORD = 3;
export const EM_SETTABLEPARMS = 1331;
export const EM_GETTOUCHOPTIONS = 1334;
export const EM_SETTOUCHOPTIONS = 1335;
export const EM_INSERTIMAGE = 1338;
export const EM_SETUIANAME = 1344;
export const EM_GETELLIPSISSTATE = 1346;
export const RTO_SHOWHANDLES = 1;
export const RTO_DISABLEHANDLES = 2;
export const RTO_READINGMODE = 3;
export const EN_MSGFILTER = 1792;
export const EN_REQUESTRESIZE = 1793;
export const EN_SELCHANGE = 1794;
export const EN_DROPFILES = 1795;
export const EN_PROTECTED = 1796;
export const EN_CORRECTTEXT = 1797;
export const EN_STOPNOUNDO = 1798;
export const EN_IMECHANGE = 1799;
export const EN_SAVECLIPBOARD = 1800;
export const EN_OLEOPFAILED = 1801;
export const EN_OBJECTPOSITIONS = 1802;
export const EN_LINK = 1803;
export const EN_DRAGDROPDONE = 1804;
export const EN_PARAGRAPHEXPANDED = 1805;
export const EN_PAGECHANGE = 1806;
export const EN_LOWFIRTF = 1807;
export const EN_ALIGNLTR = 1808;
export const EN_ALIGNRTL = 1809;
export const EN_CLIPFORMAT = 1810;
export const EN_STARTCOMPOSITION = 1811;
export const EN_ENDCOMPOSITION = 1812;
export const ENM_NONE = 0;
export const ENM_CHANGE = 1;
export const ENM_UPDATE = 2;
export const ENM_SCROLL = 4;
export const ENM_SCROLLEVENTS = 8;
export const ENM_DRAGDROPDONE = 16;
export const ENM_PARAGRAPHEXPANDED = 32;
export const ENM_PAGECHANGE = 64;
export const ENM_CLIPFORMAT = 128;
export const ENM_KEYEVENTS = 65536;
export const ENM_MOUSEEVENTS = 131072;
export const ENM_REQUESTRESIZE = 262144;
export const ENM_SELCHANGE = 524288;
export const ENM_DROPFILES = 1048576;
export const ENM_PROTECTED = 2097152;
export const ENM_CORRECTTEXT = 4194304;
export const ENM_IMECHANGE = 8388608;
export const ENM_LANGCHANGE = 16777216;
export const ENM_OBJECTPOSITIONS = 33554432;
export const ENM_LINK = 67108864;
export const ENM_LOWFIRTF = 134217728;
export const ENM_STARTCOMPOSITION = 268435456;
export const ENM_ENDCOMPOSITION = 536870912;
export const ENM_GROUPTYPINGCHANGE = 1073741824;
export const ENM_HIDELINKTOOLTIP = 2147483648;
export const ES_SAVESEL = 32768;
export const ES_SUNKEN = 16384;
export const ES_DISABLENOSCROLL = 8192;
export const ES_SELECTIONBAR = 16777216;
export const ES_NOOLEDRAGDROP = 8;
export const ES_EX_NOCALLOLEINIT = 0;
export const ES_VERTICAL = 4194304;
export const ES_NOIME = 524288;
export const ES_SELFIME = 262144;
export const ECO_AUTOWORDSELECTION = 1;
export const ECO_AUTOVSCROLL = 64;
export const ECO_AUTOHSCROLL = 128;
export const ECO_NOHIDESEL = 256;
export const ECO_READONLY = 2048;
export const ECO_WANTRETURN = 4096;
export const ECO_SAVESEL = 32768;
export const ECO_SELECTIONBAR = 16777216;
export const ECO_VERTICAL = 4194304;
export const ECOOP_SET = 1;
export const ECOOP_OR = 2;
export const ECOOP_AND = 3;
export const ECOOP_XOR = 4;
export const WB_MOVEWORDPREV = 4;
export const WB_MOVEWORDNEXT = 5;
export const WB_PREVBREAK = 6;
export const WB_NEXTBREAK = 7;
export const PC_FOLLOWING = 1;
export const PC_LEADING = 2;
export const PC_OVERFLOW = 3;
export const PC_DELIMITER = 4;
export const WBF_WORDWRAP = 16;
export const WBF_WORDBREAK = 32;
export const WBF_OVERFLOW = 64;
export const WBF_LEVEL1 = 128;
export const WBF_LEVEL2 = 256;
export const WBF_CUSTOM = 512;
export const IMF_FORCENONE = 1;
export const IMF_FORCEENABLE = 2;
export const IMF_FORCEDISABLE = 4;
export const IMF_CLOSESTATUSWINDOW = 8;
export const IMF_VERTICAL = 32;
export const IMF_FORCEACTIVE = 64;
export const IMF_FORCEINACTIVE = 128;
export const IMF_FORCEREMEMBER = 256;
export const IMF_MULTIPLEEDIT = 1024;
export const yHeightCharPtsMost = 1638;
export const SCF_SELECTION = 1;
export const SCF_WORD = 2;
export const SCF_DEFAULT = 0;
export const SCF_ALL = 4;
export const SCF_USEUIRULES = 8;
export const SCF_ASSOCIATEFONT = 16;
export const SCF_NOKBUPDATE = 32;
export const SCF_ASSOCIATEFONT2 = 64;
export const SCF_SMARTFONT = 128;
export const SCF_CHARREPFROMLCID = 256;
export const SPF_DONTSETDEFAULT = 2;
export const SPF_SETDEFAULT = 4;
export const SF_TEXT = 1;
export const SF_RTF = 2;
export const SF_RTFNOOBJS = 3;
export const SF_TEXTIZED = 4;
export const SF_UNICODE = 16;
export const SF_USECODEPAGE = 32;
export const SF_NCRFORNONASCII = 64;
export const SFF_WRITEXTRAPAR = 128;
export const SFF_SELECTION = 32768;
export const SFF_PLAINRTF = 16384;
export const SFF_PERSISTVIEWSCALE = 8192;
export const SFF_KEEPDOCINFO = 4096;
export const SFF_PWD = 2048;
export const SF_RTFVAL = 1792;
export const MAX_TAB_STOPS = 32;
export const lDefaultTab = 720;
export const MAX_TABLE_CELLS = 63;
export const PFM_SPACEBEFORE = 64;
export const PFM_SPACEAFTER = 128;
export const PFM_LINESPACING = 256;
export const PFM_STYLE = 1024;
export const PFM_BORDER = 2048;
export const PFM_SHADING = 4096;
export const PFM_NUMBERINGSTYLE = 8192;
export const PFM_NUMBERINGTAB = 16384;
export const PFM_NUMBERINGSTART = 32768;
export const PFM_KEEP = 131072;
export const PFM_KEEPNEXT = 262144;
export const PFM_PAGEBREAKBEFORE = 524288;
export const PFM_NOLINENUMBER = 1048576;
export const PFM_NOWIDOWCONTROL = 2097152;
export const PFM_DONOTHYPHEN = 4194304;
export const PFM_SIDEBYSIDE = 8388608;
export const PFM_COLLAPSED = 16777216;
export const PFM_OUTLINELEVEL = 33554432;
export const PFM_BOX = 67108864;
export const PFM_RESERVED2 = 134217728;
export const PFM_TABLEROWDELIMITER = 268435456;
export const PFM_TEXTWRAPPINGBREAK = 536870912;
export const PFM_TABLE = 1073741824;
export const PFA_JUSTIFY = 4;
export const PFA_FULL_INTERWORD = 4;
export const GCMF_GRIPPER = 1;
export const GCMF_SPELLING = 2;
export const GCMF_TOUCHMENU = 16384;
export const GCMF_MOUSEMENU = 8192;
export const OLEOP_DOVERB = 1;
export const CF_RTF = `Rich Text Format`;
export const CF_RTFNOOBJS = `Rich Text Format Without Objects`;
export const CF_RETEXTOBJ = `RichEdit Text and Objects`;
export const ST_DEFAULT = 0;
export const ST_KEEPUNDO = 1;
export const ST_SELECTION = 2;
export const ST_NEWCHARS = 4;
export const ST_UNICODE = 8;
export const BOM_DEFPARADIR = 1;
export const BOM_PLAINTEXT = 2;
export const BOM_NEUTRALOVERRIDE = 4;
export const BOM_CONTEXTREADING = 8;
export const BOM_CONTEXTALIGNMENT = 16;
export const BOM_LEGACYBIDICLASS = 64;
export const BOM_UNICODEBIDI = 128;
export const BOE_RTLDIR = 1;
export const BOE_PLAINTEXT = 2;
export const BOE_NEUTRALOVERRIDE = 4;
export const BOE_CONTEXTREADING = 8;
export const BOE_CONTEXTALIGNMENT = 16;
export const BOE_FORCERECALC = 32;
export const BOE_LEGACYBIDICLASS = 64;
export const BOE_UNICODEBIDI = 128;
export const FR_MATCHDIAC = 536870912;
export const FR_MATCHKASHIDA = 1073741824;
export const FR_MATCHALEFHAMZA = 2147483648;
export const RICHEDIT60_CLASS = `RICHEDIT60W`;
export const PFA_FULL_NEWSPAPER = 5;
export const PFA_FULL_INTERLETTER = 6;
export const PFA_FULL_SCALED = 7;
export const PFA_FULL_GLYPHS = 8;
export const AURL_ENABLEEA = 1;
export const GCM_TOUCHMENU = 16384;
export const GCM_MOUSEMENU = 8192;
export const S_MSG_KEY_IGNORED = 288796641820148225n;
export const TXTBIT_RICHTEXT = 1;
export const TXTBIT_MULTILINE = 2;
export const TXTBIT_READONLY = 4;
export const TXTBIT_SHOWACCELERATOR = 8;
export const TXTBIT_USEPASSWORD = 16;
export const TXTBIT_HIDESELECTION = 32;
export const TXTBIT_SAVESELECTION = 64;
export const TXTBIT_AUTOWORDSEL = 128;
export const TXTBIT_VERTICAL = 256;
export const TXTBIT_SELBARCHANGE = 512;
export const TXTBIT_WORDWRAP = 1024;
export const TXTBIT_ALLOWBEEP = 2048;
export const TXTBIT_DISABLEDRAG = 4096;
export const TXTBIT_VIEWINSETCHANGE = 8192;
export const TXTBIT_BACKSTYLECHANGE = 16384;
export const TXTBIT_MAXLENGTHCHANGE = 32768;
export const TXTBIT_SCROLLBARCHANGE = 65536;
export const TXTBIT_CHARFORMATCHANGE = 131072;
export const TXTBIT_PARAFORMATCHANGE = 262144;
export const TXTBIT_EXTENTCHANGE = 524288;
export const TXTBIT_CLIENTRECTCHANGE = 1048576;
export const TXTBIT_USECURRENTBKG = 2097152;
export const TXTBIT_NOTHREADREFCOUNT = 4194304;
export const TXTBIT_SHOWPASSWORD = 8388608;
export const TXTBIT_D2DDWRITE = 16777216;
export const TXTBIT_D2DSIMPLETYPOGRAPHY = 33554432;
export const TXTBIT_D2DPIXELSNAPPED = 67108864;
export const TXTBIT_D2DSUBPIXELLINES = 134217728;
export const TXTBIT_FLASHLASTPASSWORDCHAR = 268435456;
export const TXTBIT_ADVANCEDINPUT = 536870912;
export const TXES_ISDIALOG = 1;
export const REO_NULL = 0;
export const REO_READWRITEMASK = 2047;
export const TVGIPR_BUTTON = 1;
export const EC_ENDOFLINE_DETECTFROMCONTENT = 0;
export const EC_ENDOFLINE_CRLF = 1;
export const EC_ENDOFLINE_CR = 2;
export const EC_ENDOFLINE_LF = 3;
export const EC_SEARCHWEB_ENTRYPOINT_EXTERNAL = 0;
export const EC_SEARCHWEB_ENTRYPOINT_CONTEXTMENU = 1;
export const TDF_ENABLE_HYPERLINKS = 1;
export const TDF_USE_HICON_MAIN = 2;
export const TDF_USE_HICON_FOOTER = 4;
export const TDF_ALLOW_DIALOG_CANCELLATION = 8;
export const TDF_USE_COMMAND_LINKS = 16;
export const TDF_USE_COMMAND_LINKS_NO_ICON = 32;
export const TDF_EXPAND_FOOTER_AREA = 64;
export const TDF_EXPANDED_BY_DEFAULT = 128;
export const TDF_VERIFICATION_FLAG_CHECKED = 256;
export const TDF_SHOW_PROGRESS_BAR = 512;
export const TDF_SHOW_MARQUEE_PROGRESS_BAR = 1024;
export const TDF_CALLBACK_TIMER = 2048;
export const TDF_POSITION_RELATIVE_TO_WINDOW = 4096;
export const TDF_RTL_LAYOUT = 8192;
export const TDF_NO_DEFAULT_RADIO_BUTTON = 16384;
export const TDF_CAN_BE_MINIMIZED = 32768;
export const TDF_NO_SET_FOREGROUND = 65536;
export const TDF_SIZE_TO_CONTENT = 16777216;
export const TDM_NAVIGATE_PAGE = 1125;
export const TDM_CLICK_BUTTON = 1126;
export const TDM_SET_MARQUEE_PROGRESS_BAR = 1127;
export const TDM_SET_PROGRESS_BAR_STATE = 1128;
export const TDM_SET_PROGRESS_BAR_RANGE = 1129;
export const TDM_SET_PROGRESS_BAR_POS = 1130;
export const TDM_SET_PROGRESS_BAR_MARQUEE = 1131;
export const TDM_SET_ELEMENT_TEXT = 1132;
export const TDM_CLICK_RADIO_BUTTON = 1134;
export const TDM_ENABLE_BUTTON = 1135;
export const TDM_ENABLE_RADIO_BUTTON = 1136;
export const TDM_CLICK_VERIFICATION = 1137;
export const TDM_UPDATE_ELEMENT_TEXT = 1138;
export const TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE = 1139;
export const TDM_UPDATE_ICON = 1140;
export const TDN_CREATED = 0;
export const TDN_NAVIGATED = 1;
export const TDN_BUTTON_CLICKED = 2;
export const TDN_HYPERLINK_CLICKED = 3;
export const TDN_TIMER = 4;
export const TDN_DESTROYED = 5;
export const TDN_RADIO_BUTTON_CLICKED = 6;
export const TDN_DIALOG_CONSTRUCTED = 7;
export const TDN_VERIFICATION_CLICKED = 8;
export const TDN_HELP = 9;
export const TDN_EXPANDO_BUTTON_CLICKED = 10;
export const TDE_CONTENT = 0;
export const TDE_EXPANDED_INFORMATION = 1;
export const TDE_FOOTER = 2;
export const TDE_MAIN_INSTRUCTION = 3;
export const TDIE_ICON_MAIN = 0;
export const TDIE_ICON_FOOTER = 1;
export const TDCBF_OK_BUTTON = 1;
export const TDCBF_YES_BUTTON = 2;
export const TDCBF_NO_BUTTON = 4;
export const TDCBF_CANCEL_BUTTON = 8;
export const TDCBF_RETRY_BUTTON = 16;
export const TDCBF_CLOSE_BUTTON = 32;
export const LIM_SMALL = 0;
export const LIM_LARGE = 1;
export const TAP_FLAGS = 0;
export const TAP_TRANSFORMCOUNT = 1;
export const TAP_STAGGERDELAY = 2;
export const TAP_STAGGERDELAYCAP = 3;
export const TAP_STAGGERDELAYFACTOR = 4;
export const TAP_ZORDER = 5;
export const TAPF_NONE = 0;
export const TAPF_HASSTAGGER = 1;
export const TAPF_ISRTLAWARE = 2;
export const TAPF_ALLOWCOLLECTION = 4;
export const TAPF_HASBACKGROUND = 8;
export const TAPF_HASPERSPECTIVE = 16;
export const TATT_TRANSLATE_2D = 0;
export const TATT_SCALE_2D = 1;
export const TATT_OPACITY = 2;
export const TATT_CLIP = 3;
export const TATF_NONE = 0;
export const TATF_TARGETVALUES_USER = 1;
export const TATF_HASINITIALVALUES = 2;
export const TATF_HASORIGINVALUES = 4;
export const TTFT_UNDEFINED = 0;
export const TTFT_CUBIC_BEZIER = 1;
export const TS_MIN = 0;
export const TS_TRUE = 1;
export const TS_DRAW = 2;
export const PO_STATE = 0;
export const PO_PART = 1;
export const PO_CLASS = 2;
export const PO_GLOBAL = 3;
export const PO_NOTFOUND = 4;
export const WTA_NONCLIENT = 1;
export const BPBF_COMPATIBLEBITMAP = 0;
export const BPBF_DIB = 1;
export const BPBF_TOPDOWNDIB = 2;
export const BPBF_TOPDOWNMONODIB = 3;
export const BPAS_NONE = 0;
export const BPAS_LINEAR = 1;
export const BPAS_CUBIC = 2;
export const BPAS_SINE = 3;
export const AW_TITLEBAR = 1;
export const AW_HEADERAREA = 2;
export const AW_CONTENTAREA = 3;
export const AW_COMMANDAREA = 4;
export const AW_BUTTON = 5;
export const AW_S_TITLEBAR_ACTIVE = 1;
export const AW_S_TITLEBAR_INACTIVE = 2;
export const AW_S_HEADERAREA_NOMARGIN = 1;
export const AW_S_CONTENTAREA_NOMARGIN = 1;
export const BP_PUSHBUTTON = 1;
export const BP_RADIOBUTTON = 2;
export const BP_CHECKBOX = 3;
export const BP_GROUPBOX = 4;
export const BP_USERBUTTON = 5;
export const BP_COMMANDLINK = 6;
export const BP_COMMANDLINKGLYPH = 7;
export const BP_RADIOBUTTON_HCDISABLED = 8;
export const BP_CHECKBOX_HCDISABLED = 9;
export const BP_GROUPBOX_HCDISABLED = 10;
export const BP_PUSHBUTTONDROPDOWN = 11;
export const PBS_NORMAL = 1;
export const PBS_HOT = 2;
export const PBS_PRESSED = 3;
export const PBS_DISABLED = 4;
export const PBS_DEFAULTED = 5;
export const PBS_DEFAULTED_ANIMATING = 6;
export const RBS_UNCHECKEDNORMAL = 1;
export const RBS_UNCHECKEDHOT = 2;
export const RBS_UNCHECKEDPRESSED = 3;
export const RBS_UNCHECKEDDISABLED = 4;
export const RBS_CHECKEDNORMAL = 5;
export const RBS_CHECKEDHOT = 6;
export const RBS_CHECKEDPRESSED = 7;
export const RBS_CHECKEDDISABLED = 8;
export const CBS_UNCHECKEDNORMAL = 1;
export const CBS_UNCHECKEDHOT = 2;
export const CBS_UNCHECKEDPRESSED = 3;
export const CBS_UNCHECKEDDISABLED = 4;
export const CBS_CHECKEDNORMAL = 5;
export const CBS_CHECKEDHOT = 6;
export const CBS_CHECKEDPRESSED = 7;
export const CBS_CHECKEDDISABLED = 8;
export const CBS_MIXEDNORMAL = 9;
export const CBS_MIXEDHOT = 10;
export const CBS_MIXEDPRESSED = 11;
export const CBS_MIXEDDISABLED = 12;
export const CBS_IMPLICITNORMAL = 13;
export const CBS_IMPLICITHOT = 14;
export const CBS_IMPLICITPRESSED = 15;
export const CBS_IMPLICITDISABLED = 16;
export const CBS_EXCLUDEDNORMAL = 17;
export const CBS_EXCLUDEDHOT = 18;
export const CBS_EXCLUDEDPRESSED = 19;
export const CBS_EXCLUDEDDISABLED = 20;
export const GBS_NORMAL = 1;
export const GBS_DISABLED = 2;
export const CMDLS_NORMAL = 1;
export const CMDLS_HOT = 2;
export const CMDLS_PRESSED = 3;
export const CMDLS_DISABLED = 4;
export const CMDLS_DEFAULTED = 5;
export const CMDLS_DEFAULTED_ANIMATING = 6;
export const CMDLGS_NORMAL = 1;
export const CMDLGS_HOT = 2;
export const CMDLGS_PRESSED = 3;
export const CMDLGS_DISABLED = 4;
export const CMDLGS_DEFAULTED = 5;
export const PBDDS_NORMAL = 1;
export const PBDDS_DISABLED = 2;
export const CP_DROPDOWNBUTTON = 1;
export const CP_BACKGROUND = 2;
export const CP_TRANSPARENTBACKGROUND = 3;
export const CP_BORDER = 4;
export const CP_READONLY = 5;
export const CP_DROPDOWNBUTTONRIGHT = 6;
export const CP_DROPDOWNBUTTONLEFT = 7;
export const CP_CUEBANNER = 8;
export const CP_DROPDOWNITEM = 9;
export const CBXS_NORMAL = 1;
export const CBXS_HOT = 2;
export const CBXS_PRESSED = 3;
export const CBXS_DISABLED = 4;
export const CBXSR_NORMAL = 1;
export const CBXSR_HOT = 2;
export const CBXSR_PRESSED = 3;
export const CBXSR_DISABLED = 4;
export const CBXSL_NORMAL = 1;
export const CBXSL_HOT = 2;
export const CBXSL_PRESSED = 3;
export const CBXSL_DISABLED = 4;
export const CBTBS_NORMAL = 1;
export const CBTBS_HOT = 2;
export const CBTBS_DISABLED = 3;
export const CBTBS_FOCUSED = 4;
export const CBB_NORMAL = 1;
export const CBB_HOT = 2;
export const CBB_FOCUSED = 3;
export const CBB_DISABLED = 4;
export const CBRO_NORMAL = 1;
export const CBRO_HOT = 2;
export const CBRO_PRESSED = 3;
export const CBRO_DISABLED = 4;
export const CBCB_NORMAL = 1;
export const CBCB_HOT = 2;
export const CBCB_PRESSED = 3;
export const CBCB_DISABLED = 4;
export const CBDI_NORMAL = 1;
export const CBDI_HIGHLIGHTED = 2;
export const CSST_TAB = 1;
export const CSTB_NORMAL = 1;
export const CSTB_HOT = 2;
export const CSTB_SELECTED = 3;
export const CPANEL_NAVIGATIONPANE = 1;
export const CPANEL_CONTENTPANE = 2;
export const CPANEL_NAVIGATIONPANELABEL = 3;
export const CPANEL_CONTENTPANELABEL = 4;
export const CPANEL_TITLE = 5;
export const CPANEL_BODYTEXT = 6;
export const CPANEL_HELPLINK = 7;
export const CPANEL_TASKLINK = 8;
export const CPANEL_GROUPTEXT = 9;
export const CPANEL_CONTENTLINK = 10;
export const CPANEL_SECTIONTITLELINK = 11;
export const CPANEL_LARGECOMMANDAREA = 12;
export const CPANEL_SMALLCOMMANDAREA = 13;
export const CPANEL_BUTTON = 14;
export const CPANEL_MESSAGETEXT = 15;
export const CPANEL_NAVIGATIONPANELINE = 16;
export const CPANEL_CONTENTPANELINE = 17;
export const CPANEL_BANNERAREA = 18;
export const CPANEL_BODYTITLE = 19;
export const CPHL_NORMAL = 1;
export const CPHL_HOT = 2;
export const CPHL_PRESSED = 3;
export const CPHL_DISABLED = 4;
export const CPTL_NORMAL = 1;
export const CPTL_HOT = 2;
export const CPTL_PRESSED = 3;
export const CPTL_DISABLED = 4;
export const CPTL_PAGE = 5;
export const CPCL_NORMAL = 1;
export const CPCL_HOT = 2;
export const CPCL_PRESSED = 3;
export const CPCL_DISABLED = 4;
export const CPSTL_NORMAL = 1;
export const CPSTL_HOT = 2;
export const DP_DATETEXT = 1;
export const DP_DATEBORDER = 2;
export const DP_SHOWCALENDARBUTTONRIGHT = 3;
export const DPDT_NORMAL = 1;
export const DPDT_DISABLED = 2;
export const DPDT_SELECTED = 3;
export const DPDB_NORMAL = 1;
export const DPDB_HOT = 2;
export const DPDB_FOCUSED = 3;
export const DPDB_DISABLED = 4;
export const DPSCBR_NORMAL = 1;
export const DPSCBR_HOT = 2;
export const DPSCBR_PRESSED = 3;
export const DPSCBR_DISABLED = 4;
export const DD_COPY = 1;
export const DD_MOVE = 2;
export const DD_UPDATEMETADATA = 3;
export const DD_CREATELINK = 4;
export const DD_WARNING = 5;
export const DD_NONE = 6;
export const DD_IMAGEBG = 7;
export const DD_TEXTBG = 8;
export const DDCOPY_HIGHLIGHT = 1;
export const DDCOPY_NOHIGHLIGHT = 2;
export const DDMOVE_HIGHLIGHT = 1;
export const DDMOVE_NOHIGHLIGHT = 2;
export const DDUPDATEMETADATA_HIGHLIGHT = 1;
export const DDUPDATEMETADATA_NOHIGHLIGHT = 2;
export const DDCREATELINK_HIGHLIGHT = 1;
export const DDCREATELINK_NOHIGHLIGHT = 2;
export const DDWARNING_HIGHLIGHT = 1;
export const DDWARNING_NOHIGHLIGHT = 2;
export const DDNONE_HIGHLIGHT = 1;
export const DDNONE_NOHIGHLIGHT = 2;
export const EP_EDITTEXT = 1;
export const EP_CARET = 2;
export const EP_BACKGROUND = 3;
export const EP_PASSWORD = 4;
export const EP_BACKGROUNDWITHBORDER = 5;
export const EP_EDITBORDER_NOSCROLL = 6;
export const EP_EDITBORDER_HSCROLL = 7;
export const EP_EDITBORDER_VSCROLL = 8;
export const EP_EDITBORDER_HVSCROLL = 9;
export const ETS_NORMAL = 1;
export const ETS_HOT = 2;
export const ETS_SELECTED = 3;
export const ETS_DISABLED = 4;
export const ETS_FOCUSED = 5;
export const ETS_READONLY = 6;
export const ETS_ASSIST = 7;
export const ETS_CUEBANNER = 8;
export const EBS_NORMAL = 1;
export const EBS_HOT = 2;
export const EBS_DISABLED = 3;
export const EBS_FOCUSED = 4;
export const EBS_READONLY = 5;
export const EBS_ASSIST = 6;
export const EBWBS_NORMAL = 1;
export const EBWBS_HOT = 2;
export const EBWBS_DISABLED = 3;
export const EBWBS_FOCUSED = 4;
export const EPSN_NORMAL = 1;
export const EPSN_HOT = 2;
export const EPSN_FOCUSED = 3;
export const EPSN_DISABLED = 4;
export const EPSH_NORMAL = 1;
export const EPSH_HOT = 2;
export const EPSH_FOCUSED = 3;
export const EPSH_DISABLED = 4;
export const EPSV_NORMAL = 1;
export const EPSV_HOT = 2;
export const EPSV_FOCUSED = 3;
export const EPSV_DISABLED = 4;
export const EPSHV_NORMAL = 1;
export const EPSHV_HOT = 2;
export const EPSHV_FOCUSED = 3;
export const EPSHV_DISABLED = 4;
export const EBP_HEADERBACKGROUND = 1;
export const EBP_HEADERCLOSE = 2;
export const EBP_HEADERPIN = 3;
export const EBP_IEBARMENU = 4;
export const EBP_NORMALGROUPBACKGROUND = 5;
export const EBP_NORMALGROUPCOLLAPSE = 6;
export const EBP_NORMALGROUPEXPAND = 7;
export const EBP_NORMALGROUPHEAD = 8;
export const EBP_SPECIALGROUPBACKGROUND = 9;
export const EBP_SPECIALGROUPCOLLAPSE = 10;
export const EBP_SPECIALGROUPEXPAND = 11;
export const EBP_SPECIALGROUPHEAD = 12;
export const EBHC_NORMAL = 1;
export const EBHC_HOT = 2;
export const EBHC_PRESSED = 3;
export const EBHP_NORMAL = 1;
export const EBHP_HOT = 2;
export const EBHP_PRESSED = 3;
export const EBHP_SELECTEDNORMAL = 4;
export const EBHP_SELECTEDHOT = 5;
export const EBHP_SELECTEDPRESSED = 6;
export const EBM_NORMAL = 1;
export const EBM_HOT = 2;
export const EBM_PRESSED = 3;
export const EBNGC_NORMAL = 1;
export const EBNGC_HOT = 2;
export const EBNGC_PRESSED = 3;
export const EBNGE_NORMAL = 1;
export const EBNGE_HOT = 2;
export const EBNGE_PRESSED = 3;
export const EBSGC_NORMAL = 1;
export const EBSGC_HOT = 2;
export const EBSGC_PRESSED = 3;
export const EBSGE_NORMAL = 1;
export const EBSGE_HOT = 2;
export const EBSGE_PRESSED = 3;
export const FLYOUT_HEADER = 1;
export const FLYOUT_BODY = 2;
export const FLYOUT_LABEL = 3;
export const FLYOUT_LINK = 4;
export const FLYOUT_DIVIDER = 5;
export const FLYOUT_WINDOW = 6;
export const FLYOUT_LINKAREA = 7;
export const FLYOUT_LINKHEADER = 8;
export const FLS_NORMAL = 1;
export const FLS_SELECTED = 2;
export const FLS_EMPHASIZED = 3;
export const FLS_DISABLED = 4;
export const FLYOUTLINK_NORMAL = 1;
export const FLYOUTLINK_HOVER = 2;
export const FBS_NORMAL = 1;
export const FBS_EMPHASIZED = 2;
export const FLH_NORMAL = 1;
export const FLH_HOVER = 2;
export const HP_HEADERITEM = 1;
export const HP_HEADERITEMLEFT = 2;
export const HP_HEADERITEMRIGHT = 3;
export const HP_HEADERSORTARROW = 4;
export const HP_HEADERDROPDOWN = 5;
export const HP_HEADERDROPDOWNFILTER = 6;
export const HP_HEADEROVERFLOW = 7;
export const HBG_DETAILS = 1;
export const HBG_ICON = 2;
export const HIS_NORMAL = 1;
export const HIS_HOT = 2;
export const HIS_PRESSED = 3;
export const HIS_SORTEDNORMAL = 4;
export const HIS_SORTEDHOT = 5;
export const HIS_SORTEDPRESSED = 6;
export const HIS_ICONNORMAL = 7;
export const HIS_ICONHOT = 8;
export const HIS_ICONPRESSED = 9;
export const HIS_ICONSORTEDNORMAL = 10;
export const HIS_ICONSORTEDHOT = 11;
export const HIS_ICONSORTEDPRESSED = 12;
export const HILS_NORMAL = 1;
export const HILS_HOT = 2;
export const HILS_PRESSED = 3;
export const HIRS_NORMAL = 1;
export const HIRS_HOT = 2;
export const HIRS_PRESSED = 3;
export const HSAS_SORTEDUP = 1;
export const HSAS_SORTEDDOWN = 2;
export const HDDS_NORMAL = 1;
export const HDDS_SOFTHOT = 2;
export const HDDS_HOT = 3;
export const HDDFS_NORMAL = 1;
export const HDDFS_SOFTHOT = 2;
export const HDDFS_HOT = 3;
export const HOFS_NORMAL = 1;
export const HOFS_HOT = 2;
export const LBCP_BORDER_HSCROLL = 1;
export const LBCP_BORDER_HVSCROLL = 2;
export const LBCP_BORDER_NOSCROLL = 3;
export const LBCP_BORDER_VSCROLL = 4;
export const LBCP_ITEM = 5;
export const LBPSH_NORMAL = 1;
export const LBPSH_FOCUSED = 2;
export const LBPSH_HOT = 3;
export const LBPSH_DISABLED = 4;
export const LBPSHV_NORMAL = 1;
export const LBPSHV_FOCUSED = 2;
export const LBPSHV_HOT = 3;
export const LBPSHV_DISABLED = 4;
export const LBPSN_NORMAL = 1;
export const LBPSN_FOCUSED = 2;
export const LBPSN_HOT = 3;
export const LBPSN_DISABLED = 4;
export const LBPSV_NORMAL = 1;
export const LBPSV_FOCUSED = 2;
export const LBPSV_HOT = 3;
export const LBPSV_DISABLED = 4;
export const LBPSI_HOT = 1;
export const LBPSI_HOTSELECTED = 2;
export const LBPSI_SELECTED = 3;
export const LBPSI_SELECTEDNOTFOCUS = 4;
export const LVP_LISTITEM = 1;
export const LVP_LISTGROUP = 2;
export const LVP_LISTDETAIL = 3;
export const LVP_LISTSORTEDDETAIL = 4;
export const LVP_EMPTYTEXT = 5;
export const LVP_GROUPHEADER = 6;
export const LVP_GROUPHEADERLINE = 7;
export const LVP_EXPANDBUTTON = 8;
export const LVP_COLLAPSEBUTTON = 9;
export const LVP_COLUMNDETAIL = 10;
export const LISS_NORMAL = 1;
export const LISS_HOT = 2;
export const LISS_SELECTED = 3;
export const LISS_DISABLED = 4;
export const LISS_SELECTEDNOTFOCUS = 5;
export const LISS_HOTSELECTED = 6;
export const LVGH_OPEN = 1;
export const LVGH_OPENHOT = 2;
export const LVGH_OPENSELECTED = 3;
export const LVGH_OPENSELECTEDHOT = 4;
export const LVGH_OPENSELECTEDNOTFOCUSED = 5;
export const LVGH_OPENSELECTEDNOTFOCUSEDHOT = 6;
export const LVGH_OPENMIXEDSELECTION = 7;
export const LVGH_OPENMIXEDSELECTIONHOT = 8;
export const LVGH_CLOSE = 9;
export const LVGH_CLOSEHOT = 10;
export const LVGH_CLOSESELECTED = 11;
export const LVGH_CLOSESELECTEDHOT = 12;
export const LVGH_CLOSESELECTEDNOTFOCUSED = 13;
export const LVGH_CLOSESELECTEDNOTFOCUSEDHOT = 14;
export const LVGH_CLOSEMIXEDSELECTION = 15;
export const LVGH_CLOSEMIXEDSELECTIONHOT = 16;
export const LVGHL_OPEN = 1;
export const LVGHL_OPENHOT = 2;
export const LVGHL_OPENSELECTED = 3;
export const LVGHL_OPENSELECTEDHOT = 4;
export const LVGHL_OPENSELECTEDNOTFOCUSED = 5;
export const LVGHL_OPENSELECTEDNOTFOCUSEDHOT = 6;
export const LVGHL_OPENMIXEDSELECTION = 7;
export const LVGHL_OPENMIXEDSELECTIONHOT = 8;
export const LVGHL_CLOSE = 9;
export const LVGHL_CLOSEHOT = 10;
export const LVGHL_CLOSESELECTED = 11;
export const LVGHL_CLOSESELECTEDHOT = 12;
export const LVGHL_CLOSESELECTEDNOTFOCUSED = 13;
export const LVGHL_CLOSESELECTEDNOTFOCUSEDHOT = 14;
export const LVGHL_CLOSEMIXEDSELECTION = 15;
export const LVGHL_CLOSEMIXEDSELECTIONHOT = 16;
export const LVEB_NORMAL = 1;
export const LVEB_HOVER = 2;
export const LVEB_PUSHED = 3;
export const LVCB_NORMAL = 1;
export const LVCB_HOVER = 2;
export const LVCB_PUSHED = 3;
export const MENU_MENUITEM_TMSCHEMA = 1;
export const MENU_MENUDROPDOWN_TMSCHEMA = 2;
export const MENU_MENUBARITEM_TMSCHEMA = 3;
export const MENU_MENUBARDROPDOWN_TMSCHEMA = 4;
export const MENU_CHEVRON_TMSCHEMA = 5;
export const MENU_SEPARATOR_TMSCHEMA = 6;
export const MENU_BARBACKGROUND = 7;
export const MENU_BARITEM = 8;
export const MENU_POPUPBACKGROUND = 9;
export const MENU_POPUPBORDERS = 10;
export const MENU_POPUPCHECK = 11;
export const MENU_POPUPCHECKBACKGROUND = 12;
export const MENU_POPUPGUTTER = 13;
export const MENU_POPUPITEM = 14;
export const MENU_POPUPSEPARATOR = 15;
export const MENU_POPUPSUBMENU = 16;
export const MENU_SYSTEMCLOSE = 17;
export const MENU_SYSTEMMAXIMIZE = 18;
export const MENU_SYSTEMMINIMIZE = 19;
export const MENU_SYSTEMRESTORE = 20;
export const MB_ACTIVE = 1;
export const MB_INACTIVE = 2;
export const MBI_NORMAL = 1;
export const MBI_HOT = 2;
export const MBI_PUSHED = 3;
export const MBI_DISABLED = 4;
export const MBI_DISABLEDHOT = 5;
export const MBI_DISABLEDPUSHED = 6;
export const MC_CHECKMARKNORMAL = 1;
export const MC_CHECKMARKDISABLED = 2;
export const MC_BULLETNORMAL = 3;
export const MC_BULLETDISABLED = 4;
export const MCB_DISABLED = 1;
export const MCB_NORMAL = 2;
export const MCB_BITMAP = 3;
export const MPI_NORMAL = 1;
export const MPI_HOT = 2;
export const MPI_DISABLED = 3;
export const MPI_DISABLEDHOT = 4;
export const MSM_NORMAL = 1;
export const MSM_DISABLED = 2;
export const MSYSC_NORMAL = 1;
export const MSYSC_DISABLED = 2;
export const MSYSMX_NORMAL = 1;
export const MSYSMX_DISABLED = 2;
export const MSYSMN_NORMAL = 1;
export const MSYSMN_DISABLED = 2;
export const MSYSR_NORMAL = 1;
export const MSYSR_DISABLED = 2;
export const NAV_BACKBUTTON = 1;
export const NAV_FORWARDBUTTON = 2;
export const NAV_MENUBUTTON = 3;
export const NAV_BB_NORMAL = 1;
export const NAV_BB_HOT = 2;
export const NAV_BB_PRESSED = 3;
export const NAV_BB_DISABLED = 4;
export const NAV_FB_NORMAL = 1;
export const NAV_FB_HOT = 2;
export const NAV_FB_PRESSED = 3;
export const NAV_FB_DISABLED = 4;
export const NAV_MB_NORMAL = 1;
export const NAV_MB_HOT = 2;
export const NAV_MB_PRESSED = 3;
export const NAV_MB_DISABLED = 4;
export const PP_BAR = 1;
export const PP_BARVERT = 2;
export const PP_CHUNK = 3;
export const PP_CHUNKVERT = 4;
export const PP_FILL = 5;
export const PP_FILLVERT = 6;
export const PP_PULSEOVERLAY = 7;
export const PP_MOVEOVERLAY = 8;
export const PP_PULSEOVERLAYVERT = 9;
export const PP_MOVEOVERLAYVERT = 10;
export const PP_TRANSPARENTBAR = 11;
export const PP_TRANSPARENTBARVERT = 12;
export const PBBS_NORMAL = 1;
export const PBBS_PARTIAL = 2;
export const PBBVS_NORMAL = 1;
export const PBBVS_PARTIAL = 2;
export const PBFS_NORMAL = 1;
export const PBFS_ERROR = 2;
export const PBFS_PAUSED = 3;
export const PBFS_PARTIAL = 4;
export const PBFVS_NORMAL = 1;
export const PBFVS_ERROR = 2;
export const PBFVS_PAUSED = 3;
export const PBFVS_PARTIAL = 4;
export const RP_GRIPPER = 1;
export const RP_GRIPPERVERT = 2;
export const RP_BAND = 3;
export const RP_CHEVRON = 4;
export const RP_CHEVRONVERT = 5;
export const RP_BACKGROUND = 6;
export const RP_SPLITTER = 7;
export const RP_SPLITTERVERT = 8;
export const CHEVS_NORMAL = 1;
export const CHEVS_HOT = 2;
export const CHEVS_PRESSED = 3;
export const CHEVSV_NORMAL = 1;
export const CHEVSV_HOT = 2;
export const CHEVSV_PRESSED = 3;
export const SPLITS_NORMAL = 1;
export const SPLITS_HOT = 2;
export const SPLITS_PRESSED = 3;
export const SPLITSV_NORMAL = 1;
export const SPLITSV_HOT = 2;
export const SPLITSV_PRESSED = 3;
export const SBP_ARROWBTN = 1;
export const SBP_THUMBBTNHORZ = 2;
export const SBP_THUMBBTNVERT = 3;
export const SBP_LOWERTRACKHORZ = 4;
export const SBP_UPPERTRACKHORZ = 5;
export const SBP_LOWERTRACKVERT = 6;
export const SBP_UPPERTRACKVERT = 7;
export const SBP_GRIPPERHORZ = 8;
export const SBP_GRIPPERVERT = 9;
export const SBP_SIZEBOX = 10;
export const SBP_SIZEBOXBKGND = 11;
export const ABS_UPNORMAL = 1;
export const ABS_UPHOT = 2;
export const ABS_UPPRESSED = 3;
export const ABS_UPDISABLED = 4;
export const ABS_DOWNNORMAL = 5;
export const ABS_DOWNHOT = 6;
export const ABS_DOWNPRESSED = 7;
export const ABS_DOWNDISABLED = 8;
export const ABS_LEFTNORMAL = 9;
export const ABS_LEFTHOT = 10;
export const ABS_LEFTPRESSED = 11;
export const ABS_LEFTDISABLED = 12;
export const ABS_RIGHTNORMAL = 13;
export const ABS_RIGHTHOT = 14;
export const ABS_RIGHTPRESSED = 15;
export const ABS_RIGHTDISABLED = 16;
export const ABS_UPHOVER = 17;
export const ABS_DOWNHOVER = 18;
export const ABS_LEFTHOVER = 19;
export const ABS_RIGHTHOVER = 20;
export const SCRBS_NORMAL = 1;
export const SCRBS_HOT = 2;
export const SCRBS_PRESSED = 3;
export const SCRBS_DISABLED = 4;
export const SCRBS_HOVER = 5;
export const SZB_RIGHTALIGN = 1;
export const SZB_LEFTALIGN = 2;
export const SZB_TOPRIGHTALIGN = 3;
export const SZB_TOPLEFTALIGN = 4;
export const SZB_HALFBOTTOMRIGHTALIGN = 5;
export const SZB_HALFBOTTOMLEFTALIGN = 6;
export const SZB_HALFTOPRIGHTALIGN = 7;
export const SZB_HALFTOPLEFTALIGN = 8;
export const SPNP_UP = 1;
export const SPNP_DOWN = 2;
export const SPNP_UPHORZ = 3;
export const SPNP_DOWNHORZ = 4;
export const UPS_NORMAL = 1;
export const UPS_HOT = 2;
export const UPS_PRESSED = 3;
export const UPS_DISABLED = 4;
export const DNS_NORMAL = 1;
export const DNS_HOT = 2;
export const DNS_PRESSED = 3;
export const DNS_DISABLED = 4;
export const UPHZS_NORMAL = 1;
export const UPHZS_HOT = 2;
export const UPHZS_PRESSED = 3;
export const UPHZS_DISABLED = 4;
export const DNHZS_NORMAL = 1;
export const DNHZS_HOT = 2;
export const DNHZS_PRESSED = 3;
export const DNHZS_DISABLED = 4;
export const SP_PANE = 1;
export const SP_GRIPPERPANE = 2;
export const SP_GRIPPER = 3;
export const TABP_TABITEM = 1;
export const TABP_TABITEMLEFTEDGE = 2;
export const TABP_TABITEMRIGHTEDGE = 3;
export const TABP_TABITEMBOTHEDGE = 4;
export const TABP_TOPTABITEM = 5;
export const TABP_TOPTABITEMLEFTEDGE = 6;
export const TABP_TOPTABITEMRIGHTEDGE = 7;
export const TABP_TOPTABITEMBOTHEDGE = 8;
export const TABP_PANE = 9;
export const TABP_BODY = 10;
export const TABP_AEROWIZARDBODY = 11;
export const TIS_NORMAL = 1;
export const TIS_HOT = 2;
export const TIS_SELECTED = 3;
export const TIS_DISABLED = 4;
export const TIS_FOCUSED = 5;
export const TILES_NORMAL = 1;
export const TILES_HOT = 2;
export const TILES_SELECTED = 3;
export const TILES_DISABLED = 4;
export const TILES_FOCUSED = 5;
export const TIRES_NORMAL = 1;
export const TIRES_HOT = 2;
export const TIRES_SELECTED = 3;
export const TIRES_DISABLED = 4;
export const TIRES_FOCUSED = 5;
export const TIBES_NORMAL = 1;
export const TIBES_HOT = 2;
export const TIBES_SELECTED = 3;
export const TIBES_DISABLED = 4;
export const TIBES_FOCUSED = 5;
export const TTIS_NORMAL = 1;
export const TTIS_HOT = 2;
export const TTIS_SELECTED = 3;
export const TTIS_DISABLED = 4;
export const TTIS_FOCUSED = 5;
export const TTILES_NORMAL = 1;
export const TTILES_HOT = 2;
export const TTILES_SELECTED = 3;
export const TTILES_DISABLED = 4;
export const TTILES_FOCUSED = 5;
export const TTIRES_NORMAL = 1;
export const TTIRES_HOT = 2;
export const TTIRES_SELECTED = 3;
export const TTIRES_DISABLED = 4;
export const TTIRES_FOCUSED = 5;
export const TTIBES_NORMAL = 1;
export const TTIBES_HOT = 2;
export const TTIBES_SELECTED = 3;
export const TTIBES_DISABLED = 4;
export const TTIBES_FOCUSED = 5;
export const TDLG_PRIMARYPANEL = 1;
export const TDLG_MAININSTRUCTIONPANE = 2;
export const TDLG_MAINICON = 3;
export const TDLG_CONTENTPANE = 4;
export const TDLG_CONTENTICON = 5;
export const TDLG_EXPANDEDCONTENT = 6;
export const TDLG_COMMANDLINKPANE = 7;
export const TDLG_SECONDARYPANEL = 8;
export const TDLG_CONTROLPANE = 9;
export const TDLG_BUTTONSECTION = 10;
export const TDLG_BUTTONWRAPPER = 11;
export const TDLG_EXPANDOTEXT = 12;
export const TDLG_EXPANDOBUTTON = 13;
export const TDLG_VERIFICATIONTEXT = 14;
export const TDLG_FOOTNOTEPANE = 15;
export const TDLG_FOOTNOTEAREA = 16;
export const TDLG_FOOTNOTESEPARATOR = 17;
export const TDLG_EXPANDEDFOOTERAREA = 18;
export const TDLG_PROGRESSBAR = 19;
export const TDLG_IMAGEALIGNMENT = 20;
export const TDLG_RADIOBUTTONPANE = 21;
export const TDLGCPS_STANDALONE = 1;
export const TDLGEBS_NORMAL = 1;
export const TDLGEBS_HOVER = 2;
export const TDLGEBS_PRESSED = 3;
export const TDLGEBS_EXPANDEDNORMAL = 4;
export const TDLGEBS_EXPANDEDHOVER = 5;
export const TDLGEBS_EXPANDEDPRESSED = 6;
export const TDLGEBS_NORMALDISABLED = 7;
export const TDLGEBS_EXPANDEDDISABLED = 8;
export const TEXT_MAININSTRUCTION = 1;
export const TEXT_INSTRUCTION = 2;
export const TEXT_BODYTITLE = 3;
export const TEXT_BODYTEXT = 4;
export const TEXT_SECONDARYTEXT = 5;
export const TEXT_HYPERLINKTEXT = 6;
export const TEXT_EXPANDED = 7;
export const TEXT_LABEL = 8;
export const TEXT_CONTROLLABEL = 9;
export const TS_HYPERLINK_NORMAL = 1;
export const TS_HYPERLINK_HOT = 2;
export const TS_HYPERLINK_PRESSED = 3;
export const TS_HYPERLINK_DISABLED = 4;
export const TS_CONTROLLABEL_NORMAL = 1;
export const TS_CONTROLLABEL_DISABLED = 2;
export const TP_BUTTON = 1;
export const TP_DROPDOWNBUTTON = 2;
export const TP_SPLITBUTTON = 3;
export const TP_SPLITBUTTONDROPDOWN = 4;
export const TP_SEPARATOR = 5;
export const TP_SEPARATORVERT = 6;
export const TP_DROPDOWNBUTTONGLYPH = 7;
export const TS_NORMAL = 1;
export const TS_HOT = 2;
export const TS_PRESSED = 3;
export const TS_DISABLED = 4;
export const TS_CHECKED = 5;
export const TS_HOTCHECKED = 6;
export const TS_NEARHOT = 7;
export const TS_OTHERSIDEHOT = 8;
export const TTP_STANDARD = 1;
export const TTP_STANDARDTITLE = 2;
export const TTP_BALLOON = 3;
export const TTP_BALLOONTITLE = 4;
export const TTP_CLOSE = 5;
export const TTP_BALLOONSTEM = 6;
export const TTP_WRENCH = 7;
export const TTCS_NORMAL = 1;
export const TTCS_HOT = 2;
export const TTCS_PRESSED = 3;
export const TTSS_NORMAL = 1;
export const TTSS_LINK = 2;
export const TTBS_NORMAL = 1;
export const TTBS_LINK = 2;
export const TTBSS_POINTINGUPLEFTWALL = 1;
export const TTBSS_POINTINGUPCENTERED = 2;
export const TTBSS_POINTINGUPRIGHTWALL = 3;
export const TTBSS_POINTINGDOWNRIGHTWALL = 4;
export const TTBSS_POINTINGDOWNCENTERED = 5;
export const TTBSS_POINTINGDOWNLEFTWALL = 6;
export const TTWS_NORMAL = 1;
export const TTWS_HOT = 2;
export const TTWS_PRESSED = 3;
export const TKP_TRACK = 1;
export const TKP_TRACKVERT = 2;
export const TKP_THUMB = 3;
export const TKP_THUMBBOTTOM = 4;
export const TKP_THUMBTOP = 5;
export const TKP_THUMBVERT = 6;
export const TKP_THUMBLEFT = 7;
export const TKP_THUMBRIGHT = 8;
export const TKP_TICS = 9;
export const TKP_TICSVERT = 10;
export const TKS_NORMAL = 1;
export const TRS_NORMAL = 1;
export const TRVS_NORMAL = 1;
export const TUS_NORMAL = 1;
export const TUS_HOT = 2;
export const TUS_PRESSED = 3;
export const TUS_FOCUSED = 4;
export const TUS_DISABLED = 5;
export const TUBS_NORMAL = 1;
export const TUBS_HOT = 2;
export const TUBS_PRESSED = 3;
export const TUBS_FOCUSED = 4;
export const TUBS_DISABLED = 5;
export const TUTS_NORMAL = 1;
export const TUTS_HOT = 2;
export const TUTS_PRESSED = 3;
export const TUTS_FOCUSED = 4;
export const TUTS_DISABLED = 5;
export const TUVS_NORMAL = 1;
export const TUVS_HOT = 2;
export const TUVS_PRESSED = 3;
export const TUVS_FOCUSED = 4;
export const TUVS_DISABLED = 5;
export const TUVLS_NORMAL = 1;
export const TUVLS_HOT = 2;
export const TUVLS_PRESSED = 3;
export const TUVLS_FOCUSED = 4;
export const TUVLS_DISABLED = 5;
export const TUVRS_NORMAL = 1;
export const TUVRS_HOT = 2;
export const TUVRS_PRESSED = 3;
export const TUVRS_FOCUSED = 4;
export const TUVRS_DISABLED = 5;
export const TSS_NORMAL = 1;
export const TSVS_NORMAL = 1;
export const TVP_TREEITEM = 1;
export const TVP_GLYPH = 2;
export const TVP_BRANCH = 3;
export const TVP_HOTGLYPH = 4;
export const TREIS_NORMAL = 1;
export const TREIS_HOT = 2;
export const TREIS_SELECTED = 3;
export const TREIS_DISABLED = 4;
export const TREIS_SELECTEDNOTFOCUS = 5;
export const TREIS_HOTSELECTED = 6;
export const GLPS_CLOSED = 1;
export const GLPS_OPENED = 2;
export const HGLPS_CLOSED = 1;
export const HGLPS_OPENED = 2;
export const UTP_STROKEBACKGROUND = 1;
export const UTP_HOVERBACKGROUND = 2;
export const UTS_NORMAL = 1;
export const UTS_HOT = 2;
export const UTS_PRESSED = 3;
export const TSGP_GRIPPER = 1;
export const TSGS_NORMAL = 1;
export const TSGS_CENTERED = 2;
export const WP_CAPTION = 1;
export const WP_SMALLCAPTION = 2;
export const WP_MINCAPTION = 3;
export const WP_SMALLMINCAPTION = 4;
export const WP_MAXCAPTION = 5;
export const WP_SMALLMAXCAPTION = 6;
export const WP_FRAMELEFT = 7;
export const WP_FRAMERIGHT = 8;
export const WP_FRAMEBOTTOM = 9;
export const WP_SMALLFRAMELEFT = 10;
export const WP_SMALLFRAMERIGHT = 11;
export const WP_SMALLFRAMEBOTTOM = 12;
export const WP_SYSBUTTON = 13;
export const WP_MDISYSBUTTON = 14;
export const WP_MINBUTTON = 15;
export const WP_MDIMINBUTTON = 16;
export const WP_MAXBUTTON = 17;
export const WP_CLOSEBUTTON = 18;
export const WP_SMALLCLOSEBUTTON = 19;
export const WP_MDICLOSEBUTTON = 20;
export const WP_RESTOREBUTTON = 21;
export const WP_MDIRESTOREBUTTON = 22;
export const WP_HELPBUTTON = 23;
export const WP_MDIHELPBUTTON = 24;
export const WP_HORZSCROLL = 25;
export const WP_HORZTHUMB = 26;
export const WP_VERTSCROLL = 27;
export const WP_VERTTHUMB = 28;
export const WP_DIALOG = 29;
export const WP_CAPTIONSIZINGTEMPLATE = 30;
export const WP_SMALLCAPTIONSIZINGTEMPLATE = 31;
export const WP_FRAMELEFTSIZINGTEMPLATE = 32;
export const WP_SMALLFRAMELEFTSIZINGTEMPLATE = 33;
export const WP_FRAMERIGHTSIZINGTEMPLATE = 34;
export const WP_SMALLFRAMERIGHTSIZINGTEMPLATE = 35;
export const WP_FRAMEBOTTOMSIZINGTEMPLATE = 36;
export const WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE = 37;
export const WP_FRAME = 38;
export const WP_BORDER = 39;
export const FS_ACTIVE = 1;
export const FS_INACTIVE = 2;
export const CS_ACTIVE = 1;
export const CS_INACTIVE = 2;
export const CS_DISABLED = 3;
export const MXCS_ACTIVE = 1;
export const MXCS_INACTIVE = 2;
export const MXCS_DISABLED = 3;
export const MNCS_ACTIVE = 1;
export const MNCS_INACTIVE = 2;
export const MNCS_DISABLED = 3;
export const HSS_NORMAL = 1;
export const HSS_HOT = 2;
export const HSS_PUSHED = 3;
export const HSS_DISABLED = 4;
export const HTS_NORMAL = 1;
export const HTS_HOT = 2;
export const HTS_PUSHED = 3;
export const HTS_DISABLED = 4;
export const VSS_NORMAL = 1;
export const VSS_HOT = 2;
export const VSS_PUSHED = 3;
export const VSS_DISABLED = 4;
export const VTS_NORMAL = 1;
export const VTS_HOT = 2;
export const VTS_PUSHED = 3;
export const VTS_DISABLED = 4;
export const SBS_NORMAL = 1;
export const SBS_HOT = 2;
export const SBS_PUSHED = 3;
export const SBS_DISABLED = 4;
export const MINBS_NORMAL = 1;
export const MINBS_HOT = 2;
export const MINBS_PUSHED = 3;
export const MINBS_DISABLED = 4;
export const MAXBS_NORMAL = 1;
export const MAXBS_HOT = 2;
export const MAXBS_PUSHED = 3;
export const MAXBS_DISABLED = 4;
export const RBS_NORMAL = 1;
export const RBS_HOT = 2;
export const RBS_PUSHED = 3;
export const RBS_DISABLED = 4;
export const HBS_NORMAL = 1;
export const HBS_HOT = 2;
export const HBS_PUSHED = 3;
export const HBS_DISABLED = 4;
export const CBS_NORMAL = 1;
export const CBS_HOT = 2;
export const CBS_PUSHED = 3;
export const CBS_DISABLED = 4;
export const SCBS_NORMAL = 1;
export const SCBS_HOT = 2;
export const SCBS_PUSHED = 3;
export const SCBS_DISABLED = 4;
export const FRB_ACTIVE = 1;
export const FRB_INACTIVE = 2;
export const FRL_ACTIVE = 1;
export const FRL_INACTIVE = 2;
export const FRR_ACTIVE = 1;
export const FRR_INACTIVE = 2;
export const SCS_ACTIVE = 1;
export const SCS_INACTIVE = 2;
export const SCS_DISABLED = 3;
export const SFRB_ACTIVE = 1;
export const SFRB_INACTIVE = 2;
export const SFRL_ACTIVE = 1;
export const SFRL_INACTIVE = 2;
export const SFRR_ACTIVE = 1;
export const SFRR_INACTIVE = 2;
export const MDCL_NORMAL = 1;
export const MDCL_HOT = 2;
export const MDCL_PUSHED = 3;
export const MDCL_DISABLED = 4;
export const MDMI_NORMAL = 1;
export const MDMI_HOT = 2;
export const MDMI_PUSHED = 3;
export const MDMI_DISABLED = 4;
export const MDRE_NORMAL = 1;
export const MDRE_HOT = 2;
export const MDRE_PUSHED = 3;
export const MDRE_DISABLED = 4;
export const BT_IMAGEFILE = 0;
export const BT_BORDERFILL = 1;
export const BT_NONE = 2;
export const IL_VERTICAL = 0;
export const IL_HORIZONTAL = 1;
export const BT_RECT = 0;
export const BT_ROUNDRECT = 1;
export const BT_ELLIPSE = 2;
export const FT_SOLID = 0;
export const FT_VERTGRADIENT = 1;
export const FT_HORZGRADIENT = 2;
export const FT_RADIALGRADIENT = 3;
export const FT_TILEIMAGE = 4;
export const ST_TRUESIZE = 0;
export const ST_STRETCH = 1;
export const ST_TILE = 2;
export const HA_LEFT = 0;
export const HA_CENTER = 1;
export const HA_RIGHT = 2;
export const CA_LEFT = 0;
export const CA_CENTER = 1;
export const CA_RIGHT = 2;
export const VA_TOP = 0;
export const VA_CENTER = 1;
export const VA_BOTTOM = 2;
export const OT_TOPLEFT = 0;
export const OT_TOPRIGHT = 1;
export const OT_TOPMIDDLE = 2;
export const OT_BOTTOMLEFT = 3;
export const OT_BOTTOMRIGHT = 4;
export const OT_BOTTOMMIDDLE = 5;
export const OT_MIDDLELEFT = 6;
export const OT_MIDDLERIGHT = 7;
export const OT_LEFTOFCAPTION = 8;
export const OT_RIGHTOFCAPTION = 9;
export const OT_LEFTOFLASTBUTTON = 10;
export const OT_RIGHTOFLASTBUTTON = 11;
export const OT_ABOVELASTBUTTON = 12;
export const OT_BELOWLASTBUTTON = 13;
export const ICE_NONE = 0;
export const ICE_GLOW = 1;
export const ICE_SHADOW = 2;
export const ICE_PULSE = 3;
export const ICE_ALPHA = 4;
export const TST_NONE = 0;
export const TST_SINGLE = 1;
export const TST_CONTINUOUS = 2;
export const GT_NONE = 0;
export const GT_IMAGEGLYPH = 1;
export const GT_FONTGLYPH = 2;
export const IST_NONE = 0;
export const IST_SIZE = 1;
export const IST_DPI = 2;
export const TSST_NONE = 0;
export const TSST_SIZE = 1;
export const TSST_DPI = 2;
export const GFST_NONE = 0;
export const GFST_SIZE = 1;
export const GFST_DPI = 2;
export const LP_HYPERLINK = 1;
export const HLS_NORMALTEXT = 1;
export const HLS_LINKTEXT = 2;
export const EMP_MARKUPTEXT = 1;
export const EMT_NORMALTEXT = 1;
export const EMT_LINKTEXT = 2;
export const STAT_TEXT = 1;
export const PGRP_UP = 1;
export const PGRP_DOWN = 2;
export const PGRP_UPHORZ = 3;
export const PGRP_DOWNHORZ = 4;
export const MC_BACKGROUND = 1;
export const MC_BORDERS = 2;
export const MC_GRIDBACKGROUND = 3;
export const MC_COLHEADERSPLITTER = 4;
export const MC_GRIDCELLBACKGROUND = 5;
export const MC_GRIDCELL = 6;
export const MC_GRIDCELLUPPER = 7;
export const MC_TRAILINGGRIDCELL = 8;
export const MC_TRAILINGGRIDCELLUPPER = 9;
export const MC_NAVNEXT = 10;
export const MC_NAVPREV = 11;
export const MCGCB_SELECTED = 1;
export const MCGCB_HOT = 2;
export const MCGCB_SELECTEDHOT = 3;
export const MCGCB_SELECTEDNOTFOCUSED = 4;
export const MCGCB_TODAY = 5;
export const MCGCB_TODAYSELECTED = 6;
export const MCGC_HOT = 1;
export const MCGC_HASSTATE = 2;
export const MCGC_HASSTATEHOT = 3;
export const MCGC_TODAY = 4;
export const MCGC_TODAYSELECTED = 5;
export const MCGC_SELECTED = 6;
export const MCGC_SELECTEDHOT = 7;
export const MCGCU_HOT = 1;
export const MCGCU_HASSTATE = 2;
export const MCGCU_HASSTATEHOT = 3;
export const MCGCU_SELECTED = 4;
export const MCGCU_SELECTEDHOT = 5;
export const MCTGC_HOT = 1;
export const MCTGC_HASSTATE = 2;
export const MCTGC_HASSTATEHOT = 3;
export const MCTGC_TODAY = 4;
export const MCTGC_TODAYSELECTED = 5;
export const MCTGC_SELECTED = 6;
export const MCTGC_SELECTEDHOT = 7;
export const MCTGCU_HOT = 1;
export const MCTGCU_HASSTATE = 2;
export const MCTGCU_HASSTATEHOT = 3;
export const MCTGCU_SELECTED = 4;
export const MCTGCU_SELECTEDHOT = 5;
export const MCNN_NORMAL = 1;
export const MCNN_HOT = 2;
export const MCNN_PRESSED = 3;
export const MCNN_DISABLED = 4;
export const MCNP_NORMAL = 1;
export const MCNP_HOT = 2;
export const MCNP_PRESSED = 3;
export const MCNP_DISABLED = 4;
export const CLP_TIME = 1;
export const CLS_NORMAL = 1;
export const CLS_HOT = 2;
export const CLS_PRESSED = 3;
export const TNP_BACKGROUND = 1;
export const TNP_ANIMBACKGROUND = 2;
export const TBP_BACKGROUNDBOTTOM = 1;
export const TBP_BACKGROUNDRIGHT = 2;
export const TBP_BACKGROUNDTOP = 3;
export const TBP_BACKGROUNDLEFT = 4;
export const TBP_SIZINGBARBOTTOM = 5;
export const TBP_SIZINGBARRIGHT = 6;
export const TBP_SIZINGBARTOP = 7;
export const TBP_SIZINGBARLEFT = 8;
export const TDP_GROUPCOUNT = 1;
export const TDP_FLASHBUTTON = 2;
export const TDP_FLASHBUTTONGROUPMENU = 3;
export const SPP_USERPANE = 1;
export const SPP_MOREPROGRAMS = 2;
export const SPP_MOREPROGRAMSARROW = 3;
export const SPP_PROGLIST = 4;
export const SPP_PROGLISTSEPARATOR = 5;
export const SPP_PLACESLIST = 6;
export const SPP_PLACESLISTSEPARATOR = 7;
export const SPP_LOGOFF = 8;
export const SPP_LOGOFFBUTTONS = 9;
export const SPP_USERPICTURE = 10;
export const SPP_PREVIEW = 11;
export const SPP_MOREPROGRAMSTAB = 12;
export const SPP_NSCHOST = 13;
export const SPP_SOFTWAREEXPLORER = 14;
export const SPP_OPENBOX = 15;
export const SPP_SEARCHVIEW = 16;
export const SPP_MOREPROGRAMSARROWBACK = 17;
export const SPP_TOPMATCH = 18;
export const SPP_LOGOFFSPLITBUTTONDROPDOWN = 19;
export const SPMPT_NORMAL = 1;
export const SPMPT_HOT = 2;
export const SPMPT_SELECTED = 3;
export const SPMPT_DISABLED = 4;
export const SPMPT_FOCUSED = 5;
export const SPSE_NORMAL = 1;
export const SPSE_HOT = 2;
export const SPSE_SELECTED = 3;
export const SPSE_DISABLED = 4;
export const SPSE_FOCUSED = 5;
export const SPOB_NORMAL = 1;
export const SPOB_HOT = 2;
export const SPOB_SELECTED = 3;
export const SPOB_DISABLED = 4;
export const SPOB_FOCUSED = 5;
export const SPS_NORMAL = 1;
export const SPS_HOT = 2;
export const SPS_PRESSED = 3;
export const SPSB_NORMAL = 1;
export const SPSB_HOT = 2;
export const SPSB_PRESSED = 3;
export const SPLS_NORMAL = 1;
export const SPLS_HOT = 2;
export const SPLS_PRESSED = 3;
export const MDP_NEWAPPBUTTON = 1;
export const MDP_SEPERATOR = 2;
export const MDS_NORMAL = 1;
export const MDS_HOT = 2;
export const MDS_PRESSED = 3;
export const MDS_DISABLED = 4;
export const MDS_CHECKED = 5;
export const MDS_HOTCHECKED = 6;
export const TM_PLAINTEXT = 1;
export const TM_RICHTEXT = 2;
export const TM_SINGLELEVELUNDO = 4;
export const TM_MULTILEVELUNDO = 8;
export const TM_SINGLECODEPAGE = 16;
export const TM_MULTICODEPAGE = 32;
export const TA_NOUPDATECP = 0;
export const TA_UPDATECP = 1;
export const TA_LEFT = 0;
export const TA_RIGHT = 2;
export const TA_CENTER = 6;
export const TA_TOP = 0;
export const TA_BOTTOM = 8;
export const TA_BASELINE = 24;
export const TA_RTLREADING = 256;
export const TA_MASK = 287;
export const VTA_BASELINE = 24;
export const VTA_LEFT = 8;
export const VTA_RIGHT = 0;
export const VTA_CENTER = 6;
export const VTA_BOTTOM = 2;
export const VTA_TOP = 0;
export const CHARSET_UNICODE = 1;
export const CHARSET_SYMBOL = 2;
export const DVASPECT_CONTENT = 1;
export const DVASPECT_THUMBNAIL = 2;
export const DVASPECT_ICON = 4;
export const DVASPECT_DOCPRINT = 8;
export const DVASPECT_OPAQUE = 16;
export const DVASPECT_TRANSPARENT = 32;
export const UID_UNKNOWN = 0;
export const UID_TYPING = 1;
export const UID_DELETE = 2;
export const UID_DRAGDROP = 3;
export const UID_CUT = 4;
export const UID_PASTE = 5;
export const UID_AUTOTABLE = 6;
export const khyphNil = 0;
export const khyphNormal = 1;
export const khyphAddBefore = 2;
export const khyphChangeBefore = 3;
export const khyphDeleteBefore = 4;
export const khyphChangeAfter = 5;
export const khyphDelAndChange = 6;
export const TXTBACK_TRANSPARENT = 0;
export const TXTBACK_OPAQUE = 1;
export const TXTHITRESULT_NOHIT = 0;
export const TXTHITRESULT_TRANSPARENT = 1;
export const TXTHITRESULT_CLOSE = 2;
export const TXTHITRESULT_HIT = 3;
export const TXTNS_FITTOCONTENT2 = 0;
export const TXTNS_FITTOCONTENT = 1;
export const TXTNS_ROUNDTOLINE = 2;
export const TXTNS_FITTOCONTENT3 = 3;
export const TXTNS_FITTOCONTENTWSP = 4;
export const TXTNS_INCLUDELASTLINE = 1073741824;
export const TXTNS_EMU = `-2147483648`;
export const TXTVIEW_ACTIVE = 0;
export const TXTVIEW_INACTIVE = `-1`;
export const CN_GENERIC = 0;
export const CN_TEXTCHANGED = 1;
export const CN_NEWUNDO = 2;
export const CN_NEWREDO = 4;
export const CARET_NONE = 0;
export const CARET_CUSTOM = 1;
export const CARET_RTL = 2;
export const CARET_ITALIC = 32;
export const CARET_NULL = 64;
export const CARET_ROTATE90 = 128;
export const tomFalse = 0;
export const tomTrue = `-1`;
export const tomUndefined = `-9999999`;
export const tomToggle = `-9999998`;
export const tomAutoColor = `-9999997`;
export const tomDefault = `-9999996`;
export const tomSuspend = `-9999995`;
export const tomResume = `-9999994`;
export const tomApplyNow = 0;
export const tomApplyLater = 1;
export const tomTrackParms = 2;
export const tomCacheParms = 3;
export const tomApplyTmp = 4;
export const tomDisableSmartFont = 8;
export const tomEnableSmartFont = 9;
export const tomUsePoints = 10;
export const tomUseTwips = 11;
export const tomBackward = `-1073741823`;
export const tomForward = 1073741823;
export const tomMove = 0;
export const tomExtend = 1;
export const tomNoSelection = 0;
export const tomSelectionIP = 1;
export const tomSelectionNormal = 2;
export const tomSelectionFrame = 3;
export const tomSelectionColumn = 4;
export const tomSelectionRow = 5;
export const tomSelectionBlock = 6;
export const tomSelectionInlineShape = 7;
export const tomSelectionShape = 8;
export const tomSelStartActive = 1;
export const tomSelAtEOL = 2;
export const tomSelOvertype = 4;
export const tomSelActive = 8;
export const tomSelReplace = 16;
export const tomEnd = 0;
export const tomStart = 32;
export const tomCollapseEnd = 0;
export const tomCollapseStart = 1;
export const tomClientCoord = 256;
export const tomAllowOffClient = 512;
export const tomTransform = 1024;
export const tomObjectArg = 2048;
export const tomAtEnd = 4096;
export const tomNone = 0;
export const tomSingle = 1;
export const tomWords = 2;
export const tomDouble = 3;
export const tomDotted = 4;
export const tomDash = 5;
export const tomDashDot = 6;
export const tomDashDotDot = 7;
export const tomWave = 8;
export const tomThick = 9;
export const tomHair = 10;
export const tomDoubleWave = 11;
export const tomHeavyWave = 12;
export const tomLongDash = 13;
export const tomThickDash = 14;
export const tomThickDashDot = 15;
export const tomThickDashDotDot = 16;
export const tomThickDotted = 17;
export const tomThickLongDash = 18;
export const tomLineSpaceSingle = 0;
export const tomLineSpace1pt5 = 1;
export const tomLineSpaceDouble = 2;
export const tomLineSpaceAtLeast = 3;
export const tomLineSpaceExactly = 4;
export const tomLineSpaceMultiple = 5;
export const tomLineSpacePercent = 6;
export const tomAlignLeft = 0;
export const tomAlignCenter = 1;
export const tomAlignRight = 2;
export const tomAlignJustify = 3;
export const tomAlignDecimal = 3;
export const tomAlignBar = 4;
export const tomDefaultTab = 5;
export const tomAlignInterWord = 3;
export const tomAlignNewspaper = 4;
export const tomAlignInterLetter = 5;
export const tomAlignScaled = 6;
export const tomSpaces = 0;
export const tomDots = 1;
export const tomDashes = 2;
export const tomLines = 3;
export const tomThickLines = 4;
export const tomEquals = 5;
export const tomTabBack = `-3`;
export const tomTabNext = `-2`;
export const tomTabHere = `-1`;
export const tomListNone = 0;
export const tomListBullet = 1;
export const tomListNumberAsArabic = 2;
export const tomListNumberAsLCLetter = 3;
export const tomListNumberAsUCLetter = 4;
export const tomListNumberAsLCRoman = 5;
export const tomListNumberAsUCRoman = 6;
export const tomListNumberAsSequence = 7;
export const tomListNumberedCircle = 8;
export const tomListNumberedBlackCircleWingding = 9;
export const tomListNumberedWhiteCircleWingding = 10;
export const tomListNumberedArabicWide = 11;
export const tomListNumberedChS = 12;
export const tomListNumberedChT = 13;
export const tomListNumberedJpnChS = 14;
export const tomListNumberedJpnKor = 15;
export const tomListNumberedArabic1 = 16;
export const tomListNumberedArabic2 = 17;
export const tomListNumberedHebrew = 18;
export const tomListNumberedThaiAlpha = 19;
export const tomListNumberedThaiNum = 20;
export const tomListNumberedHindiAlpha = 21;
export const tomListNumberedHindiAlpha1 = 22;
export const tomListNumberedHindiNum = 23;
export const tomListParentheses = 65536;
export const tomListPeriod = 131072;
export const tomListPlain = 196608;
export const tomListNoNumber = 262144;
export const tomListMinus = 524288;
export const tomIgnoreNumberStyle = 16777216;
export const tomParaStyleNormal = `-1`;
export const tomParaStyleHeading1 = `-2`;
export const tomParaStyleHeading2 = `-3`;
export const tomParaStyleHeading3 = `-4`;
export const tomParaStyleHeading4 = `-5`;
export const tomParaStyleHeading5 = `-6`;
export const tomParaStyleHeading6 = `-7`;
export const tomParaStyleHeading7 = `-8`;
export const tomParaStyleHeading8 = `-9`;
export const tomParaStyleHeading9 = `-10`;
export const tomCharacter = 1;
export const tomWord = 2;
export const tomSentence = 3;
export const tomParagraph = 4;
export const tomLine = 5;
export const tomStory = 6;
export const tomScreen = 7;
export const tomSection = 8;
export const tomTableColumn = 9;
export const tomColumn = 9;
export const tomRow = 10;
export const tomWindow = 11;
export const tomCell = 12;
export const tomCharFormat = 13;
export const tomParaFormat = 14;
export const tomTable = 15;
export const tomObject = 16;
export const tomPage = 17;
export const tomHardParagraph = 18;
export const tomCluster = 19;
export const tomInlineObject = 20;
export const tomInlineObjectArg = 21;
export const tomLeafLine = 22;
export const tomLayoutColumn = 23;
export const tomProcessId = 1073741825;
export const tomMatchWord = 2;
export const tomMatchCase = 4;
export const tomMatchPattern = 8;
export const tomUnknownStory = 0;
export const tomMainTextStory = 1;
export const tomFootnotesStory = 2;
export const tomEndnotesStory = 3;
export const tomCommentsStory = 4;
export const tomTextFrameStory = 5;
export const tomEvenPagesHeaderStory = 6;
export const tomPrimaryHeaderStory = 7;
export const tomEvenPagesFooterStory = 8;
export const tomPrimaryFooterStory = 9;
export const tomFirstPageHeaderStory = 10;
export const tomFirstPageFooterStory = 11;
export const tomScratchStory = 127;
export const tomFindStory = 128;
export const tomReplaceStory = 129;
export const tomStoryInactive = 0;
export const tomStoryActiveDisplay = 1;
export const tomStoryActiveUI = 2;
export const tomStoryActiveDisplayUI = 3;
export const tomNoAnimation = 0;
export const tomLasVegasLights = 1;
export const tomBlinkingBackground = 2;
export const tomSparkleText = 3;
export const tomMarchingBlackAnts = 4;
export const tomMarchingRedAnts = 5;
export const tomShimmer = 6;
export const tomWipeDown = 7;
export const tomWipeRight = 8;
export const tomAnimationMax = 8;
export const tomLowerCase = 0;
export const tomUpperCase = 1;
export const tomTitleCase = 2;
export const tomSentenceCase = 4;
export const tomToggleCase = 5;
export const tomReadOnly = 256;
export const tomShareDenyRead = 512;
export const tomShareDenyWrite = 1024;
export const tomPasteFile = 4096;
export const tomCreateNew = 16;
export const tomCreateAlways = 32;
export const tomOpenExisting = 48;
export const tomOpenAlways = 64;
export const tomTruncateExisting = 80;
export const tomRTF = 1;
export const tomText = 2;
export const tomHTML = 3;
export const tomWordDocument = 4;
export const tomBold = `-2147483647`;
export const tomItalic = `-2147483646`;
export const tomUnderline = `-2147483644`;
export const tomStrikeout = `-2147483640`;
export const tomProtected = `-2147483632`;
export const tomLink = `-2147483616`;
export const tomSmallCaps = `-2147483584`;
export const tomAllCaps = `-2147483520`;
export const tomHidden = `-2147483392`;
export const tomOutline = `-2147483136`;
export const tomShadow = `-2147482624`;
export const tomEmboss = `-2147481600`;
export const tomImprint = `-2147479552`;
export const tomDisabled = `-2147475456`;
export const tomRevised = `-2147467264`;
export const tomSubscriptCF = `-2147418112`;
export const tomSuperscriptCF = `-2147352576`;
export const tomFontBound = `-2146435072`;
export const tomLinkProtected = `-2139095040`;
export const tomInlineObjectStart = `-2130706432`;
export const tomExtendedChar = `-2113929216`;
export const tomAutoBackColor = `-2080374784`;
export const tomMathZoneNoBuildUp = `-2013265920`;
export const tomMathZone = `-1879048192`;
export const tomMathZoneOrdinary = `-1610612736`;
export const tomAutoTextColor = `-1073741824`;
export const tomMathZoneDisplay = 262144;
export const tomParaEffectRTL = 1;
export const tomParaEffectKeep = 2;
export const tomParaEffectKeepNext = 4;
export const tomParaEffectPageBreakBefore = 8;
export const tomParaEffectNoLineNumber = 16;
export const tomParaEffectNoWidowControl = 32;
export const tomParaEffectDoNotHyphen = 64;
export const tomParaEffectSideBySide = 128;
export const tomParaEffectCollapsed = 256;
export const tomParaEffectOutlineLevel = 512;
export const tomParaEffectBox = 1024;
export const tomParaEffectTableRowDelimiter = 4096;
export const tomParaEffectTable = 16384;
export const tomModWidthPairs = 1;
export const tomModWidthSpace = 2;
export const tomAutoSpaceAlpha = 4;
export const tomAutoSpaceNumeric = 8;
export const tomAutoSpaceParens = 16;
export const tomEmbeddedFont = 32;
export const tomDoublestrike = 64;
export const tomOverlapping = 128;
export const tomNormalCaret = 0;
export const tomKoreanBlockCaret = 1;
export const tomNullCaret = 2;
export const tomIncludeInset = 1;
export const tomUnicodeBiDi = 1;
export const tomMathCFCheck = 4;
export const tomUnlink = 8;
export const tomUnhide = 16;
export const tomCheckTextLimit = 32;
export const tomIgnoreCurrentFont = 0;
export const tomMatchCharRep = 1;
export const tomMatchFontSignature = 2;
export const tomMatchAscii = 4;
export const tomGetHeightOnly = 8;
export const tomMatchMathFont = 16;
export const tomCharset = `-2147483648`;
export const tomCharRepFromLcid = 1073741824;
export const tomAnsi = 0;
export const tomEastEurope = 1;
export const tomCyrillic = 2;
export const tomGreek = 3;
export const tomTurkish = 4;
export const tomHebrew = 5;
export const tomArabic = 6;
export const tomBaltic = 7;
export const tomVietnamese = 8;
export const tomDefaultCharRep = 9;
export const tomSymbol = 10;
export const tomThai = 11;
export const tomShiftJIS = 12;
export const tomGB2312 = 13;
export const tomHangul = 14;
export const tomBIG5 = 15;
export const tomPC437 = 16;
export const tomOEM = 17;
export const tomMac = 18;
export const tomArmenian = 19;
export const tomSyriac = 20;
export const tomThaana = 21;
export const tomDevanagari = 22;
export const tomBengali = 23;
export const tomGurmukhi = 24;
export const tomGujarati = 25;
export const tomOriya = 26;
export const tomTamil = 27;
export const tomTelugu = 28;
export const tomKannada = 29;
export const tomMalayalam = 30;
export const tomSinhala = 31;
export const tomLao = 32;
export const tomTibetan = 33;
export const tomMyanmar = 34;
export const tomGeorgian = 35;
export const tomJamo = 36;
export const tomEthiopic = 37;
export const tomCherokee = 38;
export const tomAboriginal = 39;
export const tomOgham = 40;
export const tomRunic = 41;
export const tomKhmer = 42;
export const tomMongolian = 43;
export const tomBraille = 44;
export const tomYi = 45;
export const tomLimbu = 46;
export const tomTaiLe = 47;
export const tomNewTaiLue = 48;
export const tomSylotiNagri = 49;
export const tomKharoshthi = 50;
export const tomKayahli = 51;
export const tomUsymbol = 52;
export const tomEmoji = 53;
export const tomGlagolitic = 54;
export const tomLisu = 55;
export const tomVai = 56;
export const tomNKo = 57;
export const tomOsmanya = 58;
export const tomPhagsPa = 59;
export const tomGothic = 60;
export const tomDeseret = 61;
export const tomTifinagh = 62;
export const tomCharRepMax = 63;
export const tomRE10Mode = 1;
export const tomUseAtFont = 2;
export const tomTextFlowMask = 12;
export const tomTextFlowES = 0;
export const tomTextFlowSW = 4;
export const tomTextFlowWN = 8;
export const tomTextFlowNE = 12;
export const tomNoIME = 524288;
export const tomSelfIME = 262144;
export const tomNoUpScroll = 65536;
export const tomNoVpScroll = 262144;
export const tomNoLink = 0;
export const tomClientLink = 1;
export const tomFriendlyLinkName = 2;
export const tomFriendlyLinkAddress = 3;
export const tomAutoLinkURL = 4;
export const tomAutoLinkEmail = 5;
export const tomAutoLinkPhone = 6;
export const tomAutoLinkPath = 7;
export const tomCompressNone = 0;
export const tomCompressPunctuation = 1;
export const tomCompressPunctuationAndKana = 2;
export const tomCompressMax = 2;
export const tomUnderlinePositionAuto = 0;
export const tomUnderlinePositionBelow = 1;
export const tomUnderlinePositionAbove = 2;
export const tomUnderlinePositionMax = 2;
export const tomFontAlignmentAuto = 0;
export const tomFontAlignmentTop = 1;
export const tomFontAlignmentBaseline = 2;
export const tomFontAlignmentBottom = 3;
export const tomFontAlignmentCenter = 4;
export const tomFontAlignmentMax = 4;
export const tomRubyBelow = 128;
export const tomRubyAlignCenter = 0;
export const tomRubyAlign010 = 1;
export const tomRubyAlign121 = 2;
export const tomRubyAlignLeft = 3;
export const tomRubyAlignRight = 4;
export const tomLimitsDefault = 0;
export const tomLimitsUnderOver = 1;
export const tomLimitsSubSup = 2;
export const tomUpperLimitAsSuperScript = 3;
export const tomLimitsOpposite = 4;
export const tomShowLLimPlaceHldr = 8;
export const tomShowULimPlaceHldr = 16;
export const tomDontGrowWithContent = 64;
export const tomGrowWithContent = 128;
export const tomSubSupAlign = 1;
export const tomLimitAlignMask = 3;
export const tomLimitAlignCenter = 0;
export const tomLimitAlignLeft = 1;
export const tomLimitAlignRight = 2;
export const tomShowDegPlaceHldr = 8;
export const tomAlignDefault = 0;
export const tomAlignMatchAscentDescent = 2;
export const tomMathVariant = 32;
export const tomStyleDefault = 0;
export const tomStyleScriptScriptCramped = 1;
export const tomStyleScriptScript = 2;
export const tomStyleScriptCramped = 3;
export const tomStyleScript = 4;
export const tomStyleTextCramped = 5;
export const tomStyleText = 6;
export const tomStyleDisplayCramped = 7;
export const tomStyleDisplay = 8;
export const tomMathRelSize = 64;
export const tomDecDecSize = 254;
export const tomDecSize = 255;
export const tomIncSize = 65;
export const tomIncIncSize = 66;
export const tomGravityUI = 0;
export const tomGravityBack = 1;
export const tomGravityFore = 2;
export const tomGravityIn = 3;
export const tomGravityOut = 4;
export const tomGravityBackward = 536870912;
export const tomGravityForward = 1073741824;
export const tomAdjustCRLF = 1;
export const tomUseCRLF = 2;
export const tomTextize = 4;
export const tomAllowFinalEOP = 8;
export const tomFoldMathAlpha = 16;
export const tomNoHidden = 32;
export const tomIncludeNumbering = 64;
export const tomTranslateTableCell = 128;
export const tomNoMathZoneBrackets = 256;
export const tomConvertMathChar = 512;
export const tomNoUCGreekItalic = 1024;
export const tomAllowMathBold = 2048;
export const tomLanguageTag = 4096;
export const tomConvertRTF = 8192;
export const tomApplyRtfDocProps = 16384;
export const tomPhantomShow = 1;
export const tomPhantomZeroWidth = 2;
export const tomPhantomZeroAscent = 4;
export const tomPhantomZeroDescent = 8;
export const tomPhantomTransparent = 16;
export const tomPhantomASmash = 5;
export const tomPhantomDSmash = 9;
export const tomPhantomHSmash = 3;
export const tomPhantomSmash = 13;
export const tomPhantomHorz = 12;
export const tomPhantomVert = 2;
export const tomBoxHideTop = 1;
export const tomBoxHideBottom = 2;
export const tomBoxHideLeft = 4;
export const tomBoxHideRight = 8;
export const tomBoxStrikeH = 16;
export const tomBoxStrikeV = 32;
export const tomBoxStrikeTLBR = 64;
export const tomBoxStrikeBLTR = 128;
export const tomBoxAlignCenter = 1;
export const tomSpaceMask = 28;
export const tomSpaceDefault = 0;
export const tomSpaceUnary = 4;
export const tomSpaceBinary = 8;
export const tomSpaceRelational = 12;
export const tomSpaceSkip = 16;
export const tomSpaceOrd = 20;
export const tomSpaceDifferential = 24;
export const tomSizeText = 32;
export const tomSizeScript = 64;
export const tomSizeScriptScript = 96;
export const tomNoBreak = 128;
export const tomTransparentForPositioning = 256;
export const tomTransparentForSpacing = 512;
export const tomStretchCharBelow = 0;
export const tomStretchCharAbove = 1;
export const tomStretchBaseBelow = 2;
export const tomStretchBaseAbove = 3;
export const tomMatrixAlignMask = 3;
export const tomMatrixAlignCenter = 0;
export const tomMatrixAlignTopRow = 1;
export const tomMatrixAlignBottomRow = 3;
export const tomShowMatPlaceHldr = 8;
export const tomEqArrayLayoutWidth = 1;
export const tomEqArrayAlignMask = 12;
export const tomEqArrayAlignCenter = 0;
export const tomEqArrayAlignTopRow = 4;
export const tomEqArrayAlignBottomRow = 12;
export const tomMathManualBreakMask = 127;
export const tomMathBreakLeft = 125;
export const tomMathBreakCenter = 126;
export const tomMathBreakRight = 127;
export const tomMathEqAlign = 128;
export const tomMathArgShadingStart = 593;
export const tomMathArgShadingEnd = 594;
export const tomMathObjShadingStart = 595;
export const tomMathObjShadingEnd = 596;
export const tomFunctionTypeNone = 0;
export const tomFunctionTypeTakesArg = 1;
export const tomFunctionTypeTakesLim = 2;
export const tomFunctionTypeTakesLim2 = 3;
export const tomFunctionTypeIsLim = 4;
export const tomMathParaAlignDefault = 0;
export const tomMathParaAlignCenterGroup = 1;
export const tomMathParaAlignCenter = 2;
export const tomMathParaAlignLeft = 3;
export const tomMathParaAlignRight = 4;
export const tomMathDispAlignMask = 3;
export const tomMathDispAlignCenterGroup = 0;
export const tomMathDispAlignCenter = 1;
export const tomMathDispAlignLeft = 2;
export const tomMathDispAlignRight = 3;
export const tomMathDispIntUnderOver = 4;
export const tomMathDispFracTeX = 8;
export const tomMathDispNaryGrow = 16;
export const tomMathDocEmptyArgMask = 96;
export const tomMathDocEmptyArgAuto = 0;
export const tomMathDocEmptyArgAlways = 32;
export const tomMathDocEmptyArgNever = 64;
export const tomMathDocSbSpOpUnchanged = 128;
export const tomMathDocDiffMask = 768;
export const tomMathDocDiffDefault = 0;
export const tomMathDocDiffUpright = 256;
export const tomMathDocDiffItalic = 512;
export const tomMathDocDiffOpenItalic = 768;
export const tomMathDispNarySubSup = 1024;
export const tomMathDispDef = 2048;
export const tomMathEnableRtl = 4096;
export const tomMathBrkBinMask = 196608;
export const tomMathBrkBinBefore = 0;
export const tomMathBrkBinAfter = 65536;
export const tomMathBrkBinDup = 131072;
export const tomMathBrkBinSubMask = 786432;
export const tomMathBrkBinSubMM = 0;
export const tomMathBrkBinSubPM = 262144;
export const tomMathBrkBinSubMP = 524288;
export const tomSelRange = 597;
export const tomHstring = 596;
export const tomFontPropTeXStyle = 828;
export const tomFontPropAlign = 829;
export const tomFontStretch = 830;
export const tomFontStyle = 831;
export const tomFontStyleUpright = 0;
export const tomFontStyleOblique = 1;
export const tomFontStyleItalic = 2;
export const tomFontStretchDefault = 0;
export const tomFontStretchUltraCondensed = 1;
export const tomFontStretchExtraCondensed = 2;
export const tomFontStretchCondensed = 3;
export const tomFontStretchSemiCondensed = 4;
export const tomFontStretchNormal = 5;
export const tomFontStretchSemiExpanded = 6;
export const tomFontStretchExpanded = 7;
export const tomFontStretchExtraExpanded = 8;
export const tomFontStretchUltraExpanded = 9;
export const tomFontWeightDefault = 0;
export const tomFontWeightThin = 100;
export const tomFontWeightExtraLight = 200;
export const tomFontWeightLight = 300;
export const tomFontWeightNormal = 400;
export const tomFontWeightRegular = 400;
export const tomFontWeightMedium = 500;
export const tomFontWeightSemiBold = 600;
export const tomFontWeightBold = 700;
export const tomFontWeightExtraBold = 800;
export const tomFontWeightBlack = 900;
export const tomFontWeightHeavy = 900;
export const tomFontWeightExtraBlack = 950;
export const tomParaPropMathAlign = 1079;
export const tomDocMathBuild = 128;
export const tomMathLMargin = 129;
export const tomMathRMargin = 130;
export const tomMathWrapIndent = 131;
export const tomMathWrapRight = 132;
export const tomMathPostSpace = 134;
export const tomMathPreSpace = 133;
export const tomMathInterSpace = 135;
export const tomMathIntraSpace = 136;
export const tomCanCopy = 137;
export const tomCanRedo = 138;
export const tomCanUndo = 139;
export const tomUndoLimit = 140;
export const tomDocAutoLink = 141;
export const tomEllipsisMode = 142;
export const tomEllipsisState = 143;
export const tomEllipsisNone = 0;
export const tomEllipsisEnd = 1;
export const tomEllipsisWord = 3;
export const tomEllipsisPresent = 1;
export const tomVTopCell = 1;
export const tomVLowCell = 2;
export const tomHStartCell = 4;
export const tomHContCell = 8;
export const tomRowUpdate = 1;
export const tomRowApplyDefault = 0;
export const tomCellStructureChangeOnly = 1;
export const tomRowHeightActual = 2059;
export const tomSimpleText = 0;
export const tomRuby = 1;
export const tomHorzVert = 2;
export const tomWarichu = 3;
export const tomEq = 9;
export const tomMath = 10;
export const tomAccent = 10;
export const tomBox = 11;
export const tomBoxedFormula = 12;
export const tomBrackets = 13;
export const tomBracketsWithSeps = 14;
export const tomEquationArray = 15;
export const tomFraction = 16;
export const tomFunctionApply = 17;
export const tomLeftSubSup = 18;
export const tomLowerLimit = 19;
export const tomMatrix = 20;
export const tomNary = 21;
export const tomOpChar = 22;
export const tomOverbar = 23;
export const tomPhantom = 24;
export const tomRadical = 25;
export const tomSlashedFraction = 26;
export const tomStack = 27;
export const tomStretchStack = 28;
export const tomSubscript = 29;
export const tomSubSup = 30;
export const tomSuperscript = 31;
export const tomUnderbar = 32;
export const tomUpperLimit = 33;
export const tomObjectMax = 33;
export const MBOLD = 16;
export const MITAL = 32;
export const MGREEK = 64;
export const MROMN = 0;
export const MSCRP = 1;
export const MFRAK = 2;
export const MOPEN = 3;
export const MSANS = 4;
export const MMONO = 5;
export const MMATH = 6;
export const MISOL = 7;
export const MINIT = 8;
export const MTAIL = 9;
export const MSTRCH = 10;
export const MLOOP = 11;
export const MOPENA = 12;
export const POINTER_FEEDBACK_DEFAULT = 1;
export const POINTER_FEEDBACK_INDIRECT = 2;
export const POINTER_FEEDBACK_NONE = 3;
export const PT_POINTER = 1;
export const PT_TOUCH = 2;
export const PT_PEN = 3;
export const PT_MOUSE = 4;
export const PT_TOUCHPAD = 5;
export const FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1;
export const FEEDBACK_PEN_BARRELVISUALIZATION = 2;
export const FEEDBACK_PEN_TAP = 3;
export const FEEDBACK_PEN_DOUBLETAP = 4;
export const FEEDBACK_PEN_PRESSANDHOLD = 5;
export const FEEDBACK_PEN_RIGHTTAP = 6;
export const FEEDBACK_TOUCH_TAP = 7;
export const FEEDBACK_TOUCH_DOUBLETAP = 8;
export const FEEDBACK_TOUCH_PRESSANDHOLD = 9;
export const FEEDBACK_TOUCH_RIGHTTAP = 10;
export const FEEDBACK_GESTURE_PRESSANDTAP = 11;
export const FEEDBACK_MAX = `-1`;
export const POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1;
export const POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2;
export const POINTER_DEVICE_TYPE_TOUCH = 3;
export const POINTER_DEVICE_TYPE_TOUCH_PAD = 4;
export const POINTER_DEVICE_TYPE_MAX = `-1`;
export const POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0;
export const POINTER_DEVICE_CURSOR_TYPE_TIP = 1;
export const POINTER_DEVICE_CURSOR_TYPE_ERASER = 2;
export const POINTER_DEVICE_CURSOR_TYPE_MAX = `-1`;
export const LR_CREATEDIBSECTION = 8192;
export const LR_DEFAULTCOLOR = 0;
export const LR_DEFAULTSIZE = 64;
export const LR_LOADFROMFILE = 16;
export const LR_LOADMAP3DCOLORS = 4096;
export const LR_LOADTRANSPARENT = 32;
export const LR_MONOCHROME = 1;
export const LR_SHARED = 32768;
export const LR_VGACOLOR = 128;
export const LR_COPYDELETEORG = 8;
export const LR_COPYFROMRESOURCE = 16384;
export const LR_COPYRETURNORG = 4;
export const SB_CTL = 2;
export const SB_HORZ = 0;
export const SB_VERT = 1;
export const SB_BOTH = 3;
export const DT_BOTTOM = 8;
export const DT_CALCRECT = 1024;
export const DT_CENTER = 1;
export const DT_EDITCONTROL = 8192;
export const DT_END_ELLIPSIS = 32768;
export const DT_EXPANDTABS = 64;
export const DT_EXTERNALLEADING = 512;
export const DT_HIDEPREFIX = 1048576;
export const DT_INTERNAL = 4096;
export const DT_LEFT = 0;
export const DT_MODIFYSTRING = 65536;
export const DT_NOCLIP = 256;
export const DT_NOFULLWIDTHCHARBREAK = 524288;
export const DT_NOPREFIX = 2048;
export const DT_PATH_ELLIPSIS = 16384;
export const DT_PREFIXONLY = 2097152;
export const DT_RIGHT = 2;
export const DT_RTLREADING = 131072;
export const DT_SINGLELINE = 32;
export const DT_TABSTOP = 128;
export const DT_TOP = 0;
export const DT_VCENTER = 4;
export const DT_WORDBREAK = 16;
export const DT_WORD_ELLIPSIS = 262144;
export const BDR_RAISEDOUTER = 1;
export const BDR_SUNKENOUTER = 2;
export const BDR_RAISEDINNER = 4;
export const BDR_SUNKENINNER = 8;
export const BDR_OUTER = 3;
export const BDR_INNER = 12;
export const BDR_RAISED = 5;
export const BDR_SUNKEN = 10;
export const EDGE_RAISED = 5;
export const EDGE_SUNKEN = 10;
export const EDGE_ETCHED = 6;
export const EDGE_BUMP = 9;
export const BF_ADJUST = 8192;
export const BF_BOTTOM = 8;
export const BF_BOTTOMLEFT = 9;
export const BF_BOTTOMRIGHT = 12;
export const BF_DIAGONAL = 16;
export const BF_DIAGONAL_ENDBOTTOMLEFT = 25;
export const BF_DIAGONAL_ENDBOTTOMRIGHT = 28;
export const BF_DIAGONAL_ENDTOPLEFT = 19;
export const BF_DIAGONAL_ENDTOPRIGHT = 22;
export const BF_FLAT = 16384;
export const BF_LEFT = 1;
export const BF_MIDDLE = 2048;
export const BF_MONO = 32768;
export const BF_RECT = 15;
export const BF_RIGHT = 4;
export const BF_SOFT = 4096;
export const BF_TOP = 2;
export const BF_TOPLEFT = 3;
export const BF_TOPRIGHT = 6;

// Structs

export type HPROPSHEETPAGE = bigint | number;

export type HIMAGELIST = bigint | number;

export type HSYNTHETICPOINTERDEVICE = bigint | number;

export type HTREEITEM = bigint | number;

export type HDSA = bigint | number;

export type HDPA = bigint | number;

/**
 * Windows.Win32.UI.Controls.TBBUTTON (size: 40)
 */
export interface TBBUTTON {
  /** i32 */
  iBitmap: number;
  /** i32 */
  idCommand: number;
  /** u8 */
  fsState: number;
  /** u8 */
  fsStyle: number;
  /** array */
  bReserved: Deno.PointerValue;
  /** usize */
  dwData: bigint | number;
  /** isize */
  iString: bigint | number;
}

export const sizeofTBBUTTON = 40;

export function allocTBBUTTON(data?: Partial<TBBUTTON>): Uint8Array {
  const buf = new Uint8Array(sizeofTBBUTTON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iBitmap !== undefined) view.setInt32(0, Number(data.iBitmap), true);
  // 0x04: i32
  if (data?.idCommand !== undefined) view.setInt32(4, Number(data.idCommand), true);
  // 0x08: u8
  if (data?.fsState !== undefined) view.setUint8(8, Number(data.fsState));
  // 0x09: u8
  if (data?.fsStyle !== undefined) view.setUint8(9, Number(data.fsStyle));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.bReserved !== undefined) view.setBigUint64(16, data.bReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bReserved))), true);
  // 0x18: usize
  if (data?.dwData !== undefined) view.setBigUint64(24, BigInt(data.dwData), true);
  // 0x20: isize
  if (data?.iString !== undefined) view.setBigInt64(32, BigInt(data.iString), true);
  return buf;
}

export class TBBUTTONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iBitmap(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get idCommand(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u8
  get fsState(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get fsStyle(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get bReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get dwData(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: isize
  get iString(): bigint | number {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x00: i32
  set iBitmap(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set idCommand(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u8
  set fsState(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set fsStyle(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set bReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set dwData(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: isize
  set iString(value: bigint | number) {
    this.view.setBigInt64(32, BigInt(value), true);
  }
}

export type HWND = bigint | number;

export type HINSTANCE = bigint | number;

export type PSTR = Deno.PointerValue | Uint8Array;

export type LPARAM = bigint | number;

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAME_NT4A (size: 136)
 */
export interface OPENFILENAME_NT4A {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFilter: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCustomFilter: string | null | Uint8Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFile: string | null | Uint8Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileTitle: string | null | Uint8Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrInitialDir: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDefExt: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
}

export const sizeofOPENFILENAME_NT4A = 136;

export function allocOPENFILENAME_NT4A(data?: Partial<OPENFILENAME_NT4A>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAME_NT4A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class OPENFILENAME_NT4AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAME_NT4W (size: 136)
 */
export interface OPENFILENAME_NT4W {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFilter: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCustomFilter: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrInitialDir: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDefExt: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
}

export const sizeofOPENFILENAME_NT4W = 136;

export function allocOPENFILENAME_NT4W(data?: Partial<OPENFILENAME_NT4W>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAME_NT4W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class OPENFILENAME_NT4WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAMEA (size: 152)
 */
export interface OPENFILENAMEA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFilter: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCustomFilter: string | null | Uint8Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFile: string | null | Uint8Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileTitle: string | null | Uint8Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrInitialDir: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS */
  Flags: OPEN_FILENAME_FLAGS;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDefExt: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS_EX */
  FlagsEx: OPEN_FILENAME_FLAGS_EX;
}

export const sizeofOPENFILENAMEA = 152;

export function allocOPENFILENAMEA(data?: Partial<OPENFILENAMEA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAMEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(136, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x90: u32
  if (data?.dwReserved !== undefined) view.setUint32(144, Number(data.dwReserved), true);
  // 0x94: u32
  if (data?.FlagsEx !== undefined) view.setUint32(148, Number(data.FlagsEx), true);
  return buf;
}

export class OPENFILENAMEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get dwReserved(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get FlagsEx(): number {
    return this.view.getUint32(148, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set dwReserved(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set FlagsEx(value: number) {
    this.view.setUint32(148, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAMEW (size: 152)
 */
export interface OPENFILENAMEW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFilter: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCustomFilter: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrInitialDir: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS */
  Flags: OPEN_FILENAME_FLAGS;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDefExt: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS_EX */
  FlagsEx: OPEN_FILENAME_FLAGS_EX;
}

export const sizeofOPENFILENAMEW = 152;

export function allocOPENFILENAMEW(data?: Partial<OPENFILENAMEW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAMEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(136, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x90: u32
  if (data?.dwReserved !== undefined) view.setUint32(144, Number(data.dwReserved), true);
  // 0x94: u32
  if (data?.FlagsEx !== undefined) view.setUint32(148, Number(data.FlagsEx), true);
  return buf;
}

export class OPENFILENAMEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get dwReserved(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get FlagsEx(): number {
    return this.view.getUint32(148, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set dwReserved(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set FlagsEx(value: number) {
    this.view.setUint32(148, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHDR (size: 24)
 */
export interface NMHDR {
  /** Windows.Win32.Foundation.HWND */
  hwndFrom: Deno.PointerValue;
  /** usize */
  idFrom: bigint | number;
  /** u32 */
  code: number;
}

export const sizeofNMHDR = 24;

export function allocNMHDR(data?: Partial<NMHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndFrom !== undefined) view.setBigUint64(0, data.hwndFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndFrom))), true);
  // 0x08: usize
  if (data?.idFrom !== undefined) view.setBigUint64(8, BigInt(data.idFrom), true);
  // 0x10: u32
  if (data?.code !== undefined) view.setUint32(16, Number(data.code), true);
  // 0x14: pad4
  return buf;
}

export class NMHDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwndFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get idFrom(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get code(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hwndFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set idFrom(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set code(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYA (size: 24)
 */
export interface OFNOTIFYA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszFile: string | null | Uint8Array;
}

export const sizeofOFNOTIFYA = 24;

export function allocOFNOTIFYA(data?: Partial<OFNOTIFYA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: buffer
  if (data?.pszFile !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class OFNOTIFYAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYW (size: 24)
 */
export interface OFNOTIFYW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszFile: string | null | Uint8Array | Uint16Array;
}

export const sizeofOFNOTIFYW = 24;

export function allocOFNOTIFYW(data?: Partial<OFNOTIFYW>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: buffer
  if (data?.pszFile !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class OFNOTIFYWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYEXA (size: 32)
 */
export interface OFNOTIFYEXA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** ptr */
  psf: Deno.PointerValue | Uint8Array;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array;
}

export const sizeofOFNOTIFYEXA = 32;

export function allocOFNOTIFYEXA(data?: Partial<OFNOTIFYEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: pointer
  if (data?.psf !== undefined) view.setBigUint64(16, data.psf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psf))), true);
  // 0x18: pointer
  if (data?.pidl !== undefined) view.setBigUint64(24, data.pidl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidl))), true);
  return buf;
}

export class OFNOTIFYEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get psf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pidl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set psf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pidl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYEXW (size: 32)
 */
export interface OFNOTIFYEXW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** ptr */
  psf: Deno.PointerValue | Uint8Array;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array;
}

export const sizeofOFNOTIFYEXW = 32;

export function allocOFNOTIFYEXW(data?: Partial<OFNOTIFYEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: pointer
  if (data?.psf !== undefined) view.setBigUint64(16, data.psf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psf))), true);
  // 0x18: pointer
  if (data?.pidl !== undefined) view.setBigUint64(24, data.pidl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidl))), true);
  return buf;
}

export class OFNOTIFYEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get psf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pidl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set psf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pidl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type COLORREF = number;

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSECOLORA (size: 72)
 */
export interface CHOOSECOLORA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hInstance: Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  rgbResult: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpCustColors: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSECOLOR_FLAGS */
  Flags: CHOOSECOLOR_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCCHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
}

export const sizeofCHOOSECOLORA = 72;

export function allocCHOOSECOLORA(data?: Partial<CHOOSECOLORA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSECOLORA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.rgbResult !== undefined) view.setBigUint64(24, data.rgbResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbResult))), true);
  // 0x20: pointer
  if (data?.lpCustColors !== undefined) view.setBigUint64(32, data.lpCustColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCustColors))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class CHOOSECOLORAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rgbResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpCustColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rgbResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpCustColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSECOLORW (size: 72)
 */
export interface CHOOSECOLORW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hInstance: Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  rgbResult: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpCustColors: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSECOLOR_FLAGS */
  Flags: CHOOSECOLOR_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCCHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCHOOSECOLORW = 72;

export function allocCHOOSECOLORW(data?: Partial<CHOOSECOLORW>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSECOLORW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.rgbResult !== undefined) view.setBigUint64(24, data.rgbResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbResult))), true);
  // 0x20: pointer
  if (data?.lpCustColors !== undefined) view.setBigUint64(32, data.lpCustColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCustColors))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class CHOOSECOLORWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rgbResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpCustColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rgbResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpCustColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.FINDREPLACEA (size: 80)
 */
export interface FINDREPLACEA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.FINDREPLACE_FLAGS */
  Flags: FINDREPLACE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFindWhat: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReplaceWith: string | null | Uint8Array;
  /** u16 */
  wFindWhatLen: number;
  /** u16 */
  wReplaceWithLen: number;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPFRHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
}

export const sizeofFINDREPLACEA = 80;

export function allocFINDREPLACEA(data?: Partial<FINDREPLACEA>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDREPLACEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrFindWhat !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrFindWhat);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpstrReplaceWith !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrReplaceWith);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u16
  if (data?.wFindWhatLen !== undefined) view.setUint16(48, Number(data.wFindWhatLen), true);
  // 0x32: u16
  if (data?.wReplaceWithLen !== undefined) view.setUint16(50, Number(data.wReplaceWithLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(56, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x40: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(64, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x48: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class FINDREPLACEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrFindWhat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpstrReplaceWith(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get wFindWhatLen(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wReplaceWithLen(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrFindWhat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpstrReplaceWith(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u16
  set wFindWhatLen(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wReplaceWithLen(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.FINDREPLACEW (size: 80)
 */
export interface FINDREPLACEW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.FINDREPLACE_FLAGS */
  Flags: FINDREPLACE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFindWhat: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReplaceWith: string | null | Uint8Array | Uint16Array;
  /** u16 */
  wFindWhatLen: number;
  /** u16 */
  wReplaceWithLen: number;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPFRHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
}

export const sizeofFINDREPLACEW = 80;

export function allocFINDREPLACEW(data?: Partial<FINDREPLACEW>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDREPLACEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrFindWhat !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrFindWhat);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpstrReplaceWith !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrReplaceWith);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u16
  if (data?.wFindWhatLen !== undefined) view.setUint16(48, Number(data.wFindWhatLen), true);
  // 0x32: u16
  if (data?.wReplaceWithLen !== undefined) view.setUint16(50, Number(data.wReplaceWithLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(56, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x40: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(64, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x48: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class FINDREPLACEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrFindWhat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpstrReplaceWith(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get wFindWhatLen(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wReplaceWithLen(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrFindWhat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpstrReplaceWith(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u16
  set wFindWhatLen(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wReplaceWithLen(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

export type HDC = bigint | number;

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSEFONTA (size: 104)
 */
export interface CHOOSEFONTA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpLogFont: Deno.PointerValue | Uint8Array;
  /** i32 */
  iPointSize: number;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FLAGS */
  Flags: CHOOSEFONT_FLAGS;
  /** Windows.Win32.Foundation.COLORREF */
  rgbColors: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCFHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpszStyle: string | null | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FONT_TYPE */
  nFontType: CHOOSEFONT_FONT_TYPE;
  /** u16 */
  ___MISSING_ALIGNMENT__: number;
  /** i32 */
  nSizeMin: number;
  /** i32 */
  nSizeMax: number;
}

export const sizeofCHOOSEFONTA = 104;

export function allocCHOOSEFONTA(data?: Partial<CHOOSEFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSEFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x18: pointer
  if (data?.lpLogFont !== undefined) view.setBigUint64(24, data.lpLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLogFont))), true);
  // 0x20: i32
  if (data?.iPointSize !== undefined) view.setInt32(32, Number(data.iPointSize), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.rgbColors !== undefined) view.setBigUint64(40, data.rgbColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbColors))), true);
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(72, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x50: buffer
  if (data?.lpszStyle !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpszStyle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: u16
  if (data?.nFontType !== undefined) view.setUint16(88, Number(data.nFontType), true);
  // 0x5a: u16
  if (data?.___MISSING_ALIGNMENT__ !== undefined) view.setUint16(90, Number(data.___MISSING_ALIGNMENT__), true);
  // 0x5c: i32
  if (data?.nSizeMin !== undefined) view.setInt32(92, Number(data.nSizeMin), true);
  // 0x60: i32
  if (data?.nSizeMax !== undefined) view.setInt32(96, Number(data.nSizeMax), true);
  // 0x64: pad4
  return buf;
}

export class CHOOSEFONTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get iPointSize(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get rgbColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get lpszStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get nFontType(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: u16
  get ___MISSING_ALIGNMENT__(): number {
    return this.view.getUint16(90, true);
  }

  // 0x5c: i32
  get nSizeMin(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get nSizeMax(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set iPointSize(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set rgbColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: buffer
  set lpszStyle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: u16
  set nFontType(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: u16
  set ___MISSING_ALIGNMENT__(value: number) {
    this.view.setUint16(90, value, true);
  }

  // 0x5c: i32
  set nSizeMin(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set nSizeMax(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSEFONTW (size: 104)
 */
export interface CHOOSEFONTW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpLogFont: Deno.PointerValue | Uint8Array;
  /** i32 */
  iPointSize: number;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FLAGS */
  Flags: CHOOSEFONT_FLAGS;
  /** Windows.Win32.Foundation.COLORREF */
  rgbColors: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCFHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszStyle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FONT_TYPE */
  nFontType: CHOOSEFONT_FONT_TYPE;
  /** u16 */
  ___MISSING_ALIGNMENT__: number;
  /** i32 */
  nSizeMin: number;
  /** i32 */
  nSizeMax: number;
}

export const sizeofCHOOSEFONTW = 104;

export function allocCHOOSEFONTW(data?: Partial<CHOOSEFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSEFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x18: pointer
  if (data?.lpLogFont !== undefined) view.setBigUint64(24, data.lpLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLogFont))), true);
  // 0x20: i32
  if (data?.iPointSize !== undefined) view.setInt32(32, Number(data.iPointSize), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.rgbColors !== undefined) view.setBigUint64(40, data.rgbColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbColors))), true);
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(72, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x50: buffer
  if (data?.lpszStyle !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpszStyle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: u16
  if (data?.nFontType !== undefined) view.setUint16(88, Number(data.nFontType), true);
  // 0x5a: u16
  if (data?.___MISSING_ALIGNMENT__ !== undefined) view.setUint16(90, Number(data.___MISSING_ALIGNMENT__), true);
  // 0x5c: i32
  if (data?.nSizeMin !== undefined) view.setInt32(92, Number(data.nSizeMin), true);
  // 0x60: i32
  if (data?.nSizeMax !== undefined) view.setInt32(96, Number(data.nSizeMax), true);
  // 0x64: pad4
  return buf;
}

export class CHOOSEFONTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get iPointSize(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get rgbColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get lpszStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get nFontType(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: u16
  get ___MISSING_ALIGNMENT__(): number {
    return this.view.getUint16(90, true);
  }

  // 0x5c: i32
  get nSizeMin(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get nSizeMax(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set iPointSize(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set rgbColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: buffer
  set lpszStyle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: u16
  set nFontType(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: u16
  set ___MISSING_ALIGNMENT__(value: number) {
    this.view.setUint16(90, value, true);
  }

  // 0x5c: i32
  set nSizeMin(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set nSizeMax(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGA (size: 120)
 */
export interface PRINTDLGA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u16 */
  nFromPage: number;
  /** u16 */
  nToPage: number;
  /** u16 */
  nMinPage: number;
  /** u16 */
  nMaxPage: number;
  /** u16 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPRINTHOOKPROC */
  lpfnPrintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPSETUPHOOKPROC */
  lpfnSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpPrintTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpSetupTemplateName: string | null | Uint8Array;
  /** isize */
  hPrintTemplate: bigint | number;
  /** isize */
  hSetupTemplate: bigint | number;
}

export const sizeofPRINTDLGA = 120;

export function allocPRINTDLGA(data?: Partial<PRINTDLGA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u16
  if (data?.nFromPage !== undefined) view.setUint16(44, Number(data.nFromPage), true);
  // 0x2e: u16
  if (data?.nToPage !== undefined) view.setUint16(46, Number(data.nToPage), true);
  // 0x30: u16
  if (data?.nMinPage !== undefined) view.setUint16(48, Number(data.nMinPage), true);
  // 0x32: u16
  if (data?.nMaxPage !== undefined) view.setUint16(50, Number(data.nMaxPage), true);
  // 0x34: u16
  if (data?.nCopies !== undefined) view.setUint16(52, Number(data.nCopies), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(56, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x40: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(64, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x48: pointer
  if (data?.lpfnPrintHook !== undefined) view.setBigUint64(72, data.lpfnPrintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPrintHook))), true);
  // 0x50: pointer
  if (data?.lpfnSetupHook !== undefined) view.setBigUint64(80, data.lpfnSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnSetupHook))), true);
  // 0x58: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.lpSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPrintTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPrintTemplate), true);
  // 0x70: isize
  if (data?.hSetupTemplate !== undefined) view.setBigInt64(112, BigInt(data.hSetupTemplate), true);
  return buf;
}

export class PRINTDLGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get nFromPage(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get nToPage(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get nMinPage(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get nMaxPage(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get nCopies(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnPrintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPrintTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get hSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set nFromPage(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set nToPage(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set nMinPage(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set nMaxPage(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set nCopies(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnPrintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set lpSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPrintTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set hSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGW (size: 120)
 */
export interface PRINTDLGW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u16 */
  nFromPage: number;
  /** u16 */
  nToPage: number;
  /** u16 */
  nMinPage: number;
  /** u16 */
  nMaxPage: number;
  /** u16 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPRINTHOOKPROC */
  lpfnPrintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPSETUPHOOKPROC */
  lpfnSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpPrintTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpSetupTemplateName: string | null | Uint8Array | Uint16Array;
  /** isize */
  hPrintTemplate: bigint | number;
  /** isize */
  hSetupTemplate: bigint | number;
}

export const sizeofPRINTDLGW = 120;

export function allocPRINTDLGW(data?: Partial<PRINTDLGW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u16
  if (data?.nFromPage !== undefined) view.setUint16(44, Number(data.nFromPage), true);
  // 0x2e: u16
  if (data?.nToPage !== undefined) view.setUint16(46, Number(data.nToPage), true);
  // 0x30: u16
  if (data?.nMinPage !== undefined) view.setUint16(48, Number(data.nMinPage), true);
  // 0x32: u16
  if (data?.nMaxPage !== undefined) view.setUint16(50, Number(data.nMaxPage), true);
  // 0x34: u16
  if (data?.nCopies !== undefined) view.setUint16(52, Number(data.nCopies), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(56, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x40: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(64, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x48: pointer
  if (data?.lpfnPrintHook !== undefined) view.setBigUint64(72, data.lpfnPrintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPrintHook))), true);
  // 0x50: pointer
  if (data?.lpfnSetupHook !== undefined) view.setBigUint64(80, data.lpfnSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnSetupHook))), true);
  // 0x58: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.lpSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPrintTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPrintTemplate), true);
  // 0x70: isize
  if (data?.hSetupTemplate !== undefined) view.setBigInt64(112, BigInt(data.hSetupTemplate), true);
  return buf;
}

export class PRINTDLGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get nFromPage(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get nToPage(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get nMinPage(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get nMaxPage(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get nCopies(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnPrintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPrintTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get hSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set nFromPage(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set nToPage(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set nMinPage(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set nMaxPage(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set nCopies(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnPrintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set lpSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPrintTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set hSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTPAGERANGE (size: 8)
 */
export interface PRINTPAGERANGE {
  /** u32 */
  nFromPage: number;
  /** u32 */
  nToPage: number;
}

export const sizeofPRINTPAGERANGE = 8;

export function allocPRINTPAGERANGE(data?: Partial<PRINTPAGERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPAGERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nFromPage !== undefined) view.setUint32(0, Number(data.nFromPage), true);
  // 0x04: u32
  if (data?.nToPage !== undefined) view.setUint32(4, Number(data.nToPage), true);
  return buf;
}

export class PRINTPAGERANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nFromPage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nToPage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set nFromPage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nToPage(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXA (size: 136)
 */
export interface PRINTDLGEXA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u32 */
  Flags2: number;
  /** u32 */
  ExclusionFlags: number;
  /** u32 */
  nPageRanges: number;
  /** u32 */
  nMaxPageRanges: number;
  /** ptr */
  lpPageRanges: Deno.PointerValue | Uint8Array;
  /** u32 */
  nMinPage: number;
  /** u32 */
  nMaxPage: number;
  /** u32 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpPrintTemplateName: string | null | Uint8Array;
  /** Windows.Win32.System.Com.IUnknown */
  lpCallback: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPropertyPages: number;
  /** ptr */
  lphPropertyPages: Deno.PointerValue | Uint8Array;
  /** u32 */
  nStartPage: number;
  /** u32 */
  dwResultAction: number;
}

export const sizeofPRINTDLGEXA = 136;

export function allocPRINTDLGEXA(data?: Partial<PRINTDLGEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGEXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u32
  if (data?.Flags2 !== undefined) view.setUint32(44, Number(data.Flags2), true);
  // 0x30: u32
  if (data?.ExclusionFlags !== undefined) view.setUint32(48, Number(data.ExclusionFlags), true);
  // 0x34: u32
  if (data?.nPageRanges !== undefined) view.setUint32(52, Number(data.nPageRanges), true);
  // 0x38: u32
  if (data?.nMaxPageRanges !== undefined) view.setUint32(56, Number(data.nMaxPageRanges), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpPageRanges !== undefined) view.setBigUint64(64, data.lpPageRanges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPageRanges))), true);
  // 0x48: u32
  if (data?.nMinPage !== undefined) view.setUint32(72, Number(data.nMinPage), true);
  // 0x4c: u32
  if (data?.nMaxPage !== undefined) view.setUint32(76, Number(data.nMaxPage), true);
  // 0x50: u32
  if (data?.nCopies !== undefined) view.setUint32(80, Number(data.nCopies), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(88, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x60: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: pointer
  if (data?.lpCallback !== undefined) view.setBigUint64(104, data.lpCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCallback))), true);
  // 0x70: u32
  if (data?.nPropertyPages !== undefined) view.setUint32(112, Number(data.nPropertyPages), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.lphPropertyPages !== undefined) view.setBigUint64(120, data.lphPropertyPages === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lphPropertyPages))), true);
  // 0x80: u32
  if (data?.nStartPage !== undefined) view.setUint32(128, Number(data.nStartPage), true);
  // 0x84: u32
  if (data?.dwResultAction !== undefined) view.setUint32(132, Number(data.dwResultAction), true);
  return buf;
}

export class PRINTDLGEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ExclusionFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get nPageRanges(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get nMaxPageRanges(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get lpPageRanges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMinPage(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get nMaxPage(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get nCopies(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get lpCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get nPropertyPages(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get lphPropertyPages(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get nStartPage(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwResultAction(): number {
    return this.view.getUint32(132, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ExclusionFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set nPageRanges(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set nMaxPageRanges(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set lpPageRanges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set nMinPage(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set nMaxPage(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set nCopies(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: pointer
  set lpCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set nPropertyPages(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set lphPropertyPages(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set nStartPage(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwResultAction(value: number) {
    this.view.setUint32(132, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW (size: 136)
 */
export interface PRINTDLGEXW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u32 */
  Flags2: number;
  /** u32 */
  ExclusionFlags: number;
  /** u32 */
  nPageRanges: number;
  /** u32 */
  nMaxPageRanges: number;
  /** ptr */
  lpPageRanges: Deno.PointerValue | Uint8Array;
  /** u32 */
  nMinPage: number;
  /** u32 */
  nMaxPage: number;
  /** u32 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpPrintTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.IUnknown */
  lpCallback: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPropertyPages: number;
  /** ptr */
  lphPropertyPages: Deno.PointerValue | Uint8Array;
  /** u32 */
  nStartPage: number;
  /** u32 */
  dwResultAction: number;
}

export const sizeofPRINTDLGEXW = 136;

export function allocPRINTDLGEXW(data?: Partial<PRINTDLGEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGEXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u32
  if (data?.Flags2 !== undefined) view.setUint32(44, Number(data.Flags2), true);
  // 0x30: u32
  if (data?.ExclusionFlags !== undefined) view.setUint32(48, Number(data.ExclusionFlags), true);
  // 0x34: u32
  if (data?.nPageRanges !== undefined) view.setUint32(52, Number(data.nPageRanges), true);
  // 0x38: u32
  if (data?.nMaxPageRanges !== undefined) view.setUint32(56, Number(data.nMaxPageRanges), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpPageRanges !== undefined) view.setBigUint64(64, data.lpPageRanges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPageRanges))), true);
  // 0x48: u32
  if (data?.nMinPage !== undefined) view.setUint32(72, Number(data.nMinPage), true);
  // 0x4c: u32
  if (data?.nMaxPage !== undefined) view.setUint32(76, Number(data.nMaxPage), true);
  // 0x50: u32
  if (data?.nCopies !== undefined) view.setUint32(80, Number(data.nCopies), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(88, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x60: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: pointer
  if (data?.lpCallback !== undefined) view.setBigUint64(104, data.lpCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCallback))), true);
  // 0x70: u32
  if (data?.nPropertyPages !== undefined) view.setUint32(112, Number(data.nPropertyPages), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.lphPropertyPages !== undefined) view.setBigUint64(120, data.lphPropertyPages === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lphPropertyPages))), true);
  // 0x80: u32
  if (data?.nStartPage !== undefined) view.setUint32(128, Number(data.nStartPage), true);
  // 0x84: u32
  if (data?.dwResultAction !== undefined) view.setUint32(132, Number(data.dwResultAction), true);
  return buf;
}

export class PRINTDLGEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ExclusionFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get nPageRanges(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get nMaxPageRanges(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get lpPageRanges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMinPage(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get nMaxPage(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get nCopies(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get lpCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get nPropertyPages(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get lphPropertyPages(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get nStartPage(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwResultAction(): number {
    return this.view.getUint32(132, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ExclusionFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set nPageRanges(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set nMaxPageRanges(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set lpPageRanges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set nMinPage(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set nMaxPage(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set nCopies(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: pointer
  set lpCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set nPropertyPages(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set lphPropertyPages(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set nStartPage(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwResultAction(value: number) {
    this.view.setUint32(132, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.DEVNAMES (size: 8)
 */
export interface DEVNAMES {
  /** u16 */
  wDriverOffset: number;
  /** u16 */
  wDeviceOffset: number;
  /** u16 */
  wOutputOffset: number;
  /** u16 */
  wDefault: number;
}

export const sizeofDEVNAMES = 8;

export function allocDEVNAMES(data?: Partial<DEVNAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVNAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDriverOffset !== undefined) view.setUint16(0, Number(data.wDriverOffset), true);
  // 0x02: u16
  if (data?.wDeviceOffset !== undefined) view.setUint16(2, Number(data.wDeviceOffset), true);
  // 0x04: u16
  if (data?.wOutputOffset !== undefined) view.setUint16(4, Number(data.wOutputOffset), true);
  // 0x06: u16
  if (data?.wDefault !== undefined) view.setUint16(6, Number(data.wDefault), true);
  return buf;
}

export class DEVNAMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wDriverOffset(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wDeviceOffset(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wOutputOffset(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDefault(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set wDriverOffset(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wDeviceOffset(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wOutputOffset(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDefault(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLGA (size: 112)
 */
export interface PAGESETUPDLGA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLG_FLAGS */
  Flags: PAGESETUPDLG_FLAGS;
  /** Windows.Win32.Foundation.POINT */
  ptPaperSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMinMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGESETUPHOOK */
  lpfnPageSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGEPAINTHOOK */
  lpfnPagePaintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpPageSetupTemplateName: string | null | Uint8Array;
  /** isize */
  hPageSetupTemplate: bigint | number;
}

export const sizeofPAGESETUPDLGA = 112;

export function allocPAGESETUPDLGA(data?: Partial<PAGESETUPDLGA>): Uint8Array {
  const buf = new Uint8Array(sizeofPAGESETUPDLGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ptPaperSize !== undefined) view.setBigUint64(40, data.ptPaperSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptPaperSize))), true);
  // 0x30: pointer
  if (data?.rtMinMargin !== undefined) view.setBigUint64(48, data.rtMinMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMinMargin))), true);
  // 0x38: pointer
  if (data?.rtMargin !== undefined) view.setBigUint64(56, data.rtMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMargin))), true);
  // 0x40: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(64, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x48: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(72, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x50: pointer
  if (data?.lpfnPageSetupHook !== undefined) view.setBigUint64(80, data.lpfnPageSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPageSetupHook))), true);
  // 0x58: pointer
  if (data?.lpfnPagePaintHook !== undefined) view.setBigUint64(88, data.lpfnPagePaintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPagePaintHook))), true);
  // 0x60: buffer
  if (data?.lpPageSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpPageSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPageSetupTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPageSetupTemplate), true);
  return buf;
}

export class PAGESETUPDLGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ptPaperSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get rtMinMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rtMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnPageSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get lpfnPagePaintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPageSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPageSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ptPaperSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set rtMinMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rtMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnPageSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set lpfnPagePaintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPageSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPageSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLGW (size: 112)
 */
export interface PAGESETUPDLGW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLG_FLAGS */
  Flags: PAGESETUPDLG_FLAGS;
  /** Windows.Win32.Foundation.POINT */
  ptPaperSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMinMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGESETUPHOOK */
  lpfnPageSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGEPAINTHOOK */
  lpfnPagePaintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpPageSetupTemplateName: string | null | Uint8Array | Uint16Array;
  /** isize */
  hPageSetupTemplate: bigint | number;
}

export const sizeofPAGESETUPDLGW = 112;

export function allocPAGESETUPDLGW(data?: Partial<PAGESETUPDLGW>): Uint8Array {
  const buf = new Uint8Array(sizeofPAGESETUPDLGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ptPaperSize !== undefined) view.setBigUint64(40, data.ptPaperSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptPaperSize))), true);
  // 0x30: pointer
  if (data?.rtMinMargin !== undefined) view.setBigUint64(48, data.rtMinMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMinMargin))), true);
  // 0x38: pointer
  if (data?.rtMargin !== undefined) view.setBigUint64(56, data.rtMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMargin))), true);
  // 0x40: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(64, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x48: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(72, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x50: pointer
  if (data?.lpfnPageSetupHook !== undefined) view.setBigUint64(80, data.lpfnPageSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPageSetupHook))), true);
  // 0x58: pointer
  if (data?.lpfnPagePaintHook !== undefined) view.setBigUint64(88, data.lpfnPagePaintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPagePaintHook))), true);
  // 0x60: buffer
  if (data?.lpPageSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpPageSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPageSetupTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPageSetupTemplate), true);
  return buf;
}

export class PAGESETUPDLGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ptPaperSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get rtMinMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rtMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnPageSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get lpfnPagePaintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPageSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPageSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ptPaperSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set rtMinMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rtMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnPageSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set lpfnPagePaintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPageSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPageSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: bigint | number;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: bigint | number;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEA_V1 (size: 72)
 */
export interface PROPSHEETPAGEA_V1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKA */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
}

export const sizeofPROPSHEETPAGEA_V1 = 72;

export function allocPROPSHEETPAGEA_V1(data?: Partial<PROPSHEETPAGEA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  return buf;
}

export class PROPSHEETPAGEA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEA_V2 (size: 88)
 */
export interface PROPSHEETPAGEA_V2 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKA */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaderTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaderSubTitle: string | null | Uint8Array;
}

export const sizeofPROPSHEETPAGEA_V2 = 88;

export function allocPROPSHEETPAGEA_V2(data?: Partial<PROPSHEETPAGEA_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEA_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  // 0x48: buffer
  if (data?.pszHeaderTitle !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pszHeaderTitle);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszHeaderSubTitle !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pszHeaderSubTitle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  return buf;
}

export class PROPSHEETPAGEA_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszHeaderTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszHeaderSubTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set pszHeaderTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszHeaderSubTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEA_V3 (size: 96)
 */
export interface PROPSHEETPAGEA_V3 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKA */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaderTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaderSubTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETPAGEA_V3 = 96;

export function allocPROPSHEETPAGEA_V3(data?: Partial<PROPSHEETPAGEA_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEA_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  // 0x48: buffer
  if (data?.pszHeaderTitle !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pszHeaderTitle);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszHeaderSubTitle !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pszHeaderSubTitle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(88, data.hActCtx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hActCtx))), true);
  return buf;
}

export class PROPSHEETPAGEA_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszHeaderTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszHeaderSubTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get hActCtx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set pszHeaderTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszHeaderSubTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set hActCtx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSAlphaDest))), true);
  return buf;
}

export class _Anonymous3_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaDestConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAlphaDestConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEA (size: 104)
 */
export interface PROPSHEETPAGEA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKA */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaderTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHeaderSubTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETPAGEA = 104;

export function allocPROPSHEETPAGEA(data?: Partial<PROPSHEETPAGEA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  // 0x48: buffer
  if (data?.pszHeaderTitle !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pszHeaderTitle);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszHeaderSubTitle !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pszHeaderSubTitle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(88, data.hActCtx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hActCtx))), true);
  // 0x60: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(96, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  return buf;
}

export class PROPSHEETPAGEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszHeaderTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszHeaderSubTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get hActCtx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set pszHeaderTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszHeaderSubTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set hActCtx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEW_V1 (size: 72)
 */
export interface PROPSHEETPAGEW_V1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKW */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
}

export const sizeofPROPSHEETPAGEW_V1 = 72;

export function allocPROPSHEETPAGEW_V1(data?: Partial<PROPSHEETPAGEW_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEW_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  return buf;
}

export class PROPSHEETPAGEW_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEW_V2 (size: 88)
 */
export interface PROPSHEETPAGEW_V2 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKW */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeaderTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeaderSubTitle: string | null | Uint8Array | Uint16Array;
}

export const sizeofPROPSHEETPAGEW_V2 = 88;

export function allocPROPSHEETPAGEW_V2(data?: Partial<PROPSHEETPAGEW_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEW_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  // 0x48: buffer
  if (data?.pszHeaderTitle !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszHeaderTitle);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszHeaderSubTitle !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszHeaderSubTitle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  return buf;
}

export class PROPSHEETPAGEW_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszHeaderTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszHeaderSubTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set pszHeaderTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszHeaderSubTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEW_V3 (size: 96)
 */
export interface PROPSHEETPAGEW_V3 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKW */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeaderTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeaderSubTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETPAGEW_V3 = 96;

export function allocPROPSHEETPAGEW_V3(data?: Partial<PROPSHEETPAGEW_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEW_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  // 0x48: buffer
  if (data?.pszHeaderTitle !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszHeaderTitle);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszHeaderSubTitle !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszHeaderSubTitle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(88, data.hActCtx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hActCtx))), true);
  return buf;
}

export class PROPSHEETPAGEW_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszHeaderTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszHeaderSubTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get hActCtx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set pszHeaderTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszHeaderSubTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set hActCtx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETPAGEW (size: 104)
 */
export interface PROPSHEETPAGEW {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pfnDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNPSPCALLBACKW */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pcRefParent: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeaderTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeaderSubTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hActCtx: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETPAGEW = 104;

export function allocPROPSHEETPAGEW(data?: Partial<PROPSHEETPAGEW>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETPAGEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.pfnDlgProc !== undefined) view.setBigUint64(40, data.pfnDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDlgProc))), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.pcRefParent !== undefined) view.setBigUint64(64, data.pcRefParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcRefParent))), true);
  // 0x48: buffer
  if (data?.pszHeaderTitle !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszHeaderTitle);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszHeaderSubTitle !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszHeaderSubTitle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.hActCtx !== undefined) view.setBigUint64(88, data.hActCtx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hActCtx))), true);
  // 0x60: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(96, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  return buf;
}

export class PROPSHEETPAGEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pcRefParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pszHeaderTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszHeaderSubTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get hActCtx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set pfnDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pcRefParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set pszHeaderTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszHeaderSubTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set hActCtx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETHEADERA_V1 (size: 72)
 */
export interface PROPSHEETHEADERA_V1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszCaption: string | null | Uint8Array;
  /** u32 */
  nPages: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.PFNPROPSHEETCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETHEADERA_V1 = 72;

export function allocPROPSHEETHEADERA_V1(data?: Partial<PROPSHEETHEADERA_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETHEADERA_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: buffer
  if (data?.pszCaption !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszCaption);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nPages !== undefined) view.setUint32(40, Number(data.nPages), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x40: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(64, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  return buf;
}

export class PROPSHEETHEADERA_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nPages(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nPages(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous4_e__Union (size: 16)
 */
export interface _Anonymous4_e__Union {
  /** u32 */
  dwAlphaSrcConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaSrc: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous4_e__Union = 16;

export function alloc_Anonymous4_e__Union(data?: Partial<_Anonymous4_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous4_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaSrcConst !== undefined) view.setUint32(0, Number(data.dwAlphaSrcConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaSrc !== undefined) view.setBigUint64(8, data.lpDDSAlphaSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSAlphaSrc))), true);
  return buf;
}

export class _Anonymous4_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaSrcConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAlphaSrcConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HPALETTE = bigint | number;

/**
 * _Anonymous5_e__Union (size: 24)
 */
export interface _Anonymous5_e__Union {
  /** u32 */
  dwFillColor: number;
  /** u32 */
  dwFillDepth: number;
  /** u32 */
  dwFillPixel: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSPattern: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous5_e__Union = 24;

export function alloc_Anonymous5_e__Union(data?: Partial<_Anonymous5_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous5_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFillColor !== undefined) view.setUint32(0, Number(data.dwFillColor), true);
  // 0x04: u32
  if (data?.dwFillDepth !== undefined) view.setUint32(4, Number(data.dwFillDepth), true);
  // 0x08: u32
  if (data?.dwFillPixel !== undefined) view.setUint32(8, Number(data.dwFillPixel), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpDDSPattern !== undefined) view.setBigUint64(16, data.lpDDSPattern === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSPattern))), true);
  return buf;
}

export class _Anonymous5_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFillColor(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFillDepth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFillPixel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpDDSPattern(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFillColor(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFillDepth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFillPixel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpDDSPattern(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETHEADERA_V2 (size: 96)
 */
export interface PROPSHEETHEADERA_V2 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszCaption: string | null | Uint8Array;
  /** u32 */
  nPages: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.PFNPROPSHEETCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hplWatermark: Uint8Array | Deno.PointerValue;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETHEADERA_V2 = 96;

export function allocPROPSHEETHEADERA_V2(data?: Partial<PROPSHEETHEADERA_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETHEADERA_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: buffer
  if (data?.pszCaption !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszCaption);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nPages !== undefined) view.setUint32(40, Number(data.nPages), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x40: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(64, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x48: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(72, data.Anonymous4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous4))), true);
  // 0x50: pointer
  if (data?.hplWatermark !== undefined) view.setBigUint64(80, data.hplWatermark === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hplWatermark))), true);
  // 0x58: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(88, data.Anonymous5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous5))), true);
  return buf;
}

export class PROPSHEETHEADERA_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nPages(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get hplWatermark(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Anonymous5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nPages(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set hplWatermark(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Anonymous5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETHEADERW_V1 (size: 72)
 */
export interface PROPSHEETHEADERW_V1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCaption: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nPages: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.PFNPROPSHEETCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETHEADERW_V1 = 72;

export function allocPROPSHEETHEADERW_V1(data?: Partial<PROPSHEETHEADERW_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETHEADERW_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: buffer
  if (data?.pszCaption !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszCaption);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nPages !== undefined) view.setUint32(40, Number(data.nPages), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x40: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(64, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  return buf;
}

export class PROPSHEETHEADERW_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nPages(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nPages(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PROPSHEETHEADERW_V2 (size: 96)
 */
export interface PROPSHEETHEADERW_V2 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCaption: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nPages: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.PFNPROPSHEETCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HPALETTE */
  hplWatermark: Uint8Array | Deno.PointerValue;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETHEADERW_V2 = 96;

export function allocPROPSHEETHEADERW_V2(data?: Partial<PROPSHEETHEADERW_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETHEADERW_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: buffer
  if (data?.pszCaption !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszCaption);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nPages !== undefined) view.setUint32(40, Number(data.nPages), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(48, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x40: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(64, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x48: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(72, data.Anonymous4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous4))), true);
  // 0x50: pointer
  if (data?.hplWatermark !== undefined) view.setBigUint64(80, data.hplWatermark === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hplWatermark))), true);
  // 0x58: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(88, data.Anonymous5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous5))), true);
  return buf;
}

export class PROPSHEETHEADERW_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nPages(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get hplWatermark(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Anonymous5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nPages(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set hplWatermark(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Anonymous5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.PSHNOTIFY (size: 16)
 */
export interface PSHNOTIFY {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofPSHNOTIFY = 16;

export function allocPSHNOTIFY(data?: Partial<PSHNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofPSHNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class PSHNOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.INITCOMMONCONTROLSEX (size: 8)
 */
export interface INITCOMMONCONTROLSEX {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.UI.Controls.INITCOMMONCONTROLSEX_ICC */
  dwICC: INITCOMMONCONTROLSEX_ICC;
}

export const sizeofINITCOMMONCONTROLSEX = 8;

export function allocINITCOMMONCONTROLSEX(data?: Partial<INITCOMMONCONTROLSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofINITCOMMONCONTROLSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwICC !== undefined) view.setUint32(4, Number(data.dwICC), true);
  return buf;
}

export class INITCOMMONCONTROLSEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwICC(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwICC(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.COLORSCHEME (size: 24)
 */
export interface COLORSCHEME {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrBtnHighlight: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrBtnShadow: Uint8Array | Deno.PointerValue;
}

export const sizeofCOLORSCHEME = 24;

export function allocCOLORSCHEME(data?: Partial<COLORSCHEME>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORSCHEME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clrBtnHighlight !== undefined) view.setBigUint64(8, data.clrBtnHighlight === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBtnHighlight))), true);
  // 0x10: pointer
  if (data?.clrBtnShadow !== undefined) view.setBigUint64(16, data.clrBtnShadow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBtnShadow))), true);
  return buf;
}

export class COLORSCHEMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get clrBtnHighlight(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get clrBtnShadow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set clrBtnHighlight(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set clrBtnShadow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTOOLTIPSCREATED (size: 16)
 */
export interface NMTOOLTIPSCREATED {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndToolTips: Deno.PointerValue;
}

export const sizeofNMTOOLTIPSCREATED = 16;

export function allocNMTOOLTIPSCREATED(data?: Partial<NMTOOLTIPSCREATED>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTOOLTIPSCREATED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.hwndToolTips !== undefined) view.setBigUint64(8, data.hwndToolTips === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndToolTips))), true);
  return buf;
}

export class NMTOOLTIPSCREATEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hwndToolTips(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hwndToolTips(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMMOUSE (size: 40)
 */
export interface NMMOUSE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** usize */
  dwItemSpec: bigint | number;
  /** usize */
  dwItemData: bigint | number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  dwHitInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofNMMOUSE = 40;

export function allocNMMOUSE(data?: Partial<NMMOUSE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMMOUSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: usize
  if (data?.dwItemSpec !== undefined) view.setBigUint64(8, BigInt(data.dwItemSpec), true);
  // 0x10: usize
  if (data?.dwItemData !== undefined) view.setBigUint64(16, BigInt(data.dwItemData), true);
  // 0x18: pointer
  if (data?.pt !== undefined) view.setBigUint64(24, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x20: pointer
  if (data?.dwHitInfo !== undefined) view.setBigUint64(32, data.dwHitInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwHitInfo))), true);
  return buf;
}

export class NMMOUSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get dwItemSpec(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get dwItemData(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get dwHitInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set dwItemSpec(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set dwItemData(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set dwHitInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.UI.Controls.NMOBJECTNOTIFY (size: 48)
 */
export interface NMOBJECTNOTIFY {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** ptr */
  piid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pObject: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  hResult: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofNMOBJECTNOTIFY = 48;

export function allocNMOBJECTNOTIFY(data?: Partial<NMOBJECTNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofNMOBJECTNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.piid !== undefined) view.setBigUint64(16, data.piid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.piid))), true);
  // 0x18: pointer
  if (data?.pObject !== undefined) view.setBigUint64(24, data.pObject === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObject))), true);
  // 0x20: pointer
  if (data?.hResult !== undefined) view.setBigUint64(32, data.hResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hResult))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  return buf;
}

export class NMOBJECTNOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get piid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pObject(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set piid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pObject(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set hResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMKEY (size: 16)
 */
export interface NMKEY {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  nVKey: number;
  /** u32 */
  uFlags: number;
}

export const sizeofNMKEY = 16;

export function allocNMKEY(data?: Partial<NMKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofNMKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.nVKey !== undefined) view.setUint32(8, Number(data.nVKey), true);
  // 0x0c: u32
  if (data?.uFlags !== undefined) view.setUint32(12, Number(data.uFlags), true);
  return buf;
}

export class NMKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get nVKey(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set nVKey(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uFlags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCHAR (size: 24)
 */
export interface NMCHAR {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  ch: number;
  /** u32 */
  dwItemPrev: number;
  /** u32 */
  dwItemNext: number;
}

export const sizeofNMCHAR = 24;

export function allocNMCHAR(data?: Partial<NMCHAR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCHAR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.ch !== undefined) view.setUint32(8, Number(data.ch), true);
  // 0x0c: u32
  if (data?.dwItemPrev !== undefined) view.setUint32(12, Number(data.dwItemPrev), true);
  // 0x10: u32
  if (data?.dwItemNext !== undefined) view.setUint32(16, Number(data.dwItemNext), true);
  // 0x14: pad4
  return buf;
}

export class NMCHARView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwItemPrev(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwItemNext(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwItemPrev(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwItemNext(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type BOOL = number;

/**
 * Windows.Win32.UI.Controls.NMCUSTOMTEXT (size: 48)
 */
export interface NMCUSTOMTEXT {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpString: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nCount: number;
  /** ptr */
  lpRect: Deno.PointerValue | Uint8Array;
  /** u32 */
  uFormat: number;
  /** Windows.Win32.Foundation.BOOL */
  fLink: boolean;
}

export const sizeofNMCUSTOMTEXT = 48;

export function allocNMCUSTOMTEXT(data?: Partial<NMCUSTOMTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCUSTOMTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.hDC !== undefined) view.setBigUint64(8, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x10: buffer
  if (data?.lpString !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.nCount !== undefined) view.setInt32(24, Number(data.nCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpRect !== undefined) view.setBigUint64(32, data.lpRect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpRect))), true);
  // 0x28: u32
  if (data?.uFormat !== undefined) view.setUint32(40, Number(data.uFormat), true);
  // 0x2c: i32
  if (data?.fLink !== undefined) view.setInt32(44, Number(data.fLink), true);
  return buf;
}

export class NMCUSTOMTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get nCount(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpRect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get uFormat(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get fLink(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set lpString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set nCount(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpRect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set uFormat(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set fLink(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCUSTOMDRAW (size: 56)
 */
export interface NMCUSTOMDRAW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMCUSTOMDRAW_DRAW_STAGE */
  dwDrawStage: NMCUSTOMDRAW_DRAW_STAGE;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
  /** usize */
  dwItemSpec: bigint | number;
  /** Windows.Win32.UI.Controls.NMCUSTOMDRAW_DRAW_STATE_FLAGS */
  uItemState: NMCUSTOMDRAW_DRAW_STATE_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lItemlParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMCUSTOMDRAW = 56;

export function allocNMCUSTOMDRAW(data?: Partial<NMCUSTOMDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCUSTOMDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwDrawStage !== undefined) view.setUint32(8, Number(data.dwDrawStage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hdc !== undefined) view.setBigUint64(16, data.hdc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdc))), true);
  // 0x18: pointer
  if (data?.rc !== undefined) view.setBigUint64(24, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  // 0x20: usize
  if (data?.dwItemSpec !== undefined) view.setBigUint64(32, BigInt(data.dwItemSpec), true);
  // 0x28: u32
  if (data?.uItemState !== undefined) view.setUint32(40, Number(data.uItemState), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lItemlParam !== undefined) view.setBigUint64(48, data.lItemlParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lItemlParam))), true);
  return buf;
}

export class NMCUSTOMDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwDrawStage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hdc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: usize
  get dwItemSpec(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u32
  get uItemState(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lItemlParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwDrawStage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hdc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: usize
  set dwItemSpec(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u32
  set uItemState(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lItemlParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTTCUSTOMDRAW (size: 16)
 */
export interface NMTTCUSTOMDRAW {
  /** Windows.Win32.UI.Controls.NMCUSTOMDRAW */
  nmcd: Uint8Array | Deno.PointerValue;
  /** u32 */
  uDrawFlags: number;
}

export const sizeofNMTTCUSTOMDRAW = 16;

export function allocNMTTCUSTOMDRAW(data?: Partial<NMTTCUSTOMDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTTCUSTOMDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmcd !== undefined) view.setBigUint64(0, data.nmcd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmcd))), true);
  // 0x08: u32
  if (data?.uDrawFlags !== undefined) view.setUint32(8, Number(data.uDrawFlags), true);
  // 0x0c: pad4
  return buf;
}

export class NMTTCUSTOMDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmcd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uDrawFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set nmcd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uDrawFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMCUSTOMSPLITRECTINFO (size: 32)
 */
export interface NMCUSTOMSPLITRECTINFO {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcClient: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcButton: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcSplit: Uint8Array | Deno.PointerValue;
}

export const sizeofNMCUSTOMSPLITRECTINFO = 32;

export function allocNMCUSTOMSPLITRECTINFO(data?: Partial<NMCUSTOMSPLITRECTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCUSTOMSPLITRECTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.rcClient !== undefined) view.setBigUint64(8, data.rcClient === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcClient))), true);
  // 0x10: pointer
  if (data?.rcButton !== undefined) view.setBigUint64(16, data.rcButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcButton))), true);
  // 0x18: pointer
  if (data?.rcSplit !== undefined) view.setBigUint64(24, data.rcSplit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSplit))), true);
  return buf;
}

export class NMCUSTOMSPLITRECTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rcClient(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rcSplit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rcClient(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rcSplit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.IMAGELISTDRAWPARAMS (size: 96)
 */
export interface IMAGELISTDRAWPARAMS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.HIMAGELIST */
  himl: Uint8Array | Deno.PointerValue;
  /** i32 */
  i: number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdcDst: Uint8Array | Deno.PointerValue;
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
  /** i32 */
  xBitmap: number;
  /** i32 */
  yBitmap: number;
  /** Windows.Win32.Foundation.COLORREF */
  rgbBk: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  rgbFg: Uint8Array | Deno.PointerValue;
  /** u32 */
  fStyle: number;
  /** u32 */
  dwRop: number;
  /** u32 */
  fState: number;
  /** u32 */
  Frame: number;
  /** Windows.Win32.Foundation.COLORREF */
  crEffect: Uint8Array | Deno.PointerValue;
}

export const sizeofIMAGELISTDRAWPARAMS = 96;

export function allocIMAGELISTDRAWPARAMS(data?: Partial<IMAGELISTDRAWPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGELISTDRAWPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.himl !== undefined) view.setBigUint64(8, data.himl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.himl))), true);
  // 0x10: i32
  if (data?.i !== undefined) view.setInt32(16, Number(data.i), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hdcDst !== undefined) view.setBigUint64(24, data.hdcDst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdcDst))), true);
  // 0x20: i32
  if (data?.x !== undefined) view.setInt32(32, Number(data.x), true);
  // 0x24: i32
  if (data?.y !== undefined) view.setInt32(36, Number(data.y), true);
  // 0x28: i32
  if (data?.cx !== undefined) view.setInt32(40, Number(data.cx), true);
  // 0x2c: i32
  if (data?.cy !== undefined) view.setInt32(44, Number(data.cy), true);
  // 0x30: i32
  if (data?.xBitmap !== undefined) view.setInt32(48, Number(data.xBitmap), true);
  // 0x34: i32
  if (data?.yBitmap !== undefined) view.setInt32(52, Number(data.yBitmap), true);
  // 0x38: pointer
  if (data?.rgbBk !== undefined) view.setBigUint64(56, data.rgbBk === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbBk))), true);
  // 0x40: pointer
  if (data?.rgbFg !== undefined) view.setBigUint64(64, data.rgbFg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbFg))), true);
  // 0x48: u32
  if (data?.fStyle !== undefined) view.setUint32(72, Number(data.fStyle), true);
  // 0x4c: u32
  if (data?.dwRop !== undefined) view.setUint32(76, Number(data.dwRop), true);
  // 0x50: u32
  if (data?.fState !== undefined) view.setUint32(80, Number(data.fState), true);
  // 0x54: u32
  if (data?.Frame !== undefined) view.setUint32(84, Number(data.Frame), true);
  // 0x58: pointer
  if (data?.crEffect !== undefined) view.setBigUint64(88, data.crEffect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crEffect))), true);
  return buf;
}

export class IMAGELISTDRAWPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get himl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get i(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hdcDst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get x(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get y(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get cx(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cy(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get xBitmap(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get yBitmap(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get rgbBk(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get rgbFg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get fStyle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwRop(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get fState(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get Frame(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get crEffect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set himl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set i(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hdcDst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set x(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set y(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set cx(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cy(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set xBitmap(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set yBitmap(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set rgbBk(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set rgbFg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set fStyle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwRop(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set fState(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set Frame(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set crEffect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HBITMAP = bigint | number;

/**
 * Windows.Win32.UI.Controls.IMAGEINFO (size: 32)
 */
export interface IMAGEINFO {
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmImage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmMask: Uint8Array | Deno.PointerValue;
  /** i32 */
  Unused1: number;
  /** i32 */
  Unused2: number;
  /** Windows.Win32.Foundation.RECT */
  rcImage: Uint8Array | Deno.PointerValue;
}

export const sizeofIMAGEINFO = 32;

export function allocIMAGEINFO(data?: Partial<IMAGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hbmImage !== undefined) view.setBigUint64(0, data.hbmImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbmImage))), true);
  // 0x08: pointer
  if (data?.hbmMask !== undefined) view.setBigUint64(8, data.hbmMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbmMask))), true);
  // 0x10: i32
  if (data?.Unused1 !== undefined) view.setInt32(16, Number(data.Unused1), true);
  // 0x14: i32
  if (data?.Unused2 !== undefined) view.setInt32(20, Number(data.Unused2), true);
  // 0x18: pointer
  if (data?.rcImage !== undefined) view.setBigUint64(24, data.rcImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcImage))), true);
  return buf;
}

export class IMAGEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hbmImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hbmMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get Unused1(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get Unused2(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get rcImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hbmImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hbmMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set Unused1(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set Unused2(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set rcImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.HD_TEXTFILTERA (size: 16)
 */
export interface HD_TEXTFILTERA {
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
}

export const sizeofHD_TEXTFILTERA = 16;

export function allocHD_TEXTFILTERA(data?: Partial<HD_TEXTFILTERA>): Uint8Array {
  const buf = new Uint8Array(sizeofHD_TEXTFILTERA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszText);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.cchTextMax !== undefined) view.setInt32(8, Number(data.cchTextMax), true);
  // 0x0c: pad4
  return buf;
}

export class HD_TEXTFILTERAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get cchTextMax(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set cchTextMax(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.HD_TEXTFILTERW (size: 16)
 */
export interface HD_TEXTFILTERW {
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
}

export const sizeofHD_TEXTFILTERW = 16;

export function allocHD_TEXTFILTERW(data?: Partial<HD_TEXTFILTERW>): Uint8Array {
  const buf = new Uint8Array(sizeofHD_TEXTFILTERW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.cchTextMax !== undefined) view.setInt32(8, Number(data.cchTextMax), true);
  // 0x0c: pad4
  return buf;
}

export class HD_TEXTFILTERWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get cchTextMax(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set cchTextMax(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.HDITEMA (size: 72)
 */
export interface HDITEMA {
  /** Windows.Win32.UI.Controls.HDI_MASK */
  mask: HDI_MASK;
  /** i32 */
  cxy: number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbm: Uint8Array | Deno.PointerValue;
  /** i32 */
  cchTextMax: number;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_FORMAT_FLAGS */
  fmt: HEADER_CONTROL_FORMAT_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iImage: number;
  /** i32 */
  iOrder: number;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_FORMAT_TYPE */
  type: HEADER_CONTROL_FORMAT_TYPE;
  /** ptr */
  pvFilter: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_FORMAT_STATE */
  state: HEADER_CONTROL_FORMAT_STATE;
}

export const sizeofHDITEMA = 72;

export function allocHDITEMA(data?: Partial<HDITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofHDITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.cxy !== undefined) view.setInt32(4, Number(data.cxy), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.hbm !== undefined) view.setBigUint64(16, data.hbm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbm))), true);
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.fmt !== undefined) view.setInt32(28, Number(data.fmt), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x28: i32
  if (data?.iImage !== undefined) view.setInt32(40, Number(data.iImage), true);
  // 0x2c: i32
  if (data?.iOrder !== undefined) view.setInt32(44, Number(data.iOrder), true);
  // 0x30: u32
  if (data?.type !== undefined) view.setUint32(48, Number(data.type), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pvFilter !== undefined) view.setBigUint64(56, data.pvFilter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvFilter))), true);
  // 0x40: u32
  if (data?.state !== undefined) view.setUint32(64, Number(data.state), true);
  // 0x44: pad4
  return buf;
}

export class HDITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get cxy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hbm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fmt(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get iImage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get iOrder(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: u32
  get type(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pvFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get state(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set cxy(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set hbm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fmt(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set iImage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set iOrder(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: u32
  set type(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pvFilter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set state(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.UI.Controls.HDITEMW (size: 72)
 */
export interface HDITEMW {
  /** Windows.Win32.UI.Controls.HDI_MASK */
  mask: HDI_MASK;
  /** i32 */
  cxy: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbm: Uint8Array | Deno.PointerValue;
  /** i32 */
  cchTextMax: number;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_FORMAT_FLAGS */
  fmt: HEADER_CONTROL_FORMAT_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iImage: number;
  /** i32 */
  iOrder: number;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_FORMAT_TYPE */
  type: HEADER_CONTROL_FORMAT_TYPE;
  /** ptr */
  pvFilter: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_FORMAT_STATE */
  state: HEADER_CONTROL_FORMAT_STATE;
}

export const sizeofHDITEMW = 72;

export function allocHDITEMW(data?: Partial<HDITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofHDITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.cxy !== undefined) view.setInt32(4, Number(data.cxy), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.hbm !== undefined) view.setBigUint64(16, data.hbm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbm))), true);
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.fmt !== undefined) view.setInt32(28, Number(data.fmt), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x28: i32
  if (data?.iImage !== undefined) view.setInt32(40, Number(data.iImage), true);
  // 0x2c: i32
  if (data?.iOrder !== undefined) view.setInt32(44, Number(data.iOrder), true);
  // 0x30: u32
  if (data?.type !== undefined) view.setUint32(48, Number(data.type), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pvFilter !== undefined) view.setBigUint64(56, data.pvFilter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvFilter))), true);
  // 0x40: u32
  if (data?.state !== undefined) view.setUint32(64, Number(data.state), true);
  // 0x44: pad4
  return buf;
}

export class HDITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get cxy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hbm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fmt(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get iImage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get iOrder(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: u32
  get type(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pvFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get state(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set cxy(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set hbm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fmt(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set iImage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set iOrder(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: u32
  set type(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pvFilter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set state(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.UI.Controls.HDLAYOUT (size: 16)
 */
export interface HDLAYOUT {
  /** ptr */
  prc: Deno.PointerValue | Uint8Array;
  /** ptr */
  pwpos: Deno.PointerValue | Uint8Array;
}

export const sizeofHDLAYOUT = 16;

export function allocHDLAYOUT(data?: Partial<HDLAYOUT>): Uint8Array {
  const buf = new Uint8Array(sizeofHDLAYOUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.prc !== undefined) view.setBigUint64(0, data.prc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prc))), true);
  // 0x08: pointer
  if (data?.pwpos !== undefined) view.setBigUint64(8, data.pwpos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pwpos))), true);
  return buf;
}

export class HDLAYOUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get prc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pwpos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set prc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pwpos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.HDHITTESTINFO (size: 16)
 */
export interface HDHITTESTINFO {
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.HEADER_HITTEST_INFO_FLAGS */
  flags: HEADER_HITTEST_INFO_FLAGS;
  /** i32 */
  iItem: number;
}

export const sizeofHDHITTESTINFO = 16;

export function allocHDHITTESTINFO(data?: Partial<HDHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHDHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pt !== undefined) view.setBigUint64(0, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.iItem !== undefined) view.setInt32(12, Number(data.iItem), true);
  return buf;
}

export class HDHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iItem(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iItem(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHEADERA (size: 24)
 */
export interface NMHEADERA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_NOTIFICATION_BUTTON */
  iButton: HEADER_CONTROL_NOTIFICATION_BUTTON;
  /** ptr */
  pitem: Deno.PointerValue | Uint8Array;
}

export const sizeofNMHEADERA = 24;

export function allocNMHEADERA(data?: Partial<NMHEADERA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHEADERA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: u32
  if (data?.iButton !== undefined) view.setUint32(12, Number(data.iButton), true);
  // 0x10: pointer
  if (data?.pitem !== undefined) view.setBigUint64(16, data.pitem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pitem))), true);
  return buf;
}

export class NMHEADERAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get iButton(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pitem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set iButton(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pitem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHEADERW (size: 24)
 */
export interface NMHEADERW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.UI.Controls.HEADER_CONTROL_NOTIFICATION_BUTTON */
  iButton: HEADER_CONTROL_NOTIFICATION_BUTTON;
  /** ptr */
  pitem: Deno.PointerValue | Uint8Array;
}

export const sizeofNMHEADERW = 24;

export function allocNMHEADERW(data?: Partial<NMHEADERW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHEADERW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: u32
  if (data?.iButton !== undefined) view.setUint32(12, Number(data.iButton), true);
  // 0x10: pointer
  if (data?.pitem !== undefined) view.setBigUint64(16, data.pitem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pitem))), true);
  return buf;
}

export class NMHEADERWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get iButton(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pitem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set iButton(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pitem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHDDISPINFOW (size: 40)
 */
export interface NMHDDISPINFOW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.UI.Controls.HDI_MASK */
  mask: HDI_MASK;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMHDDISPINFOW = 40;

export function allocNMHDDISPINFOW(data?: Partial<NMHDDISPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDDISPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: u32
  if (data?.mask !== undefined) view.setUint32(12, Number(data.mask), true);
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMHDDISPINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get mask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set mask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHDDISPINFOA (size: 40)
 */
export interface NMHDDISPINFOA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.UI.Controls.HDI_MASK */
  mask: HDI_MASK;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMHDDISPINFOA = 40;

export function allocNMHDDISPINFOA(data?: Partial<NMHDDISPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDDISPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: u32
  if (data?.mask !== undefined) view.setUint32(12, Number(data.mask), true);
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMHDDISPINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get mask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set mask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHDFILTERBTNCLICK (size: 24)
 */
export interface NMHDFILTERBTNCLICK {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
}

export const sizeofNMHDFILTERBTNCLICK = 24;

export function allocNMHDFILTERBTNCLICK(data?: Partial<NMHDFILTERBTNCLICK>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDFILTERBTNCLICK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  return buf;
}

export class NMHDFILTERBTNCLICKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.COLORMAP (size: 16)
 */
export interface COLORMAP {
  /** Windows.Win32.Foundation.COLORREF */
  from: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  to: Uint8Array | Deno.PointerValue;
}

export const sizeofCOLORMAP = 16;

export function allocCOLORMAP(data?: Partial<COLORMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofCOLORMAP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.from !== undefined) view.setBigUint64(0, data.from === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.from))), true);
  // 0x08: pointer
  if (data?.to !== undefined) view.setBigUint64(8, data.to === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.to))), true);
  return buf;
}

export class COLORMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get from(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get to(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set from(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set to(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HBRUSH = bigint | number;

export type HPEN = bigint | number;

/**
 * Windows.Win32.UI.Controls.NMTBCUSTOMDRAW (size: 104)
 */
export interface NMTBCUSTOMDRAW {
  /** Windows.Win32.UI.Controls.NMCUSTOMDRAW */
  nmcd: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HBRUSH */
  hbrMonoDither: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HBRUSH */
  hbrLines: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HPEN */
  hpenLines: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrText: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrMark: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrTextHighlight: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrBtnFace: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrBtnHighlight: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrHighlightHotTrack: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcText: Uint8Array | Deno.PointerValue;
  /** i32 */
  nStringBkMode: number;
  /** i32 */
  nHLStringBkMode: number;
  /** i32 */
  iListGap: number;
}

export const sizeofNMTBCUSTOMDRAW = 104;

export function allocNMTBCUSTOMDRAW(data?: Partial<NMTBCUSTOMDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBCUSTOMDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmcd !== undefined) view.setBigUint64(0, data.nmcd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmcd))), true);
  // 0x08: pointer
  if (data?.hbrMonoDither !== undefined) view.setBigUint64(8, data.hbrMonoDither === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbrMonoDither))), true);
  // 0x10: pointer
  if (data?.hbrLines !== undefined) view.setBigUint64(16, data.hbrLines === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbrLines))), true);
  // 0x18: pointer
  if (data?.hpenLines !== undefined) view.setBigUint64(24, data.hpenLines === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hpenLines))), true);
  // 0x20: pointer
  if (data?.clrText !== undefined) view.setBigUint64(32, data.clrText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrText))), true);
  // 0x28: pointer
  if (data?.clrMark !== undefined) view.setBigUint64(40, data.clrMark === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrMark))), true);
  // 0x30: pointer
  if (data?.clrTextHighlight !== undefined) view.setBigUint64(48, data.clrTextHighlight === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrTextHighlight))), true);
  // 0x38: pointer
  if (data?.clrBtnFace !== undefined) view.setBigUint64(56, data.clrBtnFace === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBtnFace))), true);
  // 0x40: pointer
  if (data?.clrBtnHighlight !== undefined) view.setBigUint64(64, data.clrBtnHighlight === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBtnHighlight))), true);
  // 0x48: pointer
  if (data?.clrHighlightHotTrack !== undefined) view.setBigUint64(72, data.clrHighlightHotTrack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrHighlightHotTrack))), true);
  // 0x50: pointer
  if (data?.rcText !== undefined) view.setBigUint64(80, data.rcText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcText))), true);
  // 0x58: i32
  if (data?.nStringBkMode !== undefined) view.setInt32(88, Number(data.nStringBkMode), true);
  // 0x5c: i32
  if (data?.nHLStringBkMode !== undefined) view.setInt32(92, Number(data.nHLStringBkMode), true);
  // 0x60: i32
  if (data?.iListGap !== undefined) view.setInt32(96, Number(data.iListGap), true);
  // 0x64: pad4
  return buf;
}

export class NMTBCUSTOMDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmcd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hbrMonoDither(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hbrLines(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hpenLines(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get clrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get clrMark(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get clrTextHighlight(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get clrBtnFace(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get clrBtnHighlight(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get clrHighlightHotTrack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get rcText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: i32
  get nStringBkMode(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: i32
  get nHLStringBkMode(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get iListGap(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x00: pointer
  set nmcd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hbrMonoDither(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hbrLines(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hpenLines(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set clrText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set clrMark(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set clrTextHighlight(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set clrBtnFace(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set clrBtnHighlight(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set clrHighlightHotTrack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set rcText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: i32
  set nStringBkMode(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: i32
  set nHLStringBkMode(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set iListGap(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.UI.Controls.TBADDBITMAP (size: 16)
 */
export interface TBADDBITMAP {
  /** Windows.Win32.Foundation.HINSTANCE */
  hInst: Uint8Array | Deno.PointerValue;
  /** usize */
  nID: bigint | number;
}

export const sizeofTBADDBITMAP = 16;

export function allocTBADDBITMAP(data?: Partial<TBADDBITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofTBADDBITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hInst !== undefined) view.setBigUint64(0, data.hInst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInst))), true);
  // 0x08: usize
  if (data?.nID !== undefined) view.setBigUint64(8, BigInt(data.nID), true);
  return buf;
}

export class TBADDBITMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hInst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get nID(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set hInst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set nID(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

export type HKEY = bigint | number;

/**
 * Windows.Win32.UI.Controls.TBSAVEPARAMSA (size: 24)
 */
export interface TBSAVEPARAMSA {
  /** Windows.Win32.System.Registry.HKEY */
  hkr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszSubKey: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszValueName: string | null | Uint8Array;
}

export const sizeofTBSAVEPARAMSA = 24;

export function allocTBSAVEPARAMSA(data?: Partial<TBSAVEPARAMSA>): Uint8Array {
  const buf = new Uint8Array(sizeofTBSAVEPARAMSA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hkr !== undefined) view.setBigUint64(0, data.hkr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hkr))), true);
  // 0x08: buffer
  if (data?.pszSubKey !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszSubKey);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszValueName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszValueName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class TBSAVEPARAMSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hkr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszSubKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszValueName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hkr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszSubKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszValueName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TBSAVEPARAMSW (size: 24)
 */
export interface TBSAVEPARAMSW {
  /** Windows.Win32.System.Registry.HKEY */
  hkr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszSubKey: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszValueName: string | null | Uint8Array | Uint16Array;
}

export const sizeofTBSAVEPARAMSW = 24;

export function allocTBSAVEPARAMSW(data?: Partial<TBSAVEPARAMSW>): Uint8Array {
  const buf = new Uint8Array(sizeofTBSAVEPARAMSW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hkr !== undefined) view.setBigUint64(0, data.hkr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hkr))), true);
  // 0x08: buffer
  if (data?.pszSubKey !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSubKey);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszValueName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszValueName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class TBSAVEPARAMSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hkr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszSubKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszValueName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hkr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszSubKey(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszValueName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TBINSERTMARK (size: 8)
 */
export interface TBINSERTMARK {
  /** i32 */
  iButton: number;
  /** Windows.Win32.UI.Controls.TBINSERTMARK_FLAGS */
  dwFlags: TBINSERTMARK_FLAGS;
}

export const sizeofTBINSERTMARK = 8;

export function allocTBINSERTMARK(data?: Partial<TBINSERTMARK>): Uint8Array {
  const buf = new Uint8Array(sizeofTBINSERTMARK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iButton !== undefined) view.setInt32(0, Number(data.iButton), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

export class TBINSERTMARKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iButton(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set iButton(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TBREPLACEBITMAP (size: 40)
 */
export interface TBREPLACEBITMAP {
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstOld: Uint8Array | Deno.PointerValue;
  /** usize */
  nIDOld: bigint | number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstNew: Uint8Array | Deno.PointerValue;
  /** usize */
  nIDNew: bigint | number;
  /** i32 */
  nButtons: number;
}

export const sizeofTBREPLACEBITMAP = 40;

export function allocTBREPLACEBITMAP(data?: Partial<TBREPLACEBITMAP>): Uint8Array {
  const buf = new Uint8Array(sizeofTBREPLACEBITMAP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hInstOld !== undefined) view.setBigUint64(0, data.hInstOld === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstOld))), true);
  // 0x08: usize
  if (data?.nIDOld !== undefined) view.setBigUint64(8, BigInt(data.nIDOld), true);
  // 0x10: pointer
  if (data?.hInstNew !== undefined) view.setBigUint64(16, data.hInstNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstNew))), true);
  // 0x18: usize
  if (data?.nIDNew !== undefined) view.setBigUint64(24, BigInt(data.nIDNew), true);
  // 0x20: i32
  if (data?.nButtons !== undefined) view.setInt32(32, Number(data.nButtons), true);
  // 0x24: pad4
  return buf;
}

export class TBREPLACEBITMAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hInstOld(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get nIDOld(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get hInstNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get nIDNew(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: i32
  get nButtons(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set hInstOld(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set nIDOld(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set hInstNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set nIDNew(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: i32
  set nButtons(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.TBBUTTONINFOA (size: 48)
 */
export interface TBBUTTONINFOA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.TBBUTTONINFOW_MASK */
  dwMask: TBBUTTONINFOW_MASK;
  /** i32 */
  idCommand: number;
  /** i32 */
  iImage: number;
  /** u8 */
  fsState: number;
  /** u8 */
  fsStyle: number;
  /** u16 */
  cx: number;
  /** usize */
  lParam: bigint | number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchText: number;
}

export const sizeofTBBUTTONINFOA = 48;

export function allocTBBUTTONINFOA(data?: Partial<TBBUTTONINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofTBBUTTONINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: i32
  if (data?.idCommand !== undefined) view.setInt32(8, Number(data.idCommand), true);
  // 0x0c: i32
  if (data?.iImage !== undefined) view.setInt32(12, Number(data.iImage), true);
  // 0x10: u8
  if (data?.fsState !== undefined) view.setUint8(16, Number(data.fsState));
  // 0x11: u8
  if (data?.fsStyle !== undefined) view.setUint8(17, Number(data.fsStyle));
  // 0x12: u16
  if (data?.cx !== undefined) view.setUint16(18, Number(data.cx), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.lParam !== undefined) view.setBigUint64(24, BigInt(data.lParam), true);
  // 0x20: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.cchText !== undefined) view.setInt32(40, Number(data.cchText), true);
  // 0x2c: pad4
  return buf;
}

export class TBBUTTONINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get idCommand(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iImage(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get fsState(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get fsStyle(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u16
  get cx(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get lParam(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get cchText(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set idCommand(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iImage(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set fsState(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set fsStyle(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u16
  set cx(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set lParam(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set cchText(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.UI.Controls.TBBUTTONINFOW (size: 48)
 */
export interface TBBUTTONINFOW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.TBBUTTONINFOW_MASK */
  dwMask: TBBUTTONINFOW_MASK;
  /** i32 */
  idCommand: number;
  /** i32 */
  iImage: number;
  /** u8 */
  fsState: number;
  /** u8 */
  fsStyle: number;
  /** u16 */
  cx: number;
  /** usize */
  lParam: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchText: number;
}

export const sizeofTBBUTTONINFOW = 48;

export function allocTBBUTTONINFOW(data?: Partial<TBBUTTONINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofTBBUTTONINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: i32
  if (data?.idCommand !== undefined) view.setInt32(8, Number(data.idCommand), true);
  // 0x0c: i32
  if (data?.iImage !== undefined) view.setInt32(12, Number(data.iImage), true);
  // 0x10: u8
  if (data?.fsState !== undefined) view.setUint8(16, Number(data.fsState));
  // 0x11: u8
  if (data?.fsStyle !== undefined) view.setUint8(17, Number(data.fsStyle));
  // 0x12: u16
  if (data?.cx !== undefined) view.setUint16(18, Number(data.cx), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.lParam !== undefined) view.setBigUint64(24, BigInt(data.lParam), true);
  // 0x20: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.cchText !== undefined) view.setInt32(40, Number(data.cchText), true);
  // 0x2c: pad4
  return buf;
}

export class TBBUTTONINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get idCommand(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iImage(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u8
  get fsState(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get fsStyle(): number {
    return this.view.getUint8(17);
  }

  // 0x12: u16
  get cx(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get lParam(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get cchText(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set idCommand(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iImage(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u8
  set fsState(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set fsStyle(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: u16
  set cx(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set lParam(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set cchText(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.UI.Controls.TBMETRICS (size: 32)
 */
export interface TBMETRICS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMask: number;
  /** i32 */
  cxPad: number;
  /** i32 */
  cyPad: number;
  /** i32 */
  cxBarPad: number;
  /** i32 */
  cyBarPad: number;
  /** i32 */
  cxButtonSpacing: number;
  /** i32 */
  cyButtonSpacing: number;
}

export const sizeofTBMETRICS = 32;

export function allocTBMETRICS(data?: Partial<TBMETRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofTBMETRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: i32
  if (data?.cxPad !== undefined) view.setInt32(8, Number(data.cxPad), true);
  // 0x0c: i32
  if (data?.cyPad !== undefined) view.setInt32(12, Number(data.cyPad), true);
  // 0x10: i32
  if (data?.cxBarPad !== undefined) view.setInt32(16, Number(data.cxBarPad), true);
  // 0x14: i32
  if (data?.cyBarPad !== undefined) view.setInt32(20, Number(data.cyBarPad), true);
  // 0x18: i32
  if (data?.cxButtonSpacing !== undefined) view.setInt32(24, Number(data.cxButtonSpacing), true);
  // 0x1c: i32
  if (data?.cyButtonSpacing !== undefined) view.setInt32(28, Number(data.cyButtonSpacing), true);
  return buf;
}

export class TBMETRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get cxPad(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cyPad(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get cxBarPad(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get cyBarPad(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get cxButtonSpacing(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get cyButtonSpacing(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set cxPad(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cyPad(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set cxBarPad(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set cyBarPad(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set cxButtonSpacing(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set cyButtonSpacing(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTBHOTITEM (size: 24)
 */
export interface NMTBHOTITEM {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  idOld: number;
  /** i32 */
  idNew: number;
  /** Windows.Win32.UI.Controls.NMTBHOTITEM_FLAGS */
  dwFlags: NMTBHOTITEM_FLAGS;
}

export const sizeofNMTBHOTITEM = 24;

export function allocNMTBHOTITEM(data?: Partial<NMTBHOTITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBHOTITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.idOld !== undefined) view.setInt32(8, Number(data.idOld), true);
  // 0x0c: i32
  if (data?.idNew !== undefined) view.setInt32(12, Number(data.idNew), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

export class NMTBHOTITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get idOld(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get idNew(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set idOld(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set idNew(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.NMTBSAVE (size: 48)
 */
export interface NMTBSAVE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** ptr */
  pCurrent: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
  /** i32 */
  iItem: number;
  /** i32 */
  cButtons: number;
  /** Windows.Win32.UI.Controls.TBBUTTON */
  tbButton: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTBSAVE = 48;

export function allocNMTBSAVE(data?: Partial<NMTBSAVE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBSAVE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x10: pointer
  if (data?.pCurrent !== undefined) view.setBigUint64(16, data.pCurrent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCurrent))), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: i32
  if (data?.iItem !== undefined) view.setInt32(28, Number(data.iItem), true);
  // 0x20: i32
  if (data?.cButtons !== undefined) view.setInt32(32, Number(data.cButtons), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.tbButton !== undefined) view.setBigUint64(40, data.tbButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tbButton))), true);
  return buf;
}

export class NMTBSAVEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pCurrent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get iItem(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get cButtons(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get tbButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pCurrent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cbData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set iItem(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set cButtons(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set tbButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTBRESTORE (size: 48)
 */
export interface NMTBRESTORE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** ptr */
  pCurrent: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
  /** i32 */
  iItem: number;
  /** i32 */
  cButtons: number;
  /** i32 */
  cbBytesPerRecord: number;
  /** Windows.Win32.UI.Controls.TBBUTTON */
  tbButton: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTBRESTORE = 48;

export function allocNMTBRESTORE(data?: Partial<NMTBRESTORE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBRESTORE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x10: pointer
  if (data?.pCurrent !== undefined) view.setBigUint64(16, data.pCurrent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCurrent))), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: i32
  if (data?.iItem !== undefined) view.setInt32(28, Number(data.iItem), true);
  // 0x20: i32
  if (data?.cButtons !== undefined) view.setInt32(32, Number(data.cButtons), true);
  // 0x24: i32
  if (data?.cbBytesPerRecord !== undefined) view.setInt32(36, Number(data.cbBytesPerRecord), true);
  // 0x28: pointer
  if (data?.tbButton !== undefined) view.setBigUint64(40, data.tbButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tbButton))), true);
  return buf;
}

export class NMTBRESTOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pCurrent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get iItem(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get cButtons(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get cbBytesPerRecord(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get tbButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pCurrent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cbData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set iItem(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set cButtons(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set cbBytesPerRecord(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set tbButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTBGETINFOTIPA (size: 32)
 */
export interface NMTBGETINFOTIPA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iItem: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTBGETINFOTIPA = 32;

export function allocNMTBGETINFOTIPA(data?: Partial<NMTBGETINFOTIPA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBGETINFOTIPA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchTextMax !== undefined) view.setInt32(16, Number(data.cchTextMax), true);
  // 0x14: i32
  if (data?.iItem !== undefined) view.setInt32(20, Number(data.iItem), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTBGETINFOTIPAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchTextMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iItem(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchTextMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iItem(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTBGETINFOTIPW (size: 32)
 */
export interface NMTBGETINFOTIPW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iItem: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTBGETINFOTIPW = 32;

export function allocNMTBGETINFOTIPW(data?: Partial<NMTBGETINFOTIPW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBGETINFOTIPW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchTextMax !== undefined) view.setInt32(16, Number(data.cchTextMax), true);
  // 0x14: i32
  if (data?.iItem !== undefined) view.setInt32(20, Number(data.iItem), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTBGETINFOTIPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchTextMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iItem(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchTextMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iItem(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTBDISPINFOA (size: 48)
 */
export interface NMTBDISPINFOA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMTBDISPINFOW_MASK */
  dwMask: NMTBDISPINFOW_MASK;
  /** i32 */
  idCommand: number;
  /** usize */
  lParam: bigint | number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchText: number;
}

export const sizeofNMTBDISPINFOA = 48;

export function allocNMTBDISPINFOA(data?: Partial<NMTBDISPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBDISPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwMask !== undefined) view.setUint32(8, Number(data.dwMask), true);
  // 0x0c: i32
  if (data?.idCommand !== undefined) view.setInt32(12, Number(data.idCommand), true);
  // 0x10: usize
  if (data?.lParam !== undefined) view.setBigUint64(16, BigInt(data.lParam), true);
  // 0x18: i32
  if (data?.iImage !== undefined) view.setInt32(24, Number(data.iImage), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.cchText !== undefined) view.setInt32(40, Number(data.cchText), true);
  // 0x2c: pad4
  return buf;
}

export class NMTBDISPINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get idCommand(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: usize
  get lParam(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: i32
  get iImage(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get cchText(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set idCommand(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: usize
  set lParam(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: i32
  set iImage(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set cchText(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMTBDISPINFOW (size: 48)
 */
export interface NMTBDISPINFOW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMTBDISPINFOW_MASK */
  dwMask: NMTBDISPINFOW_MASK;
  /** i32 */
  idCommand: number;
  /** usize */
  lParam: bigint | number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchText: number;
}

export const sizeofNMTBDISPINFOW = 48;

export function allocNMTBDISPINFOW(data?: Partial<NMTBDISPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTBDISPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwMask !== undefined) view.setUint32(8, Number(data.dwMask), true);
  // 0x0c: i32
  if (data?.idCommand !== undefined) view.setInt32(12, Number(data.idCommand), true);
  // 0x10: usize
  if (data?.lParam !== undefined) view.setBigUint64(16, BigInt(data.lParam), true);
  // 0x18: i32
  if (data?.iImage !== undefined) view.setInt32(24, Number(data.iImage), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.cchText !== undefined) view.setInt32(40, Number(data.cchText), true);
  // 0x2c: pad4
  return buf;
}

export class NMTBDISPINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get idCommand(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: usize
  get lParam(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: i32
  get iImage(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get cchText(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set idCommand(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: usize
  set lParam(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: i32
  set iImage(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set cchText(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMTOOLBARA (size: 48)
 */
export interface NMTOOLBARA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.UI.Controls.TBBUTTON */
  tbButton: Uint8Array | Deno.PointerValue;
  /** i32 */
  cchText: number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** Windows.Win32.Foundation.RECT */
  rcButton: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTOOLBARA = 48;

export function allocNMTOOLBARA(data?: Partial<NMTOOLBARA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTOOLBARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.tbButton !== undefined) view.setBigUint64(16, data.tbButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tbButton))), true);
  // 0x18: i32
  if (data?.cchText !== undefined) view.setInt32(24, Number(data.cchText), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.rcButton !== undefined) view.setBigUint64(40, data.rcButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcButton))), true);
  return buf;
}

export class NMTOOLBARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get tbButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchText(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get rcButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set tbButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set cchText(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set rcButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTOOLBARW (size: 48)
 */
export interface NMTOOLBARW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** Windows.Win32.UI.Controls.TBBUTTON */
  tbButton: Uint8Array | Deno.PointerValue;
  /** i32 */
  cchText: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.RECT */
  rcButton: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTOOLBARW = 48;

export function allocNMTOOLBARW(data?: Partial<NMTOOLBARW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTOOLBARW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.tbButton !== undefined) view.setBigUint64(16, data.tbButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.tbButton))), true);
  // 0x18: i32
  if (data?.cchText !== undefined) view.setInt32(24, Number(data.cchText), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.rcButton !== undefined) view.setBigUint64(40, data.rcButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcButton))), true);
  return buf;
}

export class NMTOOLBARWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get tbButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchText(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get rcButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set tbButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set cchText(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set rcButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.REBARINFO (size: 16)
 */
export interface REBARINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** Windows.Win32.UI.Controls.HIMAGELIST */
  himl: Uint8Array | Deno.PointerValue;
}

export const sizeofREBARINFO = 16;

export function allocREBARINFO(data?: Partial<REBARINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofREBARINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: pointer
  if (data?.himl !== undefined) view.setBigUint64(8, data.himl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.himl))), true);
  return buf;
}

export class REBARINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get himl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set himl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.REBARBANDINFOA (size: 136)
 */
export interface REBARBANDINFOA {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** u32 */
  fStyle: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrFore: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrBack: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpText: string | null | Uint8Array;
  /** u32 */
  cch: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.HWND */
  hwndChild: Deno.PointerValue;
  /** u32 */
  cxMinChild: number;
  /** u32 */
  cyMinChild: number;
  /** u32 */
  cx: number;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmBack: Uint8Array | Deno.PointerValue;
  /** u32 */
  wID: number;
  /** u32 */
  cyChild: number;
  /** u32 */
  cyMaxChild: number;
  /** u32 */
  cyIntegral: number;
  /** u32 */
  cxIdeal: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  cxHeader: number;
  /** Windows.Win32.Foundation.RECT */
  rcChevronLocation: Uint8Array | Deno.PointerValue;
  /** u32 */
  uChevronState: number;
}

export const sizeofREBARBANDINFOA = 136;

export function allocREBARBANDINFOA(data?: Partial<REBARBANDINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofREBARBANDINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: u32
  if (data?.fStyle !== undefined) view.setUint32(8, Number(data.fStyle), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.clrFore !== undefined) view.setBigUint64(16, data.clrFore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrFore))), true);
  // 0x18: pointer
  if (data?.clrBack !== undefined) view.setBigUint64(24, data.clrBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBack))), true);
  // 0x20: buffer
  if (data?.lpText !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.cch !== undefined) view.setUint32(40, Number(data.cch), true);
  // 0x2c: i32
  if (data?.iImage !== undefined) view.setInt32(44, Number(data.iImage), true);
  // 0x30: pointer
  if (data?.hwndChild !== undefined) view.setBigUint64(48, data.hwndChild === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndChild))), true);
  // 0x38: u32
  if (data?.cxMinChild !== undefined) view.setUint32(56, Number(data.cxMinChild), true);
  // 0x3c: u32
  if (data?.cyMinChild !== undefined) view.setUint32(60, Number(data.cyMinChild), true);
  // 0x40: u32
  if (data?.cx !== undefined) view.setUint32(64, Number(data.cx), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.hbmBack !== undefined) view.setBigUint64(72, data.hbmBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbmBack))), true);
  // 0x50: u32
  if (data?.wID !== undefined) view.setUint32(80, Number(data.wID), true);
  // 0x54: u32
  if (data?.cyChild !== undefined) view.setUint32(84, Number(data.cyChild), true);
  // 0x58: u32
  if (data?.cyMaxChild !== undefined) view.setUint32(88, Number(data.cyMaxChild), true);
  // 0x5c: u32
  if (data?.cyIntegral !== undefined) view.setUint32(92, Number(data.cyIntegral), true);
  // 0x60: u32
  if (data?.cxIdeal !== undefined) view.setUint32(96, Number(data.cxIdeal), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lParam !== undefined) view.setBigUint64(104, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x70: u32
  if (data?.cxHeader !== undefined) view.setUint32(112, Number(data.cxHeader), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.rcChevronLocation !== undefined) view.setBigUint64(120, data.rcChevronLocation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcChevronLocation))), true);
  // 0x80: u32
  if (data?.uChevronState !== undefined) view.setUint32(128, Number(data.uChevronState), true);
  // 0x84: pad4
  return buf;
}

export class REBARBANDINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fStyle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get clrFore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get clrBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cch(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get iImage(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get hwndChild(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cxMinChild(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get cyMinChild(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get cx(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get hbmBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get wID(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get cyChild(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get cyMaxChild(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get cyIntegral(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get cxIdeal(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cxHeader(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get rcChevronLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get uChevronState(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fStyle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set clrFore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set clrBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set lpText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set cch(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set iImage(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set hwndChild(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cxMinChild(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set cyMinChild(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set cx(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set hbmBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set wID(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set cyChild(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set cyMaxChild(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set cyIntegral(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set cxIdeal(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set cxHeader(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set rcChevronLocation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set uChevronState(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.UI.Controls.REBARBANDINFOW (size: 136)
 */
export interface REBARBANDINFOW {
  /** u32 */
  cbSize: number;
  /** u32 */
  fMask: number;
  /** u32 */
  fStyle: number;
  /** Windows.Win32.Foundation.COLORREF */
  clrFore: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrBack: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpText: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cch: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.HWND */
  hwndChild: Deno.PointerValue;
  /** u32 */
  cxMinChild: number;
  /** u32 */
  cyMinChild: number;
  /** u32 */
  cx: number;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmBack: Uint8Array | Deno.PointerValue;
  /** u32 */
  wID: number;
  /** u32 */
  cyChild: number;
  /** u32 */
  cyMaxChild: number;
  /** u32 */
  cyIntegral: number;
  /** u32 */
  cxIdeal: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  cxHeader: number;
  /** Windows.Win32.Foundation.RECT */
  rcChevronLocation: Uint8Array | Deno.PointerValue;
  /** u32 */
  uChevronState: number;
}

export const sizeofREBARBANDINFOW = 136;

export function allocREBARBANDINFOW(data?: Partial<REBARBANDINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofREBARBANDINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fMask !== undefined) view.setUint32(4, Number(data.fMask), true);
  // 0x08: u32
  if (data?.fStyle !== undefined) view.setUint32(8, Number(data.fStyle), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.clrFore !== undefined) view.setBigUint64(16, data.clrFore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrFore))), true);
  // 0x18: pointer
  if (data?.clrBack !== undefined) view.setBigUint64(24, data.clrBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrBack))), true);
  // 0x20: buffer
  if (data?.lpText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.cch !== undefined) view.setUint32(40, Number(data.cch), true);
  // 0x2c: i32
  if (data?.iImage !== undefined) view.setInt32(44, Number(data.iImage), true);
  // 0x30: pointer
  if (data?.hwndChild !== undefined) view.setBigUint64(48, data.hwndChild === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndChild))), true);
  // 0x38: u32
  if (data?.cxMinChild !== undefined) view.setUint32(56, Number(data.cxMinChild), true);
  // 0x3c: u32
  if (data?.cyMinChild !== undefined) view.setUint32(60, Number(data.cyMinChild), true);
  // 0x40: u32
  if (data?.cx !== undefined) view.setUint32(64, Number(data.cx), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.hbmBack !== undefined) view.setBigUint64(72, data.hbmBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbmBack))), true);
  // 0x50: u32
  if (data?.wID !== undefined) view.setUint32(80, Number(data.wID), true);
  // 0x54: u32
  if (data?.cyChild !== undefined) view.setUint32(84, Number(data.cyChild), true);
  // 0x58: u32
  if (data?.cyMaxChild !== undefined) view.setUint32(88, Number(data.cyMaxChild), true);
  // 0x5c: u32
  if (data?.cyIntegral !== undefined) view.setUint32(92, Number(data.cyIntegral), true);
  // 0x60: u32
  if (data?.cxIdeal !== undefined) view.setUint32(96, Number(data.cxIdeal), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lParam !== undefined) view.setBigUint64(104, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x70: u32
  if (data?.cxHeader !== undefined) view.setUint32(112, Number(data.cxHeader), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.rcChevronLocation !== undefined) view.setBigUint64(120, data.rcChevronLocation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcChevronLocation))), true);
  // 0x80: u32
  if (data?.uChevronState !== undefined) view.setUint32(128, Number(data.uChevronState), true);
  // 0x84: pad4
  return buf;
}

export class REBARBANDINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get fStyle(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get clrFore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get clrBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cch(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get iImage(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get hwndChild(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cxMinChild(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get cyMinChild(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get cx(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get hbmBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get wID(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get cyChild(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get cyMaxChild(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get cyIntegral(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get cxIdeal(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cxHeader(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get rcChevronLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get uChevronState(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set fStyle(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set clrFore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set clrBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set lpText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set cch(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set iImage(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set hwndChild(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cxMinChild(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set cyMinChild(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set cx(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set hbmBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set wID(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set cyChild(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set cyMaxChild(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set cyIntegral(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set cxIdeal(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set cxHeader(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set rcChevronLocation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set uChevronState(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.UI.Controls.NMREBARCHILDSIZE (size: 32)
 */
export interface NMREBARCHILDSIZE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  uBand: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Foundation.RECT */
  rcChild: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcBand: Uint8Array | Deno.PointerValue;
}

export const sizeofNMREBARCHILDSIZE = 32;

export function allocNMREBARCHILDSIZE(data?: Partial<NMREBARCHILDSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMREBARCHILDSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.uBand !== undefined) view.setUint32(8, Number(data.uBand), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.rcChild !== undefined) view.setBigUint64(16, data.rcChild === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcChild))), true);
  // 0x18: pointer
  if (data?.rcBand !== undefined) view.setBigUint64(24, data.rcBand === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcBand))), true);
  return buf;
}

export class NMREBARCHILDSIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uBand(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get wID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rcChild(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rcBand(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uBand(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set wID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rcChild(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rcBand(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMREBAR (size: 32)
 */
export interface NMREBAR {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMREBAR_MASK_FLAGS */
  dwMask: NMREBAR_MASK_FLAGS;
  /** u32 */
  uBand: number;
  /** u32 */
  fStyle: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMREBAR = 32;

export function allocNMREBAR(data?: Partial<NMREBAR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMREBAR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwMask !== undefined) view.setUint32(8, Number(data.dwMask), true);
  // 0x0c: u32
  if (data?.uBand !== undefined) view.setUint32(12, Number(data.uBand), true);
  // 0x10: u32
  if (data?.fStyle !== undefined) view.setUint32(16, Number(data.fStyle), true);
  // 0x14: u32
  if (data?.wID !== undefined) view.setUint32(20, Number(data.wID), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMREBARView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get uBand(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fStyle(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get wID(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set uBand(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fStyle(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set wID(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMRBAUTOSIZE (size: 32)
 */
export interface NMRBAUTOSIZE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fChanged: boolean;
  /** Windows.Win32.Foundation.RECT */
  rcTarget: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcActual: Uint8Array | Deno.PointerValue;
}

export const sizeofNMRBAUTOSIZE = 32;

export function allocNMRBAUTOSIZE(data?: Partial<NMRBAUTOSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMRBAUTOSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.fChanged !== undefined) view.setInt32(8, Number(data.fChanged), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rcTarget !== undefined) view.setBigUint64(16, data.rcTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcTarget))), true);
  // 0x18: pointer
  if (data?.rcActual !== undefined) view.setBigUint64(24, data.rcActual === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcActual))), true);
  return buf;
}

export class NMRBAUTOSIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get fChanged(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rcTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rcActual(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set fChanged(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rcTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rcActual(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMREBARCHEVRON (size: 40)
 */
export interface NMREBARCHEVRON {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  uBand: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParamNM: Uint8Array | Deno.PointerValue;
}

export const sizeofNMREBARCHEVRON = 40;

export function allocNMREBARCHEVRON(data?: Partial<NMREBARCHEVRON>): Uint8Array {
  const buf = new Uint8Array(sizeofNMREBARCHEVRON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.uBand !== undefined) view.setUint32(8, Number(data.uBand), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x18: pointer
  if (data?.rc !== undefined) view.setBigUint64(24, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  // 0x20: pointer
  if (data?.lParamNM !== undefined) view.setBigUint64(32, data.lParamNM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParamNM))), true);
  return buf;
}

export class NMREBARCHEVRONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uBand(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get wID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lParamNM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uBand(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set wID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lParamNM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMREBARSPLITTER (size: 16)
 */
export interface NMREBARSPLITTER {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcSizing: Uint8Array | Deno.PointerValue;
}

export const sizeofNMREBARSPLITTER = 16;

export function allocNMREBARSPLITTER(data?: Partial<NMREBARSPLITTER>): Uint8Array {
  const buf = new Uint8Array(sizeofNMREBARSPLITTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.rcSizing !== undefined) view.setBigUint64(8, data.rcSizing === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcSizing))), true);
  return buf;
}

export class NMREBARSPLITTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rcSizing(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rcSizing(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMREBARAUTOBREAK (size: 40)
 */
export interface NMREBARAUTOBREAK {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  uBand: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  uMsg: number;
  /** u32 */
  fStyleCurrent: number;
  /** Windows.Win32.Foundation.BOOL */
  fAutoBreak: boolean;
}

export const sizeofNMREBARAUTOBREAK = 40;

export function allocNMREBARAUTOBREAK(data?: Partial<NMREBARAUTOBREAK>): Uint8Array {
  const buf = new Uint8Array(sizeofNMREBARAUTOBREAK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.uBand !== undefined) view.setUint32(8, Number(data.uBand), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x18: u32
  if (data?.uMsg !== undefined) view.setUint32(24, Number(data.uMsg), true);
  // 0x1c: u32
  if (data?.fStyleCurrent !== undefined) view.setUint32(28, Number(data.fStyleCurrent), true);
  // 0x20: i32
  if (data?.fAutoBreak !== undefined) view.setInt32(32, Number(data.fAutoBreak), true);
  // 0x24: pad4
  return buf;
}

export class NMREBARAUTOBREAKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uBand(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get wID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uMsg(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get fStyleCurrent(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get fAutoBreak(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uBand(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set wID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uMsg(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set fStyleCurrent(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set fAutoBreak(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.RBHITTESTINFO (size: 16)
 */
export interface RBHITTESTINFO {
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** u32 */
  flags: number;
  /** i32 */
  iBand: number;
}

export const sizeofRBHITTESTINFO = 16;

export function allocRBHITTESTINFO(data?: Partial<RBHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRBHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pt !== undefined) view.setBigUint64(0, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.iBand !== undefined) view.setInt32(12, Number(data.iBand), true);
  return buf;
}

export class RBHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iBand(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iBand(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TTTOOLINFOA (size: 64)
 */
export interface TTTOOLINFOA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.TOOLTIP_FLAGS */
  uFlags: TOOLTIP_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue;
  /** usize */
  uId: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  rect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hinst: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpszText: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpReserved: Deno.PointerValue | Uint8Array;
}

export const sizeofTTTOOLINFOA = 64;

export function allocTTTOOLINFOA(data?: Partial<TTTOOLINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofTTTOOLINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.uFlags !== undefined) view.setUint32(4, Number(data.uFlags), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwnd))), true);
  // 0x10: usize
  if (data?.uId !== undefined) view.setBigUint64(16, BigInt(data.uId), true);
  // 0x18: pointer
  if (data?.rect !== undefined) view.setBigUint64(24, data.rect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rect))), true);
  // 0x20: pointer
  if (data?.hinst !== undefined) view.setBigUint64(32, data.hinst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hinst))), true);
  // 0x28: buffer
  if (data?.lpszText !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpszText);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.lpReserved !== undefined) view.setBigUint64(56, data.lpReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpReserved))), true);
  return buf;
}

export class TTTOOLINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get uId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get rect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hinst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set uId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set rect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set hinst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set lpszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TTTOOLINFOW (size: 64)
 */
export interface TTTOOLINFOW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.TOOLTIP_FLAGS */
  uFlags: TOOLTIP_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue;
  /** usize */
  uId: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  rect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hinst: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpReserved: Deno.PointerValue | Uint8Array;
}

export const sizeofTTTOOLINFOW = 64;

export function allocTTTOOLINFOW(data?: Partial<TTTOOLINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofTTTOOLINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.uFlags !== undefined) view.setUint32(4, Number(data.uFlags), true);
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwnd))), true);
  // 0x10: usize
  if (data?.uId !== undefined) view.setBigUint64(16, BigInt(data.uId), true);
  // 0x18: pointer
  if (data?.rect !== undefined) view.setBigUint64(24, data.rect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rect))), true);
  // 0x20: pointer
  if (data?.hinst !== undefined) view.setBigUint64(32, data.hinst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hinst))), true);
  // 0x28: buffer
  if (data?.lpszText !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszText);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: pointer
  if (data?.lpReserved !== undefined) view.setBigUint64(56, data.lpReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpReserved))), true);
  return buf;
}

export class TTTOOLINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get uId(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get rect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hinst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set uId(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set rect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set hinst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set lpszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TTGETTITLE (size: 24)
 */
export interface TTGETTITLE {
  /** u32 */
  dwSize: number;
  /** u32 */
  uTitleBitmap: number;
  /** u32 */
  cch: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
}

export const sizeofTTGETTITLE = 24;

export function allocTTGETTITLE(data?: Partial<TTGETTITLE>): Uint8Array {
  const buf = new Uint8Array(sizeofTTGETTITLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.uTitleBitmap !== undefined) view.setUint32(4, Number(data.uTitleBitmap), true);
  // 0x08: u32
  if (data?.cch !== undefined) view.setUint32(8, Number(data.cch), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class TTGETTITLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get uTitleBitmap(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cch(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set uTitleBitmap(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cch(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TTHITTESTINFOA (size: 24)
 */
export interface TTHITTESTINFOA {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TTTOOLINFOA */
  ti: Uint8Array | Deno.PointerValue;
}

export const sizeofTTHITTESTINFOA = 24;

export function allocTTHITTESTINFOA(data?: Partial<TTHITTESTINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofTTHITTESTINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwnd))), true);
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x10: pointer
  if (data?.ti !== undefined) view.setBigUint64(16, data.ti === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ti))), true);
  return buf;
}

export class TTHITTESTINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ti(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ti(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TTHITTESTINFOW (size: 24)
 */
export interface TTHITTESTINFOW {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TTTOOLINFOW */
  ti: Uint8Array | Deno.PointerValue;
}

export const sizeofTTHITTESTINFOW = 24;

export function allocTTHITTESTINFOW(data?: Partial<TTHITTESTINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofTTHITTESTINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwnd))), true);
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x10: pointer
  if (data?.ti !== undefined) view.setBigUint64(16, data.ti === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ti))), true);
  return buf;
}

export class TTHITTESTINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ti(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ti(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTTDISPINFOA (size: 48)
 */
export interface NMTTDISPINFOA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpszText: string | null | Uint8Array;
  /** array */
  szText: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hinst: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TOOLTIP_FLAGS */
  uFlags: TOOLTIP_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTTDISPINFOA = 48;

export function allocNMTTDISPINFOA(data?: Partial<NMTTDISPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTTDISPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.lpszText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.szText !== undefined) view.setBigUint64(16, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  // 0x18: pointer
  if (data?.hinst !== undefined) view.setBigUint64(24, data.hinst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hinst))), true);
  // 0x20: u32
  if (data?.uFlags !== undefined) view.setUint32(32, Number(data.uFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTTDISPINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hinst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hinst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTTDISPINFOW (size: 48)
 */
export interface NMTTDISPINFOW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszText: string | null | Uint8Array | Uint16Array;
  /** array */
  szText: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hinst: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TOOLTIP_FLAGS */
  uFlags: TOOLTIP_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTTDISPINFOW = 48;

export function allocNMTTDISPINFOW(data?: Partial<NMTTDISPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTTDISPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.lpszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.szText !== undefined) view.setBigUint64(16, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  // 0x18: pointer
  if (data?.hinst !== undefined) view.setBigUint64(24, data.hinst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hinst))), true);
  // 0x20: u32
  if (data?.uFlags !== undefined) view.setUint32(32, Number(data.uFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTTDISPINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hinst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get uFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hinst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set uFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTRBTHUMBPOSCHANGING (size: 16)
 */
export interface NMTRBTHUMBPOSCHANGING {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwPos: number;
  /** i32 */
  nReason: number;
}

export const sizeofNMTRBTHUMBPOSCHANGING = 16;

export function allocNMTRBTHUMBPOSCHANGING(data?: Partial<NMTRBTHUMBPOSCHANGING>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTRBTHUMBPOSCHANGING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwPos !== undefined) view.setUint32(8, Number(data.dwPos), true);
  // 0x0c: i32
  if (data?.nReason !== undefined) view.setInt32(12, Number(data.nReason), true);
  return buf;
}

export class NMTRBTHUMBPOSCHANGINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwPos(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get nReason(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwPos(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set nReason(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.DRAGLISTINFO (size: 24)
 */
export interface DRAGLISTINFO {
  /** Windows.Win32.UI.Controls.DRAGLISTINFO_NOTIFICATION_FLAGS */
  uNotification: DRAGLISTINFO_NOTIFICATION_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  ptCursor: Uint8Array | Deno.PointerValue;
}

export const sizeofDRAGLISTINFO = 24;

export function allocDRAGLISTINFO(data?: Partial<DRAGLISTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAGLISTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uNotification !== undefined) view.setUint32(0, Number(data.uNotification), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWnd))), true);
  // 0x10: pointer
  if (data?.ptCursor !== undefined) view.setBigUint64(16, data.ptCursor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptCursor))), true);
  return buf;
}

export class DRAGLISTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uNotification(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hWnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ptCursor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set uNotification(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hWnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ptCursor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.UDACCEL (size: 8)
 */
export interface UDACCEL {
  /** u32 */
  nSec: number;
  /** u32 */
  nInc: number;
}

export const sizeofUDACCEL = 8;

export function allocUDACCEL(data?: Partial<UDACCEL>): Uint8Array {
  const buf = new Uint8Array(sizeofUDACCEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nSec !== undefined) view.setUint32(0, Number(data.nSec), true);
  // 0x04: u32
  if (data?.nInc !== undefined) view.setUint32(4, Number(data.nInc), true);
  return buf;
}

export class UDACCELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nSec(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nInc(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set nSec(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nInc(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMUPDOWN (size: 16)
 */
export interface NMUPDOWN {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iPos: number;
  /** i32 */
  iDelta: number;
}

export const sizeofNMUPDOWN = 16;

export function allocNMUPDOWN(data?: Partial<NMUPDOWN>): Uint8Array {
  const buf = new Uint8Array(sizeofNMUPDOWN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iPos !== undefined) view.setInt32(8, Number(data.iPos), true);
  // 0x0c: i32
  if (data?.iDelta !== undefined) view.setInt32(12, Number(data.iDelta), true);
  return buf;
}

export class NMUPDOWNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iPos(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iDelta(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iPos(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iDelta(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.PBRANGE (size: 8)
 */
export interface PBRANGE {
  /** i32 */
  iLow: number;
  /** i32 */
  iHigh: number;
}

export const sizeofPBRANGE = 8;

export function allocPBRANGE(data?: Partial<PBRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPBRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iLow !== undefined) view.setInt32(0, Number(data.iLow), true);
  // 0x04: i32
  if (data?.iHigh !== undefined) view.setInt32(4, Number(data.iHigh), true);
  return buf;
}

export class PBRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iLow(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iHigh(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set iLow(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iHigh(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.LITEM (size: 32)
 */
export interface LITEM {
  /** Windows.Win32.UI.Controls.LIST_ITEM_FLAGS */
  mask: LIST_ITEM_FLAGS;
  /** i32 */
  iLink: number;
  /** Windows.Win32.UI.Controls.LIST_ITEM_STATE_FLAGS */
  state: LIST_ITEM_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.LIST_ITEM_STATE_FLAGS */
  stateMask: LIST_ITEM_STATE_FLAGS;
  /** array */
  szID: Deno.PointerValue;
  /** array */
  szUrl: Deno.PointerValue;
}

export const sizeofLITEM = 32;

export function allocLITEM(data?: Partial<LITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofLITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.iLink !== undefined) view.setInt32(4, Number(data.iLink), true);
  // 0x08: u32
  if (data?.state !== undefined) view.setUint32(8, Number(data.state), true);
  // 0x0c: u32
  if (data?.stateMask !== undefined) view.setUint32(12, Number(data.stateMask), true);
  // 0x10: pointer
  if (data?.szID !== undefined) view.setBigUint64(16, data.szID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szID))), true);
  // 0x18: pointer
  if (data?.szUrl !== undefined) view.setBigUint64(24, data.szUrl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szUrl))), true);
  return buf;
}

export class LITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iLink(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get state(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get stateMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get szID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get szUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iLink(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set state(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set stateMask(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set szID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set szUrl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.LHITTESTINFO (size: 16)
 */
export interface LHITTESTINFO {
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LITEM */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofLHITTESTINFO = 16;

export function allocLHITTESTINFO(data?: Partial<LHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pt !== undefined) view.setBigUint64(0, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class LHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLINK (size: 16)
 */
export interface NMLINK {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LITEM */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLINK = 16;

export function allocNMLINK(data?: Partial<NMLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLINK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMLINKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVITEMA (size: 88)
 */
export interface LVITEMA {
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_FLAGS */
  mask: LIST_VIEW_ITEM_FLAGS;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS */
  state: LIST_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS */
  stateMask: LIST_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iIndent: number;
  /** Windows.Win32.UI.Controls.LVITEMA_GROUP_ID */
  iGroupId: LVITEMA_GROUP_ID;
  /** u32 */
  cColumns: number;
  /** ptr */
  puColumns: Deno.PointerValue | Uint8Array;
  /** ptr */
  piColFmt: Deno.PointerValue | Uint8Array;
  /** i32 */
  iGroup: number;
}

export const sizeofLVITEMA = 88;

export function allocLVITEMA(data?: Partial<LVITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofLVITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.iItem !== undefined) view.setInt32(4, Number(data.iItem), true);
  // 0x08: i32
  if (data?.iSubItem !== undefined) view.setInt32(8, Number(data.iSubItem), true);
  // 0x0c: u32
  if (data?.state !== undefined) view.setUint32(12, Number(data.state), true);
  // 0x10: u32
  if (data?.stateMask !== undefined) view.setUint32(16, Number(data.stateMask), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchTextMax !== undefined) view.setInt32(32, Number(data.cchTextMax), true);
  // 0x24: i32
  if (data?.iImage !== undefined) view.setInt32(36, Number(data.iImage), true);
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x30: i32
  if (data?.iIndent !== undefined) view.setInt32(48, Number(data.iIndent), true);
  // 0x34: i32
  if (data?.iGroupId !== undefined) view.setInt32(52, Number(data.iGroupId), true);
  // 0x38: u32
  if (data?.cColumns !== undefined) view.setUint32(56, Number(data.cColumns), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.puColumns !== undefined) view.setBigUint64(64, data.puColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.puColumns))), true);
  // 0x48: pointer
  if (data?.piColFmt !== undefined) view.setBigUint64(72, data.piColFmt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.piColFmt))), true);
  // 0x50: i32
  if (data?.iGroup !== undefined) view.setInt32(80, Number(data.iGroup), true);
  // 0x54: pad4
  return buf;
}

export class LVITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iItem(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get iSubItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get state(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get stateMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchTextMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iImage(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get iIndent(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get iGroupId(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: u32
  get cColumns(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get puColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get piColFmt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: i32
  get iGroup(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iItem(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set iSubItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set state(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set stateMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchTextMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iImage(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set iIndent(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set iGroupId(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: u32
  set cColumns(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set puColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set piColFmt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: i32
  set iGroup(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.UI.Controls.LVITEMW (size: 88)
 */
export interface LVITEMW {
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_FLAGS */
  mask: LIST_VIEW_ITEM_FLAGS;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS */
  state: LIST_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS */
  stateMask: LIST_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iIndent: number;
  /** Windows.Win32.UI.Controls.LVITEMA_GROUP_ID */
  iGroupId: LVITEMA_GROUP_ID;
  /** u32 */
  cColumns: number;
  /** ptr */
  puColumns: Deno.PointerValue | Uint8Array;
  /** ptr */
  piColFmt: Deno.PointerValue | Uint8Array;
  /** i32 */
  iGroup: number;
}

export const sizeofLVITEMW = 88;

export function allocLVITEMW(data?: Partial<LVITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofLVITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.iItem !== undefined) view.setInt32(4, Number(data.iItem), true);
  // 0x08: i32
  if (data?.iSubItem !== undefined) view.setInt32(8, Number(data.iSubItem), true);
  // 0x0c: u32
  if (data?.state !== undefined) view.setUint32(12, Number(data.state), true);
  // 0x10: u32
  if (data?.stateMask !== undefined) view.setUint32(16, Number(data.stateMask), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchTextMax !== undefined) view.setInt32(32, Number(data.cchTextMax), true);
  // 0x24: i32
  if (data?.iImage !== undefined) view.setInt32(36, Number(data.iImage), true);
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x30: i32
  if (data?.iIndent !== undefined) view.setInt32(48, Number(data.iIndent), true);
  // 0x34: i32
  if (data?.iGroupId !== undefined) view.setInt32(52, Number(data.iGroupId), true);
  // 0x38: u32
  if (data?.cColumns !== undefined) view.setUint32(56, Number(data.cColumns), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.puColumns !== undefined) view.setBigUint64(64, data.puColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.puColumns))), true);
  // 0x48: pointer
  if (data?.piColFmt !== undefined) view.setBigUint64(72, data.piColFmt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.piColFmt))), true);
  // 0x50: i32
  if (data?.iGroup !== undefined) view.setInt32(80, Number(data.iGroup), true);
  // 0x54: pad4
  return buf;
}

export class LVITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iItem(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get iSubItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get state(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get stateMask(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchTextMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iImage(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get iIndent(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get iGroupId(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: u32
  get cColumns(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get puColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get piColFmt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: i32
  get iGroup(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iItem(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set iSubItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set state(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set stateMask(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchTextMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iImage(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set iIndent(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set iGroupId(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: u32
  set cColumns(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set puColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set piColFmt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: i32
  set iGroup(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.UI.Controls.LVFINDINFOA (size: 40)
 */
export interface LVFINDINFOA {
  /** Windows.Win32.UI.Controls.LVFINDINFOW_FLAGS */
  flags: LVFINDINFOW_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  psz: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** u32 */
  vkDirection: number;
}

export const sizeofLVFINDINFOA = 40;

export function allocLVFINDINFOA(data?: Partial<LVFINDINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofLVFINDINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.psz !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.psz);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x18: pointer
  if (data?.pt !== undefined) view.setBigUint64(24, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x20: u32
  if (data?.vkDirection !== undefined) view.setUint32(32, Number(data.vkDirection), true);
  // 0x24: pad4
  return buf;
}

export class LVFINDINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get psz(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get vkDirection(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set psz(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set vkDirection(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.LVFINDINFOW (size: 40)
 */
export interface LVFINDINFOW {
  /** Windows.Win32.UI.Controls.LVFINDINFOW_FLAGS */
  flags: LVFINDINFOW_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  psz: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** u32 */
  vkDirection: number;
}

export const sizeofLVFINDINFOW = 40;

export function allocLVFINDINFOW(data?: Partial<LVFINDINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofLVFINDINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.psz !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.psz);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x18: pointer
  if (data?.pt !== undefined) view.setBigUint64(24, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x20: u32
  if (data?.vkDirection !== undefined) view.setUint32(32, Number(data.vkDirection), true);
  // 0x24: pad4
  return buf;
}

export class LVFINDINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get psz(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get vkDirection(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set psz(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set vkDirection(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.LVHITTESTINFO (size: 24)
 */
export interface LVHITTESTINFO {
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LVHITTESTINFO_FLAGS */
  flags: LVHITTESTINFO_FLAGS;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** i32 */
  iGroup: number;
}

export const sizeofLVHITTESTINFO = 24;

export function allocLVHITTESTINFO(data?: Partial<LVHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLVHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pt !== undefined) view.setBigUint64(0, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: i32
  if (data?.iItem !== undefined) view.setInt32(12, Number(data.iItem), true);
  // 0x10: i32
  if (data?.iSubItem !== undefined) view.setInt32(16, Number(data.iSubItem), true);
  // 0x14: i32
  if (data?.iGroup !== undefined) view.setInt32(20, Number(data.iGroup), true);
  return buf;
}

export class LVHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iItem(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get iSubItem(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iGroup(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iItem(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set iSubItem(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iGroup(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVCOLUMNA (size: 56)
 */
export interface LVCOLUMNA {
  /** Windows.Win32.UI.Controls.LVCOLUMNW_MASK */
  mask: LVCOLUMNW_MASK;
  /** Windows.Win32.UI.Controls.LVCOLUMNW_FORMAT */
  fmt: LVCOLUMNW_FORMAT;
  /** i32 */
  cx: number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iSubItem: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iOrder: number;
  /** i32 */
  cxMin: number;
  /** i32 */
  cxDefault: number;
  /** i32 */
  cxIdeal: number;
}

export const sizeofLVCOLUMNA = 56;

export function allocLVCOLUMNA(data?: Partial<LVCOLUMNA>): Uint8Array {
  const buf = new Uint8Array(sizeofLVCOLUMNA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: u32
  if (data?.fmt !== undefined) view.setUint32(4, Number(data.fmt), true);
  // 0x08: i32
  if (data?.cx !== undefined) view.setInt32(8, Number(data.cx), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iSubItem !== undefined) view.setInt32(28, Number(data.iSubItem), true);
  // 0x20: i32
  if (data?.iImage !== undefined) view.setInt32(32, Number(data.iImage), true);
  // 0x24: i32
  if (data?.iOrder !== undefined) view.setInt32(36, Number(data.iOrder), true);
  // 0x28: i32
  if (data?.cxMin !== undefined) view.setInt32(40, Number(data.cxMin), true);
  // 0x2c: i32
  if (data?.cxDefault !== undefined) view.setInt32(44, Number(data.cxDefault), true);
  // 0x30: i32
  if (data?.cxIdeal !== undefined) view.setInt32(48, Number(data.cxIdeal), true);
  // 0x34: pad4
  return buf;
}

export class LVCOLUMNAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fmt(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get cx(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iSubItem(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iImage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iOrder(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get cxMin(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cxDefault(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get cxIdeal(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fmt(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set cx(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iSubItem(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iImage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iOrder(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set cxMin(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cxDefault(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set cxIdeal(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.UI.Controls.LVCOLUMNW (size: 56)
 */
export interface LVCOLUMNW {
  /** Windows.Win32.UI.Controls.LVCOLUMNW_MASK */
  mask: LVCOLUMNW_MASK;
  /** Windows.Win32.UI.Controls.LVCOLUMNW_FORMAT */
  fmt: LVCOLUMNW_FORMAT;
  /** i32 */
  cx: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iSubItem: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iOrder: number;
  /** i32 */
  cxMin: number;
  /** i32 */
  cxDefault: number;
  /** i32 */
  cxIdeal: number;
}

export const sizeofLVCOLUMNW = 56;

export function allocLVCOLUMNW(data?: Partial<LVCOLUMNW>): Uint8Array {
  const buf = new Uint8Array(sizeofLVCOLUMNW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: u32
  if (data?.fmt !== undefined) view.setUint32(4, Number(data.fmt), true);
  // 0x08: i32
  if (data?.cx !== undefined) view.setInt32(8, Number(data.cx), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iSubItem !== undefined) view.setInt32(28, Number(data.iSubItem), true);
  // 0x20: i32
  if (data?.iImage !== undefined) view.setInt32(32, Number(data.iImage), true);
  // 0x24: i32
  if (data?.iOrder !== undefined) view.setInt32(36, Number(data.iOrder), true);
  // 0x28: i32
  if (data?.cxMin !== undefined) view.setInt32(40, Number(data.cxMin), true);
  // 0x2c: i32
  if (data?.cxDefault !== undefined) view.setInt32(44, Number(data.cxDefault), true);
  // 0x30: i32
  if (data?.cxIdeal !== undefined) view.setInt32(48, Number(data.cxIdeal), true);
  // 0x34: pad4
  return buf;
}

export class LVCOLUMNWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fmt(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get cx(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iSubItem(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iImage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iOrder(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get cxMin(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cxDefault(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get cxIdeal(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fmt(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set cx(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iSubItem(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iImage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iOrder(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set cxMin(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cxDefault(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set cxIdeal(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.UI.Controls.LVBKIMAGEA (size: 40)
 */
export interface LVBKIMAGEA {
  /** Windows.Win32.UI.Controls.LIST_VIEW_BACKGROUND_IMAGE_FLAGS */
  ulFlags: LIST_VIEW_BACKGROUND_IMAGE_FLAGS;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszImage: string | null | Uint8Array;
  /** u32 */
  cchImageMax: number;
  /** i32 */
  xOffsetPercent: number;
  /** i32 */
  yOffsetPercent: number;
}

export const sizeofLVBKIMAGEA = 40;

export function allocLVBKIMAGEA(data?: Partial<LVBKIMAGEA>): Uint8Array {
  const buf = new Uint8Array(sizeofLVBKIMAGEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFlags !== undefined) view.setUint32(0, Number(data.ulFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hbm !== undefined) view.setBigUint64(8, data.hbm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbm))), true);
  // 0x10: buffer
  if (data?.pszImage !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszImage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cchImageMax !== undefined) view.setUint32(24, Number(data.cchImageMax), true);
  // 0x1c: i32
  if (data?.xOffsetPercent !== undefined) view.setInt32(28, Number(data.xOffsetPercent), true);
  // 0x20: i32
  if (data?.yOffsetPercent !== undefined) view.setInt32(32, Number(data.yOffsetPercent), true);
  // 0x24: pad4
  return buf;
}

export class LVBKIMAGEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hbm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cchImageMax(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get xOffsetPercent(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get yOffsetPercent(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set ulFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hbm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszImage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cchImageMax(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set xOffsetPercent(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set yOffsetPercent(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.LVBKIMAGEW (size: 40)
 */
export interface LVBKIMAGEW {
  /** Windows.Win32.UI.Controls.LIST_VIEW_BACKGROUND_IMAGE_FLAGS */
  ulFlags: LIST_VIEW_BACKGROUND_IMAGE_FLAGS;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszImage: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchImageMax: number;
  /** i32 */
  xOffsetPercent: number;
  /** i32 */
  yOffsetPercent: number;
}

export const sizeofLVBKIMAGEW = 40;

export function allocLVBKIMAGEW(data?: Partial<LVBKIMAGEW>): Uint8Array {
  const buf = new Uint8Array(sizeofLVBKIMAGEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulFlags !== undefined) view.setUint32(0, Number(data.ulFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hbm !== undefined) view.setBigUint64(8, data.hbm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbm))), true);
  // 0x10: buffer
  if (data?.pszImage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszImage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.cchImageMax !== undefined) view.setUint32(24, Number(data.cchImageMax), true);
  // 0x1c: i32
  if (data?.xOffsetPercent !== undefined) view.setInt32(28, Number(data.xOffsetPercent), true);
  // 0x20: i32
  if (data?.yOffsetPercent !== undefined) view.setInt32(32, Number(data.yOffsetPercent), true);
  // 0x24: pad4
  return buf;
}

export class LVBKIMAGEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hbm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cchImageMax(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get xOffsetPercent(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get yOffsetPercent(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set ulFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hbm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszImage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set cchImageMax(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set xOffsetPercent(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set yOffsetPercent(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.LVGROUP (size: 152)
 */
export interface LVGROUP {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.LVGROUP_MASK */
  mask: LVGROUP_MASK;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeader: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchHeader: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszFooter: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchFooter: number;
  /** i32 */
  iGroupId: number;
  /** Windows.Win32.UI.Controls.LIST_VIEW_GROUP_STATE_FLAGS */
  stateMask: LIST_VIEW_GROUP_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.LIST_VIEW_GROUP_STATE_FLAGS */
  state: LIST_VIEW_GROUP_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.LIST_VIEW_GROUP_ALIGN_FLAGS */
  uAlign: LIST_VIEW_GROUP_ALIGN_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszSubtitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchSubtitle: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTask: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchTask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescriptionTop: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchDescriptionTop: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescriptionBottom: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchDescriptionBottom: number;
  /** i32 */
  iTitleImage: number;
  /** i32 */
  iExtendedImage: number;
  /** i32 */
  iFirstItem: number;
  /** u32 */
  cItems: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSubsetTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchSubsetTitle: number;
}

export const sizeofLVGROUP = 152;

export function allocLVGROUP(data?: Partial<LVGROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofLVGROUP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.mask !== undefined) view.setUint32(4, Number(data.mask), true);
  // 0x08: buffer
  if (data?.pszHeader !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszHeader);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchHeader !== undefined) view.setInt32(16, Number(data.cchHeader), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszFooter !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszFooter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchFooter !== undefined) view.setInt32(32, Number(data.cchFooter), true);
  // 0x24: i32
  if (data?.iGroupId !== undefined) view.setInt32(36, Number(data.iGroupId), true);
  // 0x28: u32
  if (data?.stateMask !== undefined) view.setUint32(40, Number(data.stateMask), true);
  // 0x2c: u32
  if (data?.state !== undefined) view.setUint32(44, Number(data.state), true);
  // 0x30: u32
  if (data?.uAlign !== undefined) view.setUint32(48, Number(data.uAlign), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.pszSubtitle !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszSubtitle);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.cchSubtitle !== undefined) view.setUint32(64, Number(data.cchSubtitle), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.pszTask !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pszTask);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.cchTask !== undefined) view.setUint32(80, Number(data.cchTask), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.pszDescriptionTop !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszDescriptionTop);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.cchDescriptionTop !== undefined) view.setUint32(96, Number(data.cchDescriptionTop), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.pszDescriptionBottom !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.pszDescriptionBottom);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: u32
  if (data?.cchDescriptionBottom !== undefined) view.setUint32(112, Number(data.cchDescriptionBottom), true);
  // 0x74: i32
  if (data?.iTitleImage !== undefined) view.setInt32(116, Number(data.iTitleImage), true);
  // 0x78: i32
  if (data?.iExtendedImage !== undefined) view.setInt32(120, Number(data.iExtendedImage), true);
  // 0x7c: i32
  if (data?.iFirstItem !== undefined) view.setInt32(124, Number(data.iFirstItem), true);
  // 0x80: u32
  if (data?.cItems !== undefined) view.setUint32(128, Number(data.cItems), true);
  // 0x84: pad4
  // 0x88: buffer
  if (data?.pszSubsetTitle !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.pszSubsetTitle);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f136))), true);
  }
  // 0x90: u32
  if (data?.cchSubsetTitle !== undefined) view.setUint32(144, Number(data.cchSubsetTitle), true);
  // 0x94: pad4
  return buf;
}

export class LVGROUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get mask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchHeader(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pszFooter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchFooter(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iGroupId(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get stateMask(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get state(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get uAlign(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  get pszSubtitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cchSubtitle(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get pszTask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get cchTask(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get pszDescriptionTop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cchDescriptionTop(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get pszDescriptionBottom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get cchDescriptionBottom(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: i32
  get iTitleImage(): number {
    return this.view.getInt32(116, true);
  }

  // 0x78: i32
  get iExtendedImage(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: i32
  get iFirstItem(): number {
    return this.view.getInt32(124, true);
  }

  // 0x80: u32
  get cItems(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: buffer
  get pszSubsetTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get cchSubsetTitle(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set mask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszHeader(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchHeader(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pszFooter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchFooter(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iGroupId(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set stateMask(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set state(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set uAlign(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  set pszSubtitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set cchSubtitle(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set pszTask(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set cchTask(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set pszDescriptionTop(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set cchDescriptionTop(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set pszDescriptionBottom(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: u32
  set cchDescriptionBottom(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: i32
  set iTitleImage(value: number) {
    this.view.setInt32(116, value, true);
  }

  // 0x78: i32
  set iExtendedImage(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: i32
  set iFirstItem(value: number) {
    this.view.setInt32(124, value, true);
  }

  // 0x80: u32
  set cItems(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: buffer
  set pszSubsetTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f136 = value;
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f136))), true);
  }

  // 0x90: u32
  set cchSubsetTitle(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4
}

/**
 * Windows.Win32.UI.Controls.LVGROUPMETRICS (size: 72)
 */
export interface LVGROUPMETRICS {
  /** u32 */
  cbSize: number;
  /** u32 */
  mask: number;
  /** u32 */
  Left: number;
  /** u32 */
  Top: number;
  /** u32 */
  Right: number;
  /** u32 */
  Bottom: number;
  /** Windows.Win32.Foundation.COLORREF */
  crLeft: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crTop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crRight: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBottom: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crHeader: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crFooter: Uint8Array | Deno.PointerValue;
}

export const sizeofLVGROUPMETRICS = 72;

export function allocLVGROUPMETRICS(data?: Partial<LVGROUPMETRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofLVGROUPMETRICS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.mask !== undefined) view.setUint32(4, Number(data.mask), true);
  // 0x08: u32
  if (data?.Left !== undefined) view.setUint32(8, Number(data.Left), true);
  // 0x0c: u32
  if (data?.Top !== undefined) view.setUint32(12, Number(data.Top), true);
  // 0x10: u32
  if (data?.Right !== undefined) view.setUint32(16, Number(data.Right), true);
  // 0x14: u32
  if (data?.Bottom !== undefined) view.setUint32(20, Number(data.Bottom), true);
  // 0x18: pointer
  if (data?.crLeft !== undefined) view.setBigUint64(24, data.crLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crLeft))), true);
  // 0x20: pointer
  if (data?.crTop !== undefined) view.setBigUint64(32, data.crTop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crTop))), true);
  // 0x28: pointer
  if (data?.crRight !== undefined) view.setBigUint64(40, data.crRight === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crRight))), true);
  // 0x30: pointer
  if (data?.crBottom !== undefined) view.setBigUint64(48, data.crBottom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBottom))), true);
  // 0x38: pointer
  if (data?.crHeader !== undefined) view.setBigUint64(56, data.crHeader === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crHeader))), true);
  // 0x40: pointer
  if (data?.crFooter !== undefined) view.setBigUint64(64, data.crFooter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crFooter))), true);
  return buf;
}

export class LVGROUPMETRICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get mask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Left(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Top(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Right(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Bottom(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get crLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get crTop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get crRight(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get crBottom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crHeader(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get crFooter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set mask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Left(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Top(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Right(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Bottom(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set crLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set crTop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set crRight(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set crBottom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crHeader(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set crFooter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVINSERTGROUPSORTED (size: 24)
 */
export interface LVINSERTGROUPSORTED {
  /** Windows.Win32.UI.Controls.PFNLVGROUPCOMPARE */
  pfnGroupCompare: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.LVGROUP */
  lvGroup: Uint8Array | Deno.PointerValue;
}

export const sizeofLVINSERTGROUPSORTED = 24;

export function allocLVINSERTGROUPSORTED(data?: Partial<LVINSERTGROUPSORTED>): Uint8Array {
  const buf = new Uint8Array(sizeofLVINSERTGROUPSORTED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnGroupCompare !== undefined) view.setBigUint64(0, data.pfnGroupCompare === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnGroupCompare))), true);
  // 0x08: pointer
  if (data?.pvData !== undefined) view.setBigUint64(8, data.pvData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvData))), true);
  // 0x10: pointer
  if (data?.lvGroup !== undefined) view.setBigUint64(16, data.lvGroup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lvGroup))), true);
  return buf;
}

export class LVINSERTGROUPSORTEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pfnGroupCompare(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pvData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lvGroup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pfnGroupCompare(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pvData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lvGroup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

export class SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cy(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVTILEVIEWINFO (size: 40)
 */
export interface LVTILEVIEWINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.LVTILEVIEWINFO_MASK */
  dwMask: LVTILEVIEWINFO_MASK;
  /** Windows.Win32.UI.Controls.LVTILEVIEWINFO_FLAGS */
  dwFlags: LVTILEVIEWINFO_FLAGS;
  /** Windows.Win32.Foundation.SIZE */
  sizeTile: Uint8Array | Deno.PointerValue;
  /** i32 */
  cLines: number;
  /** Windows.Win32.Foundation.RECT */
  rcLabelMargin: Uint8Array | Deno.PointerValue;
}

export const sizeofLVTILEVIEWINFO = 40;

export function allocLVTILEVIEWINFO(data?: Partial<LVTILEVIEWINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLVTILEVIEWINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.sizeTile !== undefined) view.setBigUint64(16, data.sizeTile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sizeTile))), true);
  // 0x18: i32
  if (data?.cLines !== undefined) view.setInt32(24, Number(data.cLines), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rcLabelMargin !== undefined) view.setBigUint64(32, data.rcLabelMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcLabelMargin))), true);
  return buf;
}

export class LVTILEVIEWINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get sizeTile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cLines(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rcLabelMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set sizeTile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set cLines(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rcLabelMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVTILEINFO (size: 32)
 */
export interface LVTILEINFO {
  /** u32 */
  cbSize: number;
  /** i32 */
  iItem: number;
  /** u32 */
  cColumns: number;
  /** ptr */
  puColumns: Deno.PointerValue | Uint8Array;
  /** ptr */
  piColFmt: Deno.PointerValue | Uint8Array;
}

export const sizeofLVTILEINFO = 32;

export function allocLVTILEINFO(data?: Partial<LVTILEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLVTILEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.iItem !== undefined) view.setInt32(4, Number(data.iItem), true);
  // 0x08: u32
  if (data?.cColumns !== undefined) view.setUint32(8, Number(data.cColumns), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.puColumns !== undefined) view.setBigUint64(16, data.puColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.puColumns))), true);
  // 0x18: pointer
  if (data?.piColFmt !== undefined) view.setBigUint64(24, data.piColFmt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.piColFmt))), true);
  return buf;
}

export class LVTILEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iItem(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get cColumns(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get puColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get piColFmt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iItem(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set cColumns(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set puColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set piColFmt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVINSERTMARK (size: 16)
 */
export interface LVINSERTMARK {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.LIST_VIEW_INSERT_MARK_FLAGS */
  dwFlags: LIST_VIEW_INSERT_MARK_FLAGS;
  /** i32 */
  iItem: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofLVINSERTMARK = 16;

export function allocLVINSERTMARK(data?: Partial<LVINSERTMARK>): Uint8Array {
  const buf = new Uint8Array(sizeofLVINSERTMARK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export class LVINSERTMARKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVSETINFOTIP (size: 24)
 */
export interface LVSETINFOTIP {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
}

export const sizeofLVSETINFOTIP = 24;

export function allocLVSETINFOTIP(data?: Partial<LVSETINFOTIP>): Uint8Array {
  const buf = new Uint8Array(sizeofLVSETINFOTIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.iItem !== undefined) view.setInt32(16, Number(data.iItem), true);
  // 0x14: i32
  if (data?.iSubItem !== undefined) view.setInt32(20, Number(data.iSubItem), true);
  return buf;
}

export class LVSETINFOTIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get iItem(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iSubItem(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set iItem(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iSubItem(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVFOOTERINFO (size: 24)
 */
export interface LVFOOTERINFO {
  /** u32 */
  mask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** u32 */
  cItems: number;
}

export const sizeofLVFOOTERINFO = 24;

export function allocLVFOOTERINFO(data?: Partial<LVFOOTERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLVFOOTERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchTextMax !== undefined) view.setInt32(16, Number(data.cchTextMax), true);
  // 0x14: u32
  if (data?.cItems !== undefined) view.setUint32(20, Number(data.cItems), true);
  return buf;
}

export class LVFOOTERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchTextMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get cItems(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchTextMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set cItems(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.LVFOOTERITEM (size: 32)
 */
export interface LVFOOTERITEM {
  /** Windows.Win32.UI.Controls.LVFOOTERITEM_MASK */
  mask: LVFOOTERITEM_MASK;
  /** i32 */
  iItem: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** u32 */
  state: number;
  /** u32 */
  stateMask: number;
}

export const sizeofLVFOOTERITEM = 32;

export function allocLVFOOTERITEM(data?: Partial<LVFOOTERITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofLVFOOTERITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: i32
  if (data?.iItem !== undefined) view.setInt32(4, Number(data.iItem), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchTextMax !== undefined) view.setInt32(16, Number(data.cchTextMax), true);
  // 0x14: u32
  if (data?.state !== undefined) view.setUint32(20, Number(data.state), true);
  // 0x18: u32
  if (data?.stateMask !== undefined) view.setUint32(24, Number(data.stateMask), true);
  // 0x1c: pad4
  return buf;
}

export class LVFOOTERITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iItem(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchTextMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get state(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get stateMask(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iItem(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchTextMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set state(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set stateMask(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.LVITEMINDEX (size: 8)
 */
export interface LVITEMINDEX {
  /** i32 */
  iItem: number;
  /** i32 */
  iGroup: number;
}

export const sizeofLVITEMINDEX = 8;

export function allocLVITEMINDEX(data?: Partial<LVITEMINDEX>): Uint8Array {
  const buf = new Uint8Array(sizeofLVITEMINDEX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iItem !== undefined) view.setInt32(0, Number(data.iItem), true);
  // 0x04: i32
  if (data?.iGroup !== undefined) view.setInt32(4, Number(data.iGroup), true);
  return buf;
}

export class LVITEMINDEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iItem(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get iGroup(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set iItem(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set iGroup(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLISTVIEW (size: 48)
 */
export interface NMLISTVIEW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** u32 */
  uNewState: number;
  /** u32 */
  uOldState: number;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_FLAGS */
  uChanged: LIST_VIEW_ITEM_FLAGS;
  /** Windows.Win32.Foundation.POINT */
  ptAction: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLISTVIEW = 48;

export function allocNMLISTVIEW(data?: Partial<NMLISTVIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLISTVIEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: i32
  if (data?.iSubItem !== undefined) view.setInt32(12, Number(data.iSubItem), true);
  // 0x10: u32
  if (data?.uNewState !== undefined) view.setUint32(16, Number(data.uNewState), true);
  // 0x14: u32
  if (data?.uOldState !== undefined) view.setUint32(20, Number(data.uOldState), true);
  // 0x18: u32
  if (data?.uChanged !== undefined) view.setUint32(24, Number(data.uChanged), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ptAction !== undefined) view.setBigUint64(32, data.ptAction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptAction))), true);
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMLISTVIEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iSubItem(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get uNewState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uOldState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uChanged(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ptAction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iSubItem(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set uNewState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uOldState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uChanged(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ptAction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMITEMACTIVATE (size: 56)
 */
export interface NMITEMACTIVATE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** u32 */
  uNewState: number;
  /** u32 */
  uOldState: number;
  /** u32 */
  uChanged: number;
  /** Windows.Win32.Foundation.POINT */
  ptAction: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  uKeyFlags: number;
}

export const sizeofNMITEMACTIVATE = 56;

export function allocNMITEMACTIVATE(data?: Partial<NMITEMACTIVATE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMITEMACTIVATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItem !== undefined) view.setInt32(8, Number(data.iItem), true);
  // 0x0c: i32
  if (data?.iSubItem !== undefined) view.setInt32(12, Number(data.iSubItem), true);
  // 0x10: u32
  if (data?.uNewState !== undefined) view.setUint32(16, Number(data.uNewState), true);
  // 0x14: u32
  if (data?.uOldState !== undefined) view.setUint32(20, Number(data.uOldState), true);
  // 0x18: u32
  if (data?.uChanged !== undefined) view.setUint32(24, Number(data.uChanged), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ptAction !== undefined) view.setBigUint64(32, data.ptAction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptAction))), true);
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x30: u32
  if (data?.uKeyFlags !== undefined) view.setUint32(48, Number(data.uKeyFlags), true);
  // 0x34: pad4
  return buf;
}

export class NMITEMACTIVATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItem(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iSubItem(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get uNewState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uOldState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get uChanged(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ptAction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get uKeyFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItem(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iSubItem(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set uNewState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uOldState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set uChanged(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ptAction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set uKeyFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.UI.Controls.NMLVCUSTOMDRAW (size: 72)
 */
export interface NMLVCUSTOMDRAW {
  /** Windows.Win32.UI.Controls.NMCUSTOMDRAW */
  nmcd: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrText: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrTextBk: Uint8Array | Deno.PointerValue;
  /** i32 */
  iSubItem: number;
  /** Windows.Win32.UI.Controls.NMLVCUSTOMDRAW_ITEM_TYPE */
  dwItemType: NMLVCUSTOMDRAW_ITEM_TYPE;
  /** Windows.Win32.Foundation.COLORREF */
  clrFace: Uint8Array | Deno.PointerValue;
  /** i32 */
  iIconEffect: number;
  /** i32 */
  iIconPhase: number;
  /** i32 */
  iPartId: number;
  /** i32 */
  iStateId: number;
  /** Windows.Win32.Foundation.RECT */
  rcText: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LIST_VIEW_GROUP_ALIGN_FLAGS */
  uAlign: LIST_VIEW_GROUP_ALIGN_FLAGS;
}

export const sizeofNMLVCUSTOMDRAW = 72;

export function allocNMLVCUSTOMDRAW(data?: Partial<NMLVCUSTOMDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVCUSTOMDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmcd !== undefined) view.setBigUint64(0, data.nmcd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmcd))), true);
  // 0x08: pointer
  if (data?.clrText !== undefined) view.setBigUint64(8, data.clrText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrText))), true);
  // 0x10: pointer
  if (data?.clrTextBk !== undefined) view.setBigUint64(16, data.clrTextBk === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrTextBk))), true);
  // 0x18: i32
  if (data?.iSubItem !== undefined) view.setInt32(24, Number(data.iSubItem), true);
  // 0x1c: u32
  if (data?.dwItemType !== undefined) view.setUint32(28, Number(data.dwItemType), true);
  // 0x20: pointer
  if (data?.clrFace !== undefined) view.setBigUint64(32, data.clrFace === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrFace))), true);
  // 0x28: i32
  if (data?.iIconEffect !== undefined) view.setInt32(40, Number(data.iIconEffect), true);
  // 0x2c: i32
  if (data?.iIconPhase !== undefined) view.setInt32(44, Number(data.iIconPhase), true);
  // 0x30: i32
  if (data?.iPartId !== undefined) view.setInt32(48, Number(data.iPartId), true);
  // 0x34: i32
  if (data?.iStateId !== undefined) view.setInt32(52, Number(data.iStateId), true);
  // 0x38: pointer
  if (data?.rcText !== undefined) view.setBigUint64(56, data.rcText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcText))), true);
  // 0x40: u32
  if (data?.uAlign !== undefined) view.setUint32(64, Number(data.uAlign), true);
  // 0x44: pad4
  return buf;
}

export class NMLVCUSTOMDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmcd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get clrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get clrTextBk(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get iSubItem(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwItemType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get clrFace(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get iIconEffect(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get iIconPhase(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get iPartId(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get iStateId(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get rcText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get uAlign(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: pointer
  set nmcd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set clrText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set clrTextBk(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set iSubItem(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwItemType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set clrFace(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set iIconEffect(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set iIconPhase(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set iPartId(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set iStateId(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set rcText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set uAlign(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.UI.Controls.NMLVCACHEHINT (size: 16)
 */
export interface NMLVCACHEHINT {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iFrom: number;
  /** i32 */
  iTo: number;
}

export const sizeofNMLVCACHEHINT = 16;

export function allocNMLVCACHEHINT(data?: Partial<NMLVCACHEHINT>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVCACHEHINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iFrom !== undefined) view.setInt32(8, Number(data.iFrom), true);
  // 0x0c: i32
  if (data?.iTo !== undefined) view.setInt32(12, Number(data.iTo), true);
  return buf;
}

export class NMLVCACHEHINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iFrom(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iTo(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iFrom(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iTo(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVFINDITEMA (size: 24)
 */
export interface NMLVFINDITEMA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iStart: number;
  /** Windows.Win32.UI.Controls.LVFINDINFOA */
  lvfi: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLVFINDITEMA = 24;

export function allocNMLVFINDITEMA(data?: Partial<NMLVFINDITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVFINDITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iStart !== undefined) view.setInt32(8, Number(data.iStart), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lvfi !== undefined) view.setBigUint64(16, data.lvfi === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lvfi))), true);
  return buf;
}

export class NMLVFINDITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iStart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lvfi(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iStart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lvfi(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVFINDITEMW (size: 24)
 */
export interface NMLVFINDITEMW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iStart: number;
  /** Windows.Win32.UI.Controls.LVFINDINFOW */
  lvfi: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLVFINDITEMW = 24;

export function allocNMLVFINDITEMW(data?: Partial<NMLVFINDITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVFINDITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iStart !== undefined) view.setInt32(8, Number(data.iStart), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lvfi !== undefined) view.setBigUint64(16, data.lvfi === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lvfi))), true);
  return buf;
}

export class NMLVFINDITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iStart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lvfi(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iStart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lvfi(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVODSTATECHANGE (size: 24)
 */
export interface NMLVODSTATECHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iFrom: number;
  /** i32 */
  iTo: number;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS */
  uNewState: LIST_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.LIST_VIEW_ITEM_STATE_FLAGS */
  uOldState: LIST_VIEW_ITEM_STATE_FLAGS;
}

export const sizeofNMLVODSTATECHANGE = 24;

export function allocNMLVODSTATECHANGE(data?: Partial<NMLVODSTATECHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVODSTATECHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iFrom !== undefined) view.setInt32(8, Number(data.iFrom), true);
  // 0x0c: i32
  if (data?.iTo !== undefined) view.setInt32(12, Number(data.iTo), true);
  // 0x10: u32
  if (data?.uNewState !== undefined) view.setUint32(16, Number(data.uNewState), true);
  // 0x14: u32
  if (data?.uOldState !== undefined) view.setUint32(20, Number(data.uOldState), true);
  return buf;
}

export class NMLVODSTATECHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iFrom(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iTo(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get uNewState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get uOldState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iFrom(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iTo(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set uNewState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set uOldState(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVDISPINFOA (size: 16)
 */
export interface NMLVDISPINFOA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LVITEMA */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLVDISPINFOA = 16;

export function allocNMLVDISPINFOA(data?: Partial<NMLVDISPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVDISPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMLVDISPINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVDISPINFOW (size: 16)
 */
export interface NMLVDISPINFOW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LVITEMW */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLVDISPINFOW = 16;

export function allocNMLVDISPINFOW(data?: Partial<NMLVDISPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVDISPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMLVDISPINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVKEYDOWN (size: 16)
 */
export interface NMLVKEYDOWN {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u16 */
  wVKey: number;
  /** u32 */
  flags: number;
}

export const sizeofNMLVKEYDOWN = 16;

export function allocNMLVKEYDOWN(data?: Partial<NMLVKEYDOWN>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVKEYDOWN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u16
  if (data?.wVKey !== undefined) view.setUint16(8, Number(data.wVKey), true);
  // 0x0a: u32
  if (data?.flags !== undefined) view.setUint32(10, Number(data.flags), true);
  // 0x0e: pad2
  return buf;
}

export class NMLVKEYDOWNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wVKey(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get flags(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: pad2

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wVKey(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set flags(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.UI.Controls.NMLVLINK (size: 24)
 */
export interface NMLVLINK {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LITEM */
  link: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
}

export const sizeofNMLVLINK = 24;

export function allocNMLVLINK(data?: Partial<NMLVLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVLINK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.link !== undefined) view.setBigUint64(8, data.link === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.link))), true);
  // 0x10: i32
  if (data?.iItem !== undefined) view.setInt32(16, Number(data.iItem), true);
  // 0x14: i32
  if (data?.iSubItem !== undefined) view.setInt32(20, Number(data.iSubItem), true);
  return buf;
}

export class NMLVLINKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get link(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get iItem(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iSubItem(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set link(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set iItem(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iSubItem(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVGETINFOTIPA (size: 48)
 */
export interface NMLVGETINFOTIPA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMLVGETINFOTIP_FLAGS */
  dwFlags: NMLVGETINFOTIP_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLVGETINFOTIPA = 48;

export function allocNMLVGETINFOTIPA(data?: Partial<NMLVGETINFOTIPA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVGETINFOTIPA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iItem !== undefined) view.setInt32(28, Number(data.iItem), true);
  // 0x20: i32
  if (data?.iSubItem !== undefined) view.setInt32(32, Number(data.iSubItem), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMLVGETINFOTIPAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iItem(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iSubItem(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iItem(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iSubItem(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVGETINFOTIPW (size: 48)
 */
export interface NMLVGETINFOTIPW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMLVGETINFOTIP_FLAGS */
  dwFlags: NMLVGETINFOTIP_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iItem: number;
  /** i32 */
  iSubItem: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMLVGETINFOTIPW = 48;

export function allocNMLVGETINFOTIPW(data?: Partial<NMLVGETINFOTIPW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVGETINFOTIPW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iItem !== undefined) view.setInt32(28, Number(data.iItem), true);
  // 0x20: i32
  if (data?.iSubItem !== undefined) view.setInt32(32, Number(data.iSubItem), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMLVGETINFOTIPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iItem(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iSubItem(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iItem(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iSubItem(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVSCROLL (size: 16)
 */
export interface NMLVSCROLL {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  dx: number;
  /** i32 */
  dy: number;
}

export const sizeofNMLVSCROLL = 16;

export function allocNMLVSCROLL(data?: Partial<NMLVSCROLL>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVSCROLL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.dx !== undefined) view.setInt32(8, Number(data.dx), true);
  // 0x0c: i32
  if (data?.dy !== undefined) view.setInt32(12, Number(data.dy), true);
  return buf;
}

export class NMLVSCROLLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dx(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dy(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set dx(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dy(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMLVEMPTYMARKUP (size: 24)
 */
export interface NMLVEMPTYMARKUP {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMLVEMPTYMARKUP_FLAGS */
  dwFlags: NMLVEMPTYMARKUP_FLAGS;
  /** array */
  szMarkup: Deno.PointerValue;
}

export const sizeofNMLVEMPTYMARKUP = 24;

export function allocNMLVEMPTYMARKUP(data?: Partial<NMLVEMPTYMARKUP>): Uint8Array {
  const buf = new Uint8Array(sizeofNMLVEMPTYMARKUP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szMarkup !== undefined) view.setBigUint64(16, data.szMarkup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szMarkup))), true);
  return buf;
}

export class NMLVEMPTYMARKUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szMarkup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szMarkup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVSTATEIMAGECHANGING (size: 24)
 */
export interface NMTVSTATEIMAGECHANGING {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hti: Uint8Array | Deno.PointerValue;
  /** i32 */
  iOldStateImageIndex: number;
  /** i32 */
  iNewStateImageIndex: number;
}

export const sizeofNMTVSTATEIMAGECHANGING = 24;

export function allocNMTVSTATEIMAGECHANGING(data?: Partial<NMTVSTATEIMAGECHANGING>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVSTATEIMAGECHANGING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.hti !== undefined) view.setBigUint64(8, data.hti === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hti))), true);
  // 0x10: i32
  if (data?.iOldStateImageIndex !== undefined) view.setInt32(16, Number(data.iOldStateImageIndex), true);
  // 0x14: i32
  if (data?.iNewStateImageIndex !== undefined) view.setInt32(20, Number(data.iNewStateImageIndex), true);
  return buf;
}

export class NMTVSTATEIMAGECHANGINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hti(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get iOldStateImageIndex(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iNewStateImageIndex(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hti(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set iOldStateImageIndex(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iNewStateImageIndex(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVITEMA (size: 56)
 */
export interface TVITEMA {
  /** Windows.Win32.UI.Controls.TVITEM_MASK */
  mask: TVITEM_MASK;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TREE_VIEW_ITEM_STATE_FLAGS */
  state: TREE_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.TREE_VIEW_ITEM_STATE_FLAGS */
  stateMask: TREE_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iSelectedImage: number;
  /** Windows.Win32.UI.Controls.TVITEMEXW_CHILDREN */
  cChildren: TVITEMEXW_CHILDREN;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofTVITEMA = 56;

export function allocTVITEMA(data?: Partial<TVITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofTVITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hItem !== undefined) view.setBigUint64(8, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x10: u32
  if (data?.state !== undefined) view.setUint32(16, Number(data.state), true);
  // 0x14: u32
  if (data?.stateMask !== undefined) view.setUint32(20, Number(data.stateMask), true);
  // 0x18: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchTextMax !== undefined) view.setInt32(32, Number(data.cchTextMax), true);
  // 0x24: i32
  if (data?.iImage !== undefined) view.setInt32(36, Number(data.iImage), true);
  // 0x28: i32
  if (data?.iSelectedImage !== undefined) view.setInt32(40, Number(data.iSelectedImage), true);
  // 0x2c: i32
  if (data?.cChildren !== undefined) view.setInt32(44, Number(data.cChildren), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class TVITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get state(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get stateMask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchTextMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iImage(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get iSelectedImage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cChildren(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set state(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set stateMask(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchTextMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iImage(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set iSelectedImage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cChildren(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVITEMW (size: 56)
 */
export interface TVITEMW {
  /** Windows.Win32.UI.Controls.TVITEM_MASK */
  mask: TVITEM_MASK;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TREE_VIEW_ITEM_STATE_FLAGS */
  state: TREE_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.UI.Controls.TREE_VIEW_ITEM_STATE_FLAGS */
  stateMask: TREE_VIEW_ITEM_STATE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iSelectedImage: number;
  /** Windows.Win32.UI.Controls.TVITEMEXW_CHILDREN */
  cChildren: TVITEMEXW_CHILDREN;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofTVITEMW = 56;

export function allocTVITEMW(data?: Partial<TVITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofTVITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hItem !== undefined) view.setBigUint64(8, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x10: u32
  if (data?.state !== undefined) view.setUint32(16, Number(data.state), true);
  // 0x14: u32
  if (data?.stateMask !== undefined) view.setUint32(20, Number(data.stateMask), true);
  // 0x18: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchTextMax !== undefined) view.setInt32(32, Number(data.cchTextMax), true);
  // 0x24: i32
  if (data?.iImage !== undefined) view.setInt32(36, Number(data.iImage), true);
  // 0x28: i32
  if (data?.iSelectedImage !== undefined) view.setInt32(40, Number(data.iSelectedImage), true);
  // 0x2c: i32
  if (data?.cChildren !== undefined) view.setInt32(44, Number(data.cChildren), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class TVITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get state(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get stateMask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchTextMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iImage(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get iSelectedImage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cChildren(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set state(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set stateMask(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchTextMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iImage(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set iSelectedImage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cChildren(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVITEMEXA (size: 80)
 */
export interface TVITEMEXA {
  /** Windows.Win32.UI.Controls.TVITEM_MASK */
  mask: TVITEM_MASK;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** u32 */
  state: number;
  /** u32 */
  stateMask: number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iSelectedImage: number;
  /** Windows.Win32.UI.Controls.TVITEMEXW_CHILDREN */
  cChildren: TVITEMEXW_CHILDREN;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iIntegral: number;
  /** u32 */
  uStateEx: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue;
  /** i32 */
  iExpandedImage: number;
  /** i32 */
  iReserved: number;
}

export const sizeofTVITEMEXA = 80;

export function allocTVITEMEXA(data?: Partial<TVITEMEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofTVITEMEXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hItem !== undefined) view.setBigUint64(8, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x10: u32
  if (data?.state !== undefined) view.setUint32(16, Number(data.state), true);
  // 0x14: u32
  if (data?.stateMask !== undefined) view.setUint32(20, Number(data.stateMask), true);
  // 0x18: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchTextMax !== undefined) view.setInt32(32, Number(data.cchTextMax), true);
  // 0x24: i32
  if (data?.iImage !== undefined) view.setInt32(36, Number(data.iImage), true);
  // 0x28: i32
  if (data?.iSelectedImage !== undefined) view.setInt32(40, Number(data.iSelectedImage), true);
  // 0x2c: i32
  if (data?.cChildren !== undefined) view.setInt32(44, Number(data.cChildren), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: i32
  if (data?.iIntegral !== undefined) view.setInt32(56, Number(data.iIntegral), true);
  // 0x3c: u32
  if (data?.uStateEx !== undefined) view.setUint32(60, Number(data.uStateEx), true);
  // 0x40: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(64, data.hwnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwnd))), true);
  // 0x48: i32
  if (data?.iExpandedImage !== undefined) view.setInt32(72, Number(data.iExpandedImage), true);
  // 0x4c: i32
  if (data?.iReserved !== undefined) view.setInt32(76, Number(data.iReserved), true);
  return buf;
}

export class TVITEMEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get state(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get stateMask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchTextMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iImage(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get iSelectedImage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cChildren(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get iIntegral(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get uStateEx(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get hwnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get iExpandedImage(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get iReserved(): number {
    return this.view.getInt32(76, true);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set state(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set stateMask(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchTextMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iImage(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set iSelectedImage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cChildren(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set iIntegral(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set uStateEx(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set iExpandedImage(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set iReserved(value: number) {
    this.view.setInt32(76, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVITEMEXW (size: 80)
 */
export interface TVITEMEXW {
  /** Windows.Win32.UI.Controls.TVITEM_MASK */
  mask: TVITEM_MASK;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** u32 */
  state: number;
  /** u32 */
  stateMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iSelectedImage: number;
  /** Windows.Win32.UI.Controls.TVITEMEXW_CHILDREN */
  cChildren: TVITEMEXW_CHILDREN;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** i32 */
  iIntegral: number;
  /** u32 */
  uStateEx: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue;
  /** i32 */
  iExpandedImage: number;
  /** i32 */
  iReserved: number;
}

export const sizeofTVITEMEXW = 80;

export function allocTVITEMEXW(data?: Partial<TVITEMEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofTVITEMEXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hItem !== undefined) view.setBigUint64(8, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x10: u32
  if (data?.state !== undefined) view.setUint32(16, Number(data.state), true);
  // 0x14: u32
  if (data?.stateMask !== undefined) view.setUint32(20, Number(data.stateMask), true);
  // 0x18: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: i32
  if (data?.cchTextMax !== undefined) view.setInt32(32, Number(data.cchTextMax), true);
  // 0x24: i32
  if (data?.iImage !== undefined) view.setInt32(36, Number(data.iImage), true);
  // 0x28: i32
  if (data?.iSelectedImage !== undefined) view.setInt32(40, Number(data.iSelectedImage), true);
  // 0x2c: i32
  if (data?.cChildren !== undefined) view.setInt32(44, Number(data.cChildren), true);
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x38: i32
  if (data?.iIntegral !== undefined) view.setInt32(56, Number(data.iIntegral), true);
  // 0x3c: u32
  if (data?.uStateEx !== undefined) view.setUint32(60, Number(data.uStateEx), true);
  // 0x40: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(64, data.hwnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwnd))), true);
  // 0x48: i32
  if (data?.iExpandedImage !== undefined) view.setInt32(72, Number(data.iExpandedImage), true);
  // 0x4c: i32
  if (data?.iReserved !== undefined) view.setInt32(76, Number(data.iReserved), true);
  return buf;
}

export class TVITEMEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get state(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get stateMask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get cchTextMax(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iImage(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get iSelectedImage(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get cChildren(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get iIntegral(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get uStateEx(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get hwnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get iExpandedImage(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: i32
  get iReserved(): number {
    return this.view.getInt32(76, true);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set state(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set stateMask(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: i32
  set cchTextMax(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iImage(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set iSelectedImage(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set cChildren(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set iIntegral(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set uStateEx(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set iExpandedImage(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: i32
  set iReserved(value: number) {
    this.view.setInt32(76, value, true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVINSERTSTRUCTA (size: 24)
 */
export interface TVINSERTSTRUCTA {
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hParent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hInsertAfter: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofTVINSERTSTRUCTA = 24;

export function allocTVINSERTSTRUCTA(data?: Partial<TVINSERTSTRUCTA>): Uint8Array {
  const buf = new Uint8Array(sizeofTVINSERTSTRUCTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hParent !== undefined) view.setBigUint64(0, data.hParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hParent))), true);
  // 0x08: pointer
  if (data?.hInsertAfter !== undefined) view.setBigUint64(8, data.hInsertAfter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInsertAfter))), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class TVINSERTSTRUCTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hInsertAfter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hInsertAfter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVINSERTSTRUCTW (size: 24)
 */
export interface TVINSERTSTRUCTW {
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hParent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hInsertAfter: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofTVINSERTSTRUCTW = 24;

export function allocTVINSERTSTRUCTW(data?: Partial<TVINSERTSTRUCTW>): Uint8Array {
  const buf = new Uint8Array(sizeofTVINSERTSTRUCTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hParent !== undefined) view.setBigUint64(0, data.hParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hParent))), true);
  // 0x08: pointer
  if (data?.hInsertAfter !== undefined) view.setBigUint64(8, data.hInsertAfter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInsertAfter))), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class TVINSERTSTRUCTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hInsertAfter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hInsertAfter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVHITTESTINFO (size: 24)
 */
export interface TVHITTESTINFO {
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVHITTESTINFO_FLAGS */
  flags: TVHITTESTINFO_FLAGS;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
}

export const sizeofTVHITTESTINFO = 24;

export function allocTVHITTESTINFO(data?: Partial<TVHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTVHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pt !== undefined) view.setBigUint64(0, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hItem !== undefined) view.setBigUint64(16, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  return buf;
}

export class TVHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TVGETITEMPARTRECTINFO (size: 24)
 */
export interface TVGETITEMPARTRECTINFO {
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hti: Uint8Array | Deno.PointerValue;
  /** ptr */
  prc: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.TVITEMPART */
  partID: TVITEMPART;
}

export const sizeofTVGETITEMPARTRECTINFO = 24;

export function allocTVGETITEMPARTRECTINFO(data?: Partial<TVGETITEMPARTRECTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTVGETITEMPARTRECTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hti !== undefined) view.setBigUint64(0, data.hti === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hti))), true);
  // 0x08: pointer
  if (data?.prc !== undefined) view.setBigUint64(8, data.prc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prc))), true);
  // 0x10: i32
  if (data?.partID !== undefined) view.setInt32(16, Number(data.partID), true);
  // 0x14: pad4
  return buf;
}

export class TVGETITEMPARTRECTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hti(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get prc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get partID(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hti(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set prc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set partID(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.TVSORTCB (size: 24)
 */
export interface TVSORTCB {
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hParent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.PFNTVCOMPARE */
  lpfnCompare: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofTVSORTCB = 24;

export function allocTVSORTCB(data?: Partial<TVSORTCB>): Uint8Array {
  const buf = new Uint8Array(sizeofTVSORTCB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hParent !== undefined) view.setBigUint64(0, data.hParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hParent))), true);
  // 0x08: pointer
  if (data?.lpfnCompare !== undefined) view.setBigUint64(8, data.lpfnCompare === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnCompare))), true);
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class TVSORTCBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpfnCompare(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpfnCompare(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTREEVIEWA (size: 40)
 */
export interface NMTREEVIEWA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NM_TREEVIEW_ACTION */
  action: NM_TREEVIEW_ACTION;
  /** Windows.Win32.UI.Controls.TVITEMA */
  itemOld: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVITEMA */
  itemNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  ptDrag: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTREEVIEWA = 40;

export function allocNMTREEVIEWA(data?: Partial<NMTREEVIEWA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTREEVIEWA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.action !== undefined) view.setUint32(8, Number(data.action), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.itemOld !== undefined) view.setBigUint64(16, data.itemOld === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.itemOld))), true);
  // 0x18: pointer
  if (data?.itemNew !== undefined) view.setBigUint64(24, data.itemNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.itemNew))), true);
  // 0x20: pointer
  if (data?.ptDrag !== undefined) view.setBigUint64(32, data.ptDrag === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptDrag))), true);
  return buf;
}

export class NMTREEVIEWAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get action(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get itemOld(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get itemNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ptDrag(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set action(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set itemOld(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set itemNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ptDrag(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTREEVIEWW (size: 40)
 */
export interface NMTREEVIEWW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NM_TREEVIEW_ACTION */
  action: NM_TREEVIEW_ACTION;
  /** Windows.Win32.UI.Controls.TVITEMW */
  itemOld: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVITEMW */
  itemNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINT */
  ptDrag: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTREEVIEWW = 40;

export function allocNMTREEVIEWW(data?: Partial<NMTREEVIEWW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTREEVIEWW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.action !== undefined) view.setUint32(8, Number(data.action), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.itemOld !== undefined) view.setBigUint64(16, data.itemOld === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.itemOld))), true);
  // 0x18: pointer
  if (data?.itemNew !== undefined) view.setBigUint64(24, data.itemNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.itemNew))), true);
  // 0x20: pointer
  if (data?.ptDrag !== undefined) view.setBigUint64(32, data.ptDrag === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptDrag))), true);
  return buf;
}

export class NMTREEVIEWWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get action(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get itemOld(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get itemNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ptDrag(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set action(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set itemOld(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set itemNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ptDrag(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVDISPINFOA (size: 16)
 */
export interface NMTVDISPINFOA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVITEMA */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVDISPINFOA = 16;

export function allocNMTVDISPINFOA(data?: Partial<NMTVDISPINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVDISPINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMTVDISPINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVDISPINFOW (size: 16)
 */
export interface NMTVDISPINFOW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVITEMW */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVDISPINFOW = 16;

export function allocNMTVDISPINFOW(data?: Partial<NMTVDISPINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVDISPINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMTVDISPINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVDISPINFOEXA (size: 16)
 */
export interface NMTVDISPINFOEXA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVITEMEXA */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVDISPINFOEXA = 16;

export function allocNMTVDISPINFOEXA(data?: Partial<NMTVDISPINFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVDISPINFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMTVDISPINFOEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVDISPINFOEXW (size: 16)
 */
export interface NMTVDISPINFOEXW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TVITEMEXW */
  item: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVDISPINFOEXW = 16;

export function allocNMTVDISPINFOEXW(data?: Partial<NMTVDISPINFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVDISPINFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.item !== undefined) view.setBigUint64(8, data.item === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.item))), true);
  return buf;
}

export class NMTVDISPINFOEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get item(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set item(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVKEYDOWN (size: 16)
 */
export interface NMTVKEYDOWN {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u16 */
  wVKey: number;
  /** u32 */
  flags: number;
}

export const sizeofNMTVKEYDOWN = 16;

export function allocNMTVKEYDOWN(data?: Partial<NMTVKEYDOWN>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVKEYDOWN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u16
  if (data?.wVKey !== undefined) view.setUint16(8, Number(data.wVKey), true);
  // 0x0a: u32
  if (data?.flags !== undefined) view.setUint32(10, Number(data.flags), true);
  // 0x0e: pad2
  return buf;
}

export class NMTVKEYDOWNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wVKey(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get flags(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: pad2

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wVKey(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set flags(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.UI.Controls.NMTVCUSTOMDRAW (size: 32)
 */
export interface NMTVCUSTOMDRAW {
  /** Windows.Win32.UI.Controls.NMCUSTOMDRAW */
  nmcd: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrText: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  clrTextBk: Uint8Array | Deno.PointerValue;
  /** i32 */
  iLevel: number;
}

export const sizeofNMTVCUSTOMDRAW = 32;

export function allocNMTVCUSTOMDRAW(data?: Partial<NMTVCUSTOMDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVCUSTOMDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmcd !== undefined) view.setBigUint64(0, data.nmcd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmcd))), true);
  // 0x08: pointer
  if (data?.clrText !== undefined) view.setBigUint64(8, data.clrText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrText))), true);
  // 0x10: pointer
  if (data?.clrTextBk !== undefined) view.setBigUint64(16, data.clrTextBk === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clrTextBk))), true);
  // 0x18: i32
  if (data?.iLevel !== undefined) view.setInt32(24, Number(data.iLevel), true);
  // 0x1c: pad4
  return buf;
}

export class NMTVCUSTOMDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmcd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get clrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get clrTextBk(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get iLevel(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set nmcd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set clrText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set clrTextBk(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set iLevel(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMTVGETINFOTIPA (size: 40)
 */
export interface NMTVGETINFOTIPA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVGETINFOTIPA = 40;

export function allocNMTVGETINFOTIPA(data?: Partial<NMTVGETINFOTIPA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVGETINFOTIPA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchTextMax !== undefined) view.setInt32(16, Number(data.cchTextMax), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hItem !== undefined) view.setBigUint64(24, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTVGETINFOTIPAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchTextMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchTextMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVGETINFOTIPW (size: 40)
 */
export interface NMTVGETINFOTIPW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVGETINFOTIPW = 40;

export function allocNMTVGETINFOTIPW(data?: Partial<NMTVGETINFOTIPW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVGETINFOTIPW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.cchTextMax !== undefined) view.setInt32(16, Number(data.cchTextMax), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hItem !== undefined) view.setBigUint64(24, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTVGETINFOTIPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cchTextMax(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set cchTextMax(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVITEMCHANGE (size: 40)
 */
export interface NMTVITEMCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  uChanged: number;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** u32 */
  uStateNew: number;
  /** u32 */
  uStateOld: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofNMTVITEMCHANGE = 40;

export function allocNMTVITEMCHANGE(data?: Partial<NMTVITEMCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVITEMCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.uChanged !== undefined) view.setUint32(8, Number(data.uChanged), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hItem !== undefined) view.setBigUint64(16, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x18: u32
  if (data?.uStateNew !== undefined) view.setUint32(24, Number(data.uStateNew), true);
  // 0x1c: u32
  if (data?.uStateOld !== undefined) view.setUint32(28, Number(data.uStateOld), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class NMTVITEMCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get uChanged(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get uStateNew(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get uStateOld(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set uChanged(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set uStateNew(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set uStateOld(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMTVASYNCDRAW (size: 48)
 */
export interface NMTVASYNCDRAW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  pimldp: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.HTREEITEM */
  hItem: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwRetFlags: number;
  /** i32 */
  iRetImageIndex: number;
}

export const sizeofNMTVASYNCDRAW = 48;

export function allocNMTVASYNCDRAW(data?: Partial<NMTVASYNCDRAW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTVASYNCDRAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.pimldp !== undefined) view.setBigUint64(8, data.pimldp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pimldp))), true);
  // 0x10: pointer
  if (data?.hr !== undefined) view.setBigUint64(16, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  // 0x18: pointer
  if (data?.hItem !== undefined) view.setBigUint64(24, data.hItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hItem))), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x28: u32
  if (data?.dwRetFlags !== undefined) view.setUint32(40, Number(data.dwRetFlags), true);
  // 0x2c: i32
  if (data?.iRetImageIndex !== undefined) view.setInt32(44, Number(data.iRetImageIndex), true);
  return buf;
}

export class NMTVASYNCDRAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pimldp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwRetFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get iRetImageIndex(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pimldp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwRetFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set iRetImageIndex(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.COMBOBOXEXITEMA (size: 56)
 */
export interface COMBOBOXEXITEMA {
  /** Windows.Win32.UI.Controls.COMBOBOX_EX_ITEM_FLAGS */
  mask: COMBOBOX_EX_ITEM_FLAGS;
  /** isize */
  iItem: bigint | number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iSelectedImage: number;
  /** i32 */
  iOverlay: number;
  /** i32 */
  iIndent: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofCOMBOBOXEXITEMA = 56;

export function allocCOMBOBOXEXITEMA(data?: Partial<COMBOBOXEXITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMBOBOXEXITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.iItem !== undefined) view.setBigInt64(8, BigInt(data.iItem), true);
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  // 0x20: i32
  if (data?.iSelectedImage !== undefined) view.setInt32(32, Number(data.iSelectedImage), true);
  // 0x24: i32
  if (data?.iOverlay !== undefined) view.setInt32(36, Number(data.iOverlay), true);
  // 0x28: i32
  if (data?.iIndent !== undefined) view.setInt32(40, Number(data.iIndent), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class COMBOBOXEXITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get iItem(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iSelectedImage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iOverlay(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get iIndent(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set iItem(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iSelectedImage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iOverlay(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set iIndent(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.COMBOBOXEXITEMW (size: 56)
 */
export interface COMBOBOXEXITEMW {
  /** Windows.Win32.UI.Controls.COMBOBOX_EX_ITEM_FLAGS */
  mask: COMBOBOX_EX_ITEM_FLAGS;
  /** isize */
  iItem: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** i32 */
  iSelectedImage: number;
  /** i32 */
  iOverlay: number;
  /** i32 */
  iIndent: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofCOMBOBOXEXITEMW = 56;

export function allocCOMBOBOXEXITEMW(data?: Partial<COMBOBOXEXITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMBOBOXEXITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.iItem !== undefined) view.setBigInt64(8, BigInt(data.iItem), true);
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  // 0x20: i32
  if (data?.iSelectedImage !== undefined) view.setInt32(32, Number(data.iSelectedImage), true);
  // 0x24: i32
  if (data?.iOverlay !== undefined) view.setInt32(36, Number(data.iOverlay), true);
  // 0x28: i32
  if (data?.iIndent !== undefined) view.setInt32(40, Number(data.iIndent), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lParam !== undefined) view.setBigUint64(48, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class COMBOBOXEXITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get iItem(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iSelectedImage(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iOverlay(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get iIndent(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set iItem(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iSelectedImage(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iOverlay(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set iIndent(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCOMBOBOXEXA (size: 16)
 */
export interface NMCOMBOBOXEXA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.COMBOBOXEXITEMA */
  ceItem: Uint8Array | Deno.PointerValue;
}

export const sizeofNMCOMBOBOXEXA = 16;

export function allocNMCOMBOBOXEXA(data?: Partial<NMCOMBOBOXEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCOMBOBOXEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.ceItem !== undefined) view.setBigUint64(8, data.ceItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ceItem))), true);
  return buf;
}

export class NMCOMBOBOXEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ceItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ceItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCOMBOBOXEXW (size: 16)
 */
export interface NMCOMBOBOXEXW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.COMBOBOXEXITEMW */
  ceItem: Uint8Array | Deno.PointerValue;
}

export const sizeofNMCOMBOBOXEXW = 16;

export function allocNMCOMBOBOXEXW(data?: Partial<NMCOMBOBOXEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCOMBOBOXEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.ceItem !== undefined) view.setBigUint64(8, data.ceItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ceItem))), true);
  return buf;
}

export class NMCOMBOBOXEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ceItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ceItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCBEDRAGBEGINW (size: 24)
 */
export interface NMCBEDRAGBEGINW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItemid: number;
  /** array */
  szText: Deno.PointerValue;
}

export const sizeofNMCBEDRAGBEGINW = 24;

export function allocNMCBEDRAGBEGINW(data?: Partial<NMCBEDRAGBEGINW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCBEDRAGBEGINW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItemid !== undefined) view.setInt32(8, Number(data.iItemid), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szText !== undefined) view.setBigUint64(16, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  return buf;
}

export class NMCBEDRAGBEGINWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItemid(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItemid(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCBEDRAGBEGINA (size: 24)
 */
export interface NMCBEDRAGBEGINA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iItemid: number;
  /** array */
  szText: Deno.PointerValue;
}

export const sizeofNMCBEDRAGBEGINA = 24;

export function allocNMCBEDRAGBEGINA(data?: Partial<NMCBEDRAGBEGINA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCBEDRAGBEGINA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iItemid !== undefined) view.setInt32(8, Number(data.iItemid), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szText !== undefined) view.setBigUint64(16, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  return buf;
}

export class NMCBEDRAGBEGINAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iItemid(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iItemid(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMCBEENDEDITW (size: 32)
 */
export interface NMCBEENDEDITW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fChanged: boolean;
  /** i32 */
  iNewSelection: number;
  /** array */
  szText: Deno.PointerValue;
  /** i32 */
  iWhy: number;
}

export const sizeofNMCBEENDEDITW = 32;

export function allocNMCBEENDEDITW(data?: Partial<NMCBEENDEDITW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCBEENDEDITW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.fChanged !== undefined) view.setInt32(8, Number(data.fChanged), true);
  // 0x0c: i32
  if (data?.iNewSelection !== undefined) view.setInt32(12, Number(data.iNewSelection), true);
  // 0x10: pointer
  if (data?.szText !== undefined) view.setBigUint64(16, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  // 0x18: i32
  if (data?.iWhy !== undefined) view.setInt32(24, Number(data.iWhy), true);
  // 0x1c: pad4
  return buf;
}

export class NMCBEENDEDITWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get fChanged(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iNewSelection(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get iWhy(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set fChanged(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iNewSelection(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set iWhy(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMCBEENDEDITA (size: 32)
 */
export interface NMCBEENDEDITA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fChanged: boolean;
  /** i32 */
  iNewSelection: number;
  /** array */
  szText: Deno.PointerValue;
  /** i32 */
  iWhy: number;
}

export const sizeofNMCBEENDEDITA = 32;

export function allocNMCBEENDEDITA(data?: Partial<NMCBEENDEDITA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMCBEENDEDITA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.fChanged !== undefined) view.setInt32(8, Number(data.fChanged), true);
  // 0x0c: i32
  if (data?.iNewSelection !== undefined) view.setInt32(12, Number(data.iNewSelection), true);
  // 0x10: pointer
  if (data?.szText !== undefined) view.setBigUint64(16, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  // 0x18: i32
  if (data?.iWhy !== undefined) view.setInt32(24, Number(data.iWhy), true);
  // 0x1c: pad4
  return buf;
}

export class NMCBEENDEDITAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get fChanged(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iNewSelection(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get iWhy(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set fChanged(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iNewSelection(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set iWhy(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.TCITEMHEADERA (size: 32)
 */
export interface TCITEMHEADERA {
  /** Windows.Win32.UI.Controls.TCITEMHEADERA_MASK */
  mask: TCITEMHEADERA_MASK;
  /** u32 */
  lpReserved1: number;
  /** u32 */
  lpReserved2: number;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
}

export const sizeofTCITEMHEADERA = 32;

export function allocTCITEMHEADERA(data?: Partial<TCITEMHEADERA>): Uint8Array {
  const buf = new Uint8Array(sizeofTCITEMHEADERA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: u32
  if (data?.lpReserved1 !== undefined) view.setUint32(4, Number(data.lpReserved1), true);
  // 0x08: u32
  if (data?.lpReserved2 !== undefined) view.setUint32(8, Number(data.lpReserved2), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  return buf;
}

export class TCITEMHEADERAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get lpReserved1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get lpReserved2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set lpReserved1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set lpReserved2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TCITEMHEADERW (size: 32)
 */
export interface TCITEMHEADERW {
  /** Windows.Win32.UI.Controls.TCITEMHEADERA_MASK */
  mask: TCITEMHEADERA_MASK;
  /** u32 */
  lpReserved1: number;
  /** u32 */
  lpReserved2: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
}

export const sizeofTCITEMHEADERW = 32;

export function allocTCITEMHEADERW(data?: Partial<TCITEMHEADERW>): Uint8Array {
  const buf = new Uint8Array(sizeofTCITEMHEADERW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: u32
  if (data?.lpReserved1 !== undefined) view.setUint32(4, Number(data.lpReserved1), true);
  // 0x08: u32
  if (data?.lpReserved2 !== undefined) view.setUint32(8, Number(data.lpReserved2), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  return buf;
}

export class TCITEMHEADERWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get lpReserved1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get lpReserved2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set lpReserved1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set lpReserved2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TCITEMA (size: 40)
 */
export interface TCITEMA {
  /** Windows.Win32.UI.Controls.TCITEMHEADERA_MASK */
  mask: TCITEMHEADERA_MASK;
  /** Windows.Win32.UI.Controls.TAB_CONTROL_ITEM_STATE */
  dwState: TAB_CONTROL_ITEM_STATE;
  /** Windows.Win32.UI.Controls.TAB_CONTROL_ITEM_STATE */
  dwStateMask: TAB_CONTROL_ITEM_STATE;
  /** Windows.Win32.Foundation.PSTR */
  pszText: string | null | Uint8Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofTCITEMA = 40;

export function allocTCITEMA(data?: Partial<TCITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofTCITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: u32
  if (data?.dwState !== undefined) view.setUint32(4, Number(data.dwState), true);
  // 0x08: u32
  if (data?.dwStateMask !== undefined) view.setUint32(8, Number(data.dwStateMask), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class TCITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwState(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStateMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwState(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStateMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TCITEMW (size: 40)
 */
export interface TCITEMW {
  /** Windows.Win32.UI.Controls.TCITEMHEADERA_MASK */
  mask: TCITEMHEADERA_MASK;
  /** Windows.Win32.UI.Controls.TAB_CONTROL_ITEM_STATE */
  dwState: TAB_CONTROL_ITEM_STATE;
  /** Windows.Win32.UI.Controls.TAB_CONTROL_ITEM_STATE */
  dwStateMask: TAB_CONTROL_ITEM_STATE;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** i32 */
  cchTextMax: number;
  /** i32 */
  iImage: number;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofTCITEMW = 40;

export function allocTCITEMW(data?: Partial<TCITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofTCITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: u32
  if (data?.dwState !== undefined) view.setUint32(4, Number(data.dwState), true);
  // 0x08: u32
  if (data?.dwStateMask !== undefined) view.setUint32(8, Number(data.dwStateMask), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: i32
  if (data?.cchTextMax !== undefined) view.setInt32(24, Number(data.cchTextMax), true);
  // 0x1c: i32
  if (data?.iImage !== undefined) view.setInt32(28, Number(data.iImage), true);
  // 0x20: pointer
  if (data?.lParam !== undefined) view.setBigUint64(32, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class TCITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwState(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStateMask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get cchTextMax(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get iImage(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwState(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStateMask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: i32
  set cchTextMax(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set iImage(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TCHITTESTINFO (size: 16)
 */
export interface TCHITTESTINFO {
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TCHITTESTINFO_FLAGS */
  flags: TCHITTESTINFO_FLAGS;
}

export const sizeofTCHITTESTINFO = 16;

export function allocTCHITTESTINFO(data?: Partial<TCHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTCHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pt !== undefined) view.setBigUint64(0, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x08: u32
  if (data?.flags !== undefined) view.setUint32(8, Number(data.flags), true);
  // 0x0c: pad4
  return buf;
}

export class TCHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMTCKEYDOWN (size: 16)
 */
export interface NMTCKEYDOWN {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** u16 */
  wVKey: number;
  /** u32 */
  flags: number;
}

export const sizeofNMTCKEYDOWN = 16;

export function allocNMTCKEYDOWN(data?: Partial<NMTCKEYDOWN>): Uint8Array {
  const buf = new Uint8Array(sizeofNMTCKEYDOWN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u16
  if (data?.wVKey !== undefined) view.setUint16(8, Number(data.wVKey), true);
  // 0x0a: u32
  if (data?.flags !== undefined) view.setUint32(10, Number(data.flags), true);
  // 0x0e: pad2
  return buf;
}

export class NMTCKEYDOWNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wVKey(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get flags(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: pad2

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wVKey(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set flags(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.MCHITTESTINFO (size: 56)
 */
export interface MCHITTESTINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.MCHITTESTINFO_HIT_FLAGS */
  uHit: MCHITTESTINFO_HIT_FLAGS;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
  /** i32 */
  iOffset: number;
  /** i32 */
  iRow: number;
  /** i32 */
  iCol: number;
}

export const sizeofMCHITTESTINFO = 56;

export function allocMCHITTESTINFO(data?: Partial<MCHITTESTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMCHITTESTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x10: u32
  if (data?.uHit !== undefined) view.setUint32(16, Number(data.uHit), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.st !== undefined) view.setBigUint64(24, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  // 0x20: pointer
  if (data?.rc !== undefined) view.setBigUint64(32, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  // 0x28: i32
  if (data?.iOffset !== undefined) view.setInt32(40, Number(data.iOffset), true);
  // 0x2c: i32
  if (data?.iRow !== undefined) view.setInt32(44, Number(data.iRow), true);
  // 0x30: i32
  if (data?.iCol !== undefined) view.setInt32(48, Number(data.iCol), true);
  // 0x34: pad4
  return buf;
}

export class MCHITTESTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uHit(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get iOffset(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get iRow(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: i32
  get iCol(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uHit(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set iOffset(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set iRow(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: i32
  set iCol(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.UI.Controls.MCGRIDINFO (size: 72)
 */
export interface MCGRIDINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.MCGRIDINFO_PART */
  dwPart: MCGRIDINFO_PART;
  /** Windows.Win32.UI.Controls.MCGRIDINFO_FLAGS */
  dwFlags: MCGRIDINFO_FLAGS;
  /** i32 */
  iCalendar: number;
  /** i32 */
  iRow: number;
  /** i32 */
  iCol: number;
  /** Windows.Win32.Foundation.BOOL */
  bSelected: boolean;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stEnd: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** usize */
  cchName: bigint | number;
}

export const sizeofMCGRIDINFO = 72;

export function allocMCGRIDINFO(data?: Partial<MCGRIDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMCGRIDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwPart !== undefined) view.setUint32(4, Number(data.dwPart), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: i32
  if (data?.iCalendar !== undefined) view.setInt32(12, Number(data.iCalendar), true);
  // 0x10: i32
  if (data?.iRow !== undefined) view.setInt32(16, Number(data.iRow), true);
  // 0x14: i32
  if (data?.iCol !== undefined) view.setInt32(20, Number(data.iCol), true);
  // 0x18: i32
  if (data?.bSelected !== undefined) view.setInt32(24, Number(data.bSelected), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.stStart !== undefined) view.setBigUint64(32, data.stStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stStart))), true);
  // 0x28: pointer
  if (data?.stEnd !== undefined) view.setBigUint64(40, data.stEnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stEnd))), true);
  // 0x30: pointer
  if (data?.rc !== undefined) view.setBigUint64(48, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  // 0x38: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: usize
  if (data?.cchName !== undefined) view.setBigUint64(64, BigInt(data.cchName), true);
  return buf;
}

export class MCGRIDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPart(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iCalendar(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get iRow(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iCol(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get bSelected(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get stStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get stEnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: usize
  get cchName(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPart(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iCalendar(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set iRow(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iCol(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set bSelected(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set stStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set stEnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: buffer
  set pszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: usize
  set cchName(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMSELCHANGE (size: 24)
 */
export interface NMSELCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stSelStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stSelEnd: Uint8Array | Deno.PointerValue;
}

export const sizeofNMSELCHANGE = 24;

export function allocNMSELCHANGE(data?: Partial<NMSELCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMSELCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: pointer
  if (data?.stSelStart !== undefined) view.setBigUint64(8, data.stSelStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stSelStart))), true);
  // 0x10: pointer
  if (data?.stSelEnd !== undefined) view.setBigUint64(16, data.stSelEnd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stSelEnd))), true);
  return buf;
}

export class NMSELCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get stSelStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get stSelEnd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set stSelStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set stSelEnd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDAYSTATE (size: 32)
 */
export interface NMDAYSTATE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  stStart: Uint8Array | Deno.PointerValue;
  /** i32 */
  cDayState: number;
  /** ptr */
  prgDayState: Deno.PointerValue | Uint8Array;
}

export const sizeofNMDAYSTATE = 32;

export function allocNMDAYSTATE(data?: Partial<NMDAYSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDAYSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: pointer
  if (data?.stStart !== undefined) view.setBigUint64(8, data.stStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.stStart))), true);
  // 0x10: i32
  if (data?.cDayState !== undefined) view.setInt32(16, Number(data.cDayState), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.prgDayState !== undefined) view.setBigUint64(24, data.prgDayState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prgDayState))), true);
  return buf;
}

export class NMDAYSTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get stStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cDayState(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get prgDayState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set stStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set cDayState(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set prgDayState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMVIEWCHANGE (size: 16)
 */
export interface NMVIEWCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.MONTH_CALDENDAR_MESSAGES_VIEW */
  dwOldView: MONTH_CALDENDAR_MESSAGES_VIEW;
  /** Windows.Win32.UI.Controls.MONTH_CALDENDAR_MESSAGES_VIEW */
  dwNewView: MONTH_CALDENDAR_MESSAGES_VIEW;
}

export const sizeofNMVIEWCHANGE = 16;

export function allocNMVIEWCHANGE(data?: Partial<NMVIEWCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMVIEWCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u32
  if (data?.dwOldView !== undefined) view.setUint32(8, Number(data.dwOldView), true);
  // 0x0c: u32
  if (data?.dwNewView !== undefined) view.setUint32(12, Number(data.dwNewView), true);
  return buf;
}

export class NMVIEWCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwOldView(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNewView(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwOldView(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNewView(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.DATETIMEPICKERINFO (size: 64)
 */
export interface DATETIMEPICKERINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcCheck: Uint8Array | Deno.PointerValue;
  /** u32 */
  stateCheck: number;
  /** Windows.Win32.Foundation.RECT */
  rcButton: Uint8Array | Deno.PointerValue;
  /** u32 */
  stateButton: number;
  /** Windows.Win32.Foundation.HWND */
  hwndEdit: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndUD: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndDropDown: Deno.PointerValue;
}

export const sizeofDATETIMEPICKERINFO = 64;

export function allocDATETIMEPICKERINFO(data?: Partial<DATETIMEPICKERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDATETIMEPICKERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcCheck !== undefined) view.setBigUint64(8, data.rcCheck === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcCheck))), true);
  // 0x10: u32
  if (data?.stateCheck !== undefined) view.setUint32(16, Number(data.stateCheck), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rcButton !== undefined) view.setBigUint64(24, data.rcButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcButton))), true);
  // 0x20: u32
  if (data?.stateButton !== undefined) view.setUint32(32, Number(data.stateButton), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.hwndEdit !== undefined) view.setBigUint64(40, data.hwndEdit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndEdit))), true);
  // 0x30: pointer
  if (data?.hwndUD !== undefined) view.setBigUint64(48, data.hwndUD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndUD))), true);
  // 0x38: pointer
  if (data?.hwndDropDown !== undefined) view.setBigUint64(56, data.hwndDropDown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndDropDown))), true);
  return buf;
}

export class DATETIMEPICKERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rcCheck(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get stateCheck(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rcButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get stateButton(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get hwndEdit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get hwndUD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get hwndDropDown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rcCheck(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set stateCheck(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rcButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set stateButton(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set hwndEdit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set hwndUD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set hwndDropDown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMECHANGE (size: 24)
 */
export interface NMDATETIMECHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMDATETIMECHANGE_FLAGS */
  dwFlags: NMDATETIMECHANGE_FLAGS;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
}

export const sizeofNMDATETIMECHANGE = 24;

export function allocNMDATETIMECHANGE(data?: Partial<NMDATETIMECHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMECHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.st !== undefined) view.setBigUint64(16, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  return buf;
}

export class NMDATETIMECHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMESTRINGA (size: 32)
 */
export interface NMDATETIMESTRINGA {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszUserString: string | null | Uint8Array;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofNMDATETIMESTRINGA = 32;

export function allocNMDATETIMESTRINGA(data?: Partial<NMDATETIMESTRINGA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMESTRINGA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.pszUserString !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszUserString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.st !== undefined) view.setBigUint64(16, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class NMDATETIMESTRINGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszUserString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszUserString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMESTRINGW (size: 32)
 */
export interface NMDATETIMESTRINGW {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofNMDATETIMESTRINGW = 32;

export function allocNMDATETIMESTRINGW(data?: Partial<NMDATETIMESTRINGW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMESTRINGW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.pszUserString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszUserString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.st !== undefined) view.setBigUint64(16, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class NMDATETIMESTRINGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszUserString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszUserString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMEWMKEYDOWNA (size: 32)
 */
export interface NMDATETIMEWMKEYDOWNA {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  nVirtKey: number;
  /** Windows.Win32.Foundation.PSTR */
  pszFormat: string | null | Uint8Array;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
}

export const sizeofNMDATETIMEWMKEYDOWNA = 32;

export function allocNMDATETIMEWMKEYDOWNA(data?: Partial<NMDATETIMEWMKEYDOWNA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMEWMKEYDOWNA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: i32
  if (data?.nVirtKey !== undefined) view.setInt32(8, Number(data.nVirtKey), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszFormat !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszFormat);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.st !== undefined) view.setBigUint64(24, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  return buf;
}

export class NMDATETIMEWMKEYDOWNAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get nVirtKey(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set nVirtKey(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszFormat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMEWMKEYDOWNW (size: 32)
 */
export interface NMDATETIMEWMKEYDOWNW {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  nVirtKey: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszFormat: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
}

export const sizeofNMDATETIMEWMKEYDOWNW = 32;

export function allocNMDATETIMEWMKEYDOWNW(data?: Partial<NMDATETIMEWMKEYDOWNW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMEWMKEYDOWNW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: i32
  if (data?.nVirtKey !== undefined) view.setInt32(8, Number(data.nVirtKey), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszFormat !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszFormat);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.st !== undefined) view.setBigUint64(24, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  return buf;
}

export class NMDATETIMEWMKEYDOWNWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get nVirtKey(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set nVirtKey(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszFormat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMEFORMATA (size: 40)
 */
export interface NMDATETIMEFORMATA {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszFormat: string | null | Uint8Array;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszDisplay: string | null | Uint8Array;
  /** array */
  szDisplay: Deno.PointerValue;
}

export const sizeofNMDATETIMEFORMATA = 40;

export function allocNMDATETIMEFORMATA(data?: Partial<NMDATETIMEFORMATA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMEFORMATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.pszFormat !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszFormat);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.st !== undefined) view.setBigUint64(16, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  // 0x18: buffer
  if (data?.pszDisplay !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszDisplay);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.szDisplay !== undefined) view.setBigUint64(32, data.szDisplay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDisplay))), true);
  return buf;
}

export class NMDATETIMEFORMATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszFormat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pszDisplay(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set szDisplay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMEFORMATW (size: 40)
 */
export interface NMDATETIMEFORMATW {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszFormat: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  st: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplay: string | null | Uint8Array | Uint16Array;
  /** array */
  szDisplay: Deno.PointerValue;
}

export const sizeofNMDATETIMEFORMATW = 40;

export function allocNMDATETIMEFORMATW(data?: Partial<NMDATETIMEFORMATW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMEFORMATW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.pszFormat !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszFormat);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.st !== undefined) view.setBigUint64(16, data.st === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.st))), true);
  // 0x18: buffer
  if (data?.pszDisplay !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDisplay);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.szDisplay !== undefined) view.setBigUint64(32, data.szDisplay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDisplay))), true);
  return buf;
}

export class NMDATETIMEFORMATWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get st(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get szDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszFormat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set st(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pszDisplay(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set szDisplay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMEFORMATQUERYA (size: 24)
 */
export interface NMDATETIMEFORMATQUERYA {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszFormat: string | null | Uint8Array;
  /** Windows.Win32.Foundation.SIZE */
  szMax: Uint8Array | Deno.PointerValue;
}

export const sizeofNMDATETIMEFORMATQUERYA = 24;

export function allocNMDATETIMEFORMATQUERYA(data?: Partial<NMDATETIMEFORMATQUERYA>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMEFORMATQUERYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.pszFormat !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszFormat);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.szMax !== undefined) view.setBigUint64(16, data.szMax === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szMax))), true);
  return buf;
}

export class NMDATETIMEFORMATQUERYAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szMax(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszFormat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set szMax(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMDATETIMEFORMATQUERYW (size: 24)
 */
export interface NMDATETIMEFORMATQUERYW {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszFormat: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.SIZE */
  szMax: Uint8Array | Deno.PointerValue;
}

export const sizeofNMDATETIMEFORMATQUERYW = 24;

export function allocNMDATETIMEFORMATQUERYW(data?: Partial<NMDATETIMEFORMATQUERYW>): Uint8Array {
  const buf = new Uint8Array(sizeofNMDATETIMEFORMATQUERYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.pszFormat !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszFormat);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.szMax !== undefined) view.setBigUint64(16, data.szMax === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szMax))), true);
  return buf;
}

export class NMDATETIMEFORMATQUERYWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get szMax(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszFormat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set szMax(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMIPADDRESS (size: 16)
 */
export interface NMIPADDRESS {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iField: number;
  /** i32 */
  iValue: number;
}

export const sizeofNMIPADDRESS = 16;

export function allocNMIPADDRESS(data?: Partial<NMIPADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofNMIPADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.iField !== undefined) view.setInt32(8, Number(data.iField), true);
  // 0x0c: i32
  if (data?.iValue !== undefined) view.setInt32(12, Number(data.iValue), true);
  return buf;
}

export class NMIPADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iField(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get iValue(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iField(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set iValue(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMPGSCROLL (size: 40)
 */
export interface NMPGSCROLL {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMPGSCROLL_KEYS */
  fwKeys: NMPGSCROLL_KEYS;
  /** Windows.Win32.Foundation.RECT */
  rcParent: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMPGSCROLL_DIR */
  iDir: NMPGSCROLL_DIR;
  /** i32 */
  iXpos: number;
  /** i32 */
  iYpos: number;
  /** i32 */
  iScroll: number;
}

export const sizeofNMPGSCROLL = 40;

export function allocNMPGSCROLL(data?: Partial<NMPGSCROLL>): Uint8Array {
  const buf = new Uint8Array(sizeofNMPGSCROLL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u16
  if (data?.fwKeys !== undefined) view.setUint16(8, Number(data.fwKeys), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.rcParent !== undefined) view.setBigUint64(16, data.rcParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcParent))), true);
  // 0x18: u32
  if (data?.iDir !== undefined) view.setUint32(24, Number(data.iDir), true);
  // 0x1c: i32
  if (data?.iXpos !== undefined) view.setInt32(28, Number(data.iXpos), true);
  // 0x20: i32
  if (data?.iYpos !== undefined) view.setInt32(32, Number(data.iYpos), true);
  // 0x24: i32
  if (data?.iScroll !== undefined) view.setInt32(36, Number(data.iScroll), true);
  return buf;
}

export class NMPGSCROLLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get fwKeys(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get rcParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get iDir(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get iXpos(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get iYpos(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get iScroll(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set fwKeys(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set rcParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set iDir(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set iXpos(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set iYpos(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set iScroll(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMPGCALCSIZE (size: 24)
 */
export interface NMPGCALCSIZE {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMPGCALCSIZE_FLAGS */
  dwFlag: NMPGCALCSIZE_FLAGS;
  /** i32 */
  iWidth: number;
  /** i32 */
  iHeight: number;
}

export const sizeofNMPGCALCSIZE = 24;

export function allocNMPGCALCSIZE(data?: Partial<NMPGCALCSIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofNMPGCALCSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwFlag !== undefined) view.setUint32(8, Number(data.dwFlag), true);
  // 0x0c: i32
  if (data?.iWidth !== undefined) view.setInt32(12, Number(data.iWidth), true);
  // 0x10: i32
  if (data?.iHeight !== undefined) view.setInt32(16, Number(data.iHeight), true);
  // 0x14: pad4
  return buf;
}

export class NMPGCALCSIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlag(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get iWidth(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get iHeight(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlag(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set iWidth(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set iHeight(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.NMPGHOTITEM (size: 24)
 */
export interface NMPGHOTITEM {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  idOld: number;
  /** i32 */
  idNew: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofNMPGHOTITEM = 24;

export function allocNMPGHOTITEM(data?: Partial<NMPGHOTITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofNMPGHOTITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.idOld !== undefined) view.setInt32(8, Number(data.idOld), true);
  // 0x0c: i32
  if (data?.idNew !== undefined) view.setInt32(12, Number(data.idNew), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

export class NMPGHOTITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get idOld(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get idNew(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set idOld(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set idNew(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.BUTTON_IMAGELIST (size: 24)
 */
export interface BUTTON_IMAGELIST {
  /** Windows.Win32.UI.Controls.HIMAGELIST */
  himl: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  margin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.BUTTON_IMAGELIST_ALIGN */
  uAlign: BUTTON_IMAGELIST_ALIGN;
}

export const sizeofBUTTON_IMAGELIST = 24;

export function allocBUTTON_IMAGELIST(data?: Partial<BUTTON_IMAGELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBUTTON_IMAGELIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.himl !== undefined) view.setBigUint64(0, data.himl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.himl))), true);
  // 0x08: pointer
  if (data?.margin !== undefined) view.setBigUint64(8, data.margin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.margin))), true);
  // 0x10: u32
  if (data?.uAlign !== undefined) view.setUint32(16, Number(data.uAlign), true);
  // 0x14: pad4
  return buf;
}

export class BUTTON_IMAGELISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get himl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get margin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uAlign(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set himl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set margin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uAlign(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.NMBCHOTITEM (size: 16)
 */
export interface NMBCHOTITEM {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.NMTBHOTITEM_FLAGS */
  dwFlags: NMTBHOTITEM_FLAGS;
}

export const sizeofNMBCHOTITEM = 16;

export function allocNMBCHOTITEM(data?: Partial<NMBCHOTITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofNMBCHOTITEM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  return buf;
}

export class NMBCHOTITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.BUTTON_SPLITINFO (size: 32)
 */
export interface BUTTON_SPLITINFO {
  /** u32 */
  mask: number;
  /** Windows.Win32.UI.Controls.HIMAGELIST */
  himlGlyph: Uint8Array | Deno.PointerValue;
  /** u32 */
  uSplitStyle: number;
  /** Windows.Win32.Foundation.SIZE */
  size: Uint8Array | Deno.PointerValue;
}

export const sizeofBUTTON_SPLITINFO = 32;

export function allocBUTTON_SPLITINFO(data?: Partial<BUTTON_SPLITINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBUTTON_SPLITINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.mask !== undefined) view.setUint32(0, Number(data.mask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.himlGlyph !== undefined) view.setBigUint64(8, data.himlGlyph === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.himlGlyph))), true);
  // 0x10: u32
  if (data?.uSplitStyle !== undefined) view.setUint32(16, Number(data.uSplitStyle), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.size !== undefined) view.setBigUint64(24, data.size === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.size))), true);
  return buf;
}

export class BUTTON_SPLITINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get mask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get himlGlyph(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get uSplitStyle(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get size(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set mask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set himlGlyph(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set uSplitStyle(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set size(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMBCDROPDOWN (size: 16)
 */
export interface NMBCDROPDOWN {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcButton: Uint8Array | Deno.PointerValue;
}

export const sizeofNMBCDROPDOWN = 16;

export function allocNMBCDROPDOWN(data?: Partial<NMBCDROPDOWN>): Uint8Array {
  const buf = new Uint8Array(sizeofNMBCDROPDOWN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.rcButton !== undefined) view.setBigUint64(8, data.rcButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcButton))), true);
  return buf;
}

export class NMBCDROPDOWNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rcButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rcButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.EDITBALLOONTIP (size: 32)
 */
export interface EDITBALLOONTIP {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.EDITBALLOONTIP_ICON */
  ttiIcon: EDITBALLOONTIP_ICON;
}

export const sizeofEDITBALLOONTIP = 32;

export function allocEDITBALLOONTIP(data?: Partial<EDITBALLOONTIP>): Uint8Array {
  const buf = new Uint8Array(sizeofEDITBALLOONTIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ttiIcon !== undefined) view.setUint32(24, Number(data.ttiIcon), true);
  // 0x1c: pad4
  return buf;
}

export class EDITBALLOONTIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ttiIcon(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ttiIcon(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.NMSEARCHWEB (size: 24)
 */
export interface NMSEARCHWEB {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.EC_SEARCHWEB_ENTRYPOINT */
  entrypoint: EC_SEARCHWEB_ENTRYPOINT;
  /** Windows.Win32.Foundation.BOOL */
  hasQueryText: boolean;
  /** Windows.Win32.Foundation.BOOL */
  invokeSucceeded: boolean;
}

export const sizeofNMSEARCHWEB = 24;

export function allocNMSEARCHWEB(data?: Partial<NMSEARCHWEB>): Uint8Array {
  const buf = new Uint8Array(sizeofNMSEARCHWEB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: i32
  if (data?.entrypoint !== undefined) view.setInt32(8, Number(data.entrypoint), true);
  // 0x0c: i32
  if (data?.hasQueryText !== undefined) view.setInt32(12, Number(data.hasQueryText), true);
  // 0x10: i32
  if (data?.invokeSucceeded !== undefined) view.setInt32(16, Number(data.invokeSucceeded), true);
  // 0x14: pad4
  return buf;
}

export class NMSEARCHWEBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get entrypoint(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get hasQueryText(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get invokeSucceeded(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set entrypoint(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set hasQueryText(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set invokeSucceeded(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.TASKDIALOG_BUTTON (size: 16)
 */
export interface TASKDIALOG_BUTTON {
  /** i32 */
  nButtonID: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszButtonText: string | null | Uint8Array | Uint16Array;
}

export const sizeofTASKDIALOG_BUTTON = 16;

export function allocTASKDIALOG_BUTTON(data?: Partial<TASKDIALOG_BUTTON>): Uint8Array {
  const buf = new Uint8Array(sizeofTASKDIALOG_BUTTON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nButtonID !== undefined) view.setInt32(0, Number(data.nButtonID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszButtonText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszButtonText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class TASKDIALOG_BUTTONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get nButtonID(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszButtonText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set nButtonID(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszButtonText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TASKDIALOGCONFIG (size: 176)
 */
export interface TASKDIALOGCONFIG {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.TASKDIALOG_FLAGS */
  dwFlags: TASKDIALOG_FLAGS;
  /** Windows.Win32.UI.Controls.TASKDIALOG_COMMON_BUTTON_FLAGS */
  dwCommonButtons: TASKDIALOG_COMMON_BUTTON_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszWindowTitle: string | null | Uint8Array | Uint16Array;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszMainInstruction: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszContent: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cButtons: number;
  /** ptr */
  pButtons: Deno.PointerValue | Uint8Array;
  /** i32 */
  nDefaultButton: number;
  /** u32 */
  cRadioButtons: number;
  /** ptr */
  pRadioButtons: Deno.PointerValue | Uint8Array;
  /** i32 */
  nDefaultRadioButton: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszVerificationText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszExpandedInformation: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszExpandedControlText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCollapsedControlText: string | null | Uint8Array | Uint16Array;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszFooter: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.PFTASKDIALOGCALLBACK */
  pfCallback: Uint8Array | Deno.PointerValue;
  /** isize */
  lpCallbackData: bigint | number;
  /** u32 */
  cxWidth: number;
}

export const sizeofTASKDIALOGCONFIG = 176;

export function allocTASKDIALOGCONFIG(data?: Partial<TASKDIALOGCONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofTASKDIALOGCONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndParent))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: i32
  if (data?.dwFlags !== undefined) view.setInt32(24, Number(data.dwFlags), true);
  // 0x1c: i32
  if (data?.dwCommonButtons !== undefined) view.setInt32(28, Number(data.dwCommonButtons), true);
  // 0x20: buffer
  if (data?.pszWindowTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszWindowTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x30: buffer
  if (data?.pszMainInstruction !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszMainInstruction);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pszContent !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pszContent);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.cButtons !== undefined) view.setUint32(64, Number(data.cButtons), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pButtons !== undefined) view.setBigUint64(72, data.pButtons === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pButtons))), true);
  // 0x50: i32
  if (data?.nDefaultButton !== undefined) view.setInt32(80, Number(data.nDefaultButton), true);
  // 0x54: u32
  if (data?.cRadioButtons !== undefined) view.setUint32(84, Number(data.cRadioButtons), true);
  // 0x58: pointer
  if (data?.pRadioButtons !== undefined) view.setBigUint64(88, data.pRadioButtons === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRadioButtons))), true);
  // 0x60: i32
  if (data?.nDefaultRadioButton !== undefined) view.setInt32(96, Number(data.nDefaultRadioButton), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.pszVerificationText !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.pszVerificationText);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: buffer
  if (data?.pszExpandedInformation !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.pszExpandedInformation);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f112))), true);
  }
  // 0x78: buffer
  if (data?.pszExpandedControlText !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.pszExpandedControlText);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f120))), true);
  }
  // 0x80: buffer
  if (data?.pszCollapsedControlText !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.pszCollapsedControlText);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(136, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x90: buffer
  if (data?.pszFooter !== undefined) {
    (buf as any)._f144 = util.pwstrToFfi(data.pszFooter);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f144))), true);
  }
  // 0x98: pointer
  if (data?.pfCallback !== undefined) view.setBigUint64(152, data.pfCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfCallback))), true);
  // 0xa0: isize
  if (data?.lpCallbackData !== undefined) view.setBigInt64(160, BigInt(data.lpCallbackData), true);
  // 0xa8: u32
  if (data?.cxWidth !== undefined) view.setUint32(168, Number(data.cxWidth), true);
  // 0xac: pad4
  return buf;
}

export class TASKDIALOGCONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dwFlags(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get dwCommonButtons(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: buffer
  get pszWindowTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pszMainInstruction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pszContent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cButtons(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get pButtons(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: i32
  get nDefaultButton(): number {
    return this.view.getInt32(80, true);
  }

  // 0x54: u32
  get cRadioButtons(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get pRadioButtons(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: i32
  get nDefaultRadioButton(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get pszVerificationText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: buffer
  get pszExpandedInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: buffer
  get pszExpandedControlText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get pszCollapsedControlText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: buffer
  get pszFooter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get pfCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: isize
  get lpCallbackData(): bigint | number {
    return Number(this.view.getBigInt64(160, true));
  }

  // 0xa8: u32
  get cxWidth(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dwFlags(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set dwCommonButtons(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: buffer
  set pszWindowTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: buffer
  set pszMainInstruction(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pszContent(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set cButtons(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set pButtons(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: i32
  set nDefaultButton(value: number) {
    this.view.setInt32(80, value, true);
  }

  // 0x54: u32
  set cRadioButtons(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set pRadioButtons(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: i32
  set nDefaultRadioButton(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set pszVerificationText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: buffer
  set pszExpandedInformation(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f112))), true);
  }

  // 0x78: buffer
  set pszExpandedControlText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f120))), true);
  }

  // 0x80: buffer
  set pszCollapsedControlText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: buffer
  set pszFooter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f144 = value;
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f144))), true);
  }

  // 0x98: pointer
  set pfCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: isize
  set lpCallbackData(value: bigint | number) {
    this.view.setBigInt64(160, BigInt(value), true);
  }

  // 0xa8: u32
  set cxWidth(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: pad4
}

/**
 * Windows.Win32.UI.Controls.DPASTREAMINFO (size: 16)
 */
export interface DPASTREAMINFO {
  /** i32 */
  iPos: number;
  /** ptr */
  pvItem: Deno.PointerValue | Uint8Array;
}

export const sizeofDPASTREAMINFO = 16;

export function allocDPASTREAMINFO(data?: Partial<DPASTREAMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDPASTREAMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iPos !== undefined) view.setInt32(0, Number(data.iPos), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvItem !== undefined) view.setBigUint64(8, data.pvItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvItem))), true);
  return buf;
}

export class DPASTREAMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iPos(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set iPos(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.IMAGELISTSTATS (size: 16)
 */
export interface IMAGELISTSTATS {
  /** u32 */
  cbSize: number;
  /** i32 */
  cAlloc: number;
  /** i32 */
  cUsed: number;
  /** i32 */
  cStandby: number;
}

export const sizeofIMAGELISTSTATS = 16;

export function allocIMAGELISTSTATS(data?: Partial<IMAGELISTSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofIMAGELISTSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.cAlloc !== undefined) view.setInt32(4, Number(data.cAlloc), true);
  // 0x08: i32
  if (data?.cUsed !== undefined) view.setInt32(8, Number(data.cUsed), true);
  // 0x0c: i32
  if (data?.cStandby !== undefined) view.setInt32(12, Number(data.cStandby), true);
  return buf;
}

export class IMAGELISTSTATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get cAlloc(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get cUsed(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cStandby(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set cAlloc(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set cUsed(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cStandby(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TA_TRANSFORM (size: 24)
 */
export interface TA_TRANSFORM {
  /** Windows.Win32.UI.Controls.TA_TRANSFORM_TYPE */
  eTransformType: TA_TRANSFORM_TYPE;
  /** u32 */
  dwTimingFunctionId: number;
  /** u32 */
  dwStartTime: number;
  /** u32 */
  dwDurationTime: number;
  /** Windows.Win32.UI.Controls.TA_TRANSFORM_FLAG */
  eFlags: TA_TRANSFORM_FLAG;
}

export const sizeofTA_TRANSFORM = 24;

export function allocTA_TRANSFORM(data?: Partial<TA_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofTA_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eTransformType !== undefined) view.setInt32(0, Number(data.eTransformType), true);
  // 0x04: u32
  if (data?.dwTimingFunctionId !== undefined) view.setUint32(4, Number(data.dwTimingFunctionId), true);
  // 0x08: u32
  if (data?.dwStartTime !== undefined) view.setUint32(8, Number(data.dwStartTime), true);
  // 0x0c: u32
  if (data?.dwDurationTime !== undefined) view.setUint32(12, Number(data.dwDurationTime), true);
  // 0x10: i32
  if (data?.eFlags !== undefined) view.setInt32(16, Number(data.eFlags), true);
  // 0x14: pad4
  return buf;
}

export class TA_TRANSFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eTransformType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwTimingFunctionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwStartTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDurationTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get eFlags(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set eTransformType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwTimingFunctionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwStartTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDurationTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set eFlags(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.TA_TRANSFORM_2D (size: 32)
 */
export interface TA_TRANSFORM_2D {
  /** Windows.Win32.UI.Controls.TA_TRANSFORM */
  header: Uint8Array | Deno.PointerValue;
  /** f32 */
  rX: number;
  /** f32 */
  rY: number;
  /** f32 */
  rInitialX: number;
  /** f32 */
  rInitialY: number;
  /** f32 */
  rOriginX: number;
  /** f32 */
  rOriginY: number;
}

export const sizeofTA_TRANSFORM_2D = 32;

export function allocTA_TRANSFORM_2D(data?: Partial<TA_TRANSFORM_2D>): Uint8Array {
  const buf = new Uint8Array(sizeofTA_TRANSFORM_2D);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: f32
  if (data?.rX !== undefined) view.setFloat32(8, Number(data.rX), true);
  // 0x0c: f32
  if (data?.rY !== undefined) view.setFloat32(12, Number(data.rY), true);
  // 0x10: f32
  if (data?.rInitialX !== undefined) view.setFloat32(16, Number(data.rInitialX), true);
  // 0x14: f32
  if (data?.rInitialY !== undefined) view.setFloat32(20, Number(data.rInitialY), true);
  // 0x18: f32
  if (data?.rOriginX !== undefined) view.setFloat32(24, Number(data.rOriginX), true);
  // 0x1c: f32
  if (data?.rOriginY !== undefined) view.setFloat32(28, Number(data.rOriginY), true);
  return buf;
}

export class TA_TRANSFORM_2DView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get rX(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get rY(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get rInitialX(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get rInitialY(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get rOriginX(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get rOriginY(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set rX(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set rY(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set rInitialX(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set rInitialY(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set rOriginX(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set rOriginY(value: number) {
    this.view.setFloat32(28, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TA_TRANSFORM_OPACITY (size: 16)
 */
export interface TA_TRANSFORM_OPACITY {
  /** Windows.Win32.UI.Controls.TA_TRANSFORM */
  header: Uint8Array | Deno.PointerValue;
  /** f32 */
  rOpacity: number;
  /** f32 */
  rInitialOpacity: number;
}

export const sizeofTA_TRANSFORM_OPACITY = 16;

export function allocTA_TRANSFORM_OPACITY(data?: Partial<TA_TRANSFORM_OPACITY>): Uint8Array {
  const buf = new Uint8Array(sizeofTA_TRANSFORM_OPACITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: f32
  if (data?.rOpacity !== undefined) view.setFloat32(8, Number(data.rOpacity), true);
  // 0x0c: f32
  if (data?.rInitialOpacity !== undefined) view.setFloat32(12, Number(data.rInitialOpacity), true);
  return buf;
}

export class TA_TRANSFORM_OPACITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get rOpacity(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get rInitialOpacity(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set rOpacity(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set rInitialOpacity(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TA_TRANSFORM_CLIP (size: 40)
 */
export interface TA_TRANSFORM_CLIP {
  /** Windows.Win32.UI.Controls.TA_TRANSFORM */
  header: Uint8Array | Deno.PointerValue;
  /** f32 */
  rLeft: number;
  /** f32 */
  rTop: number;
  /** f32 */
  rRight: number;
  /** f32 */
  rBottom: number;
  /** f32 */
  rInitialLeft: number;
  /** f32 */
  rInitialTop: number;
  /** f32 */
  rInitialRight: number;
  /** f32 */
  rInitialBottom: number;
}

export const sizeofTA_TRANSFORM_CLIP = 40;

export function allocTA_TRANSFORM_CLIP(data?: Partial<TA_TRANSFORM_CLIP>): Uint8Array {
  const buf = new Uint8Array(sizeofTA_TRANSFORM_CLIP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: f32
  if (data?.rLeft !== undefined) view.setFloat32(8, Number(data.rLeft), true);
  // 0x0c: f32
  if (data?.rTop !== undefined) view.setFloat32(12, Number(data.rTop), true);
  // 0x10: f32
  if (data?.rRight !== undefined) view.setFloat32(16, Number(data.rRight), true);
  // 0x14: f32
  if (data?.rBottom !== undefined) view.setFloat32(20, Number(data.rBottom), true);
  // 0x18: f32
  if (data?.rInitialLeft !== undefined) view.setFloat32(24, Number(data.rInitialLeft), true);
  // 0x1c: f32
  if (data?.rInitialTop !== undefined) view.setFloat32(28, Number(data.rInitialTop), true);
  // 0x20: f32
  if (data?.rInitialRight !== undefined) view.setFloat32(32, Number(data.rInitialRight), true);
  // 0x24: f32
  if (data?.rInitialBottom !== undefined) view.setFloat32(36, Number(data.rInitialBottom), true);
  return buf;
}

export class TA_TRANSFORM_CLIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get rLeft(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get rTop(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get rRight(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get rBottom(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: f32
  get rInitialLeft(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: f32
  get rInitialTop(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x20: f32
  get rInitialRight(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: f32
  get rInitialBottom(): number {
    return this.view.getFloat32(36, true);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set rLeft(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set rTop(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set rRight(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set rBottom(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: f32
  set rInitialLeft(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: f32
  set rInitialTop(value: number) {
    this.view.setFloat32(28, value, true);
  }

  // 0x20: f32
  set rInitialRight(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: f32
  set rInitialBottom(value: number) {
    this.view.setFloat32(36, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.TA_TIMINGFUNCTION (size: 8)
 */
export interface TA_TIMINGFUNCTION {
  /** Windows.Win32.UI.Controls.TA_TIMINGFUNCTION_TYPE */
  eTimingFunctionType: TA_TIMINGFUNCTION_TYPE;
}

export const sizeofTA_TIMINGFUNCTION = 8;

export function allocTA_TIMINGFUNCTION(data?: Partial<TA_TIMINGFUNCTION>): Uint8Array {
  const buf = new Uint8Array(sizeofTA_TIMINGFUNCTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eTimingFunctionType !== undefined) view.setInt32(0, Number(data.eTimingFunctionType), true);
  // 0x04: pad4
  return buf;
}

export class TA_TIMINGFUNCTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eTimingFunctionType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set eTimingFunctionType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.UI.Controls.TA_CUBIC_BEZIER (size: 24)
 */
export interface TA_CUBIC_BEZIER {
  /** Windows.Win32.UI.Controls.TA_TIMINGFUNCTION */
  header: Uint8Array | Deno.PointerValue;
  /** f32 */
  rX0: number;
  /** f32 */
  rY0: number;
  /** f32 */
  rX1: number;
  /** f32 */
  rY1: number;
}

export const sizeofTA_CUBIC_BEZIER = 24;

export function allocTA_CUBIC_BEZIER(data?: Partial<TA_CUBIC_BEZIER>): Uint8Array {
  const buf = new Uint8Array(sizeofTA_CUBIC_BEZIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.header))), true);
  // 0x08: f32
  if (data?.rX0 !== undefined) view.setFloat32(8, Number(data.rX0), true);
  // 0x0c: f32
  if (data?.rY0 !== undefined) view.setFloat32(12, Number(data.rY0), true);
  // 0x10: f32
  if (data?.rX1 !== undefined) view.setFloat32(16, Number(data.rX1), true);
  // 0x14: f32
  if (data?.rY1 !== undefined) view.setFloat32(20, Number(data.rY1), true);
  return buf;
}

export class TA_CUBIC_BEZIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: f32
  get rX0(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get rY0(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: f32
  get rX1(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get rY1(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: f32
  set rX0(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set rY0(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: f32
  set rX1(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set rY1(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.DTBGOPTS (size: 16)
 */
export interface DTBGOPTS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.RECT */
  rcClip: Uint8Array | Deno.PointerValue;
}

export const sizeofDTBGOPTS = 16;

export function allocDTBGOPTS(data?: Partial<DTBGOPTS>): Uint8Array {
  const buf = new Uint8Array(sizeofDTBGOPTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.rcClip !== undefined) view.setBigUint64(8, data.rcClip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcClip))), true);
  return buf;
}

export class DTBGOPTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rcClip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rcClip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.MARGINS (size: 16)
 */
export interface MARGINS {
  /** i32 */
  cxLeftWidth: number;
  /** i32 */
  cxRightWidth: number;
  /** i32 */
  cyTopHeight: number;
  /** i32 */
  cyBottomHeight: number;
}

export const sizeofMARGINS = 16;

export function allocMARGINS(data?: Partial<MARGINS>): Uint8Array {
  const buf = new Uint8Array(sizeofMARGINS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cxLeftWidth !== undefined) view.setInt32(0, Number(data.cxLeftWidth), true);
  // 0x04: i32
  if (data?.cxRightWidth !== undefined) view.setInt32(4, Number(data.cxRightWidth), true);
  // 0x08: i32
  if (data?.cyTopHeight !== undefined) view.setInt32(8, Number(data.cyTopHeight), true);
  // 0x0c: i32
  if (data?.cyBottomHeight !== undefined) view.setInt32(12, Number(data.cyBottomHeight), true);
  return buf;
}

export class MARGINSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cxLeftWidth(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cxRightWidth(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get cyTopHeight(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cyBottomHeight(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set cxLeftWidth(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cxRightWidth(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set cyTopHeight(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cyBottomHeight(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.INTLIST (size: 16)
 */
export interface INTLIST {
  /** i32 */
  iValueCount: number;
  /** array */
  iValues: Deno.PointerValue;
}

export const sizeofINTLIST = 16;

export function allocINTLIST(data?: Partial<INTLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofINTLIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iValueCount !== undefined) view.setInt32(0, Number(data.iValueCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.iValues !== undefined) view.setBigUint64(8, data.iValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.iValues))), true);
  return buf;
}

export class INTLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iValueCount(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get iValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set iValueCount(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set iValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.WTA_OPTIONS (size: 8)
 */
export interface WTA_OPTIONS {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwMask: number;
}

export const sizeofWTA_OPTIONS = 8;

export function allocWTA_OPTIONS(data?: Partial<WTA_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofWTA_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  return buf;
}

export class WTA_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.DTTOPTS (size: 88)
 */
export interface DTTOPTS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.UI.Controls.DTTOPTS_FLAGS */
  dwFlags: DTTOPTS_FLAGS;
  /** Windows.Win32.Foundation.COLORREF */
  crText: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBorder: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crShadow: Uint8Array | Deno.PointerValue;
  /** i32 */
  iTextShadowType: number;
  /** Windows.Win32.Foundation.POINT */
  ptShadowOffset: Uint8Array | Deno.PointerValue;
  /** i32 */
  iBorderSize: number;
  /** i32 */
  iFontPropId: number;
  /** i32 */
  iColorPropId: number;
  /** i32 */
  iStateId: number;
  /** Windows.Win32.Foundation.BOOL */
  fApplyOverlay: boolean;
  /** i32 */
  iGlowSize: number;
  /** Windows.Win32.UI.Controls.DTT_CALLBACK_PROC */
  pfnDrawTextCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofDTTOPTS = 88;

export function allocDTTOPTS(data?: Partial<DTTOPTS>): Uint8Array {
  const buf = new Uint8Array(sizeofDTTOPTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.crText !== undefined) view.setBigUint64(8, data.crText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crText))), true);
  // 0x10: pointer
  if (data?.crBorder !== undefined) view.setBigUint64(16, data.crBorder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBorder))), true);
  // 0x18: pointer
  if (data?.crShadow !== undefined) view.setBigUint64(24, data.crShadow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crShadow))), true);
  // 0x20: i32
  if (data?.iTextShadowType !== undefined) view.setInt32(32, Number(data.iTextShadowType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ptShadowOffset !== undefined) view.setBigUint64(40, data.ptShadowOffset === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptShadowOffset))), true);
  // 0x30: i32
  if (data?.iBorderSize !== undefined) view.setInt32(48, Number(data.iBorderSize), true);
  // 0x34: i32
  if (data?.iFontPropId !== undefined) view.setInt32(52, Number(data.iFontPropId), true);
  // 0x38: i32
  if (data?.iColorPropId !== undefined) view.setInt32(56, Number(data.iColorPropId), true);
  // 0x3c: i32
  if (data?.iStateId !== undefined) view.setInt32(60, Number(data.iStateId), true);
  // 0x40: i32
  if (data?.fApplyOverlay !== undefined) view.setInt32(64, Number(data.fApplyOverlay), true);
  // 0x44: i32
  if (data?.iGlowSize !== undefined) view.setInt32(68, Number(data.iGlowSize), true);
  // 0x48: pointer
  if (data?.pfnDrawTextCallback !== undefined) view.setBigUint64(72, data.pfnDrawTextCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnDrawTextCallback))), true);
  // 0x50: pointer
  if (data?.lParam !== undefined) view.setBigUint64(80, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class DTTOPTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get crText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get crBorder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get crShadow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get iTextShadowType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ptShadowOffset(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i32
  get iBorderSize(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: i32
  get iFontPropId(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: i32
  get iColorPropId(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get iStateId(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get fApplyOverlay(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get iGlowSize(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: pointer
  get pfnDrawTextCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set crText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set crBorder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set crShadow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set iTextShadowType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ptShadowOffset(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: i32
  set iBorderSize(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: i32
  set iFontPropId(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: i32
  set iColorPropId(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set iStateId(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set fApplyOverlay(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set iGlowSize(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: pointer
  set pfnDrawTextCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.BP_ANIMATIONPARAMS (size: 16)
 */
export interface BP_ANIMATIONPARAMS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.UI.Controls.BP_ANIMATIONSTYLE */
  style: BP_ANIMATIONSTYLE;
  /** u32 */
  dwDuration: number;
}

export const sizeofBP_ANIMATIONPARAMS = 16;

export function allocBP_ANIMATIONPARAMS(data?: Partial<BP_ANIMATIONPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofBP_ANIMATIONPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.style !== undefined) view.setInt32(8, Number(data.style), true);
  // 0x0c: u32
  if (data?.dwDuration !== undefined) view.setUint32(12, Number(data.dwDuration), true);
  return buf;
}

export class BP_ANIMATIONPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get style(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwDuration(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set style(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwDuration(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.BP_PAINTPARAMS (size: 24)
 */
export interface BP_PAINTPARAMS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.BP_PAINTPARAMS_FLAGS */
  dwFlags: BP_PAINTPARAMS_FLAGS;
  /** ptr */
  prcExclude: Deno.PointerValue | Uint8Array;
  /** ptr */
  pBlendFunction: Deno.PointerValue | Uint8Array;
}

export const sizeofBP_PAINTPARAMS = 24;

export function allocBP_PAINTPARAMS(data?: Partial<BP_PAINTPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofBP_PAINTPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.prcExclude !== undefined) view.setBigUint64(8, data.prcExclude === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prcExclude))), true);
  // 0x10: pointer
  if (data?.pBlendFunction !== undefined) view.setBigUint64(16, data.pBlendFunction === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBlendFunction))), true);
  return buf;
}

export class BP_PAINTPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get prcExclude(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pBlendFunction(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set prcExclude(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pBlendFunction(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.CCSTYLEA (size: 24)
 */
export interface CCSTYLEA {
  /** u32 */
  flStyle: number;
  /** u32 */
  flExtStyle: number;
  /** array */
  szText: Deno.PointerValue;
  /** u16 */
  lgid: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofCCSTYLEA = 24;

export function allocCCSTYLEA(data?: Partial<CCSTYLEA>): Uint8Array {
  const buf = new Uint8Array(sizeofCCSTYLEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flStyle !== undefined) view.setUint32(0, Number(data.flStyle), true);
  // 0x04: u32
  if (data?.flExtStyle !== undefined) view.setUint32(4, Number(data.flExtStyle), true);
  // 0x08: pointer
  if (data?.szText !== undefined) view.setBigUint64(8, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  // 0x10: u16
  if (data?.lgid !== undefined) view.setUint16(16, Number(data.lgid), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: pad4
  return buf;
}

export class CCSTYLEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flExtStyle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get lgid(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wReserved1(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set flStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flExtStyle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set lgid(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wReserved1(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.CCSTYLEW (size: 24)
 */
export interface CCSTYLEW {
  /** u32 */
  flStyle: number;
  /** u32 */
  flExtStyle: number;
  /** array */
  szText: Deno.PointerValue;
  /** u16 */
  lgid: number;
  /** u16 */
  wReserved1: number;
}

export const sizeofCCSTYLEW = 24;

export function allocCCSTYLEW(data?: Partial<CCSTYLEW>): Uint8Array {
  const buf = new Uint8Array(sizeofCCSTYLEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flStyle !== undefined) view.setUint32(0, Number(data.flStyle), true);
  // 0x04: u32
  if (data?.flExtStyle !== undefined) view.setUint32(4, Number(data.flExtStyle), true);
  // 0x08: pointer
  if (data?.szText !== undefined) view.setBigUint64(8, data.szText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szText))), true);
  // 0x10: u16
  if (data?.lgid !== undefined) view.setUint16(16, Number(data.lgid), true);
  // 0x12: u16
  if (data?.wReserved1 !== undefined) view.setUint16(18, Number(data.wReserved1), true);
  // 0x14: pad4
  return buf;
}

export class CCSTYLEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flExtStyle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get szText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get lgid(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wReserved1(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set flStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flExtStyle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set szText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set lgid(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wReserved1(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.CCSTYLEFLAGA (size: 16)
 */
export interface CCSTYLEFLAGA {
  /** u32 */
  flStyle: number;
  /** u32 */
  flStyleMask: number;
  /** Windows.Win32.Foundation.PSTR */
  pszStyle: string | null | Uint8Array;
}

export const sizeofCCSTYLEFLAGA = 16;

export function allocCCSTYLEFLAGA(data?: Partial<CCSTYLEFLAGA>): Uint8Array {
  const buf = new Uint8Array(sizeofCCSTYLEFLAGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flStyle !== undefined) view.setUint32(0, Number(data.flStyle), true);
  // 0x04: u32
  if (data?.flStyleMask !== undefined) view.setUint32(4, Number(data.flStyleMask), true);
  // 0x08: buffer
  if (data?.pszStyle !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszStyle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class CCSTYLEFLAGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flStyleMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set flStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flStyleMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszStyle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.CCSTYLEFLAGW (size: 16)
 */
export interface CCSTYLEFLAGW {
  /** u32 */
  flStyle: number;
  /** u32 */
  flStyleMask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszStyle: string | null | Uint8Array | Uint16Array;
}

export const sizeofCCSTYLEFLAGW = 16;

export function allocCCSTYLEFLAGW(data?: Partial<CCSTYLEFLAGW>): Uint8Array {
  const buf = new Uint8Array(sizeofCCSTYLEFLAGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flStyle !== undefined) view.setUint32(0, Number(data.flStyle), true);
  // 0x04: u32
  if (data?.flStyleMask !== undefined) view.setUint32(4, Number(data.flStyleMask), true);
  // 0x08: buffer
  if (data?.pszStyle !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszStyle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class CCSTYLEFLAGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flStyle(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flStyleMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set flStyle(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flStyleMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszStyle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.CCINFOA (size: 96)
 */
export interface CCINFOA {
  /** array */
  szClass: Deno.PointerValue;
  /** u32 */
  flOptions: number;
  /** array */
  szDesc: Deno.PointerValue;
  /** u32 */
  cxDefault: number;
  /** u32 */
  cyDefault: number;
  /** u32 */
  flStyleDefault: number;
  /** u32 */
  flExtStyleDefault: number;
  /** u32 */
  flCtrlTypeMask: number;
  /** array */
  szTextDefault: Deno.PointerValue;
  /** i32 */
  cStyleFlags: number;
  /** ptr */
  aStyleFlags: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.LPFNCCSTYLEA */
  lpfnStyle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNCCSIZETOTEXTA */
  lpfnSizeToText: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofCCINFOA = 96;

export function allocCCINFOA(data?: Partial<CCINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofCCINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szClass !== undefined) view.setBigUint64(0, data.szClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szClass))), true);
  // 0x08: u32
  if (data?.flOptions !== undefined) view.setUint32(8, Number(data.flOptions), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szDesc !== undefined) view.setBigUint64(16, data.szDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDesc))), true);
  // 0x18: u32
  if (data?.cxDefault !== undefined) view.setUint32(24, Number(data.cxDefault), true);
  // 0x1c: u32
  if (data?.cyDefault !== undefined) view.setUint32(28, Number(data.cyDefault), true);
  // 0x20: u32
  if (data?.flStyleDefault !== undefined) view.setUint32(32, Number(data.flStyleDefault), true);
  // 0x24: u32
  if (data?.flExtStyleDefault !== undefined) view.setUint32(36, Number(data.flExtStyleDefault), true);
  // 0x28: u32
  if (data?.flCtrlTypeMask !== undefined) view.setUint32(40, Number(data.flCtrlTypeMask), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.szTextDefault !== undefined) view.setBigUint64(48, data.szTextDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szTextDefault))), true);
  // 0x38: i32
  if (data?.cStyleFlags !== undefined) view.setInt32(56, Number(data.cStyleFlags), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.aStyleFlags !== undefined) view.setBigUint64(64, data.aStyleFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aStyleFlags))), true);
  // 0x48: pointer
  if (data?.lpfnStyle !== undefined) view.setBigUint64(72, data.lpfnStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnStyle))), true);
  // 0x50: pointer
  if (data?.lpfnSizeToText !== undefined) view.setBigUint64(80, data.lpfnSizeToText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnSizeToText))), true);
  // 0x58: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(88, Number(data.dwReserved1), true);
  // 0x5c: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(92, Number(data.dwReserved2), true);
  return buf;
}

export class CCINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flOptions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cxDefault(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cyDefault(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get flStyleDefault(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get flExtStyleDefault(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get flCtrlTypeMask(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get szTextDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get cStyleFlags(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get aStyleFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnSizeToText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwReserved1(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwReserved2(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: pointer
  set szClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flOptions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cxDefault(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cyDefault(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set flStyleDefault(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set flExtStyleDefault(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set flCtrlTypeMask(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set szTextDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set cStyleFlags(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set aStyleFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnSizeToText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwReserved1(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwReserved2(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.CCINFOW (size: 88)
 */
export interface CCINFOW {
  /** array */
  szClass: Deno.PointerValue;
  /** u32 */
  flOptions: number;
  /** array */
  szDesc: Deno.PointerValue;
  /** u32 */
  cxDefault: number;
  /** u32 */
  cyDefault: number;
  /** u32 */
  flStyleDefault: number;
  /** u32 */
  flExtStyleDefault: number;
  /** u32 */
  flCtrlTypeMask: number;
  /** i32 */
  cStyleFlags: number;
  /** ptr */
  aStyleFlags: Deno.PointerValue | Uint8Array;
  /** array */
  szTextDefault: Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNCCSTYLEW */
  lpfnStyle: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.LPFNCCSIZETOTEXTW */
  lpfnSizeToText: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofCCINFOW = 88;

export function allocCCINFOW(data?: Partial<CCINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofCCINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szClass !== undefined) view.setBigUint64(0, data.szClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szClass))), true);
  // 0x08: u32
  if (data?.flOptions !== undefined) view.setUint32(8, Number(data.flOptions), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szDesc !== undefined) view.setBigUint64(16, data.szDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDesc))), true);
  // 0x18: u32
  if (data?.cxDefault !== undefined) view.setUint32(24, Number(data.cxDefault), true);
  // 0x1c: u32
  if (data?.cyDefault !== undefined) view.setUint32(28, Number(data.cyDefault), true);
  // 0x20: u32
  if (data?.flStyleDefault !== undefined) view.setUint32(32, Number(data.flStyleDefault), true);
  // 0x24: u32
  if (data?.flExtStyleDefault !== undefined) view.setUint32(36, Number(data.flExtStyleDefault), true);
  // 0x28: u32
  if (data?.flCtrlTypeMask !== undefined) view.setUint32(40, Number(data.flCtrlTypeMask), true);
  // 0x2c: i32
  if (data?.cStyleFlags !== undefined) view.setInt32(44, Number(data.cStyleFlags), true);
  // 0x30: pointer
  if (data?.aStyleFlags !== undefined) view.setBigUint64(48, data.aStyleFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aStyleFlags))), true);
  // 0x38: pointer
  if (data?.szTextDefault !== undefined) view.setBigUint64(56, data.szTextDefault === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szTextDefault))), true);
  // 0x40: pointer
  if (data?.lpfnStyle !== undefined) view.setBigUint64(64, data.lpfnStyle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnStyle))), true);
  // 0x48: pointer
  if (data?.lpfnSizeToText !== undefined) view.setBigUint64(72, data.lpfnSizeToText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnSizeToText))), true);
  // 0x50: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(80, Number(data.dwReserved1), true);
  // 0x54: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(84, Number(data.dwReserved2), true);
  return buf;
}

export class CCINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flOptions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cxDefault(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cyDefault(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get flStyleDefault(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get flExtStyleDefault(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get flCtrlTypeMask(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get cStyleFlags(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get aStyleFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get szTextDefault(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnSizeToText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwReserved1(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwReserved2(): number {
    return this.view.getUint32(84, true);
  }

  // 0x00: pointer
  set szClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flOptions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cxDefault(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cyDefault(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set flStyleDefault(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set flExtStyleDefault(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set flCtrlTypeMask(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set cStyleFlags(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set aStyleFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set szTextDefault(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnStyle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnSizeToText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwReserved1(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwReserved2(value: number) {
    this.view.setUint32(84, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.IMECOMPTEXT (size: 8)
 */
export interface IMECOMPTEXT {
  /** i32 */
  cb: number;
  /** Windows.Win32.UI.Controls.RichEdit.IMECOMPTEXT_FLAGS */
  flags: IMECOMPTEXT_FLAGS;
}

export const sizeofIMECOMPTEXT = 8;

export function allocIMECOMPTEXT(data?: Partial<IMECOMPTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECOMPTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cb !== undefined) view.setInt32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.flags !== undefined) view.setUint32(4, Number(data.flags), true);
  return buf;
}

export class IMECOMPTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cb(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set cb(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.TABLEROWPARMS (size: 32)
 */
export interface TABLEROWPARMS {
  /** u8 */
  cbRow: number;
  /** u8 */
  cbCell: number;
  /** u8 */
  cCell: number;
  /** u8 */
  cRow: number;
  /** i32 */
  dxCellMargin: number;
  /** i32 */
  dxIndent: number;
  /** i32 */
  dyHeight: number;
  /** u32 */
  _bitfield: number;
  /** i32 */
  cpStartRow: number;
  /** u8 */
  bTableLevel: number;
  /** u8 */
  iCell: number;
}

export const sizeofTABLEROWPARMS = 32;

export function allocTABLEROWPARMS(data?: Partial<TABLEROWPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTABLEROWPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.cbRow !== undefined) view.setUint8(0, Number(data.cbRow));
  // 0x01: u8
  if (data?.cbCell !== undefined) view.setUint8(1, Number(data.cbCell));
  // 0x02: u8
  if (data?.cCell !== undefined) view.setUint8(2, Number(data.cCell));
  // 0x03: u8
  if (data?.cRow !== undefined) view.setUint8(3, Number(data.cRow));
  // 0x04: i32
  if (data?.dxCellMargin !== undefined) view.setInt32(4, Number(data.dxCellMargin), true);
  // 0x08: i32
  if (data?.dxIndent !== undefined) view.setInt32(8, Number(data.dxIndent), true);
  // 0x0c: i32
  if (data?.dyHeight !== undefined) view.setInt32(12, Number(data.dyHeight), true);
  // 0x10: u32
  if (data?._bitfield !== undefined) view.setUint32(16, Number(data._bitfield), true);
  // 0x14: i32
  if (data?.cpStartRow !== undefined) view.setInt32(20, Number(data.cpStartRow), true);
  // 0x18: u8
  if (data?.bTableLevel !== undefined) view.setUint8(24, Number(data.bTableLevel));
  // 0x19: u8
  if (data?.iCell !== undefined) view.setUint8(25, Number(data.iCell));
  // 0x1a: pad6
  return buf;
}

export class TABLEROWPARMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get cbRow(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get cbCell(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get cCell(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get cRow(): number {
    return this.view.getUint8(3);
  }

  // 0x04: i32
  get dxCellMargin(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get dxIndent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dyHeight(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get _bitfield(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get cpStartRow(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u8
  get bTableLevel(): number {
    return this.view.getUint8(24);
  }

  // 0x19: u8
  get iCell(): number {
    return this.view.getUint8(25);
  }

  // 0x1a: pad6

  // 0x00: u8
  set cbRow(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set cbCell(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set cCell(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set cRow(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: i32
  set dxCellMargin(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set dxIndent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dyHeight(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set _bitfield(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set cpStartRow(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u8
  set bTableLevel(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: u8
  set iCell(value: number) {
    this.view.setUint8(25, value);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.UI.Controls.RichEdit.TABLECELLPARMS (size: 64)
 */
export interface TABLECELLPARMS {
  /** i32 */
  dxWidth: number;
  /** u16 */
  _bitfield: number;
  /** u16 */
  wShading: number;
  /** i16 */
  dxBrdrLeft: number;
  /** i16 */
  dyBrdrTop: number;
  /** i16 */
  dxBrdrRight: number;
  /** i16 */
  dyBrdrBottom: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrLeft: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrTop: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrRight: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrBottom: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBackPat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crForePat: Uint8Array | Deno.PointerValue;
}

export const sizeofTABLECELLPARMS = 64;

export function allocTABLECELLPARMS(data?: Partial<TABLECELLPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTABLECELLPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dxWidth !== undefined) view.setInt32(0, Number(data.dxWidth), true);
  // 0x04: u16
  if (data?._bitfield !== undefined) view.setUint16(4, Number(data._bitfield), true);
  // 0x06: u16
  if (data?.wShading !== undefined) view.setUint16(6, Number(data.wShading), true);
  // 0x08: i16
  if (data?.dxBrdrLeft !== undefined) view.setInt16(8, Number(data.dxBrdrLeft), true);
  // 0x0a: i16
  if (data?.dyBrdrTop !== undefined) view.setInt16(10, Number(data.dyBrdrTop), true);
  // 0x0c: i16
  if (data?.dxBrdrRight !== undefined) view.setInt16(12, Number(data.dxBrdrRight), true);
  // 0x0e: i16
  if (data?.dyBrdrBottom !== undefined) view.setInt16(14, Number(data.dyBrdrBottom), true);
  // 0x10: pointer
  if (data?.crBrdrLeft !== undefined) view.setBigUint64(16, data.crBrdrLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBrdrLeft))), true);
  // 0x18: pointer
  if (data?.crBrdrTop !== undefined) view.setBigUint64(24, data.crBrdrTop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBrdrTop))), true);
  // 0x20: pointer
  if (data?.crBrdrRight !== undefined) view.setBigUint64(32, data.crBrdrRight === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBrdrRight))), true);
  // 0x28: pointer
  if (data?.crBrdrBottom !== undefined) view.setBigUint64(40, data.crBrdrBottom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBrdrBottom))), true);
  // 0x30: pointer
  if (data?.crBackPat !== undefined) view.setBigUint64(48, data.crBackPat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBackPat))), true);
  // 0x38: pointer
  if (data?.crForePat !== undefined) view.setBigUint64(56, data.crForePat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crForePat))), true);
  return buf;
}

export class TABLECELLPARMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dxWidth(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get _bitfield(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wShading(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: i16
  get dxBrdrLeft(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: i16
  get dyBrdrTop(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: i16
  get dxBrdrRight(): number {
    return this.view.getInt16(12, true);
  }

  // 0x0e: i16
  get dyBrdrBottom(): number {
    return this.view.getInt16(14, true);
  }

  // 0x10: pointer
  get crBrdrLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get crBrdrTop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get crBrdrRight(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get crBrdrBottom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get crBackPat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get crForePat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dxWidth(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set _bitfield(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wShading(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: i16
  set dxBrdrLeft(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: i16
  set dyBrdrTop(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: i16
  set dxBrdrRight(value: number) {
    this.view.setInt16(12, value, true);
  }

  // 0x0e: i16
  set dyBrdrBottom(value: number) {
    this.view.setInt16(14, value, true);
  }

  // 0x10: pointer
  set crBrdrLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set crBrdrTop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set crBrdrRight(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set crBrdrBottom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set crBackPat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set crForePat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.RICHEDIT_IMAGE_PARAMETERS (size: 32)
 */
export interface RICHEDIT_IMAGE_PARAMETERS {
  /** i32 */
  xWidth: number;
  /** i32 */
  yHeight: number;
  /** i32 */
  Ascent: number;
  /** Windows.Win32.Graphics.Gdi.TEXT_ALIGN_OPTIONS */
  Type: TEXT_ALIGN_OPTIONS;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAlternateText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.IStream */
  pIStream: Uint8Array | Deno.PointerValue;
}

export const sizeofRICHEDIT_IMAGE_PARAMETERS = 32;

export function allocRICHEDIT_IMAGE_PARAMETERS(data?: Partial<RICHEDIT_IMAGE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRICHEDIT_IMAGE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.xWidth !== undefined) view.setInt32(0, Number(data.xWidth), true);
  // 0x04: i32
  if (data?.yHeight !== undefined) view.setInt32(4, Number(data.yHeight), true);
  // 0x08: i32
  if (data?.Ascent !== undefined) view.setInt32(8, Number(data.Ascent), true);
  // 0x0c: u32
  if (data?.Type !== undefined) view.setUint32(12, Number(data.Type), true);
  // 0x10: buffer
  if (data?.pwszAlternateText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszAlternateText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.pIStream !== undefined) view.setBigUint64(24, data.pIStream === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIStream))), true);
  return buf;
}

export class RICHEDIT_IMAGE_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get xWidth(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get yHeight(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Ascent(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Type(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pwszAlternateText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pIStream(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set xWidth(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set yHeight(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Ascent(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Type(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pwszAlternateText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set pIStream(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENDCOMPOSITIONNOTIFY (size: 16)
 */
export interface ENDCOMPOSITIONNOTIFY {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.ENDCOMPOSITIONNOTIFY_CODE */
  dwCode: ENDCOMPOSITIONNOTIFY_CODE;
}

export const sizeofENDCOMPOSITIONNOTIFY = 16;

export function allocENDCOMPOSITIONNOTIFY(data?: Partial<ENDCOMPOSITIONNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofENDCOMPOSITIONNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u32
  if (data?.dwCode !== undefined) view.setUint32(8, Number(data.dwCode), true);
  // 0x0c: pad4
  return buf;
}

export class ENDCOMPOSITIONNOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMATA (size: 48)
 */
export interface CHARFORMATA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.RichEdit.CFM_MASK */
  dwMask: CFM_MASK;
  /** Windows.Win32.UI.Controls.RichEdit.CFE_EFFECTS */
  dwEffects: CFE_EFFECTS;
  /** i32 */
  yHeight: number;
  /** i32 */
  yOffset: number;
  /** Windows.Win32.Foundation.COLORREF */
  crTextColor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */
  bCharSet: EMBED_FONT_CHARSET;
  /** u8 */
  bPitchAndFamily: number;
  /** array */
  szFaceName: Deno.PointerValue;
}

export const sizeofCHARFORMATA = 48;

export function allocCHARFORMATA(data?: Partial<CHARFORMATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwEffects !== undefined) view.setUint32(8, Number(data.dwEffects), true);
  // 0x0c: i32
  if (data?.yHeight !== undefined) view.setInt32(12, Number(data.yHeight), true);
  // 0x10: i32
  if (data?.yOffset !== undefined) view.setInt32(16, Number(data.yOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.crTextColor !== undefined) view.setBigUint64(24, data.crTextColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crTextColor))), true);
  // 0x20: u32
  if (data?.bCharSet !== undefined) view.setUint32(32, Number(data.bCharSet), true);
  // 0x24: u8
  if (data?.bPitchAndFamily !== undefined) view.setUint8(36, Number(data.bPitchAndFamily));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.szFaceName !== undefined) view.setBigUint64(40, data.szFaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szFaceName))), true);
  return buf;
}

export class CHARFORMATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwEffects(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get yHeight(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get yOffset(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get crTextColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get bCharSet(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get bPitchAndFamily(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x28: pointer
  get szFaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwEffects(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set yHeight(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set yOffset(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set crTextColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set bCharSet(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set bPitchAndFamily(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3

  // 0x28: pointer
  set szFaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMATW (size: 48)
 */
export interface CHARFORMATW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.RichEdit.CFM_MASK */
  dwMask: CFM_MASK;
  /** Windows.Win32.UI.Controls.RichEdit.CFE_EFFECTS */
  dwEffects: CFE_EFFECTS;
  /** i32 */
  yHeight: number;
  /** i32 */
  yOffset: number;
  /** Windows.Win32.Foundation.COLORREF */
  crTextColor: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */
  bCharSet: EMBED_FONT_CHARSET;
  /** u8 */
  bPitchAndFamily: number;
  /** array */
  szFaceName: Deno.PointerValue;
}

export const sizeofCHARFORMATW = 48;

export function allocCHARFORMATW(data?: Partial<CHARFORMATW>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMATW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwEffects !== undefined) view.setUint32(8, Number(data.dwEffects), true);
  // 0x0c: i32
  if (data?.yHeight !== undefined) view.setInt32(12, Number(data.yHeight), true);
  // 0x10: i32
  if (data?.yOffset !== undefined) view.setInt32(16, Number(data.yOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.crTextColor !== undefined) view.setBigUint64(24, data.crTextColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crTextColor))), true);
  // 0x20: u32
  if (data?.bCharSet !== undefined) view.setUint32(32, Number(data.bCharSet), true);
  // 0x24: u8
  if (data?.bPitchAndFamily !== undefined) view.setUint8(36, Number(data.bPitchAndFamily));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.szFaceName !== undefined) view.setBigUint64(40, data.szFaceName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szFaceName))), true);
  return buf;
}

export class CHARFORMATWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwEffects(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get yHeight(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get yOffset(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get crTextColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get bCharSet(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u8
  get bPitchAndFamily(): number {
    return this.view.getUint8(36);
  }

  // 0x25: pad3

  // 0x28: pointer
  get szFaceName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwEffects(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set yHeight(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set yOffset(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set crTextColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set bCharSet(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u8
  set bPitchAndFamily(value: number) {
    this.view.setUint8(36, value);
  }

  // 0x25: pad3

  // 0x28: pointer
  set szFaceName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMAT2W (size: 48)
 */
export interface CHARFORMAT2W {
  /** Windows.Win32.UI.Controls.RichEdit.CHARFORMATW */
  Base: Uint8Array | Deno.PointerValue;
  /** u16 */
  wWeight: number;
  /** i16 */
  sSpacing: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBackColor: Uint8Array | Deno.PointerValue;
  /** u32 */
  lcid: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** i16 */
  sStyle: number;
  /** u16 */
  wKerning: number;
  /** u8 */
  bUnderlineType: number;
  /** u8 */
  bAnimation: number;
  /** u8 */
  bRevAuthor: number;
  /** u8 */
  bUnderlineColor: number;
}

export const sizeofCHARFORMAT2W = 48;

export function allocCHARFORMAT2W(data?: Partial<CHARFORMAT2W>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMAT2W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: u16
  if (data?.wWeight !== undefined) view.setUint16(8, Number(data.wWeight), true);
  // 0x0a: i16
  if (data?.sSpacing !== undefined) view.setInt16(10, Number(data.sSpacing), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.crBackColor !== undefined) view.setBigUint64(16, data.crBackColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBackColor))), true);
  // 0x18: u32
  if (data?.lcid !== undefined) view.setUint32(24, Number(data.lcid), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x28: i16
  if (data?.sStyle !== undefined) view.setInt16(40, Number(data.sStyle), true);
  // 0x2a: u16
  if (data?.wKerning !== undefined) view.setUint16(42, Number(data.wKerning), true);
  // 0x2c: u8
  if (data?.bUnderlineType !== undefined) view.setUint8(44, Number(data.bUnderlineType));
  // 0x2d: u8
  if (data?.bAnimation !== undefined) view.setUint8(45, Number(data.bAnimation));
  // 0x2e: u8
  if (data?.bRevAuthor !== undefined) view.setUint8(46, Number(data.bRevAuthor));
  // 0x2f: u8
  if (data?.bUnderlineColor !== undefined) view.setUint8(47, Number(data.bUnderlineColor));
  return buf;
}

export class CHARFORMAT2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wWeight(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: i16
  get sSpacing(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get crBackColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get lcid(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i16
  get sStyle(): number {
    return this.view.getInt16(40, true);
  }

  // 0x2a: u16
  get wKerning(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u8
  get bUnderlineType(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get bAnimation(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get bRevAuthor(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get bUnderlineColor(): number {
    return this.view.getUint8(47);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wWeight(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: i16
  set sSpacing(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set crBackColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set lcid(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i16
  set sStyle(value: number) {
    this.view.setInt16(40, value, true);
  }

  // 0x2a: u16
  set wKerning(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u8
  set bUnderlineType(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set bAnimation(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set bRevAuthor(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set bUnderlineColor(value: number) {
    this.view.setUint8(47, value);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMAT2A (size: 48)
 */
export interface CHARFORMAT2A {
  /** Windows.Win32.UI.Controls.RichEdit.CHARFORMATA */
  Base: Uint8Array | Deno.PointerValue;
  /** u16 */
  wWeight: number;
  /** i16 */
  sSpacing: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBackColor: Uint8Array | Deno.PointerValue;
  /** u32 */
  lcid: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** i16 */
  sStyle: number;
  /** u16 */
  wKerning: number;
  /** u8 */
  bUnderlineType: number;
  /** u8 */
  bAnimation: number;
  /** u8 */
  bRevAuthor: number;
  /** u8 */
  bUnderlineColor: number;
}

export const sizeofCHARFORMAT2A = 48;

export function allocCHARFORMAT2A(data?: Partial<CHARFORMAT2A>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMAT2A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: u16
  if (data?.wWeight !== undefined) view.setUint16(8, Number(data.wWeight), true);
  // 0x0a: i16
  if (data?.sSpacing !== undefined) view.setInt16(10, Number(data.sSpacing), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.crBackColor !== undefined) view.setBigUint64(16, data.crBackColor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBackColor))), true);
  // 0x18: u32
  if (data?.lcid !== undefined) view.setUint32(24, Number(data.lcid), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x28: i16
  if (data?.sStyle !== undefined) view.setInt16(40, Number(data.sStyle), true);
  // 0x2a: u16
  if (data?.wKerning !== undefined) view.setUint16(42, Number(data.wKerning), true);
  // 0x2c: u8
  if (data?.bUnderlineType !== undefined) view.setUint8(44, Number(data.bUnderlineType));
  // 0x2d: u8
  if (data?.bAnimation !== undefined) view.setUint8(45, Number(data.bAnimation));
  // 0x2e: u8
  if (data?.bRevAuthor !== undefined) view.setUint8(46, Number(data.bRevAuthor));
  // 0x2f: u8
  if (data?.bUnderlineColor !== undefined) view.setUint8(47, Number(data.bUnderlineColor));
  return buf;
}

export class CHARFORMAT2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wWeight(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: i16
  get sSpacing(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get crBackColor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get lcid(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i16
  get sStyle(): number {
    return this.view.getInt16(40, true);
  }

  // 0x2a: u16
  get wKerning(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u8
  get bUnderlineType(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get bAnimation(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u8
  get bRevAuthor(): number {
    return this.view.getUint8(46);
  }

  // 0x2f: u8
  get bUnderlineColor(): number {
    return this.view.getUint8(47);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wWeight(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: i16
  set sSpacing(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set crBackColor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set lcid(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i16
  set sStyle(value: number) {
    this.view.setInt16(40, value, true);
  }

  // 0x2a: u16
  set wKerning(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u8
  set bUnderlineType(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set bAnimation(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u8
  set bRevAuthor(value: number) {
    this.view.setUint8(46, value);
  }

  // 0x2f: u8
  set bUnderlineColor(value: number) {
    this.view.setUint8(47, value);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARRANGE (size: 8)
 */
export interface CHARRANGE {
  /** i32 */
  cpMin: number;
  /** i32 */
  cpMax: number;
}

export const sizeofCHARRANGE = 8;

export function allocCHARRANGE(data?: Partial<CHARRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cpMin !== undefined) view.setInt32(0, Number(data.cpMin), true);
  // 0x04: i32
  if (data?.cpMax !== undefined) view.setInt32(4, Number(data.cpMax), true);
  return buf;
}

export class CHARRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cpMin(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cpMax(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cpMin(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cpMax(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.TEXTRANGEA (size: 16)
 */
export interface TEXTRANGEA {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null | Uint8Array;
}

export const sizeofTEXTRANGEA = 16;

export function allocTEXTRANGEA(data?: Partial<TEXTRANGEA>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTRANGEA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class TEXTRANGEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpstrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpstrText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.TEXTRANGEW (size: 16)
 */
export interface TEXTRANGEW {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null | Uint8Array | Uint16Array;
}

export const sizeofTEXTRANGEW = 16;

export function allocTEXTRANGEW(data?: Partial<TEXTRANGEW>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTRANGEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class TEXTRANGEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpstrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpstrText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.EDITSTREAM (size: 24)
 */
export interface EDITSTREAM {
  /** usize */
  dwCookie: bigint | number;
  /** u32 */
  dwError: number;
  /** Windows.Win32.UI.Controls.RichEdit.EDITSTREAMCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofEDITSTREAM = 24;

export function allocEDITSTREAM(data?: Partial<EDITSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofEDITSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCookie !== undefined) view.setBigUint64(0, BigInt(data.dwCookie), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(16, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  return buf;
}

export class EDITSTREAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwCookie(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwError(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set dwCookie(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwError(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTA (size: 16)
 */
export interface FINDTEXTA {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null | Uint8Array;
}

export const sizeofFINDTEXTA = 16;

export function allocFINDTEXTA(data?: Partial<FINDTEXTA>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class FINDTEXTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpstrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpstrText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTW (size: 16)
 */
export interface FINDTEXTW {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null | Uint8Array | Uint16Array;
}

export const sizeofFINDTEXTW = 16;

export function allocFINDTEXTW(data?: Partial<FINDTEXTW>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class FINDTEXTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpstrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpstrText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTEXA (size: 24)
 */
export interface FINDTEXTEXA {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null | Uint8Array;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrgText: Uint8Array | Deno.PointerValue;
}

export const sizeofFINDTEXTEXA = 24;

export function allocFINDTEXTEXA(data?: Partial<FINDTEXTEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.chrgText !== undefined) view.setBigUint64(16, data.chrgText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrgText))), true);
  return buf;
}

export class FINDTEXTEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpstrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get chrgText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpstrText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set chrgText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTEXW (size: 24)
 */
export interface FINDTEXTEXW {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrgText: Uint8Array | Deno.PointerValue;
}

export const sizeofFINDTEXTEXW = 24;

export function allocFINDTEXTEXW(data?: Partial<FINDTEXTEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.chrgText !== undefined) view.setBigUint64(16, data.chrgText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrgText))), true);
  return buf;
}

export class FINDTEXTEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpstrText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get chrgText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set lpstrText(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set chrgText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FORMATRANGE (size: 40)
 */
export interface FORMATRANGE {
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdcTarget: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcPage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
}

export const sizeofFORMATRANGE = 40;

export function allocFORMATRANGE(data?: Partial<FORMATRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofFORMATRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdc !== undefined) view.setBigUint64(0, data.hdc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdc))), true);
  // 0x08: pointer
  if (data?.hdcTarget !== undefined) view.setBigUint64(8, data.hdcTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdcTarget))), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  // 0x18: pointer
  if (data?.rcPage !== undefined) view.setBigUint64(24, data.rcPage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcPage))), true);
  // 0x20: pointer
  if (data?.chrg !== undefined) view.setBigUint64(32, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  return buf;
}

export class FORMATRANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hdcTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rcPage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hdcTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rcPage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.PARAFORMAT (size: 48)
 */
export interface PARAFORMAT {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_MASK */
  dwMask: PARAFORMAT_MASK;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_NUMBERING */
  wNumbering: PARAFORMAT_NUMBERING;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** i32 */
  dxStartIndent: number;
  /** i32 */
  dxRightIndent: number;
  /** i32 */
  dxOffset: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_ALIGNMENT */
  wAlignment: PARAFORMAT_ALIGNMENT;
  /** i16 */
  cTabCount: number;
  /** array */
  rgxTabs: Deno.PointerValue;
}

export const sizeofPARAFORMAT = 48;

export function allocPARAFORMAT(data?: Partial<PARAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u16
  if (data?.wNumbering !== undefined) view.setUint16(8, Number(data.wNumbering), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x18: i32
  if (data?.dxStartIndent !== undefined) view.setInt32(24, Number(data.dxStartIndent), true);
  // 0x1c: i32
  if (data?.dxRightIndent !== undefined) view.setInt32(28, Number(data.dxRightIndent), true);
  // 0x20: i32
  if (data?.dxOffset !== undefined) view.setInt32(32, Number(data.dxOffset), true);
  // 0x24: u16
  if (data?.wAlignment !== undefined) view.setUint16(36, Number(data.wAlignment), true);
  // 0x26: i16
  if (data?.cTabCount !== undefined) view.setInt16(38, Number(data.cTabCount), true);
  // 0x28: pointer
  if (data?.rgxTabs !== undefined) view.setBigUint64(40, data.rgxTabs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgxTabs))), true);
  return buf;
}

export class PARAFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wNumbering(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get dxStartIndent(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get dxRightIndent(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get dxOffset(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u16
  get wAlignment(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: i16
  get cTabCount(): number {
    return this.view.getInt16(38, true);
  }

  // 0x28: pointer
  get rgxTabs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMask(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wNumbering(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set dxStartIndent(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set dxRightIndent(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set dxOffset(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u16
  set wAlignment(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: i16
  set cTabCount(value: number) {
    this.view.setInt16(38, value, true);
  }

  // 0x28: pointer
  set rgxTabs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.PARAFORMAT2 (size: 40)
 */
export interface PARAFORMAT2 {
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT */
  Base: Uint8Array | Deno.PointerValue;
  /** i32 */
  dySpaceBefore: number;
  /** i32 */
  dySpaceAfter: number;
  /** i32 */
  dyLineSpacing: number;
  /** i16 */
  sStyle: number;
  /** u8 */
  bLineSpacingRule: number;
  /** u8 */
  bOutlineLevel: number;
  /** u16 */
  wShadingWeight: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_SHADING_STYLE */
  wShadingStyle: PARAFORMAT_SHADING_STYLE;
  /** u16 */
  wNumberingStart: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_NUMBERING_STYLE */
  wNumberingStyle: PARAFORMAT_NUMBERING_STYLE;
  /** u16 */
  wNumberingTab: number;
  /** u16 */
  wBorderSpace: number;
  /** u16 */
  wBorderWidth: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_BORDERS */
  wBorders: PARAFORMAT_BORDERS;
}

export const sizeofPARAFORMAT2 = 40;

export function allocPARAFORMAT2(data?: Partial<PARAFORMAT2>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAFORMAT2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Base))), true);
  // 0x08: i32
  if (data?.dySpaceBefore !== undefined) view.setInt32(8, Number(data.dySpaceBefore), true);
  // 0x0c: i32
  if (data?.dySpaceAfter !== undefined) view.setInt32(12, Number(data.dySpaceAfter), true);
  // 0x10: i32
  if (data?.dyLineSpacing !== undefined) view.setInt32(16, Number(data.dyLineSpacing), true);
  // 0x14: i16
  if (data?.sStyle !== undefined) view.setInt16(20, Number(data.sStyle), true);
  // 0x16: u8
  if (data?.bLineSpacingRule !== undefined) view.setUint8(22, Number(data.bLineSpacingRule));
  // 0x17: u8
  if (data?.bOutlineLevel !== undefined) view.setUint8(23, Number(data.bOutlineLevel));
  // 0x18: u16
  if (data?.wShadingWeight !== undefined) view.setUint16(24, Number(data.wShadingWeight), true);
  // 0x1a: u16
  if (data?.wShadingStyle !== undefined) view.setUint16(26, Number(data.wShadingStyle), true);
  // 0x1c: u16
  if (data?.wNumberingStart !== undefined) view.setUint16(28, Number(data.wNumberingStart), true);
  // 0x1e: u16
  if (data?.wNumberingStyle !== undefined) view.setUint16(30, Number(data.wNumberingStyle), true);
  // 0x20: u16
  if (data?.wNumberingTab !== undefined) view.setUint16(32, Number(data.wNumberingTab), true);
  // 0x22: u16
  if (data?.wBorderSpace !== undefined) view.setUint16(34, Number(data.wBorderSpace), true);
  // 0x24: u16
  if (data?.wBorderWidth !== undefined) view.setUint16(36, Number(data.wBorderWidth), true);
  // 0x26: u16
  if (data?.wBorders !== undefined) view.setUint16(38, Number(data.wBorders), true);
  return buf;
}

export class PARAFORMAT2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dySpaceBefore(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dySpaceAfter(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get dyLineSpacing(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i16
  get sStyle(): number {
    return this.view.getInt16(20, true);
  }

  // 0x16: u8
  get bLineSpacingRule(): number {
    return this.view.getUint8(22);
  }

  // 0x17: u8
  get bOutlineLevel(): number {
    return this.view.getUint8(23);
  }

  // 0x18: u16
  get wShadingWeight(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get wShadingStyle(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get wNumberingStart(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get wNumberingStyle(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: u16
  get wNumberingTab(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: u16
  get wBorderSpace(): number {
    return this.view.getUint16(34, true);
  }

  // 0x24: u16
  get wBorderWidth(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: u16
  get wBorders(): number {
    return this.view.getUint16(38, true);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set dySpaceBefore(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dySpaceAfter(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set dyLineSpacing(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i16
  set sStyle(value: number) {
    this.view.setInt16(20, value, true);
  }

  // 0x16: u8
  set bLineSpacingRule(value: number) {
    this.view.setUint8(22, value);
  }

  // 0x17: u8
  set bOutlineLevel(value: number) {
    this.view.setUint8(23, value);
  }

  // 0x18: u16
  set wShadingWeight(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set wShadingStyle(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set wNumberingStart(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set wNumberingStyle(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: u16
  set wNumberingTab(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: u16
  set wBorderSpace(value: number) {
    this.view.setUint16(34, value, true);
  }

  // 0x24: u16
  set wBorderWidth(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: u16
  set wBorders(value: number) {
    this.view.setUint16(38, value, true);
  }
}

export type WPARAM = bigint | number;

/**
 * Windows.Win32.UI.Controls.RichEdit.MSGFILTER (size: 32)
 */
export interface MSGFILTER {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  msg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofMSGFILTER = 32;

export function allocMSGFILTER(data?: Partial<MSGFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofMSGFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u32
  if (data?.msg !== undefined) view.setUint32(8, Number(data.msg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wParam))), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class MSGFILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get msg(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get wParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set msg(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set wParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.REQRESIZE (size: 16)
 */
export interface REQRESIZE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue;
}

export const sizeofREQRESIZE = 16;

export function allocREQRESIZE(data?: Partial<REQRESIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofREQRESIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rc))), true);
  return buf;
}

export class REQRESIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.SELCHANGE (size: 24)
 */
export interface SELCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE */
  seltyp: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE;
}

export const sizeofSELCHANGE = 24;

export function allocSELCHANGE(data?: Partial<SELCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSELCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: pointer
  if (data?.chrg !== undefined) view.setBigUint64(8, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x10: u16
  if (data?.seltyp !== undefined) view.setUint16(16, Number(data.seltyp), true);
  // 0x12: pad6
  return buf;
}

export class SELCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get seltyp(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set seltyp(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GROUPTYPINGCHANGE (size: 16)
 */
export interface GROUPTYPINGCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  fGroupTyping: boolean;
}

export const sizeofGROUPTYPINGCHANGE = 16;

export function allocGROUPTYPINGCHANGE(data?: Partial<GROUPTYPINGCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUPTYPINGCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: i32
  if (data?.fGroupTyping !== undefined) view.setInt32(8, Number(data.fGroupTyping), true);
  // 0x0c: pad4
  return buf;
}

export class GROUPTYPINGCHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get fGroupTyping(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set fGroupTyping(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CLIPBOARDFORMAT (size: 16)
 */
export interface CLIPBOARDFORMAT {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** u16 */
  cf: number;
}

export const sizeofCLIPBOARDFORMAT = 16;

export function allocCLIPBOARDFORMAT(data?: Partial<CLIPBOARDFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIPBOARDFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u16
  if (data?.cf !== undefined) view.setUint16(8, Number(data.cf), true);
  // 0x0a: pad6
  return buf;
}

export class CLIPBOARDFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get cf(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set cf(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GETCONTEXTMENUEX (size: 32)
 */
export interface GETCONTEXTMENUEX {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
}

export const sizeofGETCONTEXTMENUEX = 32;

export function allocGETCONTEXTMENUEX(data?: Partial<GETCONTEXTMENUEX>): Uint8Array {
  const buf = new Uint8Array(sizeofGETCONTEXTMENUEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pt !== undefined) view.setBigUint64(16, data.pt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pt))), true);
  // 0x18: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(24, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  return buf;
}

export class GETCONTEXTMENUEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENDROPFILES (size: 24)
 */
export interface ENDROPFILES {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hDrop: Uint8Array | Deno.PointerValue;
  /** i32 */
  cp: number;
  /** Windows.Win32.Foundation.BOOL */
  fProtected: boolean;
}

export const sizeofENDROPFILES = 24;

export function allocENDROPFILES(data?: Partial<ENDROPFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofENDROPFILES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: pointer
  if (data?.hDrop !== undefined) view.setBigUint64(8, data.hDrop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDrop))), true);
  // 0x10: i32
  if (data?.cp !== undefined) view.setInt32(16, Number(data.cp), true);
  // 0x14: i32
  if (data?.fProtected !== undefined) view.setInt32(20, Number(data.fProtected), true);
  return buf;
}

export class ENDROPFILESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hDrop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get cp(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get fProtected(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hDrop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set cp(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set fProtected(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENPROTECTED (size: 40)
 */
export interface ENPROTECTED {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  msg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
}

export const sizeofENPROTECTED = 40;

export function allocENPROTECTED(data?: Partial<ENPROTECTED>): Uint8Array {
  const buf = new Uint8Array(sizeofENPROTECTED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u32
  if (data?.msg !== undefined) view.setUint32(8, Number(data.msg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wParam))), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x20: pointer
  if (data?.chrg !== undefined) view.setBigUint64(32, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  return buf;
}

export class ENPROTECTEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get msg(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get wParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set msg(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set wParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENSAVECLIPBOARD (size: 16)
 */
export interface ENSAVECLIPBOARD {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  cObjectCount: number;
  /** i32 */
  cch: number;
}

export const sizeofENSAVECLIPBOARD = 16;

export function allocENSAVECLIPBOARD(data?: Partial<ENSAVECLIPBOARD>): Uint8Array {
  const buf = new Uint8Array(sizeofENSAVECLIPBOARD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: i32
  if (data?.cObjectCount !== undefined) view.setInt32(8, Number(data.cObjectCount), true);
  // 0x0c: i32
  if (data?.cch !== undefined) view.setInt32(12, Number(data.cch), true);
  return buf;
}

export class ENSAVECLIPBOARDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get cObjectCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get cch(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set cObjectCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set cch(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENOLEOPFAILED (size: 24)
 */
export interface ENOLEOPFAILED {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  iob: number;
  /** i32 */
  lOper: number;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
}

export const sizeofENOLEOPFAILED = 24;

export function allocENOLEOPFAILED(data?: Partial<ENOLEOPFAILED>): Uint8Array {
  const buf = new Uint8Array(sizeofENOLEOPFAILED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: i32
  if (data?.iob !== undefined) view.setInt32(8, Number(data.iob), true);
  // 0x0c: i32
  if (data?.lOper !== undefined) view.setInt32(12, Number(data.lOper), true);
  // 0x10: pointer
  if (data?.hr !== undefined) view.setBigUint64(16, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  return buf;
}

export class ENOLEOPFAILEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get iob(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lOper(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set iob(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lOper(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.OBJECTPOSITIONS (size: 24)
 */
export interface OBJECTPOSITIONS {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** i32 */
  cObjectCount: number;
  /** ptr */
  pcpPositions: Deno.PointerValue | Uint8Array;
}

export const sizeofOBJECTPOSITIONS = 24;

export function allocOBJECTPOSITIONS(data?: Partial<OBJECTPOSITIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTPOSITIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: i32
  if (data?.cObjectCount !== undefined) view.setInt32(8, Number(data.cObjectCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pcpPositions !== undefined) view.setBigUint64(16, data.pcpPositions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pcpPositions))), true);
  return buf;
}

export class OBJECTPOSITIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get cObjectCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pcpPositions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set cObjectCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pcpPositions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENLINK (size: 40)
 */
export interface ENLINK {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** u32 */
  msg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
}

export const sizeofENLINK = 40;

export function allocENLINK(data?: Partial<ENLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofENLINK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: u32
  if (data?.msg !== undefined) view.setUint32(8, Number(data.msg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wParam))), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x20: pointer
  if (data?.chrg !== undefined) view.setBigUint64(32, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  return buf;
}

export class ENLINKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get msg(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get wParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set msg(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set wParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENLOWFIRTF (size: 16)
 */
export interface ENLOWFIRTF {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  szControl: string | null | Uint8Array;
}

export const sizeofENLOWFIRTF = 16;

export function allocENLOWFIRTF(data?: Partial<ENLOWFIRTF>): Uint8Array {
  const buf = new Uint8Array(sizeofENLOWFIRTF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: buffer
  if (data?.szControl !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szControl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class ENLOWFIRTFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get szControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set szControl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENCORRECTTEXT (size: 24)
 */
export interface ENCORRECTTEXT {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE */
  seltyp: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE;
}

export const sizeofENCORRECTTEXT = 24;

export function allocENCORRECTTEXT(data?: Partial<ENCORRECTTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofENCORRECTTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nmhdr))), true);
  // 0x08: pointer
  if (data?.chrg !== undefined) view.setBigUint64(8, data.chrg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chrg))), true);
  // 0x10: u16
  if (data?.seltyp !== undefined) view.setUint16(16, Number(data.seltyp), true);
  // 0x12: pad6
  return buf;
}

export class ENCORRECTTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get nmhdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get chrg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get seltyp(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: pointer
  set nmhdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set chrg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set seltyp(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.UI.Controls.RichEdit.PUNCTUATION (size: 16)
 */
export interface PUNCTUATION {
  /** u32 */
  iSize: number;
  /** Windows.Win32.Foundation.PSTR */
  szPunctuation: string | null | Uint8Array;
}

export const sizeofPUNCTUATION = 16;

export function allocPUNCTUATION(data?: Partial<PUNCTUATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPUNCTUATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iSize !== undefined) view.setUint32(0, Number(data.iSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szPunctuation !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szPunctuation);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PUNCTUATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szPunctuation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set iSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szPunctuation(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.COMPCOLOR (size: 24)
 */
export interface COMPCOLOR {
  /** Windows.Win32.Foundation.COLORREF */
  crText: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  crBackground: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwEffects: number;
}

export const sizeofCOMPCOLOR = 24;

export function allocCOMPCOLOR(data?: Partial<COMPCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.crText !== undefined) view.setBigUint64(0, data.crText === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crText))), true);
  // 0x08: pointer
  if (data?.crBackground !== undefined) view.setBigUint64(8, data.crBackground === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.crBackground))), true);
  // 0x10: u32
  if (data?.dwEffects !== undefined) view.setUint32(16, Number(data.dwEffects), true);
  // 0x14: pad4
  return buf;
}

export class COMPCOLORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get crText(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get crBackground(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwEffects(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set crText(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set crBackground(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwEffects(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.RichEdit.REPASTESPECIAL (size: 16)
 */
export interface REPASTESPECIAL {
  /** Windows.Win32.System.Com.DVASPECT */
  dwAspect: DVASPECT;
  /** usize */
  dwParam: bigint | number;
}

export const sizeofREPASTESPECIAL = 16;

export function allocREPASTESPECIAL(data?: Partial<REPASTESPECIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofREPASTESPECIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAspect !== undefined) view.setUint32(0, Number(data.dwAspect), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwParam !== undefined) view.setBigUint64(8, BigInt(data.dwParam), true);
  return buf;
}

export class REPASTESPECIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAspect(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get dwParam(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u32
  set dwAspect(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set dwParam(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.SETTEXTEX (size: 8)
 */
export interface SETTEXTEX {
  /** u32 */
  flags: number;
  /** u32 */
  codepage: number;
}

export const sizeofSETTEXTEX = 8;

export function allocSETTEXTEX(data?: Partial<SETTEXTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofSETTEXTEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.codepage !== undefined) view.setUint32(4, Number(data.codepage), true);
  return buf;
}

export class SETTEXTEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get codepage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set codepage(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GETTEXTEX (size: 32)
 */
export interface GETTEXTEX {
  /** u32 */
  cb: number;
  /** Windows.Win32.UI.Controls.RichEdit.GETTEXTEX_FLAGS */
  flags: GETTEXTEX_FLAGS;
  /** u32 */
  codepage: number;
  /** Windows.Win32.Foundation.PSTR */
  lpDefaultChar: string | null | Uint8Array;
  /** ptr */
  lpUsedDefChar: Deno.PointerValue | Uint8Array;
}

export const sizeofGETTEXTEX = 32;

export function allocGETTEXTEX(data?: Partial<GETTEXTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofGETTEXTEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.flags !== undefined) view.setUint32(4, Number(data.flags), true);
  // 0x08: u32
  if (data?.codepage !== undefined) view.setUint32(8, Number(data.codepage), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpDefaultChar !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpDefaultChar);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.lpUsedDefChar !== undefined) view.setBigUint64(24, data.lpUsedDefChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpUsedDefChar))), true);
  return buf;
}

export class GETTEXTEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get codepage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get lpDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpUsedDefChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set codepage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set lpDefaultChar(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set lpUsedDefChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GETTEXTLENGTHEX (size: 8)
 */
export interface GETTEXTLENGTHEX {
  /** Windows.Win32.UI.Controls.RichEdit.GETTEXTLENGTHEX_FLAGS */
  flags: GETTEXTLENGTHEX_FLAGS;
  /** u32 */
  codepage: number;
}

export const sizeofGETTEXTLENGTHEX = 8;

export function allocGETTEXTLENGTHEX(data?: Partial<GETTEXTLENGTHEX>): Uint8Array {
  const buf = new Uint8Array(sizeofGETTEXTLENGTHEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.codepage !== undefined) view.setUint32(4, Number(data.codepage), true);
  return buf;
}

export class GETTEXTLENGTHEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get codepage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set codepage(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.BIDIOPTIONS (size: 8)
 */
export interface BIDIOPTIONS {
  /** u32 */
  cbSize: number;
  /** u16 */
  wMask: number;
  /** u16 */
  wEffects: number;
}

export const sizeofBIDIOPTIONS = 8;

export function allocBIDIOPTIONS(data?: Partial<BIDIOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDIOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.wMask !== undefined) view.setUint16(4, Number(data.wMask), true);
  // 0x06: u16
  if (data?.wEffects !== undefined) view.setUint16(6, Number(data.wEffects), true);
  return buf;
}

export class BIDIOPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wMask(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wEffects(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wMask(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wEffects(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.HYPHRESULT (size: 16)
 */
export interface HYPHRESULT {
  /** Windows.Win32.UI.Controls.RichEdit.KHYPH */
  khyph: KHYPH;
  /** i32 */
  ichHyph: number;
  /** char */
  chHyph: Uint8Array | Deno.PointerValue;
}

export const sizeofHYPHRESULT = 16;

export function allocHYPHRESULT(data?: Partial<HYPHRESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofHYPHRESULT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.khyph !== undefined) view.setInt32(0, Number(data.khyph), true);
  // 0x04: i32
  if (data?.ichHyph !== undefined) view.setInt32(4, Number(data.ichHyph), true);
  // 0x08: pointer
  if (data?.chHyph !== undefined) view.setBigUint64(8, data.chHyph === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.chHyph))), true);
  return buf;
}

export class HYPHRESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get khyph(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ichHyph(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get chHyph(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set khyph(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ichHyph(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set chHyph(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.HYPHENATEINFO (size: 16)
 */
export interface HYPHENATEINFO {
  /** i16 */
  cbSize: number;
  /** i16 */
  dxHyphenateZone: number;
  /** isize */
  pfnHyphenate: bigint | number;
}

export const sizeofHYPHENATEINFO = 16;

export function allocHYPHENATEINFO(data?: Partial<HYPHENATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHYPHENATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.cbSize !== undefined) view.setInt16(0, Number(data.cbSize), true);
  // 0x02: i16
  if (data?.dxHyphenateZone !== undefined) view.setInt16(2, Number(data.dxHyphenateZone), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.pfnHyphenate !== undefined) view.setBigInt64(8, BigInt(data.pfnHyphenate), true);
  return buf;
}

export class HYPHENATEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get cbSize(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get dxHyphenateZone(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get pfnHyphenate(): bigint | number {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: i16
  set cbSize(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set dxHyphenateZone(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set pfnHyphenate(value: bigint | number) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHANGENOTIFY (size: 16)
 */
export interface CHANGENOTIFY {
  /** Windows.Win32.UI.Controls.RichEdit.CHANGETYPE */
  dwChangeType: CHANGETYPE;
  /** ptr */
  pvCookieData: Deno.PointerValue | Uint8Array;
}

export const sizeofCHANGENOTIFY = 16;

export function allocCHANGENOTIFY(data?: Partial<CHANGENOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGENOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwChangeType !== undefined) view.setInt32(0, Number(data.dwChangeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvCookieData !== undefined) view.setBigUint64(8, data.pvCookieData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvCookieData))), true);
  return buf;
}

export class CHANGENOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwChangeType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvCookieData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dwChangeType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvCookieData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CARET_INFO (size: 16)
 */
export interface CARET_INFO {
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbitmap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.RichEdit.CARET_FLAGS */
  caretFlags: CARET_FLAGS;
}

export const sizeofCARET_INFO = 16;

export function allocCARET_INFO(data?: Partial<CARET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCARET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hbitmap !== undefined) view.setBigUint64(0, data.hbitmap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hbitmap))), true);
  // 0x08: i32
  if (data?.caretFlags !== undefined) view.setInt32(8, Number(data.caretFlags), true);
  // 0x0c: pad4
  return buf;
}

export class CARET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hbitmap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get caretFlags(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set hbitmap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set caretFlags(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Controls.RichEdit.REOBJECT (size: 64)
 */
export interface REOBJECT {
  /** u32 */
  cbStruct: number;
  /** i32 */
  cp: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Ole.IOleObject */
  poleobj: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Com.StructuredStorage.IStorage */
  pstg: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Ole.IOleClientSite */
  polesite: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue;
  /** u32 */
  dvaspect: number;
  /** Windows.Win32.UI.Controls.RichEdit.REOBJECT_FLAGS */
  dwFlags: REOBJECT_FLAGS;
  /** u32 */
  dwUser: number;
}

export const sizeofREOBJECT = 64;

export function allocREOBJECT(data?: Partial<REOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofREOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.cp !== undefined) view.setInt32(4, Number(data.cp), true);
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsid))), true);
  // 0x10: pointer
  if (data?.poleobj !== undefined) view.setBigUint64(16, data.poleobj === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.poleobj))), true);
  // 0x18: pointer
  if (data?.pstg !== undefined) view.setBigUint64(24, data.pstg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pstg))), true);
  // 0x20: pointer
  if (data?.polesite !== undefined) view.setBigUint64(32, data.polesite === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.polesite))), true);
  // 0x28: pointer
  if (data?.sizel !== undefined) view.setBigUint64(40, data.sizel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sizel))), true);
  // 0x30: u32
  if (data?.dvaspect !== undefined) view.setUint32(48, Number(data.dvaspect), true);
  // 0x34: u32
  if (data?.dwFlags !== undefined) view.setUint32(52, Number(data.dwFlags), true);
  // 0x38: u32
  if (data?.dwUser !== undefined) view.setUint32(56, Number(data.dwUser), true);
  // 0x3c: pad4
  return buf;
}

export class REOBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get cp(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get poleobj(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pstg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get polesite(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get sizel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dvaspect(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwUser(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set cp(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set poleobj(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pstg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set polesite(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set sizel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dvaspect(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwUser(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.UI.Controls.MEASUREITEMSTRUCT (size: 32)
 */
export interface MEASUREITEMSTRUCT {
  /** Windows.Win32.UI.Controls.DRAWITEMSTRUCT_CTL_TYPE */
  CtlType: DRAWITEMSTRUCT_CTL_TYPE;
  /** u32 */
  CtlID: number;
  /** u32 */
  itemID: number;
  /** u32 */
  itemWidth: number;
  /** u32 */
  itemHeight: number;
  /** usize */
  itemData: bigint | number;
}

export const sizeofMEASUREITEMSTRUCT = 32;

export function allocMEASUREITEMSTRUCT(data?: Partial<MEASUREITEMSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofMEASUREITEMSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CtlType !== undefined) view.setUint32(0, Number(data.CtlType), true);
  // 0x04: u32
  if (data?.CtlID !== undefined) view.setUint32(4, Number(data.CtlID), true);
  // 0x08: u32
  if (data?.itemID !== undefined) view.setUint32(8, Number(data.itemID), true);
  // 0x0c: u32
  if (data?.itemWidth !== undefined) view.setUint32(12, Number(data.itemWidth), true);
  // 0x10: u32
  if (data?.itemHeight !== undefined) view.setUint32(16, Number(data.itemHeight), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.itemData !== undefined) view.setBigUint64(24, BigInt(data.itemData), true);
  return buf;
}

export class MEASUREITEMSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CtlType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CtlID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get itemID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get itemWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get itemHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get itemData(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u32
  set CtlType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CtlID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set itemID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set itemWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set itemHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set itemData(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.DRAWITEMSTRUCT (size: 56)
 */
export interface DRAWITEMSTRUCT {
  /** Windows.Win32.UI.Controls.DRAWITEMSTRUCT_CTL_TYPE */
  CtlType: DRAWITEMSTRUCT_CTL_TYPE;
  /** u32 */
  CtlID: number;
  /** u32 */
  itemID: number;
  /** Windows.Win32.UI.Controls.ODA_FLAGS */
  itemAction: ODA_FLAGS;
  /** Windows.Win32.UI.Controls.ODS_FLAGS */
  itemState: ODS_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hwndItem: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcItem: Uint8Array | Deno.PointerValue;
  /** usize */
  itemData: bigint | number;
}

export const sizeofDRAWITEMSTRUCT = 56;

export function allocDRAWITEMSTRUCT(data?: Partial<DRAWITEMSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofDRAWITEMSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CtlType !== undefined) view.setUint32(0, Number(data.CtlType), true);
  // 0x04: u32
  if (data?.CtlID !== undefined) view.setUint32(4, Number(data.CtlID), true);
  // 0x08: u32
  if (data?.itemID !== undefined) view.setUint32(8, Number(data.itemID), true);
  // 0x0c: u32
  if (data?.itemAction !== undefined) view.setUint32(12, Number(data.itemAction), true);
  // 0x10: u32
  if (data?.itemState !== undefined) view.setUint32(16, Number(data.itemState), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hwndItem !== undefined) view.setBigUint64(24, data.hwndItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndItem))), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: pointer
  if (data?.rcItem !== undefined) view.setBigUint64(40, data.rcItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcItem))), true);
  // 0x30: usize
  if (data?.itemData !== undefined) view.setBigUint64(48, BigInt(data.itemData), true);
  return buf;
}

export class DRAWITEMSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CtlType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CtlID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get itemID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get itemAction(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get itemState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hwndItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get rcItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get itemData(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x00: u32
  set CtlType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CtlID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set itemID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set itemAction(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set itemState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hwndItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set rcItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set itemData(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.DELETEITEMSTRUCT (size: 32)
 */
export interface DELETEITEMSTRUCT {
  /** Windows.Win32.UI.Controls.DRAWITEMSTRUCT_CTL_TYPE */
  CtlType: DRAWITEMSTRUCT_CTL_TYPE;
  /** u32 */
  CtlID: number;
  /** u32 */
  itemID: number;
  /** Windows.Win32.Foundation.HWND */
  hwndItem: Deno.PointerValue;
  /** usize */
  itemData: bigint | number;
}

export const sizeofDELETEITEMSTRUCT = 32;

export function allocDELETEITEMSTRUCT(data?: Partial<DELETEITEMSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofDELETEITEMSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CtlType !== undefined) view.setUint32(0, Number(data.CtlType), true);
  // 0x04: u32
  if (data?.CtlID !== undefined) view.setUint32(4, Number(data.CtlID), true);
  // 0x08: u32
  if (data?.itemID !== undefined) view.setUint32(8, Number(data.itemID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hwndItem !== undefined) view.setBigUint64(16, data.hwndItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndItem))), true);
  // 0x18: usize
  if (data?.itemData !== undefined) view.setBigUint64(24, BigInt(data.itemData), true);
  return buf;
}

export class DELETEITEMSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CtlType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CtlID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get itemID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hwndItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get itemData(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u32
  set CtlType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CtlID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set itemID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hwndItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set itemData(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.COMPAREITEMSTRUCT (size: 56)
 */
export interface COMPAREITEMSTRUCT {
  /** Windows.Win32.UI.Controls.DRAWITEMSTRUCT_CTL_TYPE */
  CtlType: DRAWITEMSTRUCT_CTL_TYPE;
  /** u32 */
  CtlID: number;
  /** Windows.Win32.Foundation.HWND */
  hwndItem: Deno.PointerValue;
  /** u32 */
  itemID1: number;
  /** usize */
  itemData1: bigint | number;
  /** u32 */
  itemID2: number;
  /** usize */
  itemData2: bigint | number;
  /** u32 */
  dwLocaleId: number;
}

export const sizeofCOMPAREITEMSTRUCT = 56;

export function allocCOMPAREITEMSTRUCT(data?: Partial<COMPAREITEMSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPAREITEMSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CtlType !== undefined) view.setUint32(0, Number(data.CtlType), true);
  // 0x04: u32
  if (data?.CtlID !== undefined) view.setUint32(4, Number(data.CtlID), true);
  // 0x08: pointer
  if (data?.hwndItem !== undefined) view.setBigUint64(8, data.hwndItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndItem))), true);
  // 0x10: u32
  if (data?.itemID1 !== undefined) view.setUint32(16, Number(data.itemID1), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.itemData1 !== undefined) view.setBigUint64(24, BigInt(data.itemData1), true);
  // 0x20: u32
  if (data?.itemID2 !== undefined) view.setUint32(32, Number(data.itemID2), true);
  // 0x24: pad4
  // 0x28: usize
  if (data?.itemData2 !== undefined) view.setBigUint64(40, BigInt(data.itemData2), true);
  // 0x30: u32
  if (data?.dwLocaleId !== undefined) view.setUint32(48, Number(data.dwLocaleId), true);
  // 0x34: pad4
  return buf;
}

export class COMPAREITEMSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CtlType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CtlID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get itemID1(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get itemData1(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get itemID2(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: usize
  get itemData2(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get dwLocaleId(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set CtlType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CtlID(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set itemID1(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set itemData1(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set itemID2(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: usize
  set itemData2(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set dwLocaleId(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.UI.Controls.USAGE_PROPERTIES (size: 32)
 */
export interface USAGE_PROPERTIES {
  /** u16 */
  level: number;
  /** u16 */
  page: number;
  /** u16 */
  usage: number;
  /** i32 */
  logicalMinimum: number;
  /** i32 */
  logicalMaximum: number;
  /** u16 */
  unit: number;
  /** u16 */
  exponent: number;
  /** u8 */
  count: number;
  /** i32 */
  physicalMinimum: number;
  /** i32 */
  physicalMaximum: number;
}

export const sizeofUSAGE_PROPERTIES = 32;

export function allocUSAGE_PROPERTIES(data?: Partial<USAGE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofUSAGE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.level !== undefined) view.setUint16(0, Number(data.level), true);
  // 0x02: u16
  if (data?.page !== undefined) view.setUint16(2, Number(data.page), true);
  // 0x04: u16
  if (data?.usage !== undefined) view.setUint16(4, Number(data.usage), true);
  // 0x06: i32
  if (data?.logicalMinimum !== undefined) view.setInt32(6, Number(data.logicalMinimum), true);
  // 0x0a: i32
  if (data?.logicalMaximum !== undefined) view.setInt32(10, Number(data.logicalMaximum), true);
  // 0x0e: u16
  if (data?.unit !== undefined) view.setUint16(14, Number(data.unit), true);
  // 0x10: u16
  if (data?.exponent !== undefined) view.setUint16(16, Number(data.exponent), true);
  // 0x12: u8
  if (data?.count !== undefined) view.setUint8(18, Number(data.count));
  // 0x13: i32
  if (data?.physicalMinimum !== undefined) view.setInt32(19, Number(data.physicalMinimum), true);
  // 0x17: i32
  if (data?.physicalMaximum !== undefined) view.setInt32(23, Number(data.physicalMaximum), true);
  // 0x1b: pad5
  return buf;
}

export class USAGE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get level(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get page(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get usage(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: i32
  get logicalMinimum(): number {
    return this.view.getInt32(6, true);
  }

  // 0x0a: i32
  get logicalMaximum(): number {
    return this.view.getInt32(10, true);
  }

  // 0x0e: u16
  get unit(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get exponent(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u8
  get count(): number {
    return this.view.getUint8(18);
  }

  // 0x13: i32
  get physicalMinimum(): number {
    return this.view.getInt32(19, true);
  }

  // 0x17: i32
  get physicalMaximum(): number {
    return this.view.getInt32(23, true);
  }

  // 0x1b: pad5

  // 0x00: u16
  set level(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set page(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set usage(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: i32
  set logicalMinimum(value: number) {
    this.view.setInt32(6, value, true);
  }

  // 0x0a: i32
  set logicalMaximum(value: number) {
    this.view.setInt32(10, value, true);
  }

  // 0x0e: u16
  set unit(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set exponent(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u8
  set count(value: number) {
    this.view.setUint8(18, value);
  }

  // 0x13: i32
  set physicalMinimum(value: number) {
    this.view.setInt32(19, value, true);
  }

  // 0x17: i32
  set physicalMaximum(value: number) {
    this.view.setInt32(23, value, true);
  }

  // 0x1b: pad5
}

/**
 * Windows.Win32.UI.Controls.POINTER_TYPE_INFO (size: 16)
 */
export interface POINTER_TYPE_INFO {
  /** Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */
  type: POINTER_INPUT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPOINTER_TYPE_INFO = 16;

export function allocPOINTER_TYPE_INFO(data?: Partial<POINTER_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class POINTER_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TOUCH_HIT_TESTING_PROXIMITY_EVALUATION (size: 16)
 */
export interface TOUCH_HIT_TESTING_PROXIMITY_EVALUATION {
  /** u16 */
  score: number;
  /** Windows.Win32.Foundation.POINT */
  adjustedPoint: Uint8Array | Deno.PointerValue;
}

export const sizeofTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = 16;

export function allocTOUCH_HIT_TESTING_PROXIMITY_EVALUATION(data?: Partial<TOUCH_HIT_TESTING_PROXIMITY_EVALUATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTOUCH_HIT_TESTING_PROXIMITY_EVALUATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.score !== undefined) view.setUint16(0, Number(data.score), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.adjustedPoint !== undefined) view.setBigUint64(8, data.adjustedPoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adjustedPoint))), true);
  return buf;
}

export class TOUCH_HIT_TESTING_PROXIMITY_EVALUATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get score(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get adjustedPoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set score(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set adjustedPoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.TOUCH_HIT_TESTING_INPUT (size: 40)
 */
export interface TOUCH_HIT_TESTING_INPUT {
  /** u32 */
  pointerId: number;
  /** Windows.Win32.Foundation.POINT */
  point: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  boundingBox: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  nonOccludedBoundingBox: Uint8Array | Deno.PointerValue;
  /** u32 */
  orientation: number;
}

export const sizeofTOUCH_HIT_TESTING_INPUT = 40;

export function allocTOUCH_HIT_TESTING_INPUT(data?: Partial<TOUCH_HIT_TESTING_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofTOUCH_HIT_TESTING_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.pointerId !== undefined) view.setUint32(0, Number(data.pointerId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.point !== undefined) view.setBigUint64(8, data.point === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.point))), true);
  // 0x10: pointer
  if (data?.boundingBox !== undefined) view.setBigUint64(16, data.boundingBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.boundingBox))), true);
  // 0x18: pointer
  if (data?.nonOccludedBoundingBox !== undefined) view.setBigUint64(24, data.nonOccludedBoundingBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.nonOccludedBoundingBox))), true);
  // 0x20: u32
  if (data?.orientation !== undefined) view.setUint32(32, Number(data.orientation), true);
  // 0x24: pad4
  return buf;
}

export class TOUCH_HIT_TESTING_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get pointerId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get point(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get boundingBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get nonOccludedBoundingBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get orientation(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set pointerId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set point(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set boundingBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set nonOccludedBoundingBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set orientation(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.UI.Controls.COMBOBOXINFO (size: 56)
 */
export interface COMBOBOXINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.RECT */
  rcItem: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcButton: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.COMBOBOXINFO_BUTTON_STATE */
  stateButton: COMBOBOXINFO_BUTTON_STATE;
  /** Windows.Win32.Foundation.HWND */
  hwndCombo: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndItem: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndList: Deno.PointerValue;
}

export const sizeofCOMBOBOXINFO = 56;

export function allocCOMBOBOXINFO(data?: Partial<COMBOBOXINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMBOBOXINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rcItem !== undefined) view.setBigUint64(8, data.rcItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcItem))), true);
  // 0x10: pointer
  if (data?.rcButton !== undefined) view.setBigUint64(16, data.rcButton === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcButton))), true);
  // 0x18: u32
  if (data?.stateButton !== undefined) view.setUint32(24, Number(data.stateButton), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hwndCombo !== undefined) view.setBigUint64(32, data.hwndCombo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndCombo))), true);
  // 0x28: pointer
  if (data?.hwndItem !== undefined) view.setBigUint64(40, data.hwndItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndItem))), true);
  // 0x30: pointer
  if (data?.hwndList !== undefined) view.setBigUint64(48, data.hwndList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndList))), true);
  return buf;
}

export class COMBOBOXINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rcItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rcButton(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get stateButton(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get hwndCombo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get hwndItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get hwndList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rcItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rcButton(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set stateButton(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set hwndCombo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set hwndItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set hwndList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HMONITOR = bigint | number;

/**
 * Windows.Win32.UI.Controls.POINTER_DEVICE_INFO (size: 48)
 */
export interface POINTER_DEVICE_INFO {
  /** u32 */
  displayOrientation: number;
  /** Windows.Win32.Foundation.HANDLE */
  device: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.POINTER_DEVICE_TYPE */
  pointerDeviceType: POINTER_DEVICE_TYPE;
  /** Windows.Win32.Graphics.Gdi.HMONITOR */
  monitor: Uint8Array | Deno.PointerValue;
  /** u32 */
  startingCursorId: number;
  /** u16 */
  maxActiveContacts: number;
  /** array */
  productString: Deno.PointerValue;
}

export const sizeofPOINTER_DEVICE_INFO = 48;

export function allocPOINTER_DEVICE_INFO(data?: Partial<POINTER_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.displayOrientation !== undefined) view.setUint32(0, Number(data.displayOrientation), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.device !== undefined) view.setBigUint64(8, data.device === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.device))), true);
  // 0x10: i32
  if (data?.pointerDeviceType !== undefined) view.setInt32(16, Number(data.pointerDeviceType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.monitor !== undefined) view.setBigUint64(24, data.monitor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.monitor))), true);
  // 0x20: u32
  if (data?.startingCursorId !== undefined) view.setUint32(32, Number(data.startingCursorId), true);
  // 0x24: u16
  if (data?.maxActiveContacts !== undefined) view.setUint16(36, Number(data.maxActiveContacts), true);
  // 0x26: pad2
  // 0x28: pointer
  if (data?.productString !== undefined) view.setBigUint64(40, data.productString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.productString))), true);
  return buf;
}

export class POINTER_DEVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get displayOrientation(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get device(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get pointerDeviceType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get monitor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get startingCursorId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get maxActiveContacts(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  get productString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set displayOrientation(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set device(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set pointerDeviceType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set monitor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set startingCursorId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set maxActiveContacts(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  set productString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.POINTER_DEVICE_PROPERTY (size: 32)
 */
export interface POINTER_DEVICE_PROPERTY {
  /** i32 */
  logicalMin: number;
  /** i32 */
  logicalMax: number;
  /** i32 */
  physicalMin: number;
  /** i32 */
  physicalMax: number;
  /** u32 */
  unit: number;
  /** u32 */
  unitExponent: number;
  /** u16 */
  usagePageId: number;
  /** u16 */
  usageId: number;
}

export const sizeofPOINTER_DEVICE_PROPERTY = 32;

export function allocPOINTER_DEVICE_PROPERTY(data?: Partial<POINTER_DEVICE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_DEVICE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.logicalMin !== undefined) view.setInt32(0, Number(data.logicalMin), true);
  // 0x04: i32
  if (data?.logicalMax !== undefined) view.setInt32(4, Number(data.logicalMax), true);
  // 0x08: i32
  if (data?.physicalMin !== undefined) view.setInt32(8, Number(data.physicalMin), true);
  // 0x0c: i32
  if (data?.physicalMax !== undefined) view.setInt32(12, Number(data.physicalMax), true);
  // 0x10: u32
  if (data?.unit !== undefined) view.setUint32(16, Number(data.unit), true);
  // 0x14: u32
  if (data?.unitExponent !== undefined) view.setUint32(20, Number(data.unitExponent), true);
  // 0x18: u16
  if (data?.usagePageId !== undefined) view.setUint16(24, Number(data.usagePageId), true);
  // 0x1a: u16
  if (data?.usageId !== undefined) view.setUint16(26, Number(data.usageId), true);
  // 0x1c: pad4
  return buf;
}

export class POINTER_DEVICE_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get logicalMin(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get logicalMax(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get physicalMin(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get physicalMax(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get unit(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get unitExponent(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u16
  get usagePageId(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get usageId(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set logicalMin(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set logicalMax(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set physicalMin(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set physicalMax(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set unit(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set unitExponent(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u16
  set usagePageId(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set usageId(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.UI.Controls.POINTER_DEVICE_CURSOR_INFO (size: 8)
 */
export interface POINTER_DEVICE_CURSOR_INFO {
  /** u32 */
  cursorId: number;
  /** Windows.Win32.UI.Controls.POINTER_DEVICE_CURSOR_TYPE */
  cursor: POINTER_DEVICE_CURSOR_TYPE;
}

export const sizeofPOINTER_DEVICE_CURSOR_INFO = 8;

export function allocPOINTER_DEVICE_CURSOR_INFO(data?: Partial<POINTER_DEVICE_CURSOR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_DEVICE_CURSOR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cursorId !== undefined) view.setUint32(0, Number(data.cursorId), true);
  // 0x04: i32
  if (data?.cursor !== undefined) view.setInt32(4, Number(data.cursor), true);
  return buf;
}

export class POINTER_DEVICE_CURSOR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cursorId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get cursor(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set cursorId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set cursor(value: number) {
    this.view.setInt32(4, value, true);
  }
}

export type HICON = bigint | number;

export type HMENU = bigint | number;

export type HRGN = bigint | number;

export type LRESULT = bigint | number;

// Native Libraries

try {
  var libCOMCTL32_dll = Deno.dlopen("COMCTL32.dll", {
    CreatePropertySheetPageA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreatePropertySheetPageW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DestroyPropertySheetPage: {
      parameters: ["pointer"],
      result: "i32",
    },
    PropertySheetA: {
      parameters: ["pointer"],
      result: "isize",
    },
    PropertySheetW: {
      parameters: ["pointer"],
      result: "isize",
    },
    InitCommonControls: {
      parameters: [],
      result: "void",
    },
    InitCommonControlsEx: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImageList_Create: {
      parameters: ["i32", "i32", "u32", "i32", "i32"],
      result: "pointer",
    },
    ImageList_Destroy: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImageList_GetImageCount: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImageList_SetImageCount: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    ImageList_Add: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImageList_ReplaceIcon: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ImageList_SetBkColor: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ImageList_GetBkColor: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImageList_SetOverlayImage: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    ImageList_Draw: {
      parameters: ["pointer", "i32", "pointer", "i32", "i32", "u32"],
      result: "i32",
    },
    ImageList_Replace: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    ImageList_AddMasked: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImageList_DrawEx: {
      parameters: ["pointer", "i32", "pointer", "i32", "i32", "i32", "i32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    ImageList_DrawIndirect: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImageList_Remove: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ImageList_GetIcon: {
      parameters: ["pointer", "i32", "u32"],
      result: "pointer",
    },
    ImageList_LoadImageA: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    ImageList_LoadImageW: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    ImageList_Copy: {
      parameters: ["pointer", "i32", "pointer", "i32", "u32"],
      result: "i32",
    },
    ImageList_BeginDrag: {
      parameters: ["pointer", "i32", "i32", "i32"],
      result: "i32",
    },
    ImageList_EndDrag: {
      parameters: [],
      result: "void",
    },
    ImageList_DragEnter: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    ImageList_DragLeave: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImageList_DragMove: {
      parameters: ["i32", "i32"],
      result: "i32",
    },
    ImageList_SetDragCursorImage: {
      parameters: ["pointer", "i32", "i32", "i32"],
      result: "i32",
    },
    ImageList_DragShowNolock: {
      parameters: ["i32"],
      result: "i32",
    },
    ImageList_GetDragImage: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ImageList_Read: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImageList_Write: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImageList_ReadEx: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ImageList_WriteEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ImageList_GetIconSize: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImageList_SetIconSize: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    ImageList_GetImageInfo: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ImageList_Merge: {
      parameters: ["pointer", "i32", "pointer", "i32", "i32", "i32"],
      result: "pointer",
    },
    ImageList_Duplicate: {
      parameters: ["pointer"],
      result: "pointer",
    },
    HIMAGELIST_QueryInterface: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateToolbarEx: {
      parameters: ["pointer", "u32", "u32", "i32", "pointer", "usize", "pointer", "i32", "i32", "i32", "i32", "i32", "u32"],
      result: "pointer",
    },
    CreateMappedBitmap: {
      parameters: ["pointer", "isize", "u32", "pointer", "i32"],
      result: "pointer",
    },
    DrawStatusTextA: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "void",
    },
    DrawStatusTextW: {
      parameters: ["pointer", "pointer", "buffer", "u32"],
      result: "void",
    },
    CreateStatusWindowA: {
      parameters: ["i32", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    CreateStatusWindowW: {
      parameters: ["i32", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    MenuHelp: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    ShowHideMenuCtl: {
      parameters: ["pointer", "usize", "pointer"],
      result: "i32",
    },
    GetEffectiveClientRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    MakeDragList: {
      parameters: ["pointer"],
      result: "i32",
    },
    DrawInsert: {
      parameters: ["pointer", "pointer", "i32"],
      result: "void",
    },
    LBItemFromPt: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    CreateUpDownControl: {
      parameters: ["u32", "i32", "i32", "i32", "i32", "pointer", "i32", "pointer", "pointer", "i32", "i32", "i32"],
      result: "pointer",
    },
    TaskDialogIndirect: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    TaskDialog: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "i32", "buffer", "pointer"],
      result: "pointer",
    },
    InitMUILanguage: {
      parameters: ["u16"],
      result: "void",
    },
    GetMUILanguage: {
      parameters: [],
      result: "u16",
    },
    DSA_Create: {
      parameters: ["i32", "i32"],
      result: "pointer",
    },
    DSA_Destroy: {
      parameters: ["pointer"],
      result: "i32",
    },
    DSA_DestroyCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    DSA_DeleteItem: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    DSA_DeleteAllItems: {
      parameters: ["pointer"],
      result: "i32",
    },
    DSA_EnumCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    DSA_InsertItem: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    DSA_GetItemPtr: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    DSA_GetItem: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    DSA_SetItem: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    DSA_Clone: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DSA_GetSize: {
      parameters: ["pointer"],
      result: "u64",
    },
    DSA_Sort: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DPA_Create: {
      parameters: ["i32"],
      result: "pointer",
    },
    DPA_CreateEx: {
      parameters: ["i32", "pointer"],
      result: "pointer",
    },
    DPA_Clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DPA_Destroy: {
      parameters: ["pointer"],
      result: "i32",
    },
    DPA_DestroyCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    DPA_DeletePtr: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    DPA_DeleteAllPtrs: {
      parameters: ["pointer"],
      result: "i32",
    },
    DPA_EnumCallback: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    DPA_Grow: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    DPA_InsertPtr: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    DPA_SetPtr: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    DPA_GetPtr: {
      parameters: ["pointer", "isize"],
      result: "pointer",
    },
    DPA_GetPtrIndex: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DPA_GetSize: {
      parameters: ["pointer"],
      result: "u64",
    },
    DPA_Sort: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DPA_LoadStream: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DPA_SaveStream: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DPA_Merge: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    DPA_Search: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    Str_SetPtrW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FlatSB_EnableScrollBar: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    FlatSB_ShowScrollBar: {
      parameters: ["pointer", "u32", "i32"],
      result: "i32",
    },
    FlatSB_GetScrollRange: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    FlatSB_GetScrollInfo: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    FlatSB_GetScrollPos: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    FlatSB_GetScrollProp: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    FlatSB_SetScrollPos: {
      parameters: ["pointer", "u32", "i32", "i32"],
      result: "i32",
    },
    FlatSB_SetScrollInfo: {
      parameters: ["pointer", "u32", "pointer", "i32"],
      result: "i32",
    },
    FlatSB_SetScrollRange: {
      parameters: ["pointer", "u32", "i32", "i32", "i32"],
      result: "i32",
    },
    FlatSB_SetScrollProp: {
      parameters: ["pointer", "i32", "isize", "i32"],
      result: "i32",
    },
    InitializeFlatSB: {
      parameters: ["pointer"],
      result: "i32",
    },
    UninitializeFlatSB: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LoadIconMetric: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "pointer",
    },
    LoadIconWithScaleDown: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    DrawShadowText: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    ImageList_CoCreateInstance: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUxTheme_dll = Deno.dlopen("UxTheme.dll", {
    BeginPanningFeedback: {
      parameters: ["pointer"],
      result: "i32",
    },
    UpdatePanningFeedback: {
      parameters: ["pointer", "i32", "i32", "i32"],
      result: "i32",
    },
    EndPanningFeedback: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    DrawThemeText: {
      parameters: ["isize", "pointer", "i32", "i32", "buffer", "i32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeBackgroundRegion: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    GetThemeTextExtent: {
      parameters: ["isize", "pointer", "i32", "i32", "buffer", "i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetThemeTextMetrics: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    HitTestThemeBackground: {
      parameters: ["isize", "pointer", "i32", "i32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DrawThemeEdge: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    DrawThemeIcon: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    IsThemeBackgroundPartiallyTransparent: {
      parameters: ["isize", "i32", "i32"],
      result: "i32",
    },
    GetThemeString: {
      parameters: ["isize", "i32", "i32", "i32", "buffer", "i32"],
      result: "pointer",
    },
    GetThemeBool: {
      parameters: ["isize", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeIntList: {
      parameters: ["isize", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemePropertyOrigin: {
      parameters: ["isize", "i32", "i32", "i32", "pointer"],
      result: "pointer",
    },
    GetThemeFilename: {
      parameters: ["isize", "i32", "i32", "u32", "buffer", "i32"],
      result: "pointer",
    },
    GetThemeSysColor: {
      parameters: ["isize", "i32"],
      result: "pointer",
    },
    GetThemeSysColorBrush: {
      parameters: ["isize", "u32"],
      result: "pointer",
    },
    GetThemeSysBool: {
      parameters: ["isize", "u32"],
      result: "i32",
    },
    GetThemeSysSize: {
      parameters: ["isize", "i32"],
      result: "i32",
    },
    GetThemeSysFont: {
      parameters: ["isize", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeSysString: {
      parameters: ["isize", "u32", "buffer", "i32"],
      result: "pointer",
    },
    GetThemeSysInt: {
      parameters: ["isize", "u32", "pointer"],
      result: "pointer",
    },
    EnableThemeDialogTexture: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    IsThemeDialogTextureEnabled: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetThemeAppProperties: {
      parameters: ["u32"],
      result: "void",
    },
    GetThemeDocumentationProperty: {
      parameters: ["buffer", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    EnableTheming: {
      parameters: ["i32"],
      result: "pointer",
    },
    DrawThemeParentBackgroundEx: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetBufferedPaintTargetRect: {
      parameters: ["isize", "pointer"],
      result: "pointer",
    },
    GetBufferedPaintTargetDC: {
      parameters: ["isize"],
      result: "pointer",
    },
    GetBufferedPaintDC: {
      parameters: ["isize"],
      result: "pointer",
    },
    BufferedPaintSetAlpha: {
      parameters: ["isize", "pointer", "u8"],
      result: "pointer",
    },
    BeginBufferedAnimation: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "isize",
    },
    EndBufferedAnimation: {
      parameters: ["isize", "i32"],
      result: "pointer",
    },
    BufferedPaintRenderAnimation: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetThemeTransitionDuration: {
      parameters: ["isize", "i32", "i32", "i32", "i32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUXTHEME_dll = Deno.dlopen("UXTHEME.dll", {
    GetThemeAnimationProperty: {
      parameters: ["isize", "i32", "i32", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeAnimationTransform: {
      parameters: ["isize", "i32", "i32", "u32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeTimingFunction: {
      parameters: ["isize", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    OpenThemeData: {
      parameters: ["pointer", "buffer"],
      result: "isize",
    },
    OpenThemeDataEx: {
      parameters: ["pointer", "buffer", "u32"],
      result: "isize",
    },
    CloseThemeData: {
      parameters: ["isize"],
      result: "pointer",
    },
    DrawThemeBackground: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    DrawThemeBackgroundEx: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    GetThemeBackgroundContentRect: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    GetThemeBackgroundExtent: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    GetThemePartSize: {
      parameters: ["isize", "pointer", "i32", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    IsThemePartDefined: {
      parameters: ["isize", "i32", "i32"],
      result: "i32",
    },
    GetThemeColor: {
      parameters: ["isize", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeMetric: {
      parameters: ["isize", "pointer", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeInt: {
      parameters: ["isize", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeEnumValue: {
      parameters: ["isize", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemePosition: {
      parameters: ["isize", "i32", "i32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeFont: {
      parameters: ["isize", "pointer", "i32", "i32", "i32", "pointer"],
      result: "pointer",
    },
    GetThemeRect: {
      parameters: ["isize", "i32", "i32", "i32", "pointer"],
      result: "pointer",
    },
    GetThemeMargins: {
      parameters: ["isize", "pointer", "i32", "i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SetWindowTheme: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    IsThemeActive: {
      parameters: [],
      result: "i32",
    },
    IsAppThemed: {
      parameters: [],
      result: "i32",
    },
    GetWindowTheme: {
      parameters: ["pointer"],
      result: "isize",
    },
    GetThemeAppProperties: {
      parameters: [],
      result: "u32",
    },
    GetCurrentThemeName: {
      parameters: ["buffer", "i32", "buffer", "i32", "buffer", "i32"],
      result: "pointer",
    },
    DrawThemeParentBackground: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetWindowThemeAttribute: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    DrawThemeTextEx: {
      parameters: ["isize", "pointer", "i32", "i32", "buffer", "i32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetThemeBitmap: {
      parameters: ["isize", "i32", "i32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    GetThemeStream: {
      parameters: ["isize", "i32", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    BufferedPaintInit: {
      parameters: [],
      result: "pointer",
    },
    BufferedPaintUnInit: {
      parameters: [],
      result: "pointer",
    },
    BeginBufferedPaint: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "isize",
    },
    EndBufferedPaint: {
      parameters: ["isize", "i32"],
      result: "pointer",
    },
    GetBufferedPaintBits: {
      parameters: ["isize", "pointer", "pointer"],
      result: "pointer",
    },
    BufferedPaintClear: {
      parameters: ["isize", "pointer"],
      result: "pointer",
    },
    BufferedPaintStopAllAnimations: {
      parameters: ["pointer"],
      result: "pointer",
    },
    IsCompositionActive: {
      parameters: [],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    CheckDlgButton: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    CheckRadioButton: {
      parameters: ["pointer", "i32", "i32", "i32"],
      result: "i32",
    },
    IsDlgButtonChecked: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    IsCharLowerW: {
      parameters: ["pointer"],
      result: "i32",
    },
    CreateSyntheticPointerDevice: {
      parameters: ["i32", "u32", "i32"],
      result: "pointer",
    },
    DestroySyntheticPointerDevice: {
      parameters: ["pointer"],
      result: "void",
    },
    RegisterTouchHitTestingWindow: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    EvaluateProximityToRect: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EvaluateProximityToPolygon: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    PackTouchHitTestingProximityEvaluation: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetWindowFeedbackSetting: {
      parameters: ["pointer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetWindowFeedbackSetting: {
      parameters: ["pointer", "i32", "u32", "u32", "pointer"],
      result: "i32",
    },
    SetScrollPos: {
      parameters: ["pointer", "u32", "i32", "i32"],
      result: "i32",
    },
    SetScrollRange: {
      parameters: ["pointer", "u32", "i32", "i32", "i32"],
      result: "i32",
    },
    ShowScrollBar: {
      parameters: ["pointer", "u32", "i32"],
      result: "i32",
    },
    EnableScrollBar: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    DlgDirListA: {
      parameters: ["pointer", "buffer", "i32", "i32", "u32"],
      result: "i32",
    },
    DlgDirListW: {
      parameters: ["pointer", "buffer", "i32", "i32", "u32"],
      result: "i32",
    },
    DlgDirSelectExA: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    DlgDirSelectExW: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    DlgDirListComboBoxA: {
      parameters: ["pointer", "buffer", "i32", "i32", "u32"],
      result: "i32",
    },
    DlgDirListComboBoxW: {
      parameters: ["pointer", "buffer", "i32", "i32", "u32"],
      result: "i32",
    },
    DlgDirSelectComboBoxExA: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    DlgDirSelectComboBoxExW: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    SetScrollInfo: {
      parameters: ["pointer", "u32", "pointer", "i32"],
      result: "i32",
    },
    GetComboBoxInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetListBoxInfo: {
      parameters: ["pointer"],
      result: "u32",
    },
    RegisterPointerDeviceNotifications: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreatePropertySheetPageA(
  constPropSheetPagePointer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HPROPSHEETPAGE */ {
  return libCOMCTL32_dll.CreatePropertySheetPageA(util.toPointer(constPropSheetPagePointer));
}

export function CreatePropertySheetPageW(
  constPropSheetPagePointer: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HPROPSHEETPAGE */ {
  return libCOMCTL32_dll.CreatePropertySheetPageW(util.toPointer(constPropSheetPagePointer));
}

export function DestroyPropertySheetPage(
  param0: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HPROPSHEETPAGE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DestroyPropertySheetPage(util.toPointer(param0)));
}

export function PropertySheetA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libCOMCTL32_dll.PropertySheetA(util.toPointer(param0));
}

export function PropertySheetW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libCOMCTL32_dll.PropertySheetW(util.toPointer(param0));
}

export function InitCommonControls(): void /* void */ {
  return libCOMCTL32_dll.InitCommonControls();
}

export function InitCommonControlsEx(
  picce: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.InitCommonControlsEx(util.toPointer(picce)));
}

export function ImageList_Create(
  cx: number /* i32 */,
  cy: number /* i32 */,
  flags: IMAGELIST_CREATION_FLAGS /* Windows.Win32.UI.Controls.IMAGELIST_CREATION_FLAGS */,
  cInitial: number /* i32 */,
  cGrow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_Create(cx, cy, flags, cInitial, cGrow);
}

export function ImageList_Destroy(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_Destroy(util.toPointer(himl)));
}

export function ImageList_GetImageCount(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
): number /* i32 */ {
  return libCOMCTL32_dll.ImageList_GetImageCount(util.toPointer(himl));
}

export function ImageList_SetImageCount(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  uNewCount: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_SetImageCount(util.toPointer(himl), uNewCount));
}

export function ImageList_Add(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  hbmImage: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  hbmMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
): number /* i32 */ {
  return libCOMCTL32_dll.ImageList_Add(util.toPointer(himl), util.toPointer(hbmImage), util.toPointer(hbmMask));
}

export function ImageList_ReplaceIcon(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
  hicon: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.WindowsAndMessaging.HICON */,
): number /* i32 */ {
  return libCOMCTL32_dll.ImageList_ReplaceIcon(util.toPointer(himl), i, util.toPointer(hicon));
}

export function ImageList_SetBkColor(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  clrBk: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libCOMCTL32_dll.ImageList_SetBkColor(util.toPointer(himl), util.toPointer(clrBk));
}

export function ImageList_GetBkColor(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libCOMCTL32_dll.ImageList_GetBkColor(util.toPointer(himl));
}

export function ImageList_SetOverlayImage(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  iImage: number /* i32 */,
  iOverlay: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_SetOverlayImage(util.toPointer(himl), iImage, iOverlay));
}

export function ImageList_Draw(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
  hdcDst: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  fStyle: IMAGE_LIST_DRAW_STYLE /* Windows.Win32.UI.Controls.IMAGE_LIST_DRAW_STYLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_Draw(util.toPointer(himl), i, util.toPointer(hdcDst), x, y, fStyle));
}

export function ImageList_Replace(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
  hbmImage: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  hbmMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_Replace(util.toPointer(himl), i, util.toPointer(hbmImage), util.toPointer(hbmMask)));
}

export function ImageList_AddMasked(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  hbmImage: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */,
  crMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
): number /* i32 */ {
  return libCOMCTL32_dll.ImageList_AddMasked(util.toPointer(himl), util.toPointer(hbmImage), util.toPointer(crMask));
}

export function ImageList_DrawEx(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
  hdcDst: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  x: number /* i32 */,
  y: number /* i32 */,
  dx: number /* i32 */,
  dy: number /* i32 */,
  rgbBk: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  rgbFg: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  fStyle: IMAGE_LIST_DRAW_STYLE /* Windows.Win32.UI.Controls.IMAGE_LIST_DRAW_STYLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_DrawEx(util.toPointer(himl), i, util.toPointer(hdcDst), x, y, dx, dy, util.toPointer(rgbBk), util.toPointer(rgbFg), fStyle));
}

export function ImageList_DrawIndirect(
  pimldp: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_DrawIndirect(util.toPointer(pimldp)));
}

export function ImageList_Remove(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_Remove(util.toPointer(himl), i));
}

export function ImageList_GetIcon(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
  flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return libCOMCTL32_dll.ImageList_GetIcon(util.toPointer(himl), i, flags);
}

export function ImageList_LoadImageA(
  hi: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  lpbmp: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cx: number /* i32 */,
  cGrow: number /* i32 */,
  crMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  uType: number /* u32 */,
  uFlags: IMAGE_FLAGS /* Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_LoadImageA(util.toPointer(hi), util.pstrToFfi(lpbmp), cx, cGrow, util.toPointer(crMask), uType, uFlags);
}

export function ImageList_LoadImageW(
  hi: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  lpbmp: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cx: number /* i32 */,
  cGrow: number /* i32 */,
  crMask: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  uType: number /* u32 */,
  uFlags: IMAGE_FLAGS /* Windows.Win32.UI.WindowsAndMessaging.IMAGE_FLAGS */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_LoadImageW(util.toPointer(hi), util.pwstrToFfi(lpbmp), cx, cGrow, util.toPointer(crMask), uType, uFlags);
}

export function ImageList_Copy(
  himlDst: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  iDst: number /* i32 */,
  himlSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  iSrc: number /* i32 */,
  uFlags: IMAGE_LIST_COPY_FLAGS /* Windows.Win32.UI.Controls.IMAGE_LIST_COPY_FLAGS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_Copy(util.toPointer(himlDst), iDst, util.toPointer(himlSrc), iSrc, uFlags));
}

export function ImageList_BeginDrag(
  himlTrack: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  iTrack: number /* i32 */,
  dxHotspot: number /* i32 */,
  dyHotspot: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_BeginDrag(util.toPointer(himlTrack), iTrack, dxHotspot, dyHotspot));
}

export function ImageList_EndDrag(): void /* void */ {
  return libCOMCTL32_dll.ImageList_EndDrag();
}

export function ImageList_DragEnter(
  hwndLock: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  x: number /* i32 */,
  y: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_DragEnter((hwndLock), x, y));
}

export function ImageList_DragLeave(
  hwndLock: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_DragLeave((hwndLock)));
}

export function ImageList_DragMove(
  x: number /* i32 */,
  y: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_DragMove(x, y));
}

export function ImageList_SetDragCursorImage(
  himlDrag: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  iDrag: number /* i32 */,
  dxHotspot: number /* i32 */,
  dyHotspot: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_SetDragCursorImage(util.toPointer(himlDrag), iDrag, dxHotspot, dyHotspot));
}

export function ImageList_DragShowNolock(
  fShow: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_DragShowNolock(util.boolToFfi(fShow)));
}

export function ImageList_GetDragImage(
  ppt: Deno.PointerValue | Uint8Array /* ptr */,
  pptHotspot: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_GetDragImage(util.toPointer(ppt), util.toPointer(pptHotspot));
}

export function ImageList_Read(
  pstm: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_Read(util.toPointer(pstm));
}

export function ImageList_Write(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  pstm: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_Write(util.toPointer(himl), util.toPointer(pstm)));
}

export function ImageList_ReadEx(
  dwFlags: number /* u32 */,
  pstm: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.ImageList_ReadEx(dwFlags, util.toPointer(pstm), util.toPointer(riid), util.toPointer(ppv));
}

export function ImageList_WriteEx(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  dwFlags: IMAGE_LIST_WRITE_STREAM_FLAGS /* Windows.Win32.UI.Controls.IMAGE_LIST_WRITE_STREAM_FLAGS */,
  pstm: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.ImageList_WriteEx(util.toPointer(himl), dwFlags, util.toPointer(pstm));
}

export function ImageList_GetIconSize(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  cx: Deno.PointerValue | Uint8Array /* ptr */,
  cy: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_GetIconSize(util.toPointer(himl), util.toPointer(cx), util.toPointer(cy)));
}

export function ImageList_SetIconSize(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  cx: number /* i32 */,
  cy: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_SetIconSize(util.toPointer(himl), cx, cy));
}

export function ImageList_GetImageInfo(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i: number /* i32 */,
  pImageInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ImageList_GetImageInfo(util.toPointer(himl), i, util.toPointer(pImageInfo)));
}

export function ImageList_Merge(
  himl1: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i1: number /* i32 */,
  himl2: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  i2: number /* i32 */,
  dx: number /* i32 */,
  dy: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_Merge(util.toPointer(himl1), i1, util.toPointer(himl2), i2, dx, dy);
}

export function ImageList_Duplicate(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */ {
  return libCOMCTL32_dll.ImageList_Duplicate(util.toPointer(himl));
}

export function HIMAGELIST_QueryInterface(
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.HIMAGELIST_QueryInterface(util.toPointer(himl), util.toPointer(riid), util.toPointer(ppv));
}

export function CreateToolbarEx(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  ws: number /* u32 */,
  wID: number /* u32 */,
  nBitmaps: number /* i32 */,
  hBMInst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  wBMID: bigint | number /* usize */,
  lpButtons: Deno.PointerValue | Uint8Array /* ptr */,
  iNumButtons: number /* i32 */,
  dxButton: number /* i32 */,
  dyButton: number /* i32 */,
  dxBitmap: number /* i32 */,
  dyBitmap: number /* i32 */,
  uStructSize: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMCTL32_dll.CreateToolbarEx((hwnd), ws, wID, nBitmaps, util.toPointer(hBMInst), wBMID, util.toPointer(lpButtons), iNumButtons, dxButton, dyButton, dxBitmap, dyBitmap, uStructSize));
}

export function CreateMappedBitmap(
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  idBitmap: bigint | number /* isize */,
  wFlags: number /* u32 */,
  lpColorMap: Deno.PointerValue | Uint8Array /* ptr */,
  iNumMaps: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBITMAP */ {
  return libCOMCTL32_dll.CreateMappedBitmap(util.toPointer(hInstance), idBitmap, wFlags, util.toPointer(lpColorMap), iNumMaps);
}

export function DrawStatusTextA(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  pszText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uFlags: number /* u32 */,
): void /* void */ {
  return libCOMCTL32_dll.DrawStatusTextA(util.toPointer(hDC), util.toPointer(lprc), util.pstrToFfi(pszText), uFlags);
}

export function DrawStatusTextW(
  hDC: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uFlags: number /* u32 */,
): void /* void */ {
  return libCOMCTL32_dll.DrawStatusTextW(util.toPointer(hDC), util.toPointer(lprc), util.pwstrToFfi(pszText), uFlags);
}

export function CreateStatusWindowA(
  style: number /* i32 */,
  lpszText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wID: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMCTL32_dll.CreateStatusWindowA(style, util.pstrToFfi(lpszText), (hwndParent), wID));
}

export function CreateStatusWindowW(
  style: number /* i32 */,
  lpszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wID: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMCTL32_dll.CreateStatusWindowW(style, util.pwstrToFfi(lpszText), (hwndParent), wID));
}

export function MenuHelp(
  uMsg: number /* u32 */,
  wParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.WPARAM */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  hMainMenu: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.WindowsAndMessaging.HMENU */,
  hInst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  hwndStatus: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpwIDs: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libCOMCTL32_dll.MenuHelp(uMsg, util.toPointer(wParam), util.toPointer(lParam), util.toPointer(hMainMenu), util.toPointer(hInst), (hwndStatus), util.toPointer(lpwIDs));
}

export function ShowHideMenuCtl(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  uFlags: bigint | number /* usize */,
  lpInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.ShowHideMenuCtl((hWnd), uFlags, util.toPointer(lpInfo)));
}

export function GetEffectiveClientRect(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lprc: Deno.PointerValue | Uint8Array /* ptr */,
  lpInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libCOMCTL32_dll.GetEffectiveClientRect((hWnd), util.toPointer(lprc), util.toPointer(lpInfo));
}

export function MakeDragList(
  hLB: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.MakeDragList((hLB)));
}

export function DrawInsert(
  handParent: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hLB: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nItem: number /* i32 */,
): void /* void */ {
  return libCOMCTL32_dll.DrawInsert((handParent), (hLB), nItem);
}

export function LBItemFromPt(
  hLB: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pt: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.POINT */,
  bAutoScroll: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libCOMCTL32_dll.LBItemFromPt((hLB), util.toPointer(pt), util.boolToFfi(bAutoScroll));
}

export function CreateUpDownControl(
  dwStyle: number /* u32 */,
  x: number /* i32 */,
  y: number /* i32 */,
  cx: number /* i32 */,
  cy: number /* i32 */,
  hParent: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nID: number /* i32 */,
  hInst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  hBuddy: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nUpper: number /* i32 */,
  nLower: number /* i32 */,
  nPos: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMCTL32_dll.CreateUpDownControl(dwStyle, x, y, cx, cy, (hParent), nID, util.toPointer(hInst), (hBuddy), nUpper, nLower, nPos));
}

export function TaskDialogIndirect(
  pTaskConfig: Deno.PointerValue | Uint8Array /* ptr */,
  pnButton: Deno.PointerValue | Uint8Array /* ptr */,
  pnRadioButton: Deno.PointerValue | Uint8Array /* ptr */,
  pfVerificationFlagChecked: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.TaskDialogIndirect(util.toPointer(pTaskConfig), util.toPointer(pnButton), util.toPointer(pnRadioButton), util.toPointer(pfVerificationFlagChecked));
}

export function TaskDialog(
  hwndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInstance: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszWindowTitle: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszMainInstruction: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszContent: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwCommonButtons: TASKDIALOG_COMMON_BUTTON_FLAGS /* Windows.Win32.UI.Controls.TASKDIALOG_COMMON_BUTTON_FLAGS */,
  pszIcon: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pnButton: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.TaskDialog((hwndOwner), util.toPointer(hInstance), util.pwstrToFfi(pszWindowTitle), util.pwstrToFfi(pszMainInstruction), util.pwstrToFfi(pszContent), dwCommonButtons, util.pwstrToFfi(pszIcon), util.toPointer(pnButton));
}

export function InitMUILanguage(
  uiLang: number /* u16 */,
): void /* void */ {
  return libCOMCTL32_dll.InitMUILanguage(uiLang);
}

export function GetMUILanguage(): number /* u16 */ {
  return libCOMCTL32_dll.GetMUILanguage();
}

export function DSA_Create(
  cbItem: number /* i32 */,
  cItemGrow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */ {
  return libCOMCTL32_dll.DSA_Create(cbItem, cItemGrow);
}

export function DSA_Destroy(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DSA_Destroy(util.toPointer(hdsa)));
}

export function DSA_DestroyCallback(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  pfnCB: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDAENUMCALLBACK */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libCOMCTL32_dll.DSA_DestroyCallback(util.toPointer(hdsa), util.toPointer(pfnCB), util.toPointer(pData));
}

export function DSA_DeleteItem(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  i: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DSA_DeleteItem(util.toPointer(hdsa), i));
}

export function DSA_DeleteAllItems(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DSA_DeleteAllItems(util.toPointer(hdsa)));
}

export function DSA_EnumCallback(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  pfnCB: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDAENUMCALLBACK */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libCOMCTL32_dll.DSA_EnumCallback(util.toPointer(hdsa), util.toPointer(pfnCB), util.toPointer(pData));
}

export function DSA_InsertItem(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  i: number /* i32 */,
  pitem: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libCOMCTL32_dll.DSA_InsertItem(util.toPointer(hdsa), i, util.toPointer(pitem));
}

export function DSA_GetItemPtr(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  i: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libCOMCTL32_dll.DSA_GetItemPtr(util.toPointer(hdsa), i);
}

export function DSA_GetItem(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  i: number /* i32 */,
  pitem: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DSA_GetItem(util.toPointer(hdsa), i, util.toPointer(pitem)));
}

export function DSA_SetItem(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  i: number /* i32 */,
  pitem: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DSA_SetItem(util.toPointer(hdsa), i, util.toPointer(pitem)));
}

export function DSA_Clone(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */ {
  return libCOMCTL32_dll.DSA_Clone(util.toPointer(hdsa));
}

export function DSA_GetSize(
  hdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
): bigint | number /* u64 */ {
  return libCOMCTL32_dll.DSA_GetSize(util.toPointer(hdsa));
}

export function DSA_Sort(
  pdsa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDSA */,
  pfnCompare: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDACOMPARE */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DSA_Sort(util.toPointer(pdsa), util.toPointer(pfnCompare), util.toPointer(lParam)));
}

export function DPA_Create(
  cItemGrow: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */ {
  return libCOMCTL32_dll.DPA_Create(cItemGrow);
}

export function DPA_CreateEx(
  cpGrow: number /* i32 */,
  hheap: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */ {
  return libCOMCTL32_dll.DPA_CreateEx(cpGrow, util.toPointer(hheap));
}

export function DPA_Clone(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  hdpaNew: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */ {
  return libCOMCTL32_dll.DPA_Clone(util.toPointer(hdpa), util.toPointer(hdpaNew));
}

export function DPA_Destroy(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DPA_Destroy(util.toPointer(hdpa)));
}

export function DPA_DestroyCallback(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  pfnCB: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDAENUMCALLBACK */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libCOMCTL32_dll.DPA_DestroyCallback(util.toPointer(hdpa), util.toPointer(pfnCB), util.toPointer(pData));
}

export function DPA_DeletePtr(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  i: number /* i32 */,
): Deno.PointerValue /* ptr */ {
  return libCOMCTL32_dll.DPA_DeletePtr(util.toPointer(hdpa), i);
}

export function DPA_DeleteAllPtrs(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DPA_DeleteAllPtrs(util.toPointer(hdpa)));
}

export function DPA_EnumCallback(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  pfnCB: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDAENUMCALLBACK */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libCOMCTL32_dll.DPA_EnumCallback(util.toPointer(hdpa), util.toPointer(pfnCB), util.toPointer(pData));
}

export function DPA_Grow(
  pdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  cp: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DPA_Grow(util.toPointer(pdpa), cp));
}

export function DPA_InsertPtr(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  i: number /* i32 */,
  p: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libCOMCTL32_dll.DPA_InsertPtr(util.toPointer(hdpa), i, util.toPointer(p));
}

export function DPA_SetPtr(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  i: number /* i32 */,
  p: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DPA_SetPtr(util.toPointer(hdpa), i, util.toPointer(p)));
}

export function DPA_GetPtr(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  i: bigint | number /* isize */,
): Deno.PointerValue /* ptr */ {
  return libCOMCTL32_dll.DPA_GetPtr(util.toPointer(hdpa), i);
}

export function DPA_GetPtrIndex(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  p: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libCOMCTL32_dll.DPA_GetPtrIndex(util.toPointer(hdpa), util.toPointer(p));
}

export function DPA_GetSize(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
): bigint | number /* u64 */ {
  return libCOMCTL32_dll.DPA_GetSize(util.toPointer(hdpa));
}

export function DPA_Sort(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  pfnCompare: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDACOMPARE */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DPA_Sort(util.toPointer(hdpa), util.toPointer(pfnCompare), util.toPointer(lParam)));
}

export function DPA_LoadStream(
  phdpa: Deno.PointerValue | Uint8Array /* ptr */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDPASTREAM */,
  pstream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
  pvInstData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.DPA_LoadStream(util.toPointer(phdpa), util.toPointer(pfn), util.toPointer(pstream), util.toPointer(pvInstData));
}

export function DPA_SaveStream(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  pfn: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDPASTREAM */,
  pstream: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
  pvInstData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.DPA_SaveStream(util.toPointer(hdpa), util.toPointer(pfn), util.toPointer(pstream), util.toPointer(pvInstData));
}

export function DPA_Merge(
  hdpaDest: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  hdpaSrc: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  dwFlags: number /* u32 */,
  pfnCompare: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDACOMPARE */,
  pfnMerge: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDPAMERGE */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.DPA_Merge(util.toPointer(hdpaDest), util.toPointer(hdpaSrc), dwFlags, util.toPointer(pfnCompare), util.toPointer(pfnMerge), util.toPointer(lParam)));
}

export function DPA_Search(
  hdpa: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HDPA */,
  pFind: Deno.PointerValue | Uint8Array /* ptr */,
  iStart: number /* i32 */,
  pfnCompare: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.PFNDACOMPARE */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  options: number /* u32 */,
): number /* i32 */ {
  return libCOMCTL32_dll.DPA_Search(util.toPointer(hdpa), util.toPointer(pFind), iStart, util.toPointer(pfnCompare), util.toPointer(lParam), options);
}

export function Str_SetPtrW(
  ppsz: Deno.PointerValue | Uint8Array /* ptr */,
  psz: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.Str_SetPtrW(util.toPointer(ppsz), util.pwstrToFfi(psz)));
}

export function FlatSB_EnableScrollBar(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  param1: number /* i32 */,
  param2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.FlatSB_EnableScrollBar((param0), param1, param2));
}

export function FlatSB_ShowScrollBar(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  param2: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.FlatSB_ShowScrollBar((param0), code, util.boolToFfi(param2)));
}

export function FlatSB_GetScrollRange(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
  param3: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.FlatSB_GetScrollRange((param0), code, util.toPointer(param2), util.toPointer(param3)));
}

export function FlatSB_GetScrollInfo(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.FlatSB_GetScrollInfo((param0), code, util.toPointer(param2)));
}

export function FlatSB_GetScrollPos(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
): number /* i32 */ {
  return libCOMCTL32_dll.FlatSB_GetScrollPos((param0), code);
}

export function FlatSB_GetScrollProp(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  propIndex: WSB_PROP /* Windows.Win32.UI.Controls.WSB_PROP */,
  param2: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.FlatSB_GetScrollProp((param0), propIndex, util.toPointer(param2)));
}

export function FlatSB_SetScrollPos(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  pos: number /* i32 */,
  fRedraw: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libCOMCTL32_dll.FlatSB_SetScrollPos((param0), code, pos, util.boolToFfi(fRedraw));
}

export function FlatSB_SetScrollInfo(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  psi: Deno.PointerValue | Uint8Array /* ptr */,
  fRedraw: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libCOMCTL32_dll.FlatSB_SetScrollInfo((param0), code, util.toPointer(psi), util.boolToFfi(fRedraw));
}

export function FlatSB_SetScrollRange(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  code: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  min: number /* i32 */,
  max: number /* i32 */,
  fRedraw: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libCOMCTL32_dll.FlatSB_SetScrollRange((param0), code, min, max, util.boolToFfi(fRedraw));
}

export function FlatSB_SetScrollProp(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  index: WSB_PROP /* Windows.Win32.UI.Controls.WSB_PROP */,
  newValue: bigint | number /* isize */,
  param3: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.FlatSB_SetScrollProp((param0), index, newValue, util.boolToFfi(param3)));
}

export function InitializeFlatSB(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll.InitializeFlatSB((param0)));
}

export function UninitializeFlatSB(
  param0: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.UninitializeFlatSB((param0));
}

export function LoadIconMetric(
  hinst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lims: _LI_METRIC /* Windows.Win32.UI.Controls._LI_METRIC */,
  phico: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.LoadIconMetric(util.toPointer(hinst), util.pwstrToFfi(pszName), lims, util.toPointer(phico));
}

export function LoadIconWithScaleDown(
  hinst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cx: number /* i32 */,
  cy: number /* i32 */,
  phico: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.LoadIconWithScaleDown(util.toPointer(hinst), util.pwstrToFfi(pszName), cx, cy, util.toPointer(phico));
}

export function DrawShadowText(
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cch: number /* u32 */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
  crText: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  crShadow: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */,
  ixOffset: number /* i32 */,
  iyOffset: number /* i32 */,
): number /* i32 */ {
  return libCOMCTL32_dll.DrawShadowText(util.toPointer(hdc), util.pwstrToFfi(pszText), cch, util.toPointer(prc), dwFlags, util.toPointer(crText), util.toPointer(crShadow), ixOffset, iyOffset);
}

export function ImageList_CoCreateInstance(
  rclsid: Deno.PointerValue | Uint8Array /* ptr */,
  punkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMCTL32_dll.ImageList_CoCreateInstance(util.toPointer(rclsid), util.toPointer(punkOuter), util.toPointer(riid), util.toPointer(ppv));
}

export function BeginPanningFeedback(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.BeginPanningFeedback((hwnd)));
}

export function UpdatePanningFeedback(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lTotalOverpanOffsetX: number /* i32 */,
  lTotalOverpanOffsetY: number /* i32 */,
  fInInertia: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.UpdatePanningFeedback((hwnd), lTotalOverpanOffsetX, lTotalOverpanOffsetY, util.boolToFfi(fInInertia)));
}

export function EndPanningFeedback(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  fAnimateBack: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.EndPanningFeedback((hwnd), util.boolToFfi(fAnimateBack)));
}

export function GetThemeAnimationProperty(
  hTheme: bigint | number /* isize */,
  iStoryboardId: number /* i32 */,
  iTargetId: number /* i32 */,
  eProperty: TA_PROPERTY /* Windows.Win32.UI.Controls.TA_PROPERTY */,
  pvProperty: Deno.PointerValue | Uint8Array /* ptr */,
  cbSize: number /* u32 */,
  pcbSizeOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeAnimationProperty(hTheme, iStoryboardId, iTargetId, eProperty, util.toPointer(pvProperty), cbSize, util.toPointer(pcbSizeOut));
}

export function GetThemeAnimationTransform(
  hTheme: bigint | number /* isize */,
  iStoryboardId: number /* i32 */,
  iTargetId: number /* i32 */,
  dwTransformIndex: number /* u32 */,
  pTransform: Deno.PointerValue | Uint8Array /* ptr */,
  cbSize: number /* u32 */,
  pcbSizeOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeAnimationTransform(hTheme, iStoryboardId, iTargetId, dwTransformIndex, util.toPointer(pTransform), cbSize, util.toPointer(pcbSizeOut));
}

export function GetThemeTimingFunction(
  hTheme: bigint | number /* isize */,
  iTimingFunctionId: number /* i32 */,
  pTimingFunction: Deno.PointerValue | Uint8Array /* ptr */,
  cbSize: number /* u32 */,
  pcbSizeOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeTimingFunction(hTheme, iTimingFunctionId, util.toPointer(pTimingFunction), cbSize, util.toPointer(pcbSizeOut));
}

export function OpenThemeData(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszClassList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): bigint | number /* isize */ {
  return libUXTHEME_dll.OpenThemeData((hwnd), util.pwstrToFfi(pszClassList));
}

export function OpenThemeDataEx(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszClassList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: OPEN_THEME_DATA_FLAGS /* Windows.Win32.UI.Controls.OPEN_THEME_DATA_FLAGS */,
): bigint | number /* isize */ {
  return libUXTHEME_dll.OpenThemeDataEx((hwnd), util.pwstrToFfi(pszClassList), dwFlags);
}

export function CloseThemeData(
  hTheme: bigint | number /* isize */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.CloseThemeData(hTheme);
}

export function DrawThemeBackground(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
  pClipRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.DrawThemeBackground(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pRect), util.toPointer(pClipRect));
}

export function DrawThemeBackgroundEx(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.DrawThemeBackgroundEx(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pRect), util.toPointer(pOptions));
}

export function DrawThemeText(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* i32 */,
  dwTextFlags: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
  dwTextFlags2: number /* u32 */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.DrawThemeText(hTheme, util.toPointer(hdc), iPartId, iStateId, util.pwstrToFfi(pszText), cchText, dwTextFlags, dwTextFlags2, util.toPointer(pRect));
}

export function GetThemeBackgroundContentRect(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pBoundingRect: Deno.PointerValue | Uint8Array /* ptr */,
  pContentRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeBackgroundContentRect(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pBoundingRect), util.toPointer(pContentRect));
}

export function GetThemeBackgroundExtent(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pContentRect: Deno.PointerValue | Uint8Array /* ptr */,
  pExtentRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeBackgroundExtent(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pContentRect), util.toPointer(pExtentRect));
}

export function GetThemeBackgroundRegion(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
  pRegion: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeBackgroundRegion(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pRect), util.toPointer(pRegion));
}

export function GetThemePartSize(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
  eSize: THEMESIZE /* Windows.Win32.UI.Controls.THEMESIZE */,
  psz: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemePartSize(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(prc), eSize, util.toPointer(psz));
}

export function GetThemeTextExtent(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchCharCount: number /* i32 */,
  dwTextFlags: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
  pBoundingRect: Deno.PointerValue | Uint8Array /* ptr */,
  pExtentRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeTextExtent(hTheme, util.toPointer(hdc), iPartId, iStateId, util.pwstrToFfi(pszText), cchCharCount, dwTextFlags, util.toPointer(pBoundingRect), util.toPointer(pExtentRect));
}

export function GetThemeTextMetrics(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  ptm: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeTextMetrics(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(ptm));
}

export function HitTestThemeBackground(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  dwOptions: HIT_TEST_BACKGROUND_OPTIONS /* Windows.Win32.UI.Controls.HIT_TEST_BACKGROUND_OPTIONS */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
  hrgn: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HRGN */,
  ptTest: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.POINT */,
  pwHitTestCode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.HitTestThemeBackground(hTheme, util.toPointer(hdc), iPartId, iStateId, dwOptions, util.toPointer(pRect), util.toPointer(hrgn), util.toPointer(ptTest), util.toPointer(pwHitTestCode));
}

export function DrawThemeEdge(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pDestRect: Deno.PointerValue | Uint8Array /* ptr */,
  uEdge: DRAWEDGE_FLAGS /* Windows.Win32.Graphics.Gdi.DRAWEDGE_FLAGS */,
  uFlags: DRAW_EDGE_FLAGS /* Windows.Win32.Graphics.Gdi.DRAW_EDGE_FLAGS */,
  pContentRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.DrawThemeEdge(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pDestRect), uEdge, uFlags, util.toPointer(pContentRect));
}

export function DrawThemeIcon(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
  himl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HIMAGELIST */,
  iImageIndex: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.DrawThemeIcon(hTheme, util.toPointer(hdc), iPartId, iStateId, util.toPointer(pRect), util.toPointer(himl), iImageIndex);
}

export function IsThemePartDefined(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUXTHEME_dll.IsThemePartDefined(hTheme, iPartId, iStateId));
}

export function IsThemeBackgroundPartiallyTransparent(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.IsThemeBackgroundPartiallyTransparent(hTheme, iPartId, iStateId));
}

export function GetThemeColor(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  pColor: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeColor(hTheme, iPartId, iStateId, iPropId, util.toPointer(pColor));
}

export function GetThemeMetric(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  piVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeMetric(hTheme, util.toPointer(hdc), iPartId, iStateId, iPropId, util.toPointer(piVal));
}

export function GetThemeString(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: number /* i32 */,
  pszBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxBuffChars: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeString(hTheme, iPartId, iStateId, iPropId, util.pwstrToFfi(pszBuff), cchMaxBuffChars);
}

export function GetThemeBool(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  pfVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeBool(hTheme, iPartId, iStateId, iPropId, util.toPointer(pfVal));
}

export function GetThemeInt(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  piVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeInt(hTheme, iPartId, iStateId, iPropId, util.toPointer(piVal));
}

export function GetThemeEnumValue(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  piVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeEnumValue(hTheme, iPartId, iStateId, iPropId, util.toPointer(piVal));
}

export function GetThemePosition(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  pPoint: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemePosition(hTheme, iPartId, iStateId, iPropId, util.toPointer(pPoint));
}

export function GetThemeFont(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: number /* i32 */,
  pFont: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeFont(hTheme, util.toPointer(hdc), iPartId, iStateId, iPropId, util.toPointer(pFont));
}

export function GetThemeRect(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: number /* i32 */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeRect(hTheme, iPartId, iStateId, iPropId, util.toPointer(pRect));
}

export function GetThemeMargins(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
  pMargins: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeMargins(hTheme, util.toPointer(hdc), iPartId, iStateId, iPropId, util.toPointer(prc), util.toPointer(pMargins));
}

export function GetThemeIntList(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  pIntList: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeIntList(hTheme, iPartId, iStateId, iPropId, util.toPointer(pIntList));
}

export function GetThemePropertyOrigin(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: number /* i32 */,
  pOrigin: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemePropertyOrigin(hTheme, iPartId, iStateId, iPropId, util.toPointer(pOrigin));
}

export function SetWindowTheme(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszSubAppName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszSubIdList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.SetWindowTheme((hwnd), util.pwstrToFfi(pszSubAppName), util.pwstrToFfi(pszSubIdList));
}

export function GetThemeFilename(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  pszThemeFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxBuffChars: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeFilename(hTheme, iPartId, iStateId, iPropId, util.pwstrToFfi(pszThemeFileName), cchMaxBuffChars);
}

export function GetThemeSysColor(
  hTheme: bigint | number /* isize */,
  iColorId: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.COLORREF */ {
  return libUxTheme_dll.GetThemeSysColor(hTheme, iColorId);
}

export function GetThemeSysColorBrush(
  hTheme: bigint | number /* isize */,
  iColorId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HBRUSH */ {
  return libUxTheme_dll.GetThemeSysColorBrush(hTheme, iColorId);
}

export function GetThemeSysBool(
  hTheme: bigint | number /* isize */,
  iBoolId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.GetThemeSysBool(hTheme, iBoolId));
}

export function GetThemeSysSize(
  hTheme: bigint | number /* isize */,
  iSizeId: number /* i32 */,
): number /* i32 */ {
  return libUxTheme_dll.GetThemeSysSize(hTheme, iSizeId);
}

export function GetThemeSysFont(
  hTheme: bigint | number /* isize */,
  iFontId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  plf: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeSysFont(hTheme, iFontId, util.toPointer(plf));
}

export function GetThemeSysString(
  hTheme: bigint | number /* isize */,
  iStringId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  pszStringBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxStringChars: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeSysString(hTheme, iStringId, util.pwstrToFfi(pszStringBuff), cchMaxStringChars);
}

export function GetThemeSysInt(
  hTheme: bigint | number /* isize */,
  iIntId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  piValue: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeSysInt(hTheme, iIntId, util.toPointer(piValue));
}

export function IsThemeActive(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUXTHEME_dll.IsThemeActive());
}

export function IsAppThemed(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUXTHEME_dll.IsAppThemed());
}

export function GetWindowTheme(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): bigint | number /* isize */ {
  return libUXTHEME_dll.GetWindowTheme((hwnd));
}

export function EnableThemeDialogTexture(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.EnableThemeDialogTexture((hwnd), dwFlags);
}

export function IsThemeDialogTextureEnabled(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.IsThemeDialogTextureEnabled((hwnd)));
}

export function GetThemeAppProperties(): SET_THEME_APP_PROPERTIES_FLAGS /* Windows.Win32.UI.Controls.SET_THEME_APP_PROPERTIES_FLAGS */ {
  return libUXTHEME_dll.GetThemeAppProperties();
}

export function SetThemeAppProperties(
  dwFlags: SET_THEME_APP_PROPERTIES_FLAGS /* Windows.Win32.UI.Controls.SET_THEME_APP_PROPERTIES_FLAGS */,
): void /* void */ {
  return libUxTheme_dll.SetThemeAppProperties(dwFlags);
}

export function GetCurrentThemeName(
  pszThemeFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxNameChars: number /* i32 */,
  pszColorBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxColorChars: number /* i32 */,
  pszSizeBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxSizeChars: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetCurrentThemeName(util.pwstrToFfi(pszThemeFileName), cchMaxNameChars, util.pwstrToFfi(pszColorBuff), cchMaxColorChars, util.pwstrToFfi(pszSizeBuff), cchMaxSizeChars);
}

export function GetThemeDocumentationProperty(
  pszThemeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPropertyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszValueBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchMaxValChars: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeDocumentationProperty(util.pwstrToFfi(pszThemeName), util.pwstrToFfi(pszPropertyName), util.pwstrToFfi(pszValueBuff), cchMaxValChars);
}

export function DrawThemeParentBackground(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.DrawThemeParentBackground((hwnd), util.toPointer(hdc), util.toPointer(prc));
}

export function EnableTheming(
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.EnableTheming(util.boolToFfi(fEnable));
}

export function DrawThemeParentBackgroundEx(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  dwFlags: DRAW_THEME_PARENT_BACKGROUND_FLAGS /* Windows.Win32.UI.Controls.DRAW_THEME_PARENT_BACKGROUND_FLAGS */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.DrawThemeParentBackgroundEx((hwnd), util.toPointer(hdc), dwFlags, util.toPointer(prc));
}

export function SetWindowThemeAttribute(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  eAttribute: WINDOWTHEMEATTRIBUTETYPE /* Windows.Win32.UI.Controls.WINDOWTHEMEATTRIBUTETYPE */,
  pvAttribute: Deno.PointerValue | Uint8Array /* ptr */,
  cbAttribute: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.SetWindowThemeAttribute((hwnd), eAttribute, util.toPointer(pvAttribute), cbAttribute);
}

export function DrawThemeTextEx(
  hTheme: bigint | number /* isize */,
  hdc: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  pszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* i32 */,
  dwTextFlags: DRAW_TEXT_FORMAT /* Windows.Win32.Graphics.Gdi.DRAW_TEXT_FORMAT */,
  pRect: Deno.PointerValue | Uint8Array /* ptr */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.DrawThemeTextEx(hTheme, util.toPointer(hdc), iPartId, iStateId, util.pwstrToFfi(pszText), cchText, dwTextFlags, util.toPointer(pRect), util.toPointer(pOptions));
}

export function GetThemeBitmap(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: THEME_PROPERTY_SYMBOL_ID /* Windows.Win32.UI.Controls.THEME_PROPERTY_SYMBOL_ID */,
  dwFlags: GET_THEME_BITMAP_FLAGS /* Windows.Win32.UI.Controls.GET_THEME_BITMAP_FLAGS */,
  phBitmap: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeBitmap(hTheme, iPartId, iStateId, iPropId, dwFlags, util.toPointer(phBitmap));
}

export function GetThemeStream(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateId: number /* i32 */,
  iPropId: number /* i32 */,
  ppvStream: Deno.PointerValue | Uint8Array /* ptr */,
  pcbStream: Deno.PointerValue | Uint8Array /* ptr */,
  hInst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetThemeStream(hTheme, iPartId, iStateId, iPropId, util.toPointer(ppvStream), util.toPointer(pcbStream), util.toPointer(hInst));
}

export function BufferedPaintInit(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.BufferedPaintInit();
}

export function BufferedPaintUnInit(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.BufferedPaintUnInit();
}

export function BeginBufferedPaint(
  hdcTarget: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  prcTarget: Deno.PointerValue | Uint8Array /* ptr */,
  dwFormat: BP_BUFFERFORMAT /* Windows.Win32.UI.Controls.BP_BUFFERFORMAT */,
  pPaintParams: Deno.PointerValue | Uint8Array /* ptr */,
  phdc: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libUXTHEME_dll.BeginBufferedPaint(util.toPointer(hdcTarget), util.toPointer(prcTarget), dwFormat, util.toPointer(pPaintParams), util.toPointer(phdc));
}

export function EndBufferedPaint(
  hBufferedPaint: bigint | number /* isize */,
  fUpdateTarget: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.EndBufferedPaint(hBufferedPaint, util.boolToFfi(fUpdateTarget));
}

export function GetBufferedPaintTargetRect(
  hBufferedPaint: bigint | number /* isize */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetBufferedPaintTargetRect(hBufferedPaint, util.toPointer(prc));
}

export function GetBufferedPaintTargetDC(
  hBufferedPaint: bigint | number /* isize */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libUxTheme_dll.GetBufferedPaintTargetDC(hBufferedPaint);
}

export function GetBufferedPaintDC(
  hBufferedPaint: bigint | number /* isize */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libUxTheme_dll.GetBufferedPaintDC(hBufferedPaint);
}

export function GetBufferedPaintBits(
  hBufferedPaint: bigint | number /* isize */,
  ppbBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pcxRow: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.GetBufferedPaintBits(hBufferedPaint, util.toPointer(ppbBuffer), util.toPointer(pcxRow));
}

export function BufferedPaintClear(
  hBufferedPaint: bigint | number /* isize */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.BufferedPaintClear(hBufferedPaint, util.toPointer(prc));
}

export function BufferedPaintSetAlpha(
  hBufferedPaint: bigint | number /* isize */,
  prc: Deno.PointerValue | Uint8Array /* ptr */,
  alpha: number /* u8 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.BufferedPaintSetAlpha(hBufferedPaint, util.toPointer(prc), alpha);
}

export function BufferedPaintStopAllAnimations(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUXTHEME_dll.BufferedPaintStopAllAnimations((hwnd));
}

export function BeginBufferedAnimation(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hdcTarget: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
  prcTarget: Deno.PointerValue | Uint8Array /* ptr */,
  dwFormat: BP_BUFFERFORMAT /* Windows.Win32.UI.Controls.BP_BUFFERFORMAT */,
  pPaintParams: Deno.PointerValue | Uint8Array /* ptr */,
  pAnimationParams: Deno.PointerValue | Uint8Array /* ptr */,
  phdcFrom: Deno.PointerValue | Uint8Array /* ptr */,
  phdcTo: Deno.PointerValue | Uint8Array /* ptr */,
): bigint | number /* isize */ {
  return libUxTheme_dll.BeginBufferedAnimation((hwnd), util.toPointer(hdcTarget), util.toPointer(prcTarget), dwFormat, util.toPointer(pPaintParams), util.toPointer(pAnimationParams), util.toPointer(phdcFrom), util.toPointer(phdcTo));
}

export function EndBufferedAnimation(
  hbpAnimation: bigint | number /* isize */,
  fUpdateTarget: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.EndBufferedAnimation(hbpAnimation, util.boolToFfi(fUpdateTarget));
}

export function BufferedPaintRenderAnimation(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hdcTarget: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUxTheme_dll.BufferedPaintRenderAnimation((hwnd), util.toPointer(hdcTarget)));
}

export function IsCompositionActive(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUXTHEME_dll.IsCompositionActive());
}

export function GetThemeTransitionDuration(
  hTheme: bigint | number /* isize */,
  iPartId: number /* i32 */,
  iStateIdFrom: number /* i32 */,
  iStateIdTo: number /* i32 */,
  iPropId: number /* i32 */,
  pdwDuration: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libUxTheme_dll.GetThemeTransitionDuration(hTheme, iPartId, iStateIdFrom, iStateIdTo, iPropId, util.toPointer(pdwDuration));
}

export function CheckDlgButton(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nIDButton: number /* i32 */,
  uCheck: DLG_BUTTON_CHECK_STATE /* Windows.Win32.UI.Controls.DLG_BUTTON_CHECK_STATE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.CheckDlgButton((hDlg), nIDButton, uCheck));
}

export function CheckRadioButton(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nIDFirstButton: number /* i32 */,
  nIDLastButton: number /* i32 */,
  nIDCheckButton: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.CheckRadioButton((hDlg), nIDFirstButton, nIDLastButton, nIDCheckButton));
}

export function IsDlgButtonChecked(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nIDButton: number /* i32 */,
): number /* u32 */ {
  return libUSER32_dll.IsDlgButtonChecked((hDlg), nIDButton);
}

export function IsCharLowerW(
  ch: Uint8Array | Deno.PointerValue /* char */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsCharLowerW(util.toPointer(ch)));
}

export function CreateSyntheticPointerDevice(
  pointerType: POINTER_INPUT_TYPE /* Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */,
  maxCount: number /* u32 */,
  mode: POINTER_FEEDBACK_MODE /* Windows.Win32.UI.Controls.POINTER_FEEDBACK_MODE */,
): Deno.PointerValue /* Windows.Win32.UI.Controls.HSYNTHETICPOINTERDEVICE */ {
  return libUSER32_dll.CreateSyntheticPointerDevice(pointerType, maxCount, mode);
}

export function DestroySyntheticPointerDevice(
  device: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Controls.HSYNTHETICPOINTERDEVICE */,
): void /* void */ {
  return libUSER32_dll.DestroySyntheticPointerDevice(util.toPointer(device));
}

export function RegisterTouchHitTestingWindow(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  value: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RegisterTouchHitTestingWindow((hwnd), value));
}

export function EvaluateProximityToRect(
  controlBoundingBox: Deno.PointerValue | Uint8Array /* ptr */,
  pHitTestingInput: Deno.PointerValue | Uint8Array /* ptr */,
  pProximityEval: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EvaluateProximityToRect(util.toPointer(controlBoundingBox), util.toPointer(pHitTestingInput), util.toPointer(pProximityEval)));
}

export function EvaluateProximityToPolygon(
  numVertices: number /* u32 */,
  controlPolygon: Deno.PointerValue | Uint8Array /* ptr */,
  pHitTestingInput: Deno.PointerValue | Uint8Array /* ptr */,
  pProximityEval: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EvaluateProximityToPolygon(numVertices, util.toPointer(controlPolygon), util.toPointer(pHitTestingInput), util.toPointer(pProximityEval)));
}

export function PackTouchHitTestingProximityEvaluation(
  pHitTestingInput: Deno.PointerValue | Uint8Array /* ptr */,
  pProximityEval: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.LRESULT */ {
  return libUSER32_dll.PackTouchHitTestingProximityEvaluation(util.toPointer(pHitTestingInput), util.toPointer(pProximityEval));
}

export function GetWindowFeedbackSetting(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  feedback: FEEDBACK_TYPE /* Windows.Win32.UI.Controls.FEEDBACK_TYPE */,
  dwFlags: number /* u32 */,
  pSize: Deno.PointerValue | Uint8Array /* ptr */,
  config: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetWindowFeedbackSetting((hwnd), feedback, dwFlags, util.toPointer(pSize), util.toPointer(config)));
}

export function SetWindowFeedbackSetting(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  feedback: FEEDBACK_TYPE /* Windows.Win32.UI.Controls.FEEDBACK_TYPE */,
  dwFlags: number /* u32 */,
  size: number /* u32 */,
  configuration: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetWindowFeedbackSetting((hwnd), feedback, dwFlags, size, util.toPointer(configuration)));
}

export function SetScrollPos(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nBar: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  nPos: number /* i32 */,
  bRedraw: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libUSER32_dll.SetScrollPos((hWnd), nBar, nPos, util.boolToFfi(bRedraw));
}

export function SetScrollRange(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nBar: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  nMinPos: number /* i32 */,
  nMaxPos: number /* i32 */,
  bRedraw: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetScrollRange((hWnd), nBar, nMinPos, nMaxPos, util.boolToFfi(bRedraw)));
}

export function ShowScrollBar(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wBar: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  bShow: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ShowScrollBar((hWnd), wBar, util.boolToFfi(bShow)));
}

export function EnableScrollBar(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  wSBflags: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  wArrows: ENABLE_SCROLL_BAR_ARROWS /* Windows.Win32.UI.Controls.ENABLE_SCROLL_BAR_ARROWS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnableScrollBar((hWnd), wSBflags, wArrows));
}

export function DlgDirListA(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPathSpec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nIDListBox: number /* i32 */,
  nIDStaticPath: number /* i32 */,
  uFileType: DLG_DIR_LIST_FILE_TYPE /* Windows.Win32.UI.Controls.DLG_DIR_LIST_FILE_TYPE */,
): number /* i32 */ {
  return libUSER32_dll.DlgDirListA((hDlg), util.pstrToFfi(lpPathSpec), nIDListBox, nIDStaticPath, uFileType);
}

export function DlgDirListW(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPathSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nIDListBox: number /* i32 */,
  nIDStaticPath: number /* i32 */,
  uFileType: DLG_DIR_LIST_FILE_TYPE /* Windows.Win32.UI.Controls.DLG_DIR_LIST_FILE_TYPE */,
): number /* i32 */ {
  return libUSER32_dll.DlgDirListW((hDlg), util.pwstrToFfi(lpPathSpec), nIDListBox, nIDStaticPath, uFileType);
}

export function DlgDirSelectExA(
  hwndDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  chCount: number /* i32 */,
  idListBox: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DlgDirSelectExA((hwndDlg), util.pstrToFfi(lpString), chCount, idListBox));
}

export function DlgDirSelectExW(
  hwndDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  chCount: number /* i32 */,
  idListBox: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DlgDirSelectExW((hwndDlg), util.pwstrToFfi(lpString), chCount, idListBox));
}

export function DlgDirListComboBoxA(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPathSpec: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nIDComboBox: number /* i32 */,
  nIDStaticPath: number /* i32 */,
  uFiletype: DLG_DIR_LIST_FILE_TYPE /* Windows.Win32.UI.Controls.DLG_DIR_LIST_FILE_TYPE */,
): number /* i32 */ {
  return libUSER32_dll.DlgDirListComboBoxA((hDlg), util.pstrToFfi(lpPathSpec), nIDComboBox, nIDStaticPath, uFiletype);
}

export function DlgDirListComboBoxW(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpPathSpec: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nIDComboBox: number /* i32 */,
  nIDStaticPath: number /* i32 */,
  uFiletype: DLG_DIR_LIST_FILE_TYPE /* Windows.Win32.UI.Controls.DLG_DIR_LIST_FILE_TYPE */,
): number /* i32 */ {
  return libUSER32_dll.DlgDirListComboBoxW((hDlg), util.pwstrToFfi(lpPathSpec), nIDComboBox, nIDStaticPath, uFiletype);
}

export function DlgDirSelectComboBoxExA(
  hwndDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchOut: number /* i32 */,
  idComboBox: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DlgDirSelectComboBoxExA((hwndDlg), util.pstrToFfi(lpString), cchOut, idComboBox));
}

export function DlgDirSelectComboBoxExW(
  hwndDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchOut: number /* i32 */,
  idComboBox: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DlgDirSelectComboBoxExW((hwndDlg), util.pwstrToFfi(lpString), cchOut, idComboBox));
}

export function SetScrollInfo(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  nBar: SCROLLBAR_CONSTANTS /* Windows.Win32.UI.WindowsAndMessaging.SCROLLBAR_CONSTANTS */,
  lpsi: Deno.PointerValue | Uint8Array /* ptr */,
  redraw: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libUSER32_dll.SetScrollInfo((hwnd), nBar, util.toPointer(lpsi), util.boolToFfi(redraw));
}

export function GetComboBoxInfo(
  hwndCombo: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pcbi: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetComboBoxInfo((hwndCombo), util.toPointer(pcbi)));
}

export function GetListBoxInfo(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libUSER32_dll.GetListBoxInfo((hwnd));
}

export function RegisterPointerDeviceNotifications(
  window: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  notifyRange: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RegisterPointerDeviceNotifications((window), util.boolToFfi(notifyRange)));
}

