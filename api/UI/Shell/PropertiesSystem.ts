/// Auto-generated by Deno Win32: Windows.Win32.UI.Shell.PropertiesSystem.Apis

import * as util from "../../../util.ts";

// Enums
export type GETPROPERTYSTOREFLAGS = number;
export type PKA_FLAGS = number;
export type PSC_STATE = number;
export type PROPENUMTYPE = number;
export type PROPDESC_TYPE_FLAGS = number;
export type PROPDESC_VIEW_FLAGS = number;
export type PROPDESC_DISPLAYTYPE = number;
export type PROPDESC_GROUPING_RANGE = number;
export type PROPDESC_FORMAT_FLAGS = number;
export type PROPDESC_SORTDESCRIPTION = number;
export type PROPDESC_RELATIVEDESCRIPTION_TYPE = number;
export type PROPDESC_AGGREGATION_TYPE = number;
export type PROPDESC_CONDITION_TYPE = number;
export type PROPDESC_SEARCHINFO_FLAGS = number;
export type PROPDESC_COLUMNINDEX_TYPE = number;
export type PROPDESC_ENUMFILTER = number;
export type _PERSIST_SPROPSTORE_FLAGS = number;
export type PSTIME_FLAGS = number;
export type PROPVAR_COMPARE_UNIT = number;
export type PROPVAR_COMPARE_FLAGS = number;
export type PROPVAR_CHANGE_FLAGS = number;
export type DRAWPROGRESSFLAGS = number;
export type SYNC_TRANSFER_STATUS = number;
export type PLACEHOLDER_STATES = number;
export type PROPERTYUI_NAME_FLAGS = number;
export type PROPERTYUI_FLAGS = number;
export type PROPERTYUI_FORMAT_FLAGS = number;
export type PDOPSTATUS = number;
export type SYNC_ENGINE_STATE_FLAGS = number;
export type VARENUM = number;

// Constants
export const PKEY_PIDSTR_MAX = 10;
export const GPS_DEFAULT = 0;
export const GPS_HANDLERPROPERTIESONLY = 1;
export const GPS_READWRITE = 2;
export const GPS_TEMPORARY = 4;
export const GPS_FASTPROPERTIESONLY = 8;
export const GPS_OPENSLOWITEM = 16;
export const GPS_DELAYCREATION = 32;
export const GPS_BESTEFFORT = 64;
export const GPS_NO_OPLOCK = 128;
export const GPS_PREFERQUERYPROPERTIES = 256;
export const GPS_EXTRINSICPROPERTIES = 512;
export const GPS_EXTRINSICPROPERTIESONLY = 1024;
export const GPS_VOLATILEPROPERTIES = 2048;
export const GPS_VOLATILEPROPERTIESONLY = 4096;
export const GPS_MASK_VALID = 8191;
export const PKA_SET = 0;
export const PKA_APPEND = 1;
export const PKA_DELETE = 2;
export const PSC_NORMAL = 0;
export const PSC_NOTINSOURCE = 1;
export const PSC_DIRTY = 2;
export const PSC_READONLY = 3;
export const PET_DISCRETEVALUE = 0;
export const PET_RANGEDVALUE = 1;
export const PET_DEFAULTVALUE = 2;
export const PET_ENDRANGE = 3;
export const PDTF_DEFAULT = 0;
export const PDTF_MULTIPLEVALUES = 1;
export const PDTF_ISINNATE = 2;
export const PDTF_ISGROUP = 4;
export const PDTF_CANGROUPBY = 8;
export const PDTF_CANSTACKBY = 16;
export const PDTF_ISTREEPROPERTY = 32;
export const PDTF_INCLUDEINFULLTEXTQUERY = 64;
export const PDTF_ISVIEWABLE = 128;
export const PDTF_ISQUERYABLE = 256;
export const PDTF_CANBEPURGED = 512;
export const PDTF_SEARCHRAWVALUE = 1024;
export const PDTF_DONTCOERCEEMPTYSTRINGS = 2048;
export const PDTF_ALWAYSINSUPPLEMENTALSTORE = 4096;
export const PDTF_ISSYSTEMPROPERTY = 2147483648;
export const PDTF_MASK_ALL = 2147491839;
export const PDVF_DEFAULT = 0;
export const PDVF_CENTERALIGN = 1;
export const PDVF_RIGHTALIGN = 2;
export const PDVF_BEGINNEWGROUP = 4;
export const PDVF_FILLAREA = 8;
export const PDVF_SORTDESCENDING = 16;
export const PDVF_SHOWONLYIFPRESENT = 32;
export const PDVF_SHOWBYDEFAULT = 64;
export const PDVF_SHOWINPRIMARYLIST = 128;
export const PDVF_SHOWINSECONDARYLIST = 256;
export const PDVF_HIDELABEL = 512;
export const PDVF_HIDDEN = 2048;
export const PDVF_CANWRAP = 4096;
export const PDVF_MASK_ALL = 7167;
export const PDDT_STRING = 0;
export const PDDT_NUMBER = 1;
export const PDDT_BOOLEAN = 2;
export const PDDT_DATETIME = 3;
export const PDDT_ENUMERATED = 4;
export const PDGR_DISCRETE = 0;
export const PDGR_ALPHANUMERIC = 1;
export const PDGR_SIZE = 2;
export const PDGR_DYNAMIC = 3;
export const PDGR_DATE = 4;
export const PDGR_PERCENT = 5;
export const PDGR_ENUMERATED = 6;
export const PDFF_DEFAULT = 0;
export const PDFF_PREFIXNAME = 1;
export const PDFF_FILENAME = 2;
export const PDFF_ALWAYSKB = 4;
export const PDFF_RESERVED_RIGHTTOLEFT = 8;
export const PDFF_SHORTTIME = 16;
export const PDFF_LONGTIME = 32;
export const PDFF_HIDETIME = 64;
export const PDFF_SHORTDATE = 128;
export const PDFF_LONGDATE = 256;
export const PDFF_HIDEDATE = 512;
export const PDFF_RELATIVEDATE = 1024;
export const PDFF_USEEDITINVITATION = 2048;
export const PDFF_READONLY = 4096;
export const PDFF_NOAUTOREADINGORDER = 8192;
export const PDSD_GENERAL = 0;
export const PDSD_A_Z = 1;
export const PDSD_LOWEST_HIGHEST = 2;
export const PDSD_SMALLEST_BIGGEST = 3;
export const PDSD_OLDEST_NEWEST = 4;
export const PDRDT_GENERAL = 0;
export const PDRDT_DATE = 1;
export const PDRDT_SIZE = 2;
export const PDRDT_COUNT = 3;
export const PDRDT_REVISION = 4;
export const PDRDT_LENGTH = 5;
export const PDRDT_DURATION = 6;
export const PDRDT_SPEED = 7;
export const PDRDT_RATE = 8;
export const PDRDT_RATING = 9;
export const PDRDT_PRIORITY = 10;
export const PDAT_DEFAULT = 0;
export const PDAT_FIRST = 1;
export const PDAT_SUM = 2;
export const PDAT_AVERAGE = 3;
export const PDAT_DATERANGE = 4;
export const PDAT_UNION = 5;
export const PDAT_MAX = 6;
export const PDAT_MIN = 7;
export const PDCOT_NONE = 0;
export const PDCOT_STRING = 1;
export const PDCOT_SIZE = 2;
export const PDCOT_DATETIME = 3;
export const PDCOT_BOOLEAN = 4;
export const PDCOT_NUMBER = 5;
export const PDSIF_DEFAULT = 0;
export const PDSIF_ININVERTEDINDEX = 1;
export const PDSIF_ISCOLUMN = 2;
export const PDSIF_ISCOLUMNSPARSE = 4;
export const PDSIF_ALWAYSINCLUDE = 8;
export const PDSIF_USEFORTYPEAHEAD = 16;
export const PDCIT_NONE = 0;
export const PDCIT_ONDISK = 1;
export const PDCIT_INMEMORY = 2;
export const PDCIT_ONDEMAND = 3;
export const PDCIT_ONDISKALL = 4;
export const PDCIT_ONDISKVECTOR = 5;
export const PDEF_ALL = 0;
export const PDEF_SYSTEM = 1;
export const PDEF_NONSYSTEM = 2;
export const PDEF_VIEWABLE = 3;
export const PDEF_QUERYABLE = 4;
export const PDEF_INFULLTEXTQUERY = 5;
export const PDEF_COLUMN = 6;
export const FPSPS_DEFAULT = 0;
export const FPSPS_READONLY = 1;
export const FPSPS_TREAT_NEW_VALUES_AS_DIRTY = 2;
export const PSTF_UTC = 0;
export const PSTF_LOCAL = 1;
export const PVCU_DEFAULT = 0;
export const PVCU_SECOND = 1;
export const PVCU_MINUTE = 2;
export const PVCU_HOUR = 3;
export const PVCU_DAY = 4;
export const PVCU_MONTH = 5;
export const PVCU_YEAR = 6;
export const PVCF_DEFAULT = 0;
export const PVCF_TREATEMPTYASGREATERTHAN = 1;
export const PVCF_USESTRCMP = 2;
export const PVCF_USESTRCMPC = 4;
export const PVCF_USESTRCMPI = 8;
export const PVCF_USESTRCMPIC = 16;
export const PVCF_DIGITSASNUMBERS_CASESENSITIVE = 32;
export const PVCHF_DEFAULT = 0;
export const PVCHF_NOVALUEPROP = 1;
export const PVCHF_ALPHABOOL = 2;
export const PVCHF_NOUSEROVERRIDE = 4;
export const PVCHF_LOCALBOOL = 8;
export const PVCHF_NOHEXSTRING = 16;
export const DPF_NONE = 0;
export const DPF_MARQUEE = 1;
export const DPF_MARQUEE_COMPLETE = 2;
export const DPF_ERROR = 4;
export const DPF_WARNING = 8;
export const DPF_STOPPED = 16;
export const STS_NONE = 0;
export const STS_NEEDSUPLOAD = 1;
export const STS_NEEDSDOWNLOAD = 2;
export const STS_TRANSFERRING = 4;
export const STS_PAUSED = 8;
export const STS_HASERROR = 16;
export const STS_FETCHING_METADATA = 32;
export const STS_USER_REQUESTED_REFRESH = 64;
export const STS_HASWARNING = 128;
export const STS_EXCLUDED = 256;
export const STS_INCOMPLETE = 512;
export const STS_PLACEHOLDER_IFEMPTY = 1024;
export const PS_NONE = 0;
export const PS_MARKED_FOR_OFFLINE_AVAILABILITY = 1;
export const PS_FULL_PRIMARY_STREAM_AVAILABLE = 2;
export const PS_CREATE_FILE_ACCESSIBLE = 4;
export const PS_CLOUDFILE_PLACEHOLDER = 8;
export const PS_DEFAULT = 7;
export const PS_ALL = 15;
export const PUIFNF_DEFAULT = 0;
export const PUIFNF_MNEMONIC = 1;
export const PUIF_DEFAULT = 0;
export const PUIF_RIGHTALIGN = 1;
export const PUIF_NOLABELININFOTIP = 2;
export const PUIFFDF_DEFAULT = 0;
export const PUIFFDF_RIGHTTOLEFT = 1;
export const PUIFFDF_SHORTFORMAT = 2;
export const PUIFFDF_NOTIME = 4;
export const PUIFFDF_FRIENDLYDATE = 8;
export const PDOPS_RUNNING = 1;
export const PDOPS_PAUSED = 2;
export const PDOPS_CANCELLED = 3;
export const PDOPS_STOPPED = 4;
export const PDOPS_ERRORS = 5;
export const SESF_NONE = 0;
export const SESF_SERVICE_QUOTA_NEARING_LIMIT = 1;
export const SESF_SERVICE_QUOTA_EXCEEDED_LIMIT = 2;
export const SESF_AUTHENTICATION_ERROR = 4;
export const SESF_PAUSED_DUE_TO_METERED_NETWORK = 8;
export const SESF_PAUSED_DUE_TO_DISK_SPACE_FULL = 16;
export const SESF_PAUSED_DUE_TO_CLIENT_POLICY = 32;
export const SESF_PAUSED_DUE_TO_SERVICE_POLICY = 64;
export const SESF_SERVICE_UNAVAILABLE = 128;
export const SESF_PAUSED_DUE_TO_USER_REQUEST = 256;
export const SESF_ALL_FLAGS = 511;
export const VT_EMPTY = 0;
export const VT_NULL = 1;
export const VT_I2 = 2;
export const VT_I4 = 3;
export const VT_R4 = 4;
export const VT_R8 = 5;
export const VT_CY = 6;
export const VT_DATE = 7;
export const VT_BSTR = 8;
export const VT_DISPATCH = 9;
export const VT_ERROR = 10;
export const VT_BOOL = 11;
export const VT_VARIANT = 12;
export const VT_UNKNOWN = 13;
export const VT_DECIMAL = 14;
export const VT_I1 = 16;
export const VT_UI1 = 17;
export const VT_UI2 = 18;
export const VT_UI4 = 19;
export const VT_I8 = 20;
export const VT_UI8 = 21;
export const VT_INT = 22;
export const VT_UINT = 23;
export const VT_VOID = 24;
export const VT_HRESULT = 25;
export const VT_PTR = 26;
export const VT_SAFEARRAY = 27;
export const VT_CARRAY = 28;
export const VT_USERDEFINED = 29;
export const VT_LPSTR = 30;
export const VT_LPWSTR = 31;
export const VT_RECORD = 36;
export const VT_INT_PTR = 37;
export const VT_UINT_PTR = 38;
export const VT_FILETIME = 64;
export const VT_BLOB = 65;
export const VT_STREAM = 66;
export const VT_STORAGE = 67;
export const VT_STREAMED_OBJECT = 68;
export const VT_STORED_OBJECT = 69;
export const VT_BLOB_OBJECT = 70;
export const VT_CF = 71;
export const VT_CLSID = 72;
export const VT_VERSIONED_STREAM = 73;
export const VT_BSTR_BLOB = 4095;
export const VT_VECTOR = 4096;
export const VT_ARRAY = 8192;
export const VT_BYREF = 16384;
export const VT_RESERVED = 32768;
export const VT_ILLEGAL = 65535;
export const VT_ILLEGALMASKED = 4095;
export const VT_TYPEMASK = 4095;

// Structs

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPERTYKEY (size: 16)
 */
export interface PROPERTYKEY {
  /** System.Guid */
  fmtid: Uint8Array | Deno.PointerValue;
  /** u32 */
  pid: number;
}

export const sizeofPROPERTYKEY = 16;

export function allocPROPERTYKEY(data?: Partial<PROPERTYKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTYKEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fmtid !== undefined) view.setBigUint64(0, data.fmtid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fmtid))), true);
  // 0x08: u32
  if (data?.pid !== undefined) view.setUint32(8, Number(data.pid), true);
  // 0x0c: pad4
  return buf;
}

export class PROPERTYKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fmtid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get pid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set fmtid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set pid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Shell.PropertiesSystem.PROPPRG (size: 80)
 */
export interface PROPPRG {
  /** u16 */
  flPrg: number;
  /** u16 */
  flPrgInit: number;
  /** array */
  achTitle: Deno.PointerValue;
  /** array */
  achCmdLine: Deno.PointerValue;
  /** array */
  achWorkDir: Deno.PointerValue;
  /** u16 */
  wHotKey: number;
  /** array */
  achIconFile: Deno.PointerValue;
  /** u16 */
  wIconIndex: number;
  /** u32 */
  dwEnhModeFlags: number;
  /** u32 */
  dwRealModeFlags: number;
  /** array */
  achOtherFile: Deno.PointerValue;
  /** array */
  achPIFFile: Deno.PointerValue;
}

export const sizeofPROPPRG = 80;

export function allocPROPPRG(data?: Partial<PROPPRG>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPPRG);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.flPrg !== undefined) view.setUint16(0, Number(data.flPrg), true);
  // 0x02: u16
  if (data?.flPrgInit !== undefined) view.setUint16(2, Number(data.flPrgInit), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.achTitle !== undefined) view.setBigUint64(8, data.achTitle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achTitle))), true);
  // 0x10: pointer
  if (data?.achCmdLine !== undefined) view.setBigUint64(16, data.achCmdLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achCmdLine))), true);
  // 0x18: pointer
  if (data?.achWorkDir !== undefined) view.setBigUint64(24, data.achWorkDir === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achWorkDir))), true);
  // 0x20: u16
  if (data?.wHotKey !== undefined) view.setUint16(32, Number(data.wHotKey), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.achIconFile !== undefined) view.setBigUint64(40, data.achIconFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achIconFile))), true);
  // 0x30: u16
  if (data?.wIconIndex !== undefined) view.setUint16(48, Number(data.wIconIndex), true);
  // 0x32: u32
  if (data?.dwEnhModeFlags !== undefined) view.setUint32(50, Number(data.dwEnhModeFlags), true);
  // 0x36: u32
  if (data?.dwRealModeFlags !== undefined) view.setUint32(54, Number(data.dwRealModeFlags), true);
  // 0x3a: pad6
  // 0x40: pointer
  if (data?.achOtherFile !== undefined) view.setBigUint64(64, data.achOtherFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achOtherFile))), true);
  // 0x48: pointer
  if (data?.achPIFFile !== undefined) view.setBigUint64(72, data.achPIFFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achPIFFile))), true);
  return buf;
}

export class PROPPRGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get flPrg(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get flPrgInit(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get achTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get achCmdLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get achWorkDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get wHotKey(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get achIconFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get wIconIndex(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u32
  get dwEnhModeFlags(): number {
    return this.view.getUint32(50, true);
  }

  // 0x36: u32
  get dwRealModeFlags(): number {
    return this.view.getUint32(54, true);
  }

  // 0x3a: pad6

  // 0x40: pointer
  get achOtherFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get achPIFFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set flPrg(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set flPrgInit(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set achTitle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set achCmdLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set achWorkDir(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set wHotKey(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set achIconFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u16
  set wIconIndex(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u32
  set dwEnhModeFlags(value: number) {
    this.view.setUint32(50, value, true);
  }

  // 0x36: u32
  set dwRealModeFlags(value: number) {
    this.view.setUint32(54, value, true);
  }

  // 0x3a: pad6

  // 0x40: pointer
  set achOtherFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set achPIFFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

export type PWSTR = Deno.PointerValue | Uint8Array;

export type BOOL = number;

export type BSTR = Deno.PointerValue | Uint8Array;

export type HINSTANCE = bigint | number;

export type HANDLE = bigint | number;

export type PSTR = Deno.PointerValue | Uint8Array;

export type HWND = bigint | number;

// Native Libraries

try {
  var libPROPSYS_dll = Deno.dlopen("PROPSYS.dll", {
    PropVariantToWinRTPropertyValue: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WinRTPropertyValueToPropVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PSFormatForDisplay: {
      parameters: ["pointer", "pointer", "u32", "buffer", "u32"],
      result: "pointer",
    },
    PSFormatForDisplayAlloc: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PSFormatPropertyValue: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PSGetImageReferenceForValue: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSStringFromPropertyKey: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    PSPropertyKeyFromString: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PSCreateMemoryPropertyStore: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PSCreateDelayedMultiplexPropertyStore: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PSCreateMultiplexPropertyStore: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PSCreatePropertyChangeArray: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PSCreateSimplePropertyChange: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertyDescription: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertyDescriptionByName: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PSLookupPropertyHandlerCLSID: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PSGetItemPropertyHandler: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetItemPropertyHandlerWithCreateObject: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertyValue: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSSetPropertyValue: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSRegisterPropertySchema: {
      parameters: ["buffer"],
      result: "pointer",
    },
    PSUnregisterPropertySchema: {
      parameters: ["buffer"],
      result: "pointer",
    },
    PSRefreshPropertySchema: {
      parameters: [],
      result: "pointer",
    },
    PSEnumeratePropertyDescriptions: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertyKeyFromName: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PSGetNameFromPropertyKey: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PSCoerceToCanonicalValue: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertyDescriptionListFromString: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PSCreatePropertyStoreFromPropertySetStorage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PSCreatePropertyStoreFromObject: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PSCreateAdapterFromPropertyStore: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertySystem: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PSGetPropertyFromPropertyStorage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    PSGetNamedPropertyFromPropertyStorage: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadType: {
      parameters: ["pointer", "buffer", "pointer", "u16"],
      result: "pointer",
    },
    PSPropertyBag_ReadStr: {
      parameters: ["pointer", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    PSPropertyBag_ReadStrAlloc: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadBSTR: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteStr: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    PSPropertyBag_WriteBSTR: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadInt: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteInt: {
      parameters: ["pointer", "buffer", "i32"],
      result: "pointer",
    },
    PSPropertyBag_ReadSHORT: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteSHORT: {
      parameters: ["pointer", "buffer", "i16"],
      result: "pointer",
    },
    PSPropertyBag_ReadLONG: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteLONG: {
      parameters: ["pointer", "buffer", "i32"],
      result: "pointer",
    },
    PSPropertyBag_ReadDWORD: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteDWORD: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    PSPropertyBag_ReadBOOL: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteBOOL: {
      parameters: ["pointer", "buffer", "i32"],
      result: "pointer",
    },
    PSPropertyBag_ReadPOINTL: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WritePOINTL: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadPOINTS: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WritePOINTS: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadRECTL: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteRECTL: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadStream: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteStream: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_Delete: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    PSPropertyBag_ReadULONGLONG: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteULONGLONG: {
      parameters: ["pointer", "buffer", "u64"],
      result: "pointer",
    },
    PSPropertyBag_ReadUnknown: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteUnknown: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadGUID: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WriteGUID: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_ReadPropertyKey: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    PSPropertyBag_WritePropertyKey: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromResource: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromBuffer: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromCLSID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromGUIDAsString: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromFileTime: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromPropVariantVectorElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantVectorFromPropVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromStrRet: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromBooleanVector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromInt16Vector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromUInt16Vector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromInt32Vector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromUInt32Vector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromInt64Vector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromUInt64Vector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromDoubleVector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromFileTimeVector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromStringVector: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitPropVariantFromStringAsVector: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PropVariantToBooleanWithDefault: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    PropVariantToInt16WithDefault: {
      parameters: ["pointer", "i16"],
      result: "i16",
    },
    PropVariantToUInt16WithDefault: {
      parameters: ["pointer", "u16"],
      result: "u16",
    },
    PropVariantToInt32WithDefault: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    PropVariantToUInt32WithDefault: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    PropVariantToInt64WithDefault: {
      parameters: ["pointer", "i64"],
      result: "i64",
    },
    PropVariantToUInt64WithDefault: {
      parameters: ["pointer", "u64"],
      result: "u64",
    },
    PropVariantToDoubleWithDefault: {
      parameters: ["pointer", "f64"],
      result: "f64",
    },
    PropVariantToStringWithDefault: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    PropVariantToBoolean: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToInt16: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt16: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToInt32: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt32: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToInt64: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt64: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToDouble: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToBuffer: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    PropVariantToString: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    PropVariantToGUID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToStringAlloc: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToBSTR: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToStrRet: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToFileTime: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetElementCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    PropVariantToBooleanVector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToInt16Vector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt16Vector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToInt32Vector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt32Vector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToInt64Vector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt64Vector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToDoubleVector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToFileTimeVector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToStringVector: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantToBooleanVectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToInt16VectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt16VectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToInt32VectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt32VectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToInt64VectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToUInt64VectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToDoubleVectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToFileTimeVectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToStringVectorAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantGetBooleanElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetInt16Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetUInt16Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetInt32Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetUInt32Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetInt64Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetUInt64Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetDoubleElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetFileTimeElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    PropVariantGetStringElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ClearPropVariantArray: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    PropVariantCompareEx: {
      parameters: ["pointer", "pointer", "i32", "u32"],
      result: "i32",
    },
    PropVariantChangeType: {
      parameters: ["pointer", "pointer", "u32", "u16"],
      result: "pointer",
    },
    PropVariantToVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToPropVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitVariantFromResource: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromBuffer: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromGUIDAsString: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitVariantFromFileTime: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InitVariantFromFileTimeArray: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromStrRet: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    InitVariantFromVariantArrayElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromBooleanArray: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromInt16Array: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromUInt16Array: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromInt32Array: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromUInt32Array: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromInt64Array: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromUInt64Array: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromDoubleArray: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    InitVariantFromStringArray: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToBooleanWithDefault: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    VariantToInt16WithDefault: {
      parameters: ["pointer", "i16"],
      result: "i16",
    },
    VariantToUInt16WithDefault: {
      parameters: ["pointer", "u16"],
      result: "u16",
    },
    VariantToInt32WithDefault: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    VariantToUInt32WithDefault: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    VariantToInt64WithDefault: {
      parameters: ["pointer", "i64"],
      result: "i64",
    },
    VariantToUInt64WithDefault: {
      parameters: ["pointer", "u64"],
      result: "u64",
    },
    VariantToDoubleWithDefault: {
      parameters: ["pointer", "f64"],
      result: "f64",
    },
    VariantToStringWithDefault: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    VariantToBoolean: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToInt16: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToUInt16: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToInt32: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToUInt32: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToInt64: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToUInt64: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToDouble: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToBuffer: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    VariantToGUID: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToString: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    VariantToStringAlloc: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToDosDateTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToStrRet: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    VariantToFileTime: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetElementCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    VariantToBooleanArray: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToInt16Array: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToUInt16Array: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToInt32Array: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToUInt32Array: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToInt64Array: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToUInt64Array: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToDoubleArray: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToStringArray: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantToBooleanArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToInt16ArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToUInt16ArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToInt32ArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToUInt32ArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToInt64ArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToUInt64ArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToDoubleArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantToStringArrayAlloc: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    VariantGetBooleanElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetInt16Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetUInt16Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetInt32Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetUInt32Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetInt64Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetUInt64Elem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetDoubleElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    VariantGetStringElem: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ClearVariantArray: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    VariantCompare: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSHELL32_dll = Deno.dlopen("SHELL32.dll", {
    SHGetPropertyStoreFromIDList: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHGetPropertyStoreFromParsingName: {
      parameters: ["buffer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHAddDefaultPropertiesByExt: {
      parameters: ["buffer", "pointer"],
      result: "pointer",
    },
    PifMgr_OpenProperties: {
      parameters: ["buffer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    PifMgr_GetProperties: {
      parameters: ["pointer", "buffer", "pointer", "i32", "u32"],
      result: "i32",
    },
    PifMgr_SetProperties: {
      parameters: ["pointer", "buffer", "pointer", "i32", "u32"],
      result: "i32",
    },
    PifMgr_CloseProperties: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    SHPropStgCreate: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHPropStgReadMultiple: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    SHPropStgWriteMultiple: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    SHGetPropertyStoreForWindow: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function PropVariantToWinRTPropertyValue(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToWinRTPropertyValue(util.toPointer(propvar), util.toPointer(riid), util.toPointer(ppv));
}

export function WinRTPropertyValueToPropVariant(
  punkPropertyValue: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.WinRTPropertyValueToPropVariant(util.toPointer(punkPropertyValue), util.toPointer(ppropvar));
}

export function PSFormatForDisplay(
  propkey: Deno.PointerValue | Uint8Array /* ptr */,
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pdfFlags: PROPDESC_FORMAT_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PROPDESC_FORMAT_FLAGS */,
  pwszText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchText: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSFormatForDisplay(util.toPointer(propkey), util.toPointer(propvar), pdfFlags, util.pwstrToFfi(pwszText), cchText);
}

export function PSFormatForDisplayAlloc(
  key: Deno.PointerValue | Uint8Array /* ptr */,
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pdff: PROPDESC_FORMAT_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PROPDESC_FORMAT_FLAGS */,
  ppszDisplay: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSFormatForDisplayAlloc(util.toPointer(key), util.toPointer(propvar), pdff, util.toPointer(ppszDisplay));
}

export function PSFormatPropertyValue(
  pps: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  ppd: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyDescription */,
  pdff: PROPDESC_FORMAT_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PROPDESC_FORMAT_FLAGS */,
  ppszDisplay: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSFormatPropertyValue(util.toPointer(pps), util.toPointer(ppd), pdff, util.toPointer(ppszDisplay));
}

export function PSGetImageReferenceForValue(
  propkey: Deno.PointerValue | Uint8Array /* ptr */,
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  ppszImageRes: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetImageReferenceForValue(util.toPointer(propkey), util.toPointer(propvar), util.toPointer(ppszImageRes));
}

export function PSStringFromPropertyKey(
  pkey: Deno.PointerValue | Uint8Array /* ptr */,
  psz: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cch: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSStringFromPropertyKey(util.toPointer(pkey), util.pwstrToFfi(psz), cch);
}

export function PSPropertyKeyFromString(
  pszString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pkey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyKeyFromString(util.pwstrToFfi(pszString), util.toPointer(pkey));
}

export function PSCreateMemoryPropertyStore(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreateMemoryPropertyStore(util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreateDelayedMultiplexPropertyStore(
  flags: GETPROPERTYSTOREFLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS */,
  pdpsf: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IDelayedPropertyStoreFactory */,
  rgStoreIds: Deno.PointerValue | Uint8Array /* ptr */,
  cStores: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreateDelayedMultiplexPropertyStore(flags, util.toPointer(pdpsf), util.toPointer(rgStoreIds), cStores, util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreateMultiplexPropertyStore(
  prgpunkStores: Deno.PointerValue | Uint8Array /* ptr */,
  cStores: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreateMultiplexPropertyStore(util.toPointer(prgpunkStores), cStores, util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreatePropertyChangeArray(
  rgpropkey: Deno.PointerValue | Uint8Array /* ptr */,
  rgflags: Deno.PointerValue | Uint8Array /* ptr */,
  rgpropvar: Deno.PointerValue | Uint8Array /* ptr */,
  cChanges: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreatePropertyChangeArray(util.toPointer(rgpropkey), util.toPointer(rgflags), util.toPointer(rgpropvar), cChanges, util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreateSimplePropertyChange(
  flags: PKA_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PKA_FLAGS */,
  key: Deno.PointerValue | Uint8Array /* ptr */,
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreateSimplePropertyChange(flags, util.toPointer(key), util.toPointer(propvar), util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetPropertyDescription(
  propkey: Deno.PointerValue | Uint8Array /* ptr */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertyDescription(util.toPointer(propkey), util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetPropertyDescriptionByName(
  pszCanonicalName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertyDescriptionByName(util.pwstrToFfi(pszCanonicalName), util.toPointer(riid), util.toPointer(ppv));
}

export function PSLookupPropertyHandlerCLSID(
  pszFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pclsid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSLookupPropertyHandlerCLSID(util.pwstrToFfi(pszFilePath), util.toPointer(pclsid));
}

export function PSGetItemPropertyHandler(
  punkItem: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  fReadWrite: boolean /* Windows.Win32.Foundation.BOOL */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetItemPropertyHandler(util.toPointer(punkItem), util.boolToFfi(fReadWrite), util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetItemPropertyHandlerWithCreateObject(
  punkItem: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  fReadWrite: boolean /* Windows.Win32.Foundation.BOOL */,
  punkCreateObject: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetItemPropertyHandlerWithCreateObject(util.toPointer(punkItem), util.boolToFfi(fReadWrite), util.toPointer(punkCreateObject), util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetPropertyValue(
  pps: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  ppd: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyDescription */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertyValue(util.toPointer(pps), util.toPointer(ppd), util.toPointer(ppropvar));
}

export function PSSetPropertyValue(
  pps: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  ppd: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyDescription */,
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSSetPropertyValue(util.toPointer(pps), util.toPointer(ppd), util.toPointer(propvar));
}

export function PSRegisterPropertySchema(
  pszPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSRegisterPropertySchema(util.pwstrToFfi(pszPath));
}

export function PSUnregisterPropertySchema(
  pszPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSUnregisterPropertySchema(util.pwstrToFfi(pszPath));
}

export function PSRefreshPropertySchema(): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSRefreshPropertySchema();
}

export function PSEnumeratePropertyDescriptions(
  filterOn: PROPDESC_ENUMFILTER /* Windows.Win32.UI.Shell.PropertiesSystem.PROPDESC_ENUMFILTER */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSEnumeratePropertyDescriptions(filterOn, util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetPropertyKeyFromName(
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppropkey: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertyKeyFromName(util.pwstrToFfi(pszName), util.toPointer(ppropkey));
}

export function PSGetNameFromPropertyKey(
  propkey: Deno.PointerValue | Uint8Array /* ptr */,
  ppszCanonicalName: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetNameFromPropertyKey(util.toPointer(propkey), util.toPointer(ppszCanonicalName));
}

export function PSCoerceToCanonicalValue(
  key: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCoerceToCanonicalValue(util.toPointer(key), util.toPointer(ppropvar));
}

export function PSGetPropertyDescriptionListFromString(
  pszPropList: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertyDescriptionListFromString(util.pwstrToFfi(pszPropList), util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreatePropertyStoreFromPropertySetStorage(
  ppss: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertySetStorage */,
  grfMode: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreatePropertyStoreFromPropertySetStorage(util.toPointer(ppss), grfMode, util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreatePropertyStoreFromObject(
  punk: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
  grfMode: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreatePropertyStoreFromObject(util.toPointer(punk), grfMode, util.toPointer(riid), util.toPointer(ppv));
}

export function PSCreateAdapterFromPropertyStore(
  pps: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSCreateAdapterFromPropertyStore(util.toPointer(pps), util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetPropertySystem(
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertySystem(util.toPointer(riid), util.toPointer(ppv));
}

export function PSGetPropertyFromPropertyStorage(
  psps: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
  rpkey: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetPropertyFromPropertyStorage(util.toPointer(psps), cb, util.toPointer(rpkey), util.toPointer(ppropvar));
}

export function PSGetNamedPropertyFromPropertyStorage(
  psps: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSGetNamedPropertyFromPropertyStorage(util.toPointer(psps), cb, util.pwstrToFfi(pszName), util.toPointer(ppropvar));
}

export function PSPropertyBag_ReadType(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  type: VARENUM /* Windows.Win32.System.Com.VARENUM */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadType(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(var__), type);
}

export function PSPropertyBag_ReadStr(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  characterCount: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadStr(util.toPointer(propBag), util.pwstrToFfi(propName), util.pwstrToFfi(value), characterCount);
}

export function PSPropertyBag_ReadStrAlloc(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadStrAlloc(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_ReadBSTR(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadBSTR(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteStr(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteStr(util.toPointer(propBag), util.pwstrToFfi(propName), util.pwstrToFfi(value));
}

export function PSPropertyBag_WriteBSTR(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.BSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteBSTR(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_ReadInt(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadInt(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteInt(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteInt(util.toPointer(propBag), util.pwstrToFfi(propName), value);
}

export function PSPropertyBag_ReadSHORT(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadSHORT(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteSHORT(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: number /* i16 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteSHORT(util.toPointer(propBag), util.pwstrToFfi(propName), value);
}

export function PSPropertyBag_ReadLONG(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadLONG(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteLONG(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteLONG(util.toPointer(propBag), util.pwstrToFfi(propName), value);
}

export function PSPropertyBag_ReadDWORD(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadDWORD(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteDWORD(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteDWORD(util.toPointer(propBag), util.pwstrToFfi(propName), value);
}

export function PSPropertyBag_ReadBOOL(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadBOOL(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteBOOL(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteBOOL(util.toPointer(propBag), util.pwstrToFfi(propName), util.boolToFfi(value));
}

export function PSPropertyBag_ReadPOINTL(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadPOINTL(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WritePOINTL(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WritePOINTL(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_ReadPOINTS(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadPOINTS(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WritePOINTS(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WritePOINTS(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_ReadRECTL(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadRECTL(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteRECTL(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteRECTL(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_ReadStream(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadStream(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteStream(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IStream */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteStream(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_Delete(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_Delete(util.toPointer(propBag), util.pwstrToFfi(propName));
}

export function PSPropertyBag_ReadULONGLONG(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadULONGLONG(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteULONGLONG(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: bigint | number /* u64 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteULONGLONG(util.toPointer(propBag), util.pwstrToFfi(propName), value);
}

export function PSPropertyBag_ReadUnknown(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadUnknown(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(riid), util.toPointer(ppv));
}

export function PSPropertyBag_WriteUnknown(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  punk: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteUnknown(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(punk));
}

export function PSPropertyBag_ReadGUID(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadGUID(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WriteGUID(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WriteGUID(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_ReadPropertyKey(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_ReadPropertyKey(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function PSPropertyBag_WritePropertyKey(
  propBag: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyBag */,
  propName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  value: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PSPropertyBag_WritePropertyKey(util.toPointer(propBag), util.pwstrToFfi(propName), util.toPointer(value));
}

export function InitPropVariantFromResource(
  hinst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  id: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromResource(util.toPointer(hinst), id, util.toPointer(ppropvar));
}

export function InitPropVariantFromBuffer(
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromBuffer(util.toPointer(pv), cb, util.toPointer(ppropvar));
}

export function InitPropVariantFromCLSID(
  clsid: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromCLSID(util.toPointer(clsid), util.toPointer(ppropvar));
}

export function InitPropVariantFromGUIDAsString(
  guid: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromGUIDAsString(util.toPointer(guid), util.toPointer(ppropvar));
}

export function InitPropVariantFromFileTime(
  pftIn: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromFileTime(util.toPointer(pftIn), util.toPointer(ppropvar));
}

export function InitPropVariantFromPropVariantVectorElem(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromPropVariantVectorElem(util.toPointer(propvarIn), iElem, util.toPointer(ppropvar));
}

export function InitPropVariantVectorFromPropVariant(
  propvarSingle: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvarVector: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantVectorFromPropVariant(util.toPointer(propvarSingle), util.toPointer(ppropvarVector));
}

export function InitPropVariantFromStrRet(
  pstrret: Deno.PointerValue | Uint8Array /* ptr */,
  pidl: Deno.PointerValue | Uint8Array /* ptr */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromStrRet(util.toPointer(pstrret), util.toPointer(pidl), util.toPointer(ppropvar));
}

export function InitPropVariantFromBooleanVector(
  prgf: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromBooleanVector(util.toPointer(prgf), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromInt16Vector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromInt16Vector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromUInt16Vector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromUInt16Vector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromInt32Vector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromInt32Vector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromUInt32Vector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromUInt32Vector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromInt64Vector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromInt64Vector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromUInt64Vector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromUInt64Vector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromDoubleVector(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromDoubleVector(util.toPointer(prgn), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromFileTimeVector(
  prgft: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromFileTimeVector(util.toPointer(prgft), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromStringVector(
  prgsz: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromStringVector(util.toPointer(prgsz), cElems, util.toPointer(ppropvar));
}

export function InitPropVariantFromStringAsVector(
  psz: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppropvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitPropVariantFromStringAsVector(util.pwstrToFfi(psz), util.toPointer(ppropvar));
}

export function PropVariantToBooleanWithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  fDefault: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libPROPSYS_dll.PropVariantToBooleanWithDefault(util.toPointer(propvarIn), util.boolToFfi(fDefault)));
}

export function PropVariantToInt16WithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  iDefault: number /* i16 */,
): number /* i16 */ {
  return libPROPSYS_dll.PropVariantToInt16WithDefault(util.toPointer(propvarIn), iDefault);
}

export function PropVariantToUInt16WithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  uiDefault: number /* u16 */,
): number /* u16 */ {
  return libPROPSYS_dll.PropVariantToUInt16WithDefault(util.toPointer(propvarIn), uiDefault);
}

export function PropVariantToInt32WithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  lDefault: number /* i32 */,
): number /* i32 */ {
  return libPROPSYS_dll.PropVariantToInt32WithDefault(util.toPointer(propvarIn), lDefault);
}

export function PropVariantToUInt32WithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  ulDefault: number /* u32 */,
): number /* u32 */ {
  return libPROPSYS_dll.PropVariantToUInt32WithDefault(util.toPointer(propvarIn), ulDefault);
}

export function PropVariantToInt64WithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  llDefault: bigint | number /* i64 */,
): bigint | number /* i64 */ {
  return libPROPSYS_dll.PropVariantToInt64WithDefault(util.toPointer(propvarIn), llDefault);
}

export function PropVariantToUInt64WithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  ullDefault: bigint | number /* u64 */,
): bigint | number /* u64 */ {
  return libPROPSYS_dll.PropVariantToUInt64WithDefault(util.toPointer(propvarIn), ullDefault);
}

export function PropVariantToDoubleWithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  dblDefault: number /* f64 */,
): number /* f64 */ {
  return libPROPSYS_dll.PropVariantToDoubleWithDefault(util.toPointer(propvarIn), dblDefault);
}

export function PropVariantToStringWithDefault(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  pszDefault: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libPROPSYS_dll.PropVariantToStringWithDefault(util.toPointer(propvarIn), util.pwstrToFfi(pszDefault)));
}

export function PropVariantToBoolean(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  pfRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToBoolean(util.toPointer(propvarIn), util.toPointer(pfRet));
}

export function PropVariantToInt16(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  piRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt16(util.toPointer(propvarIn), util.toPointer(piRet));
}

export function PropVariantToUInt16(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  puiRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt16(util.toPointer(propvarIn), util.toPointer(puiRet));
}

export function PropVariantToInt32(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  plRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt32(util.toPointer(propvarIn), util.toPointer(plRet));
}

export function PropVariantToUInt32(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  pulRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt32(util.toPointer(propvarIn), util.toPointer(pulRet));
}

export function PropVariantToInt64(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  pllRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt64(util.toPointer(propvarIn), util.toPointer(pllRet));
}

export function PropVariantToUInt64(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  pullRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt64(util.toPointer(propvarIn), util.toPointer(pullRet));
}

export function PropVariantToDouble(
  propvarIn: Deno.PointerValue | Uint8Array /* ptr */,
  pdblRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToDouble(util.toPointer(propvarIn), util.toPointer(pdblRet));
}

export function PropVariantToBuffer(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToBuffer(util.toPointer(propvar), util.toPointer(pv), cb);
}

export function PropVariantToString(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  psz: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cch: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToString(util.toPointer(propvar), util.pwstrToFfi(psz), cch);
}

export function PropVariantToGUID(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pguid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToGUID(util.toPointer(propvar), util.toPointer(pguid));
}

export function PropVariantToStringAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  ppszOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToStringAlloc(util.toPointer(propvar), util.toPointer(ppszOut));
}

export function PropVariantToBSTR(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pbstrOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToBSTR(util.toPointer(propvar), util.toPointer(pbstrOut));
}

export function PropVariantToStrRet(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pstrret: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToStrRet(util.toPointer(propvar), util.toPointer(pstrret));
}

export function PropVariantToFileTime(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pstfOut: PSTIME_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PSTIME_FLAGS */,
  pftOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToFileTime(util.toPointer(propvar), pstfOut, util.toPointer(pftOut));
}

export function PropVariantGetElementCount(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPROPSYS_dll.PropVariantGetElementCount(util.toPointer(propvar));
}

export function PropVariantToBooleanVector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgf: Deno.PointerValue | Uint8Array /* ptr */,
  crgf: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToBooleanVector(util.toPointer(propvar), util.toPointer(prgf), crgf, util.toPointer(pcElem));
}

export function PropVariantToInt16Vector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt16Vector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToUInt16Vector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt16Vector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToInt32Vector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt32Vector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToUInt32Vector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt32Vector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToInt64Vector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt64Vector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToUInt64Vector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt64Vector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToDoubleVector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToDoubleVector(util.toPointer(propvar), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function PropVariantToFileTimeVector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgft: Deno.PointerValue | Uint8Array /* ptr */,
  crgft: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToFileTimeVector(util.toPointer(propvar), util.toPointer(prgft), crgft, util.toPointer(pcElem));
}

export function PropVariantToStringVector(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  prgsz: Deno.PointerValue | Uint8Array /* ptr */,
  crgsz: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToStringVector(util.toPointer(propvar), util.toPointer(prgsz), crgsz, util.toPointer(pcElem));
}

export function PropVariantToBooleanVectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgf: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToBooleanVectorAlloc(util.toPointer(propvar), util.toPointer(pprgf), util.toPointer(pcElem));
}

export function PropVariantToInt16VectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt16VectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToUInt16VectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt16VectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToInt32VectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt32VectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToUInt32VectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt32VectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToInt64VectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToInt64VectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToUInt64VectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToUInt64VectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToDoubleVectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToDoubleVectorAlloc(util.toPointer(propvar), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function PropVariantToFileTimeVectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgft: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToFileTimeVectorAlloc(util.toPointer(propvar), util.toPointer(pprgft), util.toPointer(pcElem));
}

export function PropVariantToStringVectorAlloc(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  pprgsz: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToStringVectorAlloc(util.toPointer(propvar), util.toPointer(pprgsz), util.toPointer(pcElem));
}

export function PropVariantGetBooleanElem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pfVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetBooleanElem(util.toPointer(propvar), iElem, util.toPointer(pfVal));
}

export function PropVariantGetInt16Elem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetInt16Elem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetUInt16Elem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetUInt16Elem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetInt32Elem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetInt32Elem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetUInt32Elem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetUInt32Elem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetInt64Elem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetInt64Elem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetUInt64Elem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetUInt64Elem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetDoubleElem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetDoubleElem(util.toPointer(propvar), iElem, util.toPointer(pnVal));
}

export function PropVariantGetFileTimeElem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pftVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetFileTimeElem(util.toPointer(propvar), iElem, util.toPointer(pftVal));
}

export function PropVariantGetStringElem(
  propvar: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  ppszVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantGetStringElem(util.toPointer(propvar), iElem, util.toPointer(ppszVal));
}

export function ClearPropVariantArray(
  rgPropVar: Deno.PointerValue | Uint8Array /* ptr */,
  cVars: number /* u32 */,
): void /* void */ {
  return libPROPSYS_dll.ClearPropVariantArray(util.toPointer(rgPropVar), cVars);
}

export function PropVariantCompareEx(
  propvar1: Deno.PointerValue | Uint8Array /* ptr */,
  propvar2: Deno.PointerValue | Uint8Array /* ptr */,
  unit: PROPVAR_COMPARE_UNIT /* Windows.Win32.UI.Shell.PropertiesSystem.PROPVAR_COMPARE_UNIT */,
  flags: PROPVAR_COMPARE_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PROPVAR_COMPARE_FLAGS */,
): number /* i32 */ {
  return libPROPSYS_dll.PropVariantCompareEx(util.toPointer(propvar1), util.toPointer(propvar2), unit, flags);
}

export function PropVariantChangeType(
  ppropvarDest: Deno.PointerValue | Uint8Array /* ptr */,
  propvarSrc: Deno.PointerValue | Uint8Array /* ptr */,
  flags: PROPVAR_CHANGE_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PROPVAR_CHANGE_FLAGS */,
  vt: VARENUM /* Windows.Win32.System.Com.VARENUM */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantChangeType(util.toPointer(ppropvarDest), util.toPointer(propvarSrc), flags, vt);
}

export function PropVariantToVariant(
  pPropVar: Deno.PointerValue | Uint8Array /* ptr */,
  pVar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.PropVariantToVariant(util.toPointer(pPropVar), util.toPointer(pVar));
}

export function VariantToPropVariant(
  pVar: Deno.PointerValue | Uint8Array /* ptr */,
  pPropVar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToPropVariant(util.toPointer(pVar), util.toPointer(pPropVar));
}

export function InitVariantFromResource(
  hinst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HINSTANCE */,
  id: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromResource(util.toPointer(hinst), id, util.toPointer(pvar));
}

export function InitVariantFromBuffer(
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromBuffer(util.toPointer(pv), cb, util.toPointer(pvar));
}

export function InitVariantFromGUIDAsString(
  guid: Deno.PointerValue | Uint8Array /* ptr */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromGUIDAsString(util.toPointer(guid), util.toPointer(pvar));
}

export function InitVariantFromFileTime(
  pft: Deno.PointerValue | Uint8Array /* ptr */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromFileTime(util.toPointer(pft), util.toPointer(pvar));
}

export function InitVariantFromFileTimeArray(
  prgft: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromFileTimeArray(util.toPointer(prgft), cElems, util.toPointer(pvar));
}

export function InitVariantFromStrRet(
  pstrret: Deno.PointerValue | Uint8Array /* ptr */,
  pidl: Deno.PointerValue | Uint8Array /* ptr */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromStrRet(util.toPointer(pstrret), util.toPointer(pidl), util.toPointer(pvar));
}

export function InitVariantFromVariantArrayElem(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromVariantArrayElem(util.toPointer(varIn), iElem, util.toPointer(pvar));
}

export function InitVariantFromBooleanArray(
  prgf: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromBooleanArray(util.toPointer(prgf), cElems, util.toPointer(pvar));
}

export function InitVariantFromInt16Array(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromInt16Array(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromUInt16Array(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromUInt16Array(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromInt32Array(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromInt32Array(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromUInt32Array(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromUInt32Array(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromInt64Array(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromInt64Array(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromUInt64Array(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromUInt64Array(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromDoubleArray(
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromDoubleArray(util.toPointer(prgn), cElems, util.toPointer(pvar));
}

export function InitVariantFromStringArray(
  prgsz: Deno.PointerValue | Uint8Array /* ptr */,
  cElems: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.InitVariantFromStringArray(util.toPointer(prgsz), cElems, util.toPointer(pvar));
}

export function VariantToBooleanWithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  fDefault: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libPROPSYS_dll.VariantToBooleanWithDefault(util.toPointer(varIn), util.boolToFfi(fDefault)));
}

export function VariantToInt16WithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  iDefault: number /* i16 */,
): number /* i16 */ {
  return libPROPSYS_dll.VariantToInt16WithDefault(util.toPointer(varIn), iDefault);
}

export function VariantToUInt16WithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  uiDefault: number /* u16 */,
): number /* u16 */ {
  return libPROPSYS_dll.VariantToUInt16WithDefault(util.toPointer(varIn), uiDefault);
}

export function VariantToInt32WithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  lDefault: number /* i32 */,
): number /* i32 */ {
  return libPROPSYS_dll.VariantToInt32WithDefault(util.toPointer(varIn), lDefault);
}

export function VariantToUInt32WithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  ulDefault: number /* u32 */,
): number /* u32 */ {
  return libPROPSYS_dll.VariantToUInt32WithDefault(util.toPointer(varIn), ulDefault);
}

export function VariantToInt64WithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  llDefault: bigint | number /* i64 */,
): bigint | number /* i64 */ {
  return libPROPSYS_dll.VariantToInt64WithDefault(util.toPointer(varIn), llDefault);
}

export function VariantToUInt64WithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  ullDefault: bigint | number /* u64 */,
): bigint | number /* u64 */ {
  return libPROPSYS_dll.VariantToUInt64WithDefault(util.toPointer(varIn), ullDefault);
}

export function VariantToDoubleWithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  dblDefault: number /* f64 */,
): number /* f64 */ {
  return libPROPSYS_dll.VariantToDoubleWithDefault(util.toPointer(varIn), dblDefault);
}

export function VariantToStringWithDefault(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pszDefault: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libPROPSYS_dll.VariantToStringWithDefault(util.toPointer(varIn), util.pwstrToFfi(pszDefault)));
}

export function VariantToBoolean(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pfRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToBoolean(util.toPointer(varIn), util.toPointer(pfRet));
}

export function VariantToInt16(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  piRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt16(util.toPointer(varIn), util.toPointer(piRet));
}

export function VariantToUInt16(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  puiRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt16(util.toPointer(varIn), util.toPointer(puiRet));
}

export function VariantToInt32(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  plRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt32(util.toPointer(varIn), util.toPointer(plRet));
}

export function VariantToUInt32(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pulRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt32(util.toPointer(varIn), util.toPointer(pulRet));
}

export function VariantToInt64(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pllRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt64(util.toPointer(varIn), util.toPointer(pllRet));
}

export function VariantToUInt64(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pullRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt64(util.toPointer(varIn), util.toPointer(pullRet));
}

export function VariantToDouble(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pdblRet: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToDouble(util.toPointer(varIn), util.toPointer(pdblRet));
}

export function VariantToBuffer(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pv: Deno.PointerValue | Uint8Array /* ptr */,
  cb: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToBuffer(util.toPointer(varIn), util.toPointer(pv), cb);
}

export function VariantToGUID(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pguid: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToGUID(util.toPointer(varIn), util.toPointer(pguid));
}

export function VariantToString(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pszBuf: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchBuf: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToString(util.toPointer(varIn), util.pwstrToFfi(pszBuf), cchBuf);
}

export function VariantToStringAlloc(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  ppszBuf: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToStringAlloc(util.toPointer(varIn), util.toPointer(ppszBuf));
}

export function VariantToDosDateTime(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pwDate: Deno.PointerValue | Uint8Array /* ptr */,
  pwTime: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToDosDateTime(util.toPointer(varIn), util.toPointer(pwDate), util.toPointer(pwTime));
}

export function VariantToStrRet(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  pstrret: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToStrRet(util.toPointer(varIn), util.toPointer(pstrret));
}

export function VariantToFileTime(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
  stfOut: PSTIME_FLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.PSTIME_FLAGS */,
  pftOut: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToFileTime(util.toPointer(varIn), stfOut, util.toPointer(pftOut));
}

export function VariantGetElementCount(
  varIn: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libPROPSYS_dll.VariantGetElementCount(util.toPointer(varIn));
}

export function VariantToBooleanArray(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgf: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToBooleanArray(util.toPointer(var__), util.toPointer(prgf), crgn, util.toPointer(pcElem));
}

export function VariantToInt16Array(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt16Array(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToUInt16Array(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt16Array(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToInt32Array(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt32Array(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToUInt32Array(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt32Array(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToInt64Array(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt64Array(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToUInt64Array(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt64Array(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToDoubleArray(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgn: Deno.PointerValue | Uint8Array /* ptr */,
  crgn: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToDoubleArray(util.toPointer(var__), util.toPointer(prgn), crgn, util.toPointer(pcElem));
}

export function VariantToStringArray(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  prgsz: Deno.PointerValue | Uint8Array /* ptr */,
  crgsz: number /* u32 */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToStringArray(util.toPointer(var__), util.toPointer(prgsz), crgsz, util.toPointer(pcElem));
}

export function VariantToBooleanArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgf: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToBooleanArrayAlloc(util.toPointer(var__), util.toPointer(pprgf), util.toPointer(pcElem));
}

export function VariantToInt16ArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt16ArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToUInt16ArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt16ArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToInt32ArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt32ArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToUInt32ArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt32ArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToInt64ArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToInt64ArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToUInt64ArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToUInt64ArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToDoubleArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgn: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToDoubleArrayAlloc(util.toPointer(var__), util.toPointer(pprgn), util.toPointer(pcElem));
}

export function VariantToStringArrayAlloc(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  pprgsz: Deno.PointerValue | Uint8Array /* ptr */,
  pcElem: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantToStringArrayAlloc(util.toPointer(var__), util.toPointer(pprgsz), util.toPointer(pcElem));
}

export function VariantGetBooleanElem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pfVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetBooleanElem(util.toPointer(var__), iElem, util.toPointer(pfVal));
}

export function VariantGetInt16Elem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetInt16Elem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetUInt16Elem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetUInt16Elem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetInt32Elem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetInt32Elem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetUInt32Elem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetUInt32Elem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetInt64Elem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetInt64Elem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetUInt64Elem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetUInt64Elem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetDoubleElem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  pnVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetDoubleElem(util.toPointer(var__), iElem, util.toPointer(pnVal));
}

export function VariantGetStringElem(
  var__: Deno.PointerValue | Uint8Array /* ptr */,
  iElem: number /* u32 */,
  ppszVal: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libPROPSYS_dll.VariantGetStringElem(util.toPointer(var__), iElem, util.toPointer(ppszVal));
}

export function ClearVariantArray(
  pvars: Deno.PointerValue | Uint8Array /* ptr */,
  cvars: number /* u32 */,
): void /* void */ {
  return libPROPSYS_dll.ClearVariantArray(util.toPointer(pvars), cvars);
}

export function VariantCompare(
  var1: Deno.PointerValue | Uint8Array /* ptr */,
  var2: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libPROPSYS_dll.VariantCompare(util.toPointer(var1), util.toPointer(var2));
}

export function SHGetPropertyStoreFromIDList(
  pidl: Deno.PointerValue | Uint8Array /* ptr */,
  flags: GETPROPERTYSTOREFLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHGetPropertyStoreFromIDList(util.toPointer(pidl), flags, util.toPointer(riid), util.toPointer(ppv));
}

export function SHGetPropertyStoreFromParsingName(
  pszPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbc: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IBindCtx */,
  flags: GETPROPERTYSTOREFLAGS /* Windows.Win32.UI.Shell.PropertiesSystem.GETPROPERTYSTOREFLAGS */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHGetPropertyStoreFromParsingName(util.pwstrToFfi(pszPath), util.toPointer(pbc), flags, util.toPointer(riid), util.toPointer(ppv));
}

export function SHAddDefaultPropertiesByExt(
  pszExt: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPropStore: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.Shell.PropertiesSystem.IPropertyStore */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHAddDefaultPropertiesByExt(util.pwstrToFfi(pszExt), util.toPointer(pPropStore));
}

export function PifMgr_OpenProperties(
  pszApp: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPIF: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hInf: number /* u32 */,
  flOpt: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libSHELL32_dll.PifMgr_OpenProperties(util.pwstrToFfi(pszApp), util.pwstrToFfi(pszPIF), hInf, flOpt);
}

export function PifMgr_GetProperties(
  hProps: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pszGroup: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpProps: Deno.PointerValue | Uint8Array /* ptr */,
  cbProps: number /* i32 */,
  flOpt: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.PifMgr_GetProperties(util.toPointer(hProps), util.pstrToFfi(pszGroup), util.toPointer(lpProps), cbProps, flOpt);
}

export function PifMgr_SetProperties(
  hProps: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pszGroup: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpProps: Deno.PointerValue | Uint8Array /* ptr */,
  cbProps: number /* i32 */,
  flOpt: number /* u32 */,
): number /* i32 */ {
  return libSHELL32_dll.PifMgr_SetProperties(util.toPointer(hProps), util.pstrToFfi(pszGroup), util.toPointer(lpProps), cbProps, flOpt);
}

export function PifMgr_CloseProperties(
  hProps: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  flOpt: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libSHELL32_dll.PifMgr_CloseProperties(util.toPointer(hProps), flOpt);
}

export function SHPropStgCreate(
  psstg: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertySetStorage */,
  fmtid: Deno.PointerValue | Uint8Array /* ptr */,
  pclsid: Deno.PointerValue | Uint8Array /* ptr */,
  grfFlags: number /* u32 */,
  grfMode: number /* u32 */,
  dwDisposition: number /* u32 */,
  ppstg: Deno.PointerValue | Uint8Array /* ptr */,
  puCodePage: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHPropStgCreate(util.toPointer(psstg), util.toPointer(fmtid), util.toPointer(pclsid), grfFlags, grfMode, dwDisposition, util.toPointer(ppstg), util.toPointer(puCodePage));
}

export function SHPropStgReadMultiple(
  pps: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyStorage */,
  uCodePage: number /* u32 */,
  cpspec: number /* u32 */,
  rgpspec: Deno.PointerValue | Uint8Array /* ptr */,
  rgvar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHPropStgReadMultiple(util.toPointer(pps), uCodePage, cpspec, util.toPointer(rgpspec), util.toPointer(rgvar));
}

export function SHPropStgWriteMultiple(
  pps: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.StructuredStorage.IPropertyStorage */,
  puCodePage: Deno.PointerValue | Uint8Array /* ptr */,
  cpspec: number /* u32 */,
  rgpspec: Deno.PointerValue | Uint8Array /* ptr */,
  rgvar: Deno.PointerValue | Uint8Array /* ptr */,
  propidNameFirst: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHPropStgWriteMultiple(util.toPointer(pps), util.toPointer(puCodePage), cpspec, util.toPointer(rgpspec), util.toPointer(rgvar), propidNameFirst);
}

export function SHGetPropertyStoreForWindow(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppv: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSHELL32_dll.SHGetPropertyStoreForWindow((hwnd), util.toPointer(riid), util.toPointer(ppv));
}

