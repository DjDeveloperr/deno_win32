/// Auto-generated by Deno Win32: Windows.Win32.UI.TextServices.Apis

import * as util from "../../util.ts";

// Enums
export type LANG_BAR_ITEM_ICON_MODE_FLAGS = number;
export type TEXT_STORE_TEXT_CHANGE_FLAGS = number;
export type TEXT_STORE_CHANGE_FLAGS = number;
export type INSERT_TEXT_AT_SELECTION_FLAGS = number;
export type ANCHOR_CHANGE_HISTORY_FLAGS = number;
export type TEXT_STORE_LOCK_FLAGS = number;
export type GET_TEXT_AND_PROPERTY_UPDATES_FLAGS = number;
export type TF_CONTEXT_EDIT_CONTEXT_FLAGS = number;
export type TsActiveSelEnd = number;
export type TsLayoutCode = number;
export type TsRunType = number;
export type TsGravity = number;
export type TsShiftDir = number;
export type TfLBIClick = number;
export type TfLBBalloonStyle = number;
export type TfAnchor = number;
export type TfActiveSelEnd = number;
export type TfLayoutCode = number;
export type TfGravity = number;
export type TfShiftDir = number;
export type TF_DA_LINESTYLE = number;
export type TF_DA_COLORTYPE = number;
export type TF_DA_ATTR_INFO = number;
export type TfCandidateResult = number;
export type TfSapiObject = number;
export type TfIntegratableCandidateListSelectionStyle = number;
export type TKBLayoutType = number;
export type InputScope = number;

// Constants
export const TS_E_INVALIDPOS = 288827430293209600n;
export const TS_E_NOLOCK = 288795544456004097n;
export const TS_E_NOOBJECT = 1187558720002;
export const TS_E_NOSERVICE = 288797743479259651n;
export const TS_E_NOINTERFACE = 288798842990887428n;
export const TS_E_NOSELECTION = 288799942502515205n;
export const TS_E_NOLAYOUT = 288801042014142982n;
export const TS_E_INVALIDPOINT = 288802141525770759n;
export const TS_E_SYNCHRONOUS = 288803241037398536n;
export const TS_E_READONLY = 288804340549026313n;
export const TS_E_FORMAT = 288805440060654090n;
export const TS_S_ASYNC = 289637768215397120n;
export const TS_AS_TEXT_CHANGE = 1;
export const TS_AS_SEL_CHANGE = 2;
export const TS_AS_LAYOUT_CHANGE = 4;
export const TS_AS_ATTR_CHANGE = 8;
export const TS_AS_STATUS_CHANGE = 16;
export const TS_LF_SYNC = 1;
export const TS_SD_READONLY = 1;
export const TS_SD_LOADING = 2;
export const TS_SD_RESERVED = 4;
export const TS_SD_TKBAUTOCORRECTENABLE = 8;
export const TS_SD_TKBPREDICTIONENABLE = 16;
export const TS_SD_UIINTEGRATIONENABLE = 32;
export const TS_SD_INPUTPANEMANUALDISPLAYENABLE = 64;
export const TS_SD_EMBEDDEDHANDWRITINGVIEW_ENABLED = 128;
export const TS_SD_EMBEDDEDHANDWRITINGVIEW_VISIBLE = 256;
export const TS_SS_DISJOINTSEL = 1;
export const TS_SS_REGIONS = 2;
export const TS_SS_TRANSITORY = 4;
export const TS_SS_NOHIDDENTEXT = 8;
export const TS_SS_TKBAUTOCORRECTENABLE = 16;
export const TS_SS_TKBPREDICTIONENABLE = 32;
export const TS_SS_UWPCONTROL = 64;
export const TS_IE_CORRECTION = 1;
export const TS_IE_COMPOSITION = 2;
export const TS_IAS_NOQUERY = 1;
export const TS_IAS_QUERYONLY = 2;
export const GXFPF_ROUND_NEAREST = 1;
export const GXFPF_NEAREST = 2;
export const TS_CHAR_EMBEDDED = 65532;
export const TS_CHAR_REGION = 0;
export const TS_CHAR_REPLACEMENT = 65533;
export const TS_ATTR_FIND_BACKWARDS = 1;
export const TS_ATTR_FIND_WANT_OFFSET = 2;
export const TS_ATTR_FIND_UPDATESTART = 4;
export const TS_ATTR_FIND_WANT_VALUE = 8;
export const TS_ATTR_FIND_WANT_END = 16;
export const TS_ATTR_FIND_HIDDEN = 32;
export const TS_VCOOKIE_NUL = 4294967295;
export const TS_SHIFT_COUNT_HIDDEN = 1;
export const TS_SHIFT_HALT_HIDDEN = 2;
export const TS_SHIFT_HALT_VISIBLE = 4;
export const TS_SHIFT_COUNT_ONLY = 8;
export const TS_GTA_HIDDEN = 1;
export const TS_GEA_HIDDEN = 1;
export const TF_E_LOCKED = 289638869874509056n;
export const TF_E_STACKFULL = 289639969386136833n;
export const TF_E_NOTOWNEDRANGE = 289641068897764610n;
export const TF_E_NOPROVIDER = 289642168409392387n;
export const TF_E_DISCONNECTED = 289643267921020164n;
export const TF_E_INVALIDVIEW = 289644367432647941n;
export const TF_E_ALREADY_EXISTS = 289645466944275718n;
export const TF_E_RANGE_NOT_COVERED = 289646566455903495n;
export const TF_E_COMPOSITION_REJECTED = 289647665967531272n;
export const TF_E_EMPTYCONTEXT = 4827963410912380169n;
export const TF_E_INVALIDPOS = 288827430293209600n;
export const TF_E_NOLOCK = 288795544456004097n;
export const TF_E_NOOBJECT = 1187558720002;
export const TF_E_NOSERVICE = 288797743479259651n;
export const TF_E_NOINTERFACE = 288798842990887428n;
export const TF_E_NOSELECTION = 288799942502515205n;
export const TF_E_NOLAYOUT = 288801042014142982n;
export const TF_E_INVALIDPOINT = 288802141525770759n;
export const TF_E_SYNCHRONOUS = 288803241037398536n;
export const TF_E_READONLY = 288804340549026313n;
export const TF_E_FORMAT = 288805440060654090n;
export const TF_S_ASYNC = 289637768215397120n;
export const TF_RCM_COMLESS = 1;
export const TF_RCM_VKEY = 2;
export const TF_RCM_HINT_READING_LENGTH = 4;
export const TF_RCM_HINT_COLLISION = 8;
export const TKB_ALTERNATES_STANDARD = 1;
export const TKB_ALTERNATES_FOR_AUTOCORRECTION = 2;
export const TKB_ALTERNATES_FOR_PREDICTION = 3;
export const TKB_ALTERNATES_AUTOCORRECTION_APPLIED = 4;
export const TF_TMAE_NOACTIVATETIP = 1;
export const TF_TMAE_SECUREMODE = 2;
export const TF_TMAE_UIELEMENTENABLEDONLY = 4;
export const TF_TMAE_COMLESS = 8;
export const TF_TMAE_WOW16 = 16;
export const TF_TMAE_NOACTIVATEKEYBOARDLAYOUT = 32;
export const TF_TMAE_CONSOLE = 64;
export const TF_TMF_NOACTIVATETIP = 1;
export const TF_TMF_SECUREMODE = 2;
export const TF_TMF_UIELEMENTENABLEDONLY = 4;
export const TF_TMF_COMLESS = 8;
export const TF_TMF_WOW16 = 16;
export const TF_TMF_CONSOLE = 64;
export const TF_TMF_IMMERSIVEMODE = 1073741824;
export const TF_TMF_ACTIVATED = 2147483648;
export const TF_MOD_ALT = 1;
export const TF_MOD_CONTROL = 2;
export const TF_MOD_SHIFT = 4;
export const TF_MOD_RALT = 8;
export const TF_MOD_RCONTROL = 16;
export const TF_MOD_RSHIFT = 32;
export const TF_MOD_LALT = 64;
export const TF_MOD_LCONTROL = 128;
export const TF_MOD_LSHIFT = 256;
export const TF_MOD_ON_KEYUP = 512;
export const TF_MOD_IGNORE_ALL_MODIFIER = 1024;
export const TF_US_HIDETIPUI = 1;
export const TF_DISABLE_SPEECH = 1;
export const TF_DISABLE_DICTATION = 2;
export const TF_DISABLE_COMMANDING = 4;
export const TF_PROCESS_ATOM = `_CTF_PROCESS_ATOM_`;
export const TF_ENABLE_PROCESS_ATOM = `_CTF_ENABLE_PROCESS_ATOM_`;
export const TF_CLUIE_DOCUMENTMGR = 1;
export const TF_CLUIE_COUNT = 2;
export const TF_CLUIE_SELECTION = 4;
export const TF_CLUIE_STRING = 8;
export const TF_CLUIE_PAGEINDEX = 16;
export const TF_CLUIE_CURRENTPAGE = 32;
export const TF_RIUIE_CONTEXT = 1;
export const TF_RIUIE_STRING = 2;
export const TF_RIUIE_MAXREADINGSTRINGLENGTH = 4;
export const TF_RIUIE_ERRORINDEX = 8;
export const TF_RIUIE_VERTICALORDER = 16;
export const TF_CONVERSIONMODE_ALPHANUMERIC = 0;
export const TF_CONVERSIONMODE_NATIVE = 1;
export const TF_CONVERSIONMODE_KATAKANA = 2;
export const TF_CONVERSIONMODE_FULLSHAPE = 8;
export const TF_CONVERSIONMODE_ROMAN = 16;
export const TF_CONVERSIONMODE_CHARCODE = 32;
export const TF_CONVERSIONMODE_SOFTKEYBOARD = 128;
export const TF_CONVERSIONMODE_NOCONVERSION = 256;
export const TF_CONVERSIONMODE_EUDC = 512;
export const TF_CONVERSIONMODE_SYMBOL = 1024;
export const TF_CONVERSIONMODE_FIXED = 2048;
export const TF_SENTENCEMODE_NONE = 0;
export const TF_SENTENCEMODE_PLAURALCLAUSE = 1;
export const TF_SENTENCEMODE_SINGLECONVERT = 2;
export const TF_SENTENCEMODE_AUTOMATIC = 4;
export const TF_SENTENCEMODE_PHRASEPREDICT = 8;
export const TF_SENTENCEMODE_CONVERSATION = 16;
export const TF_TRANSITORYEXTENSION_NONE = 0;
export const TF_TRANSITORYEXTENSION_FLOATING = 1;
export const TF_TRANSITORYEXTENSION_ATSELECTION = 2;
export const TF_PROFILETYPE_INPUTPROCESSOR = 1;
export const TF_PROFILETYPE_KEYBOARDLAYOUT = 2;
export const TF_RIP_FLAG_FREEUNUSEDLIBRARIES = 1;
export const TF_IPP_FLAG_ACTIVE = 1;
export const TF_IPP_FLAG_ENABLED = 2;
export const TF_IPP_FLAG_SUBSTITUTEDBYINPUTPROCESSOR = 4;
export const TF_IPP_CAPS_DISABLEONTRANSITORY = 1;
export const TF_IPP_CAPS_SECUREMODESUPPORT = 2;
export const TF_IPP_CAPS_UIELEMENTENABLED = 4;
export const TF_IPP_CAPS_COMLESSSUPPORT = 8;
export const TF_IPP_CAPS_WOW16SUPPORT = 16;
export const TF_IPP_CAPS_IMMERSIVESUPPORT = 65536;
export const TF_IPP_CAPS_SYSTRAYSUPPORT = 131072;
export const TF_IPPMF_FORPROCESS = 268435456;
export const TF_IPPMF_FORSESSION = 536870912;
export const TF_IPPMF_FORSYSTEMALL = 1073741824;
export const TF_IPPMF_ENABLEPROFILE = 1;
export const TF_IPPMF_DISABLEPROFILE = 2;
export const TF_IPPMF_DONTCARECURRENTINPUTLANGUAGE = 4;
export const TF_RP_HIDDENINSETTINGUI = 2;
export const TF_RP_LOCALPROCESS = 4;
export const TF_RP_LOCALTHREAD = 8;
export const TF_RP_SUBITEMINSETTINGUI = 16;
export const TF_URP_ALLPROFILES = 2;
export const TF_URP_LOCALPROCESS = 4;
export const TF_URP_LOCALTHREAD = 8;
export const TF_IPSINK_FLAG_ACTIVE = 1;
export const TF_INVALID_EDIT_COOKIE = 0;
export const TF_POPF_ALL = 1;
export const TF_SD_READONLY = 1;
export const TF_SD_LOADING = 2;
export const TF_SS_DISJOINTSEL = 1;
export const TF_SS_REGIONS = 2;
export const TF_SS_TRANSITORY = 4;
export const TF_SS_TKBAUTOCORRECTENABLE = 16;
export const TF_SS_TKBPREDICTIONENABLE = 32;
export const TF_CHAR_EMBEDDED = 65532;
export const TF_HF_OBJECT = 1;
export const TF_TF_MOVESTART = 1;
export const TF_TF_IGNOREEND = 2;
export const TF_ST_CORRECTION = 1;
export const TF_IE_CORRECTION = 1;
export const TF_TU_CORRECTION = 1;
export const TF_INVALID_COOKIE = 4294967295;
export const TF_E_NOCONVERSION = 1224980286203495936n;
export const TF_DICTATION_ON = 1;
export const TF_DICTATION_ENABLED = 2;
export const TF_COMMANDING_ENABLED = 4;
export const TF_COMMANDING_ON = 8;
export const TF_SPEECHUI_SHOWN = 16;
export const TF_SHOW_BALLOON = 1;
export const TF_DISABLE_BALLOON = 2;
export const TF_MENUREADY = 1;
export const TF_PROPUI_STATUS_SAVETOFILE = 1;
export const TKBL_UNDEFINED = 0;
export const TKBL_CLASSIC_TRADITIONAL_CHINESE_PHONETIC = 1028;
export const TKBL_CLASSIC_TRADITIONAL_CHINESE_CHANGJIE = 61506;
export const TKBL_CLASSIC_TRADITIONAL_CHINESE_DAYI = 61507;
export const TKBL_OPT_JAPANESE_ABC = 1041;
export const TKBL_OPT_KOREAN_HANGUL_2_BULSIK = 1042;
export const TKBL_OPT_SIMPLIFIED_CHINESE_PINYIN = 2052;
export const TKBL_OPT_TRADITIONAL_CHINESE_PHONETIC = 1028;
export const TF_FLOATINGLANGBAR_WNDTITLEW = `TF_FloatingLangBar_WndTitle`;
export const TF_FLOATINGLANGBAR_WNDTITLEA = `TF_FloatingLangBar_WndTitle`;
export const TF_FLOATINGLANGBAR_WNDTITLE = `TF_FloatingLangBar_WndTitle`;
export const TF_LBI_ICON = 1;
export const TF_LBI_TEXT = 2;
export const TF_LBI_TOOLTIP = 4;
export const TF_LBI_BITMAP = 8;
export const TF_LBI_BALLOON = 16;
export const TF_LBI_CUSTOMUI = 32;
export const TF_LBI_STATUS = 65536;
export const TF_LBI_STYLE_HIDDENSTATUSCONTROL = 1;
export const TF_LBI_STYLE_SHOWNINTRAY = 2;
export const TF_LBI_STYLE_HIDEONNOOTHERITEMS = 4;
export const TF_LBI_STYLE_SHOWNINTRAYONLY = 8;
export const TF_LBI_STYLE_HIDDENBYDEFAULT = 16;
export const TF_LBI_STYLE_TEXTCOLORICON = 32;
export const TF_LBI_STYLE_BTN_BUTTON = 65536;
export const TF_LBI_STYLE_BTN_MENU = 131072;
export const TF_LBI_STYLE_BTN_TOGGLE = 262144;
export const TF_LBI_STATUS_HIDDEN = 1;
export const TF_LBI_STATUS_DISABLED = 2;
export const TF_LBI_STATUS_BTN_TOGGLED = 65536;
export const TF_LBI_BMPF_VERTICAL = 1;
export const TF_SFT_SHOWNORMAL = 1;
export const TF_SFT_DOCK = 2;
export const TF_SFT_MINIMIZED = 4;
export const TF_SFT_HIDDEN = 8;
export const TF_SFT_NOTRANSPARENCY = 16;
export const TF_SFT_LOWTRANSPARENCY = 32;
export const TF_SFT_HIGHTRANSPARENCY = 64;
export const TF_SFT_LABELS = 128;
export const TF_SFT_NOLABELS = 256;
export const TF_SFT_EXTRAICONSONMINIMIZED = 512;
export const TF_SFT_NOEXTRAICONSONMINIMIZED = 1024;
export const TF_SFT_DESKBAND = 2048;
export const TF_LBI_DESC_MAXLEN = 32;
export const TF_LBMENUF_CHECKED = 1;
export const TF_LBMENUF_SUBMENU = 2;
export const TF_LBMENUF_SEPARATOR = 4;
export const TF_LBMENUF_RADIOCHECKED = 8;
export const TF_LBMENUF_GRAYED = 16;
export const DCM_FLAGS_TASKENG = 1;
export const DCM_FLAGS_CTFMON = 2;
export const DCM_FLAGS_LOCALTHREADTSF = 4;
export const ILMCM_CHECKLAYOUTANDTIPENABLED = 1;
export const ILMCM_LANGUAGEBAROFF = 2;
export const TS_STRF_START = 0;
export const TS_STRF_MID = 1;
export const TS_STRF_END = 2;
export const TF_DTLBI_NONE = 0;
export const TF_DTLBI_USEPROFILEICON = 1;
export const TS_ST_NONE = 0;
export const TS_ST_CORRECTION = 1;
export const TS_TC_NONE = 0;
export const TS_TC_CORRECTION = 1;
export const TF_IAS_NOQUERY = 1;
export const TF_IAS_QUERYONLY = 2;
export const TF_IAS_NO_DEFAULT_COMPOSITION = 2147483648;
export const TS_CH_PRECEDING_DEL = 1;
export const TS_CH_FOLLOWING_DEL = 2;
export const TS_LF_READ = 2;
export const TS_LF_READWRITE = 6;
export const TF_GTP_NONE = 0;
export const TF_GTP_INCL_TEXT = 1;
export const TF_ES_ASYNCDONTCARE = 0;
export const TF_ES_SYNC = 1;
export const TF_ES_READ = 2;
export const TF_ES_READWRITE = 6;
export const TF_ES_ASYNC = 8;
export const TS_AE_NONE = 0;
export const TS_AE_START = 1;
export const TS_AE_END = 2;
export const TS_LC_CREATE = 0;
export const TS_LC_CHANGE = 1;
export const TS_LC_DESTROY = 2;
export const TS_RT_PLAIN = 0;
export const TS_RT_HIDDEN = 1;
export const TS_RT_OPAQUE = 2;
export const TS_GR_BACKWARD = 0;
export const TS_GR_FORWARD = 1;
export const TS_SD_BACKWARD = 0;
export const TS_SD_FORWARD = 1;
export const TF_LBI_CLK_RIGHT = 1;
export const TF_LBI_CLK_LEFT = 2;
export const TF_LB_BALLOON_RECO = 0;
export const TF_LB_BALLOON_SHOW = 1;
export const TF_LB_BALLOON_MISS = 2;
export const TF_ANCHOR_START = 0;
export const TF_ANCHOR_END = 1;
export const TF_AE_NONE = 0;
export const TF_AE_START = 1;
export const TF_AE_END = 2;
export const TF_LC_CREATE = 0;
export const TF_LC_CHANGE = 1;
export const TF_LC_DESTROY = 2;
export const TF_GRAVITY_BACKWARD = 0;
export const TF_GRAVITY_FORWARD = 1;
export const TF_SD_BACKWARD = 0;
export const TF_SD_FORWARD = 1;
export const TF_LS_NONE = 0;
export const TF_LS_SOLID = 1;
export const TF_LS_DOT = 2;
export const TF_LS_DASH = 3;
export const TF_LS_SQUIGGLE = 4;
export const TF_CT_NONE = 0;
export const TF_CT_SYSCOLOR = 1;
export const TF_CT_COLORREF = 2;
export const TF_ATTR_INPUT = 0;
export const TF_ATTR_TARGET_CONVERTED = 1;
export const TF_ATTR_CONVERTED = 2;
export const TF_ATTR_TARGET_NOTCONVERTED = 3;
export const TF_ATTR_INPUT_ERROR = 4;
export const TF_ATTR_FIXEDCONVERTED = 5;
export const TF_ATTR_OTHER = `-1`;
export const CAND_FINALIZED = 0;
export const CAND_SELECTED = 1;
export const CAND_CANCELED = 2;
export const GETIF_RESMGR = 0;
export const GETIF_RECOCONTEXT = 1;
export const GETIF_RECOGNIZER = 2;
export const GETIF_VOICE = 3;
export const GETIF_DICTGRAM = 4;
export const GETIF_RECOGNIZERNOINIT = 5;
export const STYLE_ACTIVE_SELECTION = 0;
export const STYLE_IMPLIED_SELECTION = 1;
export const TKBLT_UNDEFINED = 0;
export const TKBLT_CLASSIC = 1;
export const TKBLT_OPTIMIZED = 2;
export const IS_DEFAULT = 0;
export const IS_URL = 1;
export const IS_FILE_FULLFILEPATH = 2;
export const IS_FILE_FILENAME = 3;
export const IS_EMAIL_USERNAME = 4;
export const IS_EMAIL_SMTPEMAILADDRESS = 5;
export const IS_LOGINNAME = 6;
export const IS_PERSONALNAME_FULLNAME = 7;
export const IS_PERSONALNAME_PREFIX = 8;
export const IS_PERSONALNAME_GIVENNAME = 9;
export const IS_PERSONALNAME_MIDDLENAME = 10;
export const IS_PERSONALNAME_SURNAME = 11;
export const IS_PERSONALNAME_SUFFIX = 12;
export const IS_ADDRESS_FULLPOSTALADDRESS = 13;
export const IS_ADDRESS_POSTALCODE = 14;
export const IS_ADDRESS_STREET = 15;
export const IS_ADDRESS_STATEORPROVINCE = 16;
export const IS_ADDRESS_CITY = 17;
export const IS_ADDRESS_COUNTRYNAME = 18;
export const IS_ADDRESS_COUNTRYSHORTNAME = 19;
export const IS_CURRENCY_AMOUNTANDSYMBOL = 20;
export const IS_CURRENCY_AMOUNT = 21;
export const IS_DATE_FULLDATE = 22;
export const IS_DATE_MONTH = 23;
export const IS_DATE_DAY = 24;
export const IS_DATE_YEAR = 25;
export const IS_DATE_MONTHNAME = 26;
export const IS_DATE_DAYNAME = 27;
export const IS_DIGITS = 28;
export const IS_NUMBER = 29;
export const IS_ONECHAR = 30;
export const IS_PASSWORD = 31;
export const IS_TELEPHONE_FULLTELEPHONENUMBER = 32;
export const IS_TELEPHONE_COUNTRYCODE = 33;
export const IS_TELEPHONE_AREACODE = 34;
export const IS_TELEPHONE_LOCALNUMBER = 35;
export const IS_TIME_FULLTIME = 36;
export const IS_TIME_HOUR = 37;
export const IS_TIME_MINORSEC = 38;
export const IS_NUMBER_FULLWIDTH = 39;
export const IS_ALPHANUMERIC_HALFWIDTH = 40;
export const IS_ALPHANUMERIC_FULLWIDTH = 41;
export const IS_CURRENCY_CHINESE = 42;
export const IS_BOPOMOFO = 43;
export const IS_HIRAGANA = 44;
export const IS_KATAKANA_HALFWIDTH = 45;
export const IS_KATAKANA_FULLWIDTH = 46;
export const IS_HANJA = 47;
export const IS_HANGUL_HALFWIDTH = 48;
export const IS_HANGUL_FULLWIDTH = 49;
export const IS_SEARCH = 50;
export const IS_FORMULA = 51;
export const IS_SEARCH_INCREMENTAL = 52;
export const IS_CHINESE_HALFWIDTH = 53;
export const IS_CHINESE_FULLWIDTH = 54;
export const IS_NATIVE_SCRIPT = 55;
export const IS_YOMI = 56;
export const IS_TEXT = 57;
export const IS_CHAT = 58;
export const IS_NAME_OR_PHONENUMBER = 59;
export const IS_EMAILNAME_OR_ADDRESS = 60;
export const IS_PRIVATE = 61;
export const IS_MAPS = 62;
export const IS_NUMERIC_PASSWORD = 63;
export const IS_NUMERIC_PIN = 64;
export const IS_ALPHANUMERIC_PIN = 65;
export const IS_ALPHANUMERIC_PIN_SET = 66;
export const IS_FORMULA_NUMBER = 67;
export const IS_CHAT_WITHOUT_EMOJI = 68;
export const IS_PHRASELIST = `-1`;
export const IS_REGULAREXPRESSION = `-2`;
export const IS_SRGS = `-3`;
export const IS_XML = `-4`;
export const IS_ENUMSTRING = `-5`;

// Structs

export type HKL = Deno.PointerValue;

/**
 * Windows.Win32.UI.TextServices.TS_STATUS (size: 8)
 */
export interface TS_STATUS {
  /** u32 */
  dwDynamicFlags: number;
  /** u32 */
  dwStaticFlags: number;
}

export const sizeofTS_STATUS = 8;

export function allocTS_STATUS(data?: Partial<TS_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDynamicFlags !== undefined) view.setUint32(0, Number(data.dwDynamicFlags), true);
  // 0x04: u32
  if (data?.dwStaticFlags !== undefined) view.setUint32(4, Number(data.dwStaticFlags), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TS_TEXTCHANGE (size: 16)
 */
export interface TS_TEXTCHANGE {
  /** i32 */
  acpStart: number;
  /** i32 */
  acpOldEnd: number;
  /** i32 */
  acpNewEnd: number;
}

export const sizeofTS_TEXTCHANGE = 16;

export function allocTS_TEXTCHANGE(data?: Partial<TS_TEXTCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_TEXTCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.acpStart !== undefined) view.setInt32(0, Number(data.acpStart), true);
  // 0x04: i32
  if (data?.acpOldEnd !== undefined) view.setInt32(4, Number(data.acpOldEnd), true);
  // 0x08: i32
  if (data?.acpNewEnd !== undefined) view.setInt32(8, Number(data.acpNewEnd), true);
  // 0x0c: pad4
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.UI.TextServices.TS_SELECTIONSTYLE (size: 8)
 */
export interface TS_SELECTIONSTYLE {
  /** Windows.Win32.UI.TextServices.TsActiveSelEnd */
  ase: TsActiveSelEnd;
  /** Windows.Win32.Foundation.BOOL */
  fInterimChar: boolean;
}

export const sizeofTS_SELECTIONSTYLE = 8;

export function allocTS_SELECTIONSTYLE(data?: Partial<TS_SELECTIONSTYLE>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_SELECTIONSTYLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ase !== undefined) view.setInt32(0, Number(data.ase), true);
  // 0x04: i32
  if (data?.fInterimChar !== undefined) view.setInt32(4, Number(data.fInterimChar), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TS_SELECTION_ACP (size: 16)
 */
export interface TS_SELECTION_ACP {
  /** i32 */
  acpStart: number;
  /** i32 */
  acpEnd: number;
  /** Windows.Win32.UI.TextServices.TS_SELECTIONSTYLE */
  style: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTS_SELECTION_ACP = 16;

export function allocTS_SELECTION_ACP(data?: Partial<TS_SELECTION_ACP>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_SELECTION_ACP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.acpStart !== undefined) view.setInt32(0, Number(data.acpStart), true);
  // 0x04: i32
  if (data?.acpEnd !== undefined) view.setInt32(4, Number(data.acpEnd), true);
  // 0x08: pointer
  if (data?.style !== undefined) view.setBigUint64(8, data.style === null ? 0n : BigInt(util.toPointer(data.style)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TS_SELECTION_ANCHOR (size: 24)
 */
export interface TS_SELECTION_ANCHOR {
  /** Windows.Win32.UI.TextServices.IAnchor */
  paStart: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.IAnchor */
  paEnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.TS_SELECTIONSTYLE */
  style: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTS_SELECTION_ANCHOR = 24;

export function allocTS_SELECTION_ANCHOR(data?: Partial<TS_SELECTION_ANCHOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_SELECTION_ANCHOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.paStart !== undefined) view.setBigUint64(0, data.paStart === null ? 0n : BigInt(util.toPointer(data.paStart)), true);
  // 0x08: pointer
  if (data?.paEnd !== undefined) view.setBigUint64(8, data.paEnd === null ? 0n : BigInt(util.toPointer(data.paEnd)), true);
  // 0x10: pointer
  if (data?.style !== undefined) view.setBigUint64(16, data.style === null ? 0n : BigInt(util.toPointer(data.style)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TS_ATTRVAL (size: 24)
 */
export interface TS_ATTRVAL {
  /** System.Guid */
  idAttr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwOverlapId: number;
  /** Windows.Win32.System.Com.VARIANT */
  varValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTS_ATTRVAL = 24;

export function allocTS_ATTRVAL(data?: Partial<TS_ATTRVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_ATTRVAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.idAttr !== undefined) view.setBigUint64(0, data.idAttr === null ? 0n : BigInt(util.toPointer(data.idAttr)), true);
  // 0x08: u32
  if (data?.dwOverlapId !== undefined) view.setUint32(8, Number(data.dwOverlapId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.varValue !== undefined) view.setBigUint64(16, data.varValue === null ? 0n : BigInt(util.toPointer(data.varValue)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TS_RUNINFO (size: 8)
 */
export interface TS_RUNINFO {
  /** u32 */
  uCount: number;
  /** Windows.Win32.UI.TextServices.TsRunType */
  type: TsRunType;
}

export const sizeofTS_RUNINFO = 8;

export function allocTS_RUNINFO(data?: Partial<TS_RUNINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTS_RUNINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: i32
  if (data?.type !== undefined) view.setInt32(4, Number(data.type), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_LANGBARITEMINFO (size: 32)
 */
export interface TF_LANGBARITEMINFO {
  /** System.Guid */
  clsidService: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidItem: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwStyle: number;
  /** u32 */
  ulSort: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofTF_LANGBARITEMINFO = 32;

export function allocTF_LANGBARITEMINFO(data?: Partial<TF_LANGBARITEMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_LANGBARITEMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsidService !== undefined) view.setBigUint64(0, data.clsidService === null ? 0n : BigInt(util.toPointer(data.clsidService)), true);
  // 0x08: pointer
  if (data?.guidItem !== undefined) view.setBigUint64(8, data.guidItem === null ? 0n : BigInt(util.toPointer(data.guidItem)), true);
  // 0x10: u32
  if (data?.dwStyle !== undefined) view.setUint32(16, Number(data.dwStyle), true);
  // 0x14: u32
  if (data?.ulSort !== undefined) view.setUint32(20, Number(data.ulSort), true);
  // 0x18: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(24, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.TextServices.TF_LBBALLOONINFO (size: 16)
 */
export interface TF_LBBALLOONINFO {
  /** Windows.Win32.UI.TextServices.TfLBBalloonStyle */
  style: TfLBBalloonStyle;
  /** Windows.Win32.Foundation.BSTR */
  bstrText: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_LBBALLOONINFO = 16;

export function allocTF_LBBALLOONINFO(data?: Partial<TF_LBBALLOONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_LBBALLOONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.style !== undefined) view.setInt32(0, Number(data.style), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bstrText !== undefined) view.setBigUint64(8, data.bstrText === null ? 0n : BigInt(util.toPointer(data.bstrText)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_PERSISTENT_PROPERTY_HEADER_ACP (size: 32)
 */
export interface TF_PERSISTENT_PROPERTY_HEADER_ACP {
  /** System.Guid */
  guidType: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  ichStart: number;
  /** i32 */
  cch: number;
  /** u32 */
  cb: number;
  /** u32 */
  dwPrivate: number;
  /** System.Guid */
  clsidTIP: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_PERSISTENT_PROPERTY_HEADER_ACP = 32;

export function allocTF_PERSISTENT_PROPERTY_HEADER_ACP(data?: Partial<TF_PERSISTENT_PROPERTY_HEADER_ACP>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_PERSISTENT_PROPERTY_HEADER_ACP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidType !== undefined) view.setBigUint64(0, data.guidType === null ? 0n : BigInt(util.toPointer(data.guidType)), true);
  // 0x08: i32
  if (data?.ichStart !== undefined) view.setInt32(8, Number(data.ichStart), true);
  // 0x0c: i32
  if (data?.cch !== undefined) view.setInt32(12, Number(data.cch), true);
  // 0x10: u32
  if (data?.cb !== undefined) view.setUint32(16, Number(data.cb), true);
  // 0x14: u32
  if (data?.dwPrivate !== undefined) view.setUint32(20, Number(data.dwPrivate), true);
  // 0x18: pointer
  if (data?.clsidTIP !== undefined) view.setBigUint64(24, data.clsidTIP === null ? 0n : BigInt(util.toPointer(data.clsidTIP)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_LANGUAGEPROFILE (size: 40)
 */
export interface TF_LANGUAGEPROFILE {
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  langid: number;
  /** System.Guid */
  catid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fActive: boolean;
  /** System.Guid */
  guidProfile: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_LANGUAGEPROFILE = 40;

export function allocTF_LANGUAGEPROFILE(data?: Partial<TF_LANGUAGEPROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_LANGUAGEPROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsid !== undefined) view.setBigUint64(0, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x08: u16
  if (data?.langid !== undefined) view.setUint16(8, Number(data.langid), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.catid !== undefined) view.setBigUint64(16, data.catid === null ? 0n : BigInt(util.toPointer(data.catid)), true);
  // 0x18: i32
  if (data?.fActive !== undefined) view.setInt32(24, Number(data.fActive), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.guidProfile !== undefined) view.setBigUint64(32, data.guidProfile === null ? 0n : BigInt(util.toPointer(data.guidProfile)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_SELECTIONSTYLE (size: 8)
 */
export interface TF_SELECTIONSTYLE {
  /** Windows.Win32.UI.TextServices.TfActiveSelEnd */
  ase: TfActiveSelEnd;
  /** Windows.Win32.Foundation.BOOL */
  fInterimChar: boolean;
}

export const sizeofTF_SELECTIONSTYLE = 8;

export function allocTF_SELECTIONSTYLE(data?: Partial<TF_SELECTIONSTYLE>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_SELECTIONSTYLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ase !== undefined) view.setInt32(0, Number(data.ase), true);
  // 0x04: i32
  if (data?.fInterimChar !== undefined) view.setInt32(4, Number(data.fInterimChar), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_SELECTION (size: 16)
 */
export interface TF_SELECTION {
  /** Windows.Win32.UI.TextServices.ITfRange */
  range: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.TF_SELECTIONSTYLE */
  style: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_SELECTION = 16;

export function allocTF_SELECTION(data?: Partial<TF_SELECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_SELECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.range !== undefined) view.setBigUint64(0, data.range === null ? 0n : BigInt(util.toPointer(data.range)), true);
  // 0x08: pointer
  if (data?.style !== undefined) view.setBigUint64(8, data.style === null ? 0n : BigInt(util.toPointer(data.style)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_PROPERTYVAL (size: 16)
 */
export interface TF_PROPERTYVAL {
  /** System.Guid */
  guidId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.VARIANT */
  varValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_PROPERTYVAL = 16;

export function allocTF_PROPERTYVAL(data?: Partial<TF_PROPERTYVAL>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_PROPERTYVAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidId !== undefined) view.setBigUint64(0, data.guidId === null ? 0n : BigInt(util.toPointer(data.guidId)), true);
  // 0x08: pointer
  if (data?.varValue !== undefined) view.setBigUint64(8, data.varValue === null ? 0n : BigInt(util.toPointer(data.varValue)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_HALTCOND (size: 16)
 */
export interface TF_HALTCOND {
  /** Windows.Win32.UI.TextServices.ITfRange */
  pHaltRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.TfAnchor */
  aHaltPos: TfAnchor;
  /** u32 */
  dwFlags: number;
}

export const sizeofTF_HALTCOND = 16;

export function allocTF_HALTCOND(data?: Partial<TF_HALTCOND>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_HALTCOND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pHaltRange !== undefined) view.setBigUint64(0, data.pHaltRange === null ? 0n : BigInt(util.toPointer(data.pHaltRange)), true);
  // 0x08: i32
  if (data?.aHaltPos !== undefined) view.setInt32(8, Number(data.aHaltPos), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_INPUTPROCESSORPROFILE (size: 64)
 */
export interface TF_INPUTPROCESSORPROFILE {
  /** u32 */
  dwProfileType: number;
  /** u16 */
  langid: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidProfile: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  catid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.HKL */
  hklSubstitute: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCaps: number;
  /** Windows.Win32.UI.TextServices.HKL */
  hkl: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofTF_INPUTPROCESSORPROFILE = 64;

export function allocTF_INPUTPROCESSORPROFILE(data?: Partial<TF_INPUTPROCESSORPROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_INPUTPROCESSORPROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProfileType !== undefined) view.setUint32(0, Number(data.dwProfileType), true);
  // 0x04: u16
  if (data?.langid !== undefined) view.setUint16(4, Number(data.langid), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: pointer
  if (data?.guidProfile !== undefined) view.setBigUint64(16, data.guidProfile === null ? 0n : BigInt(util.toPointer(data.guidProfile)), true);
  // 0x18: pointer
  if (data?.catid !== undefined) view.setBigUint64(24, data.catid === null ? 0n : BigInt(util.toPointer(data.catid)), true);
  // 0x20: pointer
  if (data?.hklSubstitute !== undefined) view.setBigUint64(32, data.hklSubstitute === null ? 0n : BigInt(util.toPointer(data.hklSubstitute)), true);
  // 0x28: u32
  if (data?.dwCaps !== undefined) view.setUint32(40, Number(data.dwCaps), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hkl !== undefined) view.setBigUint64(48, data.hkl === null ? 0n : BigInt(util.toPointer(data.hkl)), true);
  // 0x38: u32
  if (data?.dwFlags !== undefined) view.setUint32(56, Number(data.dwFlags), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_PRESERVEDKEY (size: 8)
 */
export interface TF_PRESERVEDKEY {
  /** u32 */
  uVKey: number;
  /** u32 */
  uModifiers: number;
}

export const sizeofTF_PRESERVEDKEY = 8;

export function allocTF_PRESERVEDKEY(data?: Partial<TF_PRESERVEDKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_PRESERVEDKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uVKey !== undefined) view.setUint32(0, Number(data.uVKey), true);
  // 0x04: u32
  if (data?.uModifiers !== undefined) view.setUint32(4, Number(data.uModifiers), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_DA_COLOR (size: 16)
 */
export interface TF_DA_COLOR {
  /** Windows.Win32.UI.TextServices.TF_DA_COLORTYPE */
  type: TF_DA_COLORTYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_DA_COLOR = 16;

export function allocTF_DA_COLOR(data?: Partial<TF_DA_COLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_DA_COLOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_DISPLAYATTRIBUTE (size: 40)
 */
export interface TF_DISPLAYATTRIBUTE {
  /** Windows.Win32.UI.TextServices.TF_DA_COLOR */
  crText: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.TF_DA_COLOR */
  crBk: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.TF_DA_LINESTYLE */
  lsStyle: TF_DA_LINESTYLE;
  /** Windows.Win32.Foundation.BOOL */
  fBoldLine: boolean;
  /** Windows.Win32.UI.TextServices.TF_DA_COLOR */
  crLine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TextServices.TF_DA_ATTR_INFO */
  bAttr: TF_DA_ATTR_INFO;
}

export const sizeofTF_DISPLAYATTRIBUTE = 40;

export function allocTF_DISPLAYATTRIBUTE(data?: Partial<TF_DISPLAYATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_DISPLAYATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.crText !== undefined) view.setBigUint64(0, data.crText === null ? 0n : BigInt(util.toPointer(data.crText)), true);
  // 0x08: pointer
  if (data?.crBk !== undefined) view.setBigUint64(8, data.crBk === null ? 0n : BigInt(util.toPointer(data.crBk)), true);
  // 0x10: i32
  if (data?.lsStyle !== undefined) view.setInt32(16, Number(data.lsStyle), true);
  // 0x14: i32
  if (data?.fBoldLine !== undefined) view.setInt32(20, Number(data.fBoldLine), true);
  // 0x18: pointer
  if (data?.crLine !== undefined) view.setBigUint64(24, data.crLine === null ? 0n : BigInt(util.toPointer(data.crLine)), true);
  // 0x20: i32
  if (data?.bAttr !== undefined) view.setInt32(32, Number(data.bAttr), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TextServices.TF_LMLATTELEMENT (size: 32)
 */
export interface TF_LMLATTELEMENT {
  /** u32 */
  dwFrameStart: number;
  /** u32 */
  dwFrameLen: number;
  /** u32 */
  dwFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  bstrText: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTF_LMLATTELEMENT = 32;

export function allocTF_LMLATTELEMENT(data?: Partial<TF_LMLATTELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTF_LMLATTELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFrameStart !== undefined) view.setUint32(0, Number(data.dwFrameStart), true);
  // 0x04: u32
  if (data?.dwFrameLen !== undefined) view.setUint32(4, Number(data.dwFrameLen), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.bstrText !== undefined) view.setBigUint64(24, data.bstrText === null ? 0n : BigInt(util.toPointer(data.bstrText)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type HRESULT = number;

// Native Libraries

try {
  var libMsCtfMonitor_dll = Deno.dlopen("MsCtfMonitor.dll", {
    DoMsCtfMonitor: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    InitLocalMsCtfMonitor: {
      parameters: ["u32"],
      result: "pointer",
    },
    UninitLocalMsCtfMonitor: {
      parameters: [],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DoMsCtfMonitor(
  dwFlags: number /* u32 */,
  hEventForServiceStop: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMsCtfMonitor_dll.DoMsCtfMonitor(dwFlags, util.toPointer(hEventForServiceStop)));
}

export function InitLocalMsCtfMonitor(
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMsCtfMonitor_dll.InitLocalMsCtfMonitor(dwFlags));
}

export function UninitLocalMsCtfMonitor(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libMsCtfMonitor_dll.UninitLocalMsCtfMonitor());
}

