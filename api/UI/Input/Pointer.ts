/// Auto-generated by Deno Win32: Windows.Win32.UI.Input.Pointer.Apis

import * as util from "../../../util.ts";

// Enums
export type POINTER_FLAGS = number;
export type TOUCH_FEEDBACK_MODE = number;
export type POINTER_BUTTON_CHANGE_TYPE = number;
export type POINTER_INPUT_TYPE = number;

// Constants
export const POINTER_FLAG_NONE = 0;
export const POINTER_FLAG_NEW = 1;
export const POINTER_FLAG_INRANGE = 2;
export const POINTER_FLAG_INCONTACT = 4;
export const POINTER_FLAG_FIRSTBUTTON = 16;
export const POINTER_FLAG_SECONDBUTTON = 32;
export const POINTER_FLAG_THIRDBUTTON = 64;
export const POINTER_FLAG_FOURTHBUTTON = 128;
export const POINTER_FLAG_FIFTHBUTTON = 256;
export const POINTER_FLAG_PRIMARY = 8192;
export const POINTER_FLAG_CONFIDENCE = 16384;
export const POINTER_FLAG_CANCELED = 32768;
export const POINTER_FLAG_DOWN = 65536;
export const POINTER_FLAG_UPDATE = 131072;
export const POINTER_FLAG_UP = 262144;
export const POINTER_FLAG_WHEEL = 524288;
export const POINTER_FLAG_HWHEEL = 1048576;
export const POINTER_FLAG_CAPTURECHANGED = 2097152;
export const POINTER_FLAG_HASTRANSFORM = 4194304;
export const TOUCH_FEEDBACK_DEFAULT = 1;
export const TOUCH_FEEDBACK_INDIRECT = 2;
export const TOUCH_FEEDBACK_NONE = 3;
export const POINTER_CHANGE_NONE = 0;
export const POINTER_CHANGE_FIRSTBUTTON_DOWN = 1;
export const POINTER_CHANGE_FIRSTBUTTON_UP = 2;
export const POINTER_CHANGE_SECONDBUTTON_DOWN = 3;
export const POINTER_CHANGE_SECONDBUTTON_UP = 4;
export const POINTER_CHANGE_THIRDBUTTON_DOWN = 5;
export const POINTER_CHANGE_THIRDBUTTON_UP = 6;
export const POINTER_CHANGE_FOURTHBUTTON_DOWN = 7;
export const POINTER_CHANGE_FOURTHBUTTON_UP = 8;
export const POINTER_CHANGE_FIFTHBUTTON_DOWN = 9;
export const POINTER_CHANGE_FIFTHBUTTON_UP = 10;
export const PT_POINTER = 1;
export const PT_TOUCH = 2;
export const PT_PEN = 3;
export const PT_MOUSE = 4;
export const PT_TOUCHPAD = 5;

// Structs

export type HANDLE = Deno.PointerValue;

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Pointer.POINTER_INFO (size: 96)
 */
export interface POINTER_INFO {
  /** Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */
  pointerType: POINTER_INPUT_TYPE;
  /** u32 */
  pointerId: number;
  /** u32 */
  frameId: number;
  /** Windows.Win32.UI.Input.Pointer.POINTER_FLAGS */
  pointerFlags: POINTER_FLAGS;
  /** Windows.Win32.Foundation.HANDLE */
  sourceDevice: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HWND */
  hwndTarget: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptPixelLocation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptHimetricLocation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptPixelLocationRaw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptHimetricLocationRaw: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwTime: number;
  /** u32 */
  historyCount: number;
  /** i32 */
  InputData: number;
  /** u32 */
  dwKeyStates: number;
  /** u64 */
  PerformanceCount: Deno.PointerValue;
  /** Windows.Win32.UI.Input.Pointer.POINTER_BUTTON_CHANGE_TYPE */
  ButtonChangeType: POINTER_BUTTON_CHANGE_TYPE;
}

export const sizeofPOINTER_INFO = 96;

export function allocPOINTER_INFO(data?: Partial<POINTER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.pointerType !== undefined) view.setInt32(0, Number(data.pointerType), true);
  // 0x04: u32
  if (data?.pointerId !== undefined) view.setUint32(4, Number(data.pointerId), true);
  // 0x08: u32
  if (data?.frameId !== undefined) view.setUint32(8, Number(data.frameId), true);
  // 0x0c: u32
  if (data?.pointerFlags !== undefined) view.setUint32(12, Number(data.pointerFlags), true);
  // 0x10: pointer
  if (data?.sourceDevice !== undefined) view.setBigUint64(16, data.sourceDevice === null ? 0n : BigInt(util.toPointer(data.sourceDevice)), true);
  // 0x18: pointer
  if (data?.hwndTarget !== undefined) view.setBigUint64(24, data.hwndTarget === null ? 0n : BigInt(util.toPointer(data.hwndTarget)), true);
  // 0x20: pointer
  if (data?.ptPixelLocation !== undefined) view.setBigUint64(32, data.ptPixelLocation === null ? 0n : BigInt(util.toPointer(data.ptPixelLocation)), true);
  // 0x28: pointer
  if (data?.ptHimetricLocation !== undefined) view.setBigUint64(40, data.ptHimetricLocation === null ? 0n : BigInt(util.toPointer(data.ptHimetricLocation)), true);
  // 0x30: pointer
  if (data?.ptPixelLocationRaw !== undefined) view.setBigUint64(48, data.ptPixelLocationRaw === null ? 0n : BigInt(util.toPointer(data.ptPixelLocationRaw)), true);
  // 0x38: pointer
  if (data?.ptHimetricLocationRaw !== undefined) view.setBigUint64(56, data.ptHimetricLocationRaw === null ? 0n : BigInt(util.toPointer(data.ptHimetricLocationRaw)), true);
  // 0x40: u32
  if (data?.dwTime !== undefined) view.setUint32(64, Number(data.dwTime), true);
  // 0x44: u32
  if (data?.historyCount !== undefined) view.setUint32(68, Number(data.historyCount), true);
  // 0x48: i32
  if (data?.InputData !== undefined) view.setInt32(72, Number(data.InputData), true);
  // 0x4c: u32
  if (data?.dwKeyStates !== undefined) view.setUint32(76, Number(data.dwKeyStates), true);
  // 0x50: u64
  if (data?.PerformanceCount !== undefined) view.setBigUint64(80, BigInt(data.PerformanceCount), true);
  // 0x58: i32
  if (data?.ButtonChangeType !== undefined) view.setInt32(88, Number(data.ButtonChangeType), true);
  // 0x5c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Pointer.POINTER_TOUCH_INFO (size: 40)
 */
export interface POINTER_TOUCH_INFO {
  /** Windows.Win32.UI.Input.Pointer.POINTER_INFO */
  pointerInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  touchFlags: number;
  /** u32 */
  touchMask: number;
  /** Windows.Win32.Foundation.RECT */
  rcContact: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcContactRaw: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  orientation: number;
  /** u32 */
  pressure: number;
}

export const sizeofPOINTER_TOUCH_INFO = 40;

export function allocPOINTER_TOUCH_INFO(data?: Partial<POINTER_TOUCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_TOUCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pointerInfo !== undefined) view.setBigUint64(0, data.pointerInfo === null ? 0n : BigInt(util.toPointer(data.pointerInfo)), true);
  // 0x08: u32
  if (data?.touchFlags !== undefined) view.setUint32(8, Number(data.touchFlags), true);
  // 0x0c: u32
  if (data?.touchMask !== undefined) view.setUint32(12, Number(data.touchMask), true);
  // 0x10: pointer
  if (data?.rcContact !== undefined) view.setBigUint64(16, data.rcContact === null ? 0n : BigInt(util.toPointer(data.rcContact)), true);
  // 0x18: pointer
  if (data?.rcContactRaw !== undefined) view.setBigUint64(24, data.rcContactRaw === null ? 0n : BigInt(util.toPointer(data.rcContactRaw)), true);
  // 0x20: u32
  if (data?.orientation !== undefined) view.setUint32(32, Number(data.orientation), true);
  // 0x24: u32
  if (data?.pressure !== undefined) view.setUint32(36, Number(data.pressure), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Pointer.POINTER_PEN_INFO (size: 32)
 */
export interface POINTER_PEN_INFO {
  /** Windows.Win32.UI.Input.Pointer.POINTER_INFO */
  pointerInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  penFlags: number;
  /** u32 */
  penMask: number;
  /** u32 */
  pressure: number;
  /** u32 */
  rotation: number;
  /** i32 */
  tiltX: number;
  /** i32 */
  tiltY: number;
}

export const sizeofPOINTER_PEN_INFO = 32;

export function allocPOINTER_PEN_INFO(data?: Partial<POINTER_PEN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTER_PEN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pointerInfo !== undefined) view.setBigUint64(0, data.pointerInfo === null ? 0n : BigInt(util.toPointer(data.pointerInfo)), true);
  // 0x08: u32
  if (data?.penFlags !== undefined) view.setUint32(8, Number(data.penFlags), true);
  // 0x0c: u32
  if (data?.penMask !== undefined) view.setUint32(12, Number(data.penMask), true);
  // 0x10: u32
  if (data?.pressure !== undefined) view.setUint32(16, Number(data.pressure), true);
  // 0x14: u32
  if (data?.rotation !== undefined) view.setUint32(20, Number(data.rotation), true);
  // 0x18: i32
  if (data?.tiltX !== undefined) view.setInt32(24, Number(data.tiltX), true);
  // 0x1c: i32
  if (data?.tiltY !== undefined) view.setInt32(28, Number(data.tiltY), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Pointer.INPUT_INJECTION_VALUE (size: 16)
 */
export interface INPUT_INJECTION_VALUE {
  /** u16 */
  page: number;
  /** u16 */
  usage: number;
  /** i32 */
  value: number;
  /** u16 */
  index: number;
}

export const sizeofINPUT_INJECTION_VALUE = 16;

export function allocINPUT_INJECTION_VALUE(data?: Partial<INPUT_INJECTION_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_INJECTION_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.page !== undefined) view.setUint16(0, Number(data.page), true);
  // 0x02: u16
  if (data?.usage !== undefined) view.setUint16(2, Number(data.usage), true);
  // 0x04: i32
  if (data?.value !== undefined) view.setInt32(4, Number(data.value), true);
  // 0x08: u16
  if (data?.index !== undefined) view.setUint16(8, Number(data.index), true);
  // 0x0a: pad6
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Pointer.INPUT_TRANSFORM (size: 8)
 */
export interface INPUT_TRANSFORM {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINPUT_TRANSFORM = 8;

export function allocINPUT_TRANSFORM(data?: Partial<INPUT_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export type BOOL = number;

export type HSYNTHETICPOINTERDEVICE = Deno.PointerValue;

// Native Libraries

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    GetUnpredictedMessagePos: {
      parameters: [],
      result: "u32",
    },
    InitializeTouchInjection: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    InjectTouchInput: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetPointerType: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetPointerCursorId: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetPointerInfo: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetPointerInfoHistory: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerFrameInfo: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerFrameInfoHistory: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerTouchInfo: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetPointerTouchInfoHistory: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerFrameTouchInfo: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerFrameTouchInfoHistory: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerPenInfo: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    GetPointerPenInfoHistory: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerFramePenInfo: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerFramePenInfoHistory: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SkipPointerFrameMessages: {
      parameters: ["u32"],
      result: "i32",
    },
    InjectSyntheticPointerInput: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    EnableMouseInPointer: {
      parameters: ["i32"],
      result: "i32",
    },
    IsMouseInPointerEnabled: {
      parameters: [],
      result: "i32",
    },
    GetPointerInputTransform: {
      parameters: ["u32", "u32", "pointer"],
      result: "i32",
    },
    GetPointerDevices: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetPointerDevice: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GetPointerDeviceProperties: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerDeviceRects: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetPointerDeviceCursors: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetRawPointerDeviceData: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetUnpredictedMessagePos(): number /* u32 */ {
  return libUSER32_dll.GetUnpredictedMessagePos();
}

export function InitializeTouchInjection(
  maxCount: number /* u32 */,
  dwMode: TOUCH_FEEDBACK_MODE /* Windows.Win32.UI.Input.Pointer.TOUCH_FEEDBACK_MODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InitializeTouchInjection(maxCount, dwMode));
}

export function InjectTouchInput(
  count: number /* u32 */,
  contacts: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InjectTouchInput(count, util.toPointer(contacts)));
}

export function GetPointerType(
  pointerId: number /* u32 */,
  pointerType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerType(pointerId, util.toPointer(pointerType)));
}

export function GetPointerCursorId(
  pointerId: number /* u32 */,
  cursorId: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerCursorId(pointerId, util.toPointer(cursorId)));
}

export function GetPointerInfo(
  pointerId: number /* u32 */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerInfo(pointerId, util.toPointer(pointerInfo)));
}

export function GetPointerInfoHistory(
  pointerId: number /* u32 */,
  entriesCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerInfoHistory(pointerId, util.toPointer(entriesCount), util.toPointer(pointerInfo)));
}

export function GetPointerFrameInfo(
  pointerId: number /* u32 */,
  pointerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerFrameInfo(pointerId, util.toPointer(pointerCount), util.toPointer(pointerInfo)));
}

export function GetPointerFrameInfoHistory(
  pointerId: number /* u32 */,
  entriesCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerFrameInfoHistory(pointerId, util.toPointer(entriesCount), util.toPointer(pointerCount), util.toPointer(pointerInfo)));
}

export function GetPointerTouchInfo(
  pointerId: number /* u32 */,
  touchInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerTouchInfo(pointerId, util.toPointer(touchInfo)));
}

export function GetPointerTouchInfoHistory(
  pointerId: number /* u32 */,
  entriesCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  touchInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerTouchInfoHistory(pointerId, util.toPointer(entriesCount), util.toPointer(touchInfo)));
}

export function GetPointerFrameTouchInfo(
  pointerId: number /* u32 */,
  pointerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  touchInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerFrameTouchInfo(pointerId, util.toPointer(pointerCount), util.toPointer(touchInfo)));
}

export function GetPointerFrameTouchInfoHistory(
  pointerId: number /* u32 */,
  entriesCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  touchInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerFrameTouchInfoHistory(pointerId, util.toPointer(entriesCount), util.toPointer(pointerCount), util.toPointer(touchInfo)));
}

export function GetPointerPenInfo(
  pointerId: number /* u32 */,
  penInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerPenInfo(pointerId, util.toPointer(penInfo)));
}

export function GetPointerPenInfoHistory(
  pointerId: number /* u32 */,
  entriesCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  penInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerPenInfoHistory(pointerId, util.toPointer(entriesCount), util.toPointer(penInfo)));
}

export function GetPointerFramePenInfo(
  pointerId: number /* u32 */,
  pointerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  penInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerFramePenInfo(pointerId, util.toPointer(pointerCount), util.toPointer(penInfo)));
}

export function GetPointerFramePenInfoHistory(
  pointerId: number /* u32 */,
  entriesCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  penInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerFramePenInfoHistory(pointerId, util.toPointer(entriesCount), util.toPointer(pointerCount), util.toPointer(penInfo)));
}

export function SkipPointerFrameMessages(
  pointerId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SkipPointerFrameMessages(pointerId));
}

export function InjectSyntheticPointerInput(
  device: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Controls.HSYNTHETICPOINTERDEVICE */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.InjectSyntheticPointerInput(util.toPointer(device), util.toPointer(pointerInfo), count));
}

export function EnableMouseInPointer(
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnableMouseInPointer(util.boolToFfi(fEnable)));
}

export function IsMouseInPointerEnabled(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsMouseInPointerEnabled());
}

export function GetPointerInputTransform(
  pointerId: number /* u32 */,
  historyCount: number /* u32 */,
  inputTransform: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerInputTransform(pointerId, historyCount, util.toPointer(inputTransform)));
}

export function GetPointerDevices(
  deviceCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerDevices: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerDevices(util.toPointer(deviceCount), util.toPointer(pointerDevices)));
}

export function GetPointerDevice(
  device: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pointerDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerDevice(util.toPointer(device), util.toPointer(pointerDevice)));
}

export function GetPointerDeviceProperties(
  device: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  propertyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pointerProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerDeviceProperties(util.toPointer(device), util.toPointer(propertyCount), util.toPointer(pointerProperties)));
}

export function GetPointerDeviceRects(
  device: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pointerDeviceRect: Deno.PointerValue | Uint8Array | null /* ptr */,
  displayRect: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerDeviceRects(util.toPointer(device), util.toPointer(pointerDeviceRect), util.toPointer(displayRect)));
}

export function GetPointerDeviceCursors(
  device: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  cursorCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  deviceCursors: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetPointerDeviceCursors(util.toPointer(device), util.toPointer(cursorCount), util.toPointer(deviceCursors)));
}

export function GetRawPointerDeviceData(
  pointerId: number /* u32 */,
  historyCount: number /* u32 */,
  propertiesCount: number /* u32 */,
  pProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValues: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetRawPointerDeviceData(pointerId, historyCount, propertiesCount, util.toPointer(pProperties), util.toPointer(pValues)));
}

