/// Auto-generated by Deno Win32: Windows.Win32.UI.Input.KeyboardAndMouse.Apis

import * as util from "../../../util.ts";

// Enums
export type HOT_KEY_MODIFIERS = number;
export type ACTIVATE_KEYBOARD_LAYOUT_FLAGS = number;
export type GET_MOUSE_MOVE_POINTS_EX_RESOLUTION = number;
export type KEYBD_EVENT_FLAGS = number;
export type MOUSE_EVENT_FLAGS = number;
export type INPUT_TYPE = number;
export type TRACKMOUSEEVENT_FLAGS = number;
export type VIRTUAL_KEY = number;

// Constants
export const MOD_ALT = 1;
export const MOD_CONTROL = 2;
export const MOD_NOREPEAT = 16384;
export const MOD_SHIFT = 4;
export const MOD_WIN = 8;
export const KLF_REORDER = 8;
export const KLF_RESET = 1073741824;
export const KLF_SETFORPROCESS = 256;
export const KLF_SHIFTLOCK = 65536;
export const KLF_ACTIVATE = 1;
export const KLF_NOTELLSHELL = 128;
export const KLF_REPLACELANG = 16;
export const KLF_SUBSTITUTE_OK = 2;
export const GMMP_USE_DISPLAY_POINTS = 1;
export const GMMP_USE_HIGH_RESOLUTION_POINTS = 2;
export const KEYEVENTF_EXTENDEDKEY = 1;
export const KEYEVENTF_KEYUP = 2;
export const KEYEVENTF_SCANCODE = 8;
export const KEYEVENTF_UNICODE = 4;
export const MOUSEEVENTF_ABSOLUTE = 32768;
export const MOUSEEVENTF_LEFTDOWN = 2;
export const MOUSEEVENTF_LEFTUP = 4;
export const MOUSEEVENTF_MIDDLEDOWN = 32;
export const MOUSEEVENTF_MIDDLEUP = 64;
export const MOUSEEVENTF_MOVE = 1;
export const MOUSEEVENTF_RIGHTDOWN = 8;
export const MOUSEEVENTF_RIGHTUP = 16;
export const MOUSEEVENTF_WHEEL = 2048;
export const MOUSEEVENTF_XDOWN = 128;
export const MOUSEEVENTF_XUP = 256;
export const MOUSEEVENTF_HWHEEL = 4096;
export const MOUSEEVENTF_MOVE_NOCOALESCE = 8192;
export const MOUSEEVENTF_VIRTUALDESK = 16384;
export const INPUT_MOUSE = 0;
export const INPUT_KEYBOARD = 1;
export const INPUT_HARDWARE = 2;
export const TME_CANCEL = 2147483648;
export const TME_HOVER = 1;
export const TME_LEAVE = 2;
export const TME_NONCLIENT = 16;
export const TME_QUERY = 1073741824;
export const VK_0 = 48;
export const VK_1 = 49;
export const VK_2 = 50;
export const VK_3 = 51;
export const VK_4 = 52;
export const VK_5 = 53;
export const VK_6 = 54;
export const VK_7 = 55;
export const VK_8 = 56;
export const VK_9 = 57;
export const VK_A = 65;
export const VK_B = 66;
export const VK_C = 67;
export const VK_D = 68;
export const VK_E = 69;
export const VK_F = 70;
export const VK_G = 71;
export const VK_H = 72;
export const VK_I = 73;
export const VK_J = 74;
export const VK_K = 75;
export const VK_L = 76;
export const VK_M = 77;
export const VK_N = 78;
export const VK_O = 79;
export const VK_P = 80;
export const VK_Q = 81;
export const VK_R = 82;
export const VK_S = 83;
export const VK_T = 84;
export const VK_U = 85;
export const VK_V = 86;
export const VK_W = 87;
export const VK_X = 88;
export const VK_Y = 89;
export const VK_Z = 90;
export const VK_LBUTTON = 1;
export const VK_RBUTTON = 2;
export const VK_CANCEL = 3;
export const VK_MBUTTON = 4;
export const VK_XBUTTON1 = 5;
export const VK_XBUTTON2 = 6;
export const VK_BACK = 8;
export const VK_TAB = 9;
export const VK_CLEAR = 12;
export const VK_RETURN = 13;
export const VK_SHIFT = 16;
export const VK_CONTROL = 17;
export const VK_MENU = 18;
export const VK_PAUSE = 19;
export const VK_CAPITAL = 20;
export const VK_KANA = 21;
export const VK_HANGEUL = 21;
export const VK_HANGUL = 21;
export const VK_IME_ON = 22;
export const VK_JUNJA = 23;
export const VK_FINAL = 24;
export const VK_HANJA = 25;
export const VK_KANJI = 25;
export const VK_IME_OFF = 26;
export const VK_ESCAPE = 27;
export const VK_CONVERT = 28;
export const VK_NONCONVERT = 29;
export const VK_ACCEPT = 30;
export const VK_MODECHANGE = 31;
export const VK_SPACE = 32;
export const VK_PRIOR = 33;
export const VK_NEXT = 34;
export const VK_END = 35;
export const VK_HOME = 36;
export const VK_LEFT = 37;
export const VK_UP = 38;
export const VK_RIGHT = 39;
export const VK_DOWN = 40;
export const VK_SELECT = 41;
export const VK_PRINT = 42;
export const VK_EXECUTE = 43;
export const VK_SNAPSHOT = 44;
export const VK_INSERT = 45;
export const VK_DELETE = 46;
export const VK_HELP = 47;
export const VK_LWIN = 91;
export const VK_RWIN = 92;
export const VK_APPS = 93;
export const VK_SLEEP = 95;
export const VK_NUMPAD0 = 96;
export const VK_NUMPAD1 = 97;
export const VK_NUMPAD2 = 98;
export const VK_NUMPAD3 = 99;
export const VK_NUMPAD4 = 100;
export const VK_NUMPAD5 = 101;
export const VK_NUMPAD6 = 102;
export const VK_NUMPAD7 = 103;
export const VK_NUMPAD8 = 104;
export const VK_NUMPAD9 = 105;
export const VK_MULTIPLY = 106;
export const VK_ADD = 107;
export const VK_SEPARATOR = 108;
export const VK_SUBTRACT = 109;
export const VK_DECIMAL = 110;
export const VK_DIVIDE = 111;
export const VK_F1 = 112;
export const VK_F2 = 113;
export const VK_F3 = 114;
export const VK_F4 = 115;
export const VK_F5 = 116;
export const VK_F6 = 117;
export const VK_F7 = 118;
export const VK_F8 = 119;
export const VK_F9 = 120;
export const VK_F10 = 121;
export const VK_F11 = 122;
export const VK_F12 = 123;
export const VK_F13 = 124;
export const VK_F14 = 125;
export const VK_F15 = 126;
export const VK_F16 = 127;
export const VK_F17 = 128;
export const VK_F18 = 129;
export const VK_F19 = 130;
export const VK_F20 = 131;
export const VK_F21 = 132;
export const VK_F22 = 133;
export const VK_F23 = 134;
export const VK_F24 = 135;
export const VK_NAVIGATION_VIEW = 136;
export const VK_NAVIGATION_MENU = 137;
export const VK_NAVIGATION_UP = 138;
export const VK_NAVIGATION_DOWN = 139;
export const VK_NAVIGATION_LEFT = 140;
export const VK_NAVIGATION_RIGHT = 141;
export const VK_NAVIGATION_ACCEPT = 142;
export const VK_NAVIGATION_CANCEL = 143;
export const VK_NUMLOCK = 144;
export const VK_SCROLL = 145;
export const VK_OEM_NEC_EQUAL = 146;
export const VK_OEM_FJ_JISHO = 146;
export const VK_OEM_FJ_MASSHOU = 147;
export const VK_OEM_FJ_TOUROKU = 148;
export const VK_OEM_FJ_LOYA = 149;
export const VK_OEM_FJ_ROYA = 150;
export const VK_LSHIFT = 160;
export const VK_RSHIFT = 161;
export const VK_LCONTROL = 162;
export const VK_RCONTROL = 163;
export const VK_LMENU = 164;
export const VK_RMENU = 165;
export const VK_BROWSER_BACK = 166;
export const VK_BROWSER_FORWARD = 167;
export const VK_BROWSER_REFRESH = 168;
export const VK_BROWSER_STOP = 169;
export const VK_BROWSER_SEARCH = 170;
export const VK_BROWSER_FAVORITES = 171;
export const VK_BROWSER_HOME = 172;
export const VK_VOLUME_MUTE = 173;
export const VK_VOLUME_DOWN = 174;
export const VK_VOLUME_UP = 175;
export const VK_MEDIA_NEXT_TRACK = 176;
export const VK_MEDIA_PREV_TRACK = 177;
export const VK_MEDIA_STOP = 178;
export const VK_MEDIA_PLAY_PAUSE = 179;
export const VK_LAUNCH_MAIL = 180;
export const VK_LAUNCH_MEDIA_SELECT = 181;
export const VK_LAUNCH_APP1 = 182;
export const VK_LAUNCH_APP2 = 183;
export const VK_OEM_1 = 186;
export const VK_OEM_PLUS = 187;
export const VK_OEM_COMMA = 188;
export const VK_OEM_MINUS = 189;
export const VK_OEM_PERIOD = 190;
export const VK_OEM_2 = 191;
export const VK_OEM_3 = 192;
export const VK_GAMEPAD_A = 195;
export const VK_GAMEPAD_B = 196;
export const VK_GAMEPAD_X = 197;
export const VK_GAMEPAD_Y = 198;
export const VK_GAMEPAD_RIGHT_SHOULDER = 199;
export const VK_GAMEPAD_LEFT_SHOULDER = 200;
export const VK_GAMEPAD_LEFT_TRIGGER = 201;
export const VK_GAMEPAD_RIGHT_TRIGGER = 202;
export const VK_GAMEPAD_DPAD_UP = 203;
export const VK_GAMEPAD_DPAD_DOWN = 204;
export const VK_GAMEPAD_DPAD_LEFT = 205;
export const VK_GAMEPAD_DPAD_RIGHT = 206;
export const VK_GAMEPAD_MENU = 207;
export const VK_GAMEPAD_VIEW = 208;
export const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210;
export const VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211;
export const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212;
export const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213;
export const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217;
export const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218;
export const VK_OEM_4 = 219;
export const VK_OEM_5 = 220;
export const VK_OEM_6 = 221;
export const VK_OEM_7 = 222;
export const VK_OEM_8 = 223;
export const VK_OEM_AX = 225;
export const VK_OEM_102 = 226;
export const VK_ICO_HELP = 227;
export const VK_ICO_00 = 228;
export const VK_PROCESSKEY = 229;
export const VK_ICO_CLEAR = 230;
export const VK_PACKET = 231;
export const VK_OEM_RESET = 233;
export const VK_OEM_JUMP = 234;
export const VK_OEM_PA1 = 235;
export const VK_OEM_PA2 = 236;
export const VK_OEM_PA3 = 237;
export const VK_OEM_WSCTRL = 238;
export const VK_OEM_CUSEL = 239;
export const VK_OEM_ATTN = 240;
export const VK_OEM_FINISH = 241;
export const VK_OEM_COPY = 242;
export const VK_OEM_AUTO = 243;
export const VK_OEM_ENLW = 244;
export const VK_OEM_BACKTAB = 245;
export const VK_ATTN = 246;
export const VK_CRSEL = 247;
export const VK_EXSEL = 248;
export const VK_EREOF = 249;
export const VK_PLAY = 250;
export const VK_ZOOM = 251;
export const VK_NONAME = 252;
export const VK_PA1 = 253;
export const VK_OEM_CLEAR = 254;
export const EXTENDED_BIT = 16777216;
export const DONTCARE_BIT = 33554432;
export const FAKE_KEYSTROKE = 33554432;
export const KBDBASE = 0;
export const KBDSHIFT = 1;
export const KBDCTRL = 2;
export const KBDALT = 4;
export const KBDKANA = 8;
export const KBDROYA = 16;
export const KBDLOYA = 32;
export const KBDGRPSELTAP = 128;
export const GRAVE = 768;
export const ACUTE = 769;
export const CIRCUMFLEX = 770;
export const TILDE = 771;
export const MACRON = 772;
export const OVERSCORE = 773;
export const BREVE = 774;
export const DOT_ABOVE = 775;
export const UMLAUT = 776;
export const DIARESIS = 776;
export const HOOK_ABOVE = 777;
export const RING = 778;
export const DOUBLE_ACUTE = 779;
export const HACEK = 780;
export const CEDILLA = 807;
export const OGONEK = 808;
export const TONOS = 900;
export const DIARESIS_TONOS = 901;
export const wszGRAVE = `\0`;
export const wszACUTE = `\x01`;
export const wszCIRCUMFLEX = `\x02`;
export const wszTILDE = `\x03`;
export const wszMACRON = `\x04`;
export const wszOVERSCORE = `\x05`;
export const wszBREVE = `\x06`;
export const wszDOT_ABOVE = `\x07`;
export const wszUMLAUT = `\b`;
export const wszHOOK_ABOVE = `\t`;
export const wszRING = `\n`;
export const wszDOUBLE_ACUTE = `\v`;
export const wszHACEK = `\f`;
export const wszCEDILLA = `'`;
export const wszOGONEK = `(`;
export const wszTONOS = `\xfffd`;
export const wszDIARESIS_TONOS = `\xfffd`;
export const SHFT_INVALID = 15;
export const WCH_NONE = 61440;
export const WCH_DEAD = 61441;
export const WCH_LGTR = 61442;
export const CAPLOK = 1;
export const SGCAPS = 2;
export const CAPLOKALTGR = 4;
export const KANALOK = 8;
export const GRPSELTAP = 128;
export const DKF_DEAD = 1;
export const KBD_VERSION = 1;
export const KLLF_ALTGR = 1;
export const KLLF_SHIFTLOCK = 2;
export const KLLF_LRM_RLM = 4;
export const KLLF_GLOBAL_ATTRS = 2;
export const KBDTABLE_MULTI_MAX = 8;
export const KEYBOARD_TYPE_GENERIC_101 = 4;
export const KEYBOARD_TYPE_JAPAN = 7;
export const KEYBOARD_TYPE_KOREA = 8;
export const KEYBOARD_TYPE_UNKNOWN = 81;
export const NLSKBD_OEM_MICROSOFT = 0;
export const NLSKBD_OEM_AX = 1;
export const NLSKBD_OEM_EPSON = 4;
export const NLSKBD_OEM_FUJITSU = 5;
export const NLSKBD_OEM_IBM = 7;
export const NLSKBD_OEM_MATSUSHITA = 10;
export const NLSKBD_OEM_NEC = 13;
export const NLSKBD_OEM_TOSHIBA = 18;
export const NLSKBD_OEM_DEC = 24;
export const MICROSOFT_KBD_101_TYPE = 0;
export const MICROSOFT_KBD_AX_TYPE = 1;
export const MICROSOFT_KBD_106_TYPE = 2;
export const MICROSOFT_KBD_002_TYPE = 3;
export const MICROSOFT_KBD_001_TYPE = 4;
export const MICROSOFT_KBD_FUNC = 12;
export const AX_KBD_DESKTOP_TYPE = 1;
export const FMR_KBD_JIS_TYPE = 0;
export const FMR_KBD_OASYS_TYPE = 1;
export const FMV_KBD_OASYS_TYPE = 2;
export const NEC_KBD_NORMAL_TYPE = 1;
export const NEC_KBD_N_MODE_TYPE = 2;
export const NEC_KBD_H_MODE_TYPE = 3;
export const NEC_KBD_LAPTOP_TYPE = 4;
export const NEC_KBD_106_TYPE = 5;
export const TOSHIBA_KBD_DESKTOP_TYPE = 13;
export const TOSHIBA_KBD_LAPTOP_TYPE = 15;
export const DEC_KBD_ANSI_LAYOUT_TYPE = 1;
export const DEC_KBD_JIS_LAYOUT_TYPE = 2;
export const MICROSOFT_KBD_101A_TYPE = 0;
export const MICROSOFT_KBD_101B_TYPE = 4;
export const MICROSOFT_KBD_101C_TYPE = 5;
export const MICROSOFT_KBD_103_TYPE = 6;
export const NLSKBD_INFO_SEND_IME_NOTIFICATION = 1;
export const NLSKBD_INFO_ACCESSIBILITY_KEYMAP = 2;
export const NLSKBD_INFO_EMURATE_101_KEYBOARD = 16;
export const NLSKBD_INFO_EMURATE_106_KEYBOARD = 32;
export const KBDNLS_TYPE_NULL = 0;
export const KBDNLS_TYPE_NORMAL = 1;
export const KBDNLS_TYPE_TOGGLE = 2;
export const KBDNLS_INDEX_NORMAL = 1;
export const KBDNLS_INDEX_ALT = 2;
export const KBDNLS_NULL = 0;
export const KBDNLS_NOEVENT = 1;
export const KBDNLS_SEND_BASE_VK = 2;
export const KBDNLS_SEND_PARAM_VK = 3;
export const KBDNLS_KANALOCK = 4;
export const KBDNLS_ALPHANUM = 5;
export const KBDNLS_HIRAGANA = 6;
export const KBDNLS_KATAKANA = 7;
export const KBDNLS_SBCSDBCS = 8;
export const KBDNLS_ROMAN = 9;
export const KBDNLS_CODEINPUT = 10;
export const KBDNLS_HELP_OR_END = 11;
export const KBDNLS_HOME_OR_CLEAR = 12;
export const KBDNLS_NUMPAD = 13;
export const KBDNLS_KANAEVENT = 14;
export const KBDNLS_CONV_OR_NONCONV = 15;
export const KBD_TYPE = 4;
export const VK__none_ = 255;
export const VK_ABNT_C1 = 193;
export const VK_ABNT_C2 = 194;
export const SCANCODE_LSHIFT = 42;
export const SCANCODE_RSHIFT = 54;
export const SCANCODE_CTRL = 29;
export const SCANCODE_ALT = 56;
export const SCANCODE_NUMPAD_FIRST = 71;
export const SCANCODE_NUMPAD_LAST = 82;
export const SCANCODE_LWIN = 91;
export const SCANCODE_RWIN = 92;
export const SCANCODE_THAI_LAYOUT_TOGGLE = 41;
export const VK_DBE_ALPHANUMERIC = 240;
export const VK_DBE_KATAKANA = 241;
export const VK_DBE_HIRAGANA = 242;
export const VK_DBE_SBCSCHAR = 243;
export const VK_DBE_DBCSCHAR = 244;
export const VK_DBE_ROMAN = 245;
export const VK_DBE_NOROMAN = 246;
export const VK_DBE_ENTERWORDREGISTERMODE = 247;
export const VK_DBE_ENTERIMECONFIGMODE = 248;
export const VK_DBE_FLUSHSTRING = 249;
export const VK_DBE_CODEINPUT = 250;
export const VK_DBE_NOCODEINPUT = 251;
export const VK_DBE_DETERMINESTRING = 252;
export const VK_DBE_ENTERDLGCONVERSIONMODE = 253;

// Structs

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_BIT (size: 8)
 */
export interface VK_TO_BIT {
  /** u8 */
  Vk: number;
  /** u8 */
  ModBits: number;
}

export const sizeofVK_TO_BIT = 8;

export function allocVK_TO_BIT(data?: Partial<VK_TO_BIT>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_BIT);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vk !== undefined) view.setUint8(0, Number(data.Vk));
  // 0x01: u8
  if (data?.ModBits !== undefined) view.setUint8(1, Number(data.ModBits));
  // 0x02: pad6
  return buf;
}

export class VK_TO_BITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vk(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ModBits(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set Vk(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ModBits(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.MODIFIERS (size: 24)
 */
export interface MODIFIERS {
  /** ptr */
  pVkToBit: Deno.PointerValue | Uint8Array;
  /** u16 */
  wMaxModBits: number;
  /** array */
  ModNumber: Deno.PointerValue;
}

export const sizeofMODIFIERS = 24;

export function allocMODIFIERS(data?: Partial<MODIFIERS>): Uint8Array {
  const buf = new Uint8Array(sizeofMODIFIERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pVkToBit !== undefined) view.setBigUint64(0, data.pVkToBit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVkToBit))), true);
  // 0x08: u16
  if (data?.wMaxModBits !== undefined) view.setUint16(8, Number(data.wMaxModBits), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.ModNumber !== undefined) view.setBigUint64(16, data.ModNumber === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ModNumber))), true);
  return buf;
}

export class MODIFIERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pVkToBit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wMaxModBits(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get ModNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pVkToBit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wMaxModBits(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set ModNumber(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VSC_VK (size: 8)
 */
export interface VSC_VK {
  /** u8 */
  Vsc: number;
  /** u16 */
  Vk: number;
}

export const sizeofVSC_VK = 8;

export function allocVSC_VK(data?: Partial<VSC_VK>): Uint8Array {
  const buf = new Uint8Array(sizeofVSC_VK);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vsc !== undefined) view.setUint8(0, Number(data.Vsc));
  // 0x01: u16
  if (data?.Vk !== undefined) view.setUint16(1, Number(data.Vk), true);
  // 0x03: pad5
  return buf;
}

export class VSC_VKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vsc(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get Vk(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x00: u8
  set Vsc(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set Vk(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_VSC (size: 8)
 */
export interface VK_VSC {
  /** u8 */
  Vk: number;
  /** u8 */
  Vsc: number;
}

export const sizeofVK_VSC = 8;

export function allocVK_VSC(data?: Partial<VK_VSC>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_VSC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vk !== undefined) view.setUint8(0, Number(data.Vk));
  // 0x01: u8
  if (data?.Vsc !== undefined) view.setUint8(1, Number(data.Vsc));
  // 0x02: pad6
  return buf;
}

export class VK_VSCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vk(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Vsc(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x00: u8
  set Vk(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Vsc(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS1 (size: 16)
 */
export interface VK_TO_WCHARS1 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS1 = 16;

export function allocVK_TO_WCHARS1(data?: Partial<VK_TO_WCHARS1>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS1);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS2 (size: 16)
 */
export interface VK_TO_WCHARS2 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS2 = 16;

export function allocVK_TO_WCHARS2(data?: Partial<VK_TO_WCHARS2>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS3 (size: 16)
 */
export interface VK_TO_WCHARS3 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS3 = 16;

export function allocVK_TO_WCHARS3(data?: Partial<VK_TO_WCHARS3>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS3);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS4 (size: 16)
 */
export interface VK_TO_WCHARS4 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS4 = 16;

export function allocVK_TO_WCHARS4(data?: Partial<VK_TO_WCHARS4>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS4);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS5 (size: 16)
 */
export interface VK_TO_WCHARS5 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS5 = 16;

export function allocVK_TO_WCHARS5(data?: Partial<VK_TO_WCHARS5>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS5);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS6 (size: 16)
 */
export interface VK_TO_WCHARS6 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS6 = 16;

export function allocVK_TO_WCHARS6(data?: Partial<VK_TO_WCHARS6>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS6);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS7 (size: 16)
 */
export interface VK_TO_WCHARS7 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS7 = 16;

export function allocVK_TO_WCHARS7(data?: Partial<VK_TO_WCHARS7>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS7);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS7View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS8 (size: 16)
 */
export interface VK_TO_WCHARS8 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS8 = 16;

export function allocVK_TO_WCHARS8(data?: Partial<VK_TO_WCHARS8>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS8);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS8View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS9 (size: 16)
 */
export interface VK_TO_WCHARS9 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS9 = 16;

export function allocVK_TO_WCHARS9(data?: Partial<VK_TO_WCHARS9>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS9);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS9View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHARS10 (size: 16)
 */
export interface VK_TO_WCHARS10 {
  /** u8 */
  VirtualKey: number;
  /** u8 */
  Attributes: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofVK_TO_WCHARS10 = 16;

export function allocVK_TO_WCHARS10(data?: Partial<VK_TO_WCHARS10>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHARS10);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u8
  if (data?.Attributes !== undefined) view.setUint8(1, Number(data.Attributes));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class VK_TO_WCHARS10View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Attributes(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Attributes(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_TO_WCHAR_TABLE (size: 16)
 */
export interface VK_TO_WCHAR_TABLE {
  /** ptr */
  pVkToWchars: Deno.PointerValue | Uint8Array;
  /** u8 */
  nModifications: number;
  /** u8 */
  cbSize: number;
}

export const sizeofVK_TO_WCHAR_TABLE = 16;

export function allocVK_TO_WCHAR_TABLE(data?: Partial<VK_TO_WCHAR_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_TO_WCHAR_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pVkToWchars !== undefined) view.setBigUint64(0, data.pVkToWchars === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVkToWchars))), true);
  // 0x08: u8
  if (data?.nModifications !== undefined) view.setUint8(8, Number(data.nModifications));
  // 0x09: u8
  if (data?.cbSize !== undefined) view.setUint8(9, Number(data.cbSize));
  // 0x0a: pad6
  return buf;
}

export class VK_TO_WCHAR_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pVkToWchars(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u8
  get nModifications(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get cbSize(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set pVkToWchars(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u8
  set nModifications(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set cbSize(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.DEADKEY (size: 24)
 */
export interface DEADKEY {
  /** u32 */
  dwBoth: number;
  /** char */
  wchComposed: Uint8Array | Deno.PointerValue;
  /** u16 */
  uFlags: number;
}

export const sizeofDEADKEY = 24;

export function allocDEADKEY(data?: Partial<DEADKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDEADKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBoth !== undefined) view.setUint32(0, Number(data.dwBoth), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wchComposed !== undefined) view.setBigUint64(8, data.wchComposed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wchComposed))), true);
  // 0x10: u16
  if (data?.uFlags !== undefined) view.setUint16(16, Number(data.uFlags), true);
  // 0x12: pad6
  return buf;
}

export class DEADKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBoth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wchComposed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get uFlags(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x00: u32
  set dwBoth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wchComposed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set uFlags(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE1 (size: 16)
 */
export interface LIGATURE1 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofLIGATURE1 = 16;

export function allocLIGATURE1(data?: Partial<LIGATURE1>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE1);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class LIGATURE1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE2 (size: 16)
 */
export interface LIGATURE2 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofLIGATURE2 = 16;

export function allocLIGATURE2(data?: Partial<LIGATURE2>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE2);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class LIGATURE2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE3 (size: 16)
 */
export interface LIGATURE3 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofLIGATURE3 = 16;

export function allocLIGATURE3(data?: Partial<LIGATURE3>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE3);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class LIGATURE3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE4 (size: 16)
 */
export interface LIGATURE4 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofLIGATURE4 = 16;

export function allocLIGATURE4(data?: Partial<LIGATURE4>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE4);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class LIGATURE4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LIGATURE5 (size: 16)
 */
export interface LIGATURE5 {
  /** u8 */
  VirtualKey: number;
  /** u16 */
  ModificationNumber: number;
  /** array */
  wch: Deno.PointerValue;
}

export const sizeofLIGATURE5 = 16;

export function allocLIGATURE5(data?: Partial<LIGATURE5>): Uint8Array {
  const buf = new Uint8Array(sizeofLIGATURE5);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.VirtualKey !== undefined) view.setUint8(0, Number(data.VirtualKey));
  // 0x01: u16
  if (data?.ModificationNumber !== undefined) view.setUint16(1, Number(data.ModificationNumber), true);
  // 0x03: pad5
  // 0x08: pointer
  if (data?.wch !== undefined) view.setBigUint64(8, data.wch === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wch))), true);
  return buf;
}

export class LIGATURE5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get VirtualKey(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u16
  get ModificationNumber(): number {
    return this.view.getUint16(1, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  get wch(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set VirtualKey(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u16
  set ModificationNumber(value: number) {
    this.view.setUint16(1, value, true);
  }

  // 0x03: pad5

  // 0x08: pointer
  set wch(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VSC_LPWSTR (size: 16)
 */
export interface VSC_LPWSTR {
  /** u8 */
  vsc: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwsz: string | null | Uint8Array | Uint16Array;
}

export const sizeofVSC_LPWSTR = 16;

export function allocVSC_LPWSTR(data?: Partial<VSC_LPWSTR>): Uint8Array {
  const buf = new Uint8Array(sizeofVSC_LPWSTR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.vsc !== undefined) view.setUint8(0, Number(data.vsc));
  // 0x01: pad7
  // 0x08: buffer
  if (data?.pwsz !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwsz);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class VSC_LPWSTRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get vsc(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: buffer
  get pwsz(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set vsc(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: buffer
  set pwsz(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLES (size: 104)
 */
export interface KBDTABLES {
  /** ptr */
  pCharModifiers: Deno.PointerValue | Uint8Array;
  /** ptr */
  pVkToWcharTable: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDeadKey: Deno.PointerValue | Uint8Array;
  /** ptr */
  pKeyNames: Deno.PointerValue | Uint8Array;
  /** ptr */
  pKeyNamesExt: Deno.PointerValue | Uint8Array;
  /** ptr */
  pKeyNamesDead: Deno.PointerValue | Uint8Array;
  /** ptr */
  pusVSCtoVK: Deno.PointerValue | Uint8Array;
  /** u8 */
  bMaxVSCtoVK: number;
  /** ptr */
  pVSCtoVK_E0: Deno.PointerValue | Uint8Array;
  /** ptr */
  pVSCtoVK_E1: Deno.PointerValue | Uint8Array;
  /** u32 */
  fLocaleFlags: number;
  /** u8 */
  nLgMax: number;
  /** u8 */
  cbLgEntry: number;
  /** ptr */
  pLigature: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
}

export const sizeofKBDTABLES = 104;

export function allocKBDTABLES(data?: Partial<KBDTABLES>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDTABLES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCharModifiers !== undefined) view.setBigUint64(0, data.pCharModifiers === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCharModifiers))), true);
  // 0x08: pointer
  if (data?.pVkToWcharTable !== undefined) view.setBigUint64(8, data.pVkToWcharTable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVkToWcharTable))), true);
  // 0x10: pointer
  if (data?.pDeadKey !== undefined) view.setBigUint64(16, data.pDeadKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDeadKey))), true);
  // 0x18: pointer
  if (data?.pKeyNames !== undefined) view.setBigUint64(24, data.pKeyNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pKeyNames))), true);
  // 0x20: pointer
  if (data?.pKeyNamesExt !== undefined) view.setBigUint64(32, data.pKeyNamesExt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pKeyNamesExt))), true);
  // 0x28: pointer
  if (data?.pKeyNamesDead !== undefined) view.setBigUint64(40, data.pKeyNamesDead === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pKeyNamesDead))), true);
  // 0x30: pointer
  if (data?.pusVSCtoVK !== undefined) view.setBigUint64(48, data.pusVSCtoVK === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pusVSCtoVK))), true);
  // 0x38: u8
  if (data?.bMaxVSCtoVK !== undefined) view.setUint8(56, Number(data.bMaxVSCtoVK));
  // 0x39: pad7
  // 0x40: pointer
  if (data?.pVSCtoVK_E0 !== undefined) view.setBigUint64(64, data.pVSCtoVK_E0 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVSCtoVK_E0))), true);
  // 0x48: pointer
  if (data?.pVSCtoVK_E1 !== undefined) view.setBigUint64(72, data.pVSCtoVK_E1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVSCtoVK_E1))), true);
  // 0x50: u32
  if (data?.fLocaleFlags !== undefined) view.setUint32(80, Number(data.fLocaleFlags), true);
  // 0x54: u8
  if (data?.nLgMax !== undefined) view.setUint8(84, Number(data.nLgMax));
  // 0x55: u8
  if (data?.cbLgEntry !== undefined) view.setUint8(85, Number(data.cbLgEntry));
  // 0x56: pad2
  // 0x58: pointer
  if (data?.pLigature !== undefined) view.setBigUint64(88, data.pLigature === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pLigature))), true);
  // 0x60: u32
  if (data?.dwType !== undefined) view.setUint32(96, Number(data.dwType), true);
  // 0x64: u32
  if (data?.dwSubType !== undefined) view.setUint32(100, Number(data.dwSubType), true);
  return buf;
}

export class KBDTABLESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCharModifiers(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pVkToWcharTable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pDeadKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pKeyNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pKeyNamesExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pKeyNamesDead(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pusVSCtoVK(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u8
  get bMaxVSCtoVK(): number {
    return this.view.getUint8(56);
  }

  // 0x39: pad7

  // 0x40: pointer
  get pVSCtoVK_E0(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get pVSCtoVK_E1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get fLocaleFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u8
  get nLgMax(): number {
    return this.view.getUint8(84);
  }

  // 0x55: u8
  get cbLgEntry(): number {
    return this.view.getUint8(85);
  }

  // 0x56: pad2

  // 0x58: pointer
  get pLigature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwType(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwSubType(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: pointer
  set pCharModifiers(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pVkToWcharTable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pDeadKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pKeyNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pKeyNamesExt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pKeyNamesDead(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pusVSCtoVK(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u8
  set bMaxVSCtoVK(value: number) {
    this.view.setUint8(56, value);
  }

  // 0x39: pad7

  // 0x40: pointer
  set pVSCtoVK_E0(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set pVSCtoVK_E1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set fLocaleFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u8
  set nLgMax(value: number) {
    this.view.setUint8(84, value);
  }

  // 0x55: u8
  set cbLgEntry(value: number) {
    this.view.setUint8(85, value);
  }

  // 0x56: pad2

  // 0x58: pointer
  set pLigature(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set dwType(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwSubType(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_FPARAM (size: 8)
 */
export interface VK_FPARAM {
  /** u8 */
  NLSFEProcIndex: number;
  /** u32 */
  NLSFEProcParam: number;
}

export const sizeofVK_FPARAM = 8;

export function allocVK_FPARAM(data?: Partial<VK_FPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_FPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NLSFEProcIndex !== undefined) view.setUint8(0, Number(data.NLSFEProcIndex));
  // 0x01: u32
  if (data?.NLSFEProcParam !== undefined) view.setUint32(1, Number(data.NLSFEProcParam), true);
  // 0x05: pad3
  return buf;
}

export class VK_FPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get NLSFEProcIndex(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get NLSFEProcParam(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: pad3

  // 0x00: u8
  set NLSFEProcIndex(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set NLSFEProcParam(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.VK_F (size: 24)
 */
export interface VK_F {
  /** u8 */
  Vk: number;
  /** u8 */
  NLSFEProcType: number;
  /** u8 */
  NLSFEProcCurrent: number;
  /** u8 */
  NLSFEProcSwitch: number;
  /** array */
  NLSFEProc: Deno.PointerValue;
  /** array */
  NLSFEProcAlt: Deno.PointerValue;
}

export const sizeofVK_F = 24;

export function allocVK_F(data?: Partial<VK_F>): Uint8Array {
  const buf = new Uint8Array(sizeofVK_F);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Vk !== undefined) view.setUint8(0, Number(data.Vk));
  // 0x01: u8
  if (data?.NLSFEProcType !== undefined) view.setUint8(1, Number(data.NLSFEProcType));
  // 0x02: u8
  if (data?.NLSFEProcCurrent !== undefined) view.setUint8(2, Number(data.NLSFEProcCurrent));
  // 0x03: u8
  if (data?.NLSFEProcSwitch !== undefined) view.setUint8(3, Number(data.NLSFEProcSwitch));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.NLSFEProc !== undefined) view.setBigUint64(8, data.NLSFEProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NLSFEProc))), true);
  // 0x10: pointer
  if (data?.NLSFEProcAlt !== undefined) view.setBigUint64(16, data.NLSFEProcAlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NLSFEProcAlt))), true);
  return buf;
}

export class VK_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Vk(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get NLSFEProcType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get NLSFEProcCurrent(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get NLSFEProcSwitch(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get NLSFEProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get NLSFEProcAlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set Vk(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set NLSFEProcType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set NLSFEProcCurrent(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set NLSFEProcSwitch(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set NLSFEProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set NLSFEProcAlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDNLSTABLES (size: 32)
 */
export interface KBDNLSTABLES {
  /** u16 */
  OEMIdentifier: number;
  /** u16 */
  LayoutInformation: number;
  /** u32 */
  NumOfVkToF: number;
  /** ptr */
  pVkToF: Deno.PointerValue | Uint8Array;
  /** i32 */
  NumOfMouseVKey: number;
  /** ptr */
  pusMouseVKey: Deno.PointerValue | Uint8Array;
}

export const sizeofKBDNLSTABLES = 32;

export function allocKBDNLSTABLES(data?: Partial<KBDNLSTABLES>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDNLSTABLES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.OEMIdentifier !== undefined) view.setUint16(0, Number(data.OEMIdentifier), true);
  // 0x02: u16
  if (data?.LayoutInformation !== undefined) view.setUint16(2, Number(data.LayoutInformation), true);
  // 0x04: u32
  if (data?.NumOfVkToF !== undefined) view.setUint32(4, Number(data.NumOfVkToF), true);
  // 0x08: pointer
  if (data?.pVkToF !== undefined) view.setBigUint64(8, data.pVkToF === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pVkToF))), true);
  // 0x10: i32
  if (data?.NumOfMouseVKey !== undefined) view.setInt32(16, Number(data.NumOfMouseVKey), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pusMouseVKey !== undefined) view.setBigUint64(24, data.pusMouseVKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pusMouseVKey))), true);
  return buf;
}

export class KBDNLSTABLESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get OEMIdentifier(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get LayoutInformation(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get NumOfVkToF(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pVkToF(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get NumOfMouseVKey(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pusMouseVKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set OEMIdentifier(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set LayoutInformation(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set NumOfVkToF(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pVkToF(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set NumOfMouseVKey(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pusMouseVKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_DESC (size: 16)
 */
export interface KBDTABLE_DESC {
  /** array */
  wszDllName: Deno.PointerValue;
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
}

export const sizeofKBDTABLE_DESC = 16;

export function allocKBDTABLE_DESC(data?: Partial<KBDTABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDTABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszDllName !== undefined) view.setBigUint64(0, data.wszDllName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszDllName))), true);
  // 0x08: u32
  if (data?.dwType !== undefined) view.setUint32(8, Number(data.dwType), true);
  // 0x0c: u32
  if (data?.dwSubType !== undefined) view.setUint32(12, Number(data.dwSubType), true);
  return buf;
}

export class KBDTABLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wszDllName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSubType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set wszDllName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSubType(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBDTABLE_MULTI (size: 16)
 */
export interface KBDTABLE_MULTI {
  /** u32 */
  nTables: number;
  /** array */
  aKbdTables: Deno.PointerValue;
}

export const sizeofKBDTABLE_MULTI = 16;

export function allocKBDTABLE_MULTI(data?: Partial<KBDTABLE_MULTI>): Uint8Array {
  const buf = new Uint8Array(sizeofKBDTABLE_MULTI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nTables !== undefined) view.setUint32(0, Number(data.nTables), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aKbdTables !== undefined) view.setBigUint64(8, data.aKbdTables === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aKbdTables))), true);
  return buf;
}

export class KBDTABLE_MULTIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nTables(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aKbdTables(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set nTables(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aKbdTables(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KBD_TYPE_INFO (size: 16)
 */
export interface KBD_TYPE_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwSubType: number;
}

export const sizeofKBD_TYPE_INFO = 16;

export function allocKBD_TYPE_INFO(data?: Partial<KBD_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKBD_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.dwSubType !== undefined) view.setUint32(8, Number(data.dwSubType), true);
  // 0x0c: pad4
  return buf;
}

export class KBD_TYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSubType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSubType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEMOVEPOINT (size: 24)
 */
export interface MOUSEMOVEPOINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
  /** u32 */
  time: number;
  /** usize */
  dwExtraInfo: bigint | number;
}

export const sizeofMOUSEMOVEPOINT = 24;

export function allocMOUSEMOVEPOINT(data?: Partial<MOUSEMOVEPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSEMOVEPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  // 0x08: u32
  if (data?.time !== undefined) view.setUint32(8, Number(data.time), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(16, BigInt(data.dwExtraInfo), true);
  return buf;
}

export class MOUSEMOVEPOINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get time(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get dwExtraInfo(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set time(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set dwExtraInfo(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

export type HWND = bigint | number;

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT (size: 24)
 */
export interface TRACKMOUSEEVENT {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Input.KeyboardAndMouse.TRACKMOUSEEVENT_FLAGS */
  dwFlags: TRACKMOUSEEVENT_FLAGS;
  /** Windows.Win32.Foundation.HWND */
  hwndTrack: Deno.PointerValue;
  /** u32 */
  dwHoverTime: number;
}

export const sizeofTRACKMOUSEEVENT = 24;

export function allocTRACKMOUSEEVENT(data?: Partial<TRACKMOUSEEVENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTRACKMOUSEEVENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hwndTrack !== undefined) view.setBigUint64(8, data.hwndTrack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndTrack))), true);
  // 0x10: u32
  if (data?.dwHoverTime !== undefined) view.setUint32(16, Number(data.dwHoverTime), true);
  // 0x14: pad4
  return buf;
}

export class TRACKMOUSEEVENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndTrack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwHoverTime(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndTrack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwHoverTime(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT (size: 32)
 */
export interface MOUSEINPUT {
  /** i32 */
  dx: number;
  /** i32 */
  dy: number;
  /** i32 */
  mouseData: number;
  /** Windows.Win32.UI.Input.KeyboardAndMouse.MOUSE_EVENT_FLAGS */
  dwFlags: MOUSE_EVENT_FLAGS;
  /** u32 */
  time: number;
  /** usize */
  dwExtraInfo: bigint | number;
}

export const sizeofMOUSEINPUT = 32;

export function allocMOUSEINPUT(data?: Partial<MOUSEINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSEINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dx !== undefined) view.setInt32(0, Number(data.dx), true);
  // 0x04: i32
  if (data?.dy !== undefined) view.setInt32(4, Number(data.dy), true);
  // 0x08: i32
  if (data?.mouseData !== undefined) view.setInt32(8, Number(data.mouseData), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.time !== undefined) view.setUint32(16, Number(data.time), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(24, BigInt(data.dwExtraInfo), true);
  return buf;
}

export class MOUSEINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get dy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get mouseData(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get time(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get dwExtraInfo(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: i32
  set dx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set dy(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set mouseData(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set time(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set dwExtraInfo(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT (size: 24)
 */
export interface KEYBDINPUT {
  /** Windows.Win32.UI.Input.KeyboardAndMouse.VIRTUAL_KEY */
  wVk: VIRTUAL_KEY;
  /** u16 */
  wScan: number;
  /** Windows.Win32.UI.Input.KeyboardAndMouse.KEYBD_EVENT_FLAGS */
  dwFlags: KEYBD_EVENT_FLAGS;
  /** u32 */
  time: number;
  /** usize */
  dwExtraInfo: bigint | number;
}

export const sizeofKEYBDINPUT = 24;

export function allocKEYBDINPUT(data?: Partial<KEYBDINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofKEYBDINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wVk !== undefined) view.setUint16(0, Number(data.wVk), true);
  // 0x02: u16
  if (data?.wScan !== undefined) view.setUint16(2, Number(data.wScan), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.time !== undefined) view.setUint32(8, Number(data.time), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.dwExtraInfo !== undefined) view.setBigUint64(16, BigInt(data.dwExtraInfo), true);
  return buf;
}

export class KEYBDINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wVk(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wScan(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get time(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get dwExtraInfo(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u16
  set wVk(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wScan(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set time(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set dwExtraInfo(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT (size: 8)
 */
export interface HARDWAREINPUT {
  /** u32 */
  uMsg: number;
  /** u16 */
  wParamL: number;
  /** u16 */
  wParamH: number;
}

export const sizeofHARDWAREINPUT = 8;

export function allocHARDWAREINPUT(data?: Partial<HARDWAREINPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofHARDWAREINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uMsg !== undefined) view.setUint32(0, Number(data.uMsg), true);
  // 0x04: u16
  if (data?.wParamL !== undefined) view.setUint16(4, Number(data.wParamL), true);
  // 0x06: u16
  if (data?.wParamH !== undefined) view.setUint16(6, Number(data.wParamH), true);
  return buf;
}

export class HARDWAREINPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get uMsg(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wParamL(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wParamH(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set uMsg(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wParamL(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wParamH(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.INPUT (size: 16)
 */
export interface INPUT {
  /** Windows.Win32.UI.Input.KeyboardAndMouse.INPUT_TYPE */
  type: INPUT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofINPUT = 16;

export function allocINPUT(data?: Partial<INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.type !== undefined) view.setUint32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Input.KeyboardAndMouse.LASTINPUTINFO (size: 8)
 */
export interface LASTINPUTINFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwTime: number;
}

export const sizeofLASTINPUTINFO = 8;

export function allocLASTINPUTINFO(data?: Partial<LASTINPUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLASTINPUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwTime !== undefined) view.setUint32(4, Number(data.dwTime), true);
  return buf;
}

export class LASTINPUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type BOOL = number;

export type PSTR = Deno.PointerValue | Uint8Array;

export type HKL = bigint | number;

export type CHAR = number;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

// Native Libraries

try {
  var libCOMCTL32_dll = Deno.dlopen("COMCTL32.dll", {
    _TrackMouseEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    LoadKeyboardLayoutA: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    LoadKeyboardLayoutW: {
      parameters: ["buffer", "u32"],
      result: "pointer",
    },
    ActivateKeyboardLayout: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ToUnicodeEx: {
      parameters: ["u32", "u32", "pointer", "buffer", "i32", "u32", "pointer"],
      result: "i32",
    },
    UnloadKeyboardLayout: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetKeyboardLayoutNameA: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetKeyboardLayoutNameW: {
      parameters: ["buffer"],
      result: "i32",
    },
    GetKeyboardLayoutList: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    GetKeyboardLayout: {
      parameters: ["u32"],
      result: "pointer",
    },
    GetMouseMovePointsEx: {
      parameters: ["u32", "pointer", "pointer", "i32", "u32"],
      result: "i32",
    },
    TrackMouseEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    RegisterHotKey: {
      parameters: ["pointer", "i32", "u32", "u32"],
      result: "i32",
    },
    UnregisterHotKey: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    SwapMouseButton: {
      parameters: ["i32"],
      result: "i32",
    },
    GetDoubleClickTime: {
      parameters: [],
      result: "u32",
    },
    SetDoubleClickTime: {
      parameters: ["u32"],
      result: "i32",
    },
    SetFocus: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetActiveWindow: {
      parameters: [],
      result: "pointer",
    },
    GetFocus: {
      parameters: [],
      result: "pointer",
    },
    GetKBCodePage: {
      parameters: [],
      result: "u32",
    },
    GetKeyState: {
      parameters: ["i32"],
      result: "i16",
    },
    GetAsyncKeyState: {
      parameters: ["i32"],
      result: "i16",
    },
    GetKeyboardState: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetKeyboardState: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetKeyNameTextA: {
      parameters: ["i32", "buffer", "i32"],
      result: "i32",
    },
    GetKeyNameTextW: {
      parameters: ["i32", "buffer", "i32"],
      result: "i32",
    },
    GetKeyboardType: {
      parameters: ["i32"],
      result: "i32",
    },
    ToAscii: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    ToAsciiEx: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ToUnicode: {
      parameters: ["u32", "u32", "pointer", "buffer", "i32", "u32"],
      result: "i32",
    },
    OemKeyScan: {
      parameters: ["u16"],
      result: "u32",
    },
    VkKeyScanA: {
      parameters: ["u8"],
      result: "i16",
    },
    VkKeyScanW: {
      parameters: ["pointer"],
      result: "i16",
    },
    VkKeyScanExA: {
      parameters: ["u8", "pointer"],
      result: "i16",
    },
    VkKeyScanExW: {
      parameters: ["pointer", "pointer"],
      result: "i16",
    },
    keybd_event: {
      parameters: ["u8", "u8", "u32", "usize"],
      result: "void",
    },
    mouse_event: {
      parameters: ["u32", "i32", "i32", "u32", "usize"],
      result: "void",
    },
    SendInput: {
      parameters: ["u32", "pointer", "i32"],
      result: "u32",
    },
    GetLastInputInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    MapVirtualKeyA: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    MapVirtualKeyW: {
      parameters: ["u32", "u32"],
      result: "u32",
    },
    MapVirtualKeyExA: {
      parameters: ["u32", "u32", "pointer"],
      result: "u32",
    },
    MapVirtualKeyExW: {
      parameters: ["u32", "u32", "pointer"],
      result: "u32",
    },
    GetCapture: {
      parameters: [],
      result: "pointer",
    },
    SetCapture: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ReleaseCapture: {
      parameters: [],
      result: "i32",
    },
    EnableWindow: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    IsWindowEnabled: {
      parameters: ["pointer"],
      result: "i32",
    },
    DragDetect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetActiveWindow: {
      parameters: ["pointer"],
      result: "pointer",
    },
    BlockInput: {
      parameters: ["i32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function _TrackMouseEvent(
  lpEventTrack: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMCTL32_dll._TrackMouseEvent(util.toPointer(lpEventTrack)));
}

export function LoadKeyboardLayoutA(
  pwszKLID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: ACTIVATE_KEYBOARD_LAYOUT_FLAGS /* Windows.Win32.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS */,
): Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */ {
  return libUSER32_dll.LoadKeyboardLayoutA(util.pstrToFfi(pwszKLID), Flags);
}

export function LoadKeyboardLayoutW(
  pwszKLID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: ACTIVATE_KEYBOARD_LAYOUT_FLAGS /* Windows.Win32.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS */,
): Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */ {
  return libUSER32_dll.LoadKeyboardLayoutW(util.pwstrToFfi(pwszKLID), Flags);
}

export function ActivateKeyboardLayout(
  hkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
  Flags: ACTIVATE_KEYBOARD_LAYOUT_FLAGS /* Windows.Win32.UI.Input.KeyboardAndMouse.ACTIVATE_KEYBOARD_LAYOUT_FLAGS */,
): Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */ {
  return libUSER32_dll.ActivateKeyboardLayout(util.toPointer(hkl), Flags);
}

export function ToUnicodeEx(
  wVirtKey: number /* u32 */,
  wScanCode: number /* u32 */,
  lpKeyState: Deno.PointerValue | Uint8Array /* ptr */,
  pwszBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchBuff: number /* i32 */,
  wFlags: number /* u32 */,
  dwhkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): number /* i32 */ {
  return libUSER32_dll.ToUnicodeEx(wVirtKey, wScanCode, util.toPointer(lpKeyState), util.pwstrToFfi(pwszBuff), cchBuff, wFlags, util.toPointer(dwhkl));
}

export function UnloadKeyboardLayout(
  hkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnloadKeyboardLayout(util.toPointer(hkl)));
}

export function GetKeyboardLayoutNameA(
  pwszKLID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetKeyboardLayoutNameA(util.pstrToFfi(pwszKLID)));
}

export function GetKeyboardLayoutNameW(
  pwszKLID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetKeyboardLayoutNameW(util.pwstrToFfi(pwszKLID)));
}

export function GetKeyboardLayoutList(
  nBuff: number /* i32 */,
  lpList: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libUSER32_dll.GetKeyboardLayoutList(nBuff, util.toPointer(lpList));
}

export function GetKeyboardLayout(
  idThread: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */ {
  return libUSER32_dll.GetKeyboardLayout(idThread);
}

export function GetMouseMovePointsEx(
  cbSize: number /* u32 */,
  lppt: Deno.PointerValue | Uint8Array /* ptr */,
  lpptBuf: Deno.PointerValue | Uint8Array /* ptr */,
  nBufPoints: number /* i32 */,
  resolution: GET_MOUSE_MOVE_POINTS_EX_RESOLUTION /* Windows.Win32.UI.Input.KeyboardAndMouse.GET_MOUSE_MOVE_POINTS_EX_RESOLUTION */,
): number /* i32 */ {
  return libUSER32_dll.GetMouseMovePointsEx(cbSize, util.toPointer(lppt), util.toPointer(lpptBuf), nBufPoints, resolution);
}

export function TrackMouseEvent(
  lpEventTrack: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.TrackMouseEvent(util.toPointer(lpEventTrack)));
}

export function RegisterHotKey(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  id: number /* i32 */,
  fsModifiers: HOT_KEY_MODIFIERS /* Windows.Win32.UI.Input.KeyboardAndMouse.HOT_KEY_MODIFIERS */,
  vk: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RegisterHotKey((hWnd), id, fsModifiers, vk));
}

export function UnregisterHotKey(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  id: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnregisterHotKey((hWnd), id));
}

export function SwapMouseButton(
  fSwap: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SwapMouseButton(util.boolToFfi(fSwap)));
}

export function GetDoubleClickTime(): number /* u32 */ {
  return libUSER32_dll.GetDoubleClickTime();
}

export function SetDoubleClickTime(
  param0: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetDoubleClickTime(param0));
}

export function SetFocus(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.SetFocus((hWnd)));
}

export function GetActiveWindow(): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.GetActiveWindow());
}

export function GetFocus(): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.GetFocus());
}

export function GetKBCodePage(): number /* u32 */ {
  return libUSER32_dll.GetKBCodePage();
}

export function GetKeyState(
  nVirtKey: number /* i32 */,
): number /* i16 */ {
  return libUSER32_dll.GetKeyState(nVirtKey);
}

export function GetAsyncKeyState(
  vKey: number /* i32 */,
): number /* i16 */ {
  return libUSER32_dll.GetAsyncKeyState(vKey);
}

export function GetKeyboardState(
  lpKeyState: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetKeyboardState(util.toPointer(lpKeyState)));
}

export function SetKeyboardState(
  lpKeyState: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetKeyboardState(util.toPointer(lpKeyState)));
}

export function GetKeyNameTextA(
  lParam: number /* i32 */,
  lpString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchSize: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.GetKeyNameTextA(lParam, util.pstrToFfi(lpString), cchSize);
}

export function GetKeyNameTextW(
  lParam: number /* i32 */,
  lpString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSize: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.GetKeyNameTextW(lParam, util.pwstrToFfi(lpString), cchSize);
}

export function GetKeyboardType(
  nTypeFlag: number /* i32 */,
): number /* i32 */ {
  return libUSER32_dll.GetKeyboardType(nTypeFlag);
}

export function ToAscii(
  uVirtKey: number /* u32 */,
  uScanCode: number /* u32 */,
  lpKeyState: Deno.PointerValue | Uint8Array /* ptr */,
  lpChar: Deno.PointerValue | Uint8Array /* ptr */,
  uFlags: number /* u32 */,
): number /* i32 */ {
  return libUSER32_dll.ToAscii(uVirtKey, uScanCode, util.toPointer(lpKeyState), util.toPointer(lpChar), uFlags);
}

export function ToAsciiEx(
  uVirtKey: number /* u32 */,
  uScanCode: number /* u32 */,
  lpKeyState: Deno.PointerValue | Uint8Array /* ptr */,
  lpChar: Deno.PointerValue | Uint8Array /* ptr */,
  uFlags: number /* u32 */,
  dwhkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): number /* i32 */ {
  return libUSER32_dll.ToAsciiEx(uVirtKey, uScanCode, util.toPointer(lpKeyState), util.toPointer(lpChar), uFlags, util.toPointer(dwhkl));
}

export function ToUnicode(
  wVirtKey: number /* u32 */,
  wScanCode: number /* u32 */,
  lpKeyState: Deno.PointerValue | Uint8Array /* ptr */,
  pwszBuff: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchBuff: number /* i32 */,
  wFlags: number /* u32 */,
): number /* i32 */ {
  return libUSER32_dll.ToUnicode(wVirtKey, wScanCode, util.toPointer(lpKeyState), util.pwstrToFfi(pwszBuff), cchBuff, wFlags);
}

export function OemKeyScan(
  wOemChar: number /* u16 */,
): number /* u32 */ {
  return libUSER32_dll.OemKeyScan(wOemChar);
}

export function VkKeyScanA(
  ch: string | number /* Windows.Win32.Foundation.CHAR */,
): number /* i16 */ {
  return libUSER32_dll.VkKeyScanA(util.charToFfi(ch));
}

export function VkKeyScanW(
  ch: Uint8Array | Deno.PointerValue /* char */,
): number /* i16 */ {
  return libUSER32_dll.VkKeyScanW(util.toPointer(ch));
}

export function VkKeyScanExA(
  ch: string | number /* Windows.Win32.Foundation.CHAR */,
  dwhkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): number /* i16 */ {
  return libUSER32_dll.VkKeyScanExA(util.charToFfi(ch), util.toPointer(dwhkl));
}

export function VkKeyScanExW(
  ch: Uint8Array | Deno.PointerValue /* char */,
  dwhkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): number /* i16 */ {
  return libUSER32_dll.VkKeyScanExW(util.toPointer(ch), util.toPointer(dwhkl));
}

export function keybd_event(
  bVk: number /* u8 */,
  bScan: number /* u8 */,
  dwFlags: KEYBD_EVENT_FLAGS /* Windows.Win32.UI.Input.KeyboardAndMouse.KEYBD_EVENT_FLAGS */,
  dwExtraInfo: bigint | number /* usize */,
): void /* void */ {
  return libUSER32_dll.keybd_event(bVk, bScan, dwFlags, dwExtraInfo);
}

export function mouse_event(
  dwFlags: MOUSE_EVENT_FLAGS /* Windows.Win32.UI.Input.KeyboardAndMouse.MOUSE_EVENT_FLAGS */,
  dx: number /* i32 */,
  dy: number /* i32 */,
  dwData: number /* u32 */,
  dwExtraInfo: bigint | number /* usize */,
): void /* void */ {
  return libUSER32_dll.mouse_event(dwFlags, dx, dy, dwData, dwExtraInfo);
}

export function SendInput(
  cInputs: number /* u32 */,
  pInputs: Deno.PointerValue | Uint8Array /* ptr */,
  cbSize: number /* i32 */,
): number /* u32 */ {
  return libUSER32_dll.SendInput(cInputs, util.toPointer(pInputs), cbSize);
}

export function GetLastInputInfo(
  plii: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetLastInputInfo(util.toPointer(plii)));
}

export function MapVirtualKeyA(
  uCode: number /* u32 */,
  uMapType: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.MapVirtualKeyA(uCode, uMapType);
}

export function MapVirtualKeyW(
  uCode: number /* u32 */,
  uMapType: number /* u32 */,
): number /* u32 */ {
  return libUSER32_dll.MapVirtualKeyW(uCode, uMapType);
}

export function MapVirtualKeyExA(
  uCode: number /* u32 */,
  uMapType: number /* u32 */,
  dwhkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): number /* u32 */ {
  return libUSER32_dll.MapVirtualKeyExA(uCode, uMapType, util.toPointer(dwhkl));
}

export function MapVirtualKeyExW(
  uCode: number /* u32 */,
  uMapType: number /* u32 */,
  dwhkl: Uint8Array | Deno.PointerValue /* Windows.Win32.UI.TextServices.HKL */,
): number /* u32 */ {
  return libUSER32_dll.MapVirtualKeyExW(uCode, uMapType, util.toPointer(dwhkl));
}

export function GetCapture(): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.GetCapture());
}

export function SetCapture(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.SetCapture((hWnd)));
}

export function ReleaseCapture(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.ReleaseCapture());
}

export function EnableWindow(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  bEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.EnableWindow((hWnd), util.boolToFfi(bEnable)));
}

export function IsWindowEnabled(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsWindowEnabled((hWnd)));
}

export function DragDetect(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pt: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.POINT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.DragDetect((hwnd), util.toPointer(pt)));
}

export function SetActiveWindow(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libUSER32_dll.SetActiveWindow((hWnd)));
}

export function BlockInput(
  fBlockIt: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.BlockInput(util.boolToFfi(fBlockIt)));
}

