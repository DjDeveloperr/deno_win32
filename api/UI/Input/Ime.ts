/// Auto-generated by Deno Win32: Windows.Win32.UI.Input.Ime.Apis

import * as util from "../../../util.ts";

// Enums
export type SET_COMPOSITION_STRING_TYPE = number;
export type GET_GUIDE_LINE_TYPE = number;
export type NOTIFY_IME_INDEX = number;
export type NOTIFY_IME_ACTION = number;
export type GET_CONVERSION_LIST_FLAG = number;
export type IME_PAD_REQUEST_FLAGS = number;
export type IME_CONVERSION_MODE = number;
export type IME_SENTENCE_MODE = number;
export type IME_COMPOSITION_STRING = number;
export type IME_ESCAPE = number;
export type IME_HOTKEY_IDENTIFIER = number;
export type IMEREG = number;
export type IMEFMT = number;
export type IMEUCT = number;
export type IMEREL = number;
export type FONT_CHARSET = number;
export type FONT_OUTPUT_PRECISION = number;
export type FONT_CLIP_PRECISION = number;
export type FONT_QUALITY = number;

// Constants
export const SCS_SETSTR = 9;
export const SCS_CHANGEATTR = 18;
export const SCS_CHANGECLAUSE = 36;
export const SCS_SETRECONVERTSTRING = 65536;
export const SCS_QUERYRECONVERTSTRING = 131072;
export const GGL_LEVEL = 1;
export const GGL_INDEX = 2;
export const GGL_STRING = 3;
export const GGL_PRIVATE = 4;
export const CPS_CANCEL = 4;
export const CPS_COMPLETE = 1;
export const CPS_CONVERT = 2;
export const CPS_REVERT = 3;
export const NI_CHANGECANDIDATELIST = 19;
export const NI_CLOSECANDIDATE = 17;
export const NI_COMPOSITIONSTR = 21;
export const NI_IMEMENUSELECTED = 24;
export const NI_OPENCANDIDATE = 16;
export const NI_SELECTCANDIDATESTR = 18;
export const NI_SETCANDIDATE_PAGESIZE = 23;
export const NI_SETCANDIDATE_PAGESTART = 22;
export const GCL_CONVERSION = 1;
export const GCL_REVERSECONVERSION = 2;
export const GCL_REVERSE_LENGTH = 3;
export const IMEPADREQ_INSERTSTRING = 4097;
export const IMEPADREQ_SENDCONTROL = 4100;
export const IMEPADREQ_SETAPPLETSIZE = 4104;
export const IMEPADREQ_GETCOMPOSITIONSTRING = 4102;
export const IMEPADREQ_GETCOMPOSITIONSTRINGINFO = 4108;
export const IMEPADREQ_DELETESTRING = 4112;
export const IMEPADREQ_CHANGESTRING = 4113;
export const IMEPADREQ_GETAPPLHWND = 4116;
export const IMEPADREQ_FORCEIMEPADWINDOWSHOW = 4117;
export const IMEPADREQ_POSTMODALNOTIFY = 4118;
export const IMEPADREQ_GETDEFAULTUILANGID = 4119;
export const IMEPADREQ_GETAPPLETUISTYLE = 4121;
export const IMEPADREQ_SETAPPLETUISTYLE = 4122;
export const IMEPADREQ_ISAPPLETACTIVE = 4123;
export const IMEPADREQ_ISIMEPADWINDOWVISIBLE = 4124;
export const IMEPADREQ_SETAPPLETMINMAXSIZE = 4125;
export const IMEPADREQ_GETCONVERSIONSTATUS = 4126;
export const IMEPADREQ_GETVERSION = 4127;
export const IMEPADREQ_GETCURRENTIMEINFO = 4128;
export const IME_CMODE_ALPHANUMERIC = 0;
export const IME_CMODE_NATIVE = 1;
export const IME_CMODE_CHINESE = 1;
export const IME_CMODE_HANGUL = 1;
export const IME_CMODE_JAPANESE = 1;
export const IME_CMODE_KATAKANA = 2;
export const IME_CMODE_LANGUAGE = 3;
export const IME_CMODE_FULLSHAPE = 8;
export const IME_CMODE_ROMAN = 16;
export const IME_CMODE_CHARCODE = 32;
export const IME_CMODE_HANJACONVERT = 64;
export const IME_CMODE_NATIVESYMBOL = 128;
export const IME_CMODE_HANGEUL = 1;
export const IME_CMODE_SOFTKBD = 128;
export const IME_CMODE_NOCONVERSION = 256;
export const IME_CMODE_EUDC = 512;
export const IME_CMODE_SYMBOL = 1024;
export const IME_CMODE_FIXED = 2048;
export const IME_CMODE_RESERVED = 4026531840;
export const IME_SMODE_NONE = 0;
export const IME_SMODE_PLAURALCLAUSE = 1;
export const IME_SMODE_SINGLECONVERT = 2;
export const IME_SMODE_AUTOMATIC = 4;
export const IME_SMODE_PHRASEPREDICT = 8;
export const IME_SMODE_CONVERSATION = 16;
export const IME_SMODE_RESERVED = 61440;
export const GCS_COMPREADSTR = 1;
export const GCS_COMPREADATTR = 2;
export const GCS_COMPREADCLAUSE = 4;
export const GCS_COMPSTR = 8;
export const GCS_COMPATTR = 16;
export const GCS_COMPCLAUSE = 32;
export const GCS_CURSORPOS = 128;
export const GCS_DELTASTART = 256;
export const GCS_RESULTREADSTR = 512;
export const GCS_RESULTREADCLAUSE = 1024;
export const GCS_RESULTSTR = 2048;
export const GCS_RESULTCLAUSE = 4096;
export const IME_ESC_QUERY_SUPPORT = 3;
export const IME_ESC_RESERVED_FIRST = 4;
export const IME_ESC_RESERVED_LAST = 2047;
export const IME_ESC_PRIVATE_FIRST = 2048;
export const IME_ESC_PRIVATE_LAST = 4095;
export const IME_ESC_SEQUENCE_TO_INTERNAL = 4097;
export const IME_ESC_GET_EUDC_DICTIONARY = 4099;
export const IME_ESC_SET_EUDC_DICTIONARY = 4100;
export const IME_ESC_MAX_KEY = 4101;
export const IME_ESC_IME_NAME = 4102;
export const IME_ESC_SYNC_HOTKEY = 4103;
export const IME_ESC_HANJA_MODE = 4104;
export const IME_ESC_AUTOMATA = 4105;
export const IME_ESC_PRIVATE_HOTKEY = 4106;
export const IME_ESC_GETHELPFILENAME = 4107;
export const IME_CHOTKEY_IME_NONIME_TOGGLE = 16;
export const IME_CHOTKEY_SHAPE_TOGGLE = 17;
export const IME_CHOTKEY_SYMBOL_TOGGLE = 18;
export const IME_JHOTKEY_CLOSE_OPEN = 48;
export const IME_KHOTKEY_SHAPE_TOGGLE = 80;
export const IME_KHOTKEY_HANJACONVERT = 81;
export const IME_KHOTKEY_ENGLISH = 82;
export const IME_THOTKEY_IME_NONIME_TOGGLE = 112;
export const IME_THOTKEY_SHAPE_TOGGLE = 113;
export const IME_THOTKEY_SYMBOL_TOGGLE = 114;
export const IME_ITHOTKEY_RESEND_RESULTSTR = 512;
export const IME_ITHOTKEY_PREVIOUS_COMPOSITION = 513;
export const IME_ITHOTKEY_UISTYLE_TOGGLE = 514;
export const IME_ITHOTKEY_RECONVERTSTRING = 515;
export const FEID_NONE = 0;
export const FEID_CHINESE_TRADITIONAL = 1;
export const FEID_CHINESE_SIMPLIFIED = 2;
export const FEID_CHINESE_HONGKONG = 3;
export const FEID_CHINESE_SINGAPORE = 4;
export const FEID_JAPANESE = 5;
export const FEID_KOREAN = 6;
export const FEID_KOREAN_JOHAB = 7;
export const INFOMASK_NONE = 0;
export const INFOMASK_QUERY_CAND = 1;
export const INFOMASK_APPLY_CAND = 2;
export const INFOMASK_APPLY_CAND_EX = 4;
export const INFOMASK_STRING_FIX = 65536;
export const INFOMASK_HIDE_CAND = 131072;
export const INFOMASK_BLOCK_CAND = 262144;
export const IMEFAREASTINFO_TYPE_DEFAULT = 0;
export const IMEFAREASTINFO_TYPE_READING = 1;
export const IMEFAREASTINFO_TYPE_COMMENT = 2;
export const IMEFAREASTINFO_TYPE_COSTTIME = 3;
export const CHARINFO_APPLETID_MASK = 4278190080;
export const CHARINFO_FEID_MASK = 15728640;
export const CHARINFO_CHARID_MASK = 65535;
export const MAX_APPLETTITLE = 64;
export const MAX_FONTFACE = 32;
export const IPACFG_NONE = 0;
export const IPACFG_PROPERTY = 1;
export const IPACFG_HELP = 2;
export const IPACFG_TITLE = 65536;
export const IPACFG_TITLEFONTFACE = 131072;
export const IPACFG_CATEGORY = 262144;
export const IPACFG_LANG = 16;
export const IPACID_NONE = 0;
export const IPACID_SOFTKEY = 1;
export const IPACID_HANDWRITING = 2;
export const IPACID_STROKESEARCH = 3;
export const IPACID_RADICALSEARCH = 4;
export const IPACID_SYMBOLSEARCH = 5;
export const IPACID_VOICE = 6;
export const IPACID_EPWING = 7;
export const IPACID_OCR = 8;
export const IPACID_CHARLIST = 9;
export const IPACID_USER = 256;
export const IMEPADREQ_FIRST = 4096;
export const IMEPADREQ_INSERTSTRINGCANDIDATE = 4098;
export const IMEPADREQ_INSERTITEMCANDIDATE = 4099;
export const IMEPADREQ_SENDKEYCONTROL = 4101;
export const IMEPADREQ_GETSELECTEDSTRING = 4103;
export const IMEPADREQ_SETAPPLETDATA = 4105;
export const IMEPADREQ_GETAPPLETDATA = 4106;
export const IMEPADREQ_SETTITLEFONT = 4107;
export const IMEPADREQ_GETCOMPOSITIONSTRINGID = 4109;
export const IMEPADREQ_INSERTSTRINGCANDIDATEINFO = 4110;
export const IMEPADREQ_CHANGESTRINGCANDIDATEINFO = 4111;
export const IMEPADREQ_INSERTSTRINGINFO = 4114;
export const IMEPADREQ_CHANGESTRINGINFO = 4115;
export const IMEPADREQ_GETCURRENTUILANGID = 4120;
export const IMEPADCTRL_CONVERTALL = 1;
export const IMEPADCTRL_DETERMINALL = 2;
export const IMEPADCTRL_DETERMINCHAR = 3;
export const IMEPADCTRL_CLEARALL = 4;
export const IMEPADCTRL_CARETSET = 5;
export const IMEPADCTRL_CARETLEFT = 6;
export const IMEPADCTRL_CARETRIGHT = 7;
export const IMEPADCTRL_CARETTOP = 8;
export const IMEPADCTRL_CARETBOTTOM = 9;
export const IMEPADCTRL_CARETBACKSPACE = 10;
export const IMEPADCTRL_CARETDELETE = 11;
export const IMEPADCTRL_PHRASEDELETE = 12;
export const IMEPADCTRL_INSERTSPACE = 13;
export const IMEPADCTRL_INSERTFULLSPACE = 14;
export const IMEPADCTRL_INSERTHALFSPACE = 15;
export const IMEPADCTRL_ONIME = 16;
export const IMEPADCTRL_OFFIME = 17;
export const IMEPADCTRL_ONPRECONVERSION = 18;
export const IMEPADCTRL_OFFPRECONVERSION = 19;
export const IMEPADCTRL_PHONETICCANDIDATE = 20;
export const IMEKEYCTRLMASK_ALT = 1;
export const IMEKEYCTRLMASK_CTRL = 2;
export const IMEKEYCTRLMASK_SHIFT = 4;
export const IMEKEYCTRL_UP = 1;
export const IMEKEYCTRL_DOWN = 0;
export const IMEPN_FIRST = 256;
export const IMEPN_ACTIVATE = 257;
export const IMEPN_INACTIVATE = 258;
export const IMEPN_SHOW = 260;
export const IMEPN_HIDE = 261;
export const IMEPN_SIZECHANGING = 262;
export const IMEPN_SIZECHANGED = 263;
export const IMEPN_CONFIG = 264;
export const IMEPN_HELP = 265;
export const IMEPN_QUERYCAND = 266;
export const IMEPN_APPLYCAND = 267;
export const IMEPN_APPLYCANDEX = 268;
export const IMEPN_SETTINGCHANGED = 269;
export const IMEPN_USER = 356;
export const IPAWS_ENABLED = 1;
export const IPAWS_SIZINGNOTIFY = 4;
export const IPAWS_VERTICALFIXED = 256;
export const IPAWS_HORIZONTALFIXED = 512;
export const IPAWS_SIZEFIXED = 768;
export const IPAWS_MAXWIDTHFIXED = 4096;
export const IPAWS_MAXHEIGHTFIXED = 8192;
export const IPAWS_MAXSIZEFIXED = 12288;
export const IPAWS_MINWIDTHFIXED = 65536;
export const IPAWS_MINHEIGHTFIXED = 131072;
export const IPAWS_MINSIZEFIXED = 196608;
export const STYLE_DESCRIPTION_SIZE = 32;
export const IMEMENUITEM_STRING_SIZE = 80;
export const IMC_GETCANDIDATEPOS = 7;
export const IMC_SETCANDIDATEPOS = 8;
export const IMC_GETCOMPOSITIONFONT = 9;
export const IMC_SETCOMPOSITIONFONT = 10;
export const IMC_GETCOMPOSITIONWINDOW = 11;
export const IMC_SETCOMPOSITIONWINDOW = 12;
export const IMC_GETSTATUSWINDOWPOS = 15;
export const IMC_SETSTATUSWINDOWPOS = 16;
export const IMC_CLOSESTATUSWINDOW = 33;
export const IMC_OPENSTATUSWINDOW = 34;
export const NI_FINALIZECONVERSIONRESULT = 20;
export const ISC_SHOWUICANDIDATEWINDOW = 1;
export const ISC_SHOWUICOMPOSITIONWINDOW = 2147483648;
export const ISC_SHOWUIGUIDELINE = 1073741824;
export const ISC_SHOWUIALLCANDIDATEWINDOW = 15;
export const ISC_SHOWUIALL = 3221225487;
export const MOD_LEFT = 32768;
export const MOD_RIGHT = 16384;
export const MOD_ON_KEYUP = 2048;
export const MOD_IGNORE_ALL_MODIFIER = 1024;
export const IME_HOTKEY_DSWITCH_FIRST = 256;
export const IME_HOTKEY_DSWITCH_LAST = 287;
export const IME_HOTKEY_PRIVATE_FIRST = 512;
export const IME_HOTKEY_PRIVATE_LAST = 543;
export const CS_INSERTCHAR = 8192;
export const CS_NOMOVECARET = 16384;
export const IMEVER_0310 = 196618;
export const IMEVER_0400 = 262144;
export const IME_PROP_AT_CARET = 65536;
export const IME_PROP_SPECIAL_UI = 131072;
export const IME_PROP_CANDLIST_START_FROM_1 = 262144;
export const IME_PROP_UNICODE = 524288;
export const IME_PROP_COMPLETE_ON_UNSELECT = 1048576;
export const UI_CAP_2700 = 1;
export const UI_CAP_ROT90 = 2;
export const UI_CAP_ROTANY = 4;
export const SCS_CAP_COMPSTR = 1;
export const SCS_CAP_MAKEREAD = 2;
export const SCS_CAP_SETRECONVERTSTRING = 4;
export const SELECT_CAP_CONVERSION = 1;
export const SELECT_CAP_SENTENCE = 2;
export const GL_LEVEL_NOGUIDELINE = 0;
export const GL_LEVEL_FATAL = 1;
export const GL_LEVEL_ERROR = 2;
export const GL_LEVEL_WARNING = 3;
export const GL_LEVEL_INFORMATION = 4;
export const GL_ID_UNKNOWN = 0;
export const GL_ID_NOMODULE = 1;
export const GL_ID_NODICTIONARY = 16;
export const GL_ID_CANNOTSAVE = 17;
export const GL_ID_NOCONVERT = 32;
export const GL_ID_TYPINGERROR = 33;
export const GL_ID_TOOMANYSTROKE = 34;
export const GL_ID_READINGCONFLICT = 35;
export const GL_ID_INPUTREADING = 36;
export const GL_ID_INPUTRADICAL = 37;
export const GL_ID_INPUTCODE = 38;
export const GL_ID_INPUTSYMBOL = 39;
export const GL_ID_CHOOSECANDIDATE = 40;
export const GL_ID_REVERSECONVERSION = 41;
export const GL_ID_PRIVATE_FIRST = 32768;
export const GL_ID_PRIVATE_LAST = 65535;
export const ATTR_INPUT = 0;
export const ATTR_TARGET_CONVERTED = 1;
export const ATTR_CONVERTED = 2;
export const ATTR_TARGET_NOTCONVERTED = 3;
export const ATTR_INPUT_ERROR = 4;
export const ATTR_FIXEDCONVERTED = 5;
export const CFS_DEFAULT = 0;
export const CFS_RECT = 1;
export const CFS_POINT = 2;
export const CFS_FORCE_POSITION = 32;
export const CFS_CANDIDATEPOS = 64;
export const CFS_EXCLUDE = 128;
export const IME_CAND_UNKNOWN = 0;
export const IME_CAND_READ = 1;
export const IME_CAND_CODE = 2;
export const IME_CAND_MEANING = 3;
export const IME_CAND_RADICAL = 4;
export const IME_CAND_STROKE = 5;
export const IMN_CLOSESTATUSWINDOW = 1;
export const IMN_OPENSTATUSWINDOW = 2;
export const IMN_CHANGECANDIDATE = 3;
export const IMN_CLOSECANDIDATE = 4;
export const IMN_OPENCANDIDATE = 5;
export const IMN_SETCONVERSIONMODE = 6;
export const IMN_SETSENTENCEMODE = 7;
export const IMN_SETOPENSTATUS = 8;
export const IMN_SETCANDIDATEPOS = 9;
export const IMN_SETCOMPOSITIONFONT = 10;
export const IMN_SETCOMPOSITIONWINDOW = 11;
export const IMN_SETSTATUSWINDOWPOS = 12;
export const IMN_GUIDELINE = 13;
export const IMN_PRIVATE = 14;
export const IMR_COMPOSITIONWINDOW = 1;
export const IMR_CANDIDATEWINDOW = 2;
export const IMR_COMPOSITIONFONT = 3;
export const IMR_RECONVERTSTRING = 4;
export const IMR_CONFIRMRECONVERTSTRING = 5;
export const IMR_QUERYCHARPOSITION = 6;
export const IMR_DOCUMENTFEED = 7;
export const IMM_ERROR_NODATA = `-1`;
export const IMM_ERROR_GENERAL = `-2`;
export const IME_CONFIG_GENERAL = 1;
export const IME_CONFIG_REGISTERWORD = 2;
export const IME_CONFIG_SELECTDICTIONARY = 3;
export const IME_REGWORD_STYLE_EUDC = 1;
export const IME_REGWORD_STYLE_USER_FIRST = 2147483648;
export const IME_REGWORD_STYLE_USER_LAST = 4294967295;
export const IACE_CHILDREN = 1;
export const IACE_DEFAULT = 16;
export const IACE_IGNORENOCONTEXT = 32;
export const IGIMIF_RIGHTMENU = 1;
export const IGIMII_CMODE = 1;
export const IGIMII_SMODE = 2;
export const IGIMII_CONFIGURE = 4;
export const IGIMII_TOOLS = 8;
export const IGIMII_HELP = 16;
export const IGIMII_OTHER = 32;
export const IGIMII_INPUTTOOLS = 64;
export const IMFT_RADIOCHECK = 1;
export const IMFT_SEPARATOR = 2;
export const IMFT_SUBMENU = 4;
export const SOFTKEYBOARD_TYPE_T1 = 1;
export const SOFTKEYBOARD_TYPE_C1 = 2;
export const IMMGWL_IMC = 0;
export const IMMGWLP_IMC = 0;
export const IMC_SETCONVERSIONMODE = 2;
export const IMC_SETSENTENCEMODE = 4;
export const IMC_SETOPENSTATUS = 6;
export const IMC_GETSOFTKBDFONT = 17;
export const IMC_SETSOFTKBDFONT = 18;
export const IMC_GETSOFTKBDPOS = 19;
export const IMC_SETSOFTKBDPOS = 20;
export const IMC_GETSOFTKBDSUBTYPE = 21;
export const IMC_SETSOFTKBDSUBTYPE = 22;
export const IMC_SETSOFTKBDDATA = 24;
export const NI_CONTEXTUPDATED = 3;
export const IME_SYSINFO_WINLOGON = 1;
export const IME_SYSINFO_WOW16 = 2;
export const INIT_STATUSWNDPOS = 1;
export const INIT_CONVERSION = 2;
export const INIT_SENTENCE = 4;
export const INIT_LOGFONT = 8;
export const INIT_COMPFORM = 16;
export const INIT_SOFTKBDPOS = 32;
export const IME_PROP_END_UNLOAD = 1;
export const IME_PROP_KBD_CHAR_FIRST = 2;
export const IME_PROP_IGNORE_UPKEYS = 4;
export const IME_PROP_NEED_ALTKEY = 8;
export const IME_PROP_NO_KEYS_ON_CLOSE = 16;
export const IME_PROP_ACCEPT_WIDE_VKEY = 32;
export const UI_CAP_SOFTKBD = 65536;
export const IMN_SOFTKBDDESTROYED = 17;
export const IME_UI_CLASS_NAME_SIZE = 16;
export const IME_ESC_STRING_BUFFER_SIZE = 80;
export const szImeJapan = `MSIME.Japan`;
export const szImeKorea = `MSIME.Korea`;
export const szImeChina = `MSIME.China`;
export const szImeTaiwan = `MSIME.Taiwan`;
export const IFEC_S_ALREADY_DEFAULT = 320318540676887552n;
export const FELANG_REQ_CONV = 65536;
export const FELANG_REQ_RECONV = 131072;
export const FELANG_REQ_REV = 196608;
export const FELANG_CMODE_MONORUBY = 2;
export const FELANG_CMODE_NOPRUNING = 4;
export const FELANG_CMODE_KATAKANAOUT = 8;
export const FELANG_CMODE_HIRAGANAOUT = 0;
export const FELANG_CMODE_HALFWIDTHOUT = 16;
export const FELANG_CMODE_FULLWIDTHOUT = 32;
export const FELANG_CMODE_BOPOMOFO = 64;
export const FELANG_CMODE_HANGUL = 128;
export const FELANG_CMODE_PINYIN = 256;
export const FELANG_CMODE_PRECONV = 512;
export const FELANG_CMODE_RADICAL = 1024;
export const FELANG_CMODE_UNKNOWNREADING = 2048;
export const FELANG_CMODE_MERGECAND = 4096;
export const FELANG_CMODE_ROMAN = 8192;
export const FELANG_CMODE_BESTFIRST = 16384;
export const FELANG_CMODE_USENOREVWORDS = 32768;
export const FELANG_CMODE_NONE = 16777216;
export const FELANG_CMODE_PLAURALCLAUSE = 33554432;
export const FELANG_CMODE_SINGLECONVERT = 67108864;
export const FELANG_CMODE_AUTOMATIC = 134217728;
export const FELANG_CMODE_PHRASEPREDICT = 268435456;
export const FELANG_CMODE_CONVERSATION = 536870912;
export const FELANG_CMODE_NAME = 268435456;
export const FELANG_CMODE_NOINVISIBLECHAR = 1073741824;
export const E_NOCAND = 48;
export const E_NOTENOUGH_BUFFER = 49;
export const E_NOTENOUGH_WDD = 50;
export const E_LARGEINPUT = 51;
export const FELANG_CLMN_WBREAK = 1;
export const FELANG_CLMN_NOWBREAK = 2;
export const FELANG_CLMN_PBREAK = 4;
export const FELANG_CLMN_NOPBREAK = 8;
export const FELANG_CLMN_FIXR = 16;
export const FELANG_CLMN_FIXD = 32;
export const FELANG_INVALD_PO = 65535;
export const IFED_POS_NONE = 0;
export const IFED_POS_NOUN = 1;
export const IFED_POS_VERB = 2;
export const IFED_POS_ADJECTIVE = 4;
export const IFED_POS_ADJECTIVE_VERB = 8;
export const IFED_POS_ADVERB = 16;
export const IFED_POS_ADNOUN = 32;
export const IFED_POS_CONJUNCTION = 64;
export const IFED_POS_INTERJECTION = 128;
export const IFED_POS_INDEPENDENT = 255;
export const IFED_POS_INFLECTIONALSUFFIX = 256;
export const IFED_POS_PREFIX = 512;
export const IFED_POS_SUFFIX = 1024;
export const IFED_POS_AFFIX = 1536;
export const IFED_POS_TANKANJI = 2048;
export const IFED_POS_IDIOMS = 4096;
export const IFED_POS_SYMBOLS = 8192;
export const IFED_POS_PARTICLE = 16384;
export const IFED_POS_AUXILIARY_VERB = 32768;
export const IFED_POS_SUB_VERB = 65536;
export const IFED_POS_DEPENDENT = 114688;
export const IFED_POS_ALL = 131071;
export const IFED_SELECT_NONE = 0;
export const IFED_SELECT_READING = 1;
export const IFED_SELECT_DISPLAY = 2;
export const IFED_SELECT_POS = 4;
export const IFED_SELECT_COMMENT = 8;
export const IFED_SELECT_ALL = 15;
export const IFED_REG_NONE = 0;
export const IFED_REG_USER = 1;
export const IFED_REG_AUTO = 2;
export const IFED_REG_GRAMMAR = 4;
export const IFED_REG_ALL = 7;
export const IFED_TYPE_NONE = 0;
export const IFED_TYPE_GENERAL = 1;
export const IFED_TYPE_NAMEPLACE = 2;
export const IFED_TYPE_SPEECH = 4;
export const IFED_TYPE_REVERSE = 8;
export const IFED_TYPE_ENGLISH = 16;
export const IFED_TYPE_ALL = 31;
export const IFED_S_MORE_ENTRIES = 320319640188514816n;
export const IFED_S_EMPTY_DICTIONARY = 320320739700142593n;
export const IFED_S_WORD_EXISTS = 320321839211770370n;
export const IFED_S_COMMENT_CHANGED = 320601115165225475n;
export const IFED_E_NOT_FOUND = 320601117312709376n;
export const IFED_E_INVALID_FORMAT = 320603316335964929n;
export const IFED_E_OPEN_FAILED = 320603316335964930n;
export const IFED_E_WRITE_FAILED = 320604415847592707n;
export const IFED_E_NO_ENTRY = 320605515359220484n;
export const IFED_E_REGISTER_FAILED = 320606614870848261n;
export const IFED_E_NOT_USER_DIC = 320607714382476038n;
export const IFED_E_NOT_SUPPORTED = 320608813894103815n;
export const IFED_E_USER_COMMENT = 320609913405731592n;
export const IFED_E_REGISTER_ILLEGAL_POS = 320611012917359369n;
export const IFED_E_REGISTER_IMPROPER_WORD = 320612112428987146n;
export const IFED_E_REGISTER_DISCONNECTED = 5980865072770347787n;
export const cbCommentMax = 256;
export const wchPrivate1 = 57344;
export const POS_UNDEFINED = 0;
export const JPOS_UNDEFINED = 0;
export const JPOS_MEISHI_FUTSU = 100;
export const JPOS_MEISHI_SAHEN = 101;
export const JPOS_MEISHI_ZAHEN = 102;
export const JPOS_MEISHI_KEIYOUDOUSHI = 103;
export const JPOS_HUKUSIMEISHI = 104;
export const JPOS_MEISA_KEIDOU = 105;
export const JPOS_JINMEI = 106;
export const JPOS_JINMEI_SEI = 107;
export const JPOS_JINMEI_MEI = 108;
export const JPOS_CHIMEI = 109;
export const JPOS_CHIMEI_KUNI = 110;
export const JPOS_CHIMEI_KEN = 111;
export const JPOS_CHIMEI_GUN = 112;
export const JPOS_CHIMEI_KU = 113;
export const JPOS_CHIMEI_SHI = 114;
export const JPOS_CHIMEI_MACHI = 115;
export const JPOS_CHIMEI_MURA = 116;
export const JPOS_CHIMEI_EKI = 117;
export const JPOS_SONOTA = 118;
export const JPOS_SHAMEI = 119;
export const JPOS_SOSHIKI = 120;
export const JPOS_KENCHIKU = 121;
export const JPOS_BUPPIN = 122;
export const JPOS_DAIMEISHI = 123;
export const JPOS_DAIMEISHI_NINSHOU = 124;
export const JPOS_DAIMEISHI_SHIJI = 125;
export const JPOS_KAZU = 126;
export const JPOS_KAZU_SURYOU = 127;
export const JPOS_KAZU_SUSHI = 128;
export const JPOS_5DAN_AWA = 200;
export const JPOS_5DAN_KA = 201;
export const JPOS_5DAN_GA = 202;
export const JPOS_5DAN_SA = 203;
export const JPOS_5DAN_TA = 204;
export const JPOS_5DAN_NA = 205;
export const JPOS_5DAN_BA = 206;
export const JPOS_5DAN_MA = 207;
export const JPOS_5DAN_RA = 208;
export const JPOS_5DAN_AWAUON = 209;
export const JPOS_5DAN_KASOKUON = 210;
export const JPOS_5DAN_RAHEN = 211;
export const JPOS_4DAN_HA = 212;
export const JPOS_1DAN = 213;
export const JPOS_TOKUSHU_KAHEN = 214;
export const JPOS_TOKUSHU_SAHENSURU = 215;
export const JPOS_TOKUSHU_SAHEN = 216;
export const JPOS_TOKUSHU_ZAHEN = 217;
export const JPOS_TOKUSHU_NAHEN = 218;
export const JPOS_KURU_KI = 219;
export const JPOS_KURU_KITA = 220;
export const JPOS_KURU_KITARA = 221;
export const JPOS_KURU_KITARI = 222;
export const JPOS_KURU_KITAROU = 223;
export const JPOS_KURU_KITE = 224;
export const JPOS_KURU_KUREBA = 225;
export const JPOS_KURU_KO = 226;
export const JPOS_KURU_KOI = 227;
export const JPOS_KURU_KOYOU = 228;
export const JPOS_SURU_SA = 229;
export const JPOS_SURU_SI = 230;
export const JPOS_SURU_SITA = 231;
export const JPOS_SURU_SITARA = 232;
export const JPOS_SURU_SIATRI = 233;
export const JPOS_SURU_SITAROU = 234;
export const JPOS_SURU_SITE = 235;
export const JPOS_SURU_SIYOU = 236;
export const JPOS_SURU_SUREBA = 237;
export const JPOS_SURU_SE = 238;
export const JPOS_SURU_SEYO = 239;
export const JPOS_KEIYOU = 300;
export const JPOS_KEIYOU_GARU = 301;
export const JPOS_KEIYOU_GE = 302;
export const JPOS_KEIYOU_ME = 303;
export const JPOS_KEIYOU_YUU = 304;
export const JPOS_KEIYOU_U = 305;
export const JPOS_KEIDOU = 400;
export const JPOS_KEIDOU_NO = 401;
export const JPOS_KEIDOU_TARU = 402;
export const JPOS_KEIDOU_GARU = 403;
export const JPOS_FUKUSHI = 500;
export const JPOS_FUKUSHI_SAHEN = 501;
export const JPOS_FUKUSHI_NI = 502;
export const JPOS_FUKUSHI_NANO = 503;
export const JPOS_FUKUSHI_DA = 504;
export const JPOS_FUKUSHI_TO = 505;
export const JPOS_FUKUSHI_TOSURU = 506;
export const JPOS_RENTAISHI = 600;
export const JPOS_RENTAISHI_SHIJI = 601;
export const JPOS_SETSUZOKUSHI = 650;
export const JPOS_KANDOUSHI = 670;
export const JPOS_SETTOU = 700;
export const JPOS_SETTOU_KAKU = 701;
export const JPOS_SETTOU_SAI = 702;
export const JPOS_SETTOU_FUKU = 703;
export const JPOS_SETTOU_MI = 704;
export const JPOS_SETTOU_DAISHOU = 705;
export const JPOS_SETTOU_KOUTEI = 706;
export const JPOS_SETTOU_CHOUTAN = 707;
export const JPOS_SETTOU_SHINKYU = 708;
export const JPOS_SETTOU_JINMEI = 709;
export const JPOS_SETTOU_CHIMEI = 710;
export const JPOS_SETTOU_SONOTA = 711;
export const JPOS_SETTOU_JOSUSHI = 712;
export const JPOS_SETTOU_TEINEI_O = 713;
export const JPOS_SETTOU_TEINEI_GO = 714;
export const JPOS_SETTOU_TEINEI_ON = 715;
export const JPOS_SETSUBI = 800;
export const JPOS_SETSUBI_TEKI = 801;
export const JPOS_SETSUBI_SEI = 802;
export const JPOS_SETSUBI_KA = 803;
export const JPOS_SETSUBI_CHU = 804;
export const JPOS_SETSUBI_FU = 805;
export const JPOS_SETSUBI_RYU = 806;
export const JPOS_SETSUBI_YOU = 807;
export const JPOS_SETSUBI_KATA = 808;
export const JPOS_SETSUBI_MEISHIRENDAKU = 809;
export const JPOS_SETSUBI_JINMEI = 810;
export const JPOS_SETSUBI_CHIMEI = 811;
export const JPOS_SETSUBI_KUNI = 812;
export const JPOS_SETSUBI_KEN = 813;
export const JPOS_SETSUBI_GUN = 814;
export const JPOS_SETSUBI_KU = 815;
export const JPOS_SETSUBI_SHI = 816;
export const JPOS_SETSUBI_MACHI = 817;
export const JPOS_SETSUBI_CHOU = 818;
export const JPOS_SETSUBI_MURA = 819;
export const JPOS_SETSUBI_SON = 820;
export const JPOS_SETSUBI_EKI = 821;
export const JPOS_SETSUBI_SONOTA = 822;
export const JPOS_SETSUBI_SHAMEI = 823;
export const JPOS_SETSUBI_SOSHIKI = 824;
export const JPOS_SETSUBI_KENCHIKU = 825;
export const JPOS_RENYOU_SETSUBI = 826;
export const JPOS_SETSUBI_JOSUSHI = 827;
export const JPOS_SETSUBI_JOSUSHIPLUS = 828;
export const JPOS_SETSUBI_JIKAN = 829;
export const JPOS_SETSUBI_JIKANPLUS = 830;
export const JPOS_SETSUBI_TEINEI = 831;
export const JPOS_SETSUBI_SAN = 832;
export const JPOS_SETSUBI_KUN = 833;
export const JPOS_SETSUBI_SAMA = 834;
export const JPOS_SETSUBI_DONO = 835;
export const JPOS_SETSUBI_FUKUSU = 836;
export const JPOS_SETSUBI_TACHI = 837;
export const JPOS_SETSUBI_RA = 838;
export const JPOS_TANKANJI = 900;
export const JPOS_TANKANJI_KAO = 901;
export const JPOS_KANYOUKU = 902;
export const JPOS_DOKURITSUGO = 903;
export const JPOS_FUTEIGO = 904;
export const JPOS_KIGOU = 905;
export const JPOS_EIJI = 906;
export const JPOS_KUTEN = 907;
export const JPOS_TOUTEN = 908;
export const JPOS_KANJI = 909;
export const JPOS_OPENBRACE = 910;
export const JPOS_CLOSEBRACE = 911;
export const JPOS_YOKUSEI = 912;
export const JPOS_TANSHUKU = 913;
export const VERSION_ID_JAPANESE = 16777216;
export const VERSION_ID_KOREAN = 33554432;
export const VERSION_ID_CHINESE_TRADITIONAL = 67108864;
export const VERSION_ID_CHINESE_SIMPLIFIED = 134217728;
export const RWM_SERVICE = `MSIMEService`;
export const FID_MSIME_VERSION = 0;
export const RWM_UIREADY = `MSIMEUIReady`;
export const RWM_MOUSE = `MSIMEMouseOperation`;
export const VERSION_MOUSE_OPERATION = 1;
export const IMEMOUSERET_NOTHANDLED = `-1`;
export const IMEMOUSE_VERSION = 255;
export const IMEMOUSE_NONE = 0;
export const IMEMOUSE_LDOWN = 1;
export const IMEMOUSE_RDOWN = 2;
export const IMEMOUSE_MDOWN = 4;
export const IMEMOUSE_WUP = 16;
export const IMEMOUSE_WDOWN = 32;
export const RWM_RECONVERT = `MSIMEReconvert`;
export const FID_RECONVERT_VERSION = 268435456;
export const VERSION_RECONVERSION = 1;
export const RWM_RECONVERTREQUEST = `MSIMEReconvertRequest`;
export const VERSION_DOCUMENTFEED = 1;
export const RWM_DOCUMENTFEED = `MSIMEDocumentFeed`;
export const VERSION_QUERYPOSITION = 1;
export const RWM_QUERYPOSITION = `MSIMEQueryPosition`;
export const RWM_MODEBIAS = `MSIMEModeBias`;
export const VERSION_MODEBIAS = 1;
export const MODEBIAS_GETVERSION = 0;
export const MODEBIAS_SETVALUE = 1;
export const MODEBIAS_GETVALUE = 2;
export const MODEBIASMODE_DEFAULT = 0;
export const MODEBIASMODE_FILENAME = 1;
export const MODEBIASMODE_READING = 2;
export const MODEBIASMODE_DIGIT = 4;
export const RWM_SHOWIMEPAD = `MSIMEShowImePad`;
export const SHOWIMEPAD_DEFAULT = 0;
export const SHOWIMEPAD_CATEGORY = 1;
export const SHOWIMEPAD_GUID = 2;
export const RWM_KEYMAP = `MSIMEKeyMap`;
export const RWM_CHGKEYMAP = `MSIMEChangeKeyMap`;
export const RWM_NTFYKEYMAP = `MSIMENotifyKeyMap`;
export const FID_MSIME_KMS_VERSION = 1;
export const FID_MSIME_KMS_INIT = 2;
export const FID_MSIME_KMS_TERM = 3;
export const FID_MSIME_KMS_DEL_KEYLIST = 4;
export const FID_MSIME_KMS_NOTIFY = 5;
export const FID_MSIME_KMS_GETMAP = 6;
export const FID_MSIME_KMS_INVOKE = 7;
export const FID_MSIME_KMS_SETMAP = 8;
export const FID_MSIME_KMS_FUNCDESC = 9;
export const FID_MSIME_KMS_GETMAPSEAMLESS = 10;
export const FID_MSIME_KMS_GETMAPFAST = 11;
export const IMEKMS_NOCOMPOSITION = 0;
export const IMEKMS_COMPOSITION = 1;
export const IMEKMS_SELECTION = 2;
export const IMEKMS_IMEOFF = 3;
export const IMEKMS_2NDLEVEL = 4;
export const IMEKMS_INPTGL = 5;
export const IMEKMS_CANDIDATE = 6;
export const IMEKMS_TYPECAND = 7;
export const RWM_RECONVERTOPTIONS = `MSIMEReconvertOptions`;
export const RECONVOPT_NONE = 0;
export const RECONVOPT_USECANCELNOTIFY = 1;
export const GCSEX_CANCELRECONVERT = 268435456;
export const IFED_REG_HEAD = 0;
export const IFED_REG_TAIL = 1;
export const IFED_REG_DEL = 2;
export const IFED_UNKNOWN = 0;
export const IFED_MSIME2_BIN_SYSTEM = 1;
export const IFED_MSIME2_BIN_USER = 2;
export const IFED_MSIME2_TEXT_USER = 3;
export const IFED_MSIME95_BIN_SYSTEM = 4;
export const IFED_MSIME95_BIN_USER = 5;
export const IFED_MSIME95_TEXT_USER = 6;
export const IFED_MSIME97_BIN_SYSTEM = 7;
export const IFED_MSIME97_BIN_USER = 8;
export const IFED_MSIME97_TEXT_USER = 9;
export const IFED_MSIME98_BIN_SYSTEM = 10;
export const IFED_MSIME98_BIN_USER = 11;
export const IFED_MSIME98_TEXT_USER = 12;
export const IFED_ACTIVE_DICT = 13;
export const IFED_ATOK9 = 14;
export const IFED_ATOK10 = 15;
export const IFED_NEC_AI_ = 16;
export const IFED_WX_II = 17;
export const IFED_WX_III = 18;
export const IFED_VJE_20 = 19;
export const IFED_MSIME98_SYSTEM_CE = 20;
export const IFED_MSIME_BIN_SYSTEM = 21;
export const IFED_MSIME_BIN_USER = 22;
export const IFED_MSIME_TEXT_USER = 23;
export const IFED_PIME2_BIN_USER = 24;
export const IFED_PIME2_BIN_SYSTEM = 25;
export const IFED_PIME2_BIN_STANDARD_SYSTEM = 26;
export const IFED_UCT_NONE = 0;
export const IFED_UCT_STRING_SJIS = 1;
export const IFED_UCT_STRING_UNICODE = 2;
export const IFED_UCT_USER_DEFINED = 3;
export const IFED_UCT_MAX = 4;
export const IFED_REL_NONE = 0;
export const IFED_REL_NO = 1;
export const IFED_REL_GA = 2;
export const IFED_REL_WO = 3;
export const IFED_REL_NI = 4;
export const IFED_REL_DE = 5;
export const IFED_REL_YORI = 6;
export const IFED_REL_KARA = 7;
export const IFED_REL_MADE = 8;
export const IFED_REL_HE = 9;
export const IFED_REL_TO = 10;
export const IFED_REL_IDEOM = 11;
export const IFED_REL_FUKU_YOUGEN = 12;
export const IFED_REL_KEIYOU_YOUGEN = 13;
export const IFED_REL_KEIDOU1_YOUGEN = 14;
export const IFED_REL_KEIDOU2_YOUGEN = 15;
export const IFED_REL_TAIGEN = 16;
export const IFED_REL_YOUGEN = 17;
export const IFED_REL_RENTAI_MEI = 18;
export const IFED_REL_RENSOU = 19;
export const IFED_REL_KEIYOU_TO_YOUGEN = 20;
export const IFED_REL_KEIYOU_TARU_YOUGEN = 21;
export const IFED_REL_UNKNOWN1 = 22;
export const IFED_REL_UNKNOWN2 = 23;
export const IFED_REL_ALL = 24;
export const ANSI_CHARSET = 0;
export const DEFAULT_CHARSET = 1;
export const SYMBOL_CHARSET = 2;
export const SHIFTJIS_CHARSET = 128;
export const HANGEUL_CHARSET = 129;
export const HANGUL_CHARSET = 129;
export const GB2312_CHARSET = 134;
export const CHINESEBIG5_CHARSET = 136;
export const OEM_CHARSET = 255;
export const JOHAB_CHARSET = 130;
export const HEBREW_CHARSET = 177;
export const ARABIC_CHARSET = 178;
export const GREEK_CHARSET = 161;
export const TURKISH_CHARSET = 162;
export const VIETNAMESE_CHARSET = 163;
export const THAI_CHARSET = 222;
export const EASTEUROPE_CHARSET = 238;
export const RUSSIAN_CHARSET = 204;
export const MAC_CHARSET = 77;
export const BALTIC_CHARSET = 186;
export const OUT_DEFAULT_PRECIS = 0;
export const OUT_STRING_PRECIS = 1;
export const OUT_CHARACTER_PRECIS = 2;
export const OUT_STROKE_PRECIS = 3;
export const OUT_TT_PRECIS = 4;
export const OUT_DEVICE_PRECIS = 5;
export const OUT_RASTER_PRECIS = 6;
export const OUT_TT_ONLY_PRECIS = 7;
export const OUT_OUTLINE_PRECIS = 8;
export const OUT_SCREEN_OUTLINE_PRECIS = 9;
export const OUT_PS_ONLY_PRECIS = 10;
export const CLIP_DEFAULT_PRECIS = 0;
export const CLIP_CHARACTER_PRECIS = 1;
export const CLIP_STROKE_PRECIS = 2;
export const CLIP_MASK = 15;
export const CLIP_LH_ANGLES = 16;
export const CLIP_TT_ALWAYS = 32;
export const CLIP_DFA_DISABLE = 64;
export const CLIP_EMBEDDED = 128;
export const CLIP_DFA_OVERRIDE = 64;
export const DEFAULT_QUALITY = 0;
export const DRAFT_QUALITY = 1;
export const PROOF_QUALITY = 2;
export const NONANTIALIASED_QUALITY = 3;
export const ANTIALIASED_QUALITY = 4;
export const CLEARTYPE_QUALITY = 5;

// Structs

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.COMPOSITIONFORM (size: 24)
 */
export interface COMPOSITIONFORM {
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.POINT */
  ptCurrentPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcArea: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCOMPOSITIONFORM = 24;

export function allocCOMPOSITIONFORM(data?: Partial<COMPOSITIONFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITIONFORM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStyle !== undefined) view.setUint32(0, Number(data.dwStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ptCurrentPos !== undefined) view.setBigUint64(8, data.ptCurrentPos === null ? 0n : BigInt(util.toPointer(data.ptCurrentPos)), true);
  // 0x10: pointer
  if (data?.rcArea !== undefined) view.setBigUint64(16, data.rcArea === null ? 0n : BigInt(util.toPointer(data.rcArea)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.CANDIDATEFORM (size: 24)
 */
export interface CANDIDATEFORM {
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwStyle: number;
  /** Windows.Win32.Foundation.POINT */
  ptCurrentPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcArea: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCANDIDATEFORM = 24;

export function allocCANDIDATEFORM(data?: Partial<CANDIDATEFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCANDIDATEFORM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIndex !== undefined) view.setUint32(0, Number(data.dwIndex), true);
  // 0x04: u32
  if (data?.dwStyle !== undefined) view.setUint32(4, Number(data.dwStyle), true);
  // 0x08: pointer
  if (data?.ptCurrentPos !== undefined) view.setBigUint64(8, data.ptCurrentPos === null ? 0n : BigInt(util.toPointer(data.ptCurrentPos)), true);
  // 0x10: pointer
  if (data?.rcArea !== undefined) view.setBigUint64(16, data.rcArea === null ? 0n : BigInt(util.toPointer(data.rcArea)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.CANDIDATELIST (size: 32)
 */
export interface CANDIDATELIST {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwStyle: number;
  /** u32 */
  dwCount: number;
  /** u32 */
  dwSelection: number;
  /** u32 */
  dwPageStart: number;
  /** u32 */
  dwPageSize: number;
  /** array */
  dwOffset: Deno.PointerValue | null;
}

export const sizeofCANDIDATELIST = 32;

export function allocCANDIDATELIST(data?: Partial<CANDIDATELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCANDIDATELIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwStyle !== undefined) view.setUint32(4, Number(data.dwStyle), true);
  // 0x08: u32
  if (data?.dwCount !== undefined) view.setUint32(8, Number(data.dwCount), true);
  // 0x0c: u32
  if (data?.dwSelection !== undefined) view.setUint32(12, Number(data.dwSelection), true);
  // 0x10: u32
  if (data?.dwPageStart !== undefined) view.setUint32(16, Number(data.dwPageStart), true);
  // 0x14: u32
  if (data?.dwPageSize !== undefined) view.setUint32(20, Number(data.dwPageSize), true);
  // 0x18: pointer
  if (data?.dwOffset !== undefined) view.setBigUint64(24, data.dwOffset === null ? 0n : BigInt(util.toPointer(data.dwOffset)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Input.Ime.REGISTERWORDA (size: 16)
 */
export interface REGISTERWORDA {
  /** Windows.Win32.Foundation.PSTR */
  lpReading: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpWord: string | null | Uint8Array;
}

export const sizeofREGISTERWORDA = 16;

export function allocREGISTERWORDA(data?: Partial<REGISTERWORDA>): Uint8Array {
  const buf = new Uint8Array(sizeofREGISTERWORDA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpReading !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpReading);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpWord !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpWord);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Input.Ime.REGISTERWORDW (size: 16)
 */
export interface REGISTERWORDW {
  /** Windows.Win32.Foundation.PWSTR */
  lpReading: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpWord: string | null | Uint8Array | Uint16Array;
}

export const sizeofREGISTERWORDW = 16;

export function allocREGISTERWORDW(data?: Partial<REGISTERWORDW>): Uint8Array {
  const buf = new Uint8Array(sizeofREGISTERWORDW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpReading !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpReading);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpWord !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpWord);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.RECONVERTSTRING (size: 32)
 */
export interface RECONVERTSTRING {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwStrLen: number;
  /** u32 */
  dwStrOffset: number;
  /** u32 */
  dwCompStrLen: number;
  /** u32 */
  dwCompStrOffset: number;
  /** u32 */
  dwTargetStrLen: number;
  /** u32 */
  dwTargetStrOffset: number;
}

export const sizeofRECONVERTSTRING = 32;

export function allocRECONVERTSTRING(data?: Partial<RECONVERTSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofRECONVERTSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwStrLen !== undefined) view.setUint32(8, Number(data.dwStrLen), true);
  // 0x0c: u32
  if (data?.dwStrOffset !== undefined) view.setUint32(12, Number(data.dwStrOffset), true);
  // 0x10: u32
  if (data?.dwCompStrLen !== undefined) view.setUint32(16, Number(data.dwCompStrLen), true);
  // 0x14: u32
  if (data?.dwCompStrOffset !== undefined) view.setUint32(20, Number(data.dwCompStrOffset), true);
  // 0x18: u32
  if (data?.dwTargetStrLen !== undefined) view.setUint32(24, Number(data.dwTargetStrLen), true);
  // 0x1c: u32
  if (data?.dwTargetStrOffset !== undefined) view.setUint32(28, Number(data.dwTargetStrOffset), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.STYLEBUFA (size: 16)
 */
export interface STYLEBUFA {
  /** u32 */
  dwStyle: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofSTYLEBUFA = 16;

export function allocSTYLEBUFA(data?: Partial<STYLEBUFA>): Uint8Array {
  const buf = new Uint8Array(sizeofSTYLEBUFA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStyle !== undefined) view.setUint32(0, Number(data.dwStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.STYLEBUFW (size: 16)
 */
export interface STYLEBUFW {
  /** u32 */
  dwStyle: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofSTYLEBUFW = 16;

export function allocSTYLEBUFW(data?: Partial<STYLEBUFW>): Uint8Array {
  const buf = new Uint8Array(sizeofSTYLEBUFW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStyle !== undefined) view.setUint32(0, Number(data.dwStyle), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

export type HBITMAP = Deno.PointerValue;

/**
 * Windows.Win32.UI.Input.Ime.IMEMENUITEMINFOA (size: 56)
 */
export interface IMEMENUITEMINFOA {
  /** u32 */
  cbSize: number;
  /** u32 */
  fType: number;
  /** u32 */
  fState: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpChecked: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpUnchecked: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwItemData: number;
  /** array */
  szString: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEMENUITEMINFOA = 56;

export function allocIMEMENUITEMINFOA(data?: Partial<IMEMENUITEMINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEMENUITEMINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fType !== undefined) view.setUint32(4, Number(data.fType), true);
  // 0x08: u32
  if (data?.fState !== undefined) view.setUint32(8, Number(data.fState), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.hbmpChecked !== undefined) view.setBigUint64(16, data.hbmpChecked === null ? 0n : BigInt(util.toPointer(data.hbmpChecked)), true);
  // 0x18: pointer
  if (data?.hbmpUnchecked !== undefined) view.setBigUint64(24, data.hbmpUnchecked === null ? 0n : BigInt(util.toPointer(data.hbmpUnchecked)), true);
  // 0x20: u32
  if (data?.dwItemData !== undefined) view.setUint32(32, Number(data.dwItemData), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szString !== undefined) view.setBigUint64(40, data.szString === null ? 0n : BigInt(util.toPointer(data.szString)), true);
  // 0x30: pointer
  if (data?.hbmpItem !== undefined) view.setBigUint64(48, data.hbmpItem === null ? 0n : BigInt(util.toPointer(data.hbmpItem)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEMENUITEMINFOW (size: 56)
 */
export interface IMEMENUITEMINFOW {
  /** u32 */
  cbSize: number;
  /** u32 */
  fType: number;
  /** u32 */
  fState: number;
  /** u32 */
  wID: number;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpChecked: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpUnchecked: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwItemData: number;
  /** array */
  szString: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmpItem: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEMENUITEMINFOW = 56;

export function allocIMEMENUITEMINFOW(data?: Partial<IMEMENUITEMINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEMENUITEMINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fType !== undefined) view.setUint32(4, Number(data.fType), true);
  // 0x08: u32
  if (data?.fState !== undefined) view.setUint32(8, Number(data.fState), true);
  // 0x0c: u32
  if (data?.wID !== undefined) view.setUint32(12, Number(data.wID), true);
  // 0x10: pointer
  if (data?.hbmpChecked !== undefined) view.setBigUint64(16, data.hbmpChecked === null ? 0n : BigInt(util.toPointer(data.hbmpChecked)), true);
  // 0x18: pointer
  if (data?.hbmpUnchecked !== undefined) view.setBigUint64(24, data.hbmpUnchecked === null ? 0n : BigInt(util.toPointer(data.hbmpUnchecked)), true);
  // 0x20: u32
  if (data?.dwItemData !== undefined) view.setUint32(32, Number(data.dwItemData), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szString !== undefined) view.setBigUint64(40, data.szString === null ? 0n : BigInt(util.toPointer(data.szString)), true);
  // 0x30: pointer
  if (data?.hbmpItem !== undefined) view.setBigUint64(48, data.hbmpItem === null ? 0n : BigInt(util.toPointer(data.hbmpItem)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMECHARPOSITION (size: 32)
 */
export interface IMECHARPOSITION {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCharPos: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cLineHeight: number;
  /** Windows.Win32.Foundation.RECT */
  rcDocument: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMECHARPOSITION = 32;

export function allocIMECHARPOSITION(data?: Partial<IMECHARPOSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECHARPOSITION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCharPos !== undefined) view.setUint32(4, Number(data.dwCharPos), true);
  // 0x08: pointer
  if (data?.pt !== undefined) view.setBigUint64(8, data.pt === null ? 0n : BigInt(util.toPointer(data.pt)), true);
  // 0x10: u32
  if (data?.cLineHeight !== undefined) view.setUint32(16, Number(data.cLineHeight), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rcDocument !== undefined) view.setBigUint64(24, data.rcDocument === null ? 0n : BigInt(util.toPointer(data.rcDocument)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.UI.Input.Ime.IMEDLG (size: 32)
 */
export interface IMEDLG {
  /** i32 */
  cbIMEDLG: number;
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrWord: string | null | Uint8Array | Uint16Array;
  /** i32 */
  nTabId: number;
}

export const sizeofIMEDLG = 32;

export function allocIMEDLG(data?: Partial<IMEDLG>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEDLG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbIMEDLG !== undefined) view.setInt32(0, Number(data.cbIMEDLG), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(8, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x10: buffer
  if (data?.lpwstrWord !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwstrWord);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.nTabId !== undefined) view.setInt32(24, Number(data.nTabId), true);
  // 0x1c: pad4
  return buf;
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.WDD (size: 48)
 */
export interface WDD {
  /** u16 */
  wDispPos: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cchDisp: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  WDD_nReserve1: number;
  /** u16 */
  nPos: number;
  /** u16 */
  _bitfield: number;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWDD = 48;

export function allocWDD(data?: Partial<WDD>): Uint8Array {
  const buf = new Uint8Array(sizeofWDD);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDispPos !== undefined) view.setUint16(0, Number(data.wDispPos), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u16
  if (data?.cchDisp !== undefined) view.setUint16(16, Number(data.cchDisp), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: u32
  if (data?.WDD_nReserve1 !== undefined) view.setUint32(32, Number(data.WDD_nReserve1), true);
  // 0x24: u16
  if (data?.nPos !== undefined) view.setUint16(36, Number(data.nPos), true);
  // 0x26: u16
  if (data?._bitfield !== undefined) view.setUint16(38, Number(data._bitfield), true);
  // 0x28: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(40, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  return buf;
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(util.toPointer(data.lpDDSAlphaDest)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.MORRSLT (size: 104)
 */
export interface MORRSLT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwchOutput: string | null | Uint8Array | Uint16Array;
  /** u16 */
  cchOutput: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pchInputPos: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pchOutputIdxWDD: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  paMonoRubyPos: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pWDD: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cWDD: number;
  /** ptr */
  pPrivate: Deno.PointerValue | Uint8Array | null;
  /** array */
  BLKBuff: Deno.PointerValue | null;
}

export const sizeofMORRSLT = 104;

export function allocMORRSLT(data?: Partial<MORRSLT>): Uint8Array {
  const buf = new Uint8Array(sizeofMORRSLT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwchOutput !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwchOutput);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.cchOutput !== undefined) view.setUint16(16, Number(data.cchOutput), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x28: pointer
  if (data?.pchInputPos !== undefined) view.setBigUint64(40, data.pchInputPos === null ? 0n : BigInt(util.toPointer(data.pchInputPos)), true);
  // 0x30: pointer
  if (data?.pchOutputIdxWDD !== undefined) view.setBigUint64(48, data.pchOutputIdxWDD === null ? 0n : BigInt(util.toPointer(data.pchOutputIdxWDD)), true);
  // 0x38: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(56, data.Anonymous3 === null ? 0n : BigInt(util.toPointer(data.Anonymous3)), true);
  // 0x40: pointer
  if (data?.paMonoRubyPos !== undefined) view.setBigUint64(64, data.paMonoRubyPos === null ? 0n : BigInt(util.toPointer(data.paMonoRubyPos)), true);
  // 0x48: pointer
  if (data?.pWDD !== undefined) view.setBigUint64(72, data.pWDD === null ? 0n : BigInt(util.toPointer(data.pWDD)), true);
  // 0x50: i32
  if (data?.cWDD !== undefined) view.setInt32(80, Number(data.cWDD), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pPrivate !== undefined) view.setBigUint64(88, data.pPrivate === null ? 0n : BigInt(util.toPointer(data.pPrivate)), true);
  // 0x60: pointer
  if (data?.BLKBuff !== undefined) view.setBigUint64(96, data.BLKBuff === null ? 0n : BigInt(util.toPointer(data.BLKBuff)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEWRD (size: 48)
 */
export interface IMEWRD {
  /** Windows.Win32.Foundation.PWSTR */
  pwchReading: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwchDisplay: string | null | Uint8Array | Uint16Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  rgulAttrs: Deno.PointerValue | null;
  /** i32 */
  cbComment: number;
  /** Windows.Win32.UI.Input.Ime.IMEUCT */
  uct: IMEUCT;
  /** ptr */
  pvComment: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEWRD = 48;

export function allocIMEWRD(data?: Partial<IMEWRD>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEWRD);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwchReading !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwchReading);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwchDisplay !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwchDisplay);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.rgulAttrs !== undefined) view.setBigUint64(24, data.rgulAttrs === null ? 0n : BigInt(util.toPointer(data.rgulAttrs)), true);
  // 0x20: i32
  if (data?.cbComment !== undefined) view.setInt32(32, Number(data.cbComment), true);
  // 0x24: i32
  if (data?.uct !== undefined) view.setInt32(36, Number(data.uct), true);
  // 0x28: pointer
  if (data?.pvComment !== undefined) view.setBigUint64(40, data.pvComment === null ? 0n : BigInt(util.toPointer(data.pvComment)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMESHF (size: 32)
 */
export interface IMESHF {
  /** u16 */
  cbShf: number;
  /** u16 */
  verDic: number;
  /** array */
  szTitle: Deno.PointerValue | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szCopyright: Deno.PointerValue | null;
}

export const sizeofIMESHF = 32;

export function allocIMESHF(data?: Partial<IMESHF>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESHF);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbShf !== undefined) view.setUint16(0, Number(data.cbShf), true);
  // 0x02: u16
  if (data?.verDic !== undefined) view.setUint16(2, Number(data.verDic), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szTitle !== undefined) view.setBigUint64(8, data.szTitle === null ? 0n : BigInt(util.toPointer(data.szTitle)), true);
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x18: pointer
  if (data?.szCopyright !== undefined) view.setBigUint64(24, data.szCopyright === null ? 0n : BigInt(util.toPointer(data.szCopyright)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.POSTBL (size: 16)
 */
export interface POSTBL {
  /** u16 */
  nPos: number;
  /** ptr */
  szName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPOSTBL = 16;

export function allocPOSTBL(data?: Partial<POSTBL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOSTBL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.nPos !== undefined) view.setUint16(0, Number(data.nPos), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.szName !== undefined) view.setBigUint64(8, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEDP (size: 24)
 */
export interface IMEDP {
  /** Windows.Win32.UI.Input.Ime.IMEWRD */
  wrdModifier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.Ime.IMEWRD */
  wrdModifiee: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.Ime.IMEREL */
  relID: IMEREL;
}

export const sizeofIMEDP = 24;

export function allocIMEDP(data?: Partial<IMEDP>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEDP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wrdModifier !== undefined) view.setBigUint64(0, data.wrdModifier === null ? 0n : BigInt(util.toPointer(data.wrdModifier)), true);
  // 0x08: pointer
  if (data?.wrdModifiee !== undefined) view.setBigUint64(8, data.wrdModifiee === null ? 0n : BigInt(util.toPointer(data.wrdModifiee)), true);
  // 0x10: i32
  if (data?.relID !== undefined) view.setInt32(16, Number(data.relID), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSINIT (size: 16)
 */
export interface IMEKMSINIT {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
}

export const sizeofIMEKMSINIT = 16;

export function allocIMEKMSINIT(data?: Partial<IMEKMSINIT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSINIT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(8, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSKEY (size: 32)
 */
export interface IMEKMSKEY {
  /** u32 */
  dwStatus: number;
  /** u32 */
  dwCompStatus: number;
  /** u32 */
  dwVKEY: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEKMSKEY = 32;

export function allocIMEKMSKEY(data?: Partial<IMEKMSKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: u32
  if (data?.dwCompStatus !== undefined) view.setUint32(4, Number(data.dwCompStatus), true);
  // 0x08: u32
  if (data?.dwVKEY !== undefined) view.setUint32(8, Number(data.dwVKEY), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export type HIMC = Deno.PointerValue;

/**
 * Windows.Win32.UI.Input.Ime.IMEKMS (size: 32)
 */
export interface IMEKMS {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cKeyList: number;
  /** ptr */
  pKeyList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEKMS = 32;

export function allocIMEKMS(data?: Partial<IMEKMS>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : BigInt(util.toPointer(data.hIMC)), true);
  // 0x10: u32
  if (data?.cKeyList !== undefined) view.setUint32(16, Number(data.cKeyList), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pKeyList !== undefined) view.setBigUint64(24, data.pKeyList === null ? 0n : BigInt(util.toPointer(data.pKeyList)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSNTFY (size: 24)
 */
export interface IMEKMSNTFY {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSelect: boolean;
}

export const sizeofIMEKMSNTFY = 24;

export function allocIMEKMSNTFY(data?: Partial<IMEKMSNTFY>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSNTFY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : BigInt(util.toPointer(data.hIMC)), true);
  // 0x10: i32
  if (data?.fSelect !== undefined) view.setInt32(16, Number(data.fSelect), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSKMP (size: 40)
 */
export interface IMEKMSKMP {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  idLang: number;
  /** u16 */
  wVKStart: number;
  /** u16 */
  wVKEnd: number;
  /** i32 */
  cKeyList: number;
  /** ptr */
  pKeyList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEKMSKMP = 40;

export function allocIMEKMSKMP(data?: Partial<IMEKMSKMP>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSKMP);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : BigInt(util.toPointer(data.hIMC)), true);
  // 0x10: u16
  if (data?.idLang !== undefined) view.setUint16(16, Number(data.idLang), true);
  // 0x12: u16
  if (data?.wVKStart !== undefined) view.setUint16(18, Number(data.wVKStart), true);
  // 0x14: u16
  if (data?.wVKEnd !== undefined) view.setUint16(20, Number(data.wVKEnd), true);
  // 0x16: i32
  if (data?.cKeyList !== undefined) view.setInt32(22, Number(data.cKeyList), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.pKeyList !== undefined) view.setBigUint64(32, data.pKeyList === null ? 0n : BigInt(util.toPointer(data.pKeyList)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSINVK (size: 24)
 */
export interface IMEKMSINVK {
  /** i32 */
  cbSize: number;
  /** Windows.Win32.Globalization.HIMC */
  hIMC: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwControl: number;
}

export const sizeofIMEKMSINVK = 24;

export function allocIMEKMSINVK(data?: Partial<IMEKMSINVK>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSINVK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hIMC !== undefined) view.setBigUint64(8, data.hIMC === null ? 0n : BigInt(util.toPointer(data.hIMC)), true);
  // 0x10: u32
  if (data?.dwControl !== undefined) view.setUint32(16, Number(data.dwControl), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEKMSFUNCDESC (size: 24)
 */
export interface IMEKMSFUNCDESC {
  /** i32 */
  cbSize: number;
  /** u16 */
  idLang: number;
  /** u32 */
  dwControl: number;
  /** array */
  pwszDescription: Deno.PointerValue | null;
}

export const sizeofIMEKMSFUNCDESC = 24;

export function allocIMEKMSFUNCDESC(data?: Partial<IMEKMSFUNCDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEKMSFUNCDESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.idLang !== undefined) view.setUint16(4, Number(data.idLang), true);
  // 0x06: u32
  if (data?.dwControl !== undefined) view.setUint32(6, Number(data.dwControl), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.pwszDescription !== undefined) view.setBigUint64(16, data.pwszDescription === null ? 0n : BigInt(util.toPointer(data.pwszDescription)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.COMPOSITIONSTRING (size: 104)
 */
export interface COMPOSITIONSTRING {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCompReadAttrLen: number;
  /** u32 */
  dwCompReadAttrOffset: number;
  /** u32 */
  dwCompReadClauseLen: number;
  /** u32 */
  dwCompReadClauseOffset: number;
  /** u32 */
  dwCompReadStrLen: number;
  /** u32 */
  dwCompReadStrOffset: number;
  /** u32 */
  dwCompAttrLen: number;
  /** u32 */
  dwCompAttrOffset: number;
  /** u32 */
  dwCompClauseLen: number;
  /** u32 */
  dwCompClauseOffset: number;
  /** u32 */
  dwCompStrLen: number;
  /** u32 */
  dwCompStrOffset: number;
  /** u32 */
  dwCursorPos: number;
  /** u32 */
  dwDeltaStart: number;
  /** u32 */
  dwResultReadClauseLen: number;
  /** u32 */
  dwResultReadClauseOffset: number;
  /** u32 */
  dwResultReadStrLen: number;
  /** u32 */
  dwResultReadStrOffset: number;
  /** u32 */
  dwResultClauseLen: number;
  /** u32 */
  dwResultClauseOffset: number;
  /** u32 */
  dwResultStrLen: number;
  /** u32 */
  dwResultStrOffset: number;
  /** u32 */
  dwPrivateSize: number;
  /** u32 */
  dwPrivateOffset: number;
}

export const sizeofCOMPOSITIONSTRING = 104;

export function allocCOMPOSITIONSTRING(data?: Partial<COMPOSITIONSTRING>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPOSITIONSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCompReadAttrLen !== undefined) view.setUint32(4, Number(data.dwCompReadAttrLen), true);
  // 0x08: u32
  if (data?.dwCompReadAttrOffset !== undefined) view.setUint32(8, Number(data.dwCompReadAttrOffset), true);
  // 0x0c: u32
  if (data?.dwCompReadClauseLen !== undefined) view.setUint32(12, Number(data.dwCompReadClauseLen), true);
  // 0x10: u32
  if (data?.dwCompReadClauseOffset !== undefined) view.setUint32(16, Number(data.dwCompReadClauseOffset), true);
  // 0x14: u32
  if (data?.dwCompReadStrLen !== undefined) view.setUint32(20, Number(data.dwCompReadStrLen), true);
  // 0x18: u32
  if (data?.dwCompReadStrOffset !== undefined) view.setUint32(24, Number(data.dwCompReadStrOffset), true);
  // 0x1c: u32
  if (data?.dwCompAttrLen !== undefined) view.setUint32(28, Number(data.dwCompAttrLen), true);
  // 0x20: u32
  if (data?.dwCompAttrOffset !== undefined) view.setUint32(32, Number(data.dwCompAttrOffset), true);
  // 0x24: u32
  if (data?.dwCompClauseLen !== undefined) view.setUint32(36, Number(data.dwCompClauseLen), true);
  // 0x28: u32
  if (data?.dwCompClauseOffset !== undefined) view.setUint32(40, Number(data.dwCompClauseOffset), true);
  // 0x2c: u32
  if (data?.dwCompStrLen !== undefined) view.setUint32(44, Number(data.dwCompStrLen), true);
  // 0x30: u32
  if (data?.dwCompStrOffset !== undefined) view.setUint32(48, Number(data.dwCompStrOffset), true);
  // 0x34: u32
  if (data?.dwCursorPos !== undefined) view.setUint32(52, Number(data.dwCursorPos), true);
  // 0x38: u32
  if (data?.dwDeltaStart !== undefined) view.setUint32(56, Number(data.dwDeltaStart), true);
  // 0x3c: u32
  if (data?.dwResultReadClauseLen !== undefined) view.setUint32(60, Number(data.dwResultReadClauseLen), true);
  // 0x40: u32
  if (data?.dwResultReadClauseOffset !== undefined) view.setUint32(64, Number(data.dwResultReadClauseOffset), true);
  // 0x44: u32
  if (data?.dwResultReadStrLen !== undefined) view.setUint32(68, Number(data.dwResultReadStrLen), true);
  // 0x48: u32
  if (data?.dwResultReadStrOffset !== undefined) view.setUint32(72, Number(data.dwResultReadStrOffset), true);
  // 0x4c: u32
  if (data?.dwResultClauseLen !== undefined) view.setUint32(76, Number(data.dwResultClauseLen), true);
  // 0x50: u32
  if (data?.dwResultClauseOffset !== undefined) view.setUint32(80, Number(data.dwResultClauseOffset), true);
  // 0x54: u32
  if (data?.dwResultStrLen !== undefined) view.setUint32(84, Number(data.dwResultStrLen), true);
  // 0x58: u32
  if (data?.dwResultStrOffset !== undefined) view.setUint32(88, Number(data.dwResultStrOffset), true);
  // 0x5c: u32
  if (data?.dwPrivateSize !== undefined) view.setUint32(92, Number(data.dwPrivateSize), true);
  // 0x60: u32
  if (data?.dwPrivateOffset !== undefined) view.setUint32(96, Number(data.dwPrivateOffset), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.GUIDELINE (size: 32)
 */
export interface GUIDELINE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwStrLen: number;
  /** u32 */
  dwStrOffset: number;
  /** u32 */
  dwPrivateSize: number;
  /** u32 */
  dwPrivateOffset: number;
}

export const sizeofGUIDELINE = 32;

export function allocGUIDELINE(data?: Partial<GUIDELINE>): Uint8Array {
  const buf = new Uint8Array(sizeofGUIDELINE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwLevel !== undefined) view.setUint32(4, Number(data.dwLevel), true);
  // 0x08: u32
  if (data?.dwIndex !== undefined) view.setUint32(8, Number(data.dwIndex), true);
  // 0x0c: u32
  if (data?.dwStrLen !== undefined) view.setUint32(12, Number(data.dwStrLen), true);
  // 0x10: u32
  if (data?.dwStrOffset !== undefined) view.setUint32(16, Number(data.dwStrOffset), true);
  // 0x14: u32
  if (data?.dwPrivateSize !== undefined) view.setUint32(20, Number(data.dwPrivateSize), true);
  // 0x18: u32
  if (data?.dwPrivateOffset !== undefined) view.setUint32(24, Number(data.dwPrivateOffset), true);
  // 0x1c: pad4
  return buf;
}

export type WPARAM = Deno.PointerValue;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.UI.Input.Ime.TRANSMSG (size: 24)
 */
export interface TRANSMSG {
  /** u32 */
  message: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSMSG = 24;

export function allocTRANSMSG(data?: Partial<TRANSMSG>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSMSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.message !== undefined) view.setUint32(0, Number(data.message), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wParam !== undefined) view.setBigUint64(8, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x10: pointer
  if (data?.lParam !== undefined) view.setBigUint64(16, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.TRANSMSGLIST (size: 16)
 */
export interface TRANSMSGLIST {
  /** u32 */
  uMsgCount: number;
  /** array */
  TransMsg: Deno.PointerValue | null;
}

export const sizeofTRANSMSGLIST = 16;

export function allocTRANSMSGLIST(data?: Partial<TRANSMSGLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSMSGLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uMsgCount !== undefined) view.setUint32(0, Number(data.uMsgCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TransMsg !== undefined) view.setBigUint64(8, data.TransMsg === null ? 0n : BigInt(util.toPointer(data.TransMsg)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.CANDIDATEINFO (size: 24)
 */
export interface CANDIDATEINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCount: number;
  /** array */
  dwOffset: Deno.PointerValue | null;
  /** u32 */
  dwPrivateSize: number;
  /** u32 */
  dwPrivateOffset: number;
}

export const sizeofCANDIDATEINFO = 24;

export function allocCANDIDATEINFO(data?: Partial<CANDIDATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCANDIDATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCount !== undefined) view.setUint32(4, Number(data.dwCount), true);
  // 0x08: pointer
  if (data?.dwOffset !== undefined) view.setBigUint64(8, data.dwOffset === null ? 0n : BigInt(util.toPointer(data.dwOffset)), true);
  // 0x10: u32
  if (data?.dwPrivateSize !== undefined) view.setUint32(16, Number(data.dwPrivateSize), true);
  // 0x14: u32
  if (data?.dwPrivateOffset !== undefined) view.setUint32(20, Number(data.dwPrivateOffset), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTA (size: 40)
 */
export interface LOGFONTA {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue | null;
}

export const sizeofLOGFONTA = 40;

export function allocLOGFONTA(data?: Partial<LOGFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : BigInt(util.toPointer(data.lfFaceName)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Gdi.LOGFONTW (size: 40)
 */
export interface LOGFONTW {
  /** i32 */
  lfHeight: number;
  /** i32 */
  lfWidth: number;
  /** i32 */
  lfEscapement: number;
  /** i32 */
  lfOrientation: number;
  /** i32 */
  lfWeight: number;
  /** u8 */
  lfItalic: number;
  /** u8 */
  lfUnderline: number;
  /** u8 */
  lfStrikeOut: number;
  /** Windows.Win32.Graphics.Gdi.FONT_CHARSET */
  lfCharSet: FONT_CHARSET;
  /** Windows.Win32.Graphics.Gdi.FONT_OUTPUT_PRECISION */
  lfOutPrecision: FONT_OUTPUT_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_CLIP_PRECISION */
  lfClipPrecision: FONT_CLIP_PRECISION;
  /** Windows.Win32.Graphics.Gdi.FONT_QUALITY */
  lfQuality: FONT_QUALITY;
  /** u8 */
  lfPitchAndFamily: number;
  /** array */
  lfFaceName: Deno.PointerValue | null;
}

export const sizeofLOGFONTW = 40;

export function allocLOGFONTW(data?: Partial<LOGFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lfHeight !== undefined) view.setInt32(0, Number(data.lfHeight), true);
  // 0x04: i32
  if (data?.lfWidth !== undefined) view.setInt32(4, Number(data.lfWidth), true);
  // 0x08: i32
  if (data?.lfEscapement !== undefined) view.setInt32(8, Number(data.lfEscapement), true);
  // 0x0c: i32
  if (data?.lfOrientation !== undefined) view.setInt32(12, Number(data.lfOrientation), true);
  // 0x10: i32
  if (data?.lfWeight !== undefined) view.setInt32(16, Number(data.lfWeight), true);
  // 0x14: u8
  if (data?.lfItalic !== undefined) view.setUint8(20, Number(data.lfItalic));
  // 0x15: u8
  if (data?.lfUnderline !== undefined) view.setUint8(21, Number(data.lfUnderline));
  // 0x16: u8
  if (data?.lfStrikeOut !== undefined) view.setUint8(22, Number(data.lfStrikeOut));
  // 0x17: u8
  if (data?.lfCharSet !== undefined) view.setUint8(23, Number(data.lfCharSet));
  // 0x18: u8
  if (data?.lfOutPrecision !== undefined) view.setUint8(24, Number(data.lfOutPrecision));
  // 0x19: u8
  if (data?.lfClipPrecision !== undefined) view.setUint8(25, Number(data.lfClipPrecision));
  // 0x1a: u8
  if (data?.lfQuality !== undefined) view.setUint8(26, Number(data.lfQuality));
  // 0x1b: u8
  if (data?.lfPitchAndFamily !== undefined) view.setUint8(27, Number(data.lfPitchAndFamily));
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lfFaceName !== undefined) view.setBigUint64(32, data.lfFaceName === null ? 0n : BigInt(util.toPointer(data.lfFaceName)), true);
  return buf;
}

/**
 * _lfFont_e__Union (size: 16)
 */
export interface _lfFont_e__Union {
  /** Windows.Win32.Graphics.Gdi.LOGFONTA */
  A: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.LOGFONTW */
  W: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_lfFont_e__Union = 16;

export function alloc_lfFont_e__Union(data?: Partial<_lfFont_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_lfFont_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.A !== undefined) view.setBigUint64(0, data.A === null ? 0n : BigInt(util.toPointer(data.A)), true);
  // 0x08: pointer
  if (data?.W !== undefined) view.setBigUint64(8, data.W === null ? 0n : BigInt(util.toPointer(data.W)), true);
  return buf;
}

export type HIMCC = Deno.PointerValue;

/**
 * Windows.Win32.UI.Input.Ime.INPUTCONTEXT (size: 128)
 */
export interface INPUTCONTEXT {
  /** Windows.Win32.Foundation.HWND */
  hWnd: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fOpen: boolean;
  /** Windows.Win32.Foundation.POINT */
  ptStatusWndPos: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  ptSoftKbdPos: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fdwConversion: number;
  /** u32 */
  fdwSentence: number;
  /** _lfFont_e__Union */
  lfFont: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Input.Ime.COMPOSITIONFORM */
  cfCompForm: Uint8Array | Deno.PointerValue | null;
  /** array */
  cfCandForm: Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hCompStr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hCandInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hGuideLine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Globalization.HIMCC */
  hPrivate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumMsgBuf: number;
  /** Windows.Win32.Globalization.HIMCC */
  hMsgBuf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fdwInit: number;
  /** array */
  dwReserve: Deno.PointerValue | null;
}

export const sizeofINPUTCONTEXT = 128;

export function allocINPUTCONTEXT(data?: Partial<INPUTCONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofINPUTCONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hWnd !== undefined) view.setBigUint64(0, data.hWnd === null ? 0n : BigInt(util.toPointer(data.hWnd)), true);
  // 0x08: i32
  if (data?.fOpen !== undefined) view.setInt32(8, Number(data.fOpen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ptStatusWndPos !== undefined) view.setBigUint64(16, data.ptStatusWndPos === null ? 0n : BigInt(util.toPointer(data.ptStatusWndPos)), true);
  // 0x18: pointer
  if (data?.ptSoftKbdPos !== undefined) view.setBigUint64(24, data.ptSoftKbdPos === null ? 0n : BigInt(util.toPointer(data.ptSoftKbdPos)), true);
  // 0x20: u32
  if (data?.fdwConversion !== undefined) view.setUint32(32, Number(data.fdwConversion), true);
  // 0x24: u32
  if (data?.fdwSentence !== undefined) view.setUint32(36, Number(data.fdwSentence), true);
  // 0x28: pointer
  if (data?.lfFont !== undefined) view.setBigUint64(40, data.lfFont === null ? 0n : BigInt(util.toPointer(data.lfFont)), true);
  // 0x30: pointer
  if (data?.cfCompForm !== undefined) view.setBigUint64(48, data.cfCompForm === null ? 0n : BigInt(util.toPointer(data.cfCompForm)), true);
  // 0x38: pointer
  if (data?.cfCandForm !== undefined) view.setBigUint64(56, data.cfCandForm === null ? 0n : BigInt(util.toPointer(data.cfCandForm)), true);
  // 0x40: pointer
  if (data?.hCompStr !== undefined) view.setBigUint64(64, data.hCompStr === null ? 0n : BigInt(util.toPointer(data.hCompStr)), true);
  // 0x48: pointer
  if (data?.hCandInfo !== undefined) view.setBigUint64(72, data.hCandInfo === null ? 0n : BigInt(util.toPointer(data.hCandInfo)), true);
  // 0x50: pointer
  if (data?.hGuideLine !== undefined) view.setBigUint64(80, data.hGuideLine === null ? 0n : BigInt(util.toPointer(data.hGuideLine)), true);
  // 0x58: pointer
  if (data?.hPrivate !== undefined) view.setBigUint64(88, data.hPrivate === null ? 0n : BigInt(util.toPointer(data.hPrivate)), true);
  // 0x60: u32
  if (data?.dwNumMsgBuf !== undefined) view.setUint32(96, Number(data.dwNumMsgBuf), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.hMsgBuf !== undefined) view.setBigUint64(104, data.hMsgBuf === null ? 0n : BigInt(util.toPointer(data.hMsgBuf)), true);
  // 0x70: u32
  if (data?.fdwInit !== undefined) view.setUint32(112, Number(data.fdwInit), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.dwReserve !== undefined) view.setBigUint64(120, data.dwReserve === null ? 0n : BigInt(util.toPointer(data.dwReserve)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEINFO (size: 32)
 */
export interface IMEINFO {
  /** u32 */
  dwPrivateDataSize: number;
  /** u32 */
  fdwProperty: number;
  /** u32 */
  fdwConversionCaps: number;
  /** u32 */
  fdwSentenceCaps: number;
  /** u32 */
  fdwUICaps: number;
  /** u32 */
  fdwSCSCaps: number;
  /** u32 */
  fdwSelectCaps: number;
}

export const sizeofIMEINFO = 32;

export function allocIMEINFO(data?: Partial<IMEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwPrivateDataSize !== undefined) view.setUint32(0, Number(data.dwPrivateDataSize), true);
  // 0x04: u32
  if (data?.fdwProperty !== undefined) view.setUint32(4, Number(data.fdwProperty), true);
  // 0x08: u32
  if (data?.fdwConversionCaps !== undefined) view.setUint32(8, Number(data.fdwConversionCaps), true);
  // 0x0c: u32
  if (data?.fdwSentenceCaps !== undefined) view.setUint32(12, Number(data.fdwSentenceCaps), true);
  // 0x10: u32
  if (data?.fdwUICaps !== undefined) view.setUint32(16, Number(data.fdwUICaps), true);
  // 0x14: u32
  if (data?.fdwSCSCaps !== undefined) view.setUint32(20, Number(data.fdwSCSCaps), true);
  // 0x18: u32
  if (data?.fdwSelectCaps !== undefined) view.setUint32(24, Number(data.fdwSelectCaps), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.SOFTKBDDATA (size: 16)
 */
export interface SOFTKBDDATA {
  /** u32 */
  uCount: number;
  /** array */
  wCode: Deno.PointerValue | null;
}

export const sizeofSOFTKBDDATA = 16;

export function allocSOFTKBDDATA(data?: Partial<SOFTKBDDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSOFTKBDDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wCode !== undefined) view.setBigUint64(8, data.wCode === null ? 0n : BigInt(util.toPointer(data.wCode)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.APPLETIDLIST (size: 16)
 */
export interface APPLETIDLIST {
  /** i32 */
  count: number;
  /** ptr */
  pIIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPPLETIDLIST = 16;

export function allocAPPLETIDLIST(data?: Partial<APPLETIDLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLETIDLIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.count !== undefined) view.setInt32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIIDList !== undefined) view.setBigUint64(8, data.pIIDList === null ? 0n : BigInt(util.toPointer(data.pIIDList)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMESTRINGCANDIDATE (size: 16)
 */
export interface IMESTRINGCANDIDATE {
  /** u32 */
  uCount: number;
  /** array */
  lpwstr: Deno.PointerValue | null;
}

export const sizeofIMESTRINGCANDIDATE = 16;

export function allocIMESTRINGCANDIDATE(data?: Partial<IMESTRINGCANDIDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRINGCANDIDATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpwstr !== undefined) view.setBigUint64(8, data.lpwstr === null ? 0n : BigInt(util.toPointer(data.lpwstr)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEITEM (size: 16)
 */
export interface IMEITEM {
  /** i32 */
  cbSize: number;
  /** i32 */
  iType: number;
  /** ptr */
  lpItemData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofIMEITEM = 16;

export function allocIMEITEM(data?: Partial<IMEITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEITEM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cbSize !== undefined) view.setInt32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.iType !== undefined) view.setInt32(4, Number(data.iType), true);
  // 0x08: pointer
  if (data?.lpItemData !== undefined) view.setBigUint64(8, data.lpItemData === null ? 0n : BigInt(util.toPointer(data.lpItemData)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEITEMCANDIDATE (size: 16)
 */
export interface IMEITEMCANDIDATE {
  /** u32 */
  uCount: number;
  /** array */
  imeItem: Deno.PointerValue | null;
}

export const sizeofIMEITEMCANDIDATE = 16;

export function allocIMEITEMCANDIDATE(data?: Partial<IMEITEMCANDIDATE>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEITEMCANDIDATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.uCount !== undefined) view.setUint32(0, Number(data.uCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.imeItem !== undefined) view.setBigUint64(8, data.imeItem === null ? 0n : BigInt(util.toPointer(data.imeItem)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMESTRINGINFO (size: 16)
 */
export interface IMESTRINGINFO {
  /** u32 */
  dwFarEastId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstr: string | null | Uint8Array | Uint16Array;
}

export const sizeofIMESTRINGINFO = 16;

export function allocIMESTRINGINFO(data?: Partial<IMESTRINGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRINGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFarEastId !== undefined) view.setUint32(0, Number(data.dwFarEastId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwstr !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwstr);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEFAREASTINFO (size: 16)
 */
export interface IMEFAREASTINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwType: number;
  /** array */
  dwData: Deno.PointerValue | null;
}

export const sizeofIMEFAREASTINFO = 16;

export function allocIMEFAREASTINFO(data?: Partial<IMEFAREASTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEFAREASTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: pointer
  if (data?.dwData !== undefined) view.setBigUint64(8, data.dwData === null ? 0n : BigInt(util.toPointer(data.dwData)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMESTRINGCANDIDATEINFO (size: 40)
 */
export interface IMESTRINGCANDIDATEINFO {
  /** u32 */
  dwFarEastId: number;
  /** ptr */
  lpFarEastInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fInfoMask: number;
  /** i32 */
  iSelIndex: number;
  /** u32 */
  uCount: number;
  /** array */
  lpwstr: Deno.PointerValue | null;
}

export const sizeofIMESTRINGCANDIDATEINFO = 40;

export function allocIMESTRINGCANDIDATEINFO(data?: Partial<IMESTRINGCANDIDATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMESTRINGCANDIDATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFarEastId !== undefined) view.setUint32(0, Number(data.dwFarEastId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpFarEastInfo !== undefined) view.setBigUint64(8, data.lpFarEastInfo === null ? 0n : BigInt(util.toPointer(data.lpFarEastInfo)), true);
  // 0x10: u32
  if (data?.fInfoMask !== undefined) view.setUint32(16, Number(data.fInfoMask), true);
  // 0x14: i32
  if (data?.iSelIndex !== undefined) view.setInt32(20, Number(data.iSelIndex), true);
  // 0x18: u32
  if (data?.uCount !== undefined) view.setUint32(24, Number(data.uCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpwstr !== undefined) view.setBigUint64(32, data.lpwstr === null ? 0n : BigInt(util.toPointer(data.lpwstr)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMECOMPOSITIONSTRINGINFO (size: 24)
 */
export interface IMECOMPOSITIONSTRINGINFO {
  /** i32 */
  iCompStrLen: number;
  /** i32 */
  iCaretPos: number;
  /** i32 */
  iEditStart: number;
  /** i32 */
  iEditLen: number;
  /** i32 */
  iTargetStart: number;
  /** i32 */
  iTargetLen: number;
}

export const sizeofIMECOMPOSITIONSTRINGINFO = 24;

export function allocIMECOMPOSITIONSTRINGINFO(data?: Partial<IMECOMPOSITIONSTRINGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECOMPOSITIONSTRINGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iCompStrLen !== undefined) view.setInt32(0, Number(data.iCompStrLen), true);
  // 0x04: i32
  if (data?.iCaretPos !== undefined) view.setInt32(4, Number(data.iCaretPos), true);
  // 0x08: i32
  if (data?.iEditStart !== undefined) view.setInt32(8, Number(data.iEditStart), true);
  // 0x0c: i32
  if (data?.iEditLen !== undefined) view.setInt32(12, Number(data.iEditLen), true);
  // 0x10: i32
  if (data?.iTargetStart !== undefined) view.setInt32(16, Number(data.iTargetStart), true);
  // 0x14: i32
  if (data?.iTargetLen !== undefined) view.setInt32(20, Number(data.iTargetLen), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMECHARINFO (size: 16)
 */
export interface IMECHARINFO {
  /** char */
  wch: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCharInfo: number;
}

export const sizeofIMECHARINFO = 16;

export function allocIMECHARINFO(data?: Partial<IMECHARINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECHARINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wch !== undefined) view.setBigUint64(0, data.wch === null ? 0n : BigInt(util.toPointer(data.wch)), true);
  // 0x08: u32
  if (data?.dwCharInfo !== undefined) view.setUint32(8, Number(data.dwCharInfo), true);
  // 0x0c: pad4
  return buf;
}

export type HICON = Deno.PointerValue;

/**
 * Windows.Win32.UI.Input.Ime.IMEAPPLETCFG (size: 56)
 */
export interface IMEAPPLETCFG {
  /** u32 */
  dwConfig: number;
  /** array */
  wchTitle: Deno.PointerValue | null;
  /** array */
  wchTitleFontFace: Deno.PointerValue | null;
  /** u32 */
  dwCharSet: number;
  /** i32 */
  iCategory: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  langID: number;
  /** u16 */
  dummy: number;
  /** Windows.Win32.Foundation.LPARAM */
  lReserved1: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEAPPLETCFG = 56;

export function allocIMEAPPLETCFG(data?: Partial<IMEAPPLETCFG>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEAPPLETCFG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwConfig !== undefined) view.setUint32(0, Number(data.dwConfig), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wchTitle !== undefined) view.setBigUint64(8, data.wchTitle === null ? 0n : BigInt(util.toPointer(data.wchTitle)), true);
  // 0x10: pointer
  if (data?.wchTitleFontFace !== undefined) view.setBigUint64(16, data.wchTitleFontFace === null ? 0n : BigInt(util.toPointer(data.wchTitleFontFace)), true);
  // 0x18: u32
  if (data?.dwCharSet !== undefined) view.setUint32(24, Number(data.dwCharSet), true);
  // 0x1c: i32
  if (data?.iCategory !== undefined) view.setInt32(28, Number(data.iCategory), true);
  // 0x20: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(32, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x28: u16
  if (data?.langID !== undefined) view.setUint16(40, Number(data.langID), true);
  // 0x2a: u16
  if (data?.dummy !== undefined) view.setUint16(42, Number(data.dummy), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lReserved1 !== undefined) view.setBigUint64(48, data.lReserved1 === null ? 0n : BigInt(util.toPointer(data.lReserved1)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.IMEAPPLETUI (size: 56)
 */
export interface IMEAPPLETUI {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** u32 */
  dwStyle: number;
  /** i32 */
  width: number;
  /** i32 */
  height: number;
  /** i32 */
  minWidth: number;
  /** i32 */
  minHeight: number;
  /** i32 */
  maxWidth: number;
  /** i32 */
  maxHeight: number;
  /** Windows.Win32.Foundation.LPARAM */
  lReserved1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lReserved2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIMEAPPLETUI = 56;

export function allocIMEAPPLETUI(data?: Partial<IMEAPPLETUI>): Uint8Array {
  const buf = new Uint8Array(sizeofIMEAPPLETUI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : BigInt(util.toPointer(data.hwnd)), true);
  // 0x08: u32
  if (data?.dwStyle !== undefined) view.setUint32(8, Number(data.dwStyle), true);
  // 0x0c: i32
  if (data?.width !== undefined) view.setInt32(12, Number(data.width), true);
  // 0x10: i32
  if (data?.height !== undefined) view.setInt32(16, Number(data.height), true);
  // 0x14: i32
  if (data?.minWidth !== undefined) view.setInt32(20, Number(data.minWidth), true);
  // 0x18: i32
  if (data?.minHeight !== undefined) view.setInt32(24, Number(data.minHeight), true);
  // 0x1c: i32
  if (data?.maxWidth !== undefined) view.setInt32(28, Number(data.maxWidth), true);
  // 0x20: i32
  if (data?.maxHeight !== undefined) view.setInt32(32, Number(data.maxHeight), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lReserved1 !== undefined) view.setBigUint64(40, data.lReserved1 === null ? 0n : BigInt(util.toPointer(data.lReserved1)), true);
  // 0x30: pointer
  if (data?.lReserved2 !== undefined) view.setBigUint64(48, data.lReserved2 === null ? 0n : BigInt(util.toPointer(data.lReserved2)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Input.Ime.APPLYCANDEXPARAM (size: 32)
 */
export interface APPLYCANDEXPARAM {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrDisplay: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpwstrReading: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwReserved: number;
}

export const sizeofAPPLYCANDEXPARAM = 32;

export function allocAPPLYCANDEXPARAM(data?: Partial<APPLYCANDEXPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofAPPLYCANDEXPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpwstrDisplay !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpwstrDisplay);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpwstrReading !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpwstrReading);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwReserved !== undefined) view.setUint32(24, Number(data.dwReserved), true);
  // 0x1c: pad4
  return buf;
}

export type HKL = Deno.PointerValue;

export type LRESULT = Deno.PointerValue;

// Native Libraries

try {
  var libIMM32_dll = Deno.dlopen("IMM32.dll", {
    ImmInstallIMEA: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    ImmInstallIMEW: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    ImmGetDefaultIMEWnd: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImmGetDescriptionA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    ImmGetDescriptionW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    ImmGetIMEFileNameA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    ImmGetIMEFileNameW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    ImmGetProperty: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    ImmIsIME: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmSimulateHotKey: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    ImmCreateContext: {
      parameters: [],
      result: "pointer",
    },
    ImmDestroyContext: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmGetContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImmReleaseContext: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmAssociateContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ImmAssociateContextEx: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    ImmGetCompositionStringA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    ImmGetCompositionStringW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    ImmSetCompositionStringA: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    ImmSetCompositionStringW: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    ImmGetCandidateListCountA: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ImmGetCandidateListCountW: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ImmGetCandidateListA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    ImmGetCandidateListW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    ImmGetGuideLineA: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "u32",
    },
    ImmGetGuideLineW: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "u32",
    },
    ImmGetConversionStatus: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImmSetConversionStatus: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    ImmGetOpenStatus: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmSetOpenStatus: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ImmGetCompositionFontA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmGetCompositionFontW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmSetCompositionFontA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmSetCompositionFontW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmConfigureIMEA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ImmConfigureIMEW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ImmEscapeA: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    ImmEscapeW: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    ImmGetConversionListA: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "u32", "u32"],
      result: "u32",
    },
    ImmGetConversionListW: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "u32", "u32"],
      result: "u32",
    },
    ImmNotifyIME: {
      parameters: ["pointer", "u32", "u32", "u32"],
      result: "i32",
    },
    ImmGetStatusWindowPos: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmSetStatusWindowPos: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmGetCompositionWindow: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmSetCompositionWindow: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmGetCandidateWindow: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    ImmSetCandidateWindow: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ImmIsUIMessageA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ImmIsUIMessageW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ImmGetVirtualKey: {
      parameters: ["pointer"],
      result: "u32",
    },
    ImmRegisterWordA: {
      parameters: ["pointer", "buffer", "u32", "buffer"],
      result: "i32",
    },
    ImmRegisterWordW: {
      parameters: ["pointer", "buffer", "u32", "buffer"],
      result: "i32",
    },
    ImmUnregisterWordA: {
      parameters: ["pointer", "buffer", "u32", "buffer"],
      result: "i32",
    },
    ImmUnregisterWordW: {
      parameters: ["pointer", "buffer", "u32", "buffer"],
      result: "i32",
    },
    ImmGetRegisterWordStyleA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    ImmGetRegisterWordStyleW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    ImmEnumRegisterWordA: {
      parameters: ["pointer", "pointer", "buffer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ImmEnumRegisterWordW: {
      parameters: ["pointer", "pointer", "buffer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ImmDisableIME: {
      parameters: ["u32"],
      result: "i32",
    },
    ImmEnumInputContext: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    ImmGetImeMenuItemsA: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    ImmGetImeMenuItemsW: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "u32"],
      result: "u32",
    },
    ImmDisableTextFrameService: {
      parameters: ["u32"],
      result: "i32",
    },
    ImmDisableLegacyIME: {
      parameters: [],
      result: "i32",
    },
    ImmGetHotKey: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImmSetHotKey: {
      parameters: ["u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    ImmGenerateMessage: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmRequestMessageA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ImmRequestMessageW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ImmCreateSoftKeyboard: {
      parameters: ["u32", "pointer", "i32", "i32"],
      result: "pointer",
    },
    ImmDestroySoftKeyboard: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmShowSoftKeyboard: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ImmLockIMC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImmUnlockIMC: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmGetIMCLockCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ImmCreateIMCC: {
      parameters: ["u32"],
      result: "pointer",
    },
    ImmDestroyIMCC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImmLockIMCC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ImmUnlockIMCC: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImmGetIMCCLockCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ImmReSizeIMCC: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ImmGetIMCCSize: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function ImmInstallIMEA(
  lpszIMEFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszLayoutText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */ {
  return util.pointerFromFfi(libIMM32_dll.ImmInstallIMEA(util.pstrToFfi(lpszIMEFileName), util.pstrToFfi(lpszLayoutText)));
}

export function ImmInstallIMEW(
  lpszIMEFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszLayoutText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */ {
  return util.pointerFromFfi(libIMM32_dll.ImmInstallIMEW(util.pwstrToFfi(lpszIMEFileName), util.pwstrToFfi(lpszLayoutText)));
}

export function ImmGetDefaultIMEWnd(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libIMM32_dll.ImmGetDefaultIMEWnd(util.hwndToFfi(param0)));
}

export function ImmGetDescriptionA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszDescription: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetDescriptionA(util.toPointer(param0), util.pstrToFfi(lpszDescription), uBufLen);
}

export function ImmGetDescriptionW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszDescription: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetDescriptionW(util.toPointer(param0), util.pwstrToFfi(lpszDescription), uBufLen);
}

export function ImmGetIMEFileNameA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  uBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetIMEFileNameA(util.toPointer(param0), util.pstrToFfi(lpszFileName), uBufLen);
}

export function ImmGetIMEFileNameW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  uBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetIMEFileNameW(util.toPointer(param0), util.pwstrToFfi(lpszFileName), uBufLen);
}

export function ImmGetProperty(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetProperty(util.toPointer(param0), param1);
}

export function ImmIsIME(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmIsIME(util.toPointer(param0)));
}

export function ImmSimulateHotKey(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: IME_HOTKEY_IDENTIFIER /* Windows.Win32.UI.Input.Ime.IME_HOTKEY_IDENTIFIER */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSimulateHotKey(util.hwndToFfi(param0), param1));
}

export function ImmCreateContext(): Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */ {
  return util.pointerFromFfi(libIMM32_dll.ImmCreateContext());
}

export function ImmDestroyContext(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmDestroyContext(util.toPointer(param0)));
}

export function ImmGetContext(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */ {
  return util.pointerFromFfi(libIMM32_dll.ImmGetContext(util.hwndToFfi(param0)));
}

export function ImmReleaseContext(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmReleaseContext(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function ImmAssociateContext(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */ {
  return util.pointerFromFfi(libIMM32_dll.ImmAssociateContext(util.hwndToFfi(param0), util.toPointer(param1)));
}

export function ImmAssociateContextEx(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param2: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmAssociateContextEx(util.hwndToFfi(param0), util.toPointer(param1), param2));
}

export function ImmGetCompositionStringA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: IME_COMPOSITION_STRING /* Windows.Win32.UI.Input.Ime.IME_COMPOSITION_STRING */,
  lpBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufLen: number /* u32 */,
): number /* i32 */ {
  return libIMM32_dll.ImmGetCompositionStringA(util.toPointer(param0), param1, util.toPointer(lpBuf), dwBufLen);
}

export function ImmGetCompositionStringW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: IME_COMPOSITION_STRING /* Windows.Win32.UI.Input.Ime.IME_COMPOSITION_STRING */,
  lpBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufLen: number /* u32 */,
): number /* i32 */ {
  return libIMM32_dll.ImmGetCompositionStringW(util.toPointer(param0), param1, util.toPointer(lpBuf), dwBufLen);
}

export function ImmSetCompositionStringA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  dwIndex: SET_COMPOSITION_STRING_TYPE /* Windows.Win32.UI.Input.Ime.SET_COMPOSITION_STRING_TYPE */,
  lpComp: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCompLen: number /* u32 */,
  lpRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReadLen: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetCompositionStringA(util.toPointer(param0), dwIndex, util.toPointer(lpComp), dwCompLen, util.toPointer(lpRead), dwReadLen));
}

export function ImmSetCompositionStringW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  dwIndex: SET_COMPOSITION_STRING_TYPE /* Windows.Win32.UI.Input.Ime.SET_COMPOSITION_STRING_TYPE */,
  lpComp: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCompLen: number /* u32 */,
  lpRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReadLen: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetCompositionStringW(util.toPointer(param0), dwIndex, util.toPointer(lpComp), dwCompLen, util.toPointer(lpRead), dwReadLen));
}

export function ImmGetCandidateListCountA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpdwListCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetCandidateListCountA(util.toPointer(param0), util.toPointer(lpdwListCount));
}

export function ImmGetCandidateListCountW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpdwListCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetCandidateListCountW(util.toPointer(param0), util.toPointer(lpdwListCount));
}

export function ImmGetCandidateListA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  deIndex: number /* u32 */,
  lpCandList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetCandidateListA(util.toPointer(param0), deIndex, util.toPointer(lpCandList), dwBufLen);
}

export function ImmGetCandidateListW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  deIndex: number /* u32 */,
  lpCandList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetCandidateListW(util.toPointer(param0), deIndex, util.toPointer(lpCandList), dwBufLen);
}

export function ImmGetGuideLineA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  dwIndex: GET_GUIDE_LINE_TYPE /* Windows.Win32.UI.Input.Ime.GET_GUIDE_LINE_TYPE */,
  lpBuf: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetGuideLineA(util.toPointer(param0), dwIndex, util.pstrToFfi(lpBuf), dwBufLen);
}

export function ImmGetGuideLineW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  dwIndex: GET_GUIDE_LINE_TYPE /* Windows.Win32.UI.Input.Ime.GET_GUIDE_LINE_TYPE */,
  lpBuf: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwBufLen: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetGuideLineW(util.toPointer(param0), dwIndex, util.pwstrToFfi(lpBuf), dwBufLen);
}

export function ImmGetConversionStatus(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpfdwConversion: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfdwSentence: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetConversionStatus(util.toPointer(param0), util.toPointer(lpfdwConversion), util.toPointer(lpfdwSentence)));
}

export function ImmSetConversionStatus(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: IME_CONVERSION_MODE /* Windows.Win32.UI.Input.Ime.IME_CONVERSION_MODE */,
  param2: IME_SENTENCE_MODE /* Windows.Win32.UI.Input.Ime.IME_SENTENCE_MODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetConversionStatus(util.toPointer(param0), param1, param2));
}

export function ImmGetOpenStatus(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetOpenStatus(util.toPointer(param0)));
}

export function ImmSetOpenStatus(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetOpenStatus(util.toPointer(param0), util.boolToFfi(param1)));
}

export function ImmGetCompositionFontA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lplf: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetCompositionFontA(util.toPointer(param0), util.toPointer(lplf)));
}

export function ImmGetCompositionFontW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lplf: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetCompositionFontW(util.toPointer(param0), util.toPointer(lplf)));
}

export function ImmSetCompositionFontA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lplf: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetCompositionFontA(util.toPointer(param0), util.toPointer(lplf)));
}

export function ImmSetCompositionFontW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lplf: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetCompositionFontW(util.toPointer(param0), util.toPointer(lplf)));
}

export function ImmConfigureIMEA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param2: number /* u32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmConfigureIMEA(util.toPointer(param0), util.hwndToFfi(param1), param2, util.toPointer(param3)));
}

export function ImmConfigureIMEW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param2: number /* u32 */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmConfigureIMEW(util.toPointer(param0), util.hwndToFfi(param1), param2, util.toPointer(param3)));
}

export function ImmEscapeA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param2: IME_ESCAPE /* Windows.Win32.UI.Input.Ime.IME_ESCAPE */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libIMM32_dll.ImmEscapeA(util.toPointer(param0), util.toPointer(param1), param2, util.toPointer(param3)));
}

export function ImmEscapeW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param2: IME_ESCAPE /* Windows.Win32.UI.Input.Ime.IME_ESCAPE */,
  param3: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libIMM32_dll.ImmEscapeW(util.toPointer(param0), util.toPointer(param1), param2, util.toPointer(param3)));
}

export function ImmGetConversionListA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpSrc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufLen: number /* u32 */,
  uFlag: GET_CONVERSION_LIST_FLAG /* Windows.Win32.UI.Input.Ime.GET_CONVERSION_LIST_FLAG */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetConversionListA(util.toPointer(param0), util.toPointer(param1), util.pstrToFfi(lpSrc), util.toPointer(lpDst), dwBufLen, uFlag);
}

export function ImmGetConversionListW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpSrc: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufLen: number /* u32 */,
  uFlag: GET_CONVERSION_LIST_FLAG /* Windows.Win32.UI.Input.Ime.GET_CONVERSION_LIST_FLAG */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetConversionListW(util.toPointer(param0), util.toPointer(param1), util.pwstrToFfi(lpSrc), util.toPointer(lpDst), dwBufLen, uFlag);
}

export function ImmNotifyIME(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  dwAction: NOTIFY_IME_ACTION /* Windows.Win32.UI.Input.Ime.NOTIFY_IME_ACTION */,
  dwIndex: NOTIFY_IME_INDEX /* Windows.Win32.UI.Input.Ime.NOTIFY_IME_INDEX */,
  dwValue: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmNotifyIME(util.toPointer(param0), dwAction, dwIndex, dwValue));
}

export function ImmGetStatusWindowPos(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpptPos: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetStatusWindowPos(util.toPointer(param0), util.toPointer(lpptPos)));
}

export function ImmSetStatusWindowPos(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpptPos: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetStatusWindowPos(util.toPointer(param0), util.toPointer(lpptPos)));
}

export function ImmGetCompositionWindow(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpCompForm: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetCompositionWindow(util.toPointer(param0), util.toPointer(lpCompForm)));
}

export function ImmSetCompositionWindow(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpCompForm: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetCompositionWindow(util.toPointer(param0), util.toPointer(lpCompForm)));
}

export function ImmGetCandidateWindow(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: number /* u32 */,
  lpCandidate: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetCandidateWindow(util.toPointer(param0), param1, util.toPointer(lpCandidate)));
}

export function ImmSetCandidateWindow(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  lpCandidate: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetCandidateWindow(util.toPointer(param0), util.toPointer(lpCandidate)));
}

export function ImmIsUIMessageA(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: number /* u32 */,
  param2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmIsUIMessageA(util.hwndToFfi(param0), param1, util.toPointer(param2), util.toPointer(param3)));
}

export function ImmIsUIMessageW(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: number /* u32 */,
  param2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmIsUIMessageW(util.hwndToFfi(param0), param1, util.toPointer(param2), util.toPointer(param3)));
}

export function ImmGetVirtualKey(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetVirtualKey(util.hwndToFfi(param0));
}

export function ImmRegisterWordA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszReading: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: number /* u32 */,
  lpszRegister: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmRegisterWordA(util.toPointer(param0), util.pstrToFfi(lpszReading), param2, util.pstrToFfi(lpszRegister)));
}

export function ImmRegisterWordW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszReading: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* u32 */,
  lpszRegister: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmRegisterWordW(util.toPointer(param0), util.pwstrToFfi(lpszReading), param2, util.pwstrToFfi(lpszRegister)));
}

export function ImmUnregisterWordA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszReading: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param2: number /* u32 */,
  lpszUnregister: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmUnregisterWordA(util.toPointer(param0), util.pstrToFfi(lpszReading), param2, util.pstrToFfi(lpszUnregister)));
}

export function ImmUnregisterWordW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  lpszReading: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param2: number /* u32 */,
  lpszUnregister: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmUnregisterWordW(util.toPointer(param0), util.pwstrToFfi(lpszReading), param2, util.pwstrToFfi(lpszUnregister)));
}

export function ImmGetRegisterWordStyleA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  nItem: number /* u32 */,
  lpStyleBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetRegisterWordStyleA(util.toPointer(param0), nItem, util.toPointer(lpStyleBuf));
}

export function ImmGetRegisterWordStyleW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  nItem: number /* u32 */,
  lpStyleBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetRegisterWordStyleW(util.toPointer(param0), nItem, util.toPointer(lpStyleBuf));
}

export function ImmEnumRegisterWordA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Input.Ime.REGISTERWORDENUMPROCA */,
  lpszReading: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param3: number /* u32 */,
  lpszRegister: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libIMM32_dll.ImmEnumRegisterWordA(util.toPointer(param0), util.toPointer(param1), util.pstrToFfi(lpszReading), param3, util.pstrToFfi(lpszRegister), util.toPointer(param5));
}

export function ImmEnumRegisterWordW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Input.Ime.REGISTERWORDENUMPROCW */,
  lpszReading: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param3: number /* u32 */,
  lpszRegister: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  param5: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libIMM32_dll.ImmEnumRegisterWordW(util.toPointer(param0), util.toPointer(param1), util.pwstrToFfi(lpszReading), param3, util.pwstrToFfi(lpszRegister), util.toPointer(param5));
}

export function ImmDisableIME(
  param0: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmDisableIME(param0));
}

export function ImmEnumInputContext(
  idThread: number /* u32 */,
  lpfn: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Input.Ime.IMCENUMPROC */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmEnumInputContext(idThread, util.toPointer(lpfn), util.toPointer(lParam)));
}

export function ImmGetImeMenuItemsA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  lpImeParentMenu: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpImeMenu: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetImeMenuItemsA(util.toPointer(param0), param1, param2, util.toPointer(lpImeParentMenu), util.toPointer(lpImeMenu), dwSize);
}

export function ImmGetImeMenuItemsW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  lpImeParentMenu: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpImeMenu: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSize: number /* u32 */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetImeMenuItemsW(util.toPointer(param0), param1, param2, util.toPointer(lpImeParentMenu), util.toPointer(lpImeMenu), dwSize);
}

export function ImmDisableTextFrameService(
  idThread: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmDisableTextFrameService(idThread));
}

export function ImmDisableLegacyIME(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmDisableLegacyIME());
}

export function ImmGetHotKey(
  param0: number /* u32 */,
  lpuModifiers: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpuVKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  phKL: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGetHotKey(param0, util.toPointer(lpuModifiers), util.toPointer(lpuVKey), util.toPointer(phKL)));
}

export function ImmSetHotKey(
  param0: number /* u32 */,
  param1: number /* u32 */,
  param2: number /* u32 */,
  param3: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TextServices.HKL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmSetHotKey(param0, param1, param2, util.toPointer(param3)));
}

export function ImmGenerateMessage(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmGenerateMessage(util.toPointer(param0)));
}

export function ImmRequestMessageA(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  param2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libIMM32_dll.ImmRequestMessageA(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function ImmRequestMessageW(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
  param1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  param2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libIMM32_dll.ImmRequestMessageW(util.toPointer(param0), util.toPointer(param1), util.toPointer(param2)));
}

export function ImmCreateSoftKeyboard(
  param0: number /* u32 */,
  param1: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param2: number /* i32 */,
  param3: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */ {
  return util.hwndFromFfi(libIMM32_dll.ImmCreateSoftKeyboard(param0, util.hwndToFfi(param1), param2, param3));
}

export function ImmDestroySoftKeyboard(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmDestroySoftKeyboard(util.hwndToFfi(param0)));
}

export function ImmShowSoftKeyboard(
  param0: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  param1: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmShowSoftKeyboard(util.hwndToFfi(param0), param1));
}

export function ImmLockIMC(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libIMM32_dll.ImmLockIMC(util.toPointer(param0)));
}

export function ImmUnlockIMC(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmUnlockIMC(util.toPointer(param0)));
}

export function ImmGetIMCLockCount(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMC */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetIMCLockCount(util.toPointer(param0));
}

export function ImmCreateIMCC(
  param0: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */ {
  return util.pointerFromFfi(libIMM32_dll.ImmCreateIMCC(param0));
}

export function ImmDestroyIMCC(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */,
): Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */ {
  return util.pointerFromFfi(libIMM32_dll.ImmDestroyIMCC(util.toPointer(param0)));
}

export function ImmLockIMCC(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libIMM32_dll.ImmLockIMCC(util.toPointer(param0)));
}

export function ImmUnlockIMCC(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libIMM32_dll.ImmUnlockIMCC(util.toPointer(param0)));
}

export function ImmGetIMCCLockCount(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetIMCCLockCount(util.toPointer(param0));
}

export function ImmReSizeIMCC(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */,
  param1: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */ {
  return util.pointerFromFfi(libIMM32_dll.ImmReSizeIMCC(util.toPointer(param0), param1));
}

export function ImmGetIMCCSize(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Globalization.HIMCC */,
): number /* u32 */ {
  return libIMM32_dll.ImmGetIMCCSize(util.toPointer(param0));
}

