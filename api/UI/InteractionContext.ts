/// Auto-generated by Deno Win32: Windows.Win32.UI.InteractionContext.Apis

import * as util from "../../util.ts";

// Enums
export type INTERACTION_ID = number;
export type INTERACTION_FLAGS = number;
export type INTERACTION_CONFIGURATION_FLAGS = number;
export type INERTIA_PARAMETER = number;
export type INTERACTION_STATE = number;
export type INTERACTION_CONTEXT_PROPERTY = number;
export type CROSS_SLIDE_THRESHOLD = number;
export type CROSS_SLIDE_FLAGS = number;
export type MOUSE_WHEEL_PARAMETER = number;
export type TAP_PARAMETER = number;
export type HOLD_PARAMETER = number;
export type TRANSLATION_PARAMETER = number;
export type MANIPULATION_RAILS_STATE = number;
export type POINTER_INPUT_TYPE = number;

// Constants
export const INTERACTION_ID_NONE = 0;
export const INTERACTION_ID_MANIPULATION = 1;
export const INTERACTION_ID_TAP = 2;
export const INTERACTION_ID_SECONDARY_TAP = 3;
export const INTERACTION_ID_HOLD = 4;
export const INTERACTION_ID_DRAG = 5;
export const INTERACTION_ID_CROSS_SLIDE = 6;
export const INTERACTION_ID_MAX = "-1";
export const INTERACTION_FLAG_NONE = 0;
export const INTERACTION_FLAG_BEGIN = 1;
export const INTERACTION_FLAG_END = 2;
export const INTERACTION_FLAG_CANCEL = 4;
export const INTERACTION_FLAG_INERTIA = 8;
export const INTERACTION_FLAG_MAX = 4294967295;
export const INTERACTION_CONFIGURATION_FLAG_NONE = 0;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION = 1;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_X = 2;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_Y = 4;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION = 8;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING = 16;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_TRANSLATION_INERTIA = 32;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_ROTATION_INERTIA = 64;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_SCALING_INERTIA = 128;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_X = 256;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_RAILS_Y = 512;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_EXACT = 1024;
export const INTERACTION_CONFIGURATION_FLAG_MANIPULATION_MULTIPLE_FINGER_PANNING = 2048;
export const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE = 1;
export const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_HORIZONTAL = 2;
export const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SELECT = 4;
export const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_SPEED_BUMP = 8;
export const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_REARRANGE = 16;
export const INTERACTION_CONFIGURATION_FLAG_CROSS_SLIDE_EXACT = 32;
export const INTERACTION_CONFIGURATION_FLAG_TAP = 1;
export const INTERACTION_CONFIGURATION_FLAG_TAP_DOUBLE = 2;
export const INTERACTION_CONFIGURATION_FLAG_TAP_MULTIPLE_FINGER = 4;
export const INTERACTION_CONFIGURATION_FLAG_SECONDARY_TAP = 1;
export const INTERACTION_CONFIGURATION_FLAG_HOLD = 1;
export const INTERACTION_CONFIGURATION_FLAG_HOLD_MOUSE = 2;
export const INTERACTION_CONFIGURATION_FLAG_HOLD_MULTIPLE_FINGER = 4;
export const INTERACTION_CONFIGURATION_FLAG_DRAG = 1;
export const INTERACTION_CONFIGURATION_FLAG_MAX = 4294967295;
export const INERTIA_PARAMETER_TRANSLATION_DECELERATION = 1;
export const INERTIA_PARAMETER_TRANSLATION_DISPLACEMENT = 2;
export const INERTIA_PARAMETER_ROTATION_DECELERATION = 3;
export const INERTIA_PARAMETER_ROTATION_ANGLE = 4;
export const INERTIA_PARAMETER_EXPANSION_DECELERATION = 5;
export const INERTIA_PARAMETER_EXPANSION_EXPANSION = 6;
export const INERTIA_PARAMETER_MAX = "-1";
export const INTERACTION_STATE_IDLE = 0;
export const INTERACTION_STATE_IN_INTERACTION = 1;
export const INTERACTION_STATE_POSSIBLE_DOUBLE_TAP = 2;
export const INTERACTION_STATE_MAX = "-1";
export const INTERACTION_CONTEXT_PROPERTY_MEASUREMENT_UNITS = 1;
export const INTERACTION_CONTEXT_PROPERTY_INTERACTION_UI_FEEDBACK = 2;
export const INTERACTION_CONTEXT_PROPERTY_FILTER_POINTERS = 3;
export const INTERACTION_CONTEXT_PROPERTY_MAX = "-1";
export const CROSS_SLIDE_THRESHOLD_SELECT_START = 0;
export const CROSS_SLIDE_THRESHOLD_SPEED_BUMP_START = 1;
export const CROSS_SLIDE_THRESHOLD_SPEED_BUMP_END = 2;
export const CROSS_SLIDE_THRESHOLD_REARRANGE_START = 3;
export const CROSS_SLIDE_THRESHOLD_COUNT = 4;
export const CROSS_SLIDE_THRESHOLD_MAX = "-1";
export const CROSS_SLIDE_FLAGS_NONE = 0;
export const CROSS_SLIDE_FLAGS_SELECT = 1;
export const CROSS_SLIDE_FLAGS_SPEED_BUMP = 2;
export const CROSS_SLIDE_FLAGS_REARRANGE = 4;
export const CROSS_SLIDE_FLAGS_MAX = 4294967295;
export const MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_X = 1;
export const MOUSE_WHEEL_PARAMETER_CHAR_TRANSLATION_Y = 2;
export const MOUSE_WHEEL_PARAMETER_DELTA_SCALE = 3;
export const MOUSE_WHEEL_PARAMETER_DELTA_ROTATION = 4;
export const MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_X = 5;
export const MOUSE_WHEEL_PARAMETER_PAGE_TRANSLATION_Y = 6;
export const MOUSE_WHEEL_PARAMETER_MAX = "-1";
export const TAP_PARAMETER_MIN_CONTACT_COUNT = 0;
export const TAP_PARAMETER_MAX_CONTACT_COUNT = 1;
export const TAP_PARAMETER_MAX = "-1";
export const HOLD_PARAMETER_MIN_CONTACT_COUNT = 0;
export const HOLD_PARAMETER_MAX_CONTACT_COUNT = 1;
export const HOLD_PARAMETER_THRESHOLD_RADIUS = 2;
export const HOLD_PARAMETER_THRESHOLD_START_DELAY = 3;
export const HOLD_PARAMETER_MAX = "-1";
export const TRANSLATION_PARAMETER_MIN_CONTACT_COUNT = 0;
export const TRANSLATION_PARAMETER_MAX_CONTACT_COUNT = 1;
export const TRANSLATION_PARAMETER_MAX = "-1";
export const MANIPULATION_RAILS_STATE_UNDECIDED = 0;
export const MANIPULATION_RAILS_STATE_FREE = 1;
export const MANIPULATION_RAILS_STATE_RAILED = 2;
export const MANIPULATION_RAILS_STATE_MAX = "-1";
export const PT_POINTER = 1;
export const PT_TOUCH = 2;
export const PT_PEN = 3;
export const PT_MOUSE = 4;
export const PT_TOUCHPAD = 5;

// Structs

export type HINTERACTIONCONTEXT = Deno.PointerValue;

/**
 * Windows.Win32.UI.InteractionContext.MANIPULATION_TRANSFORM (size: 24)
 */
export interface MANIPULATION_TRANSFORM {
  /** f32 */
  translationX: number;
  /** f32 */
  translationY: number;
  /** f32 */
  scale: number;
  /** f32 */
  expansion: number;
  /** f32 */
  rotation: number;
}

export const sizeofMANIPULATION_TRANSFORM = 24;

export function allocMANIPULATION_TRANSFORM(data?: Partial<MANIPULATION_TRANSFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofMANIPULATION_TRANSFORM);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.translationX !== undefined) view.setFloat32(0, Number(data.translationX), true);
  // 0x04: f32
  if (data?.translationY !== undefined) view.setFloat32(4, Number(data.translationY), true);
  // 0x08: f32
  if (data?.scale !== undefined) view.setFloat32(8, Number(data.scale), true);
  // 0x0c: f32
  if (data?.expansion !== undefined) view.setFloat32(12, Number(data.expansion), true);
  // 0x10: f32
  if (data?.rotation !== undefined) view.setFloat32(16, Number(data.rotation), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.MANIPULATION_VELOCITY (size: 16)
 */
export interface MANIPULATION_VELOCITY {
  /** f32 */
  velocityX: number;
  /** f32 */
  velocityY: number;
  /** f32 */
  velocityExpansion: number;
  /** f32 */
  velocityAngular: number;
}

export const sizeofMANIPULATION_VELOCITY = 16;

export function allocMANIPULATION_VELOCITY(data?: Partial<MANIPULATION_VELOCITY>): Uint8Array {
  const buf = new Uint8Array(sizeofMANIPULATION_VELOCITY);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.velocityX !== undefined) view.setFloat32(0, Number(data.velocityX), true);
  // 0x04: f32
  if (data?.velocityY !== undefined) view.setFloat32(4, Number(data.velocityY), true);
  // 0x08: f32
  if (data?.velocityExpansion !== undefined) view.setFloat32(8, Number(data.velocityExpansion), true);
  // 0x0c: f32
  if (data?.velocityAngular !== undefined) view.setFloat32(12, Number(data.velocityAngular), true);
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.INTERACTION_ARGUMENTS_MANIPULATION (size: 32)
 */
export interface INTERACTION_ARGUMENTS_MANIPULATION {
  /** Windows.Win32.UI.InteractionContext.MANIPULATION_TRANSFORM */
  delta: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.InteractionContext.MANIPULATION_TRANSFORM */
  cumulative: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.InteractionContext.MANIPULATION_VELOCITY */
  velocity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.InteractionContext.MANIPULATION_RAILS_STATE */
  railsState: MANIPULATION_RAILS_STATE;
}

export const sizeofINTERACTION_ARGUMENTS_MANIPULATION = 32;

export function allocINTERACTION_ARGUMENTS_MANIPULATION(data?: Partial<INTERACTION_ARGUMENTS_MANIPULATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERACTION_ARGUMENTS_MANIPULATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.delta !== undefined) view.setBigUint64(0, data.delta === null ? 0n : BigInt(util.toPointer(data.delta)), true);
  // 0x08: pointer
  if (data?.cumulative !== undefined) view.setBigUint64(8, data.cumulative === null ? 0n : BigInt(util.toPointer(data.cumulative)), true);
  // 0x10: pointer
  if (data?.velocity !== undefined) view.setBigUint64(16, data.velocity === null ? 0n : BigInt(util.toPointer(data.velocity)), true);
  // 0x18: i32
  if (data?.railsState !== undefined) view.setInt32(24, Number(data.railsState), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.INTERACTION_ARGUMENTS_TAP (size: 8)
 */
export interface INTERACTION_ARGUMENTS_TAP {
  /** u32 */
  count: number;
}

export const sizeofINTERACTION_ARGUMENTS_TAP = 8;

export function allocINTERACTION_ARGUMENTS_TAP(data?: Partial<INTERACTION_ARGUMENTS_TAP>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERACTION_ARGUMENTS_TAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.INTERACTION_ARGUMENTS_CROSS_SLIDE (size: 8)
 */
export interface INTERACTION_ARGUMENTS_CROSS_SLIDE {
  /** Windows.Win32.UI.InteractionContext.CROSS_SLIDE_FLAGS */
  flags: CROSS_SLIDE_FLAGS;
}

export const sizeofINTERACTION_ARGUMENTS_CROSS_SLIDE = 8;

export function allocINTERACTION_ARGUMENTS_CROSS_SLIDE(data?: Partial<INTERACTION_ARGUMENTS_CROSS_SLIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERACTION_ARGUMENTS_CROSS_SLIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * _arguments_e__Union (size: 24)
 */
export interface _arguments_e__Union {
  /** Windows.Win32.UI.InteractionContext.INTERACTION_ARGUMENTS_MANIPULATION */
  manipulation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.InteractionContext.INTERACTION_ARGUMENTS_TAP */
  tap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.InteractionContext.INTERACTION_ARGUMENTS_CROSS_SLIDE */
  crossSlide: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_arguments_e__Union = 24;

export function alloc_arguments_e__Union(data?: Partial<_arguments_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_arguments_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.manipulation !== undefined) view.setBigUint64(0, data.manipulation === null ? 0n : BigInt(util.toPointer(data.manipulation)), true);
  // 0x08: pointer
  if (data?.tap !== undefined) view.setBigUint64(8, data.tap === null ? 0n : BigInt(util.toPointer(data.tap)), true);
  // 0x10: pointer
  if (data?.crossSlide !== undefined) view.setBigUint64(16, data.crossSlide === null ? 0n : BigInt(util.toPointer(data.crossSlide)), true);
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_OUTPUT (size: 32)
 */
export interface INTERACTION_CONTEXT_OUTPUT {
  /** Windows.Win32.UI.InteractionContext.INTERACTION_ID */
  interactionId: INTERACTION_ID;
  /** Windows.Win32.UI.InteractionContext.INTERACTION_FLAGS */
  interactionFlags: INTERACTION_FLAGS;
  /** Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */
  inputType: POINTER_INPUT_TYPE;
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** _arguments_e__Union */
  arguments: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERACTION_CONTEXT_OUTPUT = 32;

export function allocINTERACTION_CONTEXT_OUTPUT(data?: Partial<INTERACTION_CONTEXT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERACTION_CONTEXT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.interactionId !== undefined) view.setInt32(0, Number(data.interactionId), true);
  // 0x04: u32
  if (data?.interactionFlags !== undefined) view.setUint32(4, Number(data.interactionFlags), true);
  // 0x08: i32
  if (data?.inputType !== undefined) view.setInt32(8, Number(data.inputType), true);
  // 0x0c: f32
  if (data?.x !== undefined) view.setFloat32(12, Number(data.x), true);
  // 0x10: f32
  if (data?.y !== undefined) view.setFloat32(16, Number(data.y), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.arguments !== undefined) view.setBigUint64(24, data.arguments === null ? 0n : BigInt(util.toPointer(data.arguments)), true);
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_OUTPUT2 (size: 40)
 */
export interface INTERACTION_CONTEXT_OUTPUT2 {
  /** Windows.Win32.UI.InteractionContext.INTERACTION_ID */
  interactionId: INTERACTION_ID;
  /** Windows.Win32.UI.InteractionContext.INTERACTION_FLAGS */
  interactionFlags: INTERACTION_FLAGS;
  /** Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */
  inputType: POINTER_INPUT_TYPE;
  /** u32 */
  contactCount: number;
  /** u32 */
  currentContactCount: number;
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** _arguments_e__Union */
  arguments: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERACTION_CONTEXT_OUTPUT2 = 40;

export function allocINTERACTION_CONTEXT_OUTPUT2(data?: Partial<INTERACTION_CONTEXT_OUTPUT2>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERACTION_CONTEXT_OUTPUT2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.interactionId !== undefined) view.setInt32(0, Number(data.interactionId), true);
  // 0x04: u32
  if (data?.interactionFlags !== undefined) view.setUint32(4, Number(data.interactionFlags), true);
  // 0x08: i32
  if (data?.inputType !== undefined) view.setInt32(8, Number(data.inputType), true);
  // 0x0c: u32
  if (data?.contactCount !== undefined) view.setUint32(12, Number(data.contactCount), true);
  // 0x10: u32
  if (data?.currentContactCount !== undefined) view.setUint32(16, Number(data.currentContactCount), true);
  // 0x14: f32
  if (data?.x !== undefined) view.setFloat32(20, Number(data.x), true);
  // 0x18: f32
  if (data?.y !== undefined) view.setFloat32(24, Number(data.y), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.arguments !== undefined) view.setBigUint64(32, data.arguments === null ? 0n : BigInt(util.toPointer(data.arguments)), true);
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_CONFIGURATION (size: 8)
 */
export interface INTERACTION_CONTEXT_CONFIGURATION {
  /** Windows.Win32.UI.InteractionContext.INTERACTION_ID */
  interactionId: INTERACTION_ID;
  /** Windows.Win32.UI.InteractionContext.INTERACTION_CONFIGURATION_FLAGS */
  enable: INTERACTION_CONFIGURATION_FLAGS;
}

export const sizeofINTERACTION_CONTEXT_CONFIGURATION = 8;

export function allocINTERACTION_CONTEXT_CONFIGURATION(data?: Partial<INTERACTION_CONTEXT_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERACTION_CONTEXT_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.interactionId !== undefined) view.setInt32(0, Number(data.interactionId), true);
  // 0x04: u32
  if (data?.enable !== undefined) view.setUint32(4, Number(data.enable), true);
  return buf;
}

/**
 * Windows.Win32.UI.InteractionContext.CROSS_SLIDE_PARAMETER (size: 8)
 */
export interface CROSS_SLIDE_PARAMETER {
  /** Windows.Win32.UI.InteractionContext.CROSS_SLIDE_THRESHOLD */
  threshold: CROSS_SLIDE_THRESHOLD;
  /** f32 */
  distance: number;
}

export const sizeofCROSS_SLIDE_PARAMETER = 8;

export function allocCROSS_SLIDE_PARAMETER(data?: Partial<CROSS_SLIDE_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofCROSS_SLIDE_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.threshold !== undefined) view.setInt32(0, Number(data.threshold), true);
  // 0x04: f32
  if (data?.distance !== undefined) view.setFloat32(4, Number(data.distance), true);
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libNInput = Deno.dlopen("NInput", {
    CreateInteractionContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DestroyInteractionContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    RegisterOutputCallbackInteractionContext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RegisterOutputCallbackInteractionContext2: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    SetInteractionConfigurationInteractionContext: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetInteractionConfigurationInteractionContext: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    SetPropertyInteractionContext: {
      parameters: ["pointer", "i32", "u32"],
      result: "pointer",
    },
    GetPropertyInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SetInertiaParameterInteractionContext: {
      parameters: ["pointer", "i32", "f32"],
      result: "pointer",
    },
    GetInertiaParameterInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SetCrossSlideParametersInteractionContext: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    GetCrossSlideParameterInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SetTapParameterInteractionContext: {
      parameters: ["pointer", "i32", "f32"],
      result: "pointer",
    },
    GetTapParameterInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SetHoldParameterInteractionContext: {
      parameters: ["pointer", "i32", "f32"],
      result: "pointer",
    },
    GetHoldParameterInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SetTranslationParameterInteractionContext: {
      parameters: ["pointer", "i32", "f32"],
      result: "pointer",
    },
    GetTranslationParameterInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    SetMouseWheelParameterInteractionContext: {
      parameters: ["pointer", "i32", "f32"],
      result: "pointer",
    },
    GetMouseWheelParameterInteractionContext: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    ResetInteractionContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetStateInteractionContext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AddPointerInteractionContext: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    RemovePointerInteractionContext: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ProcessPointerFramesInteractionContext: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    BufferPointerPacketsInteractionContext: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ProcessBufferedPacketsInteractionContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ProcessInertiaInteractionContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    StopInteractionContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SetPivotInteractionContext: {
      parameters: ["pointer", "f32", "f32", "f32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreateInteractionContext(
  interactionContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.CreateInteractionContext(util.toPointer(interactionContext)));
}

export function DestroyInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.DestroyInteractionContext(util.toPointer(interactionContext)));
}

export function RegisterOutputCallbackInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  outputCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_OUTPUT_CALLBACK */,
  clientData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.RegisterOutputCallbackInteractionContext(util.toPointer(interactionContext), util.toPointer(outputCallback), util.toPointer(clientData)));
}

export function RegisterOutputCallbackInteractionContext2(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  outputCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_OUTPUT_CALLBACK2 */,
  clientData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.RegisterOutputCallbackInteractionContext2(util.toPointer(interactionContext), util.toPointer(outputCallback), util.toPointer(clientData)));
}

export function SetInteractionConfigurationInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  configurationCount: number /* u32 */,
  configuration: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetInteractionConfigurationInteractionContext(util.toPointer(interactionContext), configurationCount, util.toPointer(configuration)));
}

export function GetInteractionConfigurationInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  configurationCount: number /* u32 */,
  configuration: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetInteractionConfigurationInteractionContext(util.toPointer(interactionContext), configurationCount, util.toPointer(configuration)));
}

export function SetPropertyInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  contextProperty: INTERACTION_CONTEXT_PROPERTY /* Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_PROPERTY */,
  value: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetPropertyInteractionContext(util.toPointer(interactionContext), contextProperty, value));
}

export function GetPropertyInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  contextProperty: INTERACTION_CONTEXT_PROPERTY /* Windows.Win32.UI.InteractionContext.INTERACTION_CONTEXT_PROPERTY */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetPropertyInteractionContext(util.toPointer(interactionContext), contextProperty, util.toPointer(value)));
}

export function SetInertiaParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  inertiaParameter: INERTIA_PARAMETER /* Windows.Win32.UI.InteractionContext.INERTIA_PARAMETER */,
  value: number /* f32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetInertiaParameterInteractionContext(util.toPointer(interactionContext), inertiaParameter, value));
}

export function GetInertiaParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  inertiaParameter: INERTIA_PARAMETER /* Windows.Win32.UI.InteractionContext.INERTIA_PARAMETER */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetInertiaParameterInteractionContext(util.toPointer(interactionContext), inertiaParameter, util.toPointer(value)));
}

export function SetCrossSlideParametersInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameterCount: number /* u32 */,
  crossSlideParameters: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetCrossSlideParametersInteractionContext(util.toPointer(interactionContext), parameterCount, util.toPointer(crossSlideParameters)));
}

export function GetCrossSlideParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  threshold: CROSS_SLIDE_THRESHOLD /* Windows.Win32.UI.InteractionContext.CROSS_SLIDE_THRESHOLD */,
  distance: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetCrossSlideParameterInteractionContext(util.toPointer(interactionContext), threshold, util.toPointer(distance)));
}

export function SetTapParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: TAP_PARAMETER /* Windows.Win32.UI.InteractionContext.TAP_PARAMETER */,
  value: number /* f32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetTapParameterInteractionContext(util.toPointer(interactionContext), parameter, value));
}

export function GetTapParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: TAP_PARAMETER /* Windows.Win32.UI.InteractionContext.TAP_PARAMETER */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetTapParameterInteractionContext(util.toPointer(interactionContext), parameter, util.toPointer(value)));
}

export function SetHoldParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: HOLD_PARAMETER /* Windows.Win32.UI.InteractionContext.HOLD_PARAMETER */,
  value: number /* f32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetHoldParameterInteractionContext(util.toPointer(interactionContext), parameter, value));
}

export function GetHoldParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: HOLD_PARAMETER /* Windows.Win32.UI.InteractionContext.HOLD_PARAMETER */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetHoldParameterInteractionContext(util.toPointer(interactionContext), parameter, util.toPointer(value)));
}

export function SetTranslationParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: TRANSLATION_PARAMETER /* Windows.Win32.UI.InteractionContext.TRANSLATION_PARAMETER */,
  value: number /* f32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetTranslationParameterInteractionContext(util.toPointer(interactionContext), parameter, value));
}

export function GetTranslationParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: TRANSLATION_PARAMETER /* Windows.Win32.UI.InteractionContext.TRANSLATION_PARAMETER */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetTranslationParameterInteractionContext(util.toPointer(interactionContext), parameter, util.toPointer(value)));
}

export function SetMouseWheelParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: MOUSE_WHEEL_PARAMETER /* Windows.Win32.UI.InteractionContext.MOUSE_WHEEL_PARAMETER */,
  value: number /* f32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetMouseWheelParameterInteractionContext(util.toPointer(interactionContext), parameter, value));
}

export function GetMouseWheelParameterInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  parameter: MOUSE_WHEEL_PARAMETER /* Windows.Win32.UI.InteractionContext.MOUSE_WHEEL_PARAMETER */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetMouseWheelParameterInteractionContext(util.toPointer(interactionContext), parameter, util.toPointer(value)));
}

export function ResetInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.ResetInteractionContext(util.toPointer(interactionContext)));
}

export function GetStateInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  state: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.GetStateInteractionContext(util.toPointer(interactionContext), util.toPointer(pointerInfo), util.toPointer(state)));
}

export function AddPointerInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  pointerId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.AddPointerInteractionContext(util.toPointer(interactionContext), pointerId));
}

export function RemovePointerInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  pointerId: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.RemovePointerInteractionContext(util.toPointer(interactionContext), pointerId));
}

export function ProcessPointerFramesInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  entriesCount: number /* u32 */,
  pointerCount: number /* u32 */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.ProcessPointerFramesInteractionContext(util.toPointer(interactionContext), entriesCount, pointerCount, util.toPointer(pointerInfo)));
}

export function BufferPointerPacketsInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  entriesCount: number /* u32 */,
  pointerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.BufferPointerPacketsInteractionContext(util.toPointer(interactionContext), entriesCount, util.toPointer(pointerInfo)));
}

export function ProcessBufferedPacketsInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.ProcessBufferedPacketsInteractionContext(util.toPointer(interactionContext)));
}

export function ProcessInertiaInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.ProcessInertiaInteractionContext(util.toPointer(interactionContext)));
}

export function StopInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.StopInteractionContext(util.toPointer(interactionContext)));
}

export function SetPivotInteractionContext(
  interactionContext: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.InteractionContext.HINTERACTIONCONTEXT */,
  x: number /* f32 */,
  y: number /* f32 */,
  radius: number /* f32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libNInput.SetPivotInteractionContext(util.toPointer(interactionContext), x, y, radius));
}

