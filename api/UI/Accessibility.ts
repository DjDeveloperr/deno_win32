/// Auto-generated by Deno Win32: Windows.Win32.UI.Accessibility.Apis

import * as util from "../../util.ts";

// Enums
export type UIA_TEXTATTRIBUTE_ID = number;
export type UIA_CONTROLTYPE_ID = number;
export type UIA_ANNOTATIONTYPE = number;
export type UIA_STYLE_ID = number;
export type UIA_LANDMARKTYPE_ID = number;
export type UIA_HEADINGLEVEL_ID = number;
export type UIA_CHANGE_ID = number;
export type UIA_METADATA_ID = number;
export type STICKYKEYS_FLAGS = number;
export type SOUNDSENTRY_FLAGS = number;
export type ACC_UTILITY_STATE_FLAGS = number;
export type SOUND_SENTRY_GRAPHICS_EFFECT = number;
export type SERIALKEYS_FLAGS = number;
export type HIGHCONTRASTW_FLAGS = number;
export type SOUNDSENTRY_TEXT_EFFECT = number;
export type SOUNDSENTRY_WINDOWS_EFFECT = number;
export type UIA_PATTERN_ID = number;
export type UIA_EVENT_ID = number;
export type UIA_PROPERTY_ID = number;
export type AnnoScope = number;
export type NavigateDirection = number;
export type ProviderOptions = number;
export type StructureChangeType = number;
export type TextEditChangeType = number;
export type OrientationType = number;
export type DockPosition = number;
export type ExpandCollapseState = number;
export type ScrollAmount = number;
export type RowOrColumnMajor = number;
export type ToggleState = number;
export type WindowVisualState = number;
export type SynchronizedInputType = number;
export type WindowInteractionState = number;
export type SayAsInterpretAs = number;
export type TextUnit = number;
export type TextPatternRangeEndpoint = number;
export type SupportedTextSelection = number;
export type LiveSetting = number;
export type ActiveEnd = number;
export type CaretPosition = number;
export type CaretBidiMode = number;
export type ZoomUnit = number;
export type AnimationStyle = number;
export type BulletStyle = number;
export type CapStyle = number;
export type FillType = number;
export type FlowDirections = number;
export type HorizontalTextAlignment = number;
export type OutlineStyles = number;
export type TextDecorationLineStyle = number;
export type VisualEffects = number;
export type NotificationProcessing = number;
export type NotificationKind = number;
export type UIAutomationType = number;
export type TreeScope = number;
export type PropertyConditionFlags = number;
export type AutomationElementMode = number;
export type TreeTraversalOptions = number;
export type ConnectionRecoveryBehaviorOptions = number;
export type CoalesceEventsOptions = number;
export type ConditionType = number;
export type NormalizeState = number;
export type ProviderType = number;
export type AutomationIdentifierType = number;
export type EventArgsType = number;
export type AsyncContentLoadedState = number;
export type POINTER_INPUT_TYPE = number;

// Constants
export const UIA_AnimationStyleAttributeId = 40000;
export const UIA_BackgroundColorAttributeId = 40001;
export const UIA_BulletStyleAttributeId = 40002;
export const UIA_CapStyleAttributeId = 40003;
export const UIA_CultureAttributeId = 40004;
export const UIA_FontNameAttributeId = 40005;
export const UIA_FontSizeAttributeId = 40006;
export const UIA_FontWeightAttributeId = 40007;
export const UIA_ForegroundColorAttributeId = 40008;
export const UIA_HorizontalTextAlignmentAttributeId = 40009;
export const UIA_IndentationFirstLineAttributeId = 40010;
export const UIA_IndentationLeadingAttributeId = 40011;
export const UIA_IndentationTrailingAttributeId = 40012;
export const UIA_IsHiddenAttributeId = 40013;
export const UIA_IsItalicAttributeId = 40014;
export const UIA_IsReadOnlyAttributeId = 40015;
export const UIA_IsSubscriptAttributeId = 40016;
export const UIA_IsSuperscriptAttributeId = 40017;
export const UIA_MarginBottomAttributeId = 40018;
export const UIA_MarginLeadingAttributeId = 40019;
export const UIA_MarginTopAttributeId = 40020;
export const UIA_MarginTrailingAttributeId = 40021;
export const UIA_OutlineStylesAttributeId = 40022;
export const UIA_OverlineColorAttributeId = 40023;
export const UIA_OverlineStyleAttributeId = 40024;
export const UIA_StrikethroughColorAttributeId = 40025;
export const UIA_StrikethroughStyleAttributeId = 40026;
export const UIA_TabsAttributeId = 40027;
export const UIA_TextFlowDirectionsAttributeId = 40028;
export const UIA_UnderlineColorAttributeId = 40029;
export const UIA_UnderlineStyleAttributeId = 40030;
export const UIA_AnnotationTypesAttributeId = 40031;
export const UIA_AnnotationObjectsAttributeId = 40032;
export const UIA_StyleNameAttributeId = 40033;
export const UIA_StyleIdAttributeId = 40034;
export const UIA_LinkAttributeId = 40035;
export const UIA_IsActiveAttributeId = 40036;
export const UIA_SelectionActiveEndAttributeId = 40037;
export const UIA_CaretPositionAttributeId = 40038;
export const UIA_CaretBidiModeAttributeId = 40039;
export const UIA_LineSpacingAttributeId = 40040;
export const UIA_BeforeParagraphSpacingAttributeId = 40041;
export const UIA_AfterParagraphSpacingAttributeId = 40042;
export const UIA_SayAsInterpretAsAttributeId = 40043;
export const UIA_ButtonControlTypeId = 50000;
export const UIA_CalendarControlTypeId = 50001;
export const UIA_CheckBoxControlTypeId = 50002;
export const UIA_ComboBoxControlTypeId = 50003;
export const UIA_EditControlTypeId = 50004;
export const UIA_HyperlinkControlTypeId = 50005;
export const UIA_ImageControlTypeId = 50006;
export const UIA_ListItemControlTypeId = 50007;
export const UIA_ListControlTypeId = 50008;
export const UIA_MenuControlTypeId = 50009;
export const UIA_MenuBarControlTypeId = 50010;
export const UIA_MenuItemControlTypeId = 50011;
export const UIA_ProgressBarControlTypeId = 50012;
export const UIA_RadioButtonControlTypeId = 50013;
export const UIA_ScrollBarControlTypeId = 50014;
export const UIA_SliderControlTypeId = 50015;
export const UIA_SpinnerControlTypeId = 50016;
export const UIA_StatusBarControlTypeId = 50017;
export const UIA_TabControlTypeId = 50018;
export const UIA_TabItemControlTypeId = 50019;
export const UIA_TextControlTypeId = 50020;
export const UIA_ToolBarControlTypeId = 50021;
export const UIA_ToolTipControlTypeId = 50022;
export const UIA_TreeControlTypeId = 50023;
export const UIA_TreeItemControlTypeId = 50024;
export const UIA_CustomControlTypeId = 50025;
export const UIA_GroupControlTypeId = 50026;
export const UIA_ThumbControlTypeId = 50027;
export const UIA_DataGridControlTypeId = 50028;
export const UIA_DataItemControlTypeId = 50029;
export const UIA_DocumentControlTypeId = 50030;
export const UIA_SplitButtonControlTypeId = 50031;
export const UIA_WindowControlTypeId = 50032;
export const UIA_PaneControlTypeId = 50033;
export const UIA_HeaderControlTypeId = 50034;
export const UIA_HeaderItemControlTypeId = 50035;
export const UIA_TableControlTypeId = 50036;
export const UIA_TitleBarControlTypeId = 50037;
export const UIA_SeparatorControlTypeId = 50038;
export const UIA_SemanticZoomControlTypeId = 50039;
export const UIA_AppBarControlTypeId = 50040;
export const AnnotationType_Unknown = 60000;
export const AnnotationType_SpellingError = 60001;
export const AnnotationType_GrammarError = 60002;
export const AnnotationType_Comment = 60003;
export const AnnotationType_FormulaError = 60004;
export const AnnotationType_TrackChanges = 60005;
export const AnnotationType_Header = 60006;
export const AnnotationType_Footer = 60007;
export const AnnotationType_Highlighted = 60008;
export const AnnotationType_Endnote = 60009;
export const AnnotationType_Footnote = 60010;
export const AnnotationType_InsertionChange = 60011;
export const AnnotationType_DeletionChange = 60012;
export const AnnotationType_MoveChange = 60013;
export const AnnotationType_FormatChange = 60014;
export const AnnotationType_UnsyncedChange = 60015;
export const AnnotationType_EditingLockedChange = 60016;
export const AnnotationType_ExternalChange = 60017;
export const AnnotationType_ConflictingChange = 60018;
export const AnnotationType_Author = 60019;
export const AnnotationType_AdvancedProofingIssue = 60020;
export const AnnotationType_DataValidationError = 60021;
export const AnnotationType_CircularReferenceError = 60022;
export const AnnotationType_Mathematics = 60023;
export const AnnotationType_Sensitive = 60024;
export const StyleId_Custom = 70000;
export const StyleId_Heading1 = 70001;
export const StyleId_Heading2 = 70002;
export const StyleId_Heading3 = 70003;
export const StyleId_Heading4 = 70004;
export const StyleId_Heading5 = 70005;
export const StyleId_Heading6 = 70006;
export const StyleId_Heading7 = 70007;
export const StyleId_Heading8 = 70008;
export const StyleId_Heading9 = 70009;
export const StyleId_Title = 70010;
export const StyleId_Subtitle = 70011;
export const StyleId_Normal = 70012;
export const StyleId_Emphasis = 70013;
export const StyleId_Quote = 70014;
export const StyleId_BulletedList = 70015;
export const StyleId_NumberedList = 70016;
export const UIA_CustomLandmarkTypeId = 80000;
export const UIA_FormLandmarkTypeId = 80001;
export const UIA_MainLandmarkTypeId = 80002;
export const UIA_NavigationLandmarkTypeId = 80003;
export const UIA_SearchLandmarkTypeId = 80004;
export const HeadingLevel_None = 80050;
export const HeadingLevel1 = 80051;
export const HeadingLevel2 = 80052;
export const HeadingLevel3 = 80053;
export const HeadingLevel4 = 80054;
export const HeadingLevel5 = 80055;
export const HeadingLevel6 = 80056;
export const HeadingLevel7 = 80057;
export const HeadingLevel8 = 80058;
export const HeadingLevel9 = 80059;
export const UIA_SummaryChangeId = 90000;
export const UIA_SayAsInterpretAsMetadataId = 100000;
export const SKF_STICKYKEYSON = 1;
export const SKF_AVAILABLE = 2;
export const SKF_HOTKEYACTIVE = 4;
export const SKF_CONFIRMHOTKEY = 8;
export const SKF_HOTKEYSOUND = 16;
export const SKF_INDICATOR = 32;
export const SKF_AUDIBLEFEEDBACK = 64;
export const SKF_TRISTATE = 128;
export const SKF_TWOKEYSOFF = 256;
export const SKF_LALTLATCHED = 268435456;
export const SKF_LCTLLATCHED = 67108864;
export const SKF_LSHIFTLATCHED = 16777216;
export const SKF_RALTLATCHED = 536870912;
export const SKF_RCTLLATCHED = 134217728;
export const SKF_RSHIFTLATCHED = 33554432;
export const SKF_LWINLATCHED = 1073741824;
export const SKF_RWINLATCHED = 2147483648;
export const SKF_LALTLOCKED = 1048576;
export const SKF_LCTLLOCKED = 262144;
export const SKF_LSHIFTLOCKED = 65536;
export const SKF_RALTLOCKED = 2097152;
export const SKF_RCTLLOCKED = 524288;
export const SKF_RSHIFTLOCKED = 131072;
export const SKF_LWINLOCKED = 4194304;
export const SKF_RWINLOCKED = 8388608;
export const SSF_SOUNDSENTRYON = 1;
export const SSF_AVAILABLE = 2;
export const SSF_INDICATOR = 4;
export const ANRUS_ON_SCREEN_KEYBOARD_ACTIVE = 1;
export const ANRUS_TOUCH_MODIFICATION_ACTIVE = 2;
export const ANRUS_PRIORITY_AUDIO_ACTIVE = 4;
export const ANRUS_PRIORITY_AUDIO_ACTIVE_NODUCK = 8;
export const SSGF_DISPLAY = 3;
export const SSGF_NONE = 0;
export const SERKF_AVAILABLE = 2;
export const SERKF_INDICATOR = 4;
export const SERKF_SERIALKEYSON = 1;
export const HCF_HIGHCONTRASTON = 1;
export const HCF_AVAILABLE = 2;
export const HCF_HOTKEYACTIVE = 4;
export const HCF_CONFIRMHOTKEY = 8;
export const HCF_HOTKEYSOUND = 16;
export const HCF_INDICATOR = 32;
export const HCF_HOTKEYAVAILABLE = 64;
export const HCF_OPTION_NOTHEMECHANGE = 4096;
export const SSTF_BORDER = 2;
export const SSTF_CHARS = 1;
export const SSTF_DISPLAY = 3;
export const SSTF_NONE = 0;
export const SSWF_CUSTOM = 4;
export const SSWF_DISPLAY = 3;
export const SSWF_NONE = 0;
export const SSWF_TITLE = 1;
export const SSWF_WINDOW = 2;
export const UIA_InvokePatternId = 10000;
export const UIA_SelectionPatternId = 10001;
export const UIA_ValuePatternId = 10002;
export const UIA_RangeValuePatternId = 10003;
export const UIA_ScrollPatternId = 10004;
export const UIA_ExpandCollapsePatternId = 10005;
export const UIA_GridPatternId = 10006;
export const UIA_GridItemPatternId = 10007;
export const UIA_MultipleViewPatternId = 10008;
export const UIA_WindowPatternId = 10009;
export const UIA_SelectionItemPatternId = 10010;
export const UIA_DockPatternId = 10011;
export const UIA_TablePatternId = 10012;
export const UIA_TableItemPatternId = 10013;
export const UIA_TextPatternId = 10014;
export const UIA_TogglePatternId = 10015;
export const UIA_TransformPatternId = 10016;
export const UIA_ScrollItemPatternId = 10017;
export const UIA_LegacyIAccessiblePatternId = 10018;
export const UIA_ItemContainerPatternId = 10019;
export const UIA_VirtualizedItemPatternId = 10020;
export const UIA_SynchronizedInputPatternId = 10021;
export const UIA_ObjectModelPatternId = 10022;
export const UIA_AnnotationPatternId = 10023;
export const UIA_TextPattern2Id = 10024;
export const UIA_StylesPatternId = 10025;
export const UIA_SpreadsheetPatternId = 10026;
export const UIA_SpreadsheetItemPatternId = 10027;
export const UIA_TransformPattern2Id = 10028;
export const UIA_TextChildPatternId = 10029;
export const UIA_DragPatternId = 10030;
export const UIA_DropTargetPatternId = 10031;
export const UIA_TextEditPatternId = 10032;
export const UIA_CustomNavigationPatternId = 10033;
export const UIA_SelectionPattern2Id = 10034;
export const UIA_ToolTipOpenedEventId = 20000;
export const UIA_ToolTipClosedEventId = 20001;
export const UIA_StructureChangedEventId = 20002;
export const UIA_MenuOpenedEventId = 20003;
export const UIA_AutomationPropertyChangedEventId = 20004;
export const UIA_AutomationFocusChangedEventId = 20005;
export const UIA_AsyncContentLoadedEventId = 20006;
export const UIA_MenuClosedEventId = 20007;
export const UIA_LayoutInvalidatedEventId = 20008;
export const UIA_Invoke_InvokedEventId = 20009;
export const UIA_SelectionItem_ElementAddedToSelectionEventId = 20010;
export const UIA_SelectionItem_ElementRemovedFromSelectionEventId = 20011;
export const UIA_SelectionItem_ElementSelectedEventId = 20012;
export const UIA_Selection_InvalidatedEventId = 20013;
export const UIA_Text_TextSelectionChangedEventId = 20014;
export const UIA_Text_TextChangedEventId = 20015;
export const UIA_Window_WindowOpenedEventId = 20016;
export const UIA_Window_WindowClosedEventId = 20017;
export const UIA_MenuModeStartEventId = 20018;
export const UIA_MenuModeEndEventId = 20019;
export const UIA_InputReachedTargetEventId = 20020;
export const UIA_InputReachedOtherElementEventId = 20021;
export const UIA_InputDiscardedEventId = 20022;
export const UIA_SystemAlertEventId = 20023;
export const UIA_LiveRegionChangedEventId = 20024;
export const UIA_HostedFragmentRootsInvalidatedEventId = 20025;
export const UIA_Drag_DragStartEventId = 20026;
export const UIA_Drag_DragCancelEventId = 20027;
export const UIA_Drag_DragCompleteEventId = 20028;
export const UIA_DropTarget_DragEnterEventId = 20029;
export const UIA_DropTarget_DragLeaveEventId = 20030;
export const UIA_DropTarget_DroppedEventId = 20031;
export const UIA_TextEdit_TextChangedEventId = 20032;
export const UIA_TextEdit_ConversionTargetChangedEventId = 20033;
export const UIA_ChangesEventId = 20034;
export const UIA_NotificationEventId = 20035;
export const UIA_ActiveTextPositionChangedEventId = 20036;
export const UIA_RuntimeIdPropertyId = 30000;
export const UIA_BoundingRectanglePropertyId = 30001;
export const UIA_ProcessIdPropertyId = 30002;
export const UIA_ControlTypePropertyId = 30003;
export const UIA_LocalizedControlTypePropertyId = 30004;
export const UIA_NamePropertyId = 30005;
export const UIA_AcceleratorKeyPropertyId = 30006;
export const UIA_AccessKeyPropertyId = 30007;
export const UIA_HasKeyboardFocusPropertyId = 30008;
export const UIA_IsKeyboardFocusablePropertyId = 30009;
export const UIA_IsEnabledPropertyId = 30010;
export const UIA_AutomationIdPropertyId = 30011;
export const UIA_ClassNamePropertyId = 30012;
export const UIA_HelpTextPropertyId = 30013;
export const UIA_ClickablePointPropertyId = 30014;
export const UIA_CulturePropertyId = 30015;
export const UIA_IsControlElementPropertyId = 30016;
export const UIA_IsContentElementPropertyId = 30017;
export const UIA_LabeledByPropertyId = 30018;
export const UIA_IsPasswordPropertyId = 30019;
export const UIA_NativeWindowHandlePropertyId = 30020;
export const UIA_ItemTypePropertyId = 30021;
export const UIA_IsOffscreenPropertyId = 30022;
export const UIA_OrientationPropertyId = 30023;
export const UIA_FrameworkIdPropertyId = 30024;
export const UIA_IsRequiredForFormPropertyId = 30025;
export const UIA_ItemStatusPropertyId = 30026;
export const UIA_IsDockPatternAvailablePropertyId = 30027;
export const UIA_IsExpandCollapsePatternAvailablePropertyId = 30028;
export const UIA_IsGridItemPatternAvailablePropertyId = 30029;
export const UIA_IsGridPatternAvailablePropertyId = 30030;
export const UIA_IsInvokePatternAvailablePropertyId = 30031;
export const UIA_IsMultipleViewPatternAvailablePropertyId = 30032;
export const UIA_IsRangeValuePatternAvailablePropertyId = 30033;
export const UIA_IsScrollPatternAvailablePropertyId = 30034;
export const UIA_IsScrollItemPatternAvailablePropertyId = 30035;
export const UIA_IsSelectionItemPatternAvailablePropertyId = 30036;
export const UIA_IsSelectionPatternAvailablePropertyId = 30037;
export const UIA_IsTablePatternAvailablePropertyId = 30038;
export const UIA_IsTableItemPatternAvailablePropertyId = 30039;
export const UIA_IsTextPatternAvailablePropertyId = 30040;
export const UIA_IsTogglePatternAvailablePropertyId = 30041;
export const UIA_IsTransformPatternAvailablePropertyId = 30042;
export const UIA_IsValuePatternAvailablePropertyId = 30043;
export const UIA_IsWindowPatternAvailablePropertyId = 30044;
export const UIA_ValueValuePropertyId = 30045;
export const UIA_ValueIsReadOnlyPropertyId = 30046;
export const UIA_RangeValueValuePropertyId = 30047;
export const UIA_RangeValueIsReadOnlyPropertyId = 30048;
export const UIA_RangeValueMinimumPropertyId = 30049;
export const UIA_RangeValueMaximumPropertyId = 30050;
export const UIA_RangeValueLargeChangePropertyId = 30051;
export const UIA_RangeValueSmallChangePropertyId = 30052;
export const UIA_ScrollHorizontalScrollPercentPropertyId = 30053;
export const UIA_ScrollHorizontalViewSizePropertyId = 30054;
export const UIA_ScrollVerticalScrollPercentPropertyId = 30055;
export const UIA_ScrollVerticalViewSizePropertyId = 30056;
export const UIA_ScrollHorizontallyScrollablePropertyId = 30057;
export const UIA_ScrollVerticallyScrollablePropertyId = 30058;
export const UIA_SelectionSelectionPropertyId = 30059;
export const UIA_SelectionCanSelectMultiplePropertyId = 30060;
export const UIA_SelectionIsSelectionRequiredPropertyId = 30061;
export const UIA_GridRowCountPropertyId = 30062;
export const UIA_GridColumnCountPropertyId = 30063;
export const UIA_GridItemRowPropertyId = 30064;
export const UIA_GridItemColumnPropertyId = 30065;
export const UIA_GridItemRowSpanPropertyId = 30066;
export const UIA_GridItemColumnSpanPropertyId = 30067;
export const UIA_GridItemContainingGridPropertyId = 30068;
export const UIA_DockDockPositionPropertyId = 30069;
export const UIA_ExpandCollapseExpandCollapseStatePropertyId = 30070;
export const UIA_MultipleViewCurrentViewPropertyId = 30071;
export const UIA_MultipleViewSupportedViewsPropertyId = 30072;
export const UIA_WindowCanMaximizePropertyId = 30073;
export const UIA_WindowCanMinimizePropertyId = 30074;
export const UIA_WindowWindowVisualStatePropertyId = 30075;
export const UIA_WindowWindowInteractionStatePropertyId = 30076;
export const UIA_WindowIsModalPropertyId = 30077;
export const UIA_WindowIsTopmostPropertyId = 30078;
export const UIA_SelectionItemIsSelectedPropertyId = 30079;
export const UIA_SelectionItemSelectionContainerPropertyId = 30080;
export const UIA_TableRowHeadersPropertyId = 30081;
export const UIA_TableColumnHeadersPropertyId = 30082;
export const UIA_TableRowOrColumnMajorPropertyId = 30083;
export const UIA_TableItemRowHeaderItemsPropertyId = 30084;
export const UIA_TableItemColumnHeaderItemsPropertyId = 30085;
export const UIA_ToggleToggleStatePropertyId = 30086;
export const UIA_TransformCanMovePropertyId = 30087;
export const UIA_TransformCanResizePropertyId = 30088;
export const UIA_TransformCanRotatePropertyId = 30089;
export const UIA_IsLegacyIAccessiblePatternAvailablePropertyId = 30090;
export const UIA_LegacyIAccessibleChildIdPropertyId = 30091;
export const UIA_LegacyIAccessibleNamePropertyId = 30092;
export const UIA_LegacyIAccessibleValuePropertyId = 30093;
export const UIA_LegacyIAccessibleDescriptionPropertyId = 30094;
export const UIA_LegacyIAccessibleRolePropertyId = 30095;
export const UIA_LegacyIAccessibleStatePropertyId = 30096;
export const UIA_LegacyIAccessibleHelpPropertyId = 30097;
export const UIA_LegacyIAccessibleKeyboardShortcutPropertyId = 30098;
export const UIA_LegacyIAccessibleSelectionPropertyId = 30099;
export const UIA_LegacyIAccessibleDefaultActionPropertyId = 30100;
export const UIA_AriaRolePropertyId = 30101;
export const UIA_AriaPropertiesPropertyId = 30102;
export const UIA_IsDataValidForFormPropertyId = 30103;
export const UIA_ControllerForPropertyId = 30104;
export const UIA_DescribedByPropertyId = 30105;
export const UIA_FlowsToPropertyId = 30106;
export const UIA_ProviderDescriptionPropertyId = 30107;
export const UIA_IsItemContainerPatternAvailablePropertyId = 30108;
export const UIA_IsVirtualizedItemPatternAvailablePropertyId = 30109;
export const UIA_IsSynchronizedInputPatternAvailablePropertyId = 30110;
export const UIA_OptimizeForVisualContentPropertyId = 30111;
export const UIA_IsObjectModelPatternAvailablePropertyId = 30112;
export const UIA_AnnotationAnnotationTypeIdPropertyId = 30113;
export const UIA_AnnotationAnnotationTypeNamePropertyId = 30114;
export const UIA_AnnotationAuthorPropertyId = 30115;
export const UIA_AnnotationDateTimePropertyId = 30116;
export const UIA_AnnotationTargetPropertyId = 30117;
export const UIA_IsAnnotationPatternAvailablePropertyId = 30118;
export const UIA_IsTextPattern2AvailablePropertyId = 30119;
export const UIA_StylesStyleIdPropertyId = 30120;
export const UIA_StylesStyleNamePropertyId = 30121;
export const UIA_StylesFillColorPropertyId = 30122;
export const UIA_StylesFillPatternStylePropertyId = 30123;
export const UIA_StylesShapePropertyId = 30124;
export const UIA_StylesFillPatternColorPropertyId = 30125;
export const UIA_StylesExtendedPropertiesPropertyId = 30126;
export const UIA_IsStylesPatternAvailablePropertyId = 30127;
export const UIA_IsSpreadsheetPatternAvailablePropertyId = 30128;
export const UIA_SpreadsheetItemFormulaPropertyId = 30129;
export const UIA_SpreadsheetItemAnnotationObjectsPropertyId = 30130;
export const UIA_SpreadsheetItemAnnotationTypesPropertyId = 30131;
export const UIA_IsSpreadsheetItemPatternAvailablePropertyId = 30132;
export const UIA_Transform2CanZoomPropertyId = 30133;
export const UIA_IsTransformPattern2AvailablePropertyId = 30134;
export const UIA_LiveSettingPropertyId = 30135;
export const UIA_IsTextChildPatternAvailablePropertyId = 30136;
export const UIA_IsDragPatternAvailablePropertyId = 30137;
export const UIA_DragIsGrabbedPropertyId = 30138;
export const UIA_DragDropEffectPropertyId = 30139;
export const UIA_DragDropEffectsPropertyId = 30140;
export const UIA_IsDropTargetPatternAvailablePropertyId = 30141;
export const UIA_DropTargetDropTargetEffectPropertyId = 30142;
export const UIA_DropTargetDropTargetEffectsPropertyId = 30143;
export const UIA_DragGrabbedItemsPropertyId = 30144;
export const UIA_Transform2ZoomLevelPropertyId = 30145;
export const UIA_Transform2ZoomMinimumPropertyId = 30146;
export const UIA_Transform2ZoomMaximumPropertyId = 30147;
export const UIA_FlowsFromPropertyId = 30148;
export const UIA_IsTextEditPatternAvailablePropertyId = 30149;
export const UIA_IsPeripheralPropertyId = 30150;
export const UIA_IsCustomNavigationPatternAvailablePropertyId = 30151;
export const UIA_PositionInSetPropertyId = 30152;
export const UIA_SizeOfSetPropertyId = 30153;
export const UIA_LevelPropertyId = 30154;
export const UIA_AnnotationTypesPropertyId = 30155;
export const UIA_AnnotationObjectsPropertyId = 30156;
export const UIA_LandmarkTypePropertyId = 30157;
export const UIA_LocalizedLandmarkTypePropertyId = 30158;
export const UIA_FullDescriptionPropertyId = 30159;
export const UIA_FillColorPropertyId = 30160;
export const UIA_OutlineColorPropertyId = 30161;
export const UIA_FillTypePropertyId = 30162;
export const UIA_VisualEffectsPropertyId = 30163;
export const UIA_OutlineThicknessPropertyId = 30164;
export const UIA_CenterPointPropertyId = 30165;
export const UIA_RotationPropertyId = 30166;
export const UIA_SizePropertyId = 30167;
export const UIA_IsSelectionPattern2AvailablePropertyId = 30168;
export const UIA_Selection2FirstSelectedItemPropertyId = 30169;
export const UIA_Selection2LastSelectedItemPropertyId = 30170;
export const UIA_Selection2CurrentSelectedItemPropertyId = 30171;
export const UIA_Selection2ItemCountPropertyId = 30172;
export const UIA_HeadingLevelPropertyId = 30173;
export const UIA_IsDialogPropertyId = 30174;
export const ANRUS_PRIORITY_AUDIO_DYNAMIC_DUCK = 16;
export const MSAA_MENU_SIG = `-1441927155`;
export const DISPID_ACC_PARENT = `-5000`;
export const DISPID_ACC_CHILDCOUNT = `-5001`;
export const DISPID_ACC_CHILD = `-5002`;
export const DISPID_ACC_NAME = `-5003`;
export const DISPID_ACC_VALUE = `-5004`;
export const DISPID_ACC_DESCRIPTION = `-5005`;
export const DISPID_ACC_ROLE = `-5006`;
export const DISPID_ACC_STATE = `-5007`;
export const DISPID_ACC_HELP = `-5008`;
export const DISPID_ACC_HELPTOPIC = `-5009`;
export const DISPID_ACC_KEYBOARDSHORTCUT = `-5010`;
export const DISPID_ACC_FOCUS = `-5011`;
export const DISPID_ACC_SELECTION = `-5012`;
export const DISPID_ACC_DEFAULTACTION = `-5013`;
export const DISPID_ACC_SELECT = `-5014`;
export const DISPID_ACC_LOCATION = `-5015`;
export const DISPID_ACC_NAVIGATE = `-5016`;
export const DISPID_ACC_HITTEST = `-5017`;
export const DISPID_ACC_DODEFAULTACTION = `-5018`;
export const NAVDIR_MIN = 0;
export const NAVDIR_UP = 1;
export const NAVDIR_DOWN = 2;
export const NAVDIR_LEFT = 3;
export const NAVDIR_RIGHT = 4;
export const NAVDIR_NEXT = 5;
export const NAVDIR_PREVIOUS = 6;
export const NAVDIR_FIRSTCHILD = 7;
export const NAVDIR_LASTCHILD = 8;
export const NAVDIR_MAX = 9;
export const SELFLAG_NONE = 0;
export const SELFLAG_TAKEFOCUS = 1;
export const SELFLAG_TAKESELECTION = 2;
export const SELFLAG_EXTENDSELECTION = 4;
export const SELFLAG_ADDSELECTION = 8;
export const SELFLAG_REMOVESELECTION = 16;
export const SELFLAG_VALID = 31;
export const STATE_SYSTEM_NORMAL = 0;
export const STATE_SYSTEM_HASPOPUP = 1073741824;
export const ROLE_SYSTEM_TITLEBAR = 1;
export const ROLE_SYSTEM_MENUBAR = 2;
export const ROLE_SYSTEM_SCROLLBAR = 3;
export const ROLE_SYSTEM_GRIP = 4;
export const ROLE_SYSTEM_SOUND = 5;
export const ROLE_SYSTEM_CURSOR = 6;
export const ROLE_SYSTEM_CARET = 7;
export const ROLE_SYSTEM_ALERT = 8;
export const ROLE_SYSTEM_WINDOW = 9;
export const ROLE_SYSTEM_CLIENT = 10;
export const ROLE_SYSTEM_MENUPOPUP = 11;
export const ROLE_SYSTEM_MENUITEM = 12;
export const ROLE_SYSTEM_TOOLTIP = 13;
export const ROLE_SYSTEM_APPLICATION = 14;
export const ROLE_SYSTEM_DOCUMENT = 15;
export const ROLE_SYSTEM_PANE = 16;
export const ROLE_SYSTEM_CHART = 17;
export const ROLE_SYSTEM_DIALOG = 18;
export const ROLE_SYSTEM_BORDER = 19;
export const ROLE_SYSTEM_GROUPING = 20;
export const ROLE_SYSTEM_SEPARATOR = 21;
export const ROLE_SYSTEM_TOOLBAR = 22;
export const ROLE_SYSTEM_STATUSBAR = 23;
export const ROLE_SYSTEM_TABLE = 24;
export const ROLE_SYSTEM_COLUMNHEADER = 25;
export const ROLE_SYSTEM_ROWHEADER = 26;
export const ROLE_SYSTEM_COLUMN = 27;
export const ROLE_SYSTEM_ROW = 28;
export const ROLE_SYSTEM_CELL = 29;
export const ROLE_SYSTEM_LINK = 30;
export const ROLE_SYSTEM_HELPBALLOON = 31;
export const ROLE_SYSTEM_CHARACTER = 32;
export const ROLE_SYSTEM_LIST = 33;
export const ROLE_SYSTEM_LISTITEM = 34;
export const ROLE_SYSTEM_OUTLINE = 35;
export const ROLE_SYSTEM_OUTLINEITEM = 36;
export const ROLE_SYSTEM_PAGETAB = 37;
export const ROLE_SYSTEM_PROPERTYPAGE = 38;
export const ROLE_SYSTEM_INDICATOR = 39;
export const ROLE_SYSTEM_GRAPHIC = 40;
export const ROLE_SYSTEM_STATICTEXT = 41;
export const ROLE_SYSTEM_TEXT = 42;
export const ROLE_SYSTEM_PUSHBUTTON = 43;
export const ROLE_SYSTEM_CHECKBUTTON = 44;
export const ROLE_SYSTEM_RADIOBUTTON = 45;
export const ROLE_SYSTEM_COMBOBOX = 46;
export const ROLE_SYSTEM_DROPLIST = 47;
export const ROLE_SYSTEM_PROGRESSBAR = 48;
export const ROLE_SYSTEM_DIAL = 49;
export const ROLE_SYSTEM_HOTKEYFIELD = 50;
export const ROLE_SYSTEM_SLIDER = 51;
export const ROLE_SYSTEM_SPINBUTTON = 52;
export const ROLE_SYSTEM_DIAGRAM = 53;
export const ROLE_SYSTEM_ANIMATION = 54;
export const ROLE_SYSTEM_EQUATION = 55;
export const ROLE_SYSTEM_BUTTONDROPDOWN = 56;
export const ROLE_SYSTEM_BUTTONMENU = 57;
export const ROLE_SYSTEM_BUTTONDROPDOWNGRID = 58;
export const ROLE_SYSTEM_WHITESPACE = 59;
export const ROLE_SYSTEM_PAGETABLIST = 60;
export const ROLE_SYSTEM_CLOCK = 61;
export const ROLE_SYSTEM_SPLITBUTTON = 62;
export const ROLE_SYSTEM_IPADDRESS = 63;
export const ROLE_SYSTEM_OUTLINEBUTTON = 64;
export const UIA_E_ELEMENTNOTENABLED = 2147746304;
export const UIA_E_ELEMENTNOTAVAILABLE = 2147746305;
export const UIA_E_NOCLICKABLEPOINT = 2147746306;
export const UIA_E_PROXYASSEMBLYNOTLOADED = 2147746307;
export const UIA_E_NOTSUPPORTED = 2147746308;
export const UIA_E_INVALIDOPERATION = 2148734217;
export const UIA_E_TIMEOUT = 2148734213;
export const UiaAppendRuntimeId = 3;
export const UiaRootObjectId = `-25`;
export const UIA_IAFP_DEFAULT = 0;
export const UIA_IAFP_UNWRAP_BRIDGE = 1;
export const UIA_PFIA_DEFAULT = 0;
export const UIA_PFIA_UNWRAP_BRIDGE = 1;
export const UIA_ScrollPatternNoScroll = `-1`;
export const ANNO_THIS = 0;
export const ANNO_CONTAINER = 1;
export const NavigateDirection_Parent = 0;
export const NavigateDirection_NextSibling = 1;
export const NavigateDirection_PreviousSibling = 2;
export const NavigateDirection_FirstChild = 3;
export const NavigateDirection_LastChild = 4;
export const ProviderOptions_ClientSideProvider = 1;
export const ProviderOptions_ServerSideProvider = 2;
export const ProviderOptions_NonClientAreaProvider = 4;
export const ProviderOptions_OverrideProvider = 8;
export const ProviderOptions_ProviderOwnsSetFocus = 16;
export const ProviderOptions_UseComThreading = 32;
export const ProviderOptions_RefuseNonClientSupport = 64;
export const ProviderOptions_HasNativeIAccessible = 128;
export const ProviderOptions_UseClientCoordinates = 256;
export const StructureChangeType_ChildAdded = 0;
export const StructureChangeType_ChildRemoved = 1;
export const StructureChangeType_ChildrenInvalidated = 2;
export const StructureChangeType_ChildrenBulkAdded = 3;
export const StructureChangeType_ChildrenBulkRemoved = 4;
export const StructureChangeType_ChildrenReordered = 5;
export const TextEditChangeType_None = 0;
export const TextEditChangeType_AutoCorrect = 1;
export const TextEditChangeType_Composition = 2;
export const TextEditChangeType_CompositionFinalized = 3;
export const TextEditChangeType_AutoComplete = 4;
export const OrientationType_None = 0;
export const OrientationType_Horizontal = 1;
export const OrientationType_Vertical = 2;
export const DockPosition_Top = 0;
export const DockPosition_Left = 1;
export const DockPosition_Bottom = 2;
export const DockPosition_Right = 3;
export const DockPosition_Fill = 4;
export const DockPosition_None = 5;
export const ExpandCollapseState_Collapsed = 0;
export const ExpandCollapseState_Expanded = 1;
export const ExpandCollapseState_PartiallyExpanded = 2;
export const ExpandCollapseState_LeafNode = 3;
export const ScrollAmount_LargeDecrement = 0;
export const ScrollAmount_SmallDecrement = 1;
export const ScrollAmount_NoAmount = 2;
export const ScrollAmount_LargeIncrement = 3;
export const ScrollAmount_SmallIncrement = 4;
export const RowOrColumnMajor_RowMajor = 0;
export const RowOrColumnMajor_ColumnMajor = 1;
export const RowOrColumnMajor_Indeterminate = 2;
export const ToggleState_Off = 0;
export const ToggleState_On = 1;
export const ToggleState_Indeterminate = 2;
export const WindowVisualState_Normal = 0;
export const WindowVisualState_Maximized = 1;
export const WindowVisualState_Minimized = 2;
export const SynchronizedInputType_KeyUp = 1;
export const SynchronizedInputType_KeyDown = 2;
export const SynchronizedInputType_LeftMouseUp = 4;
export const SynchronizedInputType_LeftMouseDown = 8;
export const SynchronizedInputType_RightMouseUp = 16;
export const SynchronizedInputType_RightMouseDown = 32;
export const WindowInteractionState_Running = 0;
export const WindowInteractionState_Closing = 1;
export const WindowInteractionState_ReadyForUserInteraction = 2;
export const WindowInteractionState_BlockedByModalWindow = 3;
export const WindowInteractionState_NotResponding = 4;
export const SayAsInterpretAs_None = 0;
export const SayAsInterpretAs_Spell = 1;
export const SayAsInterpretAs_Cardinal = 2;
export const SayAsInterpretAs_Ordinal = 3;
export const SayAsInterpretAs_Number = 4;
export const SayAsInterpretAs_Date = 5;
export const SayAsInterpretAs_Time = 6;
export const SayAsInterpretAs_Telephone = 7;
export const SayAsInterpretAs_Currency = 8;
export const SayAsInterpretAs_Net = 9;
export const SayAsInterpretAs_Url = 10;
export const SayAsInterpretAs_Address = 11;
export const SayAsInterpretAs_Alphanumeric = 12;
export const SayAsInterpretAs_Name = 13;
export const SayAsInterpretAs_Media = 14;
export const SayAsInterpretAs_Date_MonthDayYear = 15;
export const SayAsInterpretAs_Date_DayMonthYear = 16;
export const SayAsInterpretAs_Date_YearMonthDay = 17;
export const SayAsInterpretAs_Date_YearMonth = 18;
export const SayAsInterpretAs_Date_MonthYear = 19;
export const SayAsInterpretAs_Date_DayMonth = 20;
export const SayAsInterpretAs_Date_MonthDay = 21;
export const SayAsInterpretAs_Date_Year = 22;
export const SayAsInterpretAs_Time_HoursMinutesSeconds12 = 23;
export const SayAsInterpretAs_Time_HoursMinutes12 = 24;
export const SayAsInterpretAs_Time_HoursMinutesSeconds24 = 25;
export const SayAsInterpretAs_Time_HoursMinutes24 = 26;
export const TextUnit_Character = 0;
export const TextUnit_Format = 1;
export const TextUnit_Word = 2;
export const TextUnit_Line = 3;
export const TextUnit_Paragraph = 4;
export const TextUnit_Page = 5;
export const TextUnit_Document = 6;
export const TextPatternRangeEndpoint_Start = 0;
export const TextPatternRangeEndpoint_End = 1;
export const SupportedTextSelection_None = 0;
export const SupportedTextSelection_Single = 1;
export const SupportedTextSelection_Multiple = 2;
export const Off = 0;
export const Polite = 1;
export const Assertive = 2;
export const ActiveEnd_None = 0;
export const ActiveEnd_Start = 1;
export const ActiveEnd_End = 2;
export const CaretPosition_Unknown = 0;
export const CaretPosition_EndOfLine = 1;
export const CaretPosition_BeginningOfLine = 2;
export const CaretBidiMode_LTR = 0;
export const CaretBidiMode_RTL = 1;
export const ZoomUnit_NoAmount = 0;
export const ZoomUnit_LargeDecrement = 1;
export const ZoomUnit_SmallDecrement = 2;
export const ZoomUnit_LargeIncrement = 3;
export const ZoomUnit_SmallIncrement = 4;
export const AnimationStyle_None = 0;
export const AnimationStyle_LasVegasLights = 1;
export const AnimationStyle_BlinkingBackground = 2;
export const AnimationStyle_SparkleText = 3;
export const AnimationStyle_MarchingBlackAnts = 4;
export const AnimationStyle_MarchingRedAnts = 5;
export const AnimationStyle_Shimmer = 6;
export const AnimationStyle_Other = `-1`;
export const BulletStyle_None = 0;
export const BulletStyle_HollowRoundBullet = 1;
export const BulletStyle_FilledRoundBullet = 2;
export const BulletStyle_HollowSquareBullet = 3;
export const BulletStyle_FilledSquareBullet = 4;
export const BulletStyle_DashBullet = 5;
export const BulletStyle_Other = `-1`;
export const CapStyle_None = 0;
export const CapStyle_SmallCap = 1;
export const CapStyle_AllCap = 2;
export const CapStyle_AllPetiteCaps = 3;
export const CapStyle_PetiteCaps = 4;
export const CapStyle_Unicase = 5;
export const CapStyle_Titling = 6;
export const CapStyle_Other = `-1`;
export const FillType_None = 0;
export const FillType_Color = 1;
export const FillType_Gradient = 2;
export const FillType_Picture = 3;
export const FillType_Pattern = 4;
export const FlowDirections_Default = 0;
export const FlowDirections_RightToLeft = 1;
export const FlowDirections_BottomToTop = 2;
export const FlowDirections_Vertical = 4;
export const HorizontalTextAlignment_Left = 0;
export const HorizontalTextAlignment_Centered = 1;
export const HorizontalTextAlignment_Right = 2;
export const HorizontalTextAlignment_Justified = 3;
export const OutlineStyles_None = 0;
export const OutlineStyles_Outline = 1;
export const OutlineStyles_Shadow = 2;
export const OutlineStyles_Engraved = 4;
export const OutlineStyles_Embossed = 8;
export const TextDecorationLineStyle_None = 0;
export const TextDecorationLineStyle_Single = 1;
export const TextDecorationLineStyle_WordsOnly = 2;
export const TextDecorationLineStyle_Double = 3;
export const TextDecorationLineStyle_Dot = 4;
export const TextDecorationLineStyle_Dash = 5;
export const TextDecorationLineStyle_DashDot = 6;
export const TextDecorationLineStyle_DashDotDot = 7;
export const TextDecorationLineStyle_Wavy = 8;
export const TextDecorationLineStyle_ThickSingle = 9;
export const TextDecorationLineStyle_DoubleWavy = 11;
export const TextDecorationLineStyle_ThickWavy = 12;
export const TextDecorationLineStyle_LongDash = 13;
export const TextDecorationLineStyle_ThickDash = 14;
export const TextDecorationLineStyle_ThickDashDot = 15;
export const TextDecorationLineStyle_ThickDashDotDot = 16;
export const TextDecorationLineStyle_ThickDot = 17;
export const TextDecorationLineStyle_ThickLongDash = 18;
export const TextDecorationLineStyle_Other = `-1`;
export const VisualEffects_None = 0;
export const VisualEffects_Shadow = 1;
export const VisualEffects_Reflection = 2;
export const VisualEffects_Glow = 4;
export const VisualEffects_SoftEdges = 8;
export const VisualEffects_Bevel = 16;
export const NotificationProcessing_ImportantAll = 0;
export const NotificationProcessing_ImportantMostRecent = 1;
export const NotificationProcessing_All = 2;
export const NotificationProcessing_MostRecent = 3;
export const NotificationProcessing_CurrentThenMostRecent = 4;
export const NotificationKind_ItemAdded = 0;
export const NotificationKind_ItemRemoved = 1;
export const NotificationKind_ActionCompleted = 2;
export const NotificationKind_ActionAborted = 3;
export const NotificationKind_Other = 4;
export const UIAutomationType_Int = 1;
export const UIAutomationType_Bool = 2;
export const UIAutomationType_String = 3;
export const UIAutomationType_Double = 4;
export const UIAutomationType_Point = 5;
export const UIAutomationType_Rect = 6;
export const UIAutomationType_Element = 7;
export const UIAutomationType_Array = 65536;
export const UIAutomationType_Out = 131072;
export const UIAutomationType_IntArray = 65537;
export const UIAutomationType_BoolArray = 65538;
export const UIAutomationType_StringArray = 65539;
export const UIAutomationType_DoubleArray = 65540;
export const UIAutomationType_PointArray = 65541;
export const UIAutomationType_RectArray = 65542;
export const UIAutomationType_ElementArray = 65543;
export const UIAutomationType_OutInt = 131073;
export const UIAutomationType_OutBool = 131074;
export const UIAutomationType_OutString = 131075;
export const UIAutomationType_OutDouble = 131076;
export const UIAutomationType_OutPoint = 131077;
export const UIAutomationType_OutRect = 131078;
export const UIAutomationType_OutElement = 131079;
export const UIAutomationType_OutIntArray = 196609;
export const UIAutomationType_OutBoolArray = 196610;
export const UIAutomationType_OutStringArray = 196611;
export const UIAutomationType_OutDoubleArray = 196612;
export const UIAutomationType_OutPointArray = 196613;
export const UIAutomationType_OutRectArray = 196614;
export const UIAutomationType_OutElementArray = 196615;
export const TreeScope_None = 0;
export const TreeScope_Element = 1;
export const TreeScope_Children = 2;
export const TreeScope_Descendants = 4;
export const TreeScope_Parent = 8;
export const TreeScope_Ancestors = 16;
export const TreeScope_Subtree = 7;
export const PropertyConditionFlags_None = 0;
export const PropertyConditionFlags_IgnoreCase = 1;
export const PropertyConditionFlags_MatchSubstring = 2;
export const AutomationElementMode_None = 0;
export const AutomationElementMode_Full = 1;
export const TreeTraversalOptions_Default = 0;
export const TreeTraversalOptions_PostOrder = 1;
export const TreeTraversalOptions_LastToFirstOrder = 2;
export const ConnectionRecoveryBehaviorOptions_Disabled = 0;
export const ConnectionRecoveryBehaviorOptions_Enabled = 1;
export const CoalesceEventsOptions_Disabled = 0;
export const CoalesceEventsOptions_Enabled = 1;
export const ConditionType_True = 0;
export const ConditionType_False = 1;
export const ConditionType_Property = 2;
export const ConditionType_And = 3;
export const ConditionType_Or = 4;
export const ConditionType_Not = 5;
export const NormalizeState_None = 0;
export const NormalizeState_View = 1;
export const NormalizeState_Custom = 2;
export const ProviderType_BaseHwnd = 0;
export const ProviderType_Proxy = 1;
export const ProviderType_NonClientArea = 2;
export const AutomationIdentifierType_Property = 0;
export const AutomationIdentifierType_Pattern = 1;
export const AutomationIdentifierType_Event = 2;
export const AutomationIdentifierType_ControlType = 3;
export const AutomationIdentifierType_TextAttribute = 4;
export const AutomationIdentifierType_LandmarkType = 5;
export const AutomationIdentifierType_Annotation = 6;
export const AutomationIdentifierType_Changes = 7;
export const AutomationIdentifierType_Style = 8;
export const EventArgsType_Simple = 0;
export const EventArgsType_PropertyChanged = 1;
export const EventArgsType_StructureChanged = 2;
export const EventArgsType_AsyncContentLoaded = 3;
export const EventArgsType_WindowClosed = 4;
export const EventArgsType_TextEditTextChanged = 5;
export const EventArgsType_Changes = 6;
export const EventArgsType_Notification = 7;
export const EventArgsType_ActiveTextPositionChanged = 8;
export const EventArgsType_StructuredMarkup = 9;
export const AsyncContentLoadedState_Beginning = 0;
export const AsyncContentLoadedState_Progress = 1;
export const AsyncContentLoadedState_Completed = 2;
export const PT_POINTER = 1;
export const PT_TOUCH = 2;
export const PT_PEN = 3;
export const PT_MOUSE = 4;
export const PT_TOUCHPAD = 5;

// Structs

export type HWINEVENTHOOK = Deno.PointerValue;

export type HUIANODE = Deno.PointerValue;

export type HUIAPATTERNOBJECT = Deno.PointerValue;

export type HUIATEXTRANGE = Deno.PointerValue;

export type HUIAEVENT = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Accessibility.MSAAMENUINFO (size: 16)
 */
export interface MSAAMENUINFO {
  /** u32 */
  dwMSAASignature: number;
  /** u32 */
  cchWText: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszWText: string | null;
}

export const sizeofMSAAMENUINFO = 16;

export function allocMSAAMENUINFO(data?: Partial<MSAAMENUINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMSAAMENUINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMSAASignature !== undefined) view.setUint32(0, Number(data.dwMSAASignature), true);
  // 0x04: u32
  if (data?.cchWText !== undefined) view.setUint32(4, Number(data.cchWText), true);
  // 0x08: buffer
  if (data?.pszWText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszWText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaRect (size: 32)
 */
export interface UiaRect {
  /** f64 */
  left: number;
  /** f64 */
  top: number;
  /** f64 */
  width: number;
  /** f64 */
  height: number;
}

export const sizeofUiaRect = 32;

export function allocUiaRect(data?: Partial<UiaRect>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaRect);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.left !== undefined) view.setFloat64(0, Number(data.left), true);
  // 0x08: f64
  if (data?.top !== undefined) view.setFloat64(8, Number(data.top), true);
  // 0x10: f64
  if (data?.width !== undefined) view.setFloat64(16, Number(data.width), true);
  // 0x18: f64
  if (data?.height !== undefined) view.setFloat64(24, Number(data.height), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaPoint (size: 16)
 */
export interface UiaPoint {
  /** f64 */
  x: number;
  /** f64 */
  y: number;
}

export const sizeofUiaPoint = 16;

export function allocUiaPoint(data?: Partial<UiaPoint>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaPoint);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.x !== undefined) view.setFloat64(0, Number(data.x), true);
  // 0x08: f64
  if (data?.y !== undefined) view.setFloat64(8, Number(data.y), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaChangeInfo (size: 24)
 */
export interface UiaChangeInfo {
  /** i32 */
  uiaId: number;
  /** Windows.Win32.System.Com.VARIANT */
  payload: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.VARIANT */
  extraInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUiaChangeInfo = 24;

export function allocUiaChangeInfo(data?: Partial<UiaChangeInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaChangeInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.uiaId !== undefined) view.setInt32(0, Number(data.uiaId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.payload !== undefined) view.setBigUint64(8, data.payload === null ? 0n : BigInt(util.toPointer(data.payload)), true);
  // 0x10: pointer
  if (data?.extraInfo !== undefined) view.setBigUint64(16, data.extraInfo === null ? 0n : BigInt(util.toPointer(data.extraInfo)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UIAutomationParameter (size: 16)
 */
export interface UIAutomationParameter {
  /** Windows.Win32.UI.Accessibility.UIAutomationType */
  type: UIAutomationType;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUIAutomationParameter = 16;

export function allocUIAutomationParameter(data?: Partial<UIAutomationParameter>): Uint8Array {
  const buf = new Uint8Array(sizeofUIAutomationParameter);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UIAutomationPropertyInfo (size: 24)
 */
export interface UIAutomationPropertyInfo {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pProgrammaticName: string | null;
  /** Windows.Win32.UI.Accessibility.UIAutomationType */
  type: UIAutomationType;
}

export const sizeofUIAutomationPropertyInfo = 24;

export function allocUIAutomationPropertyInfo(data?: Partial<UIAutomationPropertyInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofUIAutomationPropertyInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: buffer
  if (data?.pProgrammaticName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pProgrammaticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.type !== undefined) view.setInt32(16, Number(data.type), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UIAutomationEventInfo (size: 16)
 */
export interface UIAutomationEventInfo {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pProgrammaticName: string | null;
}

export const sizeofUIAutomationEventInfo = 16;

export function allocUIAutomationEventInfo(data?: Partial<UIAutomationEventInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofUIAutomationEventInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: buffer
  if (data?.pProgrammaticName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pProgrammaticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.UI.Accessibility.UIAutomationMethodInfo (size: 40)
 */
export interface UIAutomationMethodInfo {
  /** Windows.Win32.Foundation.PWSTR */
  pProgrammaticName: string | null;
  /** Windows.Win32.Foundation.BOOL */
  doSetFocus: boolean;
  /** u32 */
  cInParameters: number;
  /** u32 */
  cOutParameters: number;
  /** ptr */
  pParameterTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pParameterNames: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUIAutomationMethodInfo = 40;

export function allocUIAutomationMethodInfo(data?: Partial<UIAutomationMethodInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofUIAutomationMethodInfo);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pProgrammaticName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pProgrammaticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.doSetFocus !== undefined) view.setInt32(8, Number(data.doSetFocus), true);
  // 0x0c: u32
  if (data?.cInParameters !== undefined) view.setUint32(12, Number(data.cInParameters), true);
  // 0x10: u32
  if (data?.cOutParameters !== undefined) view.setUint32(16, Number(data.cOutParameters), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pParameterTypes !== undefined) view.setBigUint64(24, data.pParameterTypes === null ? 0n : BigInt(util.toPointer(data.pParameterTypes)), true);
  // 0x20: pointer
  if (data?.pParameterNames !== undefined) view.setBigUint64(32, data.pParameterNames === null ? 0n : BigInt(util.toPointer(data.pParameterNames)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UIAutomationPatternInfo (size: 88)
 */
export interface UIAutomationPatternInfo {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pProgrammaticName: string | null;
  /** System.Guid */
  providerInterfaceId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  clientInterfaceId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cProperties: number;
  /** ptr */
  pProperties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMethods: number;
  /** ptr */
  pMethods: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cEvents: number;
  /** ptr */
  pEvents: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Accessibility.IUIAutomationPatternHandler */
  pPatternHandler: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUIAutomationPatternInfo = 88;

export function allocUIAutomationPatternInfo(data?: Partial<UIAutomationPatternInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofUIAutomationPatternInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: buffer
  if (data?.pProgrammaticName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pProgrammaticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.providerInterfaceId !== undefined) view.setBigUint64(16, data.providerInterfaceId === null ? 0n : BigInt(util.toPointer(data.providerInterfaceId)), true);
  // 0x18: pointer
  if (data?.clientInterfaceId !== undefined) view.setBigUint64(24, data.clientInterfaceId === null ? 0n : BigInt(util.toPointer(data.clientInterfaceId)), true);
  // 0x20: u32
  if (data?.cProperties !== undefined) view.setUint32(32, Number(data.cProperties), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pProperties !== undefined) view.setBigUint64(40, data.pProperties === null ? 0n : BigInt(util.toPointer(data.pProperties)), true);
  // 0x30: u32
  if (data?.cMethods !== undefined) view.setUint32(48, Number(data.cMethods), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pMethods !== undefined) view.setBigUint64(56, data.pMethods === null ? 0n : BigInt(util.toPointer(data.pMethods)), true);
  // 0x40: u32
  if (data?.cEvents !== undefined) view.setUint32(64, Number(data.cEvents), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pEvents !== undefined) view.setBigUint64(72, data.pEvents === null ? 0n : BigInt(util.toPointer(data.pEvents)), true);
  // 0x50: pointer
  if (data?.pPatternHandler !== undefined) view.setBigUint64(80, data.pPatternHandler === null ? 0n : BigInt(util.toPointer(data.pPatternHandler)), true);
  return buf;
}

export type BSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Accessibility.ExtendedProperty (size: 16)
 */
export interface ExtendedProperty {
  /** Windows.Win32.Foundation.BSTR */
  PropertyName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BSTR */
  PropertyValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofExtendedProperty = 16;

export function allocExtendedProperty(data?: Partial<ExtendedProperty>): Uint8Array {
  const buf = new Uint8Array(sizeofExtendedProperty);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PropertyName !== undefined) view.setBigUint64(0, data.PropertyName === null ? 0n : BigInt(util.toPointer(data.PropertyName)), true);
  // 0x08: pointer
  if (data?.PropertyValue !== undefined) view.setBigUint64(8, data.PropertyValue === null ? 0n : BigInt(util.toPointer(data.PropertyValue)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaCondition (size: 8)
 */
export interface UiaCondition {
  /** Windows.Win32.UI.Accessibility.ConditionType */
  ConditionType: ConditionType;
}

export const sizeofUiaCondition = 8;

export function allocUiaCondition(data?: Partial<UiaCondition>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaCondition);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConditionType !== undefined) view.setInt32(0, Number(data.ConditionType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaPropertyCondition (size: 24)
 */
export interface UiaPropertyCondition {
  /** Windows.Win32.UI.Accessibility.ConditionType */
  ConditionType: ConditionType;
  /** Windows.Win32.UI.Accessibility.UIA_PROPERTY_ID */
  PropertyId: UIA_PROPERTY_ID;
  /** Windows.Win32.System.Com.VARIANT */
  Value: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Accessibility.PropertyConditionFlags */
  Flags: PropertyConditionFlags;
}

export const sizeofUiaPropertyCondition = 24;

export function allocUiaPropertyCondition(data?: Partial<UiaPropertyCondition>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaPropertyCondition);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConditionType !== undefined) view.setInt32(0, Number(data.ConditionType), true);
  // 0x04: u32
  if (data?.PropertyId !== undefined) view.setUint32(4, Number(data.PropertyId), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  // 0x10: i32
  if (data?.Flags !== undefined) view.setInt32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaAndOrCondition (size: 24)
 */
export interface UiaAndOrCondition {
  /** Windows.Win32.UI.Accessibility.ConditionType */
  ConditionType: ConditionType;
  /** ptr */
  ppConditions: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cConditions: number;
}

export const sizeofUiaAndOrCondition = 24;

export function allocUiaAndOrCondition(data?: Partial<UiaAndOrCondition>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaAndOrCondition);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConditionType !== undefined) view.setInt32(0, Number(data.ConditionType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppConditions !== undefined) view.setBigUint64(8, data.ppConditions === null ? 0n : BigInt(util.toPointer(data.ppConditions)), true);
  // 0x10: i32
  if (data?.cConditions !== undefined) view.setInt32(16, Number(data.cConditions), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaNotCondition (size: 16)
 */
export interface UiaNotCondition {
  /** Windows.Win32.UI.Accessibility.ConditionType */
  ConditionType: ConditionType;
  /** ptr */
  pCondition: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUiaNotCondition = 16;

export function allocUiaNotCondition(data?: Partial<UiaNotCondition>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaNotCondition);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConditionType !== undefined) view.setInt32(0, Number(data.ConditionType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCondition !== undefined) view.setBigUint64(8, data.pCondition === null ? 0n : BigInt(util.toPointer(data.pCondition)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaCacheRequest (size: 48)
 */
export interface UiaCacheRequest {
  /** ptr */
  pViewCondition: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.UI.Accessibility.TreeScope */
  Scope: TreeScope;
  /** ptr */
  pProperties: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cProperties: number;
  /** ptr */
  pPatterns: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cPatterns: number;
  /** Windows.Win32.UI.Accessibility.AutomationElementMode */
  automationElementMode: AutomationElementMode;
}

export const sizeofUiaCacheRequest = 48;

export function allocUiaCacheRequest(data?: Partial<UiaCacheRequest>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaCacheRequest);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pViewCondition !== undefined) view.setBigUint64(0, data.pViewCondition === null ? 0n : BigInt(util.toPointer(data.pViewCondition)), true);
  // 0x08: i32
  if (data?.Scope !== undefined) view.setInt32(8, Number(data.Scope), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pProperties !== undefined) view.setBigUint64(16, data.pProperties === null ? 0n : BigInt(util.toPointer(data.pProperties)), true);
  // 0x18: i32
  if (data?.cProperties !== undefined) view.setInt32(24, Number(data.cProperties), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pPatterns !== undefined) view.setBigUint64(32, data.pPatterns === null ? 0n : BigInt(util.toPointer(data.pPatterns)), true);
  // 0x28: i32
  if (data?.cPatterns !== undefined) view.setInt32(40, Number(data.cPatterns), true);
  // 0x2c: i32
  if (data?.automationElementMode !== undefined) view.setInt32(44, Number(data.automationElementMode), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaFindParams (size: 24)
 */
export interface UiaFindParams {
  /** i32 */
  MaxDepth: number;
  /** Windows.Win32.Foundation.BOOL */
  FindFirst: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ExcludeRoot: boolean;
  /** ptr */
  pFindCondition: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUiaFindParams = 24;

export function allocUiaFindParams(data?: Partial<UiaFindParams>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaFindParams);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MaxDepth !== undefined) view.setInt32(0, Number(data.MaxDepth), true);
  // 0x04: i32
  if (data?.FindFirst !== undefined) view.setInt32(4, Number(data.FindFirst), true);
  // 0x08: i32
  if (data?.ExcludeRoot !== undefined) view.setInt32(8, Number(data.ExcludeRoot), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pFindCondition !== undefined) view.setBigUint64(16, data.pFindCondition === null ? 0n : BigInt(util.toPointer(data.pFindCondition)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaEventArgs (size: 8)
 */
export interface UiaEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** i32 */
  EventId: number;
}

export const sizeofUiaEventArgs = 8;

export function allocUiaEventArgs(data?: Partial<UiaEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.EventId !== undefined) view.setInt32(4, Number(data.EventId), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaPropertyChangedEventArgs (size: 32)
 */
export interface UiaPropertyChangedEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** Windows.Win32.UI.Accessibility.UIA_EVENT_ID */
  EventId: UIA_EVENT_ID;
  /** i32 */
  PropertyId: number;
  /** Windows.Win32.System.Com.VARIANT */
  OldValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.VARIANT */
  NewValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUiaPropertyChangedEventArgs = 32;

export function allocUiaPropertyChangedEventArgs(data?: Partial<UiaPropertyChangedEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaPropertyChangedEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.EventId !== undefined) view.setUint32(4, Number(data.EventId), true);
  // 0x08: i32
  if (data?.PropertyId !== undefined) view.setInt32(8, Number(data.PropertyId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.OldValue !== undefined) view.setBigUint64(16, data.OldValue === null ? 0n : BigInt(util.toPointer(data.OldValue)), true);
  // 0x18: pointer
  if (data?.NewValue !== undefined) view.setBigUint64(24, data.NewValue === null ? 0n : BigInt(util.toPointer(data.NewValue)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaStructureChangedEventArgs (size: 32)
 */
export interface UiaStructureChangedEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** i32 */
  EventId: number;
  /** Windows.Win32.UI.Accessibility.StructureChangeType */
  StructureChangeType: StructureChangeType;
  /** ptr */
  pRuntimeId: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cRuntimeIdLen: number;
}

export const sizeofUiaStructureChangedEventArgs = 32;

export function allocUiaStructureChangedEventArgs(data?: Partial<UiaStructureChangedEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaStructureChangedEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.EventId !== undefined) view.setInt32(4, Number(data.EventId), true);
  // 0x08: i32
  if (data?.StructureChangeType !== undefined) view.setInt32(8, Number(data.StructureChangeType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pRuntimeId !== undefined) view.setBigUint64(16, data.pRuntimeId === null ? 0n : BigInt(util.toPointer(data.pRuntimeId)), true);
  // 0x18: i32
  if (data?.cRuntimeIdLen !== undefined) view.setInt32(24, Number(data.cRuntimeIdLen), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaTextEditTextChangedEventArgs (size: 24)
 */
export interface UiaTextEditTextChangedEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** i32 */
  EventId: number;
  /** Windows.Win32.UI.Accessibility.TextEditChangeType */
  TextEditChangeType: TextEditChangeType;
  /** ptr */
  pTextChange: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUiaTextEditTextChangedEventArgs = 24;

export function allocUiaTextEditTextChangedEventArgs(data?: Partial<UiaTextEditTextChangedEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaTextEditTextChangedEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.EventId !== undefined) view.setInt32(4, Number(data.EventId), true);
  // 0x08: i32
  if (data?.TextEditChangeType !== undefined) view.setInt32(8, Number(data.TextEditChangeType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pTextChange !== undefined) view.setBigUint64(16, data.pTextChange === null ? 0n : BigInt(util.toPointer(data.pTextChange)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaChangesEventArgs (size: 24)
 */
export interface UiaChangesEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** i32 */
  EventId: number;
  /** i32 */
  EventIdCount: number;
  /** ptr */
  pUiaChanges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUiaChangesEventArgs = 24;

export function allocUiaChangesEventArgs(data?: Partial<UiaChangesEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaChangesEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.EventId !== undefined) view.setInt32(4, Number(data.EventId), true);
  // 0x08: i32
  if (data?.EventIdCount !== undefined) view.setInt32(8, Number(data.EventIdCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pUiaChanges !== undefined) view.setBigUint64(16, data.pUiaChanges === null ? 0n : BigInt(util.toPointer(data.pUiaChanges)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaAsyncContentLoadedEventArgs (size: 24)
 */
export interface UiaAsyncContentLoadedEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** i32 */
  EventId: number;
  /** Windows.Win32.UI.Accessibility.AsyncContentLoadedState */
  AsyncContentLoadedState: AsyncContentLoadedState;
  /** f64 */
  PercentComplete: number;
}

export const sizeofUiaAsyncContentLoadedEventArgs = 24;

export function allocUiaAsyncContentLoadedEventArgs(data?: Partial<UiaAsyncContentLoadedEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaAsyncContentLoadedEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.EventId !== undefined) view.setInt32(4, Number(data.EventId), true);
  // 0x08: i32
  if (data?.AsyncContentLoadedState !== undefined) view.setInt32(8, Number(data.AsyncContentLoadedState), true);
  // 0x0c: pad4
  // 0x10: f64
  if (data?.PercentComplete !== undefined) view.setFloat64(16, Number(data.PercentComplete), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.UiaWindowClosedEventArgs (size: 24)
 */
export interface UiaWindowClosedEventArgs {
  /** Windows.Win32.UI.Accessibility.EventArgsType */
  Type: EventArgsType;
  /** i32 */
  EventId: number;
  /** ptr */
  pRuntimeId: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  cRuntimeIdLen: number;
}

export const sizeofUiaWindowClosedEventArgs = 24;

export function allocUiaWindowClosedEventArgs(data?: Partial<UiaWindowClosedEventArgs>): Uint8Array {
  const buf = new Uint8Array(sizeofUiaWindowClosedEventArgs);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.EventId !== undefined) view.setInt32(4, Number(data.EventId), true);
  // 0x08: pointer
  if (data?.pRuntimeId !== undefined) view.setBigUint64(8, data.pRuntimeId === null ? 0n : BigInt(util.toPointer(data.pRuntimeId)), true);
  // 0x10: i32
  if (data?.cRuntimeIdLen !== undefined) view.setInt32(16, Number(data.cRuntimeIdLen), true);
  // 0x14: pad4
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Accessibility.SERIALKEYSA (size: 40)
 */
export interface SERIALKEYSA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.SERIALKEYS_FLAGS */
  dwFlags: SERIALKEYS_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  lpszActivePort: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszPort: string | null;
  /** u32 */
  iBaudRate: number;
  /** u32 */
  iPortState: number;
  /** u32 */
  iActive: number;
}

export const sizeofSERIALKEYSA = 40;

export function allocSERIALKEYSA(data?: Partial<SERIALKEYSA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERIALKEYSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.lpszActivePort !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszActivePort);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszPort !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszPort);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.iBaudRate !== undefined) view.setUint32(24, Number(data.iBaudRate), true);
  // 0x1c: u32
  if (data?.iPortState !== undefined) view.setUint32(28, Number(data.iPortState), true);
  // 0x20: u32
  if (data?.iActive !== undefined) view.setUint32(32, Number(data.iActive), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.SERIALKEYSW (size: 40)
 */
export interface SERIALKEYSW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.SERIALKEYS_FLAGS */
  dwFlags: SERIALKEYS_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  lpszActivePort: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszPort: string | null;
  /** u32 */
  iBaudRate: number;
  /** u32 */
  iPortState: number;
  /** u32 */
  iActive: number;
}

export const sizeofSERIALKEYSW = 40;

export function allocSERIALKEYSW(data?: Partial<SERIALKEYSW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERIALKEYSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.lpszActivePort !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszActivePort);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszPort !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszPort);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.iBaudRate !== undefined) view.setUint32(24, Number(data.iBaudRate), true);
  // 0x1c: u32
  if (data?.iPortState !== undefined) view.setUint32(28, Number(data.iPortState), true);
  // 0x20: u32
  if (data?.iActive !== undefined) view.setUint32(32, Number(data.iActive), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.HIGHCONTRASTA (size: 16)
 */
export interface HIGHCONTRASTA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.HIGHCONTRASTW_FLAGS */
  dwFlags: HIGHCONTRASTW_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  lpszDefaultScheme: string | null;
}

export const sizeofHIGHCONTRASTA = 16;

export function allocHIGHCONTRASTA(data?: Partial<HIGHCONTRASTA>): Uint8Array {
  const buf = new Uint8Array(sizeofHIGHCONTRASTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.lpszDefaultScheme !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszDefaultScheme);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.HIGHCONTRASTW (size: 16)
 */
export interface HIGHCONTRASTW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.HIGHCONTRASTW_FLAGS */
  dwFlags: HIGHCONTRASTW_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  lpszDefaultScheme: string | null;
}

export const sizeofHIGHCONTRASTW = 16;

export function allocHIGHCONTRASTW(data?: Partial<HIGHCONTRASTW>): Uint8Array {
  const buf = new Uint8Array(sizeofHIGHCONTRASTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.lpszDefaultScheme !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszDefaultScheme);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.FILTERKEYS (size: 24)
 */
export interface FILTERKEYS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  iWaitMSec: number;
  /** u32 */
  iDelayMSec: number;
  /** u32 */
  iRepeatMSec: number;
  /** u32 */
  iBounceMSec: number;
}

export const sizeofFILTERKEYS = 24;

export function allocFILTERKEYS(data?: Partial<FILTERKEYS>): Uint8Array {
  const buf = new Uint8Array(sizeofFILTERKEYS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.iWaitMSec !== undefined) view.setUint32(8, Number(data.iWaitMSec), true);
  // 0x0c: u32
  if (data?.iDelayMSec !== undefined) view.setUint32(12, Number(data.iDelayMSec), true);
  // 0x10: u32
  if (data?.iRepeatMSec !== undefined) view.setUint32(16, Number(data.iRepeatMSec), true);
  // 0x14: u32
  if (data?.iBounceMSec !== undefined) view.setUint32(20, Number(data.iBounceMSec), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.STICKYKEYS (size: 8)
 */
export interface STICKYKEYS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.STICKYKEYS_FLAGS */
  dwFlags: STICKYKEYS_FLAGS;
}

export const sizeofSTICKYKEYS = 8;

export function allocSTICKYKEYS(data?: Partial<STICKYKEYS>): Uint8Array {
  const buf = new Uint8Array(sizeofSTICKYKEYS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.MOUSEKEYS (size: 32)
 */
export interface MOUSEKEYS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  iMaxSpeed: number;
  /** u32 */
  iTimeToMaxSpeed: number;
  /** u32 */
  iCtrlSpeed: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
}

export const sizeofMOUSEKEYS = 32;

export function allocMOUSEKEYS(data?: Partial<MOUSEKEYS>): Uint8Array {
  const buf = new Uint8Array(sizeofMOUSEKEYS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.iMaxSpeed !== undefined) view.setUint32(8, Number(data.iMaxSpeed), true);
  // 0x0c: u32
  if (data?.iTimeToMaxSpeed !== undefined) view.setUint32(12, Number(data.iTimeToMaxSpeed), true);
  // 0x10: u32
  if (data?.iCtrlSpeed !== undefined) view.setUint32(16, Number(data.iCtrlSpeed), true);
  // 0x14: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(20, Number(data.dwReserved1), true);
  // 0x18: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(24, Number(data.dwReserved2), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.ACCESSTIMEOUT (size: 16)
 */
export interface ACCESSTIMEOUT {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  iTimeOutMSec: number;
}

export const sizeofACCESSTIMEOUT = 16;

export function allocACCESSTIMEOUT(data?: Partial<ACCESSTIMEOUT>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESSTIMEOUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.iTimeOutMSec !== undefined) view.setUint32(8, Number(data.iTimeOutMSec), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.SOUNDSENTRYA (size: 56)
 */
export interface SOUNDSENTRYA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.SOUNDSENTRY_FLAGS */
  dwFlags: SOUNDSENTRY_FLAGS;
  /** Windows.Win32.UI.Accessibility.SOUNDSENTRY_TEXT_EFFECT */
  iFSTextEffect: SOUNDSENTRY_TEXT_EFFECT;
  /** u32 */
  iFSTextEffectMSec: number;
  /** u32 */
  iFSTextEffectColorBits: number;
  /** Windows.Win32.UI.Accessibility.SOUND_SENTRY_GRAPHICS_EFFECT */
  iFSGrafEffect: SOUND_SENTRY_GRAPHICS_EFFECT;
  /** u32 */
  iFSGrafEffectMSec: number;
  /** u32 */
  iFSGrafEffectColor: number;
  /** Windows.Win32.UI.Accessibility.SOUNDSENTRY_WINDOWS_EFFECT */
  iWindowsEffect: SOUNDSENTRY_WINDOWS_EFFECT;
  /** u32 */
  iWindowsEffectMSec: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszWindowsEffectDLL: string | null;
  /** u32 */
  iWindowsEffectOrdinal: number;
}

export const sizeofSOUNDSENTRYA = 56;

export function allocSOUNDSENTRYA(data?: Partial<SOUNDSENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofSOUNDSENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.iFSTextEffect !== undefined) view.setUint32(8, Number(data.iFSTextEffect), true);
  // 0x0c: u32
  if (data?.iFSTextEffectMSec !== undefined) view.setUint32(12, Number(data.iFSTextEffectMSec), true);
  // 0x10: u32
  if (data?.iFSTextEffectColorBits !== undefined) view.setUint32(16, Number(data.iFSTextEffectColorBits), true);
  // 0x14: u32
  if (data?.iFSGrafEffect !== undefined) view.setUint32(20, Number(data.iFSGrafEffect), true);
  // 0x18: u32
  if (data?.iFSGrafEffectMSec !== undefined) view.setUint32(24, Number(data.iFSGrafEffectMSec), true);
  // 0x1c: u32
  if (data?.iFSGrafEffectColor !== undefined) view.setUint32(28, Number(data.iFSGrafEffectColor), true);
  // 0x20: u32
  if (data?.iWindowsEffect !== undefined) view.setUint32(32, Number(data.iWindowsEffect), true);
  // 0x24: u32
  if (data?.iWindowsEffectMSec !== undefined) view.setUint32(36, Number(data.iWindowsEffectMSec), true);
  // 0x28: buffer
  if (data?.lpszWindowsEffectDLL !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpszWindowsEffectDLL);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.iWindowsEffectOrdinal !== undefined) view.setUint32(48, Number(data.iWindowsEffectOrdinal), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.SOUNDSENTRYW (size: 56)
 */
export interface SOUNDSENTRYW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Accessibility.SOUNDSENTRY_FLAGS */
  dwFlags: SOUNDSENTRY_FLAGS;
  /** Windows.Win32.UI.Accessibility.SOUNDSENTRY_TEXT_EFFECT */
  iFSTextEffect: SOUNDSENTRY_TEXT_EFFECT;
  /** u32 */
  iFSTextEffectMSec: number;
  /** u32 */
  iFSTextEffectColorBits: number;
  /** Windows.Win32.UI.Accessibility.SOUND_SENTRY_GRAPHICS_EFFECT */
  iFSGrafEffect: SOUND_SENTRY_GRAPHICS_EFFECT;
  /** u32 */
  iFSGrafEffectMSec: number;
  /** u32 */
  iFSGrafEffectColor: number;
  /** Windows.Win32.UI.Accessibility.SOUNDSENTRY_WINDOWS_EFFECT */
  iWindowsEffect: SOUNDSENTRY_WINDOWS_EFFECT;
  /** u32 */
  iWindowsEffectMSec: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszWindowsEffectDLL: string | null;
  /** u32 */
  iWindowsEffectOrdinal: number;
}

export const sizeofSOUNDSENTRYW = 56;

export function allocSOUNDSENTRYW(data?: Partial<SOUNDSENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofSOUNDSENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.iFSTextEffect !== undefined) view.setUint32(8, Number(data.iFSTextEffect), true);
  // 0x0c: u32
  if (data?.iFSTextEffectMSec !== undefined) view.setUint32(12, Number(data.iFSTextEffectMSec), true);
  // 0x10: u32
  if (data?.iFSTextEffectColorBits !== undefined) view.setUint32(16, Number(data.iFSTextEffectColorBits), true);
  // 0x14: u32
  if (data?.iFSGrafEffect !== undefined) view.setUint32(20, Number(data.iFSGrafEffect), true);
  // 0x18: u32
  if (data?.iFSGrafEffectMSec !== undefined) view.setUint32(24, Number(data.iFSGrafEffectMSec), true);
  // 0x1c: u32
  if (data?.iFSGrafEffectColor !== undefined) view.setUint32(28, Number(data.iFSGrafEffectColor), true);
  // 0x20: u32
  if (data?.iWindowsEffect !== undefined) view.setUint32(32, Number(data.iWindowsEffect), true);
  // 0x24: u32
  if (data?.iWindowsEffectMSec !== undefined) view.setUint32(36, Number(data.iWindowsEffectMSec), true);
  // 0x28: buffer
  if (data?.lpszWindowsEffectDLL !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszWindowsEffectDLL);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.iWindowsEffectOrdinal !== undefined) view.setUint32(48, Number(data.iWindowsEffectOrdinal), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Accessibility.TOGGLEKEYS (size: 8)
 */
export interface TOGGLEKEYS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofTOGGLEKEYS = 8;

export function allocTOGGLEKEYS(data?: Partial<TOGGLEKEYS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOGGLEKEYS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

export type WPARAM = Deno.PointerValue;

export type LRESULT = Deno.PointerValue;

export type HRESULT = number;

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export type LPARAM = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

// Native Libraries

try {
  var libOLEACC_dll = Deno.dlopen("OLEACC.dll", {
    LresultFromObject: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    ObjectFromLresult: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WindowFromAccessibleObject: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    AccessibleObjectFromWindow: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    AccessibleObjectFromEvent: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    AccessibleObjectFromPoint: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AccessibleChildren: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    GetRoleTextA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    GetRoleTextW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    GetStateTextA: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    GetStateTextW: {
      parameters: ["u32", "buffer", "u32"],
      result: "u32",
    },
    GetOleaccVersionInfo: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    CreateStdAccessibleObject: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    CreateStdAccessibleProxyA: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    CreateStdAccessibleProxyW: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    AccSetRunningUtilityState: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    AccNotifyTouchInteraction: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUIAutomationCore_dll = Deno.dlopen("UIAutomationCore.dll", {
    UiaGetErrorDescription: {
      parameters: ["pointer"],
      result: "i32",
    },
    UiaHUiaNodeFromVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaHPatternObjectFromVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaHTextRangeFromVariant: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaNodeRelease: {
      parameters: ["pointer"],
      result: "i32",
    },
    UiaGetPropertyValue: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    UiaGetPatternProvider: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    UiaGetRuntimeId: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaSetFocus: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaNavigate: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    UiaGetUpdatedCache: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    UiaFind: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    UiaNodeFromPoint: {
      parameters: ["f64", "f64", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    UiaNodeFromFocus: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    UiaNodeFromHandle: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaNodeFromProvider: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaGetRootNode: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaRegisterProviderCallback: {
      parameters: ["pointer"],
      result: "void",
    },
    UiaLookupId: {
      parameters: ["i32", "pointer"],
      result: "i32",
    },
    UiaGetReservedNotSupportedValue: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaGetReservedMixedAttributeValue: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaClientsAreListening: {
      parameters: [],
      result: "i32",
    },
    UiaRaiseAutomationPropertyChangedEvent: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    UiaRaiseAutomationEvent: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    UiaRaiseStructureChangedEvent: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    UiaRaiseAsyncContentLoadedEvent: {
      parameters: ["pointer", "i32", "f64"],
      result: "pointer",
    },
    UiaRaiseTextEditTextChangedEvent: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    UiaRaiseChangesEvent: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    UiaRaiseNotificationEvent: {
      parameters: ["pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    UiaRaiseActiveTextPositionChangedEvent: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaAddEvent: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    UiaRemoveEvent: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaEventAddWindow: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaEventRemoveWindow: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DockPattern_SetDockPosition: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    ExpandCollapsePattern_Collapse: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ExpandCollapsePattern_Expand: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GridPattern_GetItem: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    InvokePattern_Invoke: {
      parameters: ["pointer"],
      result: "pointer",
    },
    MultipleViewPattern_GetViewName: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    MultipleViewPattern_SetCurrentView: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    RangeValuePattern_SetValue: {
      parameters: ["pointer", "f64"],
      result: "pointer",
    },
    ScrollItemPattern_ScrollIntoView: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ScrollPattern_Scroll: {
      parameters: ["pointer", "i32", "i32"],
      result: "pointer",
    },
    ScrollPattern_SetScrollPercent: {
      parameters: ["pointer", "f64", "f64"],
      result: "pointer",
    },
    SelectionItemPattern_AddToSelection: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SelectionItemPattern_RemoveFromSelection: {
      parameters: ["pointer"],
      result: "pointer",
    },
    SelectionItemPattern_Select: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TogglePattern_Toggle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TransformPattern_Move: {
      parameters: ["pointer", "f64", "f64"],
      result: "pointer",
    },
    TransformPattern_Resize: {
      parameters: ["pointer", "f64", "f64"],
      result: "pointer",
    },
    TransformPattern_Rotate: {
      parameters: ["pointer", "f64"],
      result: "pointer",
    },
    ValuePattern_SetValue: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    WindowPattern_Close: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WindowPattern_SetWindowVisualState: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    WindowPattern_WaitForInputIdle: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    TextPattern_GetSelection: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextPattern_GetVisibleRanges: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextPattern_RangeFromChild: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    TextPattern_RangeFromPoint: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    TextPattern_get_DocumentRange: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextPattern_get_SupportedTextSelection: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextRange_Clone: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextRange_Compare: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    TextRange_CompareEndpoints: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_ExpandToEnclosingUnit: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    TextRange_GetAttributeValue: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_FindAttribute: {
      parameters: ["pointer", "i32", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_FindText: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_GetBoundingRectangles: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextRange_GetEnclosingElement: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    TextRange_GetText: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_Move: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_MoveEndpointByUnit: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer"],
      result: "pointer",
    },
    TextRange_MoveEndpointByRange: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "pointer",
    },
    TextRange_Select: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TextRange_AddToSelection: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TextRange_RemoveFromSelection: {
      parameters: ["pointer"],
      result: "pointer",
    },
    TextRange_ScrollIntoView: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    TextRange_GetChildren: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ItemContainerPattern_FindItemByProperty: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    LegacyIAccessiblePattern_Select: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    LegacyIAccessiblePattern_DoDefaultAction: {
      parameters: ["pointer"],
      result: "pointer",
    },
    LegacyIAccessiblePattern_SetValue: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    LegacyIAccessiblePattern_GetIAccessible: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SynchronizedInputPattern_StartListening: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    SynchronizedInputPattern_Cancel: {
      parameters: ["pointer"],
      result: "pointer",
    },
    VirtualizedItemPattern_Realize: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaPatternRelease: {
      parameters: ["pointer"],
      result: "i32",
    },
    UiaTextRangeRelease: {
      parameters: ["pointer"],
      result: "i32",
    },
    UiaReturnRawElementProvider: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    UiaHostProviderFromHwnd: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UiaProviderForNonClient: {
      parameters: ["pointer", "i32", "i32", "pointer"],
      result: "pointer",
    },
    UiaIAccessibleFromProvider: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    UiaProviderFromIAccessible: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "pointer",
    },
    UiaDisconnectAllProviders: {
      parameters: [],
      result: "pointer",
    },
    UiaDisconnectProvider: {
      parameters: ["pointer"],
      result: "pointer",
    },
    UiaHasServerSideProvider: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    RegisterPointerInputTarget: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    UnregisterPointerInputTarget: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    RegisterPointerInputTargetEx: {
      parameters: ["pointer", "i32", "i32"],
      result: "i32",
    },
    UnregisterPointerInputTargetEx: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    NotifyWinEvent: {
      parameters: ["u32", "pointer", "i32", "i32"],
      result: "void",
    },
    SetWinEventHook: {
      parameters: ["u32", "u32", "pointer", "pointer", "u32", "u32", "u32"],
      result: "pointer",
    },
    IsWinEventHookInstalled: {
      parameters: ["u32"],
      result: "i32",
    },
    UnhookWinEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function LresultFromObject(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  wParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  punk: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.LresultFromObject(util.toPointer(riid), util.toPointer(wParam), util.toPointer(punk)));
}

export function ObjectFromLresult(
  lResult: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  wParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  ppvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.ObjectFromLresult(util.toPointer(lResult), util.toPointer(riid), util.toPointer(wParam), util.toPointer(ppvObject)));
}

export function WindowFromAccessibleObject(
  param0: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IAccessible */,
  phwnd: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.WindowFromAccessibleObject(util.toPointer(param0), util.toPointer(phwnd)));
}

export function AccessibleObjectFromWindow(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwId: number /* u32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.AccessibleObjectFromWindow(util.hwndToFfi(hwnd), dwId, util.toPointer(riid), util.toPointer(ppvObject)));
}

export function AccessibleObjectFromEvent(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwId: number /* u32 */,
  dwChildId: number /* u32 */,
  ppacc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarChild: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.AccessibleObjectFromEvent(util.hwndToFfi(hwnd), dwId, dwChildId, util.toPointer(ppacc), util.toPointer(pvarChild)));
}

export function AccessibleObjectFromPoint(
  ptScreen: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.POINT */,
  ppacc: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarChild: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.AccessibleObjectFromPoint(util.toPointer(ptScreen), util.toPointer(ppacc), util.toPointer(pvarChild)));
}

export function AccessibleChildren(
  paccContainer: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IAccessible */,
  iChildStart: number /* i32 */,
  cChildren: number /* i32 */,
  rgvarChildren: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcObtained: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.AccessibleChildren(util.toPointer(paccContainer), iChildStart, cChildren, util.toPointer(rgvarChildren), util.toPointer(pcObtained)));
}

export function GetRoleTextA(
  lRole: number /* u32 */,
  lpszRole: string | null /* Windows.Win32.Foundation.PSTR */,
  cchRoleMax: number /* u32 */,
): number /* u32 */ {
  return libOLEACC_dll.GetRoleTextA(lRole, util.pstrToFfi(lpszRole), cchRoleMax);
}

export function GetRoleTextW(
  lRole: number /* u32 */,
  lpszRole: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchRoleMax: number /* u32 */,
): number /* u32 */ {
  return libOLEACC_dll.GetRoleTextW(lRole, util.pwstrToFfi(lpszRole), cchRoleMax);
}

export function GetStateTextA(
  lStateBit: number /* u32 */,
  lpszState: string | null /* Windows.Win32.Foundation.PSTR */,
  cchState: number /* u32 */,
): number /* u32 */ {
  return libOLEACC_dll.GetStateTextA(lStateBit, util.pstrToFfi(lpszState), cchState);
}

export function GetStateTextW(
  lStateBit: number /* u32 */,
  lpszState: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchState: number /* u32 */,
): number /* u32 */ {
  return libOLEACC_dll.GetStateTextW(lStateBit, util.pwstrToFfi(lpszState), cchState);
}

export function GetOleaccVersionInfo(
  pVer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBuild: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libOLEACC_dll.GetOleaccVersionInfo(util.toPointer(pVer), util.toPointer(pBuild));
}

export function CreateStdAccessibleObject(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  idObject: number /* i32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.CreateStdAccessibleObject(util.hwndToFfi(hwnd), idObject, util.toPointer(riid), util.toPointer(ppvObject)));
}

export function CreateStdAccessibleProxyA(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  idObject: number /* i32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.CreateStdAccessibleProxyA(util.hwndToFfi(hwnd), util.pstrToFfi(pClassName), idObject, util.toPointer(riid), util.toPointer(ppvObject)));
}

export function CreateStdAccessibleProxyW(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  idObject: number /* i32 */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvObject: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.CreateStdAccessibleProxyW(util.hwndToFfi(hwnd), util.pwstrToFfi(pClassName), idObject, util.toPointer(riid), util.toPointer(ppvObject)));
}

export function AccSetRunningUtilityState(
  hwndApp: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwUtilityStateMask: number /* u32 */,
  dwUtilityState: ACC_UTILITY_STATE_FLAGS /* Windows.Win32.UI.Accessibility.ACC_UTILITY_STATE_FLAGS */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.AccSetRunningUtilityState(util.hwndToFfi(hwndApp), dwUtilityStateMask, dwUtilityState));
}

export function AccNotifyTouchInteraction(
  hwndApp: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hwndTarget: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ptTarget: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.POINT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libOLEACC_dll.AccNotifyTouchInteraction(util.hwndToFfi(hwndApp), util.hwndToFfi(hwndTarget), util.toPointer(ptTarget)));
}

export function UiaGetErrorDescription(
  pDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUIAutomationCore_dll.UiaGetErrorDescription(util.toPointer(pDescription)));
}

export function UiaHUiaNodeFromVariant(
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
  phnode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaHUiaNodeFromVariant(util.toPointer(pvar), util.toPointer(phnode)));
}

export function UiaHPatternObjectFromVariant(
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
  phobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaHPatternObjectFromVariant(util.toPointer(pvar), util.toPointer(phobj)));
}

export function UiaHTextRangeFromVariant(
  pvar: Deno.PointerValue | Uint8Array | null /* ptr */,
  phtextrange: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaHTextRangeFromVariant(util.toPointer(pvar), util.toPointer(phtextrange)));
}

export function UiaNodeRelease(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUIAutomationCore_dll.UiaNodeRelease(util.toPointer(hnode)));
}

export function UiaGetPropertyValue(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  propertyId: number /* i32 */,
  pValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetPropertyValue(util.toPointer(hnode), propertyId, util.toPointer(pValue)));
}

export function UiaGetPatternProvider(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  patternId: number /* i32 */,
  phobj: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetPatternProvider(util.toPointer(hnode), patternId, util.toPointer(phobj)));
}

export function UiaGetRuntimeId(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  pruntimeId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetRuntimeId(util.toPointer(hnode), util.toPointer(pruntimeId)));
}

export function UiaSetFocus(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaSetFocus(util.toPointer(hnode)));
}

export function UiaNavigate(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  direction: NavigateDirection /* Windows.Win32.UI.Accessibility.NavigateDirection */,
  pCondition: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRequestedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppTreeStructure: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaNavigate(util.toPointer(hnode), direction, util.toPointer(pCondition), util.toPointer(pRequest), util.toPointer(ppRequestedData), util.toPointer(ppTreeStructure)));
}

export function UiaGetUpdatedCache(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  normalizeState: NormalizeState /* Windows.Win32.UI.Accessibility.NormalizeState */,
  pNormalizeCondition: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRequestedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppTreeStructure: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetUpdatedCache(util.toPointer(hnode), util.toPointer(pRequest), normalizeState, util.toPointer(pNormalizeCondition), util.toPointer(ppRequestedData), util.toPointer(ppTreeStructure)));
}

export function UiaFind(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  pParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRequestedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppOffsets: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppTreeStructures: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaFind(util.toPointer(hnode), util.toPointer(pParams), util.toPointer(pRequest), util.toPointer(ppRequestedData), util.toPointer(ppOffsets), util.toPointer(ppTreeStructures)));
}

export function UiaNodeFromPoint(
  x: number /* f64 */,
  y: number /* f64 */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRequestedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppTreeStructure: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaNodeFromPoint(x, y, util.toPointer(pRequest), util.toPointer(ppRequestedData), util.toPointer(ppTreeStructure)));
}

export function UiaNodeFromFocus(
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRequestedData: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppTreeStructure: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaNodeFromFocus(util.toPointer(pRequest), util.toPointer(ppRequestedData), util.toPointer(ppTreeStructure)));
}

export function UiaNodeFromHandle(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  phnode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaNodeFromHandle(util.hwndToFfi(hwnd), util.toPointer(phnode)));
}

export function UiaNodeFromProvider(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  phnode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaNodeFromProvider(util.toPointer(pProvider), util.toPointer(phnode)));
}

export function UiaGetRootNode(
  phnode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetRootNode(util.toPointer(phnode)));
}

export function UiaRegisterProviderCallback(
  pCallback: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libUIAutomationCore_dll.UiaRegisterProviderCallback(util.toPointer(pCallback));
}

export function UiaLookupId(
  type: AutomationIdentifierType /* Windows.Win32.UI.Accessibility.AutomationIdentifierType */,
  pGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libUIAutomationCore_dll.UiaLookupId(type, util.toPointer(pGuid));
}

export function UiaGetReservedNotSupportedValue(
  punkNotSupportedValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetReservedNotSupportedValue(util.toPointer(punkNotSupportedValue)));
}

export function UiaGetReservedMixedAttributeValue(
  punkMixedAttributeValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaGetReservedMixedAttributeValue(util.toPointer(punkMixedAttributeValue)));
}

export function UiaClientsAreListening(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUIAutomationCore_dll.UiaClientsAreListening());
}

export function UiaRaiseAutomationPropertyChangedEvent(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  id: UIA_PROPERTY_ID /* Windows.Win32.UI.Accessibility.UIA_PROPERTY_ID */,
  oldValue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.VARIANT */,
  newValue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.VARIANT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseAutomationPropertyChangedEvent(util.toPointer(pProvider), id, util.toPointer(oldValue), util.toPointer(newValue)));
}

export function UiaRaiseAutomationEvent(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  id: UIA_EVENT_ID /* Windows.Win32.UI.Accessibility.UIA_EVENT_ID */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseAutomationEvent(util.toPointer(pProvider), id));
}

export function UiaRaiseStructureChangedEvent(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  structureChangeType: StructureChangeType /* Windows.Win32.UI.Accessibility.StructureChangeType */,
  pRuntimeId: Deno.PointerValue | Uint8Array | null /* ptr */,
  cRuntimeIdLen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseStructureChangedEvent(util.toPointer(pProvider), structureChangeType, util.toPointer(pRuntimeId), cRuntimeIdLen));
}

export function UiaRaiseAsyncContentLoadedEvent(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  asyncContentLoadedState: AsyncContentLoadedState /* Windows.Win32.UI.Accessibility.AsyncContentLoadedState */,
  percentComplete: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseAsyncContentLoadedEvent(util.toPointer(pProvider), asyncContentLoadedState, percentComplete));
}

export function UiaRaiseTextEditTextChangedEvent(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  textEditChangeType: TextEditChangeType /* Windows.Win32.UI.Accessibility.TextEditChangeType */,
  pChangedData: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseTextEditTextChangedEvent(util.toPointer(pProvider), textEditChangeType, util.toPointer(pChangedData)));
}

export function UiaRaiseChangesEvent(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  eventIdCount: number /* i32 */,
  pUiaChanges: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseChangesEvent(util.toPointer(pProvider), eventIdCount, util.toPointer(pUiaChanges)));
}

export function UiaRaiseNotificationEvent(
  provider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  notificationKind: NotificationKind /* Windows.Win32.UI.Accessibility.NotificationKind */,
  notificationProcessing: NotificationProcessing /* Windows.Win32.UI.Accessibility.NotificationProcessing */,
  displayString: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  activityId: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseNotificationEvent(util.toPointer(provider), notificationKind, notificationProcessing, util.toPointer(displayString), util.toPointer(activityId)));
}

export function UiaRaiseActiveTextPositionChangedEvent(
  provider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  textRange: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.ITextRangeProvider */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRaiseActiveTextPositionChangedEvent(util.toPointer(provider), util.toPointer(textRange)));
}

export function UiaAddEvent(
  hnode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  eventId: number /* i32 */,
  pCallback: Deno.PointerValue | Uint8Array | null /* ptr */,
  scope: TreeScope /* Windows.Win32.UI.Accessibility.TreeScope */,
  pProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  cProperties: number /* i32 */,
  pRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  phEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaAddEvent(util.toPointer(hnode), eventId, util.toPointer(pCallback), scope, util.toPointer(pProperties), cProperties, util.toPointer(pRequest), util.toPointer(phEvent)));
}

export function UiaRemoveEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAEVENT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaRemoveEvent(util.toPointer(hEvent)));
}

export function UiaEventAddWindow(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAEVENT */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaEventAddWindow(util.toPointer(hEvent), util.hwndToFfi(hwnd)));
}

export function UiaEventRemoveWindow(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAEVENT */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaEventRemoveWindow(util.toPointer(hEvent), util.hwndToFfi(hwnd)));
}

export function DockPattern_SetDockPosition(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  dockPosition: DockPosition /* Windows.Win32.UI.Accessibility.DockPosition */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.DockPattern_SetDockPosition(util.toPointer(hobj), dockPosition));
}

export function ExpandCollapsePattern_Collapse(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ExpandCollapsePattern_Collapse(util.toPointer(hobj)));
}

export function ExpandCollapsePattern_Expand(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ExpandCollapsePattern_Expand(util.toPointer(hobj)));
}

export function GridPattern_GetItem(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  row: number /* i32 */,
  column: number /* i32 */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.GridPattern_GetItem(util.toPointer(hobj), row, column, util.toPointer(pResult)));
}

export function InvokePattern_Invoke(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.InvokePattern_Invoke(util.toPointer(hobj)));
}

export function MultipleViewPattern_GetViewName(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  viewId: number /* i32 */,
  ppStr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.MultipleViewPattern_GetViewName(util.toPointer(hobj), viewId, util.toPointer(ppStr)));
}

export function MultipleViewPattern_SetCurrentView(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  viewId: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.MultipleViewPattern_SetCurrentView(util.toPointer(hobj), viewId));
}

export function RangeValuePattern_SetValue(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  val: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.RangeValuePattern_SetValue(util.toPointer(hobj), val));
}

export function ScrollItemPattern_ScrollIntoView(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ScrollItemPattern_ScrollIntoView(util.toPointer(hobj)));
}

export function ScrollPattern_Scroll(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  horizontalAmount: ScrollAmount /* Windows.Win32.UI.Accessibility.ScrollAmount */,
  verticalAmount: ScrollAmount /* Windows.Win32.UI.Accessibility.ScrollAmount */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ScrollPattern_Scroll(util.toPointer(hobj), horizontalAmount, verticalAmount));
}

export function ScrollPattern_SetScrollPercent(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  horizontalPercent: number /* f64 */,
  verticalPercent: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ScrollPattern_SetScrollPercent(util.toPointer(hobj), horizontalPercent, verticalPercent));
}

export function SelectionItemPattern_AddToSelection(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.SelectionItemPattern_AddToSelection(util.toPointer(hobj)));
}

export function SelectionItemPattern_RemoveFromSelection(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.SelectionItemPattern_RemoveFromSelection(util.toPointer(hobj)));
}

export function SelectionItemPattern_Select(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.SelectionItemPattern_Select(util.toPointer(hobj)));
}

export function TogglePattern_Toggle(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TogglePattern_Toggle(util.toPointer(hobj)));
}

export function TransformPattern_Move(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  x: number /* f64 */,
  y: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TransformPattern_Move(util.toPointer(hobj), x, y));
}

export function TransformPattern_Resize(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  width: number /* f64 */,
  height: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TransformPattern_Resize(util.toPointer(hobj), width, height));
}

export function TransformPattern_Rotate(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  degrees: number /* f64 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TransformPattern_Rotate(util.toPointer(hobj), degrees));
}

export function ValuePattern_SetValue(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  pVal: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ValuePattern_SetValue(util.toPointer(hobj), util.pwstrToFfi(pVal)));
}

export function WindowPattern_Close(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.WindowPattern_Close(util.toPointer(hobj)));
}

export function WindowPattern_SetWindowVisualState(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  state: WindowVisualState /* Windows.Win32.UI.Accessibility.WindowVisualState */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.WindowPattern_SetWindowVisualState(util.toPointer(hobj), state));
}

export function WindowPattern_WaitForInputIdle(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  milliseconds: number /* i32 */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.WindowPattern_WaitForInputIdle(util.toPointer(hobj), milliseconds, util.toPointer(pResult)));
}

export function TextPattern_GetSelection(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextPattern_GetSelection(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextPattern_GetVisibleRanges(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextPattern_GetVisibleRanges(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextPattern_RangeFromChild(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  hnodeChild: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextPattern_RangeFromChild(util.toPointer(hobj), util.toPointer(hnodeChild), util.toPointer(pRetVal)));
}

export function TextPattern_RangeFromPoint(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  point: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.UiaPoint */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextPattern_RangeFromPoint(util.toPointer(hobj), util.toPointer(point), util.toPointer(pRetVal)));
}

export function TextPattern_get_DocumentRange(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextPattern_get_DocumentRange(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextPattern_get_SupportedTextSelection(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextPattern_get_SupportedTextSelection(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextRange_Clone(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_Clone(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextRange_Compare(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  range: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_Compare(util.toPointer(hobj), util.toPointer(range), util.toPointer(pRetVal)));
}

export function TextRange_CompareEndpoints(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  endpoint: TextPatternRangeEndpoint /* Windows.Win32.UI.Accessibility.TextPatternRangeEndpoint */,
  targetRange: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  targetEndpoint: TextPatternRangeEndpoint /* Windows.Win32.UI.Accessibility.TextPatternRangeEndpoint */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_CompareEndpoints(util.toPointer(hobj), endpoint, util.toPointer(targetRange), targetEndpoint, util.toPointer(pRetVal)));
}

export function TextRange_ExpandToEnclosingUnit(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  unit: TextUnit /* Windows.Win32.UI.Accessibility.TextUnit */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_ExpandToEnclosingUnit(util.toPointer(hobj), unit));
}

export function TextRange_GetAttributeValue(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  attributeId: number /* i32 */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_GetAttributeValue(util.toPointer(hobj), attributeId, util.toPointer(pRetVal)));
}

export function TextRange_FindAttribute(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  attributeId: number /* i32 */,
  val: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.VARIANT */,
  backward: boolean /* Windows.Win32.Foundation.BOOL */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_FindAttribute(util.toPointer(hobj), attributeId, util.toPointer(val), util.boolToFfi(backward), util.toPointer(pRetVal)));
}

export function TextRange_FindText(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  text: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BSTR */,
  backward: boolean /* Windows.Win32.Foundation.BOOL */,
  ignoreCase: boolean /* Windows.Win32.Foundation.BOOL */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_FindText(util.toPointer(hobj), util.toPointer(text), util.boolToFfi(backward), util.boolToFfi(ignoreCase), util.toPointer(pRetVal)));
}

export function TextRange_GetBoundingRectangles(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_GetBoundingRectangles(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextRange_GetEnclosingElement(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_GetEnclosingElement(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function TextRange_GetText(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  maxLength: number /* i32 */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_GetText(util.toPointer(hobj), maxLength, util.toPointer(pRetVal)));
}

export function TextRange_Move(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  unit: TextUnit /* Windows.Win32.UI.Accessibility.TextUnit */,
  count: number /* i32 */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_Move(util.toPointer(hobj), unit, count, util.toPointer(pRetVal)));
}

export function TextRange_MoveEndpointByUnit(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  endpoint: TextPatternRangeEndpoint /* Windows.Win32.UI.Accessibility.TextPatternRangeEndpoint */,
  unit: TextUnit /* Windows.Win32.UI.Accessibility.TextUnit */,
  count: number /* i32 */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_MoveEndpointByUnit(util.toPointer(hobj), endpoint, unit, count, util.toPointer(pRetVal)));
}

export function TextRange_MoveEndpointByRange(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  endpoint: TextPatternRangeEndpoint /* Windows.Win32.UI.Accessibility.TextPatternRangeEndpoint */,
  targetRange: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  targetEndpoint: TextPatternRangeEndpoint /* Windows.Win32.UI.Accessibility.TextPatternRangeEndpoint */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_MoveEndpointByRange(util.toPointer(hobj), endpoint, util.toPointer(targetRange), targetEndpoint));
}

export function TextRange_Select(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_Select(util.toPointer(hobj)));
}

export function TextRange_AddToSelection(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_AddToSelection(util.toPointer(hobj)));
}

export function TextRange_RemoveFromSelection(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_RemoveFromSelection(util.toPointer(hobj)));
}

export function TextRange_ScrollIntoView(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  alignToTop: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_ScrollIntoView(util.toPointer(hobj), util.boolToFfi(alignToTop)));
}

export function TextRange_GetChildren(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
  pRetVal: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.TextRange_GetChildren(util.toPointer(hobj), util.toPointer(pRetVal)));
}

export function ItemContainerPattern_FindItemByProperty(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  hnodeStartAfter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIANODE */,
  propertyId: number /* i32 */,
  value: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.VARIANT */,
  pFound: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.ItemContainerPattern_FindItemByProperty(util.toPointer(hobj), util.toPointer(hnodeStartAfter), propertyId, util.toPointer(value), util.toPointer(pFound)));
}

export function LegacyIAccessiblePattern_Select(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  flagsSelect: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.LegacyIAccessiblePattern_Select(util.toPointer(hobj), flagsSelect));
}

export function LegacyIAccessiblePattern_DoDefaultAction(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.LegacyIAccessiblePattern_DoDefaultAction(util.toPointer(hobj)));
}

export function LegacyIAccessiblePattern_SetValue(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  szValue: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.LegacyIAccessiblePattern_SetValue(util.toPointer(hobj), util.pwstrToFfi(szValue)));
}

export function LegacyIAccessiblePattern_GetIAccessible(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  pAccessible: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.LegacyIAccessiblePattern_GetIAccessible(util.toPointer(hobj), util.toPointer(pAccessible)));
}

export function SynchronizedInputPattern_StartListening(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
  inputType: SynchronizedInputType /* Windows.Win32.UI.Accessibility.SynchronizedInputType */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.SynchronizedInputPattern_StartListening(util.toPointer(hobj), inputType));
}

export function SynchronizedInputPattern_Cancel(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.SynchronizedInputPattern_Cancel(util.toPointer(hobj)));
}

export function VirtualizedItemPattern_Realize(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.VirtualizedItemPattern_Realize(util.toPointer(hobj)));
}

export function UiaPatternRelease(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIAPATTERNOBJECT */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUIAutomationCore_dll.UiaPatternRelease(util.toPointer(hobj)));
}

export function UiaTextRangeRelease(
  hobj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HUIATEXTRANGE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUIAutomationCore_dll.UiaTextRangeRelease(util.toPointer(hobj)));
}

export function UiaReturnRawElementProvider(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.WPARAM */,
  lParam: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.LPARAM */,
  el: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.LRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaReturnRawElementProvider(util.hwndToFfi(hwnd), util.toPointer(wParam), util.toPointer(lParam), util.toPointer(el)));
}

export function UiaHostProviderFromHwnd(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  ppProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaHostProviderFromHwnd(util.hwndToFfi(hwnd), util.toPointer(ppProvider)));
}

export function UiaProviderForNonClient(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  idObject: number /* i32 */,
  idChild: number /* i32 */,
  ppProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaProviderForNonClient(util.hwndToFfi(hwnd), idObject, idChild, util.toPointer(ppProvider)));
}

export function UiaIAccessibleFromProvider(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
  dwFlags: number /* u32 */,
  ppAccessible: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvarChild: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaIAccessibleFromProvider(util.toPointer(pProvider), dwFlags, util.toPointer(ppAccessible), util.toPointer(pvarChild)));
}

export function UiaProviderFromIAccessible(
  pAccessible: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IAccessible */,
  idChild: number /* i32 */,
  dwFlags: number /* u32 */,
  ppProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaProviderFromIAccessible(util.toPointer(pAccessible), idChild, dwFlags, util.toPointer(ppProvider)));
}

export function UiaDisconnectAllProviders(): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaDisconnectAllProviders());
}

export function UiaDisconnectProvider(
  pProvider: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.IRawElementProviderSimple */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libUIAutomationCore_dll.UiaDisconnectProvider(util.toPointer(pProvider)));
}

export function UiaHasServerSideProvider(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUIAutomationCore_dll.UiaHasServerSideProvider(util.hwndToFfi(hwnd)));
}

export function RegisterPointerInputTarget(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pointerType: POINTER_INPUT_TYPE /* Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RegisterPointerInputTarget(util.hwndToFfi(hwnd), pointerType));
}

export function UnregisterPointerInputTarget(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pointerType: POINTER_INPUT_TYPE /* Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnregisterPointerInputTarget(util.hwndToFfi(hwnd), pointerType));
}

export function RegisterPointerInputTargetEx(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pointerType: POINTER_INPUT_TYPE /* Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */,
  fObserve: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.RegisterPointerInputTargetEx(util.hwndToFfi(hwnd), pointerType, util.boolToFfi(fObserve)));
}

export function UnregisterPointerInputTargetEx(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pointerType: POINTER_INPUT_TYPE /* Windows.Win32.UI.WindowsAndMessaging.POINTER_INPUT_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnregisterPointerInputTargetEx(util.hwndToFfi(hwnd), pointerType));
}

export function NotifyWinEvent(
  event: number /* u32 */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  idObject: number /* i32 */,
  idChild: number /* i32 */,
): void /* void */ {
  return libUSER32_dll.NotifyWinEvent(event, util.hwndToFfi(hwnd), idObject, idChild);
}

export function SetWinEventHook(
  eventMin: number /* u32 */,
  eventMax: number /* u32 */,
  hmodWinEventProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  pfnWinEventProc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.WINEVENTPROC */,
  idProcess: number /* u32 */,
  idThread: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HWINEVENTHOOK */ {
  return util.pointerFromFfi(libUSER32_dll.SetWinEventHook(eventMin, eventMax, util.toPointer(hmodWinEventProc), util.toPointer(pfnWinEventProc), idProcess, idThread, dwFlags));
}

export function IsWinEventHookInstalled(
  event: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.IsWinEventHookInstalled(event));
}

export function UnhookWinEvent(
  hWinEventHook: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.Accessibility.HWINEVENTHOOK */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.UnhookWinEvent(util.toPointer(hWinEventHook)));
}

