/// Auto-generated by Deno Win32: Windows.Win32.UI.TabletPC.Apis

import * as util from "../../util.ts";

// Enums
export type PROPERTY_UNITS = number;
export type INK_METRIC_FLAGS = number;
export type GET_DANDIDATE_FLAGS = number;
export type InkSelectionConstants = number;
export type InkBoundingBoxMode = number;
export type InkExtractFlags = number;
export type InkPersistenceFormat = number;
export type InkPersistenceCompressionMode = number;
export type InkPenTip = number;
export type InkRasterOperation = number;
export type InkMousePointer = number;
export type InkClipboardModes = number;
export type InkClipboardFormats = number;
export type SelectionHitResult = number;
export type InkRecognitionStatus = number;
export type DISPID_InkRectangle = number;
export type DISPID_InkExtendedProperty = number;
export type DISPID_InkExtendedProperties = number;
export type DISPID_InkDrawingAttributes = number;
export type DISPID_InkTransform = number;
export type InkApplicationGesture = number;
export type InkSystemGesture = number;
export type InkRecognitionConfidence = number;
export type DISPID_InkGesture = number;
export type DISPID_InkCursor = number;
export type DISPID_InkCursors = number;
export type InkCursorButtonState = number;
export type DISPID_InkCursorButton = number;
export type DISPID_InkCursorButtons = number;
export type TabletHardwareCapabilities = number;
export type TabletPropertyMetricUnit = number;
export type DISPID_InkTablet = number;
export type TabletDeviceKind = number;
export type DISPID_InkTablet2 = number;
export type DISPID_InkTablet3 = number;
export type DISPID_InkTablets = number;
export type DISPID_InkStrokeDisp = number;
export type DISPID_InkStrokes = number;
export type DISPID_InkCustomStrokes = number;
export type DISPID_StrokeEvent = number;
export type DISPID_Ink = number;
export type DISPID_InkEvent = number;
export type DISPID_InkRenderer = number;
export type InkCollectorEventInterest = number;
export type InkMouseButton = number;
export type InkShiftKeyModifierFlags = number;
export type DISPID_InkCollectorEvent = number;
export type InkOverlayEditingMode = number;
export type InkOverlayAttachMode = number;
export type InkPictureSizeMode = number;
export type InkOverlayEraserMode = number;
export type InkCollectionMode = number;
export type DISPID_InkCollector = number;
export type DISPID_InkRecognizer = number;
export type InkRecognizerCapabilities = number;
export type DISPID_InkRecognizer2 = number;
export type DISPID_InkRecognizers = number;
export type InkRecognizerCharacterAutoCompletionMode = number;
export type InkRecognitionModes = number;
export type DISPID_InkRecognitionEvent = number;
export type DISPID_InkRecoContext = number;
export type DISPID_InkRecoContext2 = number;
export type InkRecognitionAlternatesSelection = number;
export type DISPID_InkRecognitionResult = number;
export type DISPID_InkRecoAlternate = number;
export type DISPID_InkRecognitionAlternates = number;
export type DISPID_InkRecognizerGuide = number;
export type DISPID_InkWordList = number;
export type DISPID_InkWordList2 = number;
export type InkDivisionType = number;
export type DISPID_InkDivider = number;
export type DISPID_InkDivisionResult = number;
export type DISPID_InkDivisionUnit = number;
export type DISPID_InkDivisionUnits = number;
export type DISPID_PenInputPanel = number;
export type DISPID_PenInputPanelEvents = number;
export type VisualState = number;
export type InteractionMode = number;
export type InPlaceState = number;
export type PanelInputArea = number;
export type CorrectionMode = number;
export type CorrectionPosition = number;
export type InPlaceDirection = number;
export type EventMask = number;
export type PanelType = number;
export type FLICKDIRECTION = number;
export type FLICKMODE = number;
export type FLICKACTION_COMMANDCODE = number;
export type SCROLLDIRECTION = number;
export type KEYMODIFIER = number;
export type MouseButton = number;
export type SelAlignmentConstants = number;
export type DISPID_InkEdit = number;
export type DISPID_InkEditEvents = number;
export type InkMode = number;
export type InkInsertMode = number;
export type InkEditStatus = number;
export type InkDisplayMode = number;
export type AppearanceConstants = number;
export type BorderStyleConstants = number;
export type ScrollBarsConstants = number;
export type MICUIELEMENT = number;
export type MICUIELEMENTSTATE = number;
export type DISPID_MathInputControlEvents = number;
export type RealTimeStylusDataInterest = number;
export type StylusQueue = number;
export type RealTimeStylusLockType = number;
export type LINE_METRICS = number;
export type CONFIDENCE_LEVEL = number;
export type ALT_BREAKS = number;
export type RECO_TYPE = number;

// Constants
export const MICROSOFT_URL_EXPERIENCE_PROPERTY = `Microsoft TIP URL Experience`;
export const MICROSOFT_TIP_NO_INSERT_BUTTON_PROPERTY = `Microsoft TIP No Insert Option`;
export const MICROSOFT_TIP_COMBOBOXLIST_PROPERTY = `Microsoft TIP ComboBox List Window Identifier`;
export const MICROSOFT_TIP_OPENING_MSG = `TabletInputPanelOpening`;
export const SAFE_PARTIAL = 1;
export const BEST_COMPLETE = 2;
export const MAX_VENDORNAME = 32;
export const MAX_FRIENDLYNAME = 64;
export const MAX_LANGUAGES = 64;
export const CAC_FULL = 0;
export const CAC_PREFIX = 1;
export const CAC_RANDOM = 2;
export const ASYNC_RECO_INTERRUPTED = 1;
export const ASYNC_RECO_PROCESS_FAILED = 2;
export const ASYNC_RECO_ADDSTROKE_FAILED = 4;
export const ASYNC_RECO_SETCACMODE_FAILED = 8;
export const ASYNC_RECO_RESETCONTEXT_FAILED = 16;
export const ASYNC_RECO_SETGUIDE_FAILED = 32;
export const ASYNC_RECO_SETFLAGS_FAILED = 64;
export const ASYNC_RECO_SETFACTOID_FAILED = 128;
export const ASYNC_RECO_SETTEXTCONTEXT_FAILED = 256;
export const ASYNC_RECO_SETWORDLIST_FAILED = 512;
export const RF_DONTCARE = 1;
export const RF_OBJECT = 2;
export const RF_FREE_INPUT = 4;
export const RF_LINED_INPUT = 8;
export const RF_BOXED_INPUT = 16;
export const RF_CAC_INPUT = 32;
export const RF_RIGHT_AND_DOWN = 64;
export const RF_LEFT_AND_DOWN = 128;
export const RF_DOWN_AND_LEFT = 256;
export const RF_DOWN_AND_RIGHT = 512;
export const RF_ARBITRARY_ANGLE = 1024;
export const RF_LATTICE = 2048;
export const RF_ADVISEINKCHANGE = 4096;
export const RF_STROKEREORDER = 8192;
export const RF_PERSONALIZABLE = 16384;
export const RF_PERFORMSLINEBREAKING = 65536;
export const RF_REQUIRESSEGMENTATIONBREAKING = 131072;
export const FLICK_WM_HANDLED_MASK = 1;
export const NUM_FLICK_DIRECTIONS = 8;
export const WM_TABLET_DEFBASE = 704;
export const WM_TABLET_MAXOFFSET = 32;
export const WM_TABLET_ADDED = 712;
export const WM_TABLET_DELETED = 713;
export const WM_TABLET_FLICK = 715;
export const WM_TABLET_QUERYSYSTEMGESTURESTATUS = 716;
export const TABLET_DISABLE_PRESSANDHOLD = 1;
export const TABLET_DISABLE_PENTAPFEEDBACK = 8;
export const TABLET_DISABLE_PENBARRELFEEDBACK = 16;
export const TABLET_DISABLE_TOUCHUIFORCEON = 256;
export const TABLET_DISABLE_TOUCHUIFORCEOFF = 512;
export const TABLET_DISABLE_TOUCHSWITCH = 32768;
export const TABLET_DISABLE_FLICKS = 65536;
export const TABLET_ENABLE_FLICKSONCONTEXT = 131072;
export const TABLET_ENABLE_FLICKLEARNINGMODE = 262144;
export const TABLET_DISABLE_SMOOTHSCROLLING = 524288;
export const TABLET_DISABLE_FLICKFALLBACKKEYS = 1048576;
export const TABLET_ENABLE_MULTITOUCHDATA = 16777216;
export const MAX_PACKET_PROPERTY_COUNT = 32;
export const MAX_PACKET_BUTTON_COUNT = 32;
export const IP_CURSOR_DOWN = 1;
export const IP_INVERTED = 2;
export const IP_MARGIN = 4;
export const INK_SERIALIZED_FORMAT = `Ink Serialized Format`;
export const STR_GUID_X = `{598A6A8F-52C0-4BA0-93AF-AF357411A561}`;
export const STR_GUID_Y = `{B53F9F75-04E0-4498-A7EE-C30DBB5A9011}`;
export const STR_GUID_Z = `{735ADB30-0EBB-4788-A0E4-0F316490055D}`;
export const STR_GUID_PAKETSTATUS = `{6E0E07BF-AFE7-4CF7-87D1-AF6446208418}`;
export const STR_GUID_TIMERTICK = `{436510C5-FED3-45D1-8B76-71D3EA7A829D}`;
export const STR_GUID_SERIALNUMBER = `{78A81B56-0935-4493-BAAE-00541A8A16C4}`;
export const STR_GUID_NORMALPRESSURE = `{7307502D-F9F4-4E18-B3F2-2CE1B1A3610C}`;
export const STR_GUID_TANGENTPRESSURE = `{6DA4488B-5244-41EC-905B-32D89AB80809}`;
export const STR_GUID_BUTTONPRESSURE = `{8B7FEFC4-96AA-4BFE-AC26-8A5F0BE07BF5}`;
export const STR_GUID_XTILTORIENTATION = `{A8D07B3A-8BF0-40B0-95A9-B80A6BB787BF}`;
export const STR_GUID_YTILTORIENTATION = `{0E932389-1D77-43AF-AC00-5B950D6D4B2D}`;
export const STR_GUID_AZIMUTHORIENTATION = `{029123B4-8828-410B-B250-A0536595E5DC}`;
export const STR_GUID_ALTITUDEORIENTATION = `{82DEC5C7-F6BA-4906-894F-66D68DFC456C}`;
export const STR_GUID_TWISTORIENTATION = `{0D324960-13B2-41E4-ACE6-7AE9D43D2D3B}`;
export const STR_GUID_PITCHROTATION = `{7F7E57B7-BE37-4BE1-A356-7A84160E1893}`;
export const STR_GUID_ROLLROTATION = `{5D5D5E56-6BA9-4C5B-9FB0-851C91714E56}`;
export const STR_GUID_YAWROTATION = `{6A849980-7C3A-45B7-AA82-90A262950E89}`;
export const STR_GUID_WIDTH = `{BAABE94D-2712-48F5-BE9D-8F8B5EA0711A}`;
export const STR_GUID_HEIGHT = `{E61858D2-E447-4218-9D3F-18865C203DF4}`;
export const STR_GUID_FINGERCONTACTCONFIDENCE = `{E706C804-57F0-4F00-8A0C-853D57789BE9}`;
export const STR_GUID_DEVICE_CONTACT_ID = `{02585B91-049B-4750-9615-DF8948AB3C9C}`;
export const INKRECOGNITIONPROPERTY_LINENUMBER = `{DBF29F2C-5289-4BE8-B3D8-6EF63246253E}`;
export const INKRECOGNITIONPROPERTY_BOXNUMBER = `{2C243E3A-F733-4EB6-B1F8-B5DC5C2C4CDA}`;
export const INKRECOGNITIONPROPERTY_SEGMENTATION = `{B3C0FE6C-FB51-4164-BA2F-844AF8F983DA}`;
export const INKRECOGNITIONPROPERTY_HOTPOINT = `{CA6F40DC-5292-452a-91FB-2181C0BEC0DE}`;
export const INKRECOGNITIONPROPERTY_MAXIMUMSTROKECOUNT = `{BF0EEC4E-4B7D-47a9-8CFA-234DD24BD22A}`;
export const INKRECOGNITIONPROPERTY_POINTSPERINCH = `{7ED16B76-889C-468e-8276-0021B770187E}`;
export const INKRECOGNITIONPROPERTY_CONFIDENCELEVEL = `{7DFE11A7-FB5D-4958-8765-154ADF0D833F}`;
export const INKRECOGNITIONPROPERTY_LINEMETRICS = `{8CC24B27-30A9-4b96-9056-2D3A90DA0727}`;
export const FACTOID_NONE = `NONE`;
export const FACTOID_DEFAULT = `DEFAULT`;
export const FACTOID_SYSTEMDICTIONARY = `SYSDICT`;
export const FACTOID_WORDLIST = `WORDLIST`;
export const FACTOID_EMAIL = `EMAIL`;
export const FACTOID_WEB = `WEB`;
export const FACTOID_ONECHAR = `ONECHAR`;
export const FACTOID_NUMBER = `NUMBER`;
export const FACTOID_DIGIT = `DIGIT`;
export const FACTOID_NUMBERSIMPLE = `NUMSIMPLE`;
export const FACTOID_CURRENCY = `CURRENCY`;
export const FACTOID_POSTALCODE = `POSTALCODE`;
export const FACTOID_PERCENT = `PERCENT`;
export const FACTOID_DATE = `DATE`;
export const FACTOID_TIME = `TIME`;
export const FACTOID_TELEPHONE = `TELEPHONE`;
export const FACTOID_FILENAME = `FILENAME`;
export const FACTOID_UPPERCHAR = `UPPERCHAR`;
export const FACTOID_LOWERCHAR = `LOWERCHAR`;
export const FACTOID_PUNCCHAR = `PUNCCHAR`;
export const FACTOID_JAPANESECOMMON = `JPN_COMMON`;
export const FACTOID_CHINESESIMPLECOMMON = `CHS_COMMON`;
export const FACTOID_CHINESETRADITIONALCOMMON = `CHT_COMMON`;
export const FACTOID_KOREANCOMMON = `KOR_COMMON`;
export const FACTOID_HIRAGANA = `HIRAGANA`;
export const FACTOID_KATAKANA = `KATAKANA`;
export const FACTOID_KANJICOMMON = `KANJI_COMMON`;
export const FACTOID_KANJIRARE = `KANJI_RARE`;
export const FACTOID_BOPOMOFO = `BOPOMOFO`;
export const FACTOID_JAMO = `JAMO`;
export const FACTOID_HANGULCOMMON = `HANGUL_COMMON`;
export const FACTOID_HANGULRARE = `HANGUL_RARE`;
export const MICROSOFT_PENINPUT_PANEL_PROPERTY_T = `Microsoft PenInputPanel 1.5`;
export const INKEDIT_CLASSW = `INKEDIT`;
export const INKEDIT_CLASS = `INKEDIT`;
export const IEC__BASE = 1536;
export const EM_GETINKMODE = 1537;
export const EM_SETINKMODE = 1538;
export const EM_GETINKINSERTMODE = 1539;
export const EM_SETINKINSERTMODE = 1540;
export const EM_GETDRAWATTR = 1541;
export const EM_SETDRAWATTR = 1542;
export const EM_GETRECOTIMEOUT = 1543;
export const EM_SETRECOTIMEOUT = 1544;
export const EM_GETGESTURESTATUS = 1545;
export const EM_SETGESTURESTATUS = 1546;
export const EM_GETRECOGNIZER = 1547;
export const EM_SETRECOGNIZER = 1548;
export const EM_GETFACTOID = 1549;
export const EM_SETFACTOID = 1550;
export const EM_GETSELINK = 1551;
export const EM_SETSELINK = 1552;
export const EM_GETMOUSEICON = 1553;
export const EM_SETMOUSEICON = 1554;
export const EM_GETMOUSEPOINTER = 1555;
export const EM_SETMOUSEPOINTER = 1556;
export const EM_GETSTATUS = 1557;
export const EM_RECOGNIZE = 1558;
export const EM_GETUSEMOUSEFORINPUT = 1559;
export const EM_SETUSEMOUSEFORINPUT = 1560;
export const EM_SETSELINKDISPLAYMODE = 1561;
export const EM_GETSELINKDISPLAYMODE = 1562;
export const IECN__BASE = 2048;
export const IECN_STROKE = 2049;
export const IECN_GESTURE = 2050;
export const IECN_RECOGNITIONRESULT = 2051;
export const RECOFLAG_WORDMODE = 1;
export const RECOFLAG_COERCE = 2;
export const RECOFLAG_SINGLESEG = 4;
export const RECOFLAG_PREFIXOK = 8;
export const RECOFLAG_LINEMODE = 16;
export const RECOFLAG_DISABLEPERSONALIZATION = 32;
export const RECOFLAG_AUTOSPACE = 64;
export const RECOCONF_LOWCONFIDENCE = `-1`;
export const RECOCONF_MEDIUMCONFIDENCE = 0;
export const RECOCONF_HIGHCONFIDENCE = 1;
export const RECOCONF_NOTSET = 128;
export const GESTURE_NULL = 61440;
export const GESTURE_SCRATCHOUT = 61441;
export const GESTURE_TRIANGLE = 61442;
export const GESTURE_SQUARE = 61443;
export const GESTURE_STAR = 61444;
export const GESTURE_CHECK = 61445;
export const GESTURE_INFINITY = 61446;
export const GESTURE_CROSS = 61447;
export const GESTURE_PARAGRAPH = 61448;
export const GESTURE_SECTION = 61449;
export const GESTURE_BULLET = 61450;
export const GESTURE_BULLET_CROSS = 61451;
export const GESTURE_SQUIGGLE = 61452;
export const GESTURE_SWAP = 61453;
export const GESTURE_OPENUP = 61454;
export const GESTURE_CLOSEUP = 61455;
export const GESTURE_CURLICUE = 61456;
export const GESTURE_DOUBLE_CURLICUE = 61457;
export const GESTURE_RECTANGLE = 61458;
export const GESTURE_CIRCLE = 61472;
export const GESTURE_DOUBLE_CIRCLE = 61473;
export const GESTURE_CIRCLE_TAP = 61474;
export const GESTURE_CIRCLE_CIRCLE = 61475;
export const GESTURE_CIRCLE_CROSS = 61477;
export const GESTURE_CIRCLE_LINE_VERT = 61478;
export const GESTURE_CIRCLE_LINE_HORZ = 61479;
export const GESTURE_SEMICIRCLE_LEFT = 61480;
export const GESTURE_SEMICIRCLE_RIGHT = 61481;
export const GESTURE_CHEVRON_UP = 61488;
export const GESTURE_CHEVRON_DOWN = 61489;
export const GESTURE_CHEVRON_LEFT = 61490;
export const GESTURE_CHEVRON_RIGHT = 61491;
export const GESTURE_ARROW_UP = 61496;
export const GESTURE_ARROW_DOWN = 61497;
export const GESTURE_ARROW_LEFT = 61498;
export const GESTURE_ARROW_RIGHT = 61499;
export const GESTURE_DOUBLE_ARROW_UP = 61500;
export const GESTURE_DOUBLE_ARROW_DOWN = 61501;
export const GESTURE_DOUBLE_ARROW_LEFT = 61502;
export const GESTURE_DOUBLE_ARROW_RIGHT = 61503;
export const GESTURE_UP_ARROW_LEFT = 61504;
export const GESTURE_UP_ARROW_RIGHT = 61505;
export const GESTURE_DOWN_ARROW_LEFT = 61506;
export const GESTURE_DOWN_ARROW_RIGHT = 61507;
export const GESTURE_LEFT_ARROW_UP = 61508;
export const GESTURE_LEFT_ARROW_DOWN = 61509;
export const GESTURE_RIGHT_ARROW_UP = 61510;
export const GESTURE_RIGHT_ARROW_DOWN = 61511;
export const GESTURE_UP = 61528;
export const GESTURE_DOWN = 61529;
export const GESTURE_LEFT = 61530;
export const GESTURE_RIGHT = 61531;
export const GESTURE_DIAGONAL_LEFTUP = 61532;
export const GESTURE_DIAGONAL_RIGHTUP = 61533;
export const GESTURE_DIAGONAL_LEFTDOWN = 61534;
export const GESTURE_DIAGONAL_RIGHTDOWN = 61535;
export const GESTURE_UP_DOWN = 61536;
export const GESTURE_DOWN_UP = 61537;
export const GESTURE_LEFT_RIGHT = 61538;
export const GESTURE_RIGHT_LEFT = 61539;
export const GESTURE_UP_LEFT_LONG = 61540;
export const GESTURE_UP_RIGHT_LONG = 61541;
export const GESTURE_DOWN_LEFT_LONG = 61542;
export const GESTURE_DOWN_RIGHT_LONG = 61543;
export const GESTURE_UP_LEFT = 61544;
export const GESTURE_UP_RIGHT = 61545;
export const GESTURE_DOWN_LEFT = 61546;
export const GESTURE_DOWN_RIGHT = 61547;
export const GESTURE_LEFT_UP = 61548;
export const GESTURE_LEFT_DOWN = 61549;
export const GESTURE_RIGHT_UP = 61550;
export const GESTURE_RIGHT_DOWN = 61551;
export const GESTURE_LETTER_A = 61568;
export const GESTURE_LETTER_B = 61569;
export const GESTURE_LETTER_C = 61570;
export const GESTURE_LETTER_D = 61571;
export const GESTURE_LETTER_E = 61572;
export const GESTURE_LETTER_F = 61573;
export const GESTURE_LETTER_G = 61574;
export const GESTURE_LETTER_H = 61575;
export const GESTURE_LETTER_I = 61576;
export const GESTURE_LETTER_J = 61577;
export const GESTURE_LETTER_K = 61578;
export const GESTURE_LETTER_L = 61579;
export const GESTURE_LETTER_M = 61580;
export const GESTURE_LETTER_N = 61581;
export const GESTURE_LETTER_O = 61582;
export const GESTURE_LETTER_P = 61583;
export const GESTURE_LETTER_Q = 61584;
export const GESTURE_LETTER_R = 61585;
export const GESTURE_LETTER_S = 61586;
export const GESTURE_LETTER_T = 61587;
export const GESTURE_LETTER_U = 61588;
export const GESTURE_LETTER_V = 61589;
export const GESTURE_LETTER_W = 61590;
export const GESTURE_LETTER_X = 61591;
export const GESTURE_LETTER_Y = 61592;
export const GESTURE_LETTER_Z = 61593;
export const GESTURE_DIGIT_0 = 61594;
export const GESTURE_DIGIT_1 = 61595;
export const GESTURE_DIGIT_2 = 61596;
export const GESTURE_DIGIT_3 = 61597;
export const GESTURE_DIGIT_4 = 61598;
export const GESTURE_DIGIT_5 = 61599;
export const GESTURE_DIGIT_6 = 61600;
export const GESTURE_DIGIT_7 = 61601;
export const GESTURE_DIGIT_8 = 61602;
export const GESTURE_DIGIT_9 = 61603;
export const GESTURE_EXCLAMATION = 61604;
export const GESTURE_QUESTION = 61605;
export const GESTURE_SHARP = 61606;
export const GESTURE_DOLLAR = 61607;
export const GESTURE_ASTERISK = 61608;
export const GESTURE_PLUS = 61609;
export const GESTURE_DOUBLE_UP = 61624;
export const GESTURE_DOUBLE_DOWN = 61625;
export const GESTURE_DOUBLE_LEFT = 61626;
export const GESTURE_DOUBLE_RIGHT = 61627;
export const GESTURE_TRIPLE_UP = 61628;
export const GESTURE_TRIPLE_DOWN = 61629;
export const GESTURE_TRIPLE_LEFT = 61630;
export const GESTURE_TRIPLE_RIGHT = 61631;
export const GESTURE_BRACKET_OVER = 61668;
export const GESTURE_BRACKET_UNDER = 61669;
export const GESTURE_BRACKET_LEFT = 61670;
export const GESTURE_BRACKET_RIGHT = 61671;
export const GESTURE_BRACE_OVER = 61672;
export const GESTURE_BRACE_UNDER = 61673;
export const GESTURE_BRACE_LEFT = 61674;
export const GESTURE_BRACE_RIGHT = 61675;
export const GESTURE_TAP = 61680;
export const GESTURE_DOUBLE_TAP = 61681;
export const GESTURE_TRIPLE_TAP = 61682;
export const GESTURE_QUAD_TAP = 61683;
export const FACILITY_INK = 40;
export const InkMinTransparencyValue = 0;
export const InkMaxTransparencyValue = 255;
export const InkCollectorClipInkToMargin = 0;
export const InkCollectorDefaultMargin = `-2147483648`;
export const PROPERTY_UNITS_DEFAULT = 0;
export const PROPERTY_UNITS_INCHES = 1;
export const PROPERTY_UNITS_CENTIMETERS = 2;
export const PROPERTY_UNITS_DEGREES = 3;
export const PROPERTY_UNITS_RADIANS = 4;
export const PROPERTY_UNITS_SECONDS = 5;
export const PROPERTY_UNITS_POUNDS = 6;
export const PROPERTY_UNITS_GRAMS = 7;
export const PROPERTY_UNITS_SILINEAR = 8;
export const PROPERTY_UNITS_SIROTATION = 9;
export const PROPERTY_UNITS_ENGLINEAR = 10;
export const PROPERTY_UNITS_ENGROTATION = 11;
export const PROPERTY_UNITS_SLUGS = 12;
export const PROPERTY_UNITS_KELVIN = 13;
export const PROPERTY_UNITS_FAHRENHEIT = 14;
export const PROPERTY_UNITS_AMPERE = 15;
export const PROPERTY_UNITS_CANDELA = 16;
export const IMF_FONT_SELECTED_IN_HDC = 1;
export const IMF_ITALIC = 2;
export const IMF_BOLD = 4;
export const TCF_ALLOW_RECOGNITION = 1;
export const TCF_FORCE_RECOGNITION = 2;
export const ISC_FirstElement = 0;
export const ISC_AllElements = `-1`;
export const IBBM_Default = 0;
export const IBBM_NoCurveFit = 1;
export const IBBM_CurveFit = 2;
export const IBBM_PointsOnly = 3;
export const IBBM_Union = 4;
export const IEF_CopyFromOriginal = 0;
export const IEF_RemoveFromOriginal = 1;
export const IEF_Default = 1;
export const IPF_InkSerializedFormat = 0;
export const IPF_Base64InkSerializedFormat = 1;
export const IPF_GIF = 2;
export const IPF_Base64GIF = 3;
export const IPCM_Default = 0;
export const IPCM_MaximumCompression = 1;
export const IPCM_NoCompression = 2;
export const IPT_Ball = 0;
export const IPT_Rectangle = 1;
export const IRO_Black = 1;
export const IRO_NotMergePen = 2;
export const IRO_MaskNotPen = 3;
export const IRO_NotCopyPen = 4;
export const IRO_MaskPenNot = 5;
export const IRO_Not = 6;
export const IRO_XOrPen = 7;
export const IRO_NotMaskPen = 8;
export const IRO_MaskPen = 9;
export const IRO_NotXOrPen = 10;
export const IRO_NoOperation = 11;
export const IRO_MergeNotPen = 12;
export const IRO_CopyPen = 13;
export const IRO_MergePenNot = 14;
export const IRO_MergePen = 15;
export const IRO_White = 16;
export const IMP_Default = 0;
export const IMP_Arrow = 1;
export const IMP_Crosshair = 2;
export const IMP_Ibeam = 3;
export const IMP_SizeNESW = 4;
export const IMP_SizeNS = 5;
export const IMP_SizeNWSE = 6;
export const IMP_SizeWE = 7;
export const IMP_UpArrow = 8;
export const IMP_Hourglass = 9;
export const IMP_NoDrop = 10;
export const IMP_ArrowHourglass = 11;
export const IMP_ArrowQuestion = 12;
export const IMP_SizeAll = 13;
export const IMP_Hand = 14;
export const IMP_Custom = 99;
export const ICB_Copy = 0;
export const ICB_Cut = 1;
export const ICB_ExtractOnly = 48;
export const ICB_DelayedCopy = 32;
export const ICB_Default = 0;
export const ICF_None = 0;
export const ICF_InkSerializedFormat = 1;
export const ICF_SketchInk = 2;
export const ICF_TextInk = 6;
export const ICF_EnhancedMetafile = 8;
export const ICF_Metafile = 32;
export const ICF_Bitmap = 64;
export const ICF_PasteMask = 7;
export const ICF_CopyMask = 127;
export const ICF_Default = 127;
export const SHR_None = 0;
export const SHR_NW = 1;
export const SHR_SE = 2;
export const SHR_NE = 3;
export const SHR_SW = 4;
export const SHR_E = 5;
export const SHR_W = 6;
export const SHR_N = 7;
export const SHR_S = 8;
export const SHR_Selection = 9;
export const IRS_NoError = 0;
export const IRS_Interrupted = 1;
export const IRS_ProcessFailed = 2;
export const IRS_InkAddedFailed = 4;
export const IRS_SetAutoCompletionModeFailed = 8;
export const IRS_SetStrokesFailed = 16;
export const IRS_SetGuideFailed = 32;
export const IRS_SetFlagsFailed = 64;
export const IRS_SetFactoidFailed = 128;
export const IRS_SetPrefixSuffixFailed = 256;
export const IRS_SetWordListFailed = 512;
export const DISPID_IRTop = 1;
export const DISPID_IRLeft = 2;
export const DISPID_IRBottom = 3;
export const DISPID_IRRight = 4;
export const DISPID_IRGetRectangle = 5;
export const DISPID_IRSetRectangle = 6;
export const DISPID_IRData = 7;
export const DISPID_IEPGuid = 1;
export const DISPID_IEPData = 2;
export const DISPID_IEPs_NewEnum = `-4`;
export const DISPID_IEPsItem = 0;
export const DISPID_IEPsCount = 1;
export const DISPID_IEPsAdd = 2;
export const DISPID_IEPsRemove = 3;
export const DISPID_IEPsClear = 4;
export const DISPID_IEPsDoesPropertyExist = 5;
export const DISPID_DAHeight = 1;
export const DISPID_DAColor = 2;
export const DISPID_DAWidth = 3;
export const DISPID_DAFitToCurve = 4;
export const DISPID_DAIgnorePressure = 5;
export const DISPID_DAAntiAliased = 6;
export const DISPID_DATransparency = 7;
export const DISPID_DARasterOperation = 8;
export const DISPID_DAPenTip = 9;
export const DISPID_DAClone = 10;
export const DISPID_DAExtendedProperties = 11;
export const DISPID_ITReset = 1;
export const DISPID_ITTranslate = 2;
export const DISPID_ITRotate = 3;
export const DISPID_ITReflect = 4;
export const DISPID_ITShear = 5;
export const DISPID_ITScale = 6;
export const DISPID_ITeM11 = 7;
export const DISPID_ITeM12 = 8;
export const DISPID_ITeM21 = 9;
export const DISPID_ITeM22 = 10;
export const DISPID_ITeDx = 11;
export const DISPID_ITeDy = 12;
export const DISPID_ITGetTransform = 13;
export const DISPID_ITSetTransform = 14;
export const DISPID_ITData = 15;
export const IAG_AllGestures = 0;
export const IAG_NoGesture = 61440;
export const IAG_Scratchout = 61441;
export const IAG_Triangle = 61442;
export const IAG_Square = 61443;
export const IAG_Star = 61444;
export const IAG_Check = 61445;
export const IAG_Curlicue = 61456;
export const IAG_DoubleCurlicue = 61457;
export const IAG_Circle = 61472;
export const IAG_DoubleCircle = 61473;
export const IAG_SemiCircleLeft = 61480;
export const IAG_SemiCircleRight = 61481;
export const IAG_ChevronUp = 61488;
export const IAG_ChevronDown = 61489;
export const IAG_ChevronLeft = 61490;
export const IAG_ChevronRight = 61491;
export const IAG_ArrowUp = 61496;
export const IAG_ArrowDown = 61497;
export const IAG_ArrowLeft = 61498;
export const IAG_ArrowRight = 61499;
export const IAG_Up = 61528;
export const IAG_Down = 61529;
export const IAG_Left = 61530;
export const IAG_Right = 61531;
export const IAG_UpDown = 61536;
export const IAG_DownUp = 61537;
export const IAG_LeftRight = 61538;
export const IAG_RightLeft = 61539;
export const IAG_UpLeftLong = 61540;
export const IAG_UpRightLong = 61541;
export const IAG_DownLeftLong = 61542;
export const IAG_DownRightLong = 61543;
export const IAG_UpLeft = 61544;
export const IAG_UpRight = 61545;
export const IAG_DownLeft = 61546;
export const IAG_DownRight = 61547;
export const IAG_LeftUp = 61548;
export const IAG_LeftDown = 61549;
export const IAG_RightUp = 61550;
export const IAG_RightDown = 61551;
export const IAG_Exclamation = 61604;
export const IAG_Tap = 61680;
export const IAG_DoubleTap = 61681;
export const ISG_Tap = 16;
export const ISG_DoubleTap = 17;
export const ISG_RightTap = 18;
export const ISG_Drag = 19;
export const ISG_RightDrag = 20;
export const ISG_HoldEnter = 21;
export const ISG_HoldLeave = 22;
export const ISG_HoverEnter = 23;
export const ISG_HoverLeave = 24;
export const ISG_Flick = 31;
export const IRC_Strong = 0;
export const IRC_Intermediate = 1;
export const IRC_Poor = 2;
export const DISPID_IGId = 0;
export const DISPID_IGGetHotPoint = 1;
export const DISPID_IGConfidence = 2;
export const DISPID_ICsrName = 0;
export const DISPID_ICsrId = 1;
export const DISPID_ICsrDrawingAttributes = 2;
export const DISPID_ICsrButtons = 3;
export const DISPID_ICsrInverted = 4;
export const DISPID_ICsrTablet = 5;
export const DISPID_ICs_NewEnum = `-4`;
export const DISPID_ICsItem = 0;
export const DISPID_ICsCount = 1;
export const ICBS_Unavailable = 0;
export const ICBS_Up = 1;
export const ICBS_Down = 2;
export const DISPID_ICBName = 0;
export const DISPID_ICBId = 1;
export const DISPID_ICBState = 2;
export const DISPID_ICBs_NewEnum = `-4`;
export const DISPID_ICBsItem = 0;
export const DISPID_ICBsCount = 1;
export const THWC_Integrated = 1;
export const THWC_CursorMustTouch = 2;
export const THWC_HardProximity = 4;
export const THWC_CursorsHavePhysicalIds = 8;
export const TPMU_Default = 0;
export const TPMU_Inches = 1;
export const TPMU_Centimeters = 2;
export const TPMU_Degrees = 3;
export const TPMU_Radians = 4;
export const TPMU_Seconds = 5;
export const TPMU_Pounds = 6;
export const TPMU_Grams = 7;
export const DISPID_ITName = 0;
export const DISPID_ITPlugAndPlayId = 1;
export const DISPID_ITPropertyMetrics = 2;
export const DISPID_ITIsPacketPropertySupported = 3;
export const DISPID_ITMaximumInputRectangle = 4;
export const DISPID_ITHardwareCapabilities = 5;
export const TDK_Mouse = 0;
export const TDK_Pen = 1;
export const TDK_Touch = 2;
export const DISPID_IT2DeviceKind = 0;
export const DISPID_IT3IsMultiTouch = 0;
export const DISPID_IT3MaximumCursors = 1;
export const DISPID_ITs_NewEnum = `-4`;
export const DISPID_ITsItem = 0;
export const DISPID_ITsDefaultTablet = 1;
export const DISPID_ITsCount = 2;
export const DISPID_ITsIsPacketPropertySupported = 3;
export const DISPID_ISDInkIndex = 1;
export const DISPID_ISDID = 2;
export const DISPID_ISDGetBoundingBox = 3;
export const DISPID_ISDDrawingAttributes = 4;
export const DISPID_ISDFindIntersections = 5;
export const DISPID_ISDGetRectangleIntersections = 6;
export const DISPID_ISDClip = 7;
export const DISPID_ISDHitTestCircle = 8;
export const DISPID_ISDNearestPoint = 9;
export const DISPID_ISDSplit = 10;
export const DISPID_ISDExtendedProperties = 11;
export const DISPID_ISDInk = 12;
export const DISPID_ISDBezierPoints = 13;
export const DISPID_ISDPolylineCusps = 14;
export const DISPID_ISDBezierCusps = 15;
export const DISPID_ISDSelfIntersections = 16;
export const DISPID_ISDPacketCount = 17;
export const DISPID_ISDPacketSize = 18;
export const DISPID_ISDPacketDescription = 19;
export const DISPID_ISDDeleted = 20;
export const DISPID_ISDGetPacketDescriptionPropertyMetrics = 21;
export const DISPID_ISDGetPoints = 22;
export const DISPID_ISDSetPoints = 23;
export const DISPID_ISDGetPacketData = 24;
export const DISPID_ISDGetPacketValuesByProperty = 25;
export const DISPID_ISDSetPacketValuesByProperty = 26;
export const DISPID_ISDGetFlattenedBezierPoints = 27;
export const DISPID_ISDScaleToRectangle = 28;
export const DISPID_ISDTransform = 29;
export const DISPID_ISDMove = 30;
export const DISPID_ISDRotate = 31;
export const DISPID_ISDShear = 32;
export const DISPID_ISDScale = 33;
export const DISPID_ISs_NewEnum = `-4`;
export const DISPID_ISsItem = 0;
export const DISPID_ISsCount = 1;
export const DISPID_ISsValid = 2;
export const DISPID_ISsInk = 3;
export const DISPID_ISsAdd = 4;
export const DISPID_ISsAddStrokes = 5;
export const DISPID_ISsRemove = 6;
export const DISPID_ISsRemoveStrokes = 7;
export const DISPID_ISsToString = 8;
export const DISPID_ISsModifyDrawingAttributes = 9;
export const DISPID_ISsGetBoundingBox = 10;
export const DISPID_ISsScaleToRectangle = 11;
export const DISPID_ISsTransform = 12;
export const DISPID_ISsMove = 13;
export const DISPID_ISsRotate = 14;
export const DISPID_ISsShear = 15;
export const DISPID_ISsScale = 16;
export const DISPID_ISsClip = 17;
export const DISPID_ISsRecognitionResult = 18;
export const DISPID_ISsRemoveRecognitionResult = 19;
export const DISPID_ICSs_NewEnum = `-4`;
export const DISPID_ICSsItem = 0;
export const DISPID_ICSsCount = 1;
export const DISPID_ICSsAdd = 2;
export const DISPID_ICSsRemove = 3;
export const DISPID_ICSsClear = 4;
export const DISPID_SEStrokesAdded = 1;
export const DISPID_SEStrokesRemoved = 2;
export const DISPID_IStrokes = 1;
export const DISPID_IExtendedProperties = 2;
export const DISPID_IGetBoundingBox = 3;
export const DISPID_IDeleteStrokes = 4;
export const DISPID_IDeleteStroke = 5;
export const DISPID_IExtractStrokes = 6;
export const DISPID_IExtractWithRectangle = 7;
export const DISPID_IDirty = 8;
export const DISPID_ICustomStrokes = 9;
export const DISPID_IClone = 10;
export const DISPID_IHitTestCircle = 11;
export const DISPID_IHitTestWithRectangle = 12;
export const DISPID_IHitTestWithLasso = 13;
export const DISPID_INearestPoint = 14;
export const DISPID_ICreateStrokes = 15;
export const DISPID_ICreateStroke = 16;
export const DISPID_IAddStrokesAtRectangle = 17;
export const DISPID_IClip = 18;
export const DISPID_ISave = 19;
export const DISPID_ILoad = 20;
export const DISPID_ICreateStrokeFromPoints = 21;
export const DISPID_IClipboardCopyWithRectangle = 22;
export const DISPID_IClipboardCopy = 23;
export const DISPID_ICanPaste = 24;
export const DISPID_IClipboardPaste = 25;
export const DISPID_IEInkAdded = 1;
export const DISPID_IEInkDeleted = 2;
export const DISPID_IRGetViewTransform = 1;
export const DISPID_IRSetViewTransform = 2;
export const DISPID_IRGetObjectTransform = 3;
export const DISPID_IRSetObjectTransform = 4;
export const DISPID_IRDraw = 5;
export const DISPID_IRDrawStroke = 6;
export const DISPID_IRPixelToInkSpace = 7;
export const DISPID_IRInkSpaceToPixel = 8;
export const DISPID_IRPixelToInkSpaceFromPoints = 9;
export const DISPID_IRInkSpaceToPixelFromPoints = 10;
export const DISPID_IRMeasure = 11;
export const DISPID_IRMeasureStroke = 12;
export const DISPID_IRMove = 13;
export const DISPID_IRRotate = 14;
export const DISPID_IRScale = 15;
export const ICEI_DefaultEvents = `-1`;
export const ICEI_CursorDown = 0;
export const ICEI_Stroke = 1;
export const ICEI_NewPackets = 2;
export const ICEI_NewInAirPackets = 3;
export const ICEI_CursorButtonDown = 4;
export const ICEI_CursorButtonUp = 5;
export const ICEI_CursorInRange = 6;
export const ICEI_CursorOutOfRange = 7;
export const ICEI_SystemGesture = 8;
export const ICEI_TabletAdded = 9;
export const ICEI_TabletRemoved = 10;
export const ICEI_MouseDown = 11;
export const ICEI_MouseMove = 12;
export const ICEI_MouseUp = 13;
export const ICEI_MouseWheel = 14;
export const ICEI_DblClick = 15;
export const ICEI_AllEvents = 16;
export const IMF_Left = 1;
export const IMF_Right = 2;
export const IMF_Middle = 4;
export const IKM_Shift = 1;
export const IKM_Control = 2;
export const IKM_Alt = 4;
export const DISPID_ICEStroke = 1;
export const DISPID_ICECursorDown = 2;
export const DISPID_ICENewPackets = 3;
export const DISPID_ICENewInAirPackets = 4;
export const DISPID_ICECursorButtonDown = 5;
export const DISPID_ICECursorButtonUp = 6;
export const DISPID_ICECursorInRange = 7;
export const DISPID_ICECursorOutOfRange = 8;
export const DISPID_ICESystemGesture = 9;
export const DISPID_ICEGesture = 10;
export const DISPID_ICETabletAdded = 11;
export const DISPID_ICETabletRemoved = 12;
export const DISPID_IOEPainting = 13;
export const DISPID_IOEPainted = 14;
export const DISPID_IOESelectionChanging = 15;
export const DISPID_IOESelectionChanged = 16;
export const DISPID_IOESelectionMoving = 17;
export const DISPID_IOESelectionMoved = 18;
export const DISPID_IOESelectionResizing = 19;
export const DISPID_IOESelectionResized = 20;
export const DISPID_IOEStrokesDeleting = 21;
export const DISPID_IOEStrokesDeleted = 22;
export const DISPID_IPEChangeUICues = 23;
export const DISPID_IPEClick = 24;
export const DISPID_IPEDblClick = 25;
export const DISPID_IPEInvalidated = 26;
export const DISPID_IPEMouseDown = 27;
export const DISPID_IPEMouseEnter = 28;
export const DISPID_IPEMouseHover = 29;
export const DISPID_IPEMouseLeave = 30;
export const DISPID_IPEMouseMove = 31;
export const DISPID_IPEMouseUp = 32;
export const DISPID_IPEMouseWheel = 33;
export const DISPID_IPESizeModeChanged = 34;
export const DISPID_IPEStyleChanged = 35;
export const DISPID_IPESystemColorsChanged = 36;
export const DISPID_IPEKeyDown = 37;
export const DISPID_IPEKeyPress = 38;
export const DISPID_IPEKeyUp = 39;
export const DISPID_IPEResize = 40;
export const DISPID_IPESizeChanged = 41;
export const IOEM_Ink = 0;
export const IOEM_Delete = 1;
export const IOEM_Select = 2;
export const IOAM_Behind = 0;
export const IOAM_InFront = 1;
export const IPSM_AutoSize = 0;
export const IPSM_CenterImage = 1;
export const IPSM_Normal = 2;
export const IPSM_StretchImage = 3;
export const IOERM_StrokeErase = 0;
export const IOERM_PointErase = 1;
export const ICM_InkOnly = 0;
export const ICM_GestureOnly = 1;
export const ICM_InkAndGesture = 2;
export const DISPID_ICEnabled = 1;
export const DISPID_ICHwnd = 2;
export const DISPID_ICPaint = 3;
export const DISPID_ICText = 4;
export const DISPID_ICDefaultDrawingAttributes = 5;
export const DISPID_ICRenderer = 6;
export const DISPID_ICInk = 7;
export const DISPID_ICAutoRedraw = 8;
export const DISPID_ICCollectingInk = 9;
export const DISPID_ICSetEventInterest = 10;
export const DISPID_ICGetEventInterest = 11;
export const DISPID_IOEditingMode = 12;
export const DISPID_IOSelection = 13;
export const DISPID_IOAttachMode = 14;
export const DISPID_IOHitTestSelection = 15;
export const DISPID_IODraw = 16;
export const DISPID_IPPicture = 17;
export const DISPID_IPSizeMode = 18;
export const DISPID_IPBackColor = 19;
export const DISPID_ICCursors = 20;
export const DISPID_ICMarginX = 21;
export const DISPID_ICMarginY = 22;
export const DISPID_ICSetWindowInputRectangle = 23;
export const DISPID_ICGetWindowInputRectangle = 24;
export const DISPID_ICTablet = 25;
export const DISPID_ICSetAllTabletsMode = 26;
export const DISPID_ICSetSingleTabletIntegratedMode = 27;
export const DISPID_ICCollectionMode = 28;
export const DISPID_ICSetGestureStatus = 29;
export const DISPID_ICGetGestureStatus = 30;
export const DISPID_ICDynamicRendering = 31;
export const DISPID_ICDesiredPacketDescription = 32;
export const DISPID_IOEraserMode = 33;
export const DISPID_IOEraserWidth = 34;
export const DISPID_ICMouseIcon = 35;
export const DISPID_ICMousePointer = 36;
export const DISPID_IPInkEnabled = 37;
export const DISPID_ICSupportHighContrastInk = 38;
export const DISPID_IOSupportHighContrastSelectionUI = 39;
export const DISPID_RecoClsid = 1;
export const DISPID_RecoName = 2;
export const DISPID_RecoVendor = 3;
export const DISPID_RecoCapabilities = 4;
export const DISPID_RecoLanguageID = 5;
export const DISPID_RecoPreferredPacketDescription = 6;
export const DISPID_RecoCreateRecognizerContext = 7;
export const DISPID_RecoSupportedProperties = 8;
export const IRC_DontCare = 1;
export const IRC_Object = 2;
export const IRC_FreeInput = 4;
export const IRC_LinedInput = 8;
export const IRC_BoxedInput = 16;
export const IRC_CharacterAutoCompletionInput = 32;
export const IRC_RightAndDown = 64;
export const IRC_LeftAndDown = 128;
export const IRC_DownAndLeft = 256;
export const IRC_DownAndRight = 512;
export const IRC_ArbitraryAngle = 1024;
export const IRC_Lattice = 2048;
export const IRC_AdviseInkChange = 4096;
export const IRC_StrokeReorder = 8192;
export const IRC_Personalizable = 16384;
export const IRC_PrefersArbitraryAngle = 32768;
export const IRC_PrefersParagraphBreaking = 65536;
export const IRC_PrefersSegmentation = 131072;
export const IRC_Cursive = 262144;
export const IRC_TextPrediction = 524288;
export const IRC_Alpha = 1048576;
export const IRC_Beta = 2097152;
export const DISPID_RecoId = 0;
export const DISPID_RecoUnicodeRanges = 1;
export const DISPID_IRecos_NewEnum = `-4`;
export const DISPID_IRecosItem = 0;
export const DISPID_IRecosCount = 1;
export const DISPID_IRecosGetDefaultRecognizer = 2;
export const IRCACM_Full = 0;
export const IRCACM_Prefix = 1;
export const IRCACM_Random = 2;
export const IRM_None = 0;
export const IRM_WordModeOnly = 1;
export const IRM_Coerce = 2;
export const IRM_TopInkBreaksOnly = 4;
export const IRM_PrefixOk = 8;
export const IRM_LineMode = 16;
export const IRM_DisablePersonalization = 32;
export const IRM_AutoSpace = 64;
export const IRM_Max = 128;
export const DISPID_IRERecognitionWithAlternates = 1;
export const DISPID_IRERecognition = 2;
export const DISPID_IRecoCtx_Strokes = 1;
export const DISPID_IRecoCtx_CharacterAutoCompletionMode = 2;
export const DISPID_IRecoCtx_Factoid = 3;
export const DISPID_IRecoCtx_WordList = 4;
export const DISPID_IRecoCtx_Recognizer = 5;
export const DISPID_IRecoCtx_Guide = 6;
export const DISPID_IRecoCtx_Flags = 7;
export const DISPID_IRecoCtx_PrefixText = 8;
export const DISPID_IRecoCtx_SuffixText = 9;
export const DISPID_IRecoCtx_StopRecognition = 10;
export const DISPID_IRecoCtx_Clone = 11;
export const DISPID_IRecoCtx_Recognize = 12;
export const DISPID_IRecoCtx_StopBackgroundRecognition = 13;
export const DISPID_IRecoCtx_EndInkInput = 14;
export const DISPID_IRecoCtx_BackgroundRecognize = 15;
export const DISPID_IRecoCtx_BackgroundRecognizeWithAlternates = 16;
export const DISPID_IRecoCtx_IsStringSupported = 17;
export const DISPID_IRecoCtx2_EnabledUnicodeRanges = 0;
export const IRAS_Start = 0;
export const IRAS_DefaultCount = 10;
export const IRAS_All = `-1`;
export const DISPID_InkRecognitionResult_TopString = 1;
export const DISPID_InkRecognitionResult_TopAlternate = 2;
export const DISPID_InkRecognitionResult_Strokes = 3;
export const DISPID_InkRecognitionResult_TopConfidence = 4;
export const DISPID_InkRecognitionResult_AlternatesFromSelection = 5;
export const DISPID_InkRecognitionResult_ModifyTopAlternate = 6;
export const DISPID_InkRecognitionResult_SetResultOnStrokes = 7;
export const DISPID_InkRecoAlternate_String = 1;
export const DISPID_InkRecoAlternate_LineNumber = 2;
export const DISPID_InkRecoAlternate_Baseline = 3;
export const DISPID_InkRecoAlternate_Midline = 4;
export const DISPID_InkRecoAlternate_Ascender = 5;
export const DISPID_InkRecoAlternate_Descender = 6;
export const DISPID_InkRecoAlternate_Confidence = 7;
export const DISPID_InkRecoAlternate_Strokes = 8;
export const DISPID_InkRecoAlternate_GetStrokesFromStrokeRanges = 9;
export const DISPID_InkRecoAlternate_GetStrokesFromTextRange = 10;
export const DISPID_InkRecoAlternate_GetTextRangeFromStrokes = 11;
export const DISPID_InkRecoAlternate_GetPropertyValue = 12;
export const DISPID_InkRecoAlternate_LineAlternates = 13;
export const DISPID_InkRecoAlternate_ConfidenceAlternates = 14;
export const DISPID_InkRecoAlternate_AlternatesWithConstantPropertyValues = 15;
export const DISPID_InkRecognitionAlternates_NewEnum = `-4`;
export const DISPID_InkRecognitionAlternates_Item = 0;
export const DISPID_InkRecognitionAlternates_Count = 1;
export const DISPID_InkRecognitionAlternates_Strokes = 2;
export const DISPID_IRGWritingBox = 1;
export const DISPID_IRGDrawnBox = 2;
export const DISPID_IRGRows = 3;
export const DISPID_IRGColumns = 4;
export const DISPID_IRGMidline = 5;
export const DISPID_IRGGuideData = 6;
export const DISPID_InkWordList_AddWord = 0;
export const DISPID_InkWordList_RemoveWord = 1;
export const DISPID_InkWordList_Merge = 2;
export const DISPID_InkWordList2_AddWords = 3;
export const IDT_Segment = 0;
export const IDT_Line = 1;
export const IDT_Paragraph = 2;
export const IDT_Drawing = 3;
export const DISPID_IInkDivider_Strokes = 1;
export const DISPID_IInkDivider_RecognizerContext = 2;
export const DISPID_IInkDivider_LineHeight = 3;
export const DISPID_IInkDivider_Divide = 4;
export const DISPID_IInkDivisionResult_Strokes = 1;
export const DISPID_IInkDivisionResult_ResultByType = 2;
export const DISPID_IInkDivisionUnit_Strokes = 1;
export const DISPID_IInkDivisionUnit_DivisionType = 2;
export const DISPID_IInkDivisionUnit_RecognizedString = 3;
export const DISPID_IInkDivisionUnit_RotationTransform = 4;
export const DISPID_IInkDivisionUnits_NewEnum = `-4`;
export const DISPID_IInkDivisionUnits_Item = 0;
export const DISPID_IInkDivisionUnits_Count = 1;
export const DISPID_PIPAttachedEditWindow = 0;
export const DISPID_PIPFactoid = 1;
export const DISPID_PIPCurrentPanel = 2;
export const DISPID_PIPDefaultPanel = 3;
export const DISPID_PIPVisible = 4;
export const DISPID_PIPTop = 5;
export const DISPID_PIPLeft = 6;
export const DISPID_PIPWidth = 7;
export const DISPID_PIPHeight = 8;
export const DISPID_PIPMoveTo = 9;
export const DISPID_PIPCommitPendingInput = 10;
export const DISPID_PIPRefresh = 11;
export const DISPID_PIPBusy = 12;
export const DISPID_PIPVerticalOffset = 13;
export const DISPID_PIPHorizontalOffset = 14;
export const DISPID_PIPEnableTsf = 15;
export const DISPID_PIPAutoShow = 16;
export const DISPID_PIPEVisibleChanged = 0;
export const DISPID_PIPEPanelChanged = 1;
export const DISPID_PIPEInputFailed = 2;
export const DISPID_PIPEPanelMoving = 3;
export const InPlace = 0;
export const Floating = 1;
export const DockedTop = 2;
export const DockedBottom = 3;
export const Closed = 4;
export const InteractionMode_InPlace = 0;
export const InteractionMode_Floating = 1;
export const InteractionMode_DockedTop = 2;
export const InteractionMode_DockedBottom = 3;
export const InPlaceState_Auto = 0;
export const InPlaceState_HoverTarget = 1;
export const InPlaceState_Expanded = 2;
export const PanelInputArea_Auto = 0;
export const PanelInputArea_Keyboard = 1;
export const PanelInputArea_WritingPad = 2;
export const PanelInputArea_CharacterPad = 3;
export const CorrectionMode_NotVisible = 0;
export const CorrectionMode_PreInsertion = 1;
export const CorrectionMode_PostInsertionCollapsed = 2;
export const CorrectionMode_PostInsertionExpanded = 3;
export const CorrectionPosition_Auto = 0;
export const CorrectionPosition_Bottom = 1;
export const CorrectionPosition_Top = 2;
export const InPlaceDirection_Auto = 0;
export const InPlaceDirection_Bottom = 1;
export const InPlaceDirection_Top = 2;
export const EventMask_InPlaceStateChanging = 1;
export const EventMask_InPlaceStateChanged = 2;
export const EventMask_InPlaceSizeChanging = 4;
export const EventMask_InPlaceSizeChanged = 8;
export const EventMask_InputAreaChanging = 16;
export const EventMask_InputAreaChanged = 32;
export const EventMask_CorrectionModeChanging = 64;
export const EventMask_CorrectionModeChanged = 128;
export const EventMask_InPlaceVisibilityChanging = 256;
export const EventMask_InPlaceVisibilityChanged = 512;
export const EventMask_TextInserting = 1024;
export const EventMask_TextInserted = 2048;
export const EventMask_All = 4095;
export const PT_Default = 0;
export const PT_Inactive = 1;
export const PT_Handwriting = 2;
export const PT_Keyboard = 3;
export const FLICKDIRECTION_MIN = 0;
export const FLICKDIRECTION_RIGHT = 0;
export const FLICKDIRECTION_UPRIGHT = 1;
export const FLICKDIRECTION_UP = 2;
export const FLICKDIRECTION_UPLEFT = 3;
export const FLICKDIRECTION_LEFT = 4;
export const FLICKDIRECTION_DOWNLEFT = 5;
export const FLICKDIRECTION_DOWN = 6;
export const FLICKDIRECTION_DOWNRIGHT = 7;
export const FLICKDIRECTION_INVALID = 8;
export const FLICKMODE_MIN = 0;
export const FLICKMODE_OFF = 0;
export const FLICKMODE_ON = 1;
export const FLICKMODE_LEARNING = 2;
export const FLICKMODE_MAX = 2;
export const FLICKMODE_DEFAULT = 1;
export const FLICKACTION_COMMANDCODE_NULL = 0;
export const FLICKACTION_COMMANDCODE_SCROLL = 1;
export const FLICKACTION_COMMANDCODE_APPCOMMAND = 2;
export const FLICKACTION_COMMANDCODE_CUSTOMKEY = 3;
export const FLICKACTION_COMMANDCODE_KEYMODIFIER = 4;
export const SCROLLDIRECTION_UP = 0;
export const SCROLLDIRECTION_DOWN = 1;
export const KEYMODIFIER_CONTROL = 1;
export const KEYMODIFIER_MENU = 2;
export const KEYMODIFIER_SHIFT = 4;
export const KEYMODIFIER_WIN = 8;
export const KEYMODIFIER_ALTGR = 16;
export const KEYMODIFIER_EXT = 32;
export const NO_BUTTON = 0;
export const LEFT_BUTTON = 1;
export const RIGHT_BUTTON = 2;
export const MIDDLE_BUTTON = 4;
export const rtfLeft = 0;
export const rtfRight = 1;
export const rtfCenter = 2;
export const DISPID_Text = 0;
export const DISPID_TextRTF = 1;
export const DISPID_Hwnd = 2;
export const DISPID_DisableNoScroll = 3;
export const DISPID_Locked = 4;
export const DISPID_Enabled = 5;
export const DISPID_MaxLength = 6;
export const DISPID_MultiLine = 7;
export const DISPID_ScrollBars = 8;
export const DISPID_RTSelStart = 9;
export const DISPID_RTSelLength = 10;
export const DISPID_RTSelText = 11;
export const DISPID_SelAlignment = 12;
export const DISPID_SelBold = 13;
export const DISPID_SelCharOffset = 14;
export const DISPID_SelColor = 15;
export const DISPID_SelFontName = 16;
export const DISPID_SelFontSize = 17;
export const DISPID_SelItalic = 18;
export const DISPID_SelRTF = 19;
export const DISPID_SelUnderline = 20;
export const DISPID_DragIcon = 21;
export const DISPID_Status = 22;
export const DISPID_UseMouseForInput = 23;
export const DISPID_InkMode = 24;
export const DISPID_InkInsertMode = 25;
export const DISPID_RecoTimeout = 26;
export const DISPID_DrawAttr = 27;
export const DISPID_Recognizer = 28;
export const DISPID_Factoid = 29;
export const DISPID_SelInk = 30;
export const DISPID_SelInksDisplayMode = 31;
export const DISPID_Recognize = 32;
export const DISPID_GetGestStatus = 33;
export const DISPID_SetGestStatus = 34;
export const DISPID_Refresh = 35;
export const DISPID_IeeChange = 1;
export const DISPID_IeeSelChange = 2;
export const DISPID_IeeKeyDown = 3;
export const DISPID_IeeKeyUp = 4;
export const DISPID_IeeMouseUp = 5;
export const DISPID_IeeMouseDown = 6;
export const DISPID_IeeKeyPress = 7;
export const DISPID_IeeDblClick = 8;
export const DISPID_IeeClick = 9;
export const DISPID_IeeMouseMove = 10;
export const DISPID_IeeCursorDown = 21;
export const DISPID_IeeStroke = 22;
export const DISPID_IeeGesture = 23;
export const DISPID_IeeRecognitionResult = 24;
export const IEM_Disabled = 0;
export const IEM_Ink = 1;
export const IEM_InkAndGesture = 2;
export const IEM_InsertText = 0;
export const IEM_InsertInk = 1;
export const IES_Idle = 0;
export const IES_Collecting = 1;
export const IES_Recognizing = 2;
export const IDM_Ink = 0;
export const IDM_Text = 1;
export const rtfFlat = 0;
export const rtfThreeD = 1;
export const rtfNoBorder = 0;
export const rtfFixedSingle = 1;
export const rtfNone = 0;
export const rtfHorizontal = 1;
export const rtfVertical = 2;
export const rtfBoth = 3;
export const MICUIELEMENT_BUTTON_WRITE = 1;
export const MICUIELEMENT_BUTTON_ERASE = 2;
export const MICUIELEMENT_BUTTON_CORRECT = 4;
export const MICUIELEMENT_BUTTON_CLEAR = 8;
export const MICUIELEMENT_BUTTON_UNDO = 16;
export const MICUIELEMENT_BUTTON_REDO = 32;
export const MICUIELEMENT_BUTTON_INSERT = 64;
export const MICUIELEMENT_BUTTON_CANCEL = 128;
export const MICUIELEMENT_INKPANEL_BACKGROUND = 256;
export const MICUIELEMENT_RESULTPANEL_BACKGROUND = 512;
export const MICUIELEMENTSTATE_NORMAL = 1;
export const MICUIELEMENTSTATE_HOT = 2;
export const MICUIELEMENTSTATE_PRESSED = 3;
export const MICUIELEMENTSTATE_DISABLED = 4;
export const DISPID_MICInsert = 0;
export const DISPID_MICClose = 1;
export const DISPID_MICPaint = 2;
export const DISPID_MICClear = 3;
export const RTSDI_AllData = `-1`;
export const RTSDI_None = 0;
export const RTSDI_Error = 1;
export const RTSDI_RealTimeStylusEnabled = 2;
export const RTSDI_RealTimeStylusDisabled = 4;
export const RTSDI_StylusNew = 8;
export const RTSDI_StylusInRange = 16;
export const RTSDI_InAirPackets = 32;
export const RTSDI_StylusOutOfRange = 64;
export const RTSDI_StylusDown = 128;
export const RTSDI_Packets = 256;
export const RTSDI_StylusUp = 512;
export const RTSDI_StylusButtonUp = 1024;
export const RTSDI_StylusButtonDown = 2048;
export const RTSDI_SystemEvents = 4096;
export const RTSDI_TabletAdded = 8192;
export const RTSDI_TabletRemoved = 16384;
export const RTSDI_CustomStylusDataAdded = 32768;
export const RTSDI_UpdateMapping = 65536;
export const RTSDI_DefaultEvents = 37766;
export const SyncStylusQueue = 1;
export const AsyncStylusQueueImmediate = 2;
export const AsyncStylusQueue = 3;
export const RTSLT_ObjLock = 1;
export const RTSLT_SyncEventLock = 2;
export const RTSLT_AsyncEventLock = 4;
export const RTSLT_ExcludeCallback = 8;
export const RTSLT_SyncObjLock = 11;
export const RTSLT_AsyncObjLock = 13;
export const LM_BASELINE = 0;
export const LM_MIDLINE = 1;
export const LM_ASCENDER = 2;
export const LM_DESCENDER = 3;
export const CFL_STRONG = 0;
export const CFL_INTERMEDIATE = 1;
export const CFL_POOR = 2;
export const ALT_BREAKS_SAME = 0;
export const ALT_BREAKS_UNIQUE = 1;
export const ALT_BREAKS_FULL = 2;
export const RECO_TYPE_WSTRING = 0;
export const RECO_TYPE_WCHAR = 1;

// Structs

export type HRECOALT = Deno.PointerValue;

export type HRECOCONTEXT = Deno.PointerValue;

export type HRECOGNIZER = Deno.PointerValue;

export type HRECOLATTICE = Deno.PointerValue;

export type HRECOWORDLIST = Deno.PointerValue;

/**
 * Windows.Win32.UI.TabletPC.SYSTEM_EVENT_DATA (size: 32)
 */
export interface SYSTEM_EVENT_DATA {
  /** u8 */
  bModifier: number;
  /** char */
  wKey: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  xPos: number;
  /** i32 */
  yPos: number;
  /** u8 */
  bCursorMode: number;
  /** u32 */
  dwButtonState: number;
}

export const sizeofSYSTEM_EVENT_DATA = 32;

export function allocSYSTEM_EVENT_DATA(data?: Partial<SYSTEM_EVENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_EVENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bModifier !== undefined) view.setUint8(0, Number(data.bModifier));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.wKey !== undefined) view.setBigUint64(8, data.wKey === null ? 0n : BigInt(util.toPointer(data.wKey)), true);
  // 0x10: i32
  if (data?.xPos !== undefined) view.setInt32(16, Number(data.xPos), true);
  // 0x14: i32
  if (data?.yPos !== undefined) view.setInt32(20, Number(data.yPos), true);
  // 0x18: u8
  if (data?.bCursorMode !== undefined) view.setUint8(24, Number(data.bCursorMode));
  // 0x19: u32
  if (data?.dwButtonState !== undefined) view.setUint32(25, Number(data.dwButtonState), true);
  // 0x1d: pad3
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.STROKE_RANGE (size: 8)
 */
export interface STROKE_RANGE {
  /** u32 */
  iStrokeBegin: number;
  /** u32 */
  iStrokeEnd: number;
}

export const sizeofSTROKE_RANGE = 8;

export function allocSTROKE_RANGE(data?: Partial<STROKE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSTROKE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iStrokeBegin !== undefined) view.setUint32(0, Number(data.iStrokeBegin), true);
  // 0x04: u32
  if (data?.iStrokeEnd !== undefined) view.setUint32(4, Number(data.iStrokeEnd), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.PROPERTY_METRICS (size: 16)
 */
export interface PROPERTY_METRICS {
  /** i32 */
  nLogicalMin: number;
  /** i32 */
  nLogicalMax: number;
  /** Windows.Win32.UI.TabletPC.PROPERTY_UNITS */
  Units: PROPERTY_UNITS;
  /** f32 */
  fResolution: number;
}

export const sizeofPROPERTY_METRICS = 16;

export function allocPROPERTY_METRICS(data?: Partial<PROPERTY_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPERTY_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nLogicalMin !== undefined) view.setInt32(0, Number(data.nLogicalMin), true);
  // 0x04: i32
  if (data?.nLogicalMax !== undefined) view.setInt32(4, Number(data.nLogicalMax), true);
  // 0x08: i32
  if (data?.Units !== undefined) view.setInt32(8, Number(data.Units), true);
  // 0x0c: f32
  if (data?.fResolution !== undefined) view.setFloat32(12, Number(data.fResolution), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.PACKET_PROPERTY (size: 16)
 */
export interface PACKET_PROPERTY {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TabletPC.PROPERTY_METRICS */
  PropertyMetrics: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPACKET_PROPERTY = 16;

export function allocPACKET_PROPERTY(data?: Partial<PACKET_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKET_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: pointer
  if (data?.PropertyMetrics !== undefined) view.setBigUint64(8, data.PropertyMetrics === null ? 0n : BigInt(util.toPointer(data.PropertyMetrics)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.PACKET_DESCRIPTION (size: 32)
 */
export interface PACKET_DESCRIPTION {
  /** u32 */
  cbPacketSize: number;
  /** u32 */
  cPacketProperties: number;
  /** ptr */
  pPacketProperties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cButtons: number;
  /** ptr */
  pguidButtons: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPACKET_DESCRIPTION = 32;

export function allocPACKET_DESCRIPTION(data?: Partial<PACKET_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofPACKET_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbPacketSize !== undefined) view.setUint32(0, Number(data.cbPacketSize), true);
  // 0x04: u32
  if (data?.cPacketProperties !== undefined) view.setUint32(4, Number(data.cPacketProperties), true);
  // 0x08: pointer
  if (data?.pPacketProperties !== undefined) view.setBigUint64(8, data.pPacketProperties === null ? 0n : BigInt(util.toPointer(data.pPacketProperties)), true);
  // 0x10: u32
  if (data?.cButtons !== undefined) view.setUint32(16, Number(data.cButtons), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pguidButtons !== undefined) view.setBigUint64(24, data.pguidButtons === null ? 0n : BigInt(util.toPointer(data.pguidButtons)), true);
  return buf;
}

export type COLORREF = number;

/**
 * Windows.Win32.UI.TabletPC.INKMETRIC (size: 24)
 */
export interface INKMETRIC {
  /** i32 */
  iHeight: number;
  /** i32 */
  iFontAscent: number;
  /** i32 */
  iFontDescent: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.COLORREF */
  color: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINKMETRIC = 24;

export function allocINKMETRIC(data?: Partial<INKMETRIC>): Uint8Array {
  const buf = new Uint8Array(sizeofINKMETRIC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iHeight !== undefined) view.setInt32(0, Number(data.iHeight), true);
  // 0x04: i32
  if (data?.iFontAscent !== undefined) view.setInt32(4, Number(data.iFontAscent), true);
  // 0x08: i32
  if (data?.iFontDescent !== undefined) view.setInt32(8, Number(data.iFontDescent), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: pointer
  if (data?.color !== undefined) view.setBigUint64(16, data.color === null ? 0n : BigInt(util.toPointer(data.color)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.InkRecoGuide (size: 32)
 */
export interface InkRecoGuide {
  /** Windows.Win32.Foundation.RECT */
  rectWritingBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rectDrawnBox: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  cRows: number;
  /** i32 */
  cColumns: number;
  /** i32 */
  midline: number;
}

export const sizeofInkRecoGuide = 32;

export function allocInkRecoGuide(data?: Partial<InkRecoGuide>): Uint8Array {
  const buf = new Uint8Array(sizeofInkRecoGuide);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rectWritingBox !== undefined) view.setBigUint64(0, data.rectWritingBox === null ? 0n : BigInt(util.toPointer(data.rectWritingBox)), true);
  // 0x08: pointer
  if (data?.rectDrawnBox !== undefined) view.setBigUint64(8, data.rectDrawnBox === null ? 0n : BigInt(util.toPointer(data.rectDrawnBox)), true);
  // 0x10: i32
  if (data?.cRows !== undefined) view.setInt32(16, Number(data.cRows), true);
  // 0x14: i32
  if (data?.cColumns !== undefined) view.setInt32(20, Number(data.cColumns), true);
  // 0x18: i32
  if (data?.midline !== undefined) view.setInt32(24, Number(data.midline), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.FLICK_POINT (size: 8)
 */
export interface FLICK_POINT {
  /** i32 */
  _bitfield: number;
}

export const sizeofFLICK_POINT = 8;

export function allocFLICK_POINT(data?: Partial<FLICK_POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofFLICK_POINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.FLICK_DATA (size: 8)
 */
export interface FLICK_DATA {
  /** i32 */
  _bitfield: number;
}

export const sizeofFLICK_DATA = 8;

export function allocFLICK_DATA(data?: Partial<FLICK_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofFLICK_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.UI.Controls.NMHDR (size: 24)
 */
export interface NMHDR {
  /** Windows.Win32.Foundation.HWND */
  hwndFrom: Deno.PointerValue | null;
  /** usize */
  idFrom: Deno.PointerValue;
  /** u32 */
  code: number;
}

export const sizeofNMHDR = 24;

export function allocNMHDR(data?: Partial<NMHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndFrom !== undefined) view.setBigUint64(0, data.hwndFrom === null ? 0n : BigInt(util.toPointer(data.hwndFrom)), true);
  // 0x08: usize
  if (data?.idFrom !== undefined) view.setBigUint64(8, BigInt(data.idFrom), true);
  // 0x10: u32
  if (data?.code !== undefined) view.setUint32(16, Number(data.code), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.IEC_STROKEINFO (size: 24)
 */
export interface IEC_STROKEINFO {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TabletPC.IInkCursor */
  Cursor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TabletPC.IInkStrokeDisp */
  Stroke: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIEC_STROKEINFO = 24;

export function allocIEC_STROKEINFO(data?: Partial<IEC_STROKEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIEC_STROKEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.Cursor !== undefined) view.setBigUint64(8, data.Cursor === null ? 0n : BigInt(util.toPointer(data.Cursor)), true);
  // 0x10: pointer
  if (data?.Stroke !== undefined) view.setBigUint64(16, data.Stroke === null ? 0n : BigInt(util.toPointer(data.Stroke)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.IEC_GESTUREINFO (size: 32)
 */
export interface IEC_GESTUREINFO {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TabletPC.IInkCursor */
  Cursor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TabletPC.IInkStrokes */
  Strokes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.VARIANT */
  Gestures: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIEC_GESTUREINFO = 32;

export function allocIEC_GESTUREINFO(data?: Partial<IEC_GESTUREINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIEC_GESTUREINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.Cursor !== undefined) view.setBigUint64(8, data.Cursor === null ? 0n : BigInt(util.toPointer(data.Cursor)), true);
  // 0x10: pointer
  if (data?.Strokes !== undefined) view.setBigUint64(16, data.Strokes === null ? 0n : BigInt(util.toPointer(data.Strokes)), true);
  // 0x18: pointer
  if (data?.Gestures !== undefined) view.setBigUint64(24, data.Gestures === null ? 0n : BigInt(util.toPointer(data.Gestures)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.IEC_RECOGNITIONRESULTINFO (size: 16)
 */
export interface IEC_RECOGNITIONRESULTINFO {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.TabletPC.IInkRecognitionResult */
  RecognitionResult: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIEC_RECOGNITIONRESULTINFO = 16;

export function allocIEC_RECOGNITIONRESULTINFO(data?: Partial<IEC_RECOGNITIONRESULTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIEC_RECOGNITIONRESULTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.RecognitionResult !== undefined) view.setBigUint64(8, data.RecognitionResult === null ? 0n : BigInt(util.toPointer(data.RecognitionResult)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.UI.TabletPC.StylusInfo (size: 16)
 */
export interface StylusInfo {
  /** u32 */
  tcid: number;
  /** u32 */
  cid: number;
  /** Windows.Win32.Foundation.BOOL */
  bIsInvertedCursor: boolean;
}

export const sizeofStylusInfo = 16;

export function allocStylusInfo(data?: Partial<StylusInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofStylusInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.tcid !== undefined) view.setUint32(0, Number(data.tcid), true);
  // 0x04: u32
  if (data?.cid !== undefined) view.setUint32(4, Number(data.cid), true);
  // 0x08: i32
  if (data?.bIsInvertedCursor !== undefined) view.setInt32(8, Number(data.bIsInvertedCursor), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.GESTURE_DATA (size: 16)
 */
export interface GESTURE_DATA {
  /** i32 */
  gestureId: number;
  /** i32 */
  recoConfidence: number;
  /** i32 */
  strokeCount: number;
}

export const sizeofGESTURE_DATA = 16;

export function allocGESTURE_DATA(data?: Partial<GESTURE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofGESTURE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.gestureId !== undefined) view.setInt32(0, Number(data.gestureId), true);
  // 0x04: i32
  if (data?.recoConfidence !== undefined) view.setInt32(4, Number(data.recoConfidence), true);
  // 0x08: i32
  if (data?.strokeCount !== undefined) view.setInt32(8, Number(data.strokeCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.DYNAMIC_RENDERER_CACHED_DATA (size: 16)
 */
export interface DYNAMIC_RENDERER_CACHED_DATA {
  /** i32 */
  strokeId: number;
  /** Windows.Win32.UI.TabletPC.IDynamicRenderer */
  dynamicRenderer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDYNAMIC_RENDERER_CACHED_DATA = 16;

export function allocDYNAMIC_RENDERER_CACHED_DATA(data?: Partial<DYNAMIC_RENDERER_CACHED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDYNAMIC_RENDERER_CACHED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.strokeId !== undefined) view.setInt32(0, Number(data.strokeId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.dynamicRenderer !== undefined) view.setBigUint64(8, data.dynamicRenderer === null ? 0n : BigInt(util.toPointer(data.dynamicRenderer)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_GUIDE (size: 40)
 */
export interface RECO_GUIDE {
  /** i32 */
  xOrigin: number;
  /** i32 */
  yOrigin: number;
  /** i32 */
  cxBox: number;
  /** i32 */
  cyBox: number;
  /** i32 */
  cxBase: number;
  /** i32 */
  cyBase: number;
  /** i32 */
  cHorzBox: number;
  /** i32 */
  cVertBox: number;
  /** i32 */
  cyMid: number;
}

export const sizeofRECO_GUIDE = 40;

export function allocRECO_GUIDE(data?: Partial<RECO_GUIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_GUIDE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.xOrigin !== undefined) view.setInt32(0, Number(data.xOrigin), true);
  // 0x04: i32
  if (data?.yOrigin !== undefined) view.setInt32(4, Number(data.yOrigin), true);
  // 0x08: i32
  if (data?.cxBox !== undefined) view.setInt32(8, Number(data.cxBox), true);
  // 0x0c: i32
  if (data?.cyBox !== undefined) view.setInt32(12, Number(data.cyBox), true);
  // 0x10: i32
  if (data?.cxBase !== undefined) view.setInt32(16, Number(data.cxBase), true);
  // 0x14: i32
  if (data?.cyBase !== undefined) view.setInt32(20, Number(data.cyBase), true);
  // 0x18: i32
  if (data?.cHorzBox !== undefined) view.setInt32(24, Number(data.cHorzBox), true);
  // 0x1c: i32
  if (data?.cVertBox !== undefined) view.setInt32(28, Number(data.cVertBox), true);
  // 0x20: i32
  if (data?.cyMid !== undefined) view.setInt32(32, Number(data.cyMid), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_ATTRS (size: 32)
 */
export interface RECO_ATTRS {
  /** u32 */
  dwRecoCapabilityFlags: number;
  /** array */
  awcVendorName: Deno.PointerValue | null;
  /** array */
  awcFriendlyName: Deno.PointerValue | null;
  /** array */
  awLanguageId: Deno.PointerValue | null;
}

export const sizeofRECO_ATTRS = 32;

export function allocRECO_ATTRS(data?: Partial<RECO_ATTRS>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_ATTRS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRecoCapabilityFlags !== undefined) view.setUint32(0, Number(data.dwRecoCapabilityFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.awcVendorName !== undefined) view.setBigUint64(8, data.awcVendorName === null ? 0n : BigInt(util.toPointer(data.awcVendorName)), true);
  // 0x10: pointer
  if (data?.awcFriendlyName !== undefined) view.setBigUint64(16, data.awcFriendlyName === null ? 0n : BigInt(util.toPointer(data.awcFriendlyName)), true);
  // 0x18: pointer
  if (data?.awLanguageId !== undefined) view.setBigUint64(24, data.awLanguageId === null ? 0n : BigInt(util.toPointer(data.awLanguageId)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_RANGE (size: 8)
 */
export interface RECO_RANGE {
  /** u32 */
  iwcBegin: number;
  /** u32 */
  cCount: number;
}

export const sizeofRECO_RANGE = 8;

export function allocRECO_RANGE(data?: Partial<RECO_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iwcBegin !== undefined) view.setUint32(0, Number(data.iwcBegin), true);
  // 0x04: u32
  if (data?.cCount !== undefined) view.setUint32(4, Number(data.cCount), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.LINE_SEGMENT (size: 16)
 */
export interface LINE_SEGMENT {
  /** Windows.Win32.Foundation.POINT */
  PtA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.POINT */
  PtB: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLINE_SEGMENT = 16;

export function allocLINE_SEGMENT(data?: Partial<LINE_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofLINE_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PtA !== undefined) view.setBigUint64(0, data.PtA === null ? 0n : BigInt(util.toPointer(data.PtA)), true);
  // 0x08: pointer
  if (data?.PtB !== undefined) view.setBigUint64(8, data.PtB === null ? 0n : BigInt(util.toPointer(data.PtB)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.LATTICE_METRICS (size: 16)
 */
export interface LATTICE_METRICS {
  /** Windows.Win32.UI.TabletPC.LINE_SEGMENT */
  lsBaseline: Uint8Array | Deno.PointerValue | null;
  /** i16 */
  iMidlineOffset: number;
}

export const sizeofLATTICE_METRICS = 16;

export function allocLATTICE_METRICS(data?: Partial<LATTICE_METRICS>): Uint8Array {
  const buf = new Uint8Array(sizeofLATTICE_METRICS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lsBaseline !== undefined) view.setBigUint64(0, data.lsBaseline === null ? 0n : BigInt(util.toPointer(data.lsBaseline)), true);
  // 0x08: i16
  if (data?.iMidlineOffset !== undefined) view.setInt16(8, Number(data.iMidlineOffset), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_LATTICE_PROPERTY (size: 24)
 */
export interface RECO_LATTICE_PROPERTY {
  /** System.Guid */
  guidProperty: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cbPropertyValue: number;
  /** ptr */
  pPropertyValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRECO_LATTICE_PROPERTY = 24;

export function allocRECO_LATTICE_PROPERTY(data?: Partial<RECO_LATTICE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_LATTICE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guidProperty !== undefined) view.setBigUint64(0, data.guidProperty === null ? 0n : BigInt(util.toPointer(data.guidProperty)), true);
  // 0x08: u16
  if (data?.cbPropertyValue !== undefined) view.setUint16(8, Number(data.cbPropertyValue), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.pPropertyValue !== undefined) view.setBigUint64(16, data.pPropertyValue === null ? 0n : BigInt(util.toPointer(data.pPropertyValue)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_LATTICE_PROPERTIES (size: 16)
 */
export interface RECO_LATTICE_PROPERTIES {
  /** u32 */
  cProperties: number;
  /** ptr */
  apProps: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRECO_LATTICE_PROPERTIES = 16;

export function allocRECO_LATTICE_PROPERTIES(data?: Partial<RECO_LATTICE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_LATTICE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProperties !== undefined) view.setUint32(0, Number(data.cProperties), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.apProps !== undefined) view.setBigUint64(8, data.apProps === null ? 0n : BigInt(util.toPointer(data.apProps)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_LATTICE_ELEMENT (size: 32)
 */
export interface RECO_LATTICE_ELEMENT {
  /** i32 */
  score: number;
  /** u16 */
  type: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulNextColumn: number;
  /** u32 */
  ulStrokeNumber: number;
  /** Windows.Win32.UI.TabletPC.RECO_LATTICE_PROPERTIES */
  epProp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRECO_LATTICE_ELEMENT = 32;

export function allocRECO_LATTICE_ELEMENT(data?: Partial<RECO_LATTICE_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_LATTICE_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.score !== undefined) view.setInt32(0, Number(data.score), true);
  // 0x04: u16
  if (data?.type !== undefined) view.setUint16(4, Number(data.type), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x10: u32
  if (data?.ulNextColumn !== undefined) view.setUint32(16, Number(data.ulNextColumn), true);
  // 0x14: u32
  if (data?.ulStrokeNumber !== undefined) view.setUint32(20, Number(data.ulStrokeNumber), true);
  // 0x18: pointer
  if (data?.epProp !== undefined) view.setBigUint64(24, data.epProp === null ? 0n : BigInt(util.toPointer(data.epProp)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_LATTICE_COLUMN (size: 48)
 */
export interface RECO_LATTICE_COLUMN {
  /** u32 */
  key: number;
  /** Windows.Win32.UI.TabletPC.RECO_LATTICE_PROPERTIES */
  cpProp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cStrokes: number;
  /** ptr */
  pStrokes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cLatticeElements: number;
  /** ptr */
  pLatticeElements: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRECO_LATTICE_COLUMN = 48;

export function allocRECO_LATTICE_COLUMN(data?: Partial<RECO_LATTICE_COLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_LATTICE_COLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.key !== undefined) view.setUint32(0, Number(data.key), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.cpProp !== undefined) view.setBigUint64(8, data.cpProp === null ? 0n : BigInt(util.toPointer(data.cpProp)), true);
  // 0x10: u32
  if (data?.cStrokes !== undefined) view.setUint32(16, Number(data.cStrokes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pStrokes !== undefined) view.setBigUint64(24, data.pStrokes === null ? 0n : BigInt(util.toPointer(data.pStrokes)), true);
  // 0x20: u32
  if (data?.cLatticeElements !== undefined) view.setUint32(32, Number(data.cLatticeElements), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pLatticeElements !== undefined) view.setBigUint64(40, data.pLatticeElements === null ? 0n : BigInt(util.toPointer(data.pLatticeElements)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.RECO_LATTICE (size: 56)
 */
export interface RECO_LATTICE {
  /** u32 */
  ulColumnCount: number;
  /** ptr */
  pLatticeColumns: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulPropertyCount: number;
  /** ptr */
  pGuidProperties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ulBestResultColumnCount: number;
  /** ptr */
  pulBestResultColumns: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pulBestResultIndexes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRECO_LATTICE = 56;

export function allocRECO_LATTICE(data?: Partial<RECO_LATTICE>): Uint8Array {
  const buf = new Uint8Array(sizeofRECO_LATTICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulColumnCount !== undefined) view.setUint32(0, Number(data.ulColumnCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pLatticeColumns !== undefined) view.setBigUint64(8, data.pLatticeColumns === null ? 0n : BigInt(util.toPointer(data.pLatticeColumns)), true);
  // 0x10: u32
  if (data?.ulPropertyCount !== undefined) view.setUint32(16, Number(data.ulPropertyCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pGuidProperties !== undefined) view.setBigUint64(24, data.pGuidProperties === null ? 0n : BigInt(util.toPointer(data.pGuidProperties)), true);
  // 0x20: u32
  if (data?.ulBestResultColumnCount !== undefined) view.setUint32(32, Number(data.ulBestResultColumnCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pulBestResultColumns !== undefined) view.setBigUint64(40, data.pulBestResultColumns === null ? 0n : BigInt(util.toPointer(data.pulBestResultColumns)), true);
  // 0x30: pointer
  if (data?.pulBestResultIndexes !== undefined) view.setBigUint64(48, data.pulBestResultIndexes === null ? 0n : BigInt(util.toPointer(data.pulBestResultIndexes)), true);
  return buf;
}

/**
 * Windows.Win32.UI.TabletPC.CHARACTER_RANGE (size: 16)
 */
export interface CHARACTER_RANGE {
  /** char */
  wcLow: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cChars: number;
}

export const sizeofCHARACTER_RANGE = 16;

export function allocCHARACTER_RANGE(data?: Partial<CHARACTER_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARACTER_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wcLow !== undefined) view.setBigUint64(0, data.wcLow === null ? 0n : BigInt(util.toPointer(data.wcLow)), true);
  // 0x08: u16
  if (data?.cChars !== undefined) view.setUint16(8, Number(data.cChars), true);
  // 0x0a: pad6
  return buf;
}

export type HRESULT = number;

export type PWSTR = Deno.PointerValue | Uint8Array | null;

// Native Libraries

try {
  var libinkobjcore_dll = Deno.dlopen("inkobjcore.dll", {
    CreateRecognizer: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DestroyRecognizer: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetRecoAttributes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    CreateContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    DestroyContext: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetResultPropertyList: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    GetUnicodeRanges: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    AddStroke: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    GetBestResultString: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    SetGuide: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    AdviseInkChange: {
      parameters: ["pointer", "i32"],
      result: "pointer",
    },
    EndInkInput: {
      parameters: ["pointer"],
      result: "pointer",
    },
    Process: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetFactoid: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    SetFlags: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetLatticePtr: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    SetTextContext: {
      parameters: ["pointer", "u32", "buffer", "u32", "buffer"],
      result: "pointer",
    },
    SetEnabledUnicodeRanges: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    IsStringSupported: {
      parameters: ["pointer", "u32", "buffer"],
      result: "pointer",
    },
    SetWordList: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    GetRightSeparator: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    GetLeftSeparator: {
      parameters: ["pointer", "pointer", "buffer"],
      result: "pointer",
    },
    DestroyWordList: {
      parameters: ["pointer"],
      result: "pointer",
    },
    AddWordsToWordList: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    MakeWordList: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    GetAllRecognizers: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    LoadCachedAttributes: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreateRecognizer(
  pCLSID: Deno.PointerValue | Uint8Array | null /* ptr */,
  phrec: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.CreateRecognizer(util.toPointer(pCLSID), util.toPointer(phrec)));
}

export function DestroyRecognizer(
  hrec: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOGNIZER */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.DestroyRecognizer(util.toPointer(hrec)));
}

export function GetRecoAttributes(
  hrec: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOGNIZER */,
  pRecoAttrs: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetRecoAttributes(util.toPointer(hrec), util.toPointer(pRecoAttrs)));
}

export function CreateContext(
  hrec: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOGNIZER */,
  phrc: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.CreateContext(util.toPointer(hrec), util.toPointer(phrc)));
}

export function DestroyContext(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.DestroyContext(util.toPointer(hrc)));
}

export function GetResultPropertyList(
  hrec: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOGNIZER */,
  pPropertyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPropertyGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetResultPropertyList(util.toPointer(hrec), util.toPointer(pPropertyCount), util.toPointer(pPropertyGuid)));
}

export function GetUnicodeRanges(
  hrec: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOGNIZER */,
  pcRanges: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetUnicodeRanges(util.toPointer(hrec), util.toPointer(pcRanges), util.toPointer(pcr)));
}

export function AddStroke(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  pPacketDesc: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPacket: number /* u32 */,
  pPacket: Deno.PointerValue | Uint8Array | null /* ptr */,
  pXForm: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.AddStroke(util.toPointer(hrc), util.toPointer(pPacketDesc), cbPacket, util.toPointer(pPacket), util.toPointer(pXForm)));
}

export function GetBestResultString(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  pcSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwcBestResult: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetBestResultString(util.toPointer(hrc), util.toPointer(pcSize), util.pwstrToFfi(pwcBestResult)));
}

export function SetGuide(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  pGuide: Deno.PointerValue | Uint8Array | null /* ptr */,
  iIndex: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.SetGuide(util.toPointer(hrc), util.toPointer(pGuide), iIndex));
}

export function AdviseInkChange(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  bNewStroke: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.AdviseInkChange(util.toPointer(hrc), util.boolToFfi(bNewStroke)));
}

export function EndInkInput(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.EndInkInput(util.toPointer(hrc)));
}

export function Process(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  pbPartialProcessing: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.Process(util.toPointer(hrc), util.toPointer(pbPartialProcessing)));
}

export function SetFactoid(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  cwcFactoid: number /* u32 */,
  pwcFactoid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.SetFactoid(util.toPointer(hrc), cwcFactoid, util.pwstrToFfi(pwcFactoid)));
}

export function SetFlags(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.SetFlags(util.toPointer(hrc), dwFlags));
}

export function GetLatticePtr(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  ppLattice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetLatticePtr(util.toPointer(hrc), util.toPointer(ppLattice)));
}

export function SetTextContext(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  cwcBefore: number /* u32 */,
  pwcBefore: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cwcAfter: number /* u32 */,
  pwcAfter: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.SetTextContext(util.toPointer(hrc), cwcBefore, util.pwstrToFfi(pwcBefore), cwcAfter, util.pwstrToFfi(pwcAfter)));
}

export function SetEnabledUnicodeRanges(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  cRanges: number /* u32 */,
  pcr: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.SetEnabledUnicodeRanges(util.toPointer(hrc), cRanges, util.toPointer(pcr)));
}

export function IsStringSupported(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  wcString: number /* u32 */,
  pwcString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.IsStringSupported(util.toPointer(hrc), wcString, util.pwstrToFfi(pwcString)));
}

export function SetWordList(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  hwl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOWORDLIST */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.SetWordList(util.toPointer(hrc), util.toPointer(hwl)));
}

export function GetRightSeparator(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  pcSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwcRightSeparator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetRightSeparator(util.toPointer(hrc), util.toPointer(pcSize), util.pwstrToFfi(pwcRightSeparator)));
}

export function GetLeftSeparator(
  hrc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOCONTEXT */,
  pcSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwcLeftSeparator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetLeftSeparator(util.toPointer(hrc), util.toPointer(pcSize), util.pwstrToFfi(pwcLeftSeparator)));
}

export function DestroyWordList(
  hwl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOWORDLIST */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.DestroyWordList(util.toPointer(hwl)));
}

export function AddWordsToWordList(
  hwl: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOWORDLIST */,
  pwcWords: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.AddWordsToWordList(util.toPointer(hwl), util.pwstrToFfi(pwcWords)));
}

export function MakeWordList(
  hrec: Uint8Array | Deno.PointerValue | null /* Windows.Win32.UI.TabletPC.HRECOGNIZER */,
  pBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phwl: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.MakeWordList(util.toPointer(hrec), util.pwstrToFfi(pBuffer), util.toPointer(phwl)));
}

export function GetAllRecognizers(
  recognizerClsids: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.GetAllRecognizers(util.toPointer(recognizerClsids), util.toPointer(count)));
}

export function LoadCachedAttributes(
  clsid: Uint8Array | Deno.PointerValue | null /* System.Guid */,
  pRecoAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libinkobjcore_dll.LoadCachedAttributes(util.toPointer(clsid), util.toPointer(pRecoAttributes)));
}

