/// Auto-generated by Deno Win32: Windows.Win32.UI.Controls.Dialogs.Apis

import * as util from "../../../util.ts";

// Enums
export type COMMON_DLG_ERRORS = number;
export type CHOOSECOLOR_FLAGS = number;
export type OPEN_FILENAME_FLAGS = number;
export type OPEN_FILENAME_FLAGS_EX = number;
export type PAGESETUPDLG_FLAGS = number;
export type CHOOSEFONT_FLAGS = number;
export type FINDREPLACE_FLAGS = number;
export type PRINTDLGEX_FLAGS = number;
export type CHOOSEFONT_FONT_TYPE = number;

// Constants
export const CDERR_DIALOGFAILURE = 65535;
export const CDERR_GENERALCODES = 0;
export const CDERR_STRUCTSIZE = 1;
export const CDERR_INITIALIZATION = 2;
export const CDERR_NOTEMPLATE = 3;
export const CDERR_NOHINSTANCE = 4;
export const CDERR_LOADSTRFAILURE = 5;
export const CDERR_FINDRESFAILURE = 6;
export const CDERR_LOADRESFAILURE = 7;
export const CDERR_LOCKRESFAILURE = 8;
export const CDERR_MEMALLOCFAILURE = 9;
export const CDERR_MEMLOCKFAILURE = 10;
export const CDERR_NOHOOK = 11;
export const CDERR_REGISTERMSGFAIL = 12;
export const PDERR_PRINTERCODES = 4096;
export const PDERR_SETUPFAILURE = 4097;
export const PDERR_PARSEFAILURE = 4098;
export const PDERR_RETDEFFAILURE = 4099;
export const PDERR_LOADDRVFAILURE = 4100;
export const PDERR_GETDEVMODEFAIL = 4101;
export const PDERR_INITFAILURE = 4102;
export const PDERR_NODEVICES = 4103;
export const PDERR_NODEFAULTPRN = 4104;
export const PDERR_DNDMMISMATCH = 4105;
export const PDERR_CREATEICFAILURE = 4106;
export const PDERR_PRINTERNOTFOUND = 4107;
export const PDERR_DEFAULTDIFFERENT = 4108;
export const CFERR_CHOOSEFONTCODES = 8192;
export const CFERR_NOFONTS = 8193;
export const CFERR_MAXLESSTHANMIN = 8194;
export const FNERR_FILENAMECODES = 12288;
export const FNERR_SUBCLASSFAILURE = 12289;
export const FNERR_INVALIDFILENAME = 12290;
export const FNERR_BUFFERTOOSMALL = 12291;
export const FRERR_FINDREPLACECODES = 16384;
export const FRERR_BUFFERLENGTHZERO = 16385;
export const CCERR_CHOOSECOLORCODES = 20480;
export const CC_RGBINIT = 1;
export const CC_FULLOPEN = 2;
export const CC_PREVENTFULLOPEN = 4;
export const CC_SHOWHELP = 8;
export const CC_ENABLEHOOK = 16;
export const CC_ENABLETEMPLATE = 32;
export const CC_ENABLETEMPLATEHANDLE = 64;
export const CC_SOLIDCOLOR = 128;
export const CC_ANYCOLOR = 256;
export const OFN_READONLY = 1;
export const OFN_OVERWRITEPROMPT = 2;
export const OFN_HIDEREADONLY = 4;
export const OFN_NOCHANGEDIR = 8;
export const OFN_SHOWHELP = 16;
export const OFN_ENABLEHOOK = 32;
export const OFN_ENABLETEMPLATE = 64;
export const OFN_ENABLETEMPLATEHANDLE = 128;
export const OFN_NOVALIDATE = 256;
export const OFN_ALLOWMULTISELECT = 512;
export const OFN_EXTENSIONDIFFERENT = 1024;
export const OFN_PATHMUSTEXIST = 2048;
export const OFN_FILEMUSTEXIST = 4096;
export const OFN_CREATEPROMPT = 8192;
export const OFN_SHAREAWARE = 16384;
export const OFN_NOREADONLYRETURN = 32768;
export const OFN_NOTESTFILECREATE = 65536;
export const OFN_NONETWORKBUTTON = 131072;
export const OFN_NOLONGNAMES = 262144;
export const OFN_EXPLORER = 524288;
export const OFN_NODEREFERENCELINKS = 1048576;
export const OFN_LONGNAMES = 2097152;
export const OFN_ENABLEINCLUDENOTIFY = 4194304;
export const OFN_ENABLESIZING = 8388608;
export const OFN_DONTADDTORECENT = 33554432;
export const OFN_FORCESHOWHIDDEN = 268435456;
export const OFN_EX_NONE = 0;
export const OFN_EX_NOPLACESBAR = 1;
export const PSD_DEFAULTMINMARGINS = 0;
export const PSD_DISABLEMARGINS = 16;
export const PSD_DISABLEORIENTATION = 256;
export const PSD_DISABLEPAGEPAINTING = 524288;
export const PSD_DISABLEPAPER = 512;
export const PSD_DISABLEPRINTER = 32;
export const PSD_ENABLEPAGEPAINTHOOK = 262144;
export const PSD_ENABLEPAGESETUPHOOK = 8192;
export const PSD_ENABLEPAGESETUPTEMPLATE = 32768;
export const PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 131072;
export const PSD_INHUNDREDTHSOFMILLIMETERS = 8;
export const PSD_INTHOUSANDTHSOFINCHES = 4;
export const PSD_INWININIINTLMEASURE = 0;
export const PSD_MARGINS = 2;
export const PSD_MINMARGINS = 1;
export const PSD_NONETWORKBUTTON = 2097152;
export const PSD_NOWARNING = 128;
export const PSD_RETURNDEFAULT = 1024;
export const PSD_SHOWHELP = 2048;
export const CF_APPLY = 512;
export const CF_ANSIONLY = 1024;
export const CF_BOTH = 3;
export const CF_EFFECTS = 256;
export const CF_ENABLEHOOK = 8;
export const CF_ENABLETEMPLATE = 16;
export const CF_ENABLETEMPLATEHANDLE = 32;
export const CF_FIXEDPITCHONLY = 16384;
export const CF_FORCEFONTEXIST = 65536;
export const CF_INACTIVEFONTS = 33554432;
export const CF_INITTOLOGFONTSTRUCT = 64;
export const CF_LIMITSIZE = 8192;
export const CF_NOOEMFONTS = 2048;
export const CF_NOFACESEL = 524288;
export const CF_NOSCRIPTSEL = 8388608;
export const CF_NOSIMULATIONS = 4096;
export const CF_NOSIZESEL = 2097152;
export const CF_NOSTYLESEL = 1048576;
export const CF_NOVECTORFONTS = 2048;
export const CF_NOVERTFONTS = 16777216;
export const CF_PRINTERFONTS = 2;
export const CF_SCALABLEONLY = 131072;
export const CF_SCREENFONTS = 1;
export const CF_SCRIPTSONLY = 1024;
export const CF_SELECTSCRIPT = 4194304;
export const CF_SHOWHELP = 4;
export const CF_TTONLY = 262144;
export const CF_USESTYLE = 128;
export const CF_WYSIWYG = 32768;
export const FR_DIALOGTERM = 64;
export const FR_DOWN = 1;
export const FR_ENABLEHOOK = 256;
export const FR_ENABLETEMPLATE = 512;
export const FR_ENABLETEMPLATEHANDLE = 8192;
export const FR_FINDNEXT = 8;
export const FR_HIDEUPDOWN = 16384;
export const FR_HIDEMATCHCASE = 32768;
export const FR_HIDEWHOLEWORD = 65536;
export const FR_MATCHCASE = 4;
export const FR_NOMATCHCASE = 2048;
export const FR_NOUPDOWN = 1024;
export const FR_NOWHOLEWORD = 4096;
export const FR_REPLACE = 16;
export const FR_REPLACEALL = 32;
export const FR_SHOWHELP = 128;
export const FR_WHOLEWORD = 2;
export const PD_ALLPAGES = 0;
export const PD_COLLATE = 16;
export const PD_CURRENTPAGE = 4194304;
export const PD_DISABLEPRINTTOFILE = 524288;
export const PD_ENABLEPRINTTEMPLATE = 16384;
export const PD_ENABLEPRINTTEMPLATEHANDLE = 65536;
export const PD_EXCLUSIONFLAGS = 16777216;
export const PD_HIDEPRINTTOFILE = 1048576;
export const PD_NOCURRENTPAGE = 8388608;
export const PD_NOPAGENUMS = 8;
export const PD_NOSELECTION = 4;
export const PD_NOWARNING = 128;
export const PD_PAGENUMS = 2;
export const PD_PRINTTOFILE = 32;
export const PD_RETURNDC = 256;
export const PD_RETURNDEFAULT = 1024;
export const PD_RETURNIC = 512;
export const PD_SELECTION = 1;
export const PD_USEDEVMODECOPIES = 262144;
export const PD_USEDEVMODECOPIESANDCOLLATE = 262144;
export const PD_USELARGETEMPLATE = 268435456;
export const PD_ENABLEPRINTHOOK = 4096;
export const PD_ENABLESETUPHOOK = 8192;
export const PD_ENABLESETUPTEMPLATE = 32768;
export const PD_ENABLESETUPTEMPLATEHANDLE = 131072;
export const PD_NONETWORKBUTTON = 2097152;
export const PD_PRINTSETUP = 64;
export const PD_SHOWHELP = 2048;
export const BOLD_FONTTYPE = 256;
export const ITALIC_FONTTYPE = 512;
export const PRINTER_FONTTYPE = 16384;
export const REGULAR_FONTTYPE = 1024;
export const SCREEN_FONTTYPE = 8192;
export const SIMULATED_FONTTYPE = 32768;
export const OFN_SHAREFALLTHROUGH = 2;
export const OFN_SHARENOWARN = 1;
export const OFN_SHAREWARN = 0;
export const CDM_FIRST = 1124;
export const CDM_LAST = 1224;
export const CDM_GETSPEC = 1124;
export const CDM_GETFILEPATH = 1125;
export const CDM_GETFOLDERPATH = 1126;
export const CDM_GETFOLDERIDLIST = 1127;
export const CDM_SETCONTROLTEXT = 1128;
export const CDM_HIDECONTROL = 1129;
export const CDM_SETDEFEXT = 1130;
export const FR_RAW = 131072;
export const FR_SHOWWRAPAROUND = 262144;
export const FR_NOWRAPAROUND = 524288;
export const FR_WRAPAROUND = 1048576;
export const FRM_FIRST = 1124;
export const FRM_LAST = 1224;
export const FRM_SETOPERATIONRESULT = 1124;
export const FRM_SETOPERATIONRESULTTEXT = 1125;
export const PS_OPENTYPE_FONTTYPE = 65536;
export const TT_OPENTYPE_FONTTYPE = 131072;
export const TYPE1_FONTTYPE = 262144;
export const SYMBOL_FONTTYPE = 524288;
export const WM_CHOOSEFONT_GETLOGFONT = 1025;
export const WM_CHOOSEFONT_SETLOGFONT = 1125;
export const WM_CHOOSEFONT_SETFLAGS = 1126;
export const LBSELCHSTRINGA = `commdlg_LBSelChangedNotify`;
export const SHAREVISTRINGA = `commdlg_ShareViolation`;
export const FILEOKSTRINGA = `commdlg_FileNameOK`;
export const COLOROKSTRINGA = `commdlg_ColorOK`;
export const SETRGBSTRINGA = `commdlg_SetRGBColor`;
export const HELPMSGSTRINGA = `commdlg_help`;
export const FINDMSGSTRINGA = `commdlg_FindReplace`;
export const LBSELCHSTRINGW = `commdlg_LBSelChangedNotify`;
export const SHAREVISTRINGW = `commdlg_ShareViolation`;
export const FILEOKSTRINGW = `commdlg_FileNameOK`;
export const COLOROKSTRINGW = `commdlg_ColorOK`;
export const SETRGBSTRINGW = `commdlg_SetRGBColor`;
export const HELPMSGSTRINGW = `commdlg_help`;
export const FINDMSGSTRINGW = `commdlg_FindReplace`;
export const LBSELCHSTRING = `commdlg_LBSelChangedNotify`;
export const SHAREVISTRING = `commdlg_ShareViolation`;
export const FILEOKSTRING = `commdlg_FileNameOK`;
export const COLOROKSTRING = `commdlg_ColorOK`;
export const SETRGBSTRING = `commdlg_SetRGBColor`;
export const HELPMSGSTRING = `commdlg_help`;
export const FINDMSGSTRING = `commdlg_FindReplace`;
export const CD_LBSELNOITEMS = `-1`;
export const CD_LBSELCHANGE = 0;
export const CD_LBSELSUB = 1;
export const CD_LBSELADD = 2;
export const START_PAGE_GENERAL = 4294967295;
export const PD_RESULT_CANCEL = 0;
export const PD_RESULT_PRINT = 1;
export const PD_RESULT_APPLY = 2;
export const DN_DEFAULTPRN = 1;
export const WM_PSD_FULLPAGERECT = 1025;
export const WM_PSD_MINMARGINRECT = 1026;
export const WM_PSD_MARGINRECT = 1027;
export const WM_PSD_GREEKTEXTRECT = 1028;
export const WM_PSD_ENVSTAMPRECT = 1029;
export const WM_PSD_YAFULLPAGERECT = 1030;
export const DLG_COLOR = 10;
export const COLOR_HUESCROLL = 700;
export const COLOR_SATSCROLL = 701;
export const COLOR_LUMSCROLL = 702;
export const COLOR_HUE = 703;
export const COLOR_SAT = 704;
export const COLOR_LUM = 705;
export const COLOR_RED = 706;
export const COLOR_GREEN = 707;
export const COLOR_BLUE = 708;
export const COLOR_CURRENT = 709;
export const COLOR_RAINBOW = 710;
export const COLOR_SAVE = 711;
export const COLOR_ADD = 712;
export const COLOR_SOLID = 713;
export const COLOR_TUNE = 714;
export const COLOR_SCHEMES = 715;
export const COLOR_ELEMENT = 716;
export const COLOR_SAMPLES = 717;
export const COLOR_PALETTE = 718;
export const COLOR_MIX = 719;
export const COLOR_BOX1 = 720;
export const COLOR_CUSTOM1 = 721;
export const COLOR_HUEACCEL = 723;
export const COLOR_SATACCEL = 724;
export const COLOR_LUMACCEL = 725;
export const COLOR_REDACCEL = 726;
export const COLOR_GREENACCEL = 727;
export const COLOR_BLUEACCEL = 728;
export const COLOR_SOLID_LEFT = 730;
export const COLOR_SOLID_RIGHT = 731;
export const NUM_BASIC_COLORS = 48;
export const NUM_CUSTOM_COLORS = 16;

// Structs

export type HWND = bigint | number;

export type HINSTANCE = bigint | number;

export type PSTR = Deno.PointerValue | Uint8Array;

export type LPARAM = bigint | number;

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAME_NT4A (size: 136)
 */
export interface OPENFILENAME_NT4A {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFilter: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCustomFilter: string | null | Uint8Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFile: string | null | Uint8Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileTitle: string | null | Uint8Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrInitialDir: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDefExt: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
}

export const sizeofOPENFILENAME_NT4A = 136;

export function allocOPENFILENAME_NT4A(data?: Partial<OPENFILENAME_NT4A>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAME_NT4A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class OPENFILENAME_NT4AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAME_NT4W (size: 136)
 */
export interface OPENFILENAME_NT4W {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFilter: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCustomFilter: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrInitialDir: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDefExt: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
}

export const sizeofOPENFILENAME_NT4W = 136;

export function allocOPENFILENAME_NT4W(data?: Partial<OPENFILENAME_NT4W>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAME_NT4W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class OPENFILENAME_NT4WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAMEA (size: 152)
 */
export interface OPENFILENAMEA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFilter: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCustomFilter: string | null | Uint8Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFile: string | null | Uint8Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFileTitle: string | null | Uint8Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrInitialDir: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS */
  Flags: OPEN_FILENAME_FLAGS;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrDefExt: string | null | Uint8Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS_EX */
  FlagsEx: OPEN_FILENAME_FLAGS_EX;
}

export const sizeofOPENFILENAMEA = 152;

export function allocOPENFILENAMEA(data?: Partial<OPENFILENAMEA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAMEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(136, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x90: u32
  if (data?.dwReserved !== undefined) view.setUint32(144, Number(data.dwReserved), true);
  // 0x94: u32
  if (data?.FlagsEx !== undefined) view.setUint32(148, Number(data.FlagsEx), true);
  return buf;
}

export class OPENFILENAMEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get dwReserved(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get FlagsEx(): number {
    return this.view.getUint32(148, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set dwReserved(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set FlagsEx(value: number) {
    this.view.setUint32(148, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OPENFILENAMEW (size: 152)
 */
export interface OPENFILENAMEW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFilter: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCustomFilter: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCustFilter: number;
  /** u32 */
  nFilterIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFile: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFileTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxFileTitle: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrInitialDir: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS */
  Flags: OPEN_FILENAME_FLAGS;
  /** u16 */
  nFileOffset: number;
  /** u16 */
  nFileExtension: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrDefExt: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPOFNHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.UI.Controls.Dialogs.OPEN_FILENAME_FLAGS_EX */
  FlagsEx: OPEN_FILENAME_FLAGS_EX;
}

export const sizeofOPENFILENAMEW = 152;

export function allocOPENFILENAMEW(data?: Partial<OPENFILENAMEW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENFILENAMEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: buffer
  if (data?.lpstrFilter !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrFilter);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpstrCustomFilter !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrCustomFilter);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.nMaxCustFilter !== undefined) view.setUint32(40, Number(data.nMaxCustFilter), true);
  // 0x2c: u32
  if (data?.nFilterIndex !== undefined) view.setUint32(44, Number(data.nFilterIndex), true);
  // 0x30: buffer
  if (data?.lpstrFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpstrFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.nMaxFile !== undefined) view.setUint32(56, Number(data.nMaxFile), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.lpstrFileTitle !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpstrFileTitle);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.nMaxFileTitle !== undefined) view.setUint32(72, Number(data.nMaxFileTitle), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.lpstrInitialDir !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpstrInitialDir);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.Flags !== undefined) view.setUint32(96, Number(data.Flags), true);
  // 0x64: u16
  if (data?.nFileOffset !== undefined) view.setUint16(100, Number(data.nFileOffset), true);
  // 0x66: u16
  if (data?.nFileExtension !== undefined) view.setUint16(102, Number(data.nFileExtension), true);
  // 0x68: buffer
  if (data?.lpstrDefExt !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrDefExt);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x78: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(120, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x80: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(136, data.pvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvReserved))), true);
  // 0x90: u32
  if (data?.dwReserved !== undefined) view.setUint32(144, Number(data.dwReserved), true);
  // 0x94: u32
  if (data?.FlagsEx !== undefined) view.setUint32(148, Number(data.FlagsEx), true);
  return buf;
}

export class OPENFILENAMEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpstrFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpstrCustomFilter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get nMaxCustFilter(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get nFilterIndex(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: buffer
  get lpstrFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get nMaxFile(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get lpstrFileTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMaxFileTitle(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get lpstrInitialDir(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get Flags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u16
  get nFileOffset(): number {
    return this.view.getUint16(100, true);
  }

  // 0x66: u16
  get nFileExtension(): number {
    return this.view.getUint16(102, true);
  }

  // 0x68: buffer
  get lpstrDefExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get dwReserved(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get FlagsEx(): number {
    return this.view.getUint32(148, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set lpstrFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpstrCustomFilter(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set nMaxCustFilter(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set nFilterIndex(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: buffer
  set lpstrFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set nMaxFile(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set lpstrFileTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set nMaxFileTitle(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set lpstrInitialDir(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set Flags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u16
  set nFileOffset(value: number) {
    this.view.setUint16(100, value, true);
  }

  // 0x66: u16
  set nFileExtension(value: number) {
    this.view.setUint16(102, value, true);
  }

  // 0x68: buffer
  set lpstrDefExt(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set dwReserved(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set FlagsEx(value: number) {
    this.view.setUint32(148, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.NMHDR (size: 24)
 */
export interface NMHDR {
  /** Windows.Win32.Foundation.HWND */
  hwndFrom: Deno.PointerValue;
  /** usize */
  idFrom: bigint | number;
  /** u32 */
  code: number;
}

export const sizeofNMHDR = 24;

export function allocNMHDR(data?: Partial<NMHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndFrom !== undefined) view.setBigUint64(0, data.hwndFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndFrom))), true);
  // 0x08: usize
  if (data?.idFrom !== undefined) view.setBigUint64(8, BigInt(data.idFrom), true);
  // 0x10: u32
  if (data?.code !== undefined) view.setUint32(16, Number(data.code), true);
  // 0x14: pad4
  return buf;
}

export class NMHDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwndFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get idFrom(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get code(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hwndFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set idFrom(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set code(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYA (size: 24)
 */
export interface OFNOTIFYA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszFile: string | null | Uint8Array;
}

export const sizeofOFNOTIFYA = 24;

export function allocOFNOTIFYA(data?: Partial<OFNOTIFYA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: buffer
  if (data?.pszFile !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class OFNOTIFYAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYW (size: 24)
 */
export interface OFNOTIFYW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszFile: string | null | Uint8Array | Uint16Array;
}

export const sizeofOFNOTIFYW = 24;

export function allocOFNOTIFYW(data?: Partial<OFNOTIFYW>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: buffer
  if (data?.pszFile !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class OFNOTIFYWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYEXA (size: 32)
 */
export interface OFNOTIFYEXA {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** ptr */
  psf: Deno.PointerValue | Uint8Array;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array;
}

export const sizeofOFNOTIFYEXA = 32;

export function allocOFNOTIFYEXA(data?: Partial<OFNOTIFYEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: pointer
  if (data?.psf !== undefined) view.setBigUint64(16, data.psf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psf))), true);
  // 0x18: pointer
  if (data?.pidl !== undefined) view.setBigUint64(24, data.pidl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidl))), true);
  return buf;
}

export class OFNOTIFYEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get psf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pidl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set psf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pidl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.OFNOTIFYEXW (size: 32)
 */
export interface OFNOTIFYEXW {
  /** Windows.Win32.UI.Controls.NMHDR */
  hdr: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOFN: Deno.PointerValue | Uint8Array;
  /** ptr */
  psf: Deno.PointerValue | Uint8Array;
  /** ptr */
  pidl: Deno.PointerValue | Uint8Array;
}

export const sizeofOFNOTIFYEXW = 32;

export function allocOFNOTIFYEXW(data?: Partial<OFNOTIFYEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofOFNOTIFYEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdr !== undefined) view.setBigUint64(0, data.hdr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdr))), true);
  // 0x08: pointer
  if (data?.lpOFN !== undefined) view.setBigUint64(8, data.lpOFN === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOFN))), true);
  // 0x10: pointer
  if (data?.psf !== undefined) view.setBigUint64(16, data.psf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psf))), true);
  // 0x18: pointer
  if (data?.pidl !== undefined) view.setBigUint64(24, data.pidl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pidl))), true);
  return buf;
}

export class OFNOTIFYEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hdr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpOFN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get psf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pidl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hdr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpOFN(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set psf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pidl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type COLORREF = number;

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSECOLORA (size: 72)
 */
export interface CHOOSECOLORA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hInstance: Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  rgbResult: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpCustColors: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSECOLOR_FLAGS */
  Flags: CHOOSECOLOR_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCCHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
}

export const sizeofCHOOSECOLORA = 72;

export function allocCHOOSECOLORA(data?: Partial<CHOOSECOLORA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSECOLORA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.rgbResult !== undefined) view.setBigUint64(24, data.rgbResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbResult))), true);
  // 0x20: pointer
  if (data?.lpCustColors !== undefined) view.setBigUint64(32, data.lpCustColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCustColors))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class CHOOSECOLORAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rgbResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpCustColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rgbResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpCustColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSECOLORW (size: 72)
 */
export interface CHOOSECOLORW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hInstance: Deno.PointerValue;
  /** Windows.Win32.Foundation.COLORREF */
  rgbResult: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpCustColors: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSECOLOR_FLAGS */
  Flags: CHOOSECOLOR_FLAGS;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCCHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCHOOSECOLORW = 72;

export function allocCHOOSECOLORW(data?: Partial<CHOOSECOLORW>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSECOLORW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: pointer
  if (data?.rgbResult !== undefined) view.setBigUint64(24, data.rgbResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbResult))), true);
  // 0x20: pointer
  if (data?.lpCustColors !== undefined) view.setBigUint64(32, data.lpCustColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCustColors))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class CHOOSECOLORWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get rgbResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpCustColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set rgbResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpCustColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.FINDREPLACEA (size: 80)
 */
export interface FINDREPLACEA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.FINDREPLACE_FLAGS */
  Flags: FINDREPLACE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  lpstrFindWhat: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrReplaceWith: string | null | Uint8Array;
  /** u16 */
  wFindWhatLen: number;
  /** u16 */
  wReplaceWithLen: number;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPFRHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
}

export const sizeofFINDREPLACEA = 80;

export function allocFINDREPLACEA(data?: Partial<FINDREPLACEA>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDREPLACEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrFindWhat !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrFindWhat);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpstrReplaceWith !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrReplaceWith);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u16
  if (data?.wFindWhatLen !== undefined) view.setUint16(48, Number(data.wFindWhatLen), true);
  // 0x32: u16
  if (data?.wReplaceWithLen !== undefined) view.setUint16(50, Number(data.wReplaceWithLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(56, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x40: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(64, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x48: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class FINDREPLACEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrFindWhat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpstrReplaceWith(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get wFindWhatLen(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wReplaceWithLen(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrFindWhat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpstrReplaceWith(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u16
  set wFindWhatLen(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wReplaceWithLen(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.FINDREPLACEW (size: 80)
 */
export interface FINDREPLACEW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.FINDREPLACE_FLAGS */
  Flags: FINDREPLACE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrFindWhat: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrReplaceWith: string | null | Uint8Array | Uint16Array;
  /** u16 */
  wFindWhatLen: number;
  /** u16 */
  wReplaceWithLen: number;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPFRHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
}

export const sizeofFINDREPLACEW = 80;

export function allocFINDREPLACEW(data?: Partial<FINDREPLACEW>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDREPLACEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrFindWhat !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrFindWhat);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpstrReplaceWith !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrReplaceWith);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u16
  if (data?.wFindWhatLen !== undefined) view.setUint16(48, Number(data.wFindWhatLen), true);
  // 0x32: u16
  if (data?.wReplaceWithLen !== undefined) view.setUint16(50, Number(data.wReplaceWithLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(56, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x40: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(64, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x48: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class FINDREPLACEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrFindWhat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpstrReplaceWith(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get wFindWhatLen(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wReplaceWithLen(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrFindWhat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpstrReplaceWith(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u16
  set wFindWhatLen(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wReplaceWithLen(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

export type HDC = bigint | number;

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSEFONTA (size: 104)
 */
export interface CHOOSEFONTA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpLogFont: Deno.PointerValue | Uint8Array;
  /** i32 */
  iPointSize: number;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FLAGS */
  Flags: CHOOSEFONT_FLAGS;
  /** Windows.Win32.Foundation.COLORREF */
  rgbColors: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCFHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpszStyle: string | null | Uint8Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FONT_TYPE */
  nFontType: CHOOSEFONT_FONT_TYPE;
  /** u16 */
  ___MISSING_ALIGNMENT__: number;
  /** i32 */
  nSizeMin: number;
  /** i32 */
  nSizeMax: number;
}

export const sizeofCHOOSEFONTA = 104;

export function allocCHOOSEFONTA(data?: Partial<CHOOSEFONTA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSEFONTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x18: pointer
  if (data?.lpLogFont !== undefined) view.setBigUint64(24, data.lpLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLogFont))), true);
  // 0x20: i32
  if (data?.iPointSize !== undefined) view.setInt32(32, Number(data.iPointSize), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.rgbColors !== undefined) view.setBigUint64(40, data.rgbColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbColors))), true);
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(72, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x50: buffer
  if (data?.lpszStyle !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpszStyle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: u16
  if (data?.nFontType !== undefined) view.setUint16(88, Number(data.nFontType), true);
  // 0x5a: u16
  if (data?.___MISSING_ALIGNMENT__ !== undefined) view.setUint16(90, Number(data.___MISSING_ALIGNMENT__), true);
  // 0x5c: i32
  if (data?.nSizeMin !== undefined) view.setInt32(92, Number(data.nSizeMin), true);
  // 0x60: i32
  if (data?.nSizeMax !== undefined) view.setInt32(96, Number(data.nSizeMax), true);
  // 0x64: pad4
  return buf;
}

export class CHOOSEFONTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get iPointSize(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get rgbColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get lpszStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get nFontType(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: u16
  get ___MISSING_ALIGNMENT__(): number {
    return this.view.getUint16(90, true);
  }

  // 0x5c: i32
  get nSizeMin(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get nSizeMax(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set iPointSize(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set rgbColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: buffer
  set lpszStyle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: u16
  set nFontType(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: u16
  set ___MISSING_ALIGNMENT__(value: number) {
    this.view.setUint16(90, value, true);
  }

  // 0x5c: i32
  set nSizeMin(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set nSizeMax(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.UI.Controls.Dialogs.CHOOSEFONTW (size: 104)
 */
export interface CHOOSEFONTW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpLogFont: Deno.PointerValue | Uint8Array;
  /** i32 */
  iPointSize: number;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FLAGS */
  Flags: CHOOSEFONT_FLAGS;
  /** Windows.Win32.Foundation.COLORREF */
  rgbColors: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPCFHOOKPROC */
  lpfnHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszStyle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.Controls.Dialogs.CHOOSEFONT_FONT_TYPE */
  nFontType: CHOOSEFONT_FONT_TYPE;
  /** u16 */
  ___MISSING_ALIGNMENT__: number;
  /** i32 */
  nSizeMin: number;
  /** i32 */
  nSizeMax: number;
}

export const sizeofCHOOSEFONTW = 104;

export function allocCHOOSEFONTW(data?: Partial<CHOOSEFONTW>): Uint8Array {
  const buf = new Uint8Array(sizeofCHOOSEFONTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: pointer
  if (data?.hDC !== undefined) view.setBigUint64(16, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x18: pointer
  if (data?.lpLogFont !== undefined) view.setBigUint64(24, data.lpLogFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLogFont))), true);
  // 0x20: i32
  if (data?.iPointSize !== undefined) view.setInt32(32, Number(data.iPointSize), true);
  // 0x24: u32
  if (data?.Flags !== undefined) view.setUint32(36, Number(data.Flags), true);
  // 0x28: pointer
  if (data?.rgbColors !== undefined) view.setBigUint64(40, data.rgbColors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgbColors))), true);
  // 0x30: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(48, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x38: pointer
  if (data?.lpfnHook !== undefined) view.setBigUint64(56, data.lpfnHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnHook))), true);
  // 0x40: buffer
  if (data?.lpTemplateName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.lpTemplateName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(72, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x50: buffer
  if (data?.lpszStyle !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpszStyle);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: u16
  if (data?.nFontType !== undefined) view.setUint16(88, Number(data.nFontType), true);
  // 0x5a: u16
  if (data?.___MISSING_ALIGNMENT__ !== undefined) view.setUint16(90, Number(data.___MISSING_ALIGNMENT__), true);
  // 0x5c: i32
  if (data?.nSizeMin !== undefined) view.setInt32(92, Number(data.nSizeMin), true);
  // 0x60: i32
  if (data?.nSizeMax !== undefined) view.setInt32(96, Number(data.nSizeMax), true);
  // 0x64: pad4
  return buf;
}

export class CHOOSEFONTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpLogFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get iPointSize(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get Flags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get rgbColors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpfnHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get lpTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get lpszStyle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get nFontType(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: u16
  get ___MISSING_ALIGNMENT__(): number {
    return this.view.getUint16(90, true);
  }

  // 0x5c: i32
  get nSizeMin(): number {
    return this.view.getInt32(92, true);
  }

  // 0x60: i32
  get nSizeMax(): number {
    return this.view.getInt32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpLogFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set iPointSize(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set Flags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set rgbColors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpfnHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set lpTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: buffer
  set lpszStyle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: u16
  set nFontType(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: u16
  set ___MISSING_ALIGNMENT__(value: number) {
    this.view.setUint16(90, value, true);
  }

  // 0x5c: i32
  set nSizeMin(value: number) {
    this.view.setInt32(92, value, true);
  }

  // 0x60: i32
  set nSizeMax(value: number) {
    this.view.setInt32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGA (size: 120)
 */
export interface PRINTDLGA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u16 */
  nFromPage: number;
  /** u16 */
  nToPage: number;
  /** u16 */
  nMinPage: number;
  /** u16 */
  nMaxPage: number;
  /** u16 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPRINTHOOKPROC */
  lpfnPrintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPSETUPHOOKPROC */
  lpfnSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpPrintTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpSetupTemplateName: string | null | Uint8Array;
  /** isize */
  hPrintTemplate: bigint | number;
  /** isize */
  hSetupTemplate: bigint | number;
}

export const sizeofPRINTDLGA = 120;

export function allocPRINTDLGA(data?: Partial<PRINTDLGA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u16
  if (data?.nFromPage !== undefined) view.setUint16(44, Number(data.nFromPage), true);
  // 0x2e: u16
  if (data?.nToPage !== undefined) view.setUint16(46, Number(data.nToPage), true);
  // 0x30: u16
  if (data?.nMinPage !== undefined) view.setUint16(48, Number(data.nMinPage), true);
  // 0x32: u16
  if (data?.nMaxPage !== undefined) view.setUint16(50, Number(data.nMaxPage), true);
  // 0x34: u16
  if (data?.nCopies !== undefined) view.setUint16(52, Number(data.nCopies), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(56, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x40: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(64, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x48: pointer
  if (data?.lpfnPrintHook !== undefined) view.setBigUint64(72, data.lpfnPrintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPrintHook))), true);
  // 0x50: pointer
  if (data?.lpfnSetupHook !== undefined) view.setBigUint64(80, data.lpfnSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnSetupHook))), true);
  // 0x58: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.lpSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPrintTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPrintTemplate), true);
  // 0x70: isize
  if (data?.hSetupTemplate !== undefined) view.setBigInt64(112, BigInt(data.hSetupTemplate), true);
  return buf;
}

export class PRINTDLGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get nFromPage(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get nToPage(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get nMinPage(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get nMaxPage(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get nCopies(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnPrintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPrintTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get hSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set nFromPage(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set nToPage(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set nMinPage(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set nMaxPage(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set nCopies(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnPrintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set lpSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPrintTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set hSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGW (size: 120)
 */
export interface PRINTDLGW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u16 */
  nFromPage: number;
  /** u16 */
  nToPage: number;
  /** u16 */
  nMinPage: number;
  /** u16 */
  nMaxPage: number;
  /** u16 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPRINTHOOKPROC */
  lpfnPrintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPSETUPHOOKPROC */
  lpfnSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpPrintTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpSetupTemplateName: string | null | Uint8Array | Uint16Array;
  /** isize */
  hPrintTemplate: bigint | number;
  /** isize */
  hSetupTemplate: bigint | number;
}

export const sizeofPRINTDLGW = 120;

export function allocPRINTDLGW(data?: Partial<PRINTDLGW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u16
  if (data?.nFromPage !== undefined) view.setUint16(44, Number(data.nFromPage), true);
  // 0x2e: u16
  if (data?.nToPage !== undefined) view.setUint16(46, Number(data.nToPage), true);
  // 0x30: u16
  if (data?.nMinPage !== undefined) view.setUint16(48, Number(data.nMinPage), true);
  // 0x32: u16
  if (data?.nMaxPage !== undefined) view.setUint16(50, Number(data.nMaxPage), true);
  // 0x34: u16
  if (data?.nCopies !== undefined) view.setUint16(52, Number(data.nCopies), true);
  // 0x36: pad2
  // 0x38: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(56, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x40: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(64, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x48: pointer
  if (data?.lpfnPrintHook !== undefined) view.setBigUint64(72, data.lpfnPrintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPrintHook))), true);
  // 0x50: pointer
  if (data?.lpfnSetupHook !== undefined) view.setBigUint64(80, data.lpfnSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnSetupHook))), true);
  // 0x58: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.lpSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPrintTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPrintTemplate), true);
  // 0x70: isize
  if (data?.hSetupTemplate !== undefined) view.setBigInt64(112, BigInt(data.hSetupTemplate), true);
  return buf;
}

export class PRINTDLGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get nFromPage(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get nToPage(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u16
  get nMinPage(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get nMaxPage(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u16
  get nCopies(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lpfnPrintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPrintTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get hSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set nFromPage(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set nToPage(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u16
  set nMinPage(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set nMaxPage(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u16
  set nCopies(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: pad2

  // 0x38: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lpfnPrintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set lpSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPrintTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set hSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTPAGERANGE (size: 8)
 */
export interface PRINTPAGERANGE {
  /** u32 */
  nFromPage: number;
  /** u32 */
  nToPage: number;
}

export const sizeofPRINTPAGERANGE = 8;

export function allocPRINTPAGERANGE(data?: Partial<PRINTPAGERANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPAGERANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nFromPage !== undefined) view.setUint32(0, Number(data.nFromPage), true);
  // 0x04: u32
  if (data?.nToPage !== undefined) view.setUint32(4, Number(data.nToPage), true);
  return buf;
}

export class PRINTPAGERANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nFromPage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get nToPage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set nFromPage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set nToPage(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXA (size: 136)
 */
export interface PRINTDLGEXA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u32 */
  Flags2: number;
  /** u32 */
  ExclusionFlags: number;
  /** u32 */
  nPageRanges: number;
  /** u32 */
  nMaxPageRanges: number;
  /** ptr */
  lpPageRanges: Deno.PointerValue | Uint8Array;
  /** u32 */
  nMinPage: number;
  /** u32 */
  nMaxPage: number;
  /** u32 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpPrintTemplateName: string | null | Uint8Array;
  /** Windows.Win32.System.Com.IUnknown */
  lpCallback: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPropertyPages: number;
  /** ptr */
  lphPropertyPages: Deno.PointerValue | Uint8Array;
  /** u32 */
  nStartPage: number;
  /** u32 */
  dwResultAction: number;
}

export const sizeofPRINTDLGEXA = 136;

export function allocPRINTDLGEXA(data?: Partial<PRINTDLGEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGEXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u32
  if (data?.Flags2 !== undefined) view.setUint32(44, Number(data.Flags2), true);
  // 0x30: u32
  if (data?.ExclusionFlags !== undefined) view.setUint32(48, Number(data.ExclusionFlags), true);
  // 0x34: u32
  if (data?.nPageRanges !== undefined) view.setUint32(52, Number(data.nPageRanges), true);
  // 0x38: u32
  if (data?.nMaxPageRanges !== undefined) view.setUint32(56, Number(data.nMaxPageRanges), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpPageRanges !== undefined) view.setBigUint64(64, data.lpPageRanges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPageRanges))), true);
  // 0x48: u32
  if (data?.nMinPage !== undefined) view.setUint32(72, Number(data.nMinPage), true);
  // 0x4c: u32
  if (data?.nMaxPage !== undefined) view.setUint32(76, Number(data.nMaxPage), true);
  // 0x50: u32
  if (data?.nCopies !== undefined) view.setUint32(80, Number(data.nCopies), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(88, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x60: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: pointer
  if (data?.lpCallback !== undefined) view.setBigUint64(104, data.lpCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCallback))), true);
  // 0x70: u32
  if (data?.nPropertyPages !== undefined) view.setUint32(112, Number(data.nPropertyPages), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.lphPropertyPages !== undefined) view.setBigUint64(120, data.lphPropertyPages === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lphPropertyPages))), true);
  // 0x80: u32
  if (data?.nStartPage !== undefined) view.setUint32(128, Number(data.nStartPage), true);
  // 0x84: u32
  if (data?.dwResultAction !== undefined) view.setUint32(132, Number(data.dwResultAction), true);
  return buf;
}

export class PRINTDLGEXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ExclusionFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get nPageRanges(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get nMaxPageRanges(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get lpPageRanges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMinPage(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get nMaxPage(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get nCopies(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get lpCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get nPropertyPages(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get lphPropertyPages(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get nStartPage(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwResultAction(): number {
    return this.view.getUint32(132, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ExclusionFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set nPageRanges(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set nMaxPageRanges(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set lpPageRanges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set nMinPage(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set nMaxPage(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set nCopies(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: pointer
  set lpCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set nPropertyPages(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set lphPropertyPages(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set nStartPage(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwResultAction(value: number) {
    this.view.setUint32(132, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PRINTDLGEXW (size: 136)
 */
export interface PRINTDLGEXW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hDC: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.PRINTDLGEX_FLAGS */
  Flags: PRINTDLGEX_FLAGS;
  /** u32 */
  Flags2: number;
  /** u32 */
  ExclusionFlags: number;
  /** u32 */
  nPageRanges: number;
  /** u32 */
  nMaxPageRanges: number;
  /** ptr */
  lpPageRanges: Deno.PointerValue | Uint8Array;
  /** u32 */
  nMinPage: number;
  /** u32 */
  nMaxPage: number;
  /** u32 */
  nCopies: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpPrintTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.System.Com.IUnknown */
  lpCallback: Uint8Array | Deno.PointerValue;
  /** u32 */
  nPropertyPages: number;
  /** ptr */
  lphPropertyPages: Deno.PointerValue | Uint8Array;
  /** u32 */
  nStartPage: number;
  /** u32 */
  dwResultAction: number;
}

export const sizeofPRINTDLGEXW = 136;

export function allocPRINTDLGEXW(data?: Partial<PRINTDLGEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTDLGEXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: pointer
  if (data?.hDC !== undefined) view.setBigUint64(32, data.hDC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDC))), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u32
  if (data?.Flags2 !== undefined) view.setUint32(44, Number(data.Flags2), true);
  // 0x30: u32
  if (data?.ExclusionFlags !== undefined) view.setUint32(48, Number(data.ExclusionFlags), true);
  // 0x34: u32
  if (data?.nPageRanges !== undefined) view.setUint32(52, Number(data.nPageRanges), true);
  // 0x38: u32
  if (data?.nMaxPageRanges !== undefined) view.setUint32(56, Number(data.nMaxPageRanges), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpPageRanges !== undefined) view.setBigUint64(64, data.lpPageRanges === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPageRanges))), true);
  // 0x48: u32
  if (data?.nMinPage !== undefined) view.setUint32(72, Number(data.nMinPage), true);
  // 0x4c: u32
  if (data?.nMaxPage !== undefined) view.setUint32(76, Number(data.nMaxPage), true);
  // 0x50: u32
  if (data?.nCopies !== undefined) view.setUint32(80, Number(data.nCopies), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(88, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x60: buffer
  if (data?.lpPrintTemplateName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpPrintTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: pointer
  if (data?.lpCallback !== undefined) view.setBigUint64(104, data.lpCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCallback))), true);
  // 0x70: u32
  if (data?.nPropertyPages !== undefined) view.setUint32(112, Number(data.nPropertyPages), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.lphPropertyPages !== undefined) view.setBigUint64(120, data.lphPropertyPages === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lphPropertyPages))), true);
  // 0x80: u32
  if (data?.nStartPage !== undefined) view.setUint32(128, Number(data.nStartPage), true);
  // 0x84: u32
  if (data?.dwResultAction !== undefined) view.setUint32(132, Number(data.dwResultAction), true);
  return buf;
}

export class PRINTDLGEXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get hDC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get ExclusionFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get nPageRanges(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get nMaxPageRanges(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get lpPageRanges(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get nMinPage(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get nMaxPage(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get nCopies(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPrintTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get lpCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get nPropertyPages(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get lphPropertyPages(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get nStartPage(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwResultAction(): number {
    return this.view.getUint32(132, true);
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set hDC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set ExclusionFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set nPageRanges(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set nMaxPageRanges(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set lpPageRanges(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set nMinPage(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set nMaxPage(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set nCopies(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPrintTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: pointer
  set lpCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set nPropertyPages(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set lphPropertyPages(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set nStartPage(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwResultAction(value: number) {
    this.view.setUint32(132, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.DEVNAMES (size: 8)
 */
export interface DEVNAMES {
  /** u16 */
  wDriverOffset: number;
  /** u16 */
  wDeviceOffset: number;
  /** u16 */
  wOutputOffset: number;
  /** u16 */
  wDefault: number;
}

export const sizeofDEVNAMES = 8;

export function allocDEVNAMES(data?: Partial<DEVNAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVNAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wDriverOffset !== undefined) view.setUint16(0, Number(data.wDriverOffset), true);
  // 0x02: u16
  if (data?.wDeviceOffset !== undefined) view.setUint16(2, Number(data.wDeviceOffset), true);
  // 0x04: u16
  if (data?.wOutputOffset !== undefined) view.setUint16(4, Number(data.wOutputOffset), true);
  // 0x06: u16
  if (data?.wDefault !== undefined) view.setUint16(6, Number(data.wDefault), true);
  return buf;
}

export class DEVNAMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wDriverOffset(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wDeviceOffset(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wOutputOffset(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDefault(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set wDriverOffset(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wDeviceOffset(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wOutputOffset(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDefault(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLGA (size: 112)
 */
export interface PAGESETUPDLGA {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLG_FLAGS */
  Flags: PAGESETUPDLG_FLAGS;
  /** Windows.Win32.Foundation.POINT */
  ptPaperSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMinMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGESETUPHOOK */
  lpfnPageSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGEPAINTHOOK */
  lpfnPagePaintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpPageSetupTemplateName: string | null | Uint8Array;
  /** isize */
  hPageSetupTemplate: bigint | number;
}

export const sizeofPAGESETUPDLGA = 112;

export function allocPAGESETUPDLGA(data?: Partial<PAGESETUPDLGA>): Uint8Array {
  const buf = new Uint8Array(sizeofPAGESETUPDLGA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ptPaperSize !== undefined) view.setBigUint64(40, data.ptPaperSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptPaperSize))), true);
  // 0x30: pointer
  if (data?.rtMinMargin !== undefined) view.setBigUint64(48, data.rtMinMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMinMargin))), true);
  // 0x38: pointer
  if (data?.rtMargin !== undefined) view.setBigUint64(56, data.rtMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMargin))), true);
  // 0x40: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(64, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x48: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(72, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x50: pointer
  if (data?.lpfnPageSetupHook !== undefined) view.setBigUint64(80, data.lpfnPageSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPageSetupHook))), true);
  // 0x58: pointer
  if (data?.lpfnPagePaintHook !== undefined) view.setBigUint64(88, data.lpfnPagePaintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPagePaintHook))), true);
  // 0x60: buffer
  if (data?.lpPageSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpPageSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPageSetupTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPageSetupTemplate), true);
  return buf;
}

export class PAGESETUPDLGAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ptPaperSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get rtMinMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rtMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnPageSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get lpfnPagePaintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPageSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPageSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ptPaperSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set rtMinMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rtMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnPageSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set lpfnPagePaintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPageSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPageSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }
}

/**
 * Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLGW (size: 112)
 */
export interface PAGESETUPDLGW {
  /** u32 */
  lStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** isize */
  hDevMode: bigint | number;
  /** isize */
  hDevNames: bigint | number;
  /** Windows.Win32.UI.Controls.Dialogs.PAGESETUPDLG_FLAGS */
  Flags: PAGESETUPDLG_FLAGS;
  /** Windows.Win32.Foundation.POINT */
  ptPaperSize: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMinMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rtMargin: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGESETUPHOOK */
  lpfnPageSetupHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.Controls.Dialogs.LPPAGEPAINTHOOK */
  lpfnPagePaintHook: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpPageSetupTemplateName: string | null | Uint8Array | Uint16Array;
  /** isize */
  hPageSetupTemplate: bigint | number;
}

export const sizeofPAGESETUPDLGW = 112;

export function allocPAGESETUPDLGW(data?: Partial<PAGESETUPDLGW>): Uint8Array {
  const buf = new Uint8Array(sizeofPAGESETUPDLGW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lStructSize !== undefined) view.setUint32(0, Number(data.lStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: isize
  if (data?.hDevMode !== undefined) view.setBigInt64(16, BigInt(data.hDevMode), true);
  // 0x18: isize
  if (data?.hDevNames !== undefined) view.setBigInt64(24, BigInt(data.hDevNames), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ptPaperSize !== undefined) view.setBigUint64(40, data.ptPaperSize === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptPaperSize))), true);
  // 0x30: pointer
  if (data?.rtMinMargin !== undefined) view.setBigUint64(48, data.rtMinMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMinMargin))), true);
  // 0x38: pointer
  if (data?.rtMargin !== undefined) view.setBigUint64(56, data.rtMargin === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rtMargin))), true);
  // 0x40: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(64, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x48: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(72, data.lCustData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lCustData))), true);
  // 0x50: pointer
  if (data?.lpfnPageSetupHook !== undefined) view.setBigUint64(80, data.lpfnPageSetupHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPageSetupHook))), true);
  // 0x58: pointer
  if (data?.lpfnPagePaintHook !== undefined) view.setBigUint64(88, data.lpfnPagePaintHook === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpfnPagePaintHook))), true);
  // 0x60: buffer
  if (data?.lpPageSetupTemplateName !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpPageSetupTemplateName);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: isize
  if (data?.hPageSetupTemplate !== undefined) view.setBigInt64(104, BigInt(data.hPageSetupTemplate), true);
  return buf;
}

export class PAGESETUPDLGWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: isize
  get hDevMode(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get hDevNames(): bigint | number {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ptPaperSize(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get rtMinMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get rtMargin(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lCustData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpfnPageSetupHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get lpfnPagePaintHook(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get lpPageSetupTemplateName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: isize
  get hPageSetupTemplate(): bigint | number {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x00: u32
  set lStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: isize
  set hDevMode(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set hDevNames(value: bigint | number) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ptPaperSize(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set rtMinMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set rtMargin(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpfnPageSetupHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set lpfnPagePaintHook(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: buffer
  set lpPageSetupTemplateName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: isize
  set hPageSetupTemplate(value: bigint | number) {
    this.view.setBigInt64(104, BigInt(value), true);
  }
}

export type BOOL = number;

export type HRESULT = number;

// Native Libraries

try {
  var libCOMDLG32_dll = Deno.dlopen("COMDLG32.dll", {
    GetOpenFileNameA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetOpenFileNameW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetSaveFileNameA: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetSaveFileNameW: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetFileTitleA: {
      parameters: ["buffer", "buffer", "u16"],
      result: "i16",
    },
    GetFileTitleW: {
      parameters: ["buffer", "buffer", "u16"],
      result: "i16",
    },
    ChooseColorA: {
      parameters: ["pointer"],
      result: "i32",
    },
    ChooseColorW: {
      parameters: ["pointer"],
      result: "i32",
    },
    FindTextA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    FindTextW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ReplaceTextA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ReplaceTextW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ChooseFontA: {
      parameters: ["pointer"],
      result: "i32",
    },
    ChooseFontW: {
      parameters: ["pointer"],
      result: "i32",
    },
    PrintDlgA: {
      parameters: ["pointer"],
      result: "i32",
    },
    PrintDlgW: {
      parameters: ["pointer"],
      result: "i32",
    },
    PrintDlgExA: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PrintDlgExW: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CommDlgExtendedError: {
      parameters: [],
      result: "u32",
    },
    PageSetupDlgA: {
      parameters: ["pointer"],
      result: "i32",
    },
    PageSetupDlgW: {
      parameters: ["pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetOpenFileNameA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.GetOpenFileNameA(util.toPointer(param0)));
}

export function GetOpenFileNameW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.GetOpenFileNameW(util.toPointer(param0)));
}

export function GetSaveFileNameA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.GetSaveFileNameA(util.toPointer(param0)));
}

export function GetSaveFileNameW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.GetSaveFileNameW(util.toPointer(param0)));
}

export function GetFileTitleA(
  param0: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Buf: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchSize: number /* u16 */,
): number /* i16 */ {
  return libCOMDLG32_dll.GetFileTitleA(util.pstrToFfi(param0), util.pstrToFfi(Buf), cchSize);
}

export function GetFileTitleW(
  param0: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Buf: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchSize: number /* u16 */,
): number /* i16 */ {
  return libCOMDLG32_dll.GetFileTitleW(util.pwstrToFfi(param0), util.pwstrToFfi(Buf), cchSize);
}

export function ChooseColorA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.ChooseColorA(util.toPointer(param0)));
}

export function ChooseColorW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.ChooseColorW(util.toPointer(param0)));
}

export function FindTextA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMDLG32_dll.FindTextA(util.toPointer(param0)));
}

export function FindTextW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMDLG32_dll.FindTextW(util.toPointer(param0)));
}

export function ReplaceTextA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMDLG32_dll.ReplaceTextA(util.toPointer(param0)));
}

export function ReplaceTextW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HWND */ {
  return (libCOMDLG32_dll.ReplaceTextW(util.toPointer(param0)));
}

export function ChooseFontA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.ChooseFontA(util.toPointer(param0)));
}

export function ChooseFontW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.ChooseFontW(util.toPointer(param0)));
}

export function PrintDlgA(
  pPD: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.PrintDlgA(util.toPointer(pPD)));
}

export function PrintDlgW(
  pPD: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.PrintDlgW(util.toPointer(pPD)));
}

export function PrintDlgExA(
  pPD: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMDLG32_dll.PrintDlgExA(util.toPointer(pPD));
}

export function PrintDlgExW(
  pPD: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libCOMDLG32_dll.PrintDlgExW(util.toPointer(pPD));
}

export function CommDlgExtendedError(): COMMON_DLG_ERRORS /* Windows.Win32.UI.Controls.Dialogs.COMMON_DLG_ERRORS */ {
  return libCOMDLG32_dll.CommDlgExtendedError();
}

export function PageSetupDlgA(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.PageSetupDlgA(util.toPointer(param0)));
}

export function PageSetupDlgW(
  param0: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMDLG32_dll.PageSetupDlgW(util.toPointer(param0)));
}

