/// Auto-generated by Deno Win32: Windows.Win32.UI.Controls.RichEdit.Apis

import * as util from "../../../util.ts";

// Enums
export type CFM_MASK = number;
export type CFE_EFFECTS = number;
export type PARAFORMAT_MASK = number;
export type RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE = number;
export type RICH_EDIT_GET_OBJECT_FLAGS = number;
export type PARAFORMAT_BORDERS = number;
export type PARAFORMAT_SHADING_STYLE = number;
export type GETTEXTEX_FLAGS = number;
export type ENDCOMPOSITIONNOTIFY_CODE = number;
export type IMECOMPTEXT_FLAGS = number;
export type GETTEXTLENGTHEX_FLAGS = number;
export type REOBJECT_FLAGS = number;
export type PARAFORMAT_NUMBERING_STYLE = number;
export type PARAFORMAT_ALIGNMENT = number;
export type PARAFORMAT_NUMBERING = number;
export type TEXTMODE = number;
export type TEXT_ALIGN_OPTIONS = number;
export type EMBED_FONT_CHARSET = number;
export type DVASPECT = number;
export type UNDONAMEID = number;
export type KHYPH = number;
export type TXTBACKSTYLE = number;
export type TXTHITRESULT = number;
export type TXTNATURALSIZE = number;
export type TXTVIEW = number;
export type CHANGETYPE = number;
export type CARET_FLAGS = number;
export type tomConstants = number;
export type OBJECTTYPE = number;
export type MANCODE = number;

// Constants
export const CFM_SUBSCRIPT = 196608;
export const CFM_SUPERSCRIPT = 196608;
export const CFM_EFFECTS = 1073741887;
export const CFM_ALL = 4160749631;
export const CFM_BOLD = 1;
export const CFM_CHARSET = 134217728;
export const CFM_COLOR = 1073741824;
export const CFM_FACE = 536870912;
export const CFM_ITALIC = 2;
export const CFM_OFFSET = 268435456;
export const CFM_PROTECTED = 16;
export const CFM_SIZE = 2147483648;
export const CFM_STRIKEOUT = 8;
export const CFM_UNDERLINE = 4;
export const CFM_LINK = 32;
export const CFM_SMALLCAPS = 64;
export const CFM_ALLCAPS = 128;
export const CFM_HIDDEN = 256;
export const CFM_OUTLINE = 512;
export const CFM_SHADOW = 1024;
export const CFM_EMBOSS = 2048;
export const CFM_IMPRINT = 4096;
export const CFM_DISABLED = 8192;
export const CFM_REVISED = 16384;
export const CFM_REVAUTHOR = 32768;
export const CFM_ANIMATION = 262144;
export const CFM_STYLE = 524288;
export const CFM_KERNING = 1048576;
export const CFM_SPACING = 2097152;
export const CFM_WEIGHT = 4194304;
export const CFM_UNDERLINETYPE = 8388608;
export const CFM_COOKIE = 16777216;
export const CFM_LCID = 33554432;
export const CFM_BACKCOLOR = 67108864;
export const CFM_EFFECTS2 = 1141080063;
export const CFM_ALL2 = 4294967295;
export const CFM_FONTBOUND = 1048576;
export const CFM_LINKPROTECTED = 8388608;
export const CFM_EXTENDED = 33554432;
export const CFM_MATHNOBUILDUP = 134217728;
export const CFM_MATH = 268435456;
export const CFM_MATHORDINARY = 536870912;
export const CFM_ALLEFFECTS = 2115207167;
export const CFE_ALLCAPS = 128;
export const CFE_AUTOBACKCOLOR = 67108864;
export const CFE_DISABLED = 8192;
export const CFE_EMBOSS = 2048;
export const CFE_HIDDEN = 256;
export const CFE_IMPRINT = 4096;
export const CFE_OUTLINE = 512;
export const CFE_REVISED = 16384;
export const CFE_SHADOW = 1024;
export const CFE_SMALLCAPS = 64;
export const CFE_AUTOCOLOR = 1073741824;
export const CFE_BOLD = 1;
export const CFE_ITALIC = 2;
export const CFE_STRIKEOUT = 8;
export const CFE_UNDERLINE = 4;
export const CFE_PROTECTED = 16;
export const CFE_LINK = 32;
export const CFE_SUBSCRIPT = 65536;
export const CFE_SUPERSCRIPT = 131072;
export const CFE_FONTBOUND = 1048576;
export const CFE_LINKPROTECTED = 8388608;
export const CFE_EXTENDED = 33554432;
export const CFE_MATHNOBUILDUP = 134217728;
export const CFE_MATH = 268435456;
export const CFE_MATHORDINARY = 536870912;
export const PFM_ALIGNMENT = 8;
export const PFM_NUMBERING = 32;
export const PFM_OFFSET = 4;
export const PFM_OFFSETINDENT = 2147483648;
export const PFM_RIGHTINDENT = 2;
export const PFM_RTLPARA = 65536;
export const PFM_STARTINDENT = 1;
export const PFM_TABSTOPS = 16;
export const SEL_EMPTY = 0;
export const SEL_TEXT = 1;
export const SEL_OBJECT = 2;
export const SEL_MULTICHAR = 4;
export const SEL_MULTIOBJECT = 8;
export const GCM_RIGHTMOUSEDROP = 32768;
export const REO_GETOBJ_POLEOBJ = 1;
export const REO_GETOBJ_PSTG = 2;
export const REO_GETOBJ_POLESITE = 4;
export const REO_GETOBJ_NO_INTERFACES = 0;
export const REO_GETOBJ_ALL_INTERFACES = 7;
export const PARAFORMAT_BORDERS_LEFT = 1;
export const PARAFORMAT_BORDERS_RIGHT = 2;
export const PARAFORMAT_BORDERS_TOP = 4;
export const PARAFORMAT_BORDERS_BOTTOM = 8;
export const PARAFORMAT_BORDERS_INSIDE = 16;
export const PARAFORMAT_BORDERS_OUTSIDE = 32;
export const PARAFORMAT_BORDERS_AUTOCOLOR = 64;
export const PARAFORMAT_SHADING_STYLE_NONE = 0;
export const PARAFORMAT_SHADING_STYLE_DARK_HORIZ = 1;
export const PARAFORMAT_SHADING_STYLE_DARK_VERT = 2;
export const PARAFORMAT_SHADING_STYLE_DARK_DOWN_DIAG = 3;
export const PARAFORMAT_SHADING_STYLE_DARK_UP_DIAG = 4;
export const PARAFORMAT_SHADING_STYLE_DARK_GRID = 5;
export const PARAFORMAT_SHADING_STYLE_DARK_TRELLIS = 6;
export const PARAFORMAT_SHADING_STYLE_LIGHT_HORZ = 7;
export const PARAFORMAT_SHADING_STYLE_LIGHT_VERT = 8;
export const PARAFORMAT_SHADING_STYLE_LIGHT_DOWN_DIAG = 9;
export const PARAFORMAT_SHADING_STYLE_LIGHT_UP_DIAG = 10;
export const PARAFORMAT_SHADING_STYLE_LIGHT_GRID = 11;
export const PARAFORMAT_SHADING_STYLE_LIGHT_TRELLIS = 12;
export const GT_DEFAULT = 0;
export const GT_NOHIDDENTEXT = 8;
export const GT_RAWTEXT = 4;
export const GT_SELECTION = 2;
export const GT_USECRLF = 1;
export const ECN_ENDCOMPOSITION = 1;
export const ECN_NEWTEXT = 2;
export const ICT_RESULTREADSTR = 1;
export const GTL_DEFAULT = 0;
export const GTL_USECRLF = 1;
export const GTL_PRECISE = 2;
export const GTL_CLOSE = 4;
export const GTL_NUMCHARS = 8;
export const GTL_NUMBYTES = 16;
export const REO_ALIGNTORIGHT = 256;
export const REO_BELOWBASELINE = 2;
export const REO_BLANK = 16;
export const REO_CANROTATE = 128;
export const REO_DONTNEEDPALETTE = 32;
export const REO_DYNAMICSIZE = 8;
export const REO_GETMETAFILE = 4194304;
export const REO_HILITED = 16777216;
export const REO_INPLACEACTIVE = 33554432;
export const REO_INVERTEDSELECT = 4;
export const REO_LINK = 2147483648;
export const REO_LINKAVAILABLE = 8388608;
export const REO_OPEN = 67108864;
export const REO_OWNERDRAWSELECT = 64;
export const REO_RESIZABLE = 1;
export const REO_SELECTED = 134217728;
export const REO_STATIC = 1073741824;
export const REO_USEASBACKGROUND = 1024;
export const REO_WRAPTEXTAROUND = 512;
export const PFNS_PAREN = 0;
export const PFNS_PARENS = 256;
export const PFNS_PERIOD = 512;
export const PFNS_PLAIN = 768;
export const PFNS_NONUMBER = 1024;
export const PFNS_NEWNUMBER = 32768;
export const PFA_CENTER = 3;
export const PFA_LEFT = 1;
export const PFA_RIGHT = 2;
export const PFN_BULLET = 1;
export const PFN_ARABIC = 2;
export const PFN_LCLETTER = 3;
export const PFN_UCLETTER = 4;
export const PFN_LCROMAN = 5;
export const PFN_UCROMAN = 6;
export const cchTextLimitDefault = 32767;
export const MSFTEDIT_CLASS = `RICHEDIT50W`;
export const CERICHEDIT_CLASSA = `RichEditCEA`;
export const CERICHEDIT_CLASSW = `RichEditCEW`;
export const RICHEDIT_CLASSA = `RichEdit20A`;
export const RICHEDIT_CLASS10A = `RICHEDIT`;
export const RICHEDIT_CLASSW = `RichEdit20W`;
export const RICHEDIT_CLASS = `RichEdit20W`;
export const EM_CANPASTE = 1074;
export const EM_DISPLAYBAND = 1075;
export const EM_EXGETSEL = 1076;
export const EM_EXLIMITTEXT = 1077;
export const EM_EXLINEFROMCHAR = 1078;
export const EM_EXSETSEL = 1079;
export const EM_FINDTEXT = 1080;
export const EM_FORMATRANGE = 1081;
export const EM_GETCHARFORMAT = 1082;
export const EM_GETEVENTMASK = 1083;
export const EM_GETOLEINTERFACE = 1084;
export const EM_GETPARAFORMAT = 1085;
export const EM_GETSELTEXT = 1086;
export const EM_HIDESELECTION = 1087;
export const EM_PASTESPECIAL = 1088;
export const EM_REQUESTRESIZE = 1089;
export const EM_SELECTIONTYPE = 1090;
export const EM_SETBKGNDCOLOR = 1091;
export const EM_SETCHARFORMAT = 1092;
export const EM_SETEVENTMASK = 1093;
export const EM_SETOLECALLBACK = 1094;
export const EM_SETPARAFORMAT = 1095;
export const EM_SETTARGETDEVICE = 1096;
export const EM_STREAMIN = 1097;
export const EM_STREAMOUT = 1098;
export const EM_GETTEXTRANGE = 1099;
export const EM_FINDWORDBREAK = 1100;
export const EM_SETOPTIONS = 1101;
export const EM_GETOPTIONS = 1102;
export const EM_FINDTEXTEX = 1103;
export const EM_GETWORDBREAKPROCEX = 1104;
export const EM_SETWORDBREAKPROCEX = 1105;
export const EM_SETUNDOLIMIT = 1106;
export const EM_REDO = 1108;
export const EM_CANREDO = 1109;
export const EM_GETUNDONAME = 1110;
export const EM_GETREDONAME = 1111;
export const EM_STOPGROUPTYPING = 1112;
export const EM_SETTEXTMODE = 1113;
export const EM_GETTEXTMODE = 1114;
export const EM_AUTOURLDETECT = 1115;
export const AURL_ENABLEURL = 1;
export const AURL_ENABLEEMAILADDR = 2;
export const AURL_ENABLETELNO = 4;
export const AURL_ENABLEEAURLS = 8;
export const AURL_ENABLEDRIVELETTERS = 16;
export const AURL_DISABLEMIXEDLGC = 32;
export const EM_GETAUTOURLDETECT = 1116;
export const EM_SETPALETTE = 1117;
export const EM_GETTEXTEX = 1118;
export const EM_GETTEXTLENGTHEX = 1119;
export const EM_SHOWSCROLLBAR = 1120;
export const EM_SETTEXTEX = 1121;
export const EM_SETPUNCTUATION = 1124;
export const EM_GETPUNCTUATION = 1125;
export const EM_SETWORDWRAPMODE = 1126;
export const EM_GETWORDWRAPMODE = 1127;
export const EM_SETIMECOLOR = 1128;
export const EM_GETIMECOLOR = 1129;
export const EM_SETIMEOPTIONS = 1130;
export const EM_GETIMEOPTIONS = 1131;
export const EM_CONVPOSITION = 1132;
export const EM_SETLANGOPTIONS = 1144;
export const EM_GETLANGOPTIONS = 1145;
export const EM_GETIMECOMPMODE = 1146;
export const EM_FINDTEXTW = 1147;
export const EM_FINDTEXTEXW = 1148;
export const EM_RECONVERSION = 1149;
export const EM_SETIMEMODEBIAS = 1150;
export const EM_GETIMEMODEBIAS = 1151;
export const EM_SETBIDIOPTIONS = 1224;
export const EM_GETBIDIOPTIONS = 1225;
export const EM_SETTYPOGRAPHYOPTIONS = 1226;
export const EM_GETTYPOGRAPHYOPTIONS = 1227;
export const EM_SETEDITSTYLE = 1228;
export const EM_GETEDITSTYLE = 1229;
export const SES_EMULATESYSEDIT = 1;
export const SES_BEEPONMAXTEXT = 2;
export const SES_EXTENDBACKCOLOR = 4;
export const SES_MAPCPS = 8;
export const SES_HYPERLINKTOOLTIPS = 8;
export const SES_EMULATE10 = 16;
export const SES_DEFAULTLATINLIGA = 16;
export const SES_USECRLF = 32;
export const SES_NOFOCUSLINKNOTIFY = 32;
export const SES_USEAIMM = 64;
export const SES_NOIME = 128;
export const SES_ALLOWBEEPS = 256;
export const SES_UPPERCASE = 512;
export const SES_LOWERCASE = 1024;
export const SES_NOINPUTSEQUENCECHK = 2048;
export const SES_BIDI = 4096;
export const SES_SCROLLONKILLFOCUS = 8192;
export const SES_XLTCRCRLFTOCR = 16384;
export const SES_DRAFTMODE = 32768;
export const SES_USECTF = 65536;
export const SES_HIDEGRIDLINES = 131072;
export const SES_USEATFONT = 262144;
export const SES_CUSTOMLOOK = 524288;
export const SES_LBSCROLLNOTIFY = 1048576;
export const SES_CTFALLOWEMBED = 2097152;
export const SES_CTFALLOWSMARTTAG = 4194304;
export const SES_CTFALLOWPROOFING = 8388608;
export const SES_LOGICALCARET = 16777216;
export const SES_WORDDRAGDROP = 33554432;
export const SES_SMARTDRAGDROP = 67108864;
export const SES_MULTISELECT = 134217728;
export const SES_CTFNOLOCK = 268435456;
export const SES_NOEALINEHEIGHTADJUST = 536870912;
export const SES_MAX = 536870912;
export const IMF_AUTOKEYBOARD = 1;
export const IMF_AUTOFONT = 2;
export const IMF_IMECANCELCOMPLETE = 4;
export const IMF_IMEALWAYSSENDNOTIFY = 8;
export const IMF_AUTOFONTSIZEADJUST = 16;
export const IMF_UIFONTS = 32;
export const IMF_NOIMPLICITLANG = 64;
export const IMF_DUALFONT = 128;
export const IMF_NOKBDLIDFIXUP = 512;
export const IMF_NORTFFONTSUBSTITUTE = 1024;
export const IMF_SPELLCHECKING = 2048;
export const IMF_TKBPREDICTION = 4096;
export const IMF_IMEUIINTEGRATION = 8192;
export const ICM_NOTOPEN = 0;
export const ICM_LEVEL3 = 1;
export const ICM_LEVEL2 = 2;
export const ICM_LEVEL2_5 = 3;
export const ICM_LEVEL2_SUI = 4;
export const ICM_CTF = 5;
export const TO_ADVANCEDTYPOGRAPHY = 1;
export const TO_SIMPLELINEBREAK = 2;
export const TO_DISABLECUSTOMTEXTOUT = 4;
export const TO_ADVANCEDLAYOUT = 8;
export const EM_OUTLINE = 1244;
export const EM_GETSCROLLPOS = 1245;
export const EM_SETSCROLLPOS = 1246;
export const EM_SETFONTSIZE = 1247;
export const EM_GETZOOM = 1248;
export const EM_SETZOOM = 1249;
export const EM_GETVIEWKIND = 1250;
export const EM_SETVIEWKIND = 1251;
export const EM_GETPAGE = 1252;
export const EM_SETPAGE = 1253;
export const EM_GETHYPHENATEINFO = 1254;
export const EM_SETHYPHENATEINFO = 1255;
export const EM_GETPAGEROTATE = 1259;
export const EM_SETPAGEROTATE = 1260;
export const EM_GETCTFMODEBIAS = 1261;
export const EM_SETCTFMODEBIAS = 1262;
export const EM_GETCTFOPENSTATUS = 1264;
export const EM_SETCTFOPENSTATUS = 1265;
export const EM_GETIMECOMPTEXT = 1266;
export const EM_ISIME = 1267;
export const EM_GETIMEPROPERTY = 1268;
export const EM_GETQUERYRTFOBJ = 1293;
export const EM_SETQUERYRTFOBJ = 1294;
export const EPR_0 = 0;
export const EPR_270 = 1;
export const EPR_180 = 2;
export const EPR_90 = 3;
export const EPR_SE = 5;
export const CTFMODEBIAS_DEFAULT = 0;
export const CTFMODEBIAS_FILENAME = 1;
export const CTFMODEBIAS_NAME = 2;
export const CTFMODEBIAS_READING = 3;
export const CTFMODEBIAS_DATETIME = 4;
export const CTFMODEBIAS_CONVERSATION = 5;
export const CTFMODEBIAS_NUMERIC = 6;
export const CTFMODEBIAS_HIRAGANA = 7;
export const CTFMODEBIAS_KATAKANA = 8;
export const CTFMODEBIAS_HANGUL = 9;
export const CTFMODEBIAS_HALFWIDTHKATAKANA = 10;
export const CTFMODEBIAS_FULLWIDTHALPHANUMERIC = 11;
export const CTFMODEBIAS_HALFWIDTHALPHANUMERIC = 12;
export const IMF_SMODE_PLAURALCLAUSE = 1;
export const IMF_SMODE_NONE = 2;
export const EMO_EXIT = 0;
export const EMO_ENTER = 1;
export const EMO_PROMOTE = 2;
export const EMO_EXPAND = 3;
export const EMO_MOVESELECTION = 4;
export const EMO_GETVIEWMODE = 5;
export const EMO_EXPANDSELECTION = 0;
export const EMO_EXPANDDOCUMENT = 1;
export const VM_NORMAL = 4;
export const VM_OUTLINE = 2;
export const VM_PAGE = 9;
export const EM_INSERTTABLE = 1256;
export const EM_GETAUTOCORRECTPROC = 1257;
export const EM_SETAUTOCORRECTPROC = 1258;
export const EM_CALLAUTOCORRECTPROC = 1279;
export const ATP_NOCHANGE = 0;
export const ATP_CHANGE = 1;
export const ATP_NODELIMITER = 2;
export const ATP_REPLACEALLTEXT = 4;
export const EM_GETTABLEPARMS = 1289;
export const EM_SETEDITSTYLEEX = 1299;
export const EM_GETEDITSTYLEEX = 1300;
export const SES_EX_NOTABLE = 4;
export const SES_EX_NOMATH = 64;
export const SES_EX_HANDLEFRIENDLYURL = 256;
export const SES_EX_NOTHEMING = 524288;
export const SES_EX_NOACETATESELECTION = 1048576;
export const SES_EX_USESINGLELINE = 2097152;
export const SES_EX_MULTITOUCH = 134217728;
export const SES_EX_HIDETEMPFORMAT = 268435456;
export const SES_EX_USEMOUSEWPARAM = 536870912;
export const EM_GETSTORYTYPE = 1314;
export const EM_SETSTORYTYPE = 1315;
export const EM_GETELLIPSISMODE = 1329;
export const EM_SETELLIPSISMODE = 1330;
export const ELLIPSIS_MASK = 3;
export const ELLIPSIS_NONE = 0;
export const ELLIPSIS_END = 1;
export const ELLIPSIS_WORD = 3;
export const EM_SETTABLEPARMS = 1331;
export const EM_GETTOUCHOPTIONS = 1334;
export const EM_SETTOUCHOPTIONS = 1335;
export const EM_INSERTIMAGE = 1338;
export const EM_SETUIANAME = 1344;
export const EM_GETELLIPSISSTATE = 1346;
export const RTO_SHOWHANDLES = 1;
export const RTO_DISABLEHANDLES = 2;
export const RTO_READINGMODE = 3;
export const EN_MSGFILTER = 1792;
export const EN_REQUESTRESIZE = 1793;
export const EN_SELCHANGE = 1794;
export const EN_DROPFILES = 1795;
export const EN_PROTECTED = 1796;
export const EN_CORRECTTEXT = 1797;
export const EN_STOPNOUNDO = 1798;
export const EN_IMECHANGE = 1799;
export const EN_SAVECLIPBOARD = 1800;
export const EN_OLEOPFAILED = 1801;
export const EN_OBJECTPOSITIONS = 1802;
export const EN_LINK = 1803;
export const EN_DRAGDROPDONE = 1804;
export const EN_PARAGRAPHEXPANDED = 1805;
export const EN_PAGECHANGE = 1806;
export const EN_LOWFIRTF = 1807;
export const EN_ALIGNLTR = 1808;
export const EN_ALIGNRTL = 1809;
export const EN_CLIPFORMAT = 1810;
export const EN_STARTCOMPOSITION = 1811;
export const EN_ENDCOMPOSITION = 1812;
export const ENM_NONE = 0;
export const ENM_CHANGE = 1;
export const ENM_UPDATE = 2;
export const ENM_SCROLL = 4;
export const ENM_SCROLLEVENTS = 8;
export const ENM_DRAGDROPDONE = 16;
export const ENM_PARAGRAPHEXPANDED = 32;
export const ENM_PAGECHANGE = 64;
export const ENM_CLIPFORMAT = 128;
export const ENM_KEYEVENTS = 65536;
export const ENM_MOUSEEVENTS = 131072;
export const ENM_REQUESTRESIZE = 262144;
export const ENM_SELCHANGE = 524288;
export const ENM_DROPFILES = 1048576;
export const ENM_PROTECTED = 2097152;
export const ENM_CORRECTTEXT = 4194304;
export const ENM_IMECHANGE = 8388608;
export const ENM_LANGCHANGE = 16777216;
export const ENM_OBJECTPOSITIONS = 33554432;
export const ENM_LINK = 67108864;
export const ENM_LOWFIRTF = 134217728;
export const ENM_STARTCOMPOSITION = 268435456;
export const ENM_ENDCOMPOSITION = 536870912;
export const ENM_GROUPTYPINGCHANGE = 1073741824;
export const ENM_HIDELINKTOOLTIP = 2147483648;
export const ES_SAVESEL = 32768;
export const ES_SUNKEN = 16384;
export const ES_DISABLENOSCROLL = 8192;
export const ES_SELECTIONBAR = 16777216;
export const ES_NOOLEDRAGDROP = 8;
export const ES_EX_NOCALLOLEINIT = 0;
export const ES_VERTICAL = 4194304;
export const ES_NOIME = 524288;
export const ES_SELFIME = 262144;
export const ECO_AUTOWORDSELECTION = 1;
export const ECO_AUTOVSCROLL = 64;
export const ECO_AUTOHSCROLL = 128;
export const ECO_NOHIDESEL = 256;
export const ECO_READONLY = 2048;
export const ECO_WANTRETURN = 4096;
export const ECO_SAVESEL = 32768;
export const ECO_SELECTIONBAR = 16777216;
export const ECO_VERTICAL = 4194304;
export const ECOOP_SET = 1;
export const ECOOP_OR = 2;
export const ECOOP_AND = 3;
export const ECOOP_XOR = 4;
export const WB_MOVEWORDPREV = 4;
export const WB_MOVEWORDNEXT = 5;
export const WB_PREVBREAK = 6;
export const WB_NEXTBREAK = 7;
export const PC_FOLLOWING = 1;
export const PC_LEADING = 2;
export const PC_OVERFLOW = 3;
export const PC_DELIMITER = 4;
export const WBF_WORDWRAP = 16;
export const WBF_WORDBREAK = 32;
export const WBF_OVERFLOW = 64;
export const WBF_LEVEL1 = 128;
export const WBF_LEVEL2 = 256;
export const WBF_CUSTOM = 512;
export const IMF_FORCENONE = 1;
export const IMF_FORCEENABLE = 2;
export const IMF_FORCEDISABLE = 4;
export const IMF_CLOSESTATUSWINDOW = 8;
export const IMF_VERTICAL = 32;
export const IMF_FORCEACTIVE = 64;
export const IMF_FORCEINACTIVE = 128;
export const IMF_FORCEREMEMBER = 256;
export const IMF_MULTIPLEEDIT = 1024;
export const yHeightCharPtsMost = 1638;
export const SCF_SELECTION = 1;
export const SCF_WORD = 2;
export const SCF_DEFAULT = 0;
export const SCF_ALL = 4;
export const SCF_USEUIRULES = 8;
export const SCF_ASSOCIATEFONT = 16;
export const SCF_NOKBUPDATE = 32;
export const SCF_ASSOCIATEFONT2 = 64;
export const SCF_SMARTFONT = 128;
export const SCF_CHARREPFROMLCID = 256;
export const SPF_DONTSETDEFAULT = 2;
export const SPF_SETDEFAULT = 4;
export const SF_TEXT = 1;
export const SF_RTF = 2;
export const SF_RTFNOOBJS = 3;
export const SF_TEXTIZED = 4;
export const SF_UNICODE = 16;
export const SF_USECODEPAGE = 32;
export const SF_NCRFORNONASCII = 64;
export const SFF_WRITEXTRAPAR = 128;
export const SFF_SELECTION = 32768;
export const SFF_PLAINRTF = 16384;
export const SFF_PERSISTVIEWSCALE = 8192;
export const SFF_KEEPDOCINFO = 4096;
export const SFF_PWD = 2048;
export const SF_RTFVAL = 1792;
export const MAX_TAB_STOPS = 32;
export const lDefaultTab = 720;
export const MAX_TABLE_CELLS = 63;
export const PFM_SPACEBEFORE = 64;
export const PFM_SPACEAFTER = 128;
export const PFM_LINESPACING = 256;
export const PFM_STYLE = 1024;
export const PFM_BORDER = 2048;
export const PFM_SHADING = 4096;
export const PFM_NUMBERINGSTYLE = 8192;
export const PFM_NUMBERINGTAB = 16384;
export const PFM_NUMBERINGSTART = 32768;
export const PFM_KEEP = 131072;
export const PFM_KEEPNEXT = 262144;
export const PFM_PAGEBREAKBEFORE = 524288;
export const PFM_NOLINENUMBER = 1048576;
export const PFM_NOWIDOWCONTROL = 2097152;
export const PFM_DONOTHYPHEN = 4194304;
export const PFM_SIDEBYSIDE = 8388608;
export const PFM_COLLAPSED = 16777216;
export const PFM_OUTLINELEVEL = 33554432;
export const PFM_BOX = 67108864;
export const PFM_RESERVED2 = 134217728;
export const PFM_TABLEROWDELIMITER = 268435456;
export const PFM_TEXTWRAPPINGBREAK = 536870912;
export const PFM_TABLE = 1073741824;
export const PFA_JUSTIFY = 4;
export const PFA_FULL_INTERWORD = 4;
export const GCMF_GRIPPER = 1;
export const GCMF_SPELLING = 2;
export const GCMF_TOUCHMENU = 16384;
export const GCMF_MOUSEMENU = 8192;
export const OLEOP_DOVERB = 1;
export const CF_RTF = `Rich Text Format`;
export const CF_RTFNOOBJS = `Rich Text Format Without Objects`;
export const CF_RETEXTOBJ = `RichEdit Text and Objects`;
export const ST_DEFAULT = 0;
export const ST_KEEPUNDO = 1;
export const ST_SELECTION = 2;
export const ST_NEWCHARS = 4;
export const ST_UNICODE = 8;
export const BOM_DEFPARADIR = 1;
export const BOM_PLAINTEXT = 2;
export const BOM_NEUTRALOVERRIDE = 4;
export const BOM_CONTEXTREADING = 8;
export const BOM_CONTEXTALIGNMENT = 16;
export const BOM_LEGACYBIDICLASS = 64;
export const BOM_UNICODEBIDI = 128;
export const BOE_RTLDIR = 1;
export const BOE_PLAINTEXT = 2;
export const BOE_NEUTRALOVERRIDE = 4;
export const BOE_CONTEXTREADING = 8;
export const BOE_CONTEXTALIGNMENT = 16;
export const BOE_FORCERECALC = 32;
export const BOE_LEGACYBIDICLASS = 64;
export const BOE_UNICODEBIDI = 128;
export const FR_MATCHDIAC = 536870912;
export const FR_MATCHKASHIDA = 1073741824;
export const FR_MATCHALEFHAMZA = 2147483648;
export const RICHEDIT60_CLASS = `RICHEDIT60W`;
export const PFA_FULL_NEWSPAPER = 5;
export const PFA_FULL_INTERLETTER = 6;
export const PFA_FULL_SCALED = 7;
export const PFA_FULL_GLYPHS = 8;
export const AURL_ENABLEEA = 1;
export const GCM_TOUCHMENU = 16384;
export const GCM_MOUSEMENU = 8192;
export const S_MSG_KEY_IGNORED = 288796641820148225n;
export const TXTBIT_RICHTEXT = 1;
export const TXTBIT_MULTILINE = 2;
export const TXTBIT_READONLY = 4;
export const TXTBIT_SHOWACCELERATOR = 8;
export const TXTBIT_USEPASSWORD = 16;
export const TXTBIT_HIDESELECTION = 32;
export const TXTBIT_SAVESELECTION = 64;
export const TXTBIT_AUTOWORDSEL = 128;
export const TXTBIT_VERTICAL = 256;
export const TXTBIT_SELBARCHANGE = 512;
export const TXTBIT_WORDWRAP = 1024;
export const TXTBIT_ALLOWBEEP = 2048;
export const TXTBIT_DISABLEDRAG = 4096;
export const TXTBIT_VIEWINSETCHANGE = 8192;
export const TXTBIT_BACKSTYLECHANGE = 16384;
export const TXTBIT_MAXLENGTHCHANGE = 32768;
export const TXTBIT_SCROLLBARCHANGE = 65536;
export const TXTBIT_CHARFORMATCHANGE = 131072;
export const TXTBIT_PARAFORMATCHANGE = 262144;
export const TXTBIT_EXTENTCHANGE = 524288;
export const TXTBIT_CLIENTRECTCHANGE = 1048576;
export const TXTBIT_USECURRENTBKG = 2097152;
export const TXTBIT_NOTHREADREFCOUNT = 4194304;
export const TXTBIT_SHOWPASSWORD = 8388608;
export const TXTBIT_D2DDWRITE = 16777216;
export const TXTBIT_D2DSIMPLETYPOGRAPHY = 33554432;
export const TXTBIT_D2DPIXELSNAPPED = 67108864;
export const TXTBIT_D2DSUBPIXELLINES = 134217728;
export const TXTBIT_FLASHLASTPASSWORDCHAR = 268435456;
export const TXTBIT_ADVANCEDINPUT = 536870912;
export const TXES_ISDIALOG = 1;
export const REO_NULL = 0;
export const REO_READWRITEMASK = 2047;
export const TM_PLAINTEXT = 1;
export const TM_RICHTEXT = 2;
export const TM_SINGLELEVELUNDO = 4;
export const TM_MULTILEVELUNDO = 8;
export const TM_SINGLECODEPAGE = 16;
export const TM_MULTICODEPAGE = 32;
export const TA_NOUPDATECP = 0;
export const TA_UPDATECP = 1;
export const TA_LEFT = 0;
export const TA_RIGHT = 2;
export const TA_CENTER = 6;
export const TA_TOP = 0;
export const TA_BOTTOM = 8;
export const TA_BASELINE = 24;
export const TA_RTLREADING = 256;
export const TA_MASK = 287;
export const VTA_BASELINE = 24;
export const VTA_LEFT = 8;
export const VTA_RIGHT = 0;
export const VTA_CENTER = 6;
export const VTA_BOTTOM = 2;
export const VTA_TOP = 0;
export const CHARSET_UNICODE = 1;
export const CHARSET_SYMBOL = 2;
export const DVASPECT_CONTENT = 1;
export const DVASPECT_THUMBNAIL = 2;
export const DVASPECT_ICON = 4;
export const DVASPECT_DOCPRINT = 8;
export const DVASPECT_OPAQUE = 16;
export const DVASPECT_TRANSPARENT = 32;
export const UID_UNKNOWN = 0;
export const UID_TYPING = 1;
export const UID_DELETE = 2;
export const UID_DRAGDROP = 3;
export const UID_CUT = 4;
export const UID_PASTE = 5;
export const UID_AUTOTABLE = 6;
export const khyphNil = 0;
export const khyphNormal = 1;
export const khyphAddBefore = 2;
export const khyphChangeBefore = 3;
export const khyphDeleteBefore = 4;
export const khyphChangeAfter = 5;
export const khyphDelAndChange = 6;
export const TXTBACK_TRANSPARENT = 0;
export const TXTBACK_OPAQUE = 1;
export const TXTHITRESULT_NOHIT = 0;
export const TXTHITRESULT_TRANSPARENT = 1;
export const TXTHITRESULT_CLOSE = 2;
export const TXTHITRESULT_HIT = 3;
export const TXTNS_FITTOCONTENT2 = 0;
export const TXTNS_FITTOCONTENT = 1;
export const TXTNS_ROUNDTOLINE = 2;
export const TXTNS_FITTOCONTENT3 = 3;
export const TXTNS_FITTOCONTENTWSP = 4;
export const TXTNS_INCLUDELASTLINE = 1073741824;
export const TXTNS_EMU = `-2147483648`;
export const TXTVIEW_ACTIVE = 0;
export const TXTVIEW_INACTIVE = `-1`;
export const CN_GENERIC = 0;
export const CN_TEXTCHANGED = 1;
export const CN_NEWUNDO = 2;
export const CN_NEWREDO = 4;
export const CARET_NONE = 0;
export const CARET_CUSTOM = 1;
export const CARET_RTL = 2;
export const CARET_ITALIC = 32;
export const CARET_NULL = 64;
export const CARET_ROTATE90 = 128;
export const tomFalse = 0;
export const tomTrue = `-1`;
export const tomUndefined = `-9999999`;
export const tomToggle = `-9999998`;
export const tomAutoColor = `-9999997`;
export const tomDefault = `-9999996`;
export const tomSuspend = `-9999995`;
export const tomResume = `-9999994`;
export const tomApplyNow = 0;
export const tomApplyLater = 1;
export const tomTrackParms = 2;
export const tomCacheParms = 3;
export const tomApplyTmp = 4;
export const tomDisableSmartFont = 8;
export const tomEnableSmartFont = 9;
export const tomUsePoints = 10;
export const tomUseTwips = 11;
export const tomBackward = `-1073741823`;
export const tomForward = 1073741823;
export const tomMove = 0;
export const tomExtend = 1;
export const tomNoSelection = 0;
export const tomSelectionIP = 1;
export const tomSelectionNormal = 2;
export const tomSelectionFrame = 3;
export const tomSelectionColumn = 4;
export const tomSelectionRow = 5;
export const tomSelectionBlock = 6;
export const tomSelectionInlineShape = 7;
export const tomSelectionShape = 8;
export const tomSelStartActive = 1;
export const tomSelAtEOL = 2;
export const tomSelOvertype = 4;
export const tomSelActive = 8;
export const tomSelReplace = 16;
export const tomEnd = 0;
export const tomStart = 32;
export const tomCollapseEnd = 0;
export const tomCollapseStart = 1;
export const tomClientCoord = 256;
export const tomAllowOffClient = 512;
export const tomTransform = 1024;
export const tomObjectArg = 2048;
export const tomAtEnd = 4096;
export const tomNone = 0;
export const tomSingle = 1;
export const tomWords = 2;
export const tomDouble = 3;
export const tomDotted = 4;
export const tomDash = 5;
export const tomDashDot = 6;
export const tomDashDotDot = 7;
export const tomWave = 8;
export const tomThick = 9;
export const tomHair = 10;
export const tomDoubleWave = 11;
export const tomHeavyWave = 12;
export const tomLongDash = 13;
export const tomThickDash = 14;
export const tomThickDashDot = 15;
export const tomThickDashDotDot = 16;
export const tomThickDotted = 17;
export const tomThickLongDash = 18;
export const tomLineSpaceSingle = 0;
export const tomLineSpace1pt5 = 1;
export const tomLineSpaceDouble = 2;
export const tomLineSpaceAtLeast = 3;
export const tomLineSpaceExactly = 4;
export const tomLineSpaceMultiple = 5;
export const tomLineSpacePercent = 6;
export const tomAlignLeft = 0;
export const tomAlignCenter = 1;
export const tomAlignRight = 2;
export const tomAlignJustify = 3;
export const tomAlignDecimal = 3;
export const tomAlignBar = 4;
export const tomDefaultTab = 5;
export const tomAlignInterWord = 3;
export const tomAlignNewspaper = 4;
export const tomAlignInterLetter = 5;
export const tomAlignScaled = 6;
export const tomSpaces = 0;
export const tomDots = 1;
export const tomDashes = 2;
export const tomLines = 3;
export const tomThickLines = 4;
export const tomEquals = 5;
export const tomTabBack = `-3`;
export const tomTabNext = `-2`;
export const tomTabHere = `-1`;
export const tomListNone = 0;
export const tomListBullet = 1;
export const tomListNumberAsArabic = 2;
export const tomListNumberAsLCLetter = 3;
export const tomListNumberAsUCLetter = 4;
export const tomListNumberAsLCRoman = 5;
export const tomListNumberAsUCRoman = 6;
export const tomListNumberAsSequence = 7;
export const tomListNumberedCircle = 8;
export const tomListNumberedBlackCircleWingding = 9;
export const tomListNumberedWhiteCircleWingding = 10;
export const tomListNumberedArabicWide = 11;
export const tomListNumberedChS = 12;
export const tomListNumberedChT = 13;
export const tomListNumberedJpnChS = 14;
export const tomListNumberedJpnKor = 15;
export const tomListNumberedArabic1 = 16;
export const tomListNumberedArabic2 = 17;
export const tomListNumberedHebrew = 18;
export const tomListNumberedThaiAlpha = 19;
export const tomListNumberedThaiNum = 20;
export const tomListNumberedHindiAlpha = 21;
export const tomListNumberedHindiAlpha1 = 22;
export const tomListNumberedHindiNum = 23;
export const tomListParentheses = 65536;
export const tomListPeriod = 131072;
export const tomListPlain = 196608;
export const tomListNoNumber = 262144;
export const tomListMinus = 524288;
export const tomIgnoreNumberStyle = 16777216;
export const tomParaStyleNormal = `-1`;
export const tomParaStyleHeading1 = `-2`;
export const tomParaStyleHeading2 = `-3`;
export const tomParaStyleHeading3 = `-4`;
export const tomParaStyleHeading4 = `-5`;
export const tomParaStyleHeading5 = `-6`;
export const tomParaStyleHeading6 = `-7`;
export const tomParaStyleHeading7 = `-8`;
export const tomParaStyleHeading8 = `-9`;
export const tomParaStyleHeading9 = `-10`;
export const tomCharacter = 1;
export const tomWord = 2;
export const tomSentence = 3;
export const tomParagraph = 4;
export const tomLine = 5;
export const tomStory = 6;
export const tomScreen = 7;
export const tomSection = 8;
export const tomTableColumn = 9;
export const tomColumn = 9;
export const tomRow = 10;
export const tomWindow = 11;
export const tomCell = 12;
export const tomCharFormat = 13;
export const tomParaFormat = 14;
export const tomTable = 15;
export const tomObject = 16;
export const tomPage = 17;
export const tomHardParagraph = 18;
export const tomCluster = 19;
export const tomInlineObject = 20;
export const tomInlineObjectArg = 21;
export const tomLeafLine = 22;
export const tomLayoutColumn = 23;
export const tomProcessId = 1073741825;
export const tomMatchWord = 2;
export const tomMatchCase = 4;
export const tomMatchPattern = 8;
export const tomUnknownStory = 0;
export const tomMainTextStory = 1;
export const tomFootnotesStory = 2;
export const tomEndnotesStory = 3;
export const tomCommentsStory = 4;
export const tomTextFrameStory = 5;
export const tomEvenPagesHeaderStory = 6;
export const tomPrimaryHeaderStory = 7;
export const tomEvenPagesFooterStory = 8;
export const tomPrimaryFooterStory = 9;
export const tomFirstPageHeaderStory = 10;
export const tomFirstPageFooterStory = 11;
export const tomScratchStory = 127;
export const tomFindStory = 128;
export const tomReplaceStory = 129;
export const tomStoryInactive = 0;
export const tomStoryActiveDisplay = 1;
export const tomStoryActiveUI = 2;
export const tomStoryActiveDisplayUI = 3;
export const tomNoAnimation = 0;
export const tomLasVegasLights = 1;
export const tomBlinkingBackground = 2;
export const tomSparkleText = 3;
export const tomMarchingBlackAnts = 4;
export const tomMarchingRedAnts = 5;
export const tomShimmer = 6;
export const tomWipeDown = 7;
export const tomWipeRight = 8;
export const tomAnimationMax = 8;
export const tomLowerCase = 0;
export const tomUpperCase = 1;
export const tomTitleCase = 2;
export const tomSentenceCase = 4;
export const tomToggleCase = 5;
export const tomReadOnly = 256;
export const tomShareDenyRead = 512;
export const tomShareDenyWrite = 1024;
export const tomPasteFile = 4096;
export const tomCreateNew = 16;
export const tomCreateAlways = 32;
export const tomOpenExisting = 48;
export const tomOpenAlways = 64;
export const tomTruncateExisting = 80;
export const tomRTF = 1;
export const tomText = 2;
export const tomHTML = 3;
export const tomWordDocument = 4;
export const tomBold = `-2147483647`;
export const tomItalic = `-2147483646`;
export const tomUnderline = `-2147483644`;
export const tomStrikeout = `-2147483640`;
export const tomProtected = `-2147483632`;
export const tomLink = `-2147483616`;
export const tomSmallCaps = `-2147483584`;
export const tomAllCaps = `-2147483520`;
export const tomHidden = `-2147483392`;
export const tomOutline = `-2147483136`;
export const tomShadow = `-2147482624`;
export const tomEmboss = `-2147481600`;
export const tomImprint = `-2147479552`;
export const tomDisabled = `-2147475456`;
export const tomRevised = `-2147467264`;
export const tomSubscriptCF = `-2147418112`;
export const tomSuperscriptCF = `-2147352576`;
export const tomFontBound = `-2146435072`;
export const tomLinkProtected = `-2139095040`;
export const tomInlineObjectStart = `-2130706432`;
export const tomExtendedChar = `-2113929216`;
export const tomAutoBackColor = `-2080374784`;
export const tomMathZoneNoBuildUp = `-2013265920`;
export const tomMathZone = `-1879048192`;
export const tomMathZoneOrdinary = `-1610612736`;
export const tomAutoTextColor = `-1073741824`;
export const tomMathZoneDisplay = 262144;
export const tomParaEffectRTL = 1;
export const tomParaEffectKeep = 2;
export const tomParaEffectKeepNext = 4;
export const tomParaEffectPageBreakBefore = 8;
export const tomParaEffectNoLineNumber = 16;
export const tomParaEffectNoWidowControl = 32;
export const tomParaEffectDoNotHyphen = 64;
export const tomParaEffectSideBySide = 128;
export const tomParaEffectCollapsed = 256;
export const tomParaEffectOutlineLevel = 512;
export const tomParaEffectBox = 1024;
export const tomParaEffectTableRowDelimiter = 4096;
export const tomParaEffectTable = 16384;
export const tomModWidthPairs = 1;
export const tomModWidthSpace = 2;
export const tomAutoSpaceAlpha = 4;
export const tomAutoSpaceNumeric = 8;
export const tomAutoSpaceParens = 16;
export const tomEmbeddedFont = 32;
export const tomDoublestrike = 64;
export const tomOverlapping = 128;
export const tomNormalCaret = 0;
export const tomKoreanBlockCaret = 1;
export const tomNullCaret = 2;
export const tomIncludeInset = 1;
export const tomUnicodeBiDi = 1;
export const tomMathCFCheck = 4;
export const tomUnlink = 8;
export const tomUnhide = 16;
export const tomCheckTextLimit = 32;
export const tomIgnoreCurrentFont = 0;
export const tomMatchCharRep = 1;
export const tomMatchFontSignature = 2;
export const tomMatchAscii = 4;
export const tomGetHeightOnly = 8;
export const tomMatchMathFont = 16;
export const tomCharset = `-2147483648`;
export const tomCharRepFromLcid = 1073741824;
export const tomAnsi = 0;
export const tomEastEurope = 1;
export const tomCyrillic = 2;
export const tomGreek = 3;
export const tomTurkish = 4;
export const tomHebrew = 5;
export const tomArabic = 6;
export const tomBaltic = 7;
export const tomVietnamese = 8;
export const tomDefaultCharRep = 9;
export const tomSymbol = 10;
export const tomThai = 11;
export const tomShiftJIS = 12;
export const tomGB2312 = 13;
export const tomHangul = 14;
export const tomBIG5 = 15;
export const tomPC437 = 16;
export const tomOEM = 17;
export const tomMac = 18;
export const tomArmenian = 19;
export const tomSyriac = 20;
export const tomThaana = 21;
export const tomDevanagari = 22;
export const tomBengali = 23;
export const tomGurmukhi = 24;
export const tomGujarati = 25;
export const tomOriya = 26;
export const tomTamil = 27;
export const tomTelugu = 28;
export const tomKannada = 29;
export const tomMalayalam = 30;
export const tomSinhala = 31;
export const tomLao = 32;
export const tomTibetan = 33;
export const tomMyanmar = 34;
export const tomGeorgian = 35;
export const tomJamo = 36;
export const tomEthiopic = 37;
export const tomCherokee = 38;
export const tomAboriginal = 39;
export const tomOgham = 40;
export const tomRunic = 41;
export const tomKhmer = 42;
export const tomMongolian = 43;
export const tomBraille = 44;
export const tomYi = 45;
export const tomLimbu = 46;
export const tomTaiLe = 47;
export const tomNewTaiLue = 48;
export const tomSylotiNagri = 49;
export const tomKharoshthi = 50;
export const tomKayahli = 51;
export const tomUsymbol = 52;
export const tomEmoji = 53;
export const tomGlagolitic = 54;
export const tomLisu = 55;
export const tomVai = 56;
export const tomNKo = 57;
export const tomOsmanya = 58;
export const tomPhagsPa = 59;
export const tomGothic = 60;
export const tomDeseret = 61;
export const tomTifinagh = 62;
export const tomCharRepMax = 63;
export const tomRE10Mode = 1;
export const tomUseAtFont = 2;
export const tomTextFlowMask = 12;
export const tomTextFlowES = 0;
export const tomTextFlowSW = 4;
export const tomTextFlowWN = 8;
export const tomTextFlowNE = 12;
export const tomNoIME = 524288;
export const tomSelfIME = 262144;
export const tomNoUpScroll = 65536;
export const tomNoVpScroll = 262144;
export const tomNoLink = 0;
export const tomClientLink = 1;
export const tomFriendlyLinkName = 2;
export const tomFriendlyLinkAddress = 3;
export const tomAutoLinkURL = 4;
export const tomAutoLinkEmail = 5;
export const tomAutoLinkPhone = 6;
export const tomAutoLinkPath = 7;
export const tomCompressNone = 0;
export const tomCompressPunctuation = 1;
export const tomCompressPunctuationAndKana = 2;
export const tomCompressMax = 2;
export const tomUnderlinePositionAuto = 0;
export const tomUnderlinePositionBelow = 1;
export const tomUnderlinePositionAbove = 2;
export const tomUnderlinePositionMax = 2;
export const tomFontAlignmentAuto = 0;
export const tomFontAlignmentTop = 1;
export const tomFontAlignmentBaseline = 2;
export const tomFontAlignmentBottom = 3;
export const tomFontAlignmentCenter = 4;
export const tomFontAlignmentMax = 4;
export const tomRubyBelow = 128;
export const tomRubyAlignCenter = 0;
export const tomRubyAlign010 = 1;
export const tomRubyAlign121 = 2;
export const tomRubyAlignLeft = 3;
export const tomRubyAlignRight = 4;
export const tomLimitsDefault = 0;
export const tomLimitsUnderOver = 1;
export const tomLimitsSubSup = 2;
export const tomUpperLimitAsSuperScript = 3;
export const tomLimitsOpposite = 4;
export const tomShowLLimPlaceHldr = 8;
export const tomShowULimPlaceHldr = 16;
export const tomDontGrowWithContent = 64;
export const tomGrowWithContent = 128;
export const tomSubSupAlign = 1;
export const tomLimitAlignMask = 3;
export const tomLimitAlignCenter = 0;
export const tomLimitAlignLeft = 1;
export const tomLimitAlignRight = 2;
export const tomShowDegPlaceHldr = 8;
export const tomAlignDefault = 0;
export const tomAlignMatchAscentDescent = 2;
export const tomMathVariant = 32;
export const tomStyleDefault = 0;
export const tomStyleScriptScriptCramped = 1;
export const tomStyleScriptScript = 2;
export const tomStyleScriptCramped = 3;
export const tomStyleScript = 4;
export const tomStyleTextCramped = 5;
export const tomStyleText = 6;
export const tomStyleDisplayCramped = 7;
export const tomStyleDisplay = 8;
export const tomMathRelSize = 64;
export const tomDecDecSize = 254;
export const tomDecSize = 255;
export const tomIncSize = 65;
export const tomIncIncSize = 66;
export const tomGravityUI = 0;
export const tomGravityBack = 1;
export const tomGravityFore = 2;
export const tomGravityIn = 3;
export const tomGravityOut = 4;
export const tomGravityBackward = 536870912;
export const tomGravityForward = 1073741824;
export const tomAdjustCRLF = 1;
export const tomUseCRLF = 2;
export const tomTextize = 4;
export const tomAllowFinalEOP = 8;
export const tomFoldMathAlpha = 16;
export const tomNoHidden = 32;
export const tomIncludeNumbering = 64;
export const tomTranslateTableCell = 128;
export const tomNoMathZoneBrackets = 256;
export const tomConvertMathChar = 512;
export const tomNoUCGreekItalic = 1024;
export const tomAllowMathBold = 2048;
export const tomLanguageTag = 4096;
export const tomConvertRTF = 8192;
export const tomApplyRtfDocProps = 16384;
export const tomPhantomShow = 1;
export const tomPhantomZeroWidth = 2;
export const tomPhantomZeroAscent = 4;
export const tomPhantomZeroDescent = 8;
export const tomPhantomTransparent = 16;
export const tomPhantomASmash = 5;
export const tomPhantomDSmash = 9;
export const tomPhantomHSmash = 3;
export const tomPhantomSmash = 13;
export const tomPhantomHorz = 12;
export const tomPhantomVert = 2;
export const tomBoxHideTop = 1;
export const tomBoxHideBottom = 2;
export const tomBoxHideLeft = 4;
export const tomBoxHideRight = 8;
export const tomBoxStrikeH = 16;
export const tomBoxStrikeV = 32;
export const tomBoxStrikeTLBR = 64;
export const tomBoxStrikeBLTR = 128;
export const tomBoxAlignCenter = 1;
export const tomSpaceMask = 28;
export const tomSpaceDefault = 0;
export const tomSpaceUnary = 4;
export const tomSpaceBinary = 8;
export const tomSpaceRelational = 12;
export const tomSpaceSkip = 16;
export const tomSpaceOrd = 20;
export const tomSpaceDifferential = 24;
export const tomSizeText = 32;
export const tomSizeScript = 64;
export const tomSizeScriptScript = 96;
export const tomNoBreak = 128;
export const tomTransparentForPositioning = 256;
export const tomTransparentForSpacing = 512;
export const tomStretchCharBelow = 0;
export const tomStretchCharAbove = 1;
export const tomStretchBaseBelow = 2;
export const tomStretchBaseAbove = 3;
export const tomMatrixAlignMask = 3;
export const tomMatrixAlignCenter = 0;
export const tomMatrixAlignTopRow = 1;
export const tomMatrixAlignBottomRow = 3;
export const tomShowMatPlaceHldr = 8;
export const tomEqArrayLayoutWidth = 1;
export const tomEqArrayAlignMask = 12;
export const tomEqArrayAlignCenter = 0;
export const tomEqArrayAlignTopRow = 4;
export const tomEqArrayAlignBottomRow = 12;
export const tomMathManualBreakMask = 127;
export const tomMathBreakLeft = 125;
export const tomMathBreakCenter = 126;
export const tomMathBreakRight = 127;
export const tomMathEqAlign = 128;
export const tomMathArgShadingStart = 593;
export const tomMathArgShadingEnd = 594;
export const tomMathObjShadingStart = 595;
export const tomMathObjShadingEnd = 596;
export const tomFunctionTypeNone = 0;
export const tomFunctionTypeTakesArg = 1;
export const tomFunctionTypeTakesLim = 2;
export const tomFunctionTypeTakesLim2 = 3;
export const tomFunctionTypeIsLim = 4;
export const tomMathParaAlignDefault = 0;
export const tomMathParaAlignCenterGroup = 1;
export const tomMathParaAlignCenter = 2;
export const tomMathParaAlignLeft = 3;
export const tomMathParaAlignRight = 4;
export const tomMathDispAlignMask = 3;
export const tomMathDispAlignCenterGroup = 0;
export const tomMathDispAlignCenter = 1;
export const tomMathDispAlignLeft = 2;
export const tomMathDispAlignRight = 3;
export const tomMathDispIntUnderOver = 4;
export const tomMathDispFracTeX = 8;
export const tomMathDispNaryGrow = 16;
export const tomMathDocEmptyArgMask = 96;
export const tomMathDocEmptyArgAuto = 0;
export const tomMathDocEmptyArgAlways = 32;
export const tomMathDocEmptyArgNever = 64;
export const tomMathDocSbSpOpUnchanged = 128;
export const tomMathDocDiffMask = 768;
export const tomMathDocDiffDefault = 0;
export const tomMathDocDiffUpright = 256;
export const tomMathDocDiffItalic = 512;
export const tomMathDocDiffOpenItalic = 768;
export const tomMathDispNarySubSup = 1024;
export const tomMathDispDef = 2048;
export const tomMathEnableRtl = 4096;
export const tomMathBrkBinMask = 196608;
export const tomMathBrkBinBefore = 0;
export const tomMathBrkBinAfter = 65536;
export const tomMathBrkBinDup = 131072;
export const tomMathBrkBinSubMask = 786432;
export const tomMathBrkBinSubMM = 0;
export const tomMathBrkBinSubPM = 262144;
export const tomMathBrkBinSubMP = 524288;
export const tomSelRange = 597;
export const tomHstring = 596;
export const tomFontPropTeXStyle = 828;
export const tomFontPropAlign = 829;
export const tomFontStretch = 830;
export const tomFontStyle = 831;
export const tomFontStyleUpright = 0;
export const tomFontStyleOblique = 1;
export const tomFontStyleItalic = 2;
export const tomFontStretchDefault = 0;
export const tomFontStretchUltraCondensed = 1;
export const tomFontStretchExtraCondensed = 2;
export const tomFontStretchCondensed = 3;
export const tomFontStretchSemiCondensed = 4;
export const tomFontStretchNormal = 5;
export const tomFontStretchSemiExpanded = 6;
export const tomFontStretchExpanded = 7;
export const tomFontStretchExtraExpanded = 8;
export const tomFontStretchUltraExpanded = 9;
export const tomFontWeightDefault = 0;
export const tomFontWeightThin = 100;
export const tomFontWeightExtraLight = 200;
export const tomFontWeightLight = 300;
export const tomFontWeightNormal = 400;
export const tomFontWeightRegular = 400;
export const tomFontWeightMedium = 500;
export const tomFontWeightSemiBold = 600;
export const tomFontWeightBold = 700;
export const tomFontWeightExtraBold = 800;
export const tomFontWeightBlack = 900;
export const tomFontWeightHeavy = 900;
export const tomFontWeightExtraBlack = 950;
export const tomParaPropMathAlign = 1079;
export const tomDocMathBuild = 128;
export const tomMathLMargin = 129;
export const tomMathRMargin = 130;
export const tomMathWrapIndent = 131;
export const tomMathWrapRight = 132;
export const tomMathPostSpace = 134;
export const tomMathPreSpace = 133;
export const tomMathInterSpace = 135;
export const tomMathIntraSpace = 136;
export const tomCanCopy = 137;
export const tomCanRedo = 138;
export const tomCanUndo = 139;
export const tomUndoLimit = 140;
export const tomDocAutoLink = 141;
export const tomEllipsisMode = 142;
export const tomEllipsisState = 143;
export const tomEllipsisNone = 0;
export const tomEllipsisEnd = 1;
export const tomEllipsisWord = 3;
export const tomEllipsisPresent = 1;
export const tomVTopCell = 1;
export const tomVLowCell = 2;
export const tomHStartCell = 4;
export const tomHContCell = 8;
export const tomRowUpdate = 1;
export const tomRowApplyDefault = 0;
export const tomCellStructureChangeOnly = 1;
export const tomRowHeightActual = 2059;
export const tomSimpleText = 0;
export const tomRuby = 1;
export const tomHorzVert = 2;
export const tomWarichu = 3;
export const tomEq = 9;
export const tomMath = 10;
export const tomAccent = 10;
export const tomBox = 11;
export const tomBoxedFormula = 12;
export const tomBrackets = 13;
export const tomBracketsWithSeps = 14;
export const tomEquationArray = 15;
export const tomFraction = 16;
export const tomFunctionApply = 17;
export const tomLeftSubSup = 18;
export const tomLowerLimit = 19;
export const tomMatrix = 20;
export const tomNary = 21;
export const tomOpChar = 22;
export const tomOverbar = 23;
export const tomPhantom = 24;
export const tomRadical = 25;
export const tomSlashedFraction = 26;
export const tomStack = 27;
export const tomStretchStack = 28;
export const tomSubscript = 29;
export const tomSubSup = 30;
export const tomSuperscript = 31;
export const tomUnderbar = 32;
export const tomUpperLimit = 33;
export const tomObjectMax = 33;
export const MBOLD = 16;
export const MITAL = 32;
export const MGREEK = 64;
export const MROMN = 0;
export const MSCRP = 1;
export const MFRAK = 2;
export const MOPEN = 3;
export const MSANS = 4;
export const MMONO = 5;
export const MMATH = 6;
export const MISOL = 7;
export const MINIT = 8;
export const MTAIL = 9;
export const MSTRCH = 10;
export const MLOOP = 11;
export const MOPENA = 12;

// Structs

/**
 * Windows.Win32.UI.Controls.RichEdit.IMECOMPTEXT (size: 8)
 */
export interface IMECOMPTEXT {
  /** i32 */
  cb: number;
  /** Windows.Win32.UI.Controls.RichEdit.IMECOMPTEXT_FLAGS */
  flags: IMECOMPTEXT_FLAGS;
}

export const sizeofIMECOMPTEXT = 8;

export function allocIMECOMPTEXT(data?: Partial<IMECOMPTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofIMECOMPTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cb !== undefined) view.setInt32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.flags !== undefined) view.setUint32(4, Number(data.flags), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.TABLEROWPARMS (size: 32)
 */
export interface TABLEROWPARMS {
  /** u8 */
  cbRow: number;
  /** u8 */
  cbCell: number;
  /** u8 */
  cCell: number;
  /** u8 */
  cRow: number;
  /** i32 */
  dxCellMargin: number;
  /** i32 */
  dxIndent: number;
  /** i32 */
  dyHeight: number;
  /** u32 */
  _bitfield: number;
  /** i32 */
  cpStartRow: number;
  /** u8 */
  bTableLevel: number;
  /** u8 */
  iCell: number;
}

export const sizeofTABLEROWPARMS = 32;

export function allocTABLEROWPARMS(data?: Partial<TABLEROWPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTABLEROWPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.cbRow !== undefined) view.setUint8(0, Number(data.cbRow));
  // 0x01: u8
  if (data?.cbCell !== undefined) view.setUint8(1, Number(data.cbCell));
  // 0x02: u8
  if (data?.cCell !== undefined) view.setUint8(2, Number(data.cCell));
  // 0x03: u8
  if (data?.cRow !== undefined) view.setUint8(3, Number(data.cRow));
  // 0x04: i32
  if (data?.dxCellMargin !== undefined) view.setInt32(4, Number(data.dxCellMargin), true);
  // 0x08: i32
  if (data?.dxIndent !== undefined) view.setInt32(8, Number(data.dxIndent), true);
  // 0x0c: i32
  if (data?.dyHeight !== undefined) view.setInt32(12, Number(data.dyHeight), true);
  // 0x10: u32
  if (data?._bitfield !== undefined) view.setUint32(16, Number(data._bitfield), true);
  // 0x14: i32
  if (data?.cpStartRow !== undefined) view.setInt32(20, Number(data.cpStartRow), true);
  // 0x18: u8
  if (data?.bTableLevel !== undefined) view.setUint8(24, Number(data.bTableLevel));
  // 0x19: u8
  if (data?.iCell !== undefined) view.setUint8(25, Number(data.iCell));
  // 0x1a: pad6
  return buf;
}

export type COLORREF = number;

/**
 * Windows.Win32.UI.Controls.RichEdit.TABLECELLPARMS (size: 64)
 */
export interface TABLECELLPARMS {
  /** i32 */
  dxWidth: number;
  /** u16 */
  _bitfield: number;
  /** u16 */
  wShading: number;
  /** i16 */
  dxBrdrLeft: number;
  /** i16 */
  dyBrdrTop: number;
  /** i16 */
  dxBrdrRight: number;
  /** i16 */
  dyBrdrBottom: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrLeft: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrTop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrRight: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBrdrBottom: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBackPat: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crForePat: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTABLECELLPARMS = 64;

export function allocTABLECELLPARMS(data?: Partial<TABLECELLPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTABLECELLPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dxWidth !== undefined) view.setInt32(0, Number(data.dxWidth), true);
  // 0x04: u16
  if (data?._bitfield !== undefined) view.setUint16(4, Number(data._bitfield), true);
  // 0x06: u16
  if (data?.wShading !== undefined) view.setUint16(6, Number(data.wShading), true);
  // 0x08: i16
  if (data?.dxBrdrLeft !== undefined) view.setInt16(8, Number(data.dxBrdrLeft), true);
  // 0x0a: i16
  if (data?.dyBrdrTop !== undefined) view.setInt16(10, Number(data.dyBrdrTop), true);
  // 0x0c: i16
  if (data?.dxBrdrRight !== undefined) view.setInt16(12, Number(data.dxBrdrRight), true);
  // 0x0e: i16
  if (data?.dyBrdrBottom !== undefined) view.setInt16(14, Number(data.dyBrdrBottom), true);
  // 0x10: pointer
  if (data?.crBrdrLeft !== undefined) view.setBigUint64(16, data.crBrdrLeft === null ? 0n : BigInt(util.toPointer(data.crBrdrLeft)), true);
  // 0x18: pointer
  if (data?.crBrdrTop !== undefined) view.setBigUint64(24, data.crBrdrTop === null ? 0n : BigInt(util.toPointer(data.crBrdrTop)), true);
  // 0x20: pointer
  if (data?.crBrdrRight !== undefined) view.setBigUint64(32, data.crBrdrRight === null ? 0n : BigInt(util.toPointer(data.crBrdrRight)), true);
  // 0x28: pointer
  if (data?.crBrdrBottom !== undefined) view.setBigUint64(40, data.crBrdrBottom === null ? 0n : BigInt(util.toPointer(data.crBrdrBottom)), true);
  // 0x30: pointer
  if (data?.crBackPat !== undefined) view.setBigUint64(48, data.crBackPat === null ? 0n : BigInt(util.toPointer(data.crBackPat)), true);
  // 0x38: pointer
  if (data?.crForePat !== undefined) view.setBigUint64(56, data.crForePat === null ? 0n : BigInt(util.toPointer(data.crForePat)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Controls.RichEdit.RICHEDIT_IMAGE_PARAMETERS (size: 32)
 */
export interface RICHEDIT_IMAGE_PARAMETERS {
  /** i32 */
  xWidth: number;
  /** i32 */
  yHeight: number;
  /** i32 */
  Ascent: number;
  /** Windows.Win32.Graphics.Gdi.TEXT_ALIGN_OPTIONS */
  Type: TEXT_ALIGN_OPTIONS;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAlternateText: string | null;
  /** Windows.Win32.System.Com.IStream */
  pIStream: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRICHEDIT_IMAGE_PARAMETERS = 32;

export function allocRICHEDIT_IMAGE_PARAMETERS(data?: Partial<RICHEDIT_IMAGE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofRICHEDIT_IMAGE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.xWidth !== undefined) view.setInt32(0, Number(data.xWidth), true);
  // 0x04: i32
  if (data?.yHeight !== undefined) view.setInt32(4, Number(data.yHeight), true);
  // 0x08: i32
  if (data?.Ascent !== undefined) view.setInt32(8, Number(data.Ascent), true);
  // 0x0c: u32
  if (data?.Type !== undefined) view.setUint32(12, Number(data.Type), true);
  // 0x10: buffer
  if (data?.pwszAlternateText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszAlternateText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pIStream !== undefined) view.setBigUint64(24, data.pIStream === null ? 0n : BigInt(util.toPointer(data.pIStream)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.UI.Controls.NMHDR (size: 24)
 */
export interface NMHDR {
  /** Windows.Win32.Foundation.HWND */
  hwndFrom: Deno.PointerValue | null;
  /** usize */
  idFrom: Deno.PointerValue;
  /** u32 */
  code: number;
}

export const sizeofNMHDR = 24;

export function allocNMHDR(data?: Partial<NMHDR>): Uint8Array {
  const buf = new Uint8Array(sizeofNMHDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndFrom !== undefined) view.setBigUint64(0, data.hwndFrom === null ? 0n : BigInt(util.toPointer(data.hwndFrom)), true);
  // 0x08: usize
  if (data?.idFrom !== undefined) view.setBigUint64(8, BigInt(data.idFrom), true);
  // 0x10: u32
  if (data?.code !== undefined) view.setUint32(16, Number(data.code), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENDCOMPOSITIONNOTIFY (size: 16)
 */
export interface ENDCOMPOSITIONNOTIFY {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.ENDCOMPOSITIONNOTIFY_CODE */
  dwCode: ENDCOMPOSITIONNOTIFY_CODE;
}

export const sizeofENDCOMPOSITIONNOTIFY = 16;

export function allocENDCOMPOSITIONNOTIFY(data?: Partial<ENDCOMPOSITIONNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofENDCOMPOSITIONNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: u32
  if (data?.dwCode !== undefined) view.setUint32(8, Number(data.dwCode), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMATA (size: 48)
 */
export interface CHARFORMATA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.RichEdit.CFM_MASK */
  dwMask: CFM_MASK;
  /** Windows.Win32.UI.Controls.RichEdit.CFE_EFFECTS */
  dwEffects: CFE_EFFECTS;
  /** i32 */
  yHeight: number;
  /** i32 */
  yOffset: number;
  /** Windows.Win32.Foundation.COLORREF */
  crTextColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */
  bCharSet: EMBED_FONT_CHARSET;
  /** u8 */
  bPitchAndFamily: number;
  /** array */
  szFaceName: Deno.PointerValue | null;
}

export const sizeofCHARFORMATA = 48;

export function allocCHARFORMATA(data?: Partial<CHARFORMATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwEffects !== undefined) view.setUint32(8, Number(data.dwEffects), true);
  // 0x0c: i32
  if (data?.yHeight !== undefined) view.setInt32(12, Number(data.yHeight), true);
  // 0x10: i32
  if (data?.yOffset !== undefined) view.setInt32(16, Number(data.yOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.crTextColor !== undefined) view.setBigUint64(24, data.crTextColor === null ? 0n : BigInt(util.toPointer(data.crTextColor)), true);
  // 0x20: u32
  if (data?.bCharSet !== undefined) view.setUint32(32, Number(data.bCharSet), true);
  // 0x24: u8
  if (data?.bPitchAndFamily !== undefined) view.setUint8(36, Number(data.bPitchAndFamily));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.szFaceName !== undefined) view.setBigUint64(40, data.szFaceName === null ? 0n : BigInt(util.toPointer(data.szFaceName)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMATW (size: 48)
 */
export interface CHARFORMATW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.RichEdit.CFM_MASK */
  dwMask: CFM_MASK;
  /** Windows.Win32.UI.Controls.RichEdit.CFE_EFFECTS */
  dwEffects: CFE_EFFECTS;
  /** i32 */
  yHeight: number;
  /** i32 */
  yOffset: number;
  /** Windows.Win32.Foundation.COLORREF */
  crTextColor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.EMBED_FONT_CHARSET */
  bCharSet: EMBED_FONT_CHARSET;
  /** u8 */
  bPitchAndFamily: number;
  /** array */
  szFaceName: Deno.PointerValue | null;
}

export const sizeofCHARFORMATW = 48;

export function allocCHARFORMATW(data?: Partial<CHARFORMATW>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMATW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u32
  if (data?.dwEffects !== undefined) view.setUint32(8, Number(data.dwEffects), true);
  // 0x0c: i32
  if (data?.yHeight !== undefined) view.setInt32(12, Number(data.yHeight), true);
  // 0x10: i32
  if (data?.yOffset !== undefined) view.setInt32(16, Number(data.yOffset), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.crTextColor !== undefined) view.setBigUint64(24, data.crTextColor === null ? 0n : BigInt(util.toPointer(data.crTextColor)), true);
  // 0x20: u32
  if (data?.bCharSet !== undefined) view.setUint32(32, Number(data.bCharSet), true);
  // 0x24: u8
  if (data?.bPitchAndFamily !== undefined) view.setUint8(36, Number(data.bPitchAndFamily));
  // 0x25: pad3
  // 0x28: pointer
  if (data?.szFaceName !== undefined) view.setBigUint64(40, data.szFaceName === null ? 0n : BigInt(util.toPointer(data.szFaceName)), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMAT2W (size: 48)
 */
export interface CHARFORMAT2W {
  /** Windows.Win32.UI.Controls.RichEdit.CHARFORMATW */
  Base: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wWeight: number;
  /** i16 */
  sSpacing: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBackColor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  lcid: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i16 */
  sStyle: number;
  /** u16 */
  wKerning: number;
  /** u8 */
  bUnderlineType: number;
  /** u8 */
  bAnimation: number;
  /** u8 */
  bRevAuthor: number;
  /** u8 */
  bUnderlineColor: number;
}

export const sizeofCHARFORMAT2W = 48;

export function allocCHARFORMAT2W(data?: Partial<CHARFORMAT2W>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMAT2W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: u16
  if (data?.wWeight !== undefined) view.setUint16(8, Number(data.wWeight), true);
  // 0x0a: i16
  if (data?.sSpacing !== undefined) view.setInt16(10, Number(data.sSpacing), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.crBackColor !== undefined) view.setBigUint64(16, data.crBackColor === null ? 0n : BigInt(util.toPointer(data.crBackColor)), true);
  // 0x18: u32
  if (data?.lcid !== undefined) view.setUint32(24, Number(data.lcid), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: i16
  if (data?.sStyle !== undefined) view.setInt16(40, Number(data.sStyle), true);
  // 0x2a: u16
  if (data?.wKerning !== undefined) view.setUint16(42, Number(data.wKerning), true);
  // 0x2c: u8
  if (data?.bUnderlineType !== undefined) view.setUint8(44, Number(data.bUnderlineType));
  // 0x2d: u8
  if (data?.bAnimation !== undefined) view.setUint8(45, Number(data.bAnimation));
  // 0x2e: u8
  if (data?.bRevAuthor !== undefined) view.setUint8(46, Number(data.bRevAuthor));
  // 0x2f: u8
  if (data?.bUnderlineColor !== undefined) view.setUint8(47, Number(data.bUnderlineColor));
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARFORMAT2A (size: 48)
 */
export interface CHARFORMAT2A {
  /** Windows.Win32.UI.Controls.RichEdit.CHARFORMATA */
  Base: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  wWeight: number;
  /** i16 */
  sSpacing: number;
  /** Windows.Win32.Foundation.COLORREF */
  crBackColor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  lcid: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i16 */
  sStyle: number;
  /** u16 */
  wKerning: number;
  /** u8 */
  bUnderlineType: number;
  /** u8 */
  bAnimation: number;
  /** u8 */
  bRevAuthor: number;
  /** u8 */
  bUnderlineColor: number;
}

export const sizeofCHARFORMAT2A = 48;

export function allocCHARFORMAT2A(data?: Partial<CHARFORMAT2A>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARFORMAT2A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: u16
  if (data?.wWeight !== undefined) view.setUint16(8, Number(data.wWeight), true);
  // 0x0a: i16
  if (data?.sSpacing !== undefined) view.setInt16(10, Number(data.sSpacing), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.crBackColor !== undefined) view.setBigUint64(16, data.crBackColor === null ? 0n : BigInt(util.toPointer(data.crBackColor)), true);
  // 0x18: u32
  if (data?.lcid !== undefined) view.setUint32(24, Number(data.lcid), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: i16
  if (data?.sStyle !== undefined) view.setInt16(40, Number(data.sStyle), true);
  // 0x2a: u16
  if (data?.wKerning !== undefined) view.setUint16(42, Number(data.wKerning), true);
  // 0x2c: u8
  if (data?.bUnderlineType !== undefined) view.setUint8(44, Number(data.bUnderlineType));
  // 0x2d: u8
  if (data?.bAnimation !== undefined) view.setUint8(45, Number(data.bAnimation));
  // 0x2e: u8
  if (data?.bRevAuthor !== undefined) view.setUint8(46, Number(data.bRevAuthor));
  // 0x2f: u8
  if (data?.bUnderlineColor !== undefined) view.setUint8(47, Number(data.bUnderlineColor));
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHARRANGE (size: 8)
 */
export interface CHARRANGE {
  /** i32 */
  cpMin: number;
  /** i32 */
  cpMax: number;
}

export const sizeofCHARRANGE = 8;

export function allocCHARRANGE(data?: Partial<CHARRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCHARRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cpMin !== undefined) view.setInt32(0, Number(data.cpMin), true);
  // 0x04: i32
  if (data?.cpMax !== undefined) view.setInt32(4, Number(data.cpMax), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.UI.Controls.RichEdit.TEXTRANGEA (size: 16)
 */
export interface TEXTRANGEA {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofTEXTRANGEA = 16;

export function allocTEXTRANGEA(data?: Partial<TEXTRANGEA>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTRANGEA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.TEXTRANGEW (size: 16)
 */
export interface TEXTRANGEW {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofTEXTRANGEW = 16;

export function allocTEXTRANGEW(data?: Partial<TEXTRANGEW>): Uint8Array {
  const buf = new Uint8Array(sizeofTEXTRANGEW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.EDITSTREAM (size: 24)
 */
export interface EDITSTREAM {
  /** usize */
  dwCookie: Deno.PointerValue;
  /** u32 */
  dwError: number;
  /** Windows.Win32.UI.Controls.RichEdit.EDITSTREAMCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEDITSTREAM = 24;

export function allocEDITSTREAM(data?: Partial<EDITSTREAM>): Uint8Array {
  const buf = new Uint8Array(sizeofEDITSTREAM);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwCookie !== undefined) view.setBigUint64(0, BigInt(data.dwCookie), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(16, data.pfnCallback === null ? 0n : BigInt(util.toPointer(data.pfnCallback)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTA (size: 16)
 */
export interface FINDTEXTA {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
}

export const sizeofFINDTEXTA = 16;

export function allocFINDTEXTA(data?: Partial<FINDTEXTA>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTW (size: 16)
 */
export interface FINDTEXTW {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
}

export const sizeofFINDTEXTW = 16;

export function allocFINDTEXTW(data?: Partial<FINDTEXTW>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTEXA (size: 24)
 */
export interface FINDTEXTEXA {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpstrText: string | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrgText: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFINDTEXTEXA = 24;

export function allocFINDTEXTEXA(data?: Partial<FINDTEXTEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.chrgText !== undefined) view.setBigUint64(16, data.chrgText === null ? 0n : BigInt(util.toPointer(data.chrgText)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FINDTEXTEXW (size: 24)
 */
export interface FINDTEXTEXW {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrText: string | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrgText: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFINDTEXTEXW = 24;

export function allocFINDTEXTEXW(data?: Partial<FINDTEXTEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofFINDTEXTEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: buffer
  if (data?.lpstrText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.chrgText !== undefined) view.setBigUint64(16, data.chrgText === null ? 0n : BigInt(util.toPointer(data.chrgText)), true);
  return buf;
}

export type HDC = Deno.PointerValue;

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.FORMATRANGE (size: 40)
 */
export interface FORMATRANGE {
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Gdi.HDC */
  hdcTarget: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rcPage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
}

export const sizeofFORMATRANGE = 40;

export function allocFORMATRANGE(data?: Partial<FORMATRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofFORMATRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hdc !== undefined) view.setBigUint64(0, data.hdc === null ? 0n : BigInt(util.toPointer(data.hdc)), true);
  // 0x08: pointer
  if (data?.hdcTarget !== undefined) view.setBigUint64(8, data.hdcTarget === null ? 0n : BigInt(util.toPointer(data.hdcTarget)), true);
  // 0x10: pointer
  if (data?.rc !== undefined) view.setBigUint64(16, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  // 0x18: pointer
  if (data?.rcPage !== undefined) view.setBigUint64(24, data.rcPage === null ? 0n : BigInt(util.toPointer(data.rcPage)), true);
  // 0x20: pointer
  if (data?.chrg !== undefined) view.setBigUint64(32, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.PARAFORMAT (size: 48)
 */
export interface PARAFORMAT {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_MASK */
  dwMask: PARAFORMAT_MASK;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_NUMBERING */
  wNumbering: PARAFORMAT_NUMBERING;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  dxStartIndent: number;
  /** i32 */
  dxRightIndent: number;
  /** i32 */
  dxOffset: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_ALIGNMENT */
  wAlignment: PARAFORMAT_ALIGNMENT;
  /** i16 */
  cTabCount: number;
  /** array */
  rgxTabs: Deno.PointerValue | null;
}

export const sizeofPARAFORMAT = 48;

export function allocPARAFORMAT(data?: Partial<PARAFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMask !== undefined) view.setUint32(4, Number(data.dwMask), true);
  // 0x08: u16
  if (data?.wNumbering !== undefined) view.setUint16(8, Number(data.wNumbering), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: i32
  if (data?.dxStartIndent !== undefined) view.setInt32(24, Number(data.dxStartIndent), true);
  // 0x1c: i32
  if (data?.dxRightIndent !== undefined) view.setInt32(28, Number(data.dxRightIndent), true);
  // 0x20: i32
  if (data?.dxOffset !== undefined) view.setInt32(32, Number(data.dxOffset), true);
  // 0x24: u16
  if (data?.wAlignment !== undefined) view.setUint16(36, Number(data.wAlignment), true);
  // 0x26: i16
  if (data?.cTabCount !== undefined) view.setInt16(38, Number(data.cTabCount), true);
  // 0x28: pointer
  if (data?.rgxTabs !== undefined) view.setBigUint64(40, data.rgxTabs === null ? 0n : BigInt(util.toPointer(data.rgxTabs)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.PARAFORMAT2 (size: 40)
 */
export interface PARAFORMAT2 {
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT */
  Base: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  dySpaceBefore: number;
  /** i32 */
  dySpaceAfter: number;
  /** i32 */
  dyLineSpacing: number;
  /** i16 */
  sStyle: number;
  /** u8 */
  bLineSpacingRule: number;
  /** u8 */
  bOutlineLevel: number;
  /** u16 */
  wShadingWeight: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_SHADING_STYLE */
  wShadingStyle: PARAFORMAT_SHADING_STYLE;
  /** u16 */
  wNumberingStart: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_NUMBERING_STYLE */
  wNumberingStyle: PARAFORMAT_NUMBERING_STYLE;
  /** u16 */
  wNumberingTab: number;
  /** u16 */
  wBorderSpace: number;
  /** u16 */
  wBorderWidth: number;
  /** Windows.Win32.UI.Controls.RichEdit.PARAFORMAT_BORDERS */
  wBorders: PARAFORMAT_BORDERS;
}

export const sizeofPARAFORMAT2 = 40;

export function allocPARAFORMAT2(data?: Partial<PARAFORMAT2>): Uint8Array {
  const buf = new Uint8Array(sizeofPARAFORMAT2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: i32
  if (data?.dySpaceBefore !== undefined) view.setInt32(8, Number(data.dySpaceBefore), true);
  // 0x0c: i32
  if (data?.dySpaceAfter !== undefined) view.setInt32(12, Number(data.dySpaceAfter), true);
  // 0x10: i32
  if (data?.dyLineSpacing !== undefined) view.setInt32(16, Number(data.dyLineSpacing), true);
  // 0x14: i16
  if (data?.sStyle !== undefined) view.setInt16(20, Number(data.sStyle), true);
  // 0x16: u8
  if (data?.bLineSpacingRule !== undefined) view.setUint8(22, Number(data.bLineSpacingRule));
  // 0x17: u8
  if (data?.bOutlineLevel !== undefined) view.setUint8(23, Number(data.bOutlineLevel));
  // 0x18: u16
  if (data?.wShadingWeight !== undefined) view.setUint16(24, Number(data.wShadingWeight), true);
  // 0x1a: u16
  if (data?.wShadingStyle !== undefined) view.setUint16(26, Number(data.wShadingStyle), true);
  // 0x1c: u16
  if (data?.wNumberingStart !== undefined) view.setUint16(28, Number(data.wNumberingStart), true);
  // 0x1e: u16
  if (data?.wNumberingStyle !== undefined) view.setUint16(30, Number(data.wNumberingStyle), true);
  // 0x20: u16
  if (data?.wNumberingTab !== undefined) view.setUint16(32, Number(data.wNumberingTab), true);
  // 0x22: u16
  if (data?.wBorderSpace !== undefined) view.setUint16(34, Number(data.wBorderSpace), true);
  // 0x24: u16
  if (data?.wBorderWidth !== undefined) view.setUint16(36, Number(data.wBorderWidth), true);
  // 0x26: u16
  if (data?.wBorders !== undefined) view.setUint16(38, Number(data.wBorders), true);
  return buf;
}

export type WPARAM = Deno.PointerValue;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.UI.Controls.RichEdit.MSGFILTER (size: 32)
 */
export interface MSGFILTER {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  msg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSGFILTER = 32;

export function allocMSGFILTER(data?: Partial<MSGFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofMSGFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: u32
  if (data?.msg !== undefined) view.setUint32(8, Number(data.msg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.REQRESIZE (size: 16)
 */
export interface REQRESIZE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.RECT */
  rc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREQRESIZE = 16;

export function allocREQRESIZE(data?: Partial<REQRESIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofREQRESIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.rc !== undefined) view.setBigUint64(8, data.rc === null ? 0n : BigInt(util.toPointer(data.rc)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.SELCHANGE (size: 24)
 */
export interface SELCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE */
  seltyp: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE;
}

export const sizeofSELCHANGE = 24;

export function allocSELCHANGE(data?: Partial<SELCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSELCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.chrg !== undefined) view.setBigUint64(8, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x10: u16
  if (data?.seltyp !== undefined) view.setUint16(16, Number(data.seltyp), true);
  // 0x12: pad6
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.UI.Controls.RichEdit.GROUPTYPINGCHANGE (size: 16)
 */
export interface GROUPTYPINGCHANGE {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fGroupTyping: boolean;
}

export const sizeofGROUPTYPINGCHANGE = 16;

export function allocGROUPTYPINGCHANGE(data?: Partial<GROUPTYPINGCHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUPTYPINGCHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: i32
  if (data?.fGroupTyping !== undefined) view.setInt32(8, Number(data.fGroupTyping), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CLIPBOARDFORMAT (size: 16)
 */
export interface CLIPBOARDFORMAT {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  cf: number;
}

export const sizeofCLIPBOARDFORMAT = 16;

export function allocCLIPBOARDFORMAT(data?: Partial<CLIPBOARDFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLIPBOARDFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: u16
  if (data?.cf !== undefined) view.setUint16(8, Number(data.cf), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Foundation.POINT (size: 8)
 */
export interface POINT {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINT = 8;

export function allocPOINT(data?: Partial<POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GETCONTEXTMENUEX (size: 32)
 */
export interface GETCONTEXTMENUEX {
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.POINT */
  pt: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGETCONTEXTMENUEX = 32;

export function allocGETCONTEXTMENUEX(data?: Partial<GETCONTEXTMENUEX>): Uint8Array {
  const buf = new Uint8Array(sizeofGETCONTEXTMENUEX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.chrg !== undefined) view.setBigUint64(0, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pt !== undefined) view.setBigUint64(16, data.pt === null ? 0n : BigInt(util.toPointer(data.pt)), true);
  // 0x18: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(24, data.pvReserved === null ? 0n : BigInt(util.toPointer(data.pvReserved)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.UI.Controls.RichEdit.ENDROPFILES (size: 24)
 */
export interface ENDROPFILES {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hDrop: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  cp: number;
  /** Windows.Win32.Foundation.BOOL */
  fProtected: boolean;
}

export const sizeofENDROPFILES = 24;

export function allocENDROPFILES(data?: Partial<ENDROPFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofENDROPFILES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.hDrop !== undefined) view.setBigUint64(8, data.hDrop === null ? 0n : BigInt(util.toPointer(data.hDrop)), true);
  // 0x10: i32
  if (data?.cp !== undefined) view.setInt32(16, Number(data.cp), true);
  // 0x14: i32
  if (data?.fProtected !== undefined) view.setInt32(20, Number(data.fProtected), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENPROTECTED (size: 40)
 */
export interface ENPROTECTED {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  msg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENPROTECTED = 40;

export function allocENPROTECTED(data?: Partial<ENPROTECTED>): Uint8Array {
  const buf = new Uint8Array(sizeofENPROTECTED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: u32
  if (data?.msg !== undefined) view.setUint32(8, Number(data.msg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x20: pointer
  if (data?.chrg !== undefined) view.setBigUint64(32, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENSAVECLIPBOARD (size: 16)
 */
export interface ENSAVECLIPBOARD {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  cObjectCount: number;
  /** i32 */
  cch: number;
}

export const sizeofENSAVECLIPBOARD = 16;

export function allocENSAVECLIPBOARD(data?: Partial<ENSAVECLIPBOARD>): Uint8Array {
  const buf = new Uint8Array(sizeofENSAVECLIPBOARD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: i32
  if (data?.cObjectCount !== undefined) view.setInt32(8, Number(data.cObjectCount), true);
  // 0x0c: i32
  if (data?.cch !== undefined) view.setInt32(12, Number(data.cch), true);
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.UI.Controls.RichEdit.ENOLEOPFAILED (size: 24)
 */
export interface ENOLEOPFAILED {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iob: number;
  /** i32 */
  lOper: number;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENOLEOPFAILED = 24;

export function allocENOLEOPFAILED(data?: Partial<ENOLEOPFAILED>): Uint8Array {
  const buf = new Uint8Array(sizeofENOLEOPFAILED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: i32
  if (data?.iob !== undefined) view.setInt32(8, Number(data.iob), true);
  // 0x0c: i32
  if (data?.lOper !== undefined) view.setInt32(12, Number(data.lOper), true);
  // 0x10: pointer
  if (data?.hr !== undefined) view.setBigUint64(16, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.OBJECTPOSITIONS (size: 24)
 */
export interface OBJECTPOSITIONS {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  cObjectCount: number;
  /** ptr */
  pcpPositions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOBJECTPOSITIONS = 24;

export function allocOBJECTPOSITIONS(data?: Partial<OBJECTPOSITIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTPOSITIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: i32
  if (data?.cObjectCount !== undefined) view.setInt32(8, Number(data.cObjectCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pcpPositions !== undefined) view.setBigUint64(16, data.pcpPositions === null ? 0n : BigInt(util.toPointer(data.pcpPositions)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENLINK (size: 40)
 */
export interface ENLINK {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  msg: number;
  /** Windows.Win32.Foundation.WPARAM */
  wParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENLINK = 40;

export function allocENLINK(data?: Partial<ENLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofENLINK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: u32
  if (data?.msg !== undefined) view.setUint32(8, Number(data.msg), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.wParam !== undefined) view.setBigUint64(16, data.wParam === null ? 0n : BigInt(util.toPointer(data.wParam)), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x20: pointer
  if (data?.chrg !== undefined) view.setBigUint64(32, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENLOWFIRTF (size: 16)
 */
export interface ENLOWFIRTF {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  szControl: string | null;
}

export const sizeofENLOWFIRTF = 16;

export function allocENLOWFIRTF(data?: Partial<ENLOWFIRTF>): Uint8Array {
  const buf = new Uint8Array(sizeofENLOWFIRTF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: buffer
  if (data?.szControl !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szControl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.ENCORRECTTEXT (size: 24)
 */
export interface ENCORRECTTEXT {
  /** Windows.Win32.UI.Controls.NMHDR */
  nmhdr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.CHARRANGE */
  chrg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE */
  seltyp: RICH_EDIT_GET_CONTEXT_MENU_SEL_TYPE;
}

export const sizeofENCORRECTTEXT = 24;

export function allocENCORRECTTEXT(data?: Partial<ENCORRECTTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofENCORRECTTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.nmhdr !== undefined) view.setBigUint64(0, data.nmhdr === null ? 0n : BigInt(util.toPointer(data.nmhdr)), true);
  // 0x08: pointer
  if (data?.chrg !== undefined) view.setBigUint64(8, data.chrg === null ? 0n : BigInt(util.toPointer(data.chrg)), true);
  // 0x10: u16
  if (data?.seltyp !== undefined) view.setUint16(16, Number(data.seltyp), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.PUNCTUATION (size: 16)
 */
export interface PUNCTUATION {
  /** u32 */
  iSize: number;
  /** Windows.Win32.Foundation.PSTR */
  szPunctuation: string | null;
}

export const sizeofPUNCTUATION = 16;

export function allocPUNCTUATION(data?: Partial<PUNCTUATION>): Uint8Array {
  const buf = new Uint8Array(sizeofPUNCTUATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iSize !== undefined) view.setUint32(0, Number(data.iSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szPunctuation !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.szPunctuation);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.COMPCOLOR (size: 24)
 */
export interface COMPCOLOR {
  /** Windows.Win32.Foundation.COLORREF */
  crText: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.COLORREF */
  crBackground: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEffects: number;
}

export const sizeofCOMPCOLOR = 24;

export function allocCOMPCOLOR(data?: Partial<COMPCOLOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPCOLOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.crText !== undefined) view.setBigUint64(0, data.crText === null ? 0n : BigInt(util.toPointer(data.crText)), true);
  // 0x08: pointer
  if (data?.crBackground !== undefined) view.setBigUint64(8, data.crBackground === null ? 0n : BigInt(util.toPointer(data.crBackground)), true);
  // 0x10: u32
  if (data?.dwEffects !== undefined) view.setUint32(16, Number(data.dwEffects), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.REPASTESPECIAL (size: 16)
 */
export interface REPASTESPECIAL {
  /** Windows.Win32.System.Com.DVASPECT */
  dwAspect: DVASPECT;
  /** usize */
  dwParam: Deno.PointerValue;
}

export const sizeofREPASTESPECIAL = 16;

export function allocREPASTESPECIAL(data?: Partial<REPASTESPECIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofREPASTESPECIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAspect !== undefined) view.setUint32(0, Number(data.dwAspect), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwParam !== undefined) view.setBigUint64(8, BigInt(data.dwParam), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.SETTEXTEX (size: 8)
 */
export interface SETTEXTEX {
  /** u32 */
  flags: number;
  /** u32 */
  codepage: number;
}

export const sizeofSETTEXTEX = 8;

export function allocSETTEXTEX(data?: Partial<SETTEXTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofSETTEXTEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.codepage !== undefined) view.setUint32(4, Number(data.codepage), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GETTEXTEX (size: 32)
 */
export interface GETTEXTEX {
  /** u32 */
  cb: number;
  /** Windows.Win32.UI.Controls.RichEdit.GETTEXTEX_FLAGS */
  flags: GETTEXTEX_FLAGS;
  /** u32 */
  codepage: number;
  /** Windows.Win32.Foundation.PSTR */
  lpDefaultChar: string | null;
  /** ptr */
  lpUsedDefChar: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGETTEXTEX = 32;

export function allocGETTEXTEX(data?: Partial<GETTEXTEX>): Uint8Array {
  const buf = new Uint8Array(sizeofGETTEXTEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: u32
  if (data?.flags !== undefined) view.setUint32(4, Number(data.flags), true);
  // 0x08: u32
  if (data?.codepage !== undefined) view.setUint32(8, Number(data.codepage), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpDefaultChar !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpDefaultChar);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpUsedDefChar !== undefined) view.setBigUint64(24, data.lpUsedDefChar === null ? 0n : BigInt(util.toPointer(data.lpUsedDefChar)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.GETTEXTLENGTHEX (size: 8)
 */
export interface GETTEXTLENGTHEX {
  /** Windows.Win32.UI.Controls.RichEdit.GETTEXTLENGTHEX_FLAGS */
  flags: GETTEXTLENGTHEX_FLAGS;
  /** u32 */
  codepage: number;
}

export const sizeofGETTEXTLENGTHEX = 8;

export function allocGETTEXTLENGTHEX(data?: Partial<GETTEXTLENGTHEX>): Uint8Array {
  const buf = new Uint8Array(sizeofGETTEXTLENGTHEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flags !== undefined) view.setUint32(0, Number(data.flags), true);
  // 0x04: u32
  if (data?.codepage !== undefined) view.setUint32(4, Number(data.codepage), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.BIDIOPTIONS (size: 8)
 */
export interface BIDIOPTIONS {
  /** u32 */
  cbSize: number;
  /** u16 */
  wMask: number;
  /** u16 */
  wEffects: number;
}

export const sizeofBIDIOPTIONS = 8;

export function allocBIDIOPTIONS(data?: Partial<BIDIOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDIOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.wMask !== undefined) view.setUint16(4, Number(data.wMask), true);
  // 0x06: u16
  if (data?.wEffects !== undefined) view.setUint16(6, Number(data.wEffects), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.HYPHRESULT (size: 16)
 */
export interface HYPHRESULT {
  /** Windows.Win32.UI.Controls.RichEdit.KHYPH */
  khyph: KHYPH;
  /** i32 */
  ichHyph: number;
  /** char */
  chHyph: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHYPHRESULT = 16;

export function allocHYPHRESULT(data?: Partial<HYPHRESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofHYPHRESULT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.khyph !== undefined) view.setInt32(0, Number(data.khyph), true);
  // 0x04: i32
  if (data?.ichHyph !== undefined) view.setInt32(4, Number(data.ichHyph), true);
  // 0x08: pointer
  if (data?.chHyph !== undefined) view.setBigUint64(8, data.chHyph === null ? 0n : BigInt(util.toPointer(data.chHyph)), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.HYPHENATEINFO (size: 16)
 */
export interface HYPHENATEINFO {
  /** i16 */
  cbSize: number;
  /** i16 */
  dxHyphenateZone: number;
  /** isize */
  pfnHyphenate: Deno.PointerValue;
}

export const sizeofHYPHENATEINFO = 16;

export function allocHYPHENATEINFO(data?: Partial<HYPHENATEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHYPHENATEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.cbSize !== undefined) view.setInt16(0, Number(data.cbSize), true);
  // 0x02: i16
  if (data?.dxHyphenateZone !== undefined) view.setInt16(2, Number(data.dxHyphenateZone), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.pfnHyphenate !== undefined) view.setBigInt64(8, BigInt(data.pfnHyphenate), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.CHANGENOTIFY (size: 16)
 */
export interface CHANGENOTIFY {
  /** Windows.Win32.UI.Controls.RichEdit.CHANGETYPE */
  dwChangeType: CHANGETYPE;
  /** ptr */
  pvCookieData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCHANGENOTIFY = 16;

export function allocCHANGENOTIFY(data?: Partial<CHANGENOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofCHANGENOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwChangeType !== undefined) view.setInt32(0, Number(data.dwChangeType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvCookieData !== undefined) view.setBigUint64(8, data.pvCookieData === null ? 0n : BigInt(util.toPointer(data.pvCookieData)), true);
  return buf;
}

export type HBITMAP = Deno.PointerValue;

/**
 * Windows.Win32.UI.Controls.RichEdit.CARET_INFO (size: 16)
 */
export interface CARET_INFO {
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbitmap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.UI.Controls.RichEdit.CARET_FLAGS */
  caretFlags: CARET_FLAGS;
}

export const sizeofCARET_INFO = 16;

export function allocCARET_INFO(data?: Partial<CARET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCARET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hbitmap !== undefined) view.setBigUint64(0, data.hbitmap === null ? 0n : BigInt(util.toPointer(data.hbitmap)), true);
  // 0x08: i32
  if (data?.caretFlags !== undefined) view.setInt32(8, Number(data.caretFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

/**
 * Windows.Win32.UI.Controls.RichEdit.REOBJECT (size: 64)
 */
export interface REOBJECT {
  /** u32 */
  cbStruct: number;
  /** i32 */
  cp: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleObject */
  poleobj: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Com.StructuredStorage.IStorage */
  pstg: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Ole.IOleClientSite */
  polesite: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SIZE */
  sizel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dvaspect: number;
  /** Windows.Win32.UI.Controls.RichEdit.REOBJECT_FLAGS */
  dwFlags: REOBJECT_FLAGS;
  /** u32 */
  dwUser: number;
}

export const sizeofREOBJECT = 64;

export function allocREOBJECT(data?: Partial<REOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofREOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.cp !== undefined) view.setInt32(4, Number(data.cp), true);
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(util.toPointer(data.clsid)), true);
  // 0x10: pointer
  if (data?.poleobj !== undefined) view.setBigUint64(16, data.poleobj === null ? 0n : BigInt(util.toPointer(data.poleobj)), true);
  // 0x18: pointer
  if (data?.pstg !== undefined) view.setBigUint64(24, data.pstg === null ? 0n : BigInt(util.toPointer(data.pstg)), true);
  // 0x20: pointer
  if (data?.polesite !== undefined) view.setBigUint64(32, data.polesite === null ? 0n : BigInt(util.toPointer(data.polesite)), true);
  // 0x28: pointer
  if (data?.sizel !== undefined) view.setBigUint64(40, data.sizel === null ? 0n : BigInt(util.toPointer(data.sizel)), true);
  // 0x30: u32
  if (data?.dvaspect !== undefined) view.setUint32(48, Number(data.dvaspect), true);
  // 0x34: u32
  if (data?.dwFlags !== undefined) view.setUint32(52, Number(data.dwFlags), true);
  // 0x38: u32
  if (data?.dwUser !== undefined) view.setUint32(56, Number(data.dwUser), true);
  // 0x3c: pad4
  return buf;
}

// Native Libraries

// Symbols

