/// Auto-generated by Deno Win32: Windows.Win32.UI.Ribbon.Apis

import * as util from "../../util.ts";

// Enums
export type UI_CONTEXTAVAILABILITY = number;
export type UI_FONTPROPERTIES = number;
export type UI_FONTVERTICALPOSITION = number;
export type UI_FONTUNDERLINE = number;
export type UI_FONTDELTASIZE = number;
export type UI_CONTROLDOCK = number;
export type UI_SWATCHCOLORTYPE = number;
export type UI_SWATCHCOLORMODE = number;
export type UI_EVENTTYPE = number;
export type UI_EVENTLOCATION = number;
export type UI_INVALIDATIONS = number;
export type UI_COLLECTIONCHANGE = number;
export type UI_EXECUTIONVERB = number;
export type UI_COMMANDTYPE = number;
export type UI_VIEWTYPE = number;
export type UI_VIEWVERB = number;
export type UI_OWNERSHIP = number;

// Constants
export const UI_ALL_COMMANDS = 0;
export const UI_COLLECTION_INVALIDINDEX = 4294967295;
export const UI_CONTEXTAVAILABILITY_NOTAVAILABLE = 0;
export const UI_CONTEXTAVAILABILITY_AVAILABLE = 1;
export const UI_CONTEXTAVAILABILITY_ACTIVE = 2;
export const UI_FONTPROPERTIES_NOTAVAILABLE = 0;
export const UI_FONTPROPERTIES_NOTSET = 1;
export const UI_FONTPROPERTIES_SET = 2;
export const UI_FONTVERTICALPOSITION_NOTAVAILABLE = 0;
export const UI_FONTVERTICALPOSITION_NOTSET = 1;
export const UI_FONTVERTICALPOSITION_SUPERSCRIPT = 2;
export const UI_FONTVERTICALPOSITION_SUBSCRIPT = 3;
export const UI_FONTUNDERLINE_NOTAVAILABLE = 0;
export const UI_FONTUNDERLINE_NOTSET = 1;
export const UI_FONTUNDERLINE_SET = 2;
export const UI_FONTDELTASIZE_GROW = 0;
export const UI_FONTDELTASIZE_SHRINK = 1;
export const UI_CONTROLDOCK_TOP = 1;
export const UI_CONTROLDOCK_BOTTOM = 3;
export const UI_SWATCHCOLORTYPE_NOCOLOR = 0;
export const UI_SWATCHCOLORTYPE_AUTOMATIC = 1;
export const UI_SWATCHCOLORTYPE_RGB = 2;
export const UI_SWATCHCOLORMODE_NORMAL = 0;
export const UI_SWATCHCOLORMODE_MONOCHROME = 1;
export const UI_EVENTTYPE_ApplicationMenuOpened = 0;
export const UI_EVENTTYPE_RibbonMinimized = 1;
export const UI_EVENTTYPE_RibbonExpanded = 2;
export const UI_EVENTTYPE_ApplicationModeSwitched = 3;
export const UI_EVENTTYPE_TabActivated = 4;
export const UI_EVENTTYPE_MenuOpened = 5;
export const UI_EVENTTYPE_CommandExecuted = 6;
export const UI_EVENTTYPE_TooltipShown = 7;
export const UI_EVENTLOCATION_Ribbon = 0;
export const UI_EVENTLOCATION_QAT = 1;
export const UI_EVENTLOCATION_ApplicationMenu = 2;
export const UI_EVENTLOCATION_ContextPopup = 3;
export const UI_INVALIDATIONS_STATE = 1;
export const UI_INVALIDATIONS_VALUE = 2;
export const UI_INVALIDATIONS_PROPERTY = 4;
export const UI_INVALIDATIONS_ALLPROPERTIES = 8;
export const UI_COLLECTIONCHANGE_INSERT = 0;
export const UI_COLLECTIONCHANGE_REMOVE = 1;
export const UI_COLLECTIONCHANGE_REPLACE = 2;
export const UI_COLLECTIONCHANGE_RESET = 3;
export const UI_EXECUTIONVERB_EXECUTE = 0;
export const UI_EXECUTIONVERB_PREVIEW = 1;
export const UI_EXECUTIONVERB_CANCELPREVIEW = 2;
export const UI_COMMANDTYPE_UNKNOWN = 0;
export const UI_COMMANDTYPE_GROUP = 1;
export const UI_COMMANDTYPE_ACTION = 2;
export const UI_COMMANDTYPE_ANCHOR = 3;
export const UI_COMMANDTYPE_CONTEXT = 4;
export const UI_COMMANDTYPE_COLLECTION = 5;
export const UI_COMMANDTYPE_COMMANDCOLLECTION = 6;
export const UI_COMMANDTYPE_DECIMAL = 7;
export const UI_COMMANDTYPE_BOOLEAN = 8;
export const UI_COMMANDTYPE_FONT = 9;
export const UI_COMMANDTYPE_RECENTITEMS = 10;
export const UI_COMMANDTYPE_COLORANCHOR = 11;
export const UI_COMMANDTYPE_COLORCOLLECTION = 12;
export const UI_VIEWTYPE_RIBBON = 1;
export const UI_VIEWVERB_CREATE = 0;
export const UI_VIEWVERB_DESTROY = 1;
export const UI_VIEWVERB_SIZE = 2;
export const UI_VIEWVERB_ERROR = 3;
export const UI_OWNERSHIP_TRANSFER = 0;
export const UI_OWNERSHIP_COPY = 1;

// Structs

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.UI.Ribbon.UI_EVENTPARAMS_COMMAND (size: 40)
 */
export interface UI_EVENTPARAMS_COMMAND {
  /** u32 */
  CommandID: number;
  /** Windows.Win32.Foundation.PWSTR */
  CommandName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ParentCommandID: number;
  /** Windows.Win32.Foundation.PWSTR */
  ParentCommandName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  SelectionIndex: number;
  /** Windows.Win32.UI.Ribbon.UI_EVENTLOCATION */
  Location: UI_EVENTLOCATION;
}

export const sizeofUI_EVENTPARAMS_COMMAND = 40;

export function allocUI_EVENTPARAMS_COMMAND(data?: Partial<UI_EVENTPARAMS_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofUI_EVENTPARAMS_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CommandID !== undefined) view.setUint32(0, Number(data.CommandID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CommandName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.CommandName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.ParentCommandID !== undefined) view.setUint32(16, Number(data.ParentCommandID), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ParentCommandName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ParentCommandName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.SelectionIndex !== undefined) view.setUint32(32, Number(data.SelectionIndex), true);
  // 0x24: i32
  if (data?.Location !== undefined) view.setInt32(36, Number(data.Location), true);
  return buf;
}

export class UI_EVENTPARAMS_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CommandID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get CommandName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ParentCommandID(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get ParentCommandName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get SelectionIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get Location(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: u32
  set CommandID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set CommandName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set ParentCommandID(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set ParentCommandName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set SelectionIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set Location(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.UI.Ribbon.UI_EVENTPARAMS (size: 16)
 */
export interface UI_EVENTPARAMS {
  /** Windows.Win32.UI.Ribbon.UI_EVENTTYPE */
  EventType: UI_EVENTTYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofUI_EVENTPARAMS = 16;

export function allocUI_EVENTPARAMS(data?: Partial<UI_EVENTPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofUI_EVENTPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EventType !== undefined) view.setInt32(0, Number(data.EventType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class UI_EVENTPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get EventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set EventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

// Symbols

